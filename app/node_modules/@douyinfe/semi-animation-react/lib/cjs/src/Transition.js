"use strict";

var _WeakMap = require("@babel/runtime-corejs3/core-js-stable/weak-map");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/includes"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _Animation = _interopRequireDefault(require("./Animation"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _noop = _interopRequireDefault(require("./utils/noop"));

function _getRequireWildcardCache(nodeInterop) { if (typeof _WeakMap !== "function") return null; var cacheBabelInterop = new _WeakMap(); var cacheNodeInterop = new _WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { _Object$defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && (0, _indexOf.default)(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _getOwnPropertySymbols.default === "function") for (var i = 0, p = (0, _getOwnPropertySymbols.default)(s); i < p.length; i++) {
    if ((0, _indexOf.default)(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable eqeqeq */


class Transition extends _react.Component {
  constructor() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super(props);

    this._isControlled = () => {
      var _context;

      return (0, _includes.default)(_context = [true, false, 'enter', 'leave']).call(_context, this.props.state);
    };

    this.forwardInstance = instance => {
      this.instance = instance;
    };

    this.onRest = props => {
      const {
        state
      } = this.state;

      if (state === 'enter') {
        this.props.didEnter(props);
      } else if (state === 'leave') {
        this.setState({
          currentChildren: null,
          lastChildren: null
        });
        this.props.didLeave(props);
      }

      this.props.onRest(props);
    };

    this.onStart = props => {
      const {
        state
      } = this.state;

      if (state === 'enter') {
        this.props.willEnter(props);
      } else if (state === 'leave') {
        this.props.willLeave(props);
      }

      this.props.onStart(props);
    };

    this.state = {
      state: '',
      lastChildren: null,
      currentChildren: null
    };
  }

  static getDerivedStateFromProps(props, state) {
    const willUpdateStates = {};

    if (props.children !== state.currentChildren // && (props.children == null || state.currentChildren == null)
    ) {
      willUpdateStates.lastChildren = state.currentChildren;
      willUpdateStates.currentChildren = props.children;

      if (props.children == null) {
        willUpdateStates.state = 'leave';
      } else {
        willUpdateStates.state = 'enter';
      }
    }

    if (props.state != null) {
      willUpdateStates.state = props.state;
    }

    return willUpdateStates;
  }

  componentWillUnmount() {
    if (this.instance) {
      this.instance.destroy();
      this.instance = null;
    }
  }

  render() {
    const _a = this.props,
          {
      from: propsFrom,
      enter,
      leave
    } = _a,
          restProps = __rest(_a, ["from", "enter", "leave"]);

    let children; // eslint-disable-next-line prefer-const

    let {
      currentChildren,
      lastChildren,
      state
    } = this.state;
    let from = {};
    let to = {};

    const isControlled = this._isControlled();

    if (isControlled) {
      children = this.props.children;
      state = this.props.state;
    } else if (currentChildren == null && lastChildren == null) {
      return null;
    }

    if (state === 'enter') {
      from = propsFrom;
      to = enter;

      if (!isControlled) {
        children = currentChildren;
      }
    } else if (state === 'leave') {
      from = enter;
      to = leave;

      if (!isControlled) {
        children = lastChildren;
      }
    }

    return /*#__PURE__*/_react.default.createElement(_Animation.default, (0, _assign.default)({}, restProps, {
      force: true,
      from: from,
      to: to,
      onRest: this.onRest,
      onStart: this.onStart
    }), props => // eslint-disable-next-line no-nested-ternary
    typeof children === 'function' ? children(props) : /*#__PURE__*/(0, _react.isValidElement)(children) ? children : null);
  }

}

exports.default = Transition;
Transition.propTypes = {
  children: _propTypes.default.any,
  from: _propTypes.default.object,
  enter: _propTypes.default.object,
  leave: _propTypes.default.object,
  willEnter: _propTypes.default.func,
  didEnter: _propTypes.default.func,
  willLeave: _propTypes.default.func,
  didLeave: _propTypes.default.func,
  state: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool])
};
Transition.defaultProps = {
  willEnter: _noop.default,
  didEnter: _noop.default,
  willLeave: _noop.default,
  didLeave: _noop.default,
  onStart: _noop.default,
  onRest: _noop.default
};