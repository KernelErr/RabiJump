import _isEmpty from "lodash/isEmpty";
import _isEqual from "lodash/isEqual";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import React from 'react';
import PropTypes from 'prop-types';
export default class ReactIntersectionObserver extends React.PureComponent {
  componentDidMount() {
    const {
      items
    } = this.props;
    this.cachedKeys = _Object$keys(items);
    const {
      root,
      threshold,
      rootMargin,
      option,
      onIntersect
    } = this.props;
    this.observer = new IntersectionObserver(onIntersect, _Object$assign({
      root,
      threshold,
      rootMargin
    }, option));
    this.observeElement();
  }

  componentDidUpdate() {
    const {
      items
    } = this.props;

    const itemKeys = _Object$keys(items);

    if (!_isEqual(this.cachedKeys, itemKeys)) {
      this.observeElement(true);
      this.cachedKeys = itemKeys;
    }
  }

  componentWillUnmount() {
    if (this.observer) {
      this.observer.disconnect();
      this.observer = null;
    }
  }

  observeElement() {
    var _context;

    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    const {
      items
    } = this.props;

    if (_isEmpty(items)) {
      // stop everything if not defined
      this.observer.disconnect();
      return;
    }

    if (force) {
      this.observer.disconnect();
    } // observer callback is invoked immediately when observing new elements


    _forEachInstanceProperty(_context = _Object$keys(items)).call(_context, key => {
      const node = items[key];

      if (!node) {
        return;
      }

      this.observer.observe(node);
    });
  }

  render() {
    const {
      children
    } = this.props;
    return children;
  }

}
ReactIntersectionObserver.propTypes = {
  onIntersect: PropTypes.func,
  option: PropTypes.object,
  root: PropTypes.any,
  threshold: PropTypes.number,
  rootMargin: PropTypes.string,
  items: PropTypes.object
};
ReactIntersectionObserver.defaultProps = {
  onIntersect: () => undefined,
  threshold: 0.75,
  rootMargin: '0px',
  option: {},
  items: {}
};