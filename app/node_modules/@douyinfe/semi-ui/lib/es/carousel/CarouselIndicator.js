import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable jsx-a11y/no-static-element-interactions */

/* eslint-disable jsx-a11y/click-events-have-key-events */


import React from "react";
import cls from 'classnames';
import PropTypes from 'prop-types';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/carousel/constants';
import getDataAttr from '@douyinfe/semi-foundation/lib/es/utils/getDataAttr';

class CarouselIndicator extends React.PureComponent {
  constructor() {
    super(...arguments);

    this.onIndicatorChange = activeIndex => {
      this.props.onIndicatorChange(activeIndex);
    };

    this.handleIndicatorClick = activeIndex => {
      const {
        trigger
      } = this.props;

      if (trigger === 'click') {
        this.onIndicatorChange(activeIndex);
      }
    };

    this.handleIndicatorHover = activeIndex => {
      const {
        trigger
      } = this.props;

      if (trigger === 'hover') {
        this.onIndicatorChange(activeIndex);
      }
    };
  }

  renderIndicatorContent() {
    const {
      total,
      theme,
      size,
      activeIndex
    } = this.props;
    const indicatorContent = [];

    for (let i = 0; i < total; i++) {
      var _context, _context2;

      indicatorContent.push( /*#__PURE__*/React.createElement("span", {
        // role='none' 
        key: i,
        "data-index": i,
        className: cls(["".concat(cssClasses.CAROUSEL_INDICATOR, "-item")], {
          ["".concat(cssClasses.CAROUSEL_INDICATOR, "-item-active")]: i === activeIndex,
          [_concatInstanceProperty(_context = "".concat(cssClasses.CAROUSEL_INDICATOR, "-item-")).call(_context, theme)]: theme,
          [_concatInstanceProperty(_context2 = "".concat(cssClasses.CAROUSEL_INDICATOR, "-item-")).call(_context2, size)]: size
        }),
        onClick: () => this.handleIndicatorClick(i),
        onMouseEnter: () => this.handleIndicatorHover(i)
      }));
    }

    return indicatorContent;
  }

  render() {
    var _context3, _context4;

    const _a = this.props,
          {
      type,
      size,
      theme,
      style,
      className,
      position
    } = _a,
          restProps = __rest(_a, ["type", "size", "theme", "style", "className", "position"]);

    const classNames = cls(className, {
      [cssClasses.CAROUSEL_INDICATOR]: true,
      [_concatInstanceProperty(_context3 = "".concat(cssClasses.CAROUSEL_INDICATOR, "-")).call(_context3, type)]: type,
      [_concatInstanceProperty(_context4 = "".concat(cssClasses.CAROUSEL_INDICATOR, "-")).call(_context4, position)]: position
    });
    const indicatorContent = this.renderIndicatorContent();
    return /*#__PURE__*/React.createElement("div", _Object$assign({
      className: classNames,
      style: style
    }, getDataAttr(restProps)), indicatorContent);
  }

}

CarouselIndicator.propTypes = {
  activeKey: PropTypes.number,
  className: PropTypes.string,
  position: PropTypes.oneOf(strings.POSITION_MAP),
  size: PropTypes.oneOf(strings.SIZE),
  style: PropTypes.object,
  theme: PropTypes.oneOf(strings.THEME_MAP),
  total: PropTypes.number,
  onIndicatorChange: PropTypes.func,
  type: PropTypes.oneOf(strings.TYPE_MAP),
  trigger: PropTypes.oneOf(strings.TRIGGER)
};
export default CarouselIndicator;