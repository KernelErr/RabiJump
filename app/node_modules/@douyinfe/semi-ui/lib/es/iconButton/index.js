import _noop from "lodash/noop";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _includesInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/includes";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable eqeqeq */


import React, { PureComponent } from 'react';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/button/constants';
import { strings as iconStrings } from '@douyinfe/semi-foundation/lib/es/icons/constants';
import Button from '../button/Button';
import SpinIcon from '../spin/icon';
import '@douyinfe/semi-foundation/lib/es/button/iconButton.css';
const iconSizes = iconStrings.SIZE; // TODO: add a buttonGroup component
// TODO: icon configuration

class IconButton extends PureComponent {
  render() {
    const _a = this.props,
          {
      children: originChildren,
      iconPosition,
      iconSize,
      iconStyle,
      style: originStyle,
      icon,
      noHorizontalPadding,
      theme,
      className,
      prefixCls,
      loading
    } = _a,
          otherProps = __rest(_a, ["children", "iconPosition", "iconSize", "iconStyle", "style", "icon", "noHorizontalPadding", "theme", "className", "prefixCls", "loading"]);

    const style = _Object$assign({}, originStyle); // TODO: review check


    if (_Array$isArray(noHorizontalPadding)) {
      _includesInstanceProperty(noHorizontalPadding).call(noHorizontalPadding, 'left') && (style.paddingLeft = 0);
      _includesInstanceProperty(noHorizontalPadding).call(noHorizontalPadding, 'right') && (style.paddingRight = 0);
    } else if (noHorizontalPadding === true) {
      style.paddingLeft = 0;
      style.paddingRight = 0;
    } else if (typeof noHorizontalPadding === 'string') {
      noHorizontalPadding === 'left' && (style.paddingLeft = 0);
      noHorizontalPadding === 'right' && (style.paddingRight = 0);
    }

    let finalChildren = null;
    let IconElem = null;

    if (loading && !otherProps.disabled) {
      IconElem = /*#__PURE__*/React.createElement(SpinIcon, null);
    } else if ( /*#__PURE__*/React.isValidElement(icon)) {
      IconElem = icon;
    }

    const btnTextCls = classNames({
      ["".concat(prefixCls, "-content-left")]: iconPosition === 'right',
      ["".concat(prefixCls, "-content-right")]: iconPosition === 'left'
    });
    const xSemiProp = this.props['x-semi-children-alias'] || 'children';
    const children = originChildren != null ? /*#__PURE__*/React.createElement("span", {
      className: btnTextCls,
      "x-semi-prop": xSemiProp
    }, originChildren) : null;

    if (iconPosition === 'left') {
      finalChildren = /*#__PURE__*/React.createElement(React.Fragment, null, IconElem, children);
    } else {
      finalChildren = /*#__PURE__*/React.createElement(React.Fragment, null, children, IconElem);
    }

    const iconBtnCls = classNames(className, "".concat(prefixCls, "-with-icon"), {
      ["".concat(prefixCls, "-with-icon-only")]: children == null || children === '',
      ["".concat(prefixCls, "-loading")]: loading
    });
    return /*#__PURE__*/React.createElement(Button, _Object$assign({}, otherProps, {
      className: iconBtnCls,
      theme: theme,
      style: style
    }), finalChildren);
  }

}

IconButton.defaultProps = {
  iconPosition: strings.DEFAULT_ICON_POSITION,
  prefixCls: cssClasses.PREFIX,
  loading: false,
  noHorizontalPadding: false,
  onMouseEnter: _noop,
  onMouseLeave: _noop
};
IconButton.propTypes = {
  iconStyle: PropTypes.object,
  style: PropTypes.object,
  loading: PropTypes.bool,
  prefixCls: PropTypes.string,
  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.node]),
  iconSize: PropTypes.oneOf(iconSizes),
  noHorizontalPadding: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.array]),
  children: PropTypes.node,
  theme: PropTypes.string,
  iconPosition: PropTypes.oneOf(strings.iconPositions),
  className: PropTypes.string,
  onMouseEnter: PropTypes.func,
  onMouseLeave: PropTypes.func
};
export default IconButton;