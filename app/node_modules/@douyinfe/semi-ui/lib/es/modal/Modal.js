import _noop from "lodash/noop";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _globalThis from "@babel/runtime-corejs3/core-js/global-this";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable react/destructuring-assignment, prefer-const, @typescript-eslint/no-unused-vars */


import React from 'react';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/modal/constants';
import Button from '../button';
import ModalFoundation from '@douyinfe/semi-foundation/lib/es/modal/modalFoundation';
import ModalContent from './ModalContent';
import Portal from '../_portal';
import LocaleConsumer from '../locale/localeConsumer';
import cls from 'classnames';
import PropTypes from 'prop-types';
import '@douyinfe/semi-foundation/lib/es/modal/modal.css';
import BaseComponent from '../_base/baseComponent';
import confirm, { withConfirm, withError, withInfo, withSuccess, withWarning } from './confirm';
import useModal from './useModal';
export const destroyFns = [];

class Modal extends BaseComponent {
  constructor(props) {
    super(props);

    this.handleCancel = e => {
      this.foundation.handleCancel(e);
    };

    this.handleOk = e => {
      this.foundation.handleOk(e);
    };

    this.updateHiddenState = () => {
      const {
        visible
      } = this.props;
      const {
        hidden
      } = this.state;

      if (!visible && !hidden) {
        this.foundation.toggleHidden(true, () => this.foundation.afterClose());
      } else if (visible && this.state.hidden) {
        this.foundation.toggleHidden(false);
      }
    };

    this.renderFooter = () => {
      const {
        okText,
        okType,
        cancelText,
        confirmLoading,
        cancelLoading,
        hasCancel
      } = this.props;

      const getCancelButton = locale => {
        if (!hasCancel) {
          return null;
        } else {
          return /*#__PURE__*/React.createElement(Button, _Object$assign({
            "aria-label": "cancel",
            onClick: this.handleCancel,
            loading: cancelLoading,
            type: "tertiary",
            autoFocus: true
          }, this.props.cancelButtonProps, {
            "x-semi-children-alias": "cancelText"
          }), cancelText || locale.cancel);
        }
      };

      return /*#__PURE__*/React.createElement(LocaleConsumer, {
        componentName: "Modal"
      }, (locale, localeCode) => /*#__PURE__*/React.createElement("div", null, getCancelButton(locale), /*#__PURE__*/React.createElement(Button, _Object$assign({
        "aria-label": "confirm",
        type: okType,
        theme: "solid",
        loading: confirmLoading,
        onClick: this.handleOk
      }, this.props.okButtonProps, {
        "x-semi-children-alias": "okText"
      }), okText || locale.confirm)));
    }; // getDialog = () => {
    //     const {
    //         footer,
    //         ...restProps
    //     } = this.props;
    //     const renderFooter = 'footer' in this.props ? footer : this.renderFooter();
    //     return <ModalContent {...restProps} footer={renderFooter} onClose={this.handleCancel}/>;
    // };


    this.renderDialog = () => {
      let _a = this.props,
          {
        footer,
        className,
        motion,
        maskStyle: maskStyleFromProps,
        keepDOM,
        style: styleFromProps,
        zIndex,
        getPopupContainer,
        visible
      } = _a,
          restProps = __rest(_a, ["footer", "className", "motion", "maskStyle", "keepDOM", "style", "zIndex", "getPopupContainer", "visible"]);

      let style = styleFromProps;
      const maskStyle = maskStyleFromProps;
      const renderFooter = 'footer' in this.props ? footer : this.renderFooter();

      if (this.props.centered) {
        style = _Object$assign({
          transform: 'translateY(-50%)',
          top: '50%'
        }, style);
      }

      let wrapperStyle = {
        zIndex
      };

      if (getPopupContainer) {
        wrapperStyle = {
          zIndex,
          position: 'static'
        };
      }

      const classList = cls(className, {
        ["".concat(cssClasses.DIALOG, "-displayNone")]: keepDOM && this.state.hidden && !visible
      });
      const contentClassName = motion ? cls({
        ["".concat(cssClasses.DIALOG, "-content-animate-hide")]: !visible,
        ["".concat(cssClasses.DIALOG, "-content-animate-show")]: visible
      }) : null;
      const maskClassName = motion ? cls({
        ["".concat(cssClasses.DIALOG, "-mask-animate-hide")]: !visible,
        ["".concat(cssClasses.DIALOG, "-mask-animate-show")]: visible
      }) : null;
      return /*#__PURE__*/React.createElement(Portal, {
        style: wrapperStyle,
        getPopupContainer: getPopupContainer
      }, /*#__PURE__*/React.createElement(ModalContent, _Object$assign({}, restProps, {
        isFullScreen: this.state.isFullScreen,
        contentClassName: contentClassName,
        maskClassName: maskClassName,
        className: classList,
        getPopupContainer: getPopupContainer,
        maskStyle: maskStyle,
        style: style,
        ref: this.modalRef,
        onAnimationEnd: () => {
          this.updateHiddenState();
        },
        footer: renderFooter,
        onClose: this.handleCancel
      })));
    };

    this.state = {
      hidden: !props.visible,
      isFullScreen: props.fullScreen
    };
    this.foundation = new ModalFoundation(this.adapter);
    this.modalRef = /*#__PURE__*/React.createRef();
    this.bodyOverflow = '';
    this.scrollBarWidth = 0;
    this.originBodyWith = '100%';
  }

  get adapter() {
    return _Object$assign(_Object$assign({}, super.adapter), {
      getProps: () => this.props,
      disabledBodyScroll: () => {
        const {
          getPopupContainer
        } = this.props;
        this.bodyOverflow = document.body.style.overflow || '';

        if (!getPopupContainer && this.bodyOverflow !== 'hidden') {
          var _context;

          document.body.style.overflow = 'hidden';
          document.body.style.width = _concatInstanceProperty(_context = "calc(".concat(this.originBodyWith || '100%', " - ")).call(_context, this.scrollBarWidth, "px)");
        }
      },
      enabledBodyScroll: () => {
        const {
          getPopupContainer
        } = this.props;

        if (!getPopupContainer && this.bodyOverflow !== 'hidden') {
          document.body.style.overflow = this.bodyOverflow;
          document.body.style.width = this.originBodyWith;
        }
      },
      notifyCancel: e => {
        this.props.onCancel(e);
      },
      notifyOk: e => {
        this.props.onOk(e);
      },
      notifyClose: () => {
        var _a, _b;

        (_b = (_a = this.props.motion) === null || _a === void 0 ? void 0 : _a.didLeave) === null || _b === void 0 ? void 0 : _b.call(_a);
        this.props.afterClose();
      },
      toggleHidden: (hidden, callback) => {
        if (hidden !== this.state.hidden) {
          this.setState({
            hidden
          }, callback || _noop);
        }
      },
      notifyFullScreen: isFullScreen => {
        if (isFullScreen !== this.state.isFullScreen) {
          this.setState({
            isFullScreen
          });
        }
      }
    });
  }

  static getDerivedStateFromProps(props, prevState) {
    const newState = {};

    if (props.fullScreen !== prevState.isFullScreen) {
      newState.isFullScreen = props.fullScreen;
    }

    return newState;
  }

  static getScrollbarWidth() {
    if (_globalThis && Object.prototype.toString.call(_globalThis) === '[object Window]') {
      return window.innerWidth - document.documentElement.clientWidth;
    }

    return 0;
  }

  componentDidMount() {
    this.scrollBarWidth = Modal.getScrollbarWidth();
    this.originBodyWith = document.body.style.width;

    if (this.props.visible) {
      this.foundation.beforeShow();
      this._active = this._active || this.props.visible;
    }
  }

  componentDidUpdate(prevProps, prevState, snapshot) {
    // hide => show
    if (!prevProps.visible && this.props.visible) {
      this.foundation.beforeShow();
    } // show => hide


    if (prevProps.visible && !this.props.visible) {
      this.foundation.afterHide();
    }

    if (!this.props.motion) {
      this.updateHiddenState();
    }
  }

  componentWillUnmount() {
    if (this.props.visible) {
      this.foundation.destroy();
    }
  }

  render() {
    const {
      visible,
      keepDOM,
      lazyRender
    } = this.props;
    this._active = this._active || visible;
    const shouldRender = (visible || keepDOM) && (!lazyRender || this._active) || !this.state.hidden;

    if (shouldRender) {
      return this.renderDialog();
    }

    return null;
  }

}

Modal.propTypes = {
  mask: PropTypes.bool,
  closable: PropTypes.bool,
  centered: PropTypes.bool,
  visible: PropTypes.bool,
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  confirmLoading: PropTypes.bool,
  cancelLoading: PropTypes.bool,
  okText: PropTypes.string,
  okType: PropTypes.string,
  cancelText: PropTypes.string,
  maskClosable: PropTypes.bool,
  onCancel: PropTypes.func,
  onOk: PropTypes.func,
  afterClose: PropTypes.func,
  okButtonProps: PropTypes.object,
  cancelButtonProps: PropTypes.object,
  style: PropTypes.object,
  className: PropTypes.string,
  maskStyle: PropTypes.object,
  bodyStyle: PropTypes.object,
  zIndex: PropTypes.number,
  title: PropTypes.node,
  icon: PropTypes.node,
  header: PropTypes.node,
  footer: PropTypes.node,
  hasCancel: PropTypes.bool,
  motion: PropTypes.oneOfType([PropTypes.bool, PropTypes.func, PropTypes.object]),
  children: PropTypes.node,
  getPopupContainer: PropTypes.func,
  getContainerContext: PropTypes.func,
  maskFixed: PropTypes.bool,
  closeIcon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  closeOnEsc: PropTypes.bool,
  size: PropTypes.oneOf(strings.SIZE),
  keepDOM: PropTypes.bool,
  lazyRender: PropTypes.bool,
  direction: PropTypes.oneOf(strings.directions),
  fullScreen: PropTypes.bool
};
Modal.defaultProps = {
  zIndex: 1000,
  motion: true,
  mask: true,
  centered: false,
  closable: true,
  visible: false,
  confirmLoading: false,
  cancelLoading: false,
  okType: 'primary',
  maskClosable: true,
  hasCancel: true,
  onCancel: _noop,
  onOk: _noop,
  afterClose: _noop,
  maskFixed: false,
  closeOnEsc: true,
  size: 'small',
  keepDOM: false,
  lazyRender: true,
  fullScreen: false
};
Modal.useModal = useModal;

Modal.info = function (props) {
  return confirm(withInfo(props));
};

Modal.success = function (props) {
  return confirm(withSuccess(props));
};

Modal.error = function (props) {
  return confirm(withError(props));
};

Modal.warning = function (props) {
  return confirm(withWarning(props));
};

Modal.confirm = function (props) {
  return confirm(withConfirm(props));
};

Modal.destroyAll = function destroyAllFn() {
  while (destroyFns.length) {
    const close = destroyFns.pop();

    if (close) {
      close();
    }
  }
};

export default Modal;