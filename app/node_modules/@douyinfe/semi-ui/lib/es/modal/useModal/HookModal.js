import _get from "lodash/get";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React from 'react';
import ConfirmModal from '../ConfirmModal';

// eslint-disable-next-line max-len
const HookModal = (_a, ref) => {
  var {
    afterClose,
    config
  } = _a,
      props = __rest(_a, ["afterClose", "config"]);

  const [innerConfig, setInnerConfig] = React.useState(config);
  React.useImperativeHandle(ref, () => ({
    destroy: () => {
      setInnerConfig(originConfig => _Object$assign(_Object$assign({}, originConfig), {
        visible: false
      }));
    },
    update: newConfig => {
      setInnerConfig(originConfig => _Object$assign(_Object$assign({}, originConfig), newConfig));
    }
  }));
  const {
    motion
  } = props;
  /* istanbul ignore next */

  const mergedMotion = typeof motion === 'undefined' || motion ? _Object$assign(_Object$assign({}, motion), {
    didLeave: function () {
      const didLeave = _get(props.motion, 'didLeave');

      if (typeof didLeave === 'function') {
        didLeave(...arguments);
      }

      afterClose();
    }
  }) : false;
  return /*#__PURE__*/React.createElement(ConfirmModal, _Object$assign({}, innerConfig, {
    // visible={!visible ? visible : undefined}
    motion: mergedMotion
  }));
};

export default /*#__PURE__*/React.forwardRef(HookModal);