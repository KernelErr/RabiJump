import React from 'react';
import { ModalReactProps } from './Modal';
import '@douyinfe/semi-foundation/lib/es/modal/modal.css';
export interface ConfirmProps extends ModalReactProps {
    type: 'success' | 'info' | 'warning' | 'error' | 'confirm';
}
export default function confirm<T>(props: ConfirmProps): {
    destroy: () => void;
    update: (newConfig: T extends {
        type: Exclude<ConfirmProps['type'], 'confirm'>;
    } ? ModalReactProps : ConfirmProps) => void;
};
export declare function withInfo(props: ModalReactProps): {
    cancelButtonProps?: import("../button").BaseButtonProps;
    children?: React.ReactNode;
    okButtonProps?: import("../button").BaseButtonProps;
    bodyStyle?: React.CSSProperties;
    maskStyle?: React.CSSProperties;
    style?: React.CSSProperties;
    icon: React.ReactNode | JSX.Element;
    closeIcon?: React.ReactNode;
    title?: React.ReactNode;
    content?: React.ReactNode;
    footer?: React.ReactNode;
    header?: React.ReactNode;
    onCancel?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    onOk?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    afterClose?: () => void;
    cancelText?: string;
    centered?: boolean;
    className?: string;
    closable?: boolean;
    confirmLoading?: boolean;
    cancelLoading?: boolean;
    hasCancel?: boolean;
    height?: string | number;
    mask?: boolean;
    maskClosable?: boolean;
    maskFixed?: boolean;
    motion?: import("@douyinfe/semi-foundation/lib/es/utils/type").Motion<any>;
    okText?: string;
    okType?: import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").OKType;
    visible?: boolean;
    width?: string | number;
    zIndex?: number;
    getPopupContainer?: () => HTMLElement;
    closeOnEsc?: boolean;
    size?: import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").Size;
    lazyRender?: boolean;
    keepDOM?: boolean;
    direction?: any;
    fullScreen?: boolean;
    preventScroll?: boolean;
    type: "info";
};
export declare function withSuccess(props: ModalReactProps): {
    cancelButtonProps?: import("../button").BaseButtonProps;
    children?: React.ReactNode;
    okButtonProps?: import("../button").BaseButtonProps;
    bodyStyle?: React.CSSProperties;
    maskStyle?: React.CSSProperties;
    style?: React.CSSProperties;
    icon: React.ReactNode | JSX.Element;
    closeIcon?: React.ReactNode;
    title?: React.ReactNode;
    content?: React.ReactNode;
    footer?: React.ReactNode;
    header?: React.ReactNode;
    onCancel?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    onOk?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    afterClose?: () => void;
    cancelText?: string;
    centered?: boolean;
    className?: string;
    closable?: boolean;
    confirmLoading?: boolean;
    cancelLoading?: boolean;
    hasCancel?: boolean;
    height?: string | number;
    mask?: boolean;
    maskClosable?: boolean;
    maskFixed?: boolean;
    motion?: import("@douyinfe/semi-foundation/lib/es/utils/type").Motion<any>;
    okText?: string;
    okType?: import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").OKType;
    visible?: boolean;
    width?: string | number;
    zIndex?: number;
    getPopupContainer?: () => HTMLElement;
    closeOnEsc?: boolean;
    size?: import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").Size;
    lazyRender?: boolean;
    keepDOM?: boolean;
    direction?: any;
    fullScreen?: boolean;
    preventScroll?: boolean;
    type: "success";
};
export declare function withWarning(props: ModalReactProps): {
    cancelButtonProps?: import("../button").BaseButtonProps;
    children?: React.ReactNode;
    okButtonProps?: import("../button").BaseButtonProps;
    bodyStyle?: React.CSSProperties;
    maskStyle?: React.CSSProperties;
    style?: React.CSSProperties;
    icon: React.ReactNode | JSX.Element;
    closeIcon?: React.ReactNode;
    title?: React.ReactNode;
    content?: React.ReactNode;
    footer?: React.ReactNode;
    header?: React.ReactNode;
    onCancel?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    onOk?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    afterClose?: () => void;
    cancelText?: string;
    centered?: boolean;
    className?: string;
    closable?: boolean;
    confirmLoading?: boolean;
    cancelLoading?: boolean;
    hasCancel?: boolean;
    height?: string | number;
    mask?: boolean;
    maskClosable?: boolean;
    maskFixed?: boolean;
    motion?: import("@douyinfe/semi-foundation/lib/es/utils/type").Motion<any>;
    okText?: string;
    okType?: import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").OKType;
    visible?: boolean;
    width?: string | number;
    zIndex?: number;
    getPopupContainer?: () => HTMLElement;
    closeOnEsc?: boolean;
    size?: import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").Size;
    lazyRender?: boolean;
    keepDOM?: boolean;
    direction?: any;
    fullScreen?: boolean;
    preventScroll?: boolean;
    type: "warning";
};
export declare function withError(props: ModalReactProps): {
    cancelButtonProps?: import("../button").BaseButtonProps;
    children?: React.ReactNode;
    okButtonProps?: import("../button").BaseButtonProps;
    bodyStyle?: React.CSSProperties;
    maskStyle?: React.CSSProperties;
    style?: React.CSSProperties;
    icon: React.ReactNode | JSX.Element;
    closeIcon?: React.ReactNode;
    title?: React.ReactNode;
    content?: React.ReactNode;
    footer?: React.ReactNode;
    header?: React.ReactNode;
    onCancel?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    onOk?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    afterClose?: () => void;
    cancelText?: string;
    centered?: boolean;
    className?: string;
    closable?: boolean;
    confirmLoading?: boolean;
    cancelLoading?: boolean;
    hasCancel?: boolean;
    height?: string | number;
    mask?: boolean;
    maskClosable?: boolean;
    maskFixed?: boolean;
    motion?: import("@douyinfe/semi-foundation/lib/es/utils/type").Motion<any>;
    okText?: string;
    okType?: import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").OKType;
    visible?: boolean;
    width?: string | number;
    zIndex?: number;
    getPopupContainer?: () => HTMLElement;
    closeOnEsc?: boolean;
    size?: import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").Size;
    lazyRender?: boolean;
    keepDOM?: boolean;
    direction?: any;
    fullScreen?: boolean;
    preventScroll?: boolean;
    type: "error";
};
export declare function withConfirm(props: ModalReactProps): {
    cancelButtonProps?: import("../button").BaseButtonProps;
    children?: React.ReactNode;
    okButtonProps?: import("../button").BaseButtonProps;
    bodyStyle?: React.CSSProperties;
    maskStyle?: React.CSSProperties;
    style?: React.CSSProperties;
    icon: React.ReactNode | JSX.Element;
    closeIcon?: React.ReactNode;
    title?: React.ReactNode;
    content?: React.ReactNode;
    footer?: React.ReactNode;
    header?: React.ReactNode;
    onCancel?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    onOk?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    afterClose?: () => void;
    cancelText?: string;
    centered?: boolean;
    className?: string;
    closable?: boolean;
    confirmLoading?: boolean;
    cancelLoading?: boolean;
    hasCancel?: boolean;
    height?: string | number;
    mask?: boolean;
    maskClosable?: boolean;
    maskFixed?: boolean;
    motion?: import("@douyinfe/semi-foundation/lib/es/utils/type").Motion<any>;
    okText?: string;
    okType?: import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").OKType;
    visible?: boolean;
    width?: string | number;
    zIndex?: number;
    getPopupContainer?: () => HTMLElement;
    closeOnEsc?: boolean;
    size?: import("@douyinfe/semi-foundation/lib/es/modal/modalFoundation").Size;
    lazyRender?: boolean;
    keepDOM?: boolean;
    direction?: any;
    fullScreen?: boolean;
    preventScroll?: boolean;
    type: "confirm";
};
