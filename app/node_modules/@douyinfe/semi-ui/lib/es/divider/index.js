import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React from 'react';
import cls from 'classnames';
import { cssClasses } from '@douyinfe/semi-foundation/lib/es/divider/constants';
import '@douyinfe/semi-foundation/lib/es/divider/divider.css';
const prefixCls = cssClasses.PREFIX;

const Divider = props => {
  var _context;

  const {
    layout = 'horizontal',
    dashed,
    align = 'center',
    className,
    margin,
    style,
    children
  } = props,
        rest = __rest(props, ["layout", "dashed", "align", "className", "margin", "style", "children"]);

  const dividerClassNames = cls("".concat(prefixCls, "-divider"), className, {
    ["".concat(prefixCls, "-divider-horizontal")]: layout === 'horizontal',
    ["".concat(prefixCls, "-divider-vertical")]: layout === 'vertical',
    ["".concat(prefixCls, "-divider-dashed")]: !!dashed,
    ["".concat(prefixCls, "-divider-with-text")]: children && layout === 'horizontal',
    [_concatInstanceProperty(_context = "".concat(prefixCls, "-divider-with-text-")).call(_context, align)]: children && layout === 'horizontal'
  });
  let overrideDefaultStyle = {};

  if (margin !== undefined) {
    if (layout === 'vertical') {
      overrideDefaultStyle = {
        'marginLeft': margin,
        'marginRight': margin
      };
    } else if (layout === 'horizontal') {
      overrideDefaultStyle = {
        'marginTop': margin,
        'marginBottom': margin
      };
    }
  }

  return /*#__PURE__*/React.createElement("div", _Object$assign({}, rest, {
    className: dividerClassNames,
    style: _Object$assign(_Object$assign({}, overrideDefaultStyle), style)
  }), children && layout === 'horizontal' ? typeof children === 'string' ? /*#__PURE__*/React.createElement("span", {
    className: "".concat(prefixCls, "-divider_inner-text"),
    "x-semi-prop": "children"
  }, children) : children : null);
};

export default Divider;