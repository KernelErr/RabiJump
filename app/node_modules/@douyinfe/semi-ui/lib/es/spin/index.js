import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import React from 'react';
import PropTypes from 'prop-types';
import cls from 'classnames';
import BaseComponent from '../_base/baseComponent';
import { cssClasses as css, strings } from '@douyinfe/semi-foundation/lib/es/spin/constants';
import SpinFoundation from '@douyinfe/semi-foundation/lib/es/spin/foundation';
import SpinIcon from './icon';
import '@douyinfe/semi-foundation/lib/es/spin/spin.css';
const prefixCls = css.PREFIX;

class Spin extends BaseComponent {
  constructor(props) {
    super(props);
    this.foundation = new SpinFoundation(this.adapter);
    this.state = {
      delay: props.delay,
      loading: true
    };
  }

  static getDerivedStateFromProps(props) {
    if (!props.delay) {
      return {
        loading: props.spinning
      };
    }

    if (props.spinning === false) {
      return {
        delay: 0,
        loading: false
      };
    }

    return {
      delay: props.delay
    };
  }

  get adapter() {
    return _Object$assign(_Object$assign({}, super.adapter), {
      setLoading: value => {
        this.setState({
          loading: value
        });
      }
    });
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  renderSpin() {
    const {
      indicator,
      tip
    } = this.props;
    const {
      loading
    } = this.state;
    const spinIconCls = cls({
      ["".concat(prefixCls, "-animate")]: loading
    });
    return loading ? /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-wrapper")
    }, indicator ? /*#__PURE__*/React.createElement("div", {
      className: spinIconCls,
      "x-semi-prop": "indicator"
    }, indicator) : /*#__PURE__*/React.createElement(SpinIcon, null), tip ? /*#__PURE__*/React.createElement("div", {
      "x-semi-prop": "tip"
    }, tip) : null) : null;
  }

  render() {
    var _context;

    this.foundation.updateLoadingIfNeedDelay();
    const {
      children,
      style,
      wrapperClassName,
      childStyle,
      size
    } = this.props;
    const {
      loading
    } = this.state;
    const spinCls = cls(prefixCls, wrapperClassName, {
      [_concatInstanceProperty(_context = "".concat(prefixCls, "-")).call(_context, size)]: size,
      ["".concat(prefixCls, "-block")]: children,
      ["".concat(prefixCls, "-hidden")]: !loading
    });
    return /*#__PURE__*/React.createElement("div", {
      className: spinCls,
      style: style
    }, this.renderSpin(), /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-children"),
      style: childStyle,
      "x-semi-prop": "children"
    }, children));
  }

}

Spin.propTypes = {
  size: PropTypes.oneOf(strings.SIZE),
  spinning: PropTypes.bool,
  children: PropTypes.node,
  indicator: PropTypes.node,
  delay: PropTypes.number,
  tip: PropTypes.node,
  wrapperClassName: PropTypes.string,
  childStyle: PropTypes.object,
  style: PropTypes.object
};
Spin.defaultProps = {
  size: 'middle',
  spinning: true,
  children: null,
  indicator: null,
  delay: 0
};
export default Spin;