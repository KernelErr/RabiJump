import _isEqual from "lodash/isEqual";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import React from 'react';
import cls from 'classnames';
import PropTypes from 'prop-types';
import CalendarFoundation from '@douyinfe/semi-foundation/lib/es/calendar/foundation';
import { cssClasses } from '@douyinfe/semi-foundation/lib/es/calendar/constants';
import DayCol from './dayCol';
import TimeCol from './timeCol';
import BaseComponent from '../_base/baseComponent';
import LocaleConsumer from '../locale/localeConsumer';
import localeContext from '../locale/context';
import '@douyinfe/semi-foundation/lib/es/calendar/calendar.css';
const prefixCls = "".concat(cssClasses.PREFIX, "-day");
export default class DayCalendar extends BaseComponent {
  constructor(props) {
    super(props);

    this.checkWeekend = val => this.foundation.checkWeekend(val);

    this.renderAllDayEvents = events => {
      const list = _mapInstanceProperty(events).call(events, (event, ind) => {
        var _context;

        const {
          children,
          key
        } = event;
        return (
          /*#__PURE__*/
          // eslint-disable-next-line max-len
          React.createElement("li", {
            className: _concatInstanceProperty(_context = "".concat(cssClasses.PREFIX, "-event-item ")).call(_context, cssClasses.PREFIX, "-event-allday"),
            key: key || "allDay-".concat(ind)
          }, children)
        );
      });

      return list;
    };

    this.handleClick = (e, val) => {
      const {
        onClick
      } = this.props;
      const value = this.foundation.formatCbValue(val);
      onClick && onClick(e, value);
    };

    this.renderAllDay = events => {
      const allDayCls = "".concat(cssClasses.PREFIX, "-all-day");
      const contentCls = cls("".concat(allDayCls, "-content"), {
        ["".concat(cssClasses.PREFIX, "-weekend")]: this.isWeekend
      });
      return /*#__PURE__*/React.createElement(LocaleConsumer, {
        componentName: "Calendar"
      }, locale => {
        var _context2, _context3;

        return /*#__PURE__*/React.createElement("div", {
          className: "".concat(allDayCls)
        }, /*#__PURE__*/React.createElement("ul", {
          className: _concatInstanceProperty(_context2 = _concatInstanceProperty(_context3 = "".concat(cssClasses.PREFIX, "-tag ")).call(_context3, allDayCls, "-tag ")).call(_context2, prefixCls, "-sticky-left")
        }, /*#__PURE__*/React.createElement("span", null, locale.allDay)), /*#__PURE__*/React.createElement("div", {
          role: "gridcell",
          className: contentCls
        }, /*#__PURE__*/React.createElement("ul", {
          className: "".concat(cssClasses.PREFIX, "-event-items")
        }, this.renderAllDayEvents(events))));
      });
    };

    this.foundation = new CalendarFoundation(this.adapter);
    this.state = {
      scrollHeight: 0,
      parsedEvents: {
        day: [],
        allDay: []
      },
      cachedKeys: []
    };
    this.dom = /*#__PURE__*/React.createRef();
    this.scrollDom = /*#__PURE__*/React.createRef();
    this.isWeekend = false;
  }

  get adapter() {
    return _Object$assign(_Object$assign({}, super.adapter), {
      updateScrollHeight: scrollHeight => {
        this.setState({
          scrollHeight
        });
      },
      setParsedEvents: parsedEvents => {
        this.setState({
          parsedEvents: parsedEvents
        });
      },
      cacheEventKeys: cachedKeys => {
        this.setState({
          cachedKeys
        });
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
    const {
      scrollHeight
    } = this.scrollDom.current;
    this.dom.current.scrollTop = this.props.scrollTop;
    this.foundation.notifyScrollHeight(scrollHeight);
    this.foundation.parseDailyEvents();
  }

  componentDidUpdate(prevProps, prevState) {
    var _context4;

    const prevEventKeys = prevState.cachedKeys;

    const nowEventKeys = _mapInstanceProperty(_context4 = this.props.events).call(_context4, event => event.key);

    if (!_isEqual(prevEventKeys, nowEventKeys)) {
      this.foundation.parseDailyEvents();
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  render() {
    // eslint-disable-next-line max-len
    const {
      dateGridRender,
      displayValue,
      showCurrTime,
      renderTimeDisplay,
      markWeekend,
      className,
      height,
      width,
      style,
      header
    } = this.props;
    const dayCls = cls(prefixCls, className);

    const dayStyle = _Object$assign({
      height,
      width
    }, style);

    const {
      parsedEvents,
      scrollHeight
    } = this.state;
    this.isWeekend = markWeekend && this.checkWeekend(displayValue);
    return /*#__PURE__*/React.createElement("div", {
      className: dayCls,
      style: dayStyle,
      ref: this.dom
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-sticky-top")
    }, header, this.renderAllDay(parsedEvents.allDay)), /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-scroll-wrapper")
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-scroll"),
      ref: this.scrollDom
    }, /*#__PURE__*/React.createElement(TimeCol, {
      className: "".concat(prefixCls, "-sticky-left"),
      renderTimeDisplay: renderTimeDisplay
    }), /*#__PURE__*/React.createElement(DayCol, {
      events: parsedEvents.day,
      displayValue: displayValue,
      scrollHeight: scrollHeight,
      handleClick: this.handleClick,
      showCurrTime: showCurrTime,
      isWeekend: this.isWeekend,
      dateGridRender: dateGridRender
    }))));
  }

}
DayCalendar.propTypes = {
  displayValue: PropTypes.instanceOf(Date),
  events: PropTypes.array,
  header: PropTypes.node,
  showCurrTime: PropTypes.bool,
  onClick: PropTypes.func,
  mode: PropTypes.string,
  renderTimeDisplay: PropTypes.func,
  markWeekend: PropTypes.bool,
  scrollTop: PropTypes.number,
  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  style: PropTypes.object,
  className: PropTypes.string,
  dateGridRender: PropTypes.func
};
DayCalendar.defaultProps = {
  events: [],
  displayValue: new Date(),
  mode: 'day'
};
DayCalendar.contextType = localeContext;