import _noop from "lodash/noop";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { radioGroupClasses as css, strings } from '@douyinfe/semi-foundation/lib/es/radio/constants';
import RadioGroupFoundation from '@douyinfe/semi-foundation/lib/es/radio/radioGroupFoundation';
import BaseComponent from '../_base/baseComponent';
import Radio from './radio';
import Context from './context';

class RadioGroup extends BaseComponent {
  constructor(props) {
    super(props);

    this.onChange = evt => {
      this.foundation.handleChange(evt);
    };

    this.getFormatName = () => this.props.name || 'default';

    this.state = {
      value: undefined
    };
    this.foundation = new RadioGroupFoundation(this.adapter);
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentDidUpdate(prevProps) {
    if (typeof prevProps.value === 'number' && isNaN(prevProps.value) && typeof this.props.value === 'number' && isNaN(this.props.value)) {
      // `NaN === NaN` returns false, and this will fail the next if check
      // therefore triggering an infinite loop
      return;
    }

    if (prevProps.value !== this.props.value) {
      this.foundation.handlePropValueChange(this.props.value);
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  get adapter() {
    return _Object$assign(_Object$assign({}, super.adapter), {
      setValue: value => {
        this.setState({
          value
        });
      },
      getProps: () => this.props,
      isInProps: name => Boolean(name in this.props),
      notifyChange: evt => {
        this.props.onChange && this.props.onChange(evt);
      }
    });
  }

  render() {
    var _context, _context2, _context3;

    const {
      children,
      options,
      mode,
      prefixCls,
      className,
      style,
      direction,
      type,
      buttonSize,
      id
    } = this.props;
    const isButtonRadio = type === strings.TYPE_BUTTON;
    const isPureCardRadio = type === strings.TYPE_PURECARD;
    const isCardRadio = type === strings.TYPE_CARD || isPureCardRadio;
    const isDefaultRadio = type === strings.TYPE_DEFAULT;
    const prefix = prefixCls || css.PREFIX;
    const prefixClsDisplay = classnames(className, {
      [prefix]: true,
      ["".concat(prefix, "-wrapper")]: true,
      [_concatInstanceProperty(_context = "".concat(prefix, "-")).call(_context, direction)]: direction && !isButtonRadio,
      [_concatInstanceProperty(_context2 = "".concat(prefix, "-")).call(_context2, direction, "-default")]: direction && isDefaultRadio,
      [_concatInstanceProperty(_context3 = "".concat(prefix, "-")).call(_context3, direction, "-card")]: direction && isCardRadio,
      ["".concat(prefix, "-buttonRadio")]: isButtonRadio
    });
    const realValue = this.state.value;
    let inner;

    if (options) {
      var _context4;

      inner = _mapInstanceProperty(_context4 = options || []).call(_context4, (option, index) => {
        if (typeof option === 'string') {
          return /*#__PURE__*/React.createElement(Radio, {
            key: index,
            disabled: this.props.disabled,
            value: option
          }, option);
        } else {
          return /*#__PURE__*/React.createElement(Radio, {
            key: index,
            disabled: option.disabled || this.props.disabled,
            value: option.value,
            extra: option.extra,
            className: option.className,
            style: option.style
          }, option.label);
        }
      });
    } else if (children) {
      var _context5;

      inner = _mapInstanceProperty(_context5 = React.Children).call(_context5, children, (itm, index) => /*#__PURE__*/React.isValidElement(itm) ? /*#__PURE__*/React.cloneElement(itm, {
        key: index
      }) : null);
    }

    return /*#__PURE__*/React.createElement("div", {
      className: prefixClsDisplay,
      style: style,
      id: id,
      "aria-label": this.props['aria-label'],
      "aria-invalid": this.props['aria-invalid'],
      "aria-errormessage": this.props['aria-errormessage'],
      "aria-labelledby": this.props['aria-labelledby'],
      "aria-describedby": this.props['aria-describedby'],
      "aria-required": this.props['aria-required']
    }, /*#__PURE__*/React.createElement(Context.Provider, {
      value: {
        radioGroup: {
          onChange: this.onChange,
          value: realValue,
          disabled: this.props.disabled,
          name: this.getFormatName(),
          isButtonRadio,
          isCardRadio,
          isPureCardRadio,
          buttonSize,
          prefixCls
        },
        mode
      }
    }, inner));
  }

}

RadioGroup.propTypes = {
  defaultValue: PropTypes.any,
  disabled: PropTypes.bool,
  name: PropTypes.string,
  options: PropTypes.array,
  buttonSize: PropTypes.oneOf(strings.BUTTON_SIZE),
  type: PropTypes.oneOf([strings.TYPE_DEFAULT, strings.TYPE_BUTTON, strings.TYPE_CARD, strings.TYPE_PURECARD]),
  value: PropTypes.any,
  onChange: PropTypes.func,
  children: PropTypes.node,
  prefixCls: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object,
  direction: PropTypes.oneOf(strings.DIRECTION_SET),
  mode: PropTypes.oneOf(strings.MODE),
  'aria-label': PropTypes.string,
  'aria-describedby': PropTypes.string,
  'aria-errormessage': PropTypes.string,
  'aria-invalid': PropTypes.bool,
  'aria-labelledby': PropTypes.string,
  'aria-required': PropTypes.bool,
  id: PropTypes.string
};
RadioGroup.defaultProps = {
  disabled: false,
  onChange: _noop,
  direction: strings.DEFAULT_DIRECTION,
  mode: '',
  type: strings.TYPE_DEFAULT,
  buttonSize: 'middle'
};
export default RadioGroup;