import React from 'react';
import PropTypes from 'prop-types';
import { DropdownContextType } from './context';
import BaseComponent, { BaseProps } from '../_base/baseComponent';
export declare type Type = 'primary' | 'secondary' | 'tertiary' | 'warning' | 'danger';
export interface DropdownItemProps extends BaseProps {
    disabled?: boolean;
    selected?: boolean;
    onClick?: React.MouseEventHandler<HTMLLIElement>;
    onMouseEnter?: React.MouseEventHandler<HTMLLIElement>;
    onMouseLeave?: React.MouseEventHandler<HTMLLIElement>;
    onContextMenu?: React.MouseEventHandler<HTMLLIElement>;
    forwardRef?: (ele: HTMLLIElement) => void;
    type?: Type;
    active?: boolean;
    icon?: React.ReactNode;
}
declare class DropdownItem extends BaseComponent<DropdownItemProps> {
    static propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        name: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        selected: PropTypes.Requireable<boolean>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
        onContextMenu: PropTypes.Requireable<(...args: any[]) => any>;
        className: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        forwardRef: PropTypes.Requireable<(...args: any[]) => any>;
        type: PropTypes.Requireable<string>;
        active: PropTypes.Requireable<boolean>;
        icon: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    };
    static contextType: React.Context<DropdownContextType>;
    context: DropdownContextType;
    static defaultProps: {
        disabled: boolean;
        divided: boolean;
        selected: boolean;
        onMouseEnter: (...args: any[]) => void;
        onMouseLeave: (...args: any[]) => void;
        forwardRef: (...args: any[]) => void;
    };
    render(): JSX.Element;
}
export default DropdownItem;
