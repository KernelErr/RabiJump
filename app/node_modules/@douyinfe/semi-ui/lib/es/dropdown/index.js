import _get from "lodash/get";
import _noop from "lodash/noop";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React from 'react';
import classnames from 'classnames';
import PropTypes from 'prop-types';
import { cssClasses, strings, numbers } from '@douyinfe/semi-foundation/lib/es/dropdown/constants';
import BaseComponent from '../_base/baseComponent';
import Tooltip from '../tooltip/index';
import { numbers as tooltipNumbers } from '@douyinfe/semi-foundation/lib/es/tooltip/constants';
import Foundation from '@douyinfe/semi-foundation/lib/es/dropdown/foundation';
import DropdownMenu from './dropdownMenu';
import DropdownItem from './dropdownItem';
import DropdownDivider from './dropdownDivider';
import DropdownTitle from './dropdownTitle';
import DropdownContext from './context';
import '@douyinfe/semi-foundation/lib/es/dropdown/dropdown.css';
const positionSet = strings.POSITION_SET;
const triggerSet = strings.TRIGGER_SET;

class Dropdown extends BaseComponent {
  constructor(props) {
    super(props);

    this.handleVisibleChange = visible => this.foundation.handleVisibleChange(visible);

    this.state = {
      popVisible: props.visible
    };
    this.foundation = new Foundation(this.adapter);
  }

  get adapter() {
    return _Object$assign(_Object$assign({}, super.adapter), {
      setPopVisible: popVisible => this.setState({
        popVisible
      }),
      notifyVisibleChange: visible => this.props.onVisibleChange(visible)
    });
  }

  renderContent() {
    const {
      render,
      menu,
      contentClassName,
      style,
      showTick,
      prefixCls,
      trigger
    } = this.props;
    const className = classnames(prefixCls, contentClassName);
    const {
      level = 0
    } = this.context;
    const contextValue = {
      showTick,
      level: level + 1,
      trigger
    };
    let content = null;

    if ( /*#__PURE__*/React.isValidElement(render)) {
      content = render;
    } else if (_Array$isArray(menu)) {
      content = this.renderMenu();
    }

    return /*#__PURE__*/React.createElement(DropdownContext.Provider, {
      value: contextValue
    }, /*#__PURE__*/React.createElement("div", {
      className: className,
      style: style
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-content"),
      "x-semi-prop": "render"
    }, content)));
  }

  renderMenu() {
    const {
      menu
    } = this.props;

    const content = _mapInstanceProperty(menu).call(menu, (m, index) => {
      switch (m.node) {
        case 'title':
          {
            const {
              name,
              node
            } = m,
                  rest = __rest(m, ["name", "node"]);

            return /*#__PURE__*/React.createElement(Dropdown.Title, _Object$assign({}, rest, {
              key: node + name + index
            }), name);
          }

        case 'item':
          {
            const {
              node,
              name
            } = m,
                  rest = __rest(m, ["node", "name"]);

            return /*#__PURE__*/React.createElement(Dropdown.Item, _Object$assign({}, rest, {
              key: node + name + index
            }), name);
          }

        case 'divider':
          {
            return /*#__PURE__*/React.createElement(Dropdown.Divider, {
              key: m.node + index
            });
          }

        default:
          return null;
      }
    });

    return /*#__PURE__*/React.createElement(Dropdown.Menu, null, content);
  }

  renderPopCard() {
    const {
      render,
      contentClassName,
      style,
      showTick,
      prefixCls
    } = this.props;
    const className = classnames(prefixCls, contentClassName);
    const {
      level = 0
    } = this.context;
    const contextValue = {
      showTick,
      level: level + 1
    };
    return /*#__PURE__*/React.createElement(DropdownContext.Provider, {
      value: contextValue
    }, /*#__PURE__*/React.createElement("div", {
      className: className,
      style: style
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-content")
    }, render)));
  }

  render() {
    const _a = this.props,
          {
      children,
      position,
      trigger,
      onVisibleChange,
      zIndex,
      className,
      motion,
      style,
      prefixCls
    } = _a,
          attr = __rest(_a, ["children", "position", "trigger", "onVisibleChange", "zIndex", "className", "motion", "style", "prefixCls"]);

    let {
      spacing
    } = this.props;
    const {
      level
    } = this.context;
    const {
      popVisible
    } = this.state;
    const pop = this.renderContent();

    if (level > 0) {
      spacing = typeof spacing === 'number' ? spacing : numbers.NESTED_SPACING;
    } else if (spacing === null || typeof spacing === 'undefined') {
      spacing = numbers.SPACING;
    }

    return /*#__PURE__*/React.createElement(Tooltip, _Object$assign({
      zIndex: zIndex,
      motion: motion,
      content: pop,
      className: className,
      prefixCls: prefixCls,
      spacing: spacing,
      position: position,
      trigger: trigger,
      onVisibleChange: this.handleVisibleChange,
      showArrow: false,
      returnFocusOnClose: true
    }, attr), /*#__PURE__*/React.isValidElement(children) ? /*#__PURE__*/React.cloneElement(children, {
      className: classnames(_get(children, 'props.className'), {
        ["".concat(prefixCls, "-showing")]: popVisible
      }),
      'aria-haspopup': true,
      'aria-expanded': popVisible,
      onKeyDown: e => this.foundation.handleKeyDown(e)
    }) : children);
  }

}

Dropdown.Menu = DropdownMenu;
Dropdown.Item = DropdownItem;
Dropdown.Divider = DropdownDivider;
Dropdown.Title = DropdownTitle;
Dropdown.contextType = DropdownContext;
Dropdown.propTypes = {
  render: PropTypes.node,
  children: PropTypes.node,
  visible: PropTypes.bool,
  position: PropTypes.oneOf(positionSet),
  getPopupContainer: PropTypes.func,
  mouseEnterDelay: PropTypes.number,
  mouseLeaveDelay: PropTypes.number,
  trigger: PropTypes.oneOf(triggerSet),
  zIndex: PropTypes.number,
  motion: PropTypes.oneOfType([PropTypes.bool, PropTypes.func, PropTypes.object]),
  className: PropTypes.string,
  contentClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),
  style: PropTypes.object,
  onVisibleChange: PropTypes.func,
  rePosKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  showTick: PropTypes.bool,
  prefixCls: PropTypes.string,
  spacing: PropTypes.number,
  menu: PropTypes.array
};
Dropdown.defaultProps = {
  onVisibleChange: _noop,
  prefixCls: cssClasses.PREFIX,
  zIndex: tooltipNumbers.DEFAULT_Z_INDEX,
  motion: true,
  trigger: 'hover',
  position: 'bottom',
  mouseLeaveDelay: strings.DEFAULT_LEAVE_DELAY,
  showTick: false,
  closeOnEsc: true,
  onEscKeyDown: _noop
};
export default Dropdown;