import React from 'react';
/**
 * stop propagation
 *
 * @param {React.MouseEvent<HTMLElement>} e React mouse event object
 * @param {boolean} noImmediate Skip stopping immediate propagation
 */
export declare function stopPropagation(e: React.MouseEvent, noImmediate?: boolean): void;
/**
 *
 * @param {any} value
 * @param {Function} customizer
 * @returns {any}
 * use in Table, Form, Navigation
 */
export declare function cloneDeep(value: any, customizer?: (value: any) => void): any;
/**
 * [getHighLightTextHTML description]
 *
 * @param   {string} sourceString [source content text]
 * @param   {Array<string>} searchWords [keywords to be highlighted]
 * @param   {object} option
 * @param   {true}      option.highlightTag [The tag wrapped by the highlighted content, mark is used by default]
 * @param   {true}      option.highlightClassName
 * @param   {true}      option.highlightStyle
 * @param   {boolean}   option.caseSensitive
 *
 * @return  {Array<object>}
 */
export declare const getHighLightTextHTML: ({ sourceString, searchWords, option }: GetHighLightTextHTMLProps) => (string | React.ReactElement<{
    style: Record<string, any>;
    className: string;
    key: string;
}, string | React.JSXElementConstructor<any>>)[];
export interface RegisterMediaQueryOption {
    match?: (e: MediaQueryList | MediaQueryListEvent) => void;
    unmatch?: (e: MediaQueryList | MediaQueryListEvent) => void;
    callInInit?: boolean;
}
/**
 * register matchFn and unMatchFn callback while media query
 * @param {string} media media string
 * @param {object} param param object
 * @returns function
 */
export declare const registerMediaQuery: (media: string, { match, unmatch, callInInit }: RegisterMediaQueryOption) => () => void;
export interface GetHighLightTextHTMLProps {
    sourceString?: string;
    searchWords?: any[];
    option: HighLightTextHTMLOption;
}
export interface HighLightTextHTMLOption {
    highlightTag?: string;
    highlightClassName?: string;
    highlightStyle?: Record<string, any>;
    caseSensitive: boolean;
    autoEscape: boolean;
}
export interface HighLightTextHTMLChunk {
    start?: number;
    end?: number;
    highlight?: any;
}
/**
 * Determine whether the incoming element is a built-in icon
 * @param icon 元素
 * @returns boolean
 */
export declare const isSemiIcon: (icon: any) => boolean;
export declare function getActiveElement(): HTMLElement | null;
export declare function isNodeContainsFocus(node: HTMLElement): boolean;
export declare function getFocusableElements(node: HTMLElement): HTMLElement[];
