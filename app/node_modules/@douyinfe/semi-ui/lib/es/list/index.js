import _noop from "lodash/noop";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import React from 'react';
import cls from 'classnames';
import PropTypes from 'prop-types';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/list/constants';
import '@douyinfe/semi-foundation/lib/es/list/list.css';
import LocaleConsumer from '../locale/localeConsumer';
import ListItem from './item';
import { Row } from '../grid';
import Spin from '../spin';
import ListContext from './list-context';
import BaseComponent from '../_base/baseComponent';
const prefixCls = cssClasses.PREFIX;

class List extends BaseComponent {
  constructor() {
    super(...arguments);

    this.renderEmpty = () => {
      const {
        emptyContent
      } = this.props;

      if (emptyContent) {
        return /*#__PURE__*/React.createElement("div", {
          className: "".concat(cssClasses.PREFIX, "-empty"),
          "x-semi-prop": "emptyContent"
        }, emptyContent);
      } else {
        return /*#__PURE__*/React.createElement(LocaleConsumer, {
          componentName: "List"
        }, locale => /*#__PURE__*/React.createElement("div", {
          className: "".concat(cssClasses.PREFIX, "-empty")
        }, locale.emptyText));
      }
    };
  }

  wrapChildren(childrenList, children) {
    const {
      grid
    } = this.props;

    if (grid) {
      var _context;

      const rowProps = {};

      _forEachInstanceProperty(_context = ['align', 'gutter', 'justify', 'type']).call(_context, key => {
        if (key in grid) {
          rowProps[key] = grid[key];
        }
      });

      return /*#__PURE__*/React.createElement(Row, _Object$assign({
        type: "flex"
      }, rowProps), childrenList ? childrenList : null, children);
    }

    return /*#__PURE__*/React.createElement("ul", {
      className: "".concat(prefixCls, "-items")
    }, childrenList ? childrenList : null, children);
  }

  render() {
    var _context2;

    const {
      style,
      className,
      header,
      loading,
      onRightClick,
      onClick,
      footer,
      layout,
      grid,
      size,
      split,
      loadMore,
      bordered,
      dataSource,
      renderItem,
      children
    } = this.props;
    const wrapperCls = cls(prefixCls, className, {
      ["".concat(prefixCls, "-flex")]: layout === 'horizontal',
      [_concatInstanceProperty(_context2 = "".concat(prefixCls, "-")).call(_context2, size)]: size,
      ["".concat(prefixCls, "-grid")]: grid,
      ["".concat(prefixCls, "-split")]: split,
      ["".concat(prefixCls, "-bordered")]: bordered
    });
    let childrenList;

    if (dataSource && dataSource.length) {
      var _context3;

      childrenList = [];
      const items = renderItem ? _mapInstanceProperty(dataSource).call(dataSource, (item, index) => renderItem(item, index)) : [];

      _forEachInstanceProperty(_context3 = React.Children).call(_context3, items, (child, index) => {
        const itemKey = child.key || "list-item-".concat(index);
        childrenList.push( /*#__PURE__*/React.cloneElement(child, {
          key: itemKey
        }));
      });
    } else if (!children && !loading) {
      childrenList = this.renderEmpty();
    }

    return /*#__PURE__*/React.createElement("div", {
      className: wrapperCls,
      style: style
    }, header ? /*#__PURE__*/React.createElement("div", {
      className: "".concat(cssClasses.PREFIX, "-header"),
      "x-semi-prop": "header"
    }, header) : null, /*#__PURE__*/React.createElement(ListContext.Provider, {
      value: {
        grid,
        onRightClick,
        onClick
      }
    }, /*#__PURE__*/React.createElement(Spin, {
      spinning: loading,
      size: "large"
    }, this.wrapChildren(childrenList, children))), footer ? /*#__PURE__*/React.createElement("div", {
      className: "".concat(cssClasses.PREFIX, "-footer"),
      "x-semi-prop": "footer"
    }, footer) : null, loadMore ? loadMore : null);
  }

}

List.Item = ListItem;
List.propTypes = {
  style: PropTypes.object,
  className: PropTypes.string,
  bordered: PropTypes.bool,
  footer: PropTypes.node,
  header: PropTypes.node,
  layout: PropTypes.oneOf(strings.LAYOUT),
  size: PropTypes.oneOf(strings.SIZE),
  split: PropTypes.bool,
  emptyContent: PropTypes.node,
  dataSource: PropTypes.array,
  renderItem: PropTypes.func,
  grid: PropTypes.object,
  loading: PropTypes.bool,
  loadMore: PropTypes.node,
  onRightClick: PropTypes.func,
  onClick: PropTypes.func
};
List.defaultProps = {
  bordered: false,
  split: true,
  loading: false,
  layout: 'vertical',
  size: 'default',
  onRightClick: _noop,
  onClick: _noop
};
export default List;