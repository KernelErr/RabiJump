import React from 'react';
import PropTypes from 'prop-types';
import { strings } from '@douyinfe/semi-foundation/lib/es/tagInput/constants';
import '@douyinfe/semi-foundation/lib/es/tagInput/tagInput.css';
import TagInputFoundation, { TagInputAdapter, OnSortEndProps } from '@douyinfe/semi-foundation/lib/es/tagInput/foundation';
import { ArrayElement } from '../_base/base';
import BaseComponent from '../_base/baseComponent';
import { PopoverProps } from '../popover';
export declare type Size = ArrayElement<typeof strings.SIZE_SET>;
export declare type RestTagsPopoverProps = PopoverProps;
declare type ValidateStatus = "default" | "error" | "warning";
export interface TagInputProps {
    className?: string;
    defaultValue?: string[];
    disabled?: boolean;
    inputValue?: string;
    maxLength?: number;
    max?: number;
    maxTagCount?: number;
    showRestTagsPopover?: boolean;
    restTagsPopoverProps?: RestTagsPopoverProps;
    showContentTooltip?: boolean;
    allowDuplicates?: boolean;
    addOnBlur?: boolean;
    draggable?: boolean;
    expandRestTagsOnClick?: boolean;
    onAdd?: (addedValue: string[]) => void;
    onBlur?: (e: React.MouseEvent<HTMLInputElement>) => void;
    onChange?: (value: string[]) => void;
    onExceed?: ((value: string[]) => void);
    onFocus?: (e: React.MouseEvent<HTMLInputElement>) => void;
    onInputChange?: (value: string, e: React.MouseEvent<HTMLInputElement>) => void;
    onInputExceed?: ((value: string) => void);
    onKeyDown?: (e: React.MouseEvent<HTMLInputElement>) => void;
    onRemove?: (removedValue: string, idx: number) => void;
    placeholder?: string;
    insetLabel?: React.ReactNode;
    insetLabelId?: string;
    prefix?: React.ReactNode;
    renderTagItem?: (value: string, index: number) => React.ReactNode;
    separator?: string | string[] | null;
    showClear?: boolean;
    size?: Size;
    style?: React.CSSProperties;
    suffix?: React.ReactNode;
    validateStatus?: ValidateStatus;
    value?: string[] | undefined;
    autoFocus?: boolean;
    'aria-label'?: string;
    preventScroll?: boolean;
}
export interface TagInputState {
    tagsArray?: string[];
    inputValue?: string;
    focusing?: boolean;
    hovering?: boolean;
    active?: boolean;
}
declare class TagInput extends BaseComponent<TagInputProps, TagInputState> {
    static propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        style: PropTypes.Requireable<object>;
        className: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        allowDuplicates: PropTypes.Requireable<boolean>;
        max: PropTypes.Requireable<number>;
        maxTagCount: PropTypes.Requireable<number>;
        maxLength: PropTypes.Requireable<number>;
        showRestTagsPopover: PropTypes.Requireable<boolean>;
        restTagsPopoverProps: PropTypes.Requireable<object>;
        showContentTooltip: PropTypes.Requireable<boolean>;
        defaultValue: PropTypes.Requireable<any[]>;
        value: PropTypes.Requireable<any[]>;
        inputValue: PropTypes.Requireable<string>;
        placeholder: PropTypes.Requireable<string>;
        separator: PropTypes.Requireable<string | any[]>;
        showClear: PropTypes.Requireable<boolean>;
        addOnBlur: PropTypes.Requireable<boolean>;
        draggable: PropTypes.Requireable<boolean>;
        expandRestTagsOnClick: PropTypes.Requireable<boolean>;
        autoFocus: PropTypes.Requireable<boolean>;
        renderTagItem: PropTypes.Requireable<(...args: any[]) => any>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onInputChange: PropTypes.Requireable<(...args: any[]) => any>;
        onExceed: PropTypes.Requireable<(...args: any[]) => any>;
        onInputExceed: PropTypes.Requireable<(...args: any[]) => any>;
        onAdd: PropTypes.Requireable<(...args: any[]) => any>;
        onRemove: PropTypes.Requireable<(...args: any[]) => any>;
        onKeyDown: PropTypes.Requireable<(...args: any[]) => any>;
        size: PropTypes.Requireable<"default" | "small" | "large">;
        validateStatus: PropTypes.Requireable<"default" | "error" | "warning" | "success">;
        prefix: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        suffix: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        'aria-label': PropTypes.Requireable<string>;
        preventScroll: PropTypes.Requireable<boolean>;
    };
    static defaultProps: {
        showClear: boolean;
        addOnBlur: boolean;
        allowDuplicates: boolean;
        showRestTagsPopover: boolean;
        autoFocus: boolean;
        draggable: boolean;
        expandRestTagsOnClick: boolean;
        showContentTooltip: boolean;
        separator: string;
        size: "default";
        validateStatus: "default";
        onBlur: (...args: any[]) => void;
        onFocus: (...args: any[]) => void;
        onChange: (...args: any[]) => void;
        onInputChange: (...args: any[]) => void;
        onExceed: (...args: any[]) => void;
        onInputExceed: (...args: any[]) => void;
        onAdd: (...args: any[]) => void;
        onRemove: (...args: any[]) => void;
        onKeyDown: (...args: any[]) => void;
    };
    inputRef: React.RefObject<HTMLInputElement>;
    tagInputRef: React.RefObject<HTMLDivElement>;
    foundation: TagInputFoundation;
    clickOutsideHandler: any;
    constructor(props: TagInputProps);
    static getDerivedStateFromProps(nextProps: TagInputProps, prevState: TagInputState): {
        tagsArray: string[];
        inputValue: string;
    };
    get adapter(): TagInputAdapter;
    componentDidMount(): void;
    handleInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    handleKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => void;
    handleInputFocus: (e: React.MouseEvent<HTMLInputElement>) => void;
    handleInputBlur: (e: React.MouseEvent<HTMLInputElement>) => void;
    handleClearBtn: (e: React.MouseEvent<HTMLDivElement>) => void;
    handleClearEnterPress: (e: React.KeyboardEvent<HTMLDivElement>) => void;
    handleTagClose: (idx: number) => void;
    handleInputMouseLeave: (e: React.MouseEvent<HTMLDivElement>) => void;
    handleClick: (e: React.MouseEvent<HTMLDivElement>) => void;
    handleInputMouseEnter: (e: React.MouseEvent<HTMLDivElement>) => void;
    handleClickPrefixOrSuffix: (e: React.MouseEvent<HTMLInputElement>) => void;
    handlePreventMouseDown: (e: React.MouseEvent<HTMLInputElement>) => void;
    renderClearBtn(): JSX.Element;
    renderPrefix(): JSX.Element;
    renderSuffix(): JSX.Element;
    getAllTags: () => (string | number | boolean | React.ReactFragment | JSX.Element)[];
    onSortEnd: (callbackProps: OnSortEndProps) => void;
    renderTags(): JSX.Element;
    blur(): void;
    focus(): void;
    render(): JSX.Element;
}
export default TagInput;
export { ValidateStatus };
