import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import React, { useEffect, useState, Children, cloneElement, isValidElement } from 'react';
import { Transition } from '@douyinfe/semi-animation-react';
import PropTypes from 'prop-types';

const formatStyle = function formatStyle(_ref) {
  let {
    rotate = 0
  } = _ref;
  return {
    transform: "rotate(".concat(rotate, "deg)")
  };
};

function OpenIconTransition() {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const {
    children,
    isOpen,
    enterDeg = 180,
    fromDeg = 0,
    duration = 150
  } = props;
  const [immediate, setImmediate] = useState(true);
  useEffect(() => {
    // eslint-disable-next-line @typescript-eslint/no-implied-eval
    setImmediate(false);
  }, [isOpen]);
  return /*#__PURE__*/React.createElement(Transition, {
    immediate: immediate,
    state: isOpen ? 'enter' : 'leave',
    from: {
      rotate: fromDeg
    },
    enter: {
      rotate: {
        val: enterDeg,
        duration,
        easing: 'cubic-bezier(.62, .05, .36, .95)'
      }
    },
    leave: {
      rotate: {
        val: fromDeg,
        duration,
        easing: 'cubic-bezier(.62, .05, .36, .95)'
      }
    }
  }, transitionStyle => _mapInstanceProperty(Children).call(Children, children, child => /*#__PURE__*/isValidElement(child) ? /*#__PURE__*/cloneElement(child, _Object$assign(_Object$assign({}, child.props), {
    style: _Object$assign(_Object$assign({}, child.props.style), formatStyle(transitionStyle))
  })) : child));
}

OpenIconTransition.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  children: PropTypes.any.isRequired,
  enterDeg: PropTypes.number,
  fromDeg: PropTypes.number,
  duration: PropTypes.number
};
export default OpenIconTransition;