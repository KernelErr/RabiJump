import React from 'react';
import PropTypes from 'prop-types';
import NormalTable from './Table';
import Column from './Column';
import { TableProps, Data } from './interface';
declare class Table<RecordType extends Record<string, any> = Data> extends React.PureComponent<TableProps<RecordType>> {
    static Column: typeof Column;
    static DEFAULT_KEY_COLUMN_SELECTION: "column-selection";
    static DEFAULT_KEY_COLUMN_EXPAND: "column-expand";
    static propTypes: {
        resizable: PropTypes.Requireable<boolean | object>;
        className: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        prefixCls: PropTypes.Requireable<string>;
        components: PropTypes.Requireable<any>;
        bordered: PropTypes.Requireable<boolean>;
        loading: PropTypes.Requireable<boolean>;
        size: PropTypes.Requireable<"default" | "small" | "middle">;
        tableLayout: PropTypes.Requireable<"" | "fixed" | "auto">;
        columns: PropTypes.Requireable<PropTypes.InferProps<{
            align: PropTypes.Requireable<"left" | "right" | "center">;
            className: PropTypes.Requireable<string>;
            colSpan: PropTypes.Requireable<number>;
            dataIndex: PropTypes.Requireable<string>;
            defaultSortOrder: PropTypes.Requireable<"ascend" | "descend">;
            filterChildrenRecord: PropTypes.Requireable<boolean>;
            filterDropdownProps: PropTypes.Requireable<object>;
            filterDropdown: PropTypes.Requireable<PropTypes.ReactNodeLike>;
            filterDropdownVisible: PropTypes.Requireable<boolean>;
            filterIcon: PropTypes.Requireable<(...args: any[]) => any>;
            filterMultiple: PropTypes.Requireable<boolean>;
            filteredValue: PropTypes.Requireable<any[]>;
            filters: PropTypes.Requireable<any[]>;
            fixed: PropTypes.Requireable<boolean | "left" | "right">;
            onCell: PropTypes.Requireable<(...args: any[]) => any>;
            onFilter: PropTypes.Requireable<(...args: any[]) => any>;
            onFilterDropdownVisibleChange: PropTypes.Requireable<(...args: any[]) => any>;
            onHeaderCell: PropTypes.Requireable<(...args: any[]) => any>;
            onSorterChange: PropTypes.Requireable<(...args: any[]) => any>;
            render: PropTypes.Requireable<(...args: any[]) => any>;
            renderFilterDropdownItem: PropTypes.Requireable<(...args: any[]) => any>;
            sortChildrenRecord: PropTypes.Requireable<boolean>;
            sortDirections: PropTypes.Requireable<string[]>;
            sortOrder: PropTypes.Requireable<string | boolean>;
            sorter: PropTypes.Requireable<boolean | ((...args: any[]) => any)>;
            title: PropTypes.Requireable<PropTypes.ReactNodeLike | ((...args: any[]) => any)>;
            useFullRender: PropTypes.Requireable<boolean>;
            width: PropTypes.Requireable<string | number>;
        }>[]>;
        hideExpandedColumn: PropTypes.Requireable<boolean>;
        id: PropTypes.Requireable<string>;
        expandIcon: PropTypes.Requireable<PropTypes.ReactNodeLike | ((...args: any[]) => any)>;
        expandCellFixed: PropTypes.Requireable<boolean | "left" | "right">;
        title: PropTypes.Requireable<PropTypes.ReactNodeLike | ((...args: any[]) => any)>;
        onHeaderRow: PropTypes.Requireable<(...args: any[]) => any>;
        showHeader: PropTypes.Requireable<boolean>;
        indentSize: PropTypes.Requireable<number>;
        rowKey: PropTypes.Requireable<string | number | ((...args: any[]) => any)>;
        onRow: PropTypes.Requireable<(...args: any[]) => any>;
        onExpandedRowsChange: PropTypes.Requireable<(...args: any[]) => any>;
        onExpand: PropTypes.Requireable<(...args: any[]) => any>;
        rowExpandable: PropTypes.Requireable<(...args: any[]) => any>;
        expandedRowRender: PropTypes.Requireable<(...args: any[]) => any>;
        expandedRowKeys: PropTypes.Requireable<any[]>;
        defaultExpandAllRows: PropTypes.Requireable<boolean>;
        expandAllRows: PropTypes.Requireable<boolean>;
        defaultExpandAllGroupRows: PropTypes.Requireable<boolean>;
        expandAllGroupRows: PropTypes.Requireable<boolean>;
        defaultExpandedRowKeys: PropTypes.Requireable<any[]>;
        pagination: PropTypes.Requireable<boolean | object>;
        renderPagination: PropTypes.Requireable<(...args: any[]) => any>;
        footer: PropTypes.Requireable<PropTypes.ReactNodeLike | ((...args: any[]) => any)>;
        empty: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        dataSource: PropTypes.Requireable<any[]>;
        childrenRecordName: PropTypes.Requireable<string>;
        rowSelection: PropTypes.Requireable<boolean | object>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        scroll: PropTypes.Requireable<PropTypes.InferProps<{
            x: PropTypes.Requireable<string | number | boolean>;
            y: PropTypes.Requireable<string | number>;
        }>>;
        groupBy: PropTypes.Requireable<string | number | ((...args: any[]) => any)>;
        renderGroupSection: PropTypes.Requireable<(...args: any[]) => any>;
        onGroupedRow: PropTypes.Requireable<(...args: any[]) => any>;
        clickGroupedRowToExpand: PropTypes.Requireable<boolean>;
        virtualized: PropTypes.Requireable<boolean | object>;
        dropdownPrefixCls: PropTypes.Requireable<string>;
        expandRowByClick: PropTypes.Requireable<boolean>;
        getVirtualizedListRef: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        hideExpandedColumn: boolean;
    };
    tableRef: React.RefObject<NormalTable<RecordType>>;
    constructor(props: TableProps);
    getCurrentPageData: () => any;
    render(): JSX.Element;
}
export * from './interface';
export default Table;
