import _omit from "lodash/omit";
import _get from "lodash/get";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import React from 'react';
import Column from './Column';

/**
 * Convert jsx children into object columns
 * @param {Node} children
 * @returns
 */
export default function getColumns(children) {
  if (children) {
    var _context;

    const columns = [];

    _forEachInstanceProperty(_context = React.Children).call(_context, children, child => {
      if ( /*#__PURE__*/React.isValidElement(child) && (child.type === Column || _get(child, 'type.name') === Column.name)) {
        const col = _omit(child.props, ['children']);

        if (_Array$isArray(child.props.children) && child.props.children.length) {
          col.children = getColumns(child.props.children);
        }

        columns.push(_Object$assign({
          key: child.key
        }, col));
      }
    });

    return columns;
  }

  return [];
}