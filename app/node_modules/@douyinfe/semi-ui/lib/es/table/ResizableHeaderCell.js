import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React from 'react';
import { Resizable } from 'react-resizable';

class ResizableHeaderCell extends React.PureComponent {
  render() {
    var _context;

    const _a = this.props,
          {
      onResize,
      onResizeStart,
      onResizeStop,
      width
    } = _a,
          restProps = __rest(_a, ["onResize", "onResizeStart", "onResizeStop", "width"]);

    if (typeof width !== 'number') {
      return /*#__PURE__*/React.createElement("th", _Object$assign({}, restProps));
    }

    let {
      children
    } = restProps; // Fragment must be used here, otherwise there will be an error (seemingly a react-resizable@1.9.0 problem)

    children = _mapInstanceProperty(_context = React.Children).call(_context, children, (child, index) => /*#__PURE__*/React.createElement(React.Fragment, {
      key: index
    }, child));
    return /*#__PURE__*/React.createElement(Resizable, {
      width: width,
      height: 0,
      onResize: onResize,
      onResizeStart: onResizeStart,
      onResizeStop: onResizeStop,
      draggableOpts: {
        enableUserSelectHack: false
      }
    }, /*#__PURE__*/React.createElement("th", _Object$assign({}, restProps), children));
  }

}

export default ResizableHeaderCell;