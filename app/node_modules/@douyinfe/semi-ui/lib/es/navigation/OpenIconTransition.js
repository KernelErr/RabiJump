import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import React, { useEffect, useState } from 'react';
import { Transition } from '@douyinfe/semi-animation-react';
import PropTypes from 'prop-types';

const formatStyle = function formatStyle(_ref) {
  let {
    rotate = 0
  } = _ref;
  return {
    transform: "rotate(".concat(Math.ceil(rotate), "deg)")
  };
};

function OpenIconTransition() {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const {
    children,
    isOpen
  } = props;
  const [immediate, setImmediate] = useState(true);
  useEffect(() => {
    setImmediate(false);
  }, []);
  return /*#__PURE__*/React.createElement(Transition, {
    immediate: immediate,
    state: isOpen ? 'enter' : 'leave',
    from: {
      rotate: 0
    },
    enter: {
      rotate: {
        val: 180,
        duration: 200,
        easing: 'cubic-bezier(.62, .05, .36, .95)'
      }
    },
    leave: {
      rotate: {
        val: 0,
        duration: 200,
        easing: 'cubic-bezier(.62, .05, .36, .95)'
      }
    }
  }, transitionStyle => {
    const formatedStyle = formatStyle(transitionStyle);

    if (typeof children === 'function') {
      return children(formatedStyle);
    }

    if ( /*#__PURE__*/React.isValidElement(children)) {
      return /*#__PURE__*/React.cloneElement(children, {
        style: _Object$assign(_Object$assign({}, children.props && children.props.style), formatedStyle)
      });
    }

    return children;
  });
}

OpenIconTransition.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  children: PropTypes.any.isRequired
};
export default OpenIconTransition;