import BaseComponent, { BaseProps } from '../_base/baseComponent';
import React from 'react';
import PropTypes from 'prop-types';
import ItemFoundation, { ItemAdapter, ItemProps, SelectedItemProps } from '@douyinfe/semi-foundation/lib/es/navigation/itemFoundation';
import { NavContextType } from './nav-context';
export interface NavItemProps extends ItemProps, BaseProps {
    children?: React.ReactNode;
    disabled?: boolean;
    forwardRef?: (ele: HTMLLIElement) => void;
    icon?: React.ReactNode;
    itemKey?: React.ReactText;
    level?: number;
    link?: string;
    linkOptions?: React.AnchorHTMLAttributes<HTMLAnchorElement>;
    text?: React.ReactNode;
    tooltipHideDelay?: number;
    tooltipShowDelay?: number;
    onClick?(clickItems: SelectedData): void;
    onMouseEnter?: React.MouseEventHandler<HTMLLIElement>;
    onMouseLeave?: React.MouseEventHandler<HTMLLIElement>;
}
export interface SelectedData extends SelectedItemProps<NavItemProps> {
    text?: React.ReactNode;
}
export interface NavItemState {
    tooltipShow: boolean;
}
export default class NavItem extends BaseComponent<NavItemProps, NavItemState> {
    static contextType: React.Context<NavContextType>;
    static propTypes: {
        text: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        itemKey: PropTypes.Requireable<string | number>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        icon: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        className: PropTypes.Requireable<string>;
        toggleIcon: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        forwardRef: PropTypes.Requireable<(...args: any[]) => any>;
        indent: PropTypes.Requireable<number | boolean>;
        isCollapsed: PropTypes.Requireable<boolean>;
        isSubNav: PropTypes.Requireable<boolean>;
        link: PropTypes.Requireable<string>;
        linkOptions: PropTypes.Requireable<object>;
        disabled: PropTypes.Requireable<boolean>;
    };
    static defaultProps: {
        isSubNav: boolean;
        indent: boolean;
        forwardRef: (...args: any[]) => void;
        isCollapsed: boolean;
        onClick: (...args: any[]) => void;
        onMouseEnter: (...args: any[]) => void;
        onMouseLeave: (...args: any[]) => void;
        disabled: boolean;
    };
    foundation: ItemFoundation;
    context: NavContextType;
    constructor(props: NavItemProps);
    _invokeContextFunc(funcName: string, ...args: any[]): any;
    get adapter(): ItemAdapter<NavItemProps, NavItemState>;
    renderIcon(icon: React.ReactNode, pos: string, isToggleIcon?: boolean, key?: number | string): JSX.Element;
    setItemRef: (ref: HTMLLIElement) => void;
    wrapTooltip: (node: React.ReactNode) => JSX.Element;
    handleClick: (e: React.MouseEvent) => void;
    handleKeyPress: (e: React.KeyboardEvent) => void;
    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>>;
}
