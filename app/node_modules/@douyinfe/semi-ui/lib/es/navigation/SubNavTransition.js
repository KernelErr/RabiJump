import { Transition } from '@douyinfe/semi-animation-react';
import PropTypes from 'prop-types';
import React, { useState } from 'react';
const ease = 'cubicBezier(.25,.1,.25,1)';

const formatStyle = function formatStyle(_ref) {
  let {
    maxHeight,
    opacity
  } = _ref;
  return {
    maxHeight,
    opacity
  };
};

function SubNavTransition() {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const {
    children,
    isCollapsed,
    maxHeight = 999
  } = props; // eslint-disable-next-line no-unused-vars

  const [immediate, setImmediate] = useState(false); // useEffect(() => {
  //     setImmediate(isCollapsed);
  // }, [isCollapsed]);

  return /*#__PURE__*/React.createElement(Transition, {
    from: {
      maxHeight: 0,
      opacity: 0
    },
    enter: {
      maxHeight: {
        val: maxHeight,
        easing: 'easeInQuad',
        duration: 250
      },
      opacity: {
        val: 1,
        duration: 200,
        easing: 'cubic-bezier(0.5, -0.1, 1, 0.4)'
      }
    },
    leave: {
      maxHeight: {
        val: 0,
        easing: ease,
        duration: 250
      },
      opacity: {
        val: 0,
        duration: isCollapsed ? 1 : 200,
        easing: 'cubic-bezier(0.5, -0.1, 1, 0.4)'
      }
    },
    immediate: immediate
  }, typeof children === 'function' ? transitionStyle => children(formatStyle(transitionStyle)) : children);
}

SubNavTransition.propTypes = {
  children: PropTypes.any,
  isCollapsed: PropTypes.bool
};
export default SubNavTransition;