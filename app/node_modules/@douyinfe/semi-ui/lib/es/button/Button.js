import _omit from "lodash/omit";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _includesInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/includes";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable react/destructuring-assignment */


import React, { PureComponent } from 'react';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/button/constants';
import '@douyinfe/semi-foundation/lib/es/button/button.css';
import { noop } from '@douyinfe/semi-foundation/lib/es/utils/function';
const btnSizes = strings.sizes;
const {
  htmlTypes,
  btnTypes
} = strings; // TODO: icon configuration

export default class Button extends PureComponent {
  render() {
    var _context;

    const _a = this.props,
          {
      children,
      block,
      htmlType,
      loading,
      circle,
      className,
      style,
      disabled,
      size,
      theme,
      type,
      prefixCls,
      iconPosition
    } = _a,
          attr = __rest(_a, ["children", "block", "htmlType", "loading", "circle", "className", "style", "disabled", "size", "theme", "type", "prefixCls", "iconPosition"]);

    const baseProps = _Object$assign(_Object$assign({
      disabled
    }, _omit(attr, ['x-semi-children-alias'])), {
      className: classNames(prefixCls, {
        [_concatInstanceProperty(_context = "".concat(prefixCls, "-")).call(_context, type)]: !disabled && type,
        ["".concat(prefixCls, "-disabled")]: disabled,
        ["".concat(prefixCls, "-size-large")]: size === 'large',
        ["".concat(prefixCls, "-size-small")]: size === 'small',
        // [`${prefixCls}-loading`]: loading,
        ["".concat(prefixCls, "-light")]: theme === 'light',
        ["".concat(prefixCls, "-block")]: block,
        ["".concat(prefixCls, "-circle")]: circle,
        ["".concat(prefixCls, "-borderless")]: theme === 'borderless'
      }, className),
      type: htmlType,
      'aria-disabled': disabled
    });

    const xSemiProps = {};

    if (!(className && _includesInstanceProperty(className).call(className, '-with-icon'))) {
      xSemiProps['x-semi-prop'] = this.props['x-semi-children-alias'] || 'children';
    }

    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/button-has-type
      React.createElement("button", _Object$assign({}, baseProps, {
        onClick: this.props.onClick,
        onMouseDown: this.props.onMouseDown,
        style: style
      }), /*#__PURE__*/React.createElement("span", _Object$assign({
        className: "".concat(prefixCls, "-content"),
        onClick: e => disabled && e.stopPropagation()
      }, xSemiProps), children))
    );
  }

}
Button.defaultProps = {
  disabled: false,
  size: 'default',
  type: 'primary',
  theme: 'light',
  block: false,
  htmlType: 'button',
  onMouseDown: noop,
  onClick: noop,
  onMouseEnter: noop,
  onMouseLeave: noop,
  prefixCls: cssClasses.PREFIX
};
Button.propTypes = {
  children: PropTypes.node,
  disabled: PropTypes.bool,
  prefixCls: PropTypes.string,
  style: PropTypes.object,
  size: PropTypes.oneOf(btnSizes),
  type: PropTypes.oneOf(btnTypes),
  block: PropTypes.bool,
  onClick: PropTypes.func,
  onMouseDown: PropTypes.func,
  circle: PropTypes.bool,
  loading: PropTypes.bool,
  htmlType: PropTypes.oneOf(htmlTypes),
  theme: PropTypes.oneOf(strings.themes),
  className: PropTypes.string,
  onMouseEnter: PropTypes.func,
  onMouseLeave: PropTypes.func,
  'aria-label': PropTypes.string
};