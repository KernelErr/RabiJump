import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React, { isValidElement, cloneElement } from 'react';
import BaseComponent from '../_base/baseComponent';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/button/constants';
import '@douyinfe/semi-foundation/lib/es/button/button.css';
const prefixCls = cssClasses.PREFIX;
const btnSizes = strings.sizes;
export default class ButtonGroup extends BaseComponent {
  render() {
    const _a = this.props,
          {
      children,
      disabled,
      size,
      type,
      className,
      'aria-label': ariaLabel
    } = _a,
          rest = __rest(_a, ["children", "disabled", "size", "type", "className", 'aria-label']);

    let inner;
    const cls = classNames("".concat(prefixCls, "-group"), className);

    if (children) {
      var _context;

      inner = _mapInstanceProperty(_context = _Array$isArray(children) ? children : [children]).call(_context, (itm, index) => /*#__PURE__*/isValidElement(itm) ? /*#__PURE__*/cloneElement(itm, _Object$assign(_Object$assign(_Object$assign({
        disabled,
        size,
        type
      }, itm.props), rest), {
        key: index
      })) : itm);
    }

    return /*#__PURE__*/React.createElement("div", {
      className: cls,
      role: "group",
      "aria-label": ariaLabel
    }, inner);
  }

}
ButtonGroup.propTypes = {
  children: PropTypes.node,
  disabled: PropTypes.bool,
  type: PropTypes.string,
  size: PropTypes.oneOf(btnSizes),
  theme: PropTypes.oneOf(strings.themes),
  'aria-label': PropTypes.string
};
ButtonGroup.defaultProps = {
  // There are default values ​​for type and theme in Button. 
  // In order to allow users to individually customize the type and theme of the Button through the parameters of the Button in the ButtonGroup,
  // the default value of type and theme is not given in the ButtonGroup。
  size: 'default'
};