import React from 'react';
import PropTypes from 'prop-types';
import { ContextValue } from '../configProvider/context';
import { ArrowBounding, Position, TooltipProps, Trigger, RenderContentProps } from '../tooltip/index';
import '@douyinfe/semi-foundation/lib/es/popover/popover.css';
import { BaseProps } from '../_base/baseComponent';
import { Motion } from '../_base/base';
export { ArrowProps } from './Arrow';
declare interface ArrowStyle {
    borderColor?: string;
    backgroundColor?: string;
    borderOpacity?: string | number;
}
export interface PopoverProps extends BaseProps {
    children?: React.ReactNode;
    content?: TooltipProps['content'];
    visible?: boolean;
    autoAdjustOverflow?: boolean;
    motion?: Motion;
    position?: Position;
    mouseEnterDelay?: number;
    mouseLeaveDelay?: number;
    trigger?: Trigger;
    contentClassName?: string | any[];
    onVisibleChange?: (visible: boolean) => void;
    onClickOutSide?: (e: React.MouseEvent) => void;
    showArrow?: boolean;
    spacing?: number;
    stopPropagation?: boolean | string;
    arrowStyle?: ArrowStyle;
    arrowBounding?: ArrowBounding;
    arrowPointAtCenter?: boolean;
    prefixCls?: string;
    rePosKey?: string | number;
    getPopupContainer?: () => HTMLElement;
    zIndex?: number;
    closeOnEsc?: TooltipProps['closeOnEsc'];
    guardFocus?: TooltipProps['guardFocus'];
    returnFocusOnClose?: TooltipProps['returnFocusOnClose'];
    onEscKeyDown?: TooltipProps['onEscKeyDown'];
    clickToHide?: TooltipProps['clickToHide'];
    disableFocusListener?: boolean;
}
export interface PopoverState {
    popConfirmVisible: boolean;
}
declare class Popover extends React.PureComponent<PopoverProps, PopoverState> {
    static contextType: React.Context<ContextValue>;
    static propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        content: PropTypes.Requireable<PropTypes.ReactNodeLike | ((...args: any[]) => any)>;
        visible: PropTypes.Requireable<boolean>;
        autoAdjustOverflow: PropTypes.Requireable<boolean>;
        motion: PropTypes.Requireable<boolean | object>;
        position: PropTypes.Requireable<"top" | "topLeft" | "topRight" | "left" | "leftTop" | "leftBottom" | "right" | "rightTop" | "rightBottom" | "bottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver">;
        mouseEnterDelay: PropTypes.Requireable<number>;
        mouseLeaveDelay: PropTypes.Requireable<number>;
        trigger: PropTypes.Validator<"hover" | "focus" | "click" | "custom">;
        contentClassName: PropTypes.Requireable<string | any[]>;
        onVisibleChange: PropTypes.Requireable<(...args: any[]) => any>;
        onClickOutSide: PropTypes.Requireable<(...args: any[]) => any>;
        style: PropTypes.Requireable<object>;
        spacing: PropTypes.Requireable<number>;
        zIndex: PropTypes.Requireable<number>;
        showArrow: PropTypes.Requireable<boolean>;
        arrowStyle: PropTypes.Requireable<PropTypes.InferProps<{
            borderColor: PropTypes.Requireable<string>;
            backgroundColor: PropTypes.Requireable<string>;
            borderOpacity: PropTypes.Requireable<string | number>;
        }>>;
        arrowPointAtCenter: PropTypes.Requireable<boolean>;
        arrowBounding: PropTypes.Requireable<object>;
        prefixCls: PropTypes.Requireable<string>;
        guardFocus: PropTypes.Requireable<boolean>;
        disableArrowKeyDown: PropTypes.Requireable<boolean>;
    };
    static defaultProps: {
        arrowBounding: {
            offsetY: number;
            offsetX: number;
            height: number;
            width: 24;
        };
        showArrow: boolean;
        autoAdjustOverflow: boolean;
        zIndex: number;
        motion: boolean;
        trigger: string;
        cancelText: string;
        okText: string;
        position: string;
        prefixCls: string;
        onClickOutSide: (...args: any[]) => void;
        onEscKeyDown: (...args: any[]) => void;
        closeOnEsc: boolean;
        returnFocusOnClose: boolean;
        guardFocus: boolean;
        disableFocusListener: boolean;
    };
    context: ContextValue;
    renderPopCard: ({ initialFocusRef }: {
        initialFocusRef: RenderContentProps['initialFocusRef'];
    }) => JSX.Element;
    renderContentNode: (props: {
        content: TooltipProps['content'];
        initialFocusRef: RenderContentProps['initialFocusRef'];
    }) => React.ReactNode;
    render(): JSX.Element;
}
export default Popover;
