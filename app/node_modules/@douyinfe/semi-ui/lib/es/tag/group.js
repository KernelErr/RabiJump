import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import React, { PureComponent } from 'react';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/tag/constants';
import Tag from './index';
import Popover from '../popover/index';
const prefixCls = cssClasses.PREFIX;
const tagSize = strings.TAG_SIZE;
const avatarShapeSet = strings.AVATAR_SHAPE;
export default class TagGroup extends PureComponent {
  renderNTag(n, restTags) {
    const {
      size,
      showPopover,
      popoverProps
    } = this.props;
    let nTag = /*#__PURE__*/React.createElement(Tag, {
      closable: false,
      size: size,
      color: "grey",
      style: {
        backgroundColor: 'transparent'
      },
      key: "_+n"
    }, "+", n);

    if (showPopover) {
      nTag = /*#__PURE__*/React.createElement(Popover, _Object$assign({
        showArrow: true,
        content: restTags,
        trigger: "hover",
        position: "top",
        autoAdjustOverflow: true,
        className: "".concat(prefixCls, "-rest-group-popover")
      }, popoverProps, {
        key: "_+n_Popover"
      }), nTag);
    }

    return nTag;
  }

  renderMergeTags(tags) {
    const {
      maxTagCount,
      tagList,
      restCount
    } = this.props;
    const n = restCount ? restCount : tagList.length - maxTagCount;
    let renderTags = tags;

    const normalTags = _sliceInstanceProperty(tags).call(tags, 0, maxTagCount);

    const restTags = _sliceInstanceProperty(tags).call(tags, maxTagCount);

    let nTag = null;

    if (n > 0) {
      nTag = this.renderNTag(n, restTags);
      normalTags.push(nTag);
      renderTags = normalTags;
    }

    return renderTags;
  }

  renderAllTags() {
    const {
      tagList,
      size,
      mode,
      avatarShape
    } = this.props;

    const renderTags = _mapInstanceProperty(tagList).call(tagList, (tag, index) => {
      if (mode === 'custom') {
        return tag;
      }

      if (!tag.size) {
        tag.size = size;
      }

      if (!tag.avatarShape) {
        tag.avatarShape = avatarShape;
      }

      return /*#__PURE__*/React.createElement(Tag, _Object$assign({
        key: "".concat(index, "-tag")
      }, tag));
    });

    return renderTags;
  }

  render() {
    const {
      style,
      className,
      maxTagCount,
      size
    } = this.props;
    const groupCls = classNames({
      ["".concat(prefixCls, "-group")]: true,
      ["".concat(prefixCls, "-group-max")]: maxTagCount,
      ["".concat(prefixCls, "-group-small")]: size === 'small',
      ["".concat(prefixCls, "-group-large")]: size === 'large'
    }, className);
    const tags = this.renderAllTags();
    const tagContents = typeof maxTagCount === 'undefined' ? tags : this.renderMergeTags(tags);
    return /*#__PURE__*/React.createElement("div", {
      style: style,
      className: groupCls
    }, tagContents);
  }

}
TagGroup.defaultProps = {
  style: {},
  className: '',
  size: tagSize[0],
  avatarShape: 'square'
};
TagGroup.propTypes = {
  children: PropTypes.node,
  style: PropTypes.object,
  className: PropTypes.string,
  maxTagCount: PropTypes.number,
  restCount: PropTypes.number,
  tagList: PropTypes.array,
  size: PropTypes.oneOf(tagSize),
  mode: PropTypes.string,
  showPopover: PropTypes.bool,
  popoverProps: PropTypes.object,
  avatarShape: PropTypes.oneOf(avatarShapeSet)
};