import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import { PureComponent } from 'react';
import { createPortal } from 'react-dom';
import { BASE_CLASS_PREFIX } from '@douyinfe/semi-foundation/lib/es/base/constants';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import ConfigContext from '../configProvider/context';
import '@douyinfe/semi-foundation/lib/es/_portal/portal.css';

const defaultGetContainer = () => document.body;

class Portal extends PureComponent {
  constructor(props) {
    var _this;

    super(props);
    _this = this;

    this.addStyle = function () {
      let style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (_this.el) {
        for (const key of _Object$keys(style)) {
          _this.el.style[key] = style[key];
        }
      }
    };

    this.addClass = function (prefixCls) {
      const {
        direction
      } = _this.context;

      for (var _len = arguments.length, classNames = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        classNames[_key - 1] = arguments[_key];
      }

      const cls = classnames(prefixCls, ...classNames, {
        ["".concat(prefixCls, "-rtl")]: direction === 'rtl'
      });

      if (_this.el) {
        _this.el.className = cls;
      }
    };

    try {
      this.el = document.createElement('div');
    } catch (e) {}

    this.state = {
      container: undefined
    };
  }

  componentDidMount() {
    if (!this.el) {
      this.el = document.createElement('div');
    }

    const {
      state,
      props,
      context
    } = this;
    const getContainer = props.getPopupContainer || context.getPopupContainer || defaultGetContainer;
    const container = getContainer();

    if (container !== state.container) {
      // const computedStyle = window.getComputedStyle(container);
      // if (computedStyle.position !== 'relative') {
      //    container.style.position = 'relative';
      // }
      container.appendChild(this.el);
      this.addStyle(props.style);
      this.addClass(props.prefixCls, props.className);
      this.setState({
        container
      });
    }
  }

  componentDidUpdate(prevProps) {
    // visible callback
    const {
      didUpdate
    } = this.props;

    if (didUpdate) {
      didUpdate(prevProps);
    }
  }

  componentWillUnmount() {
    const {
      container
    } = this.state;

    if (container) {
      container.removeChild(this.el);
    }
  }

  render() {
    const {
      state,
      props
    } = this;

    if (state.container) {
      return /*#__PURE__*/createPortal(props.children, this.el);
    }

    return null;
  }

}

Portal.contextType = ConfigContext;
Portal.defaultProps = {
  // getPopupContainer: () => document.body,
  prefixCls: "".concat(BASE_CLASS_PREFIX, "-portal")
};
Portal.propTypes = {
  children: PropTypes.node,
  prefixCls: PropTypes.string,
  getPopupContainer: PropTypes.func,
  className: PropTypes.string,
  didUpdate: PropTypes.func
};
export default Portal;