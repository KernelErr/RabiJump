import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/**
 * Implementation reference from: https://github.com/ant-design/ant-design/blob/master/components/grid/col.tsx
 */


import React from 'react';
import PropTypes from 'prop-types';
import { RowContext } from './row';
import classnames from 'classnames';
import { cssClasses } from '@douyinfe/semi-foundation/lib/es/grid/constants';
const objectOrNumber = PropTypes.oneOfType([PropTypes.object, PropTypes.number]);

class Col extends React.Component {
  render() {
    var _context, _context12, _context13, _context14, _context15, _context16;

    const {
      props
    } = this;

    const {
      prefixCls,
      span,
      order,
      offset,
      push,
      pull,
      className,
      children
    } = props,
          others = __rest(props, ["prefixCls", "span", "order", "offset", "push", "pull", "className", "children"]);

    let sizeClassObj = {};
    const prefix = "".concat(prefixCls, "-col");

    _forEachInstanceProperty(_context = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl']).call(_context, size => {
      var _context2, _context3, _context4, _context5, _context6, _context7, _context8, _context9, _context10, _context11;

      let sizeProps = {};

      if (typeof props[size] === 'number') {
        sizeProps.span = props[size];
      } else if (typeof props[size] === 'object') {
        sizeProps = props[size] || {};
      }

      delete others[size];
      sizeClassObj = _Object$assign(_Object$assign({}, sizeClassObj), {
        [_concatInstanceProperty(_context2 = _concatInstanceProperty(_context3 = "".concat(prefix, "-")).call(_context3, size, "-")).call(_context2, sizeProps.span)]: sizeProps.span !== undefined,
        [_concatInstanceProperty(_context4 = _concatInstanceProperty(_context5 = "".concat(prefix, "-")).call(_context5, size, "-order-")).call(_context4, sizeProps.order)]: sizeProps.order || sizeProps.order === 0,
        [_concatInstanceProperty(_context6 = _concatInstanceProperty(_context7 = "".concat(prefix, "-")).call(_context7, size, "-offset-")).call(_context6, sizeProps.offset)]: sizeProps.offset || sizeProps.offset === 0,
        [_concatInstanceProperty(_context8 = _concatInstanceProperty(_context9 = "".concat(prefix, "-")).call(_context9, size, "-push-")).call(_context8, sizeProps.push)]: sizeProps.push || sizeProps.push === 0,
        [_concatInstanceProperty(_context10 = _concatInstanceProperty(_context11 = "".concat(prefix, "-")).call(_context11, size, "-pull-")).call(_context10, sizeProps.pull)]: sizeProps.pull || sizeProps.pull === 0
      });
    });

    const classes = classnames(prefix, {
      [_concatInstanceProperty(_context12 = "".concat(prefix, "-")).call(_context12, span)]: span !== undefined,
      [_concatInstanceProperty(_context13 = "".concat(prefix, "-order-")).call(_context13, order)]: order,
      [_concatInstanceProperty(_context14 = "".concat(prefix, "-offset-")).call(_context14, offset)]: offset,
      [_concatInstanceProperty(_context15 = "".concat(prefix, "-push-")).call(_context15, push)]: push,
      [_concatInstanceProperty(_context16 = "".concat(prefix, "-pull-")).call(_context16, pull)]: pull
    }, className, sizeClassObj);
    let {
      style
    } = others;
    let gutters;

    try {
      gutters = this.context.gutters;
    } catch (error) {
      throw new Error('please make sure <Col> inside <Row>');
    }

    style = _Object$assign(_Object$assign(_Object$assign({}, gutters[0] > 0 ? {
      paddingLeft: gutters[0] / 2,
      paddingRight: gutters[0] / 2
    } : {}), gutters[1] > 0 ? {
      paddingTop: gutters[1] / 2,
      paddingBottom: gutters[1] / 2
    } : {}), style);
    return /*#__PURE__*/React.createElement("div", _Object$assign({}, others, {
      style: style,
      className: classes,
      "x-semi-prop": "children"
    }), children);
  }

}

Col.contextType = RowContext;
Col.propTypes = {
  span: PropTypes.number,
  order: PropTypes.number,
  offset: PropTypes.number,
  push: PropTypes.number,
  pull: PropTypes.number,
  className: PropTypes.string,
  children: PropTypes.node,
  xs: objectOrNumber,
  sm: objectOrNumber,
  md: objectOrNumber,
  lg: objectOrNumber,
  xl: objectOrNumber,
  xxl: objectOrNumber,
  prefixCls: PropTypes.string
};
Col.defaultProps = {
  prefixCls: cssClasses.PREFIX
};
export default Col;