import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/**
 * Implementation reference from: https://github.com/ant-design/ant-design/blob/master/components/grid/row.tsx
 */


import React from 'react';
import classnames from 'classnames';
import PropTypes from 'prop-types';
import { cssClasses } from '@douyinfe/semi-foundation/lib/es/grid/constants';
import '@douyinfe/semi-foundation/lib/es/grid/grid.css';
import { registerMediaQuery } from '../_utils';
const responsiveArray = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];
export const RowContext = /*#__PURE__*/React.createContext(null);
const responsiveMap = {
  xs: '(max-width: 575px)',
  sm: '(min-width: 576px)',
  md: '(min-width: 768px)',
  lg: '(min-width: 992px)',
  xl: '(min-width: 1200px)',
  xxl: '(min-width: 1600px)'
};

class Row extends React.Component {
  constructor() {
    super(...arguments);
    this.state = {
      screens: {
        xs: true,
        sm: true,
        md: true,
        lg: true,
        xl: true,
        xxl: true
      }
    };
    this.unRegisters = [];
  }

  componentDidMount() {
    var _context;

    this.unRegisters = _mapInstanceProperty(_context = _Object$keys(responsiveMap)).call(_context, screen => registerMediaQuery(responsiveMap[screen], {
      match: () => {
        if (typeof this.props.gutter !== 'object') {
          return;
        }

        this.setState(prevState => ({
          screens: _Object$assign(_Object$assign({}, prevState.screens), {
            [screen]: true
          })
        }));
      },
      unmatch: () => {
        if (typeof this.props.gutter !== 'object') {
          return;
        }

        this.setState(prevState => ({
          screens: _Object$assign(_Object$assign({}, prevState.screens), {
            [screen]: false
          })
        }));
      }
    }));
  }

  componentWillUnmount() {
    var _context2;

    _forEachInstanceProperty(_context2 = this.unRegisters).call(_context2, unRegister => unRegister());
  }

  getGutter() {
    const {
      gutter = 0
    } = this.props;
    const results = [0, 0];
    const normalizedGutter = _Array$isArray(gutter) ? _sliceInstanceProperty(gutter).call(gutter, 0, 2) : [gutter, 0];

    _forEachInstanceProperty(normalizedGutter).call(normalizedGutter, (g, index) => {
      if (typeof g === 'object') {
        for (let i = 0; i < responsiveArray.length; i++) {
          const breakpoint = responsiveArray[i];

          if (this.state.screens[breakpoint] && g[breakpoint] !== undefined) {
            results[index] = g[breakpoint];
            break;
          }
        }
      } else {
        results[index] = g || 0;
      }
    });

    return results;
  }

  render() {
    var _context3, _context4, _context5, _context6, _context7;

    const _a = this.props,
          {
      prefixCls,
      type,
      justify,
      align,
      className,
      style,
      children
    } = _a,
          others = __rest(_a, ["prefixCls", "type", "justify", "align", "className", "style", "children"]);

    const gutters = this.getGutter();
    const prefix = "".concat(prefixCls, "-row");
    const classes = classnames({
      [prefix]: type !== 'flex',
      [_concatInstanceProperty(_context3 = "".concat(prefix, "-")).call(_context3, type)]: type,
      [_concatInstanceProperty(_context4 = _concatInstanceProperty(_context5 = "".concat(prefix, "-")).call(_context5, type, "-")).call(_context4, justify)]: type && justify,
      [_concatInstanceProperty(_context6 = _concatInstanceProperty(_context7 = "".concat(prefix, "-")).call(_context7, type, "-")).call(_context6, align)]: type && align
    }, className);

    const rowStyle = _Object$assign(_Object$assign(_Object$assign({}, gutters[0] > 0 ? {
      marginLeft: gutters[0] / -2,
      marginRight: gutters[0] / -2
    } : {}), gutters[1] > 0 ? {
      marginTop: gutters[1] / -2,
      marginBottom: gutters[1] / -2
    } : {}), style);

    const otherProps = _Object$assign({}, others);

    delete otherProps.gutter;
    return /*#__PURE__*/React.createElement(RowContext.Provider, {
      value: {
        gutters
      }
    }, /*#__PURE__*/React.createElement("div", _Object$assign({}, otherProps, {
      className: classes,
      style: rowStyle,
      "x-semi-prop": "children"
    }), children));
  }

}

Row.propTypes = {
  type: PropTypes.oneOf(['flex']),
  align: PropTypes.oneOf(['top', 'middle', 'bottom']),
  justify: PropTypes.oneOf(['start', 'end', 'center', 'space-around', 'space-between']),
  className: PropTypes.string,
  style: PropTypes.object,
  children: PropTypes.node,
  gutter: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),
  prefixCls: PropTypes.string
};
Row.defaultProps = {
  prefixCls: cssClasses.PREFIX
};
Row.RowContext = {
  gutters: PropTypes.any
};
export default Row;