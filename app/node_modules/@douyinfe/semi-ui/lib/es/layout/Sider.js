import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React from 'react';
import cls from 'classnames';
import PropTypes from 'prop-types';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/layout/constants';
import getDataAttr from '@douyinfe/semi-foundation/lib/es/utils/getDataAttr';
import LayoutContext from './layout-context';
import { registerMediaQuery } from '../_utils';
const responsiveMap = {
  xs: '(max-width: 575px)',
  sm: '(min-width: 576px)',
  md: '(min-width: 768px)',
  lg: '(min-width: 992px)',
  xl: '(min-width: 1200px)',
  xxl: '(min-width: 1600px)'
};

const generateId = (() => {
  let i = 0;
  return () => {
    var _context;

    i += 1;
    return _concatInstanceProperty(_context = "".concat(cssClasses.PREFIX, "-sider-")).call(_context, i);
  };
})();

const bpt = strings.BREAKPOINT;

class Sider extends React.PureComponent {
  constructor(props) {
    super(props);
    this.unRegisters = [];
    this.uniqueId = '';
    this.uniqueId = generateId();
  }

  componentDidMount() {
    var _context2;

    const {
      breakpoint
    } = this.props;

    const matchBpt = _filterInstanceProperty(_context2 = _Object$keys(responsiveMap)).call(_context2, item => breakpoint && _indexOfInstanceProperty(breakpoint).call(breakpoint, item) !== -1);

    const unRegisters = _mapInstanceProperty(matchBpt).call(matchBpt, screen => registerMediaQuery(responsiveMap[screen], {
      match: () => {
        this.responsiveHandler(screen, true);
      },
      unmatch: () => {
        this.responsiveHandler(screen, false);
      }
    }));

    this.unRegisters = unRegisters;

    if (this.context.siderHook) {
      this.context.siderHook.addSider(this.uniqueId);
    }
  }

  componentWillUnmount() {
    var _context3;

    _forEachInstanceProperty(_context3 = this.unRegisters).call(_context3, unRegister => unRegister());

    if (this.context.siderHook) {
      this.context.siderHook.removeSider(this.uniqueId);
    }
  }

  responsiveHandler(screen, matches) {
    const {
      onBreakpoint
    } = this.props;

    if (onBreakpoint) {
      onBreakpoint(screen, matches);
    }
  }

  render() {
    const _a = this.props,
          {
      prefixCls,
      className,
      children,
      style
    } = _a,
          others = __rest(_a, ["prefixCls", "className", "children", "style"]);

    const classString = cls(className, {
      ["".concat(prefixCls, "-sider")]: true
    });
    return /*#__PURE__*/React.createElement("aside", _Object$assign({
      className: classString,
      "aria-label": this.props['aria-label'],
      style: style
    }, getDataAttr(others)), /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-sider-children")
    }, children));
  }

}

Sider.propTypes = {
  prefixCls: PropTypes.string,
  style: PropTypes.object,
  className: PropTypes.string,
  breakpoint: PropTypes.arrayOf(PropTypes.oneOf(bpt)),
  onBreakpoint: PropTypes.func,
  'aria-label': PropTypes.string,
  role: PropTypes.string
};
Sider.defaultProps = {
  prefixCls: cssClasses.PREFIX
};
Sider.contextType = LayoutContext;
export default Sider;