import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { cssClasses } from '@douyinfe/semi-foundation/lib/es/descriptions/constants';
import '@douyinfe/semi-foundation/lib/es/descriptions/descriptions.css';
import DescriptionsContext from './descriptions-context';
const prefixCls = cssClasses.PREFIX;
const keyCls = "".concat(prefixCls, "-key");
const valCls = "".concat(prefixCls, "-value");
export default class Item extends PureComponent {
  render() {
    var _context, _context2;

    const {
      itemKey,
      hidden,
      className,
      style,
      children
    } = this.props;
    const {
      align
    } = this.context;

    if (hidden) {
      return null;
    }

    const item = align === 'plain' ? /*#__PURE__*/React.createElement("tr", {
      className: className,
      style: style
    }, /*#__PURE__*/React.createElement("td", {
      className: "".concat(prefixCls, "-item")
    }, /*#__PURE__*/React.createElement("span", {
      className: keyCls
    }, itemKey, ":"), /*#__PURE__*/React.createElement("span", {
      className: valCls
    }, typeof children === 'function' ? children() : children))) : /*#__PURE__*/React.createElement("tr", {
      className: className,
      style: style
    }, /*#__PURE__*/React.createElement("th", {
      className: _concatInstanceProperty(_context = "".concat(prefixCls, "-item ")).call(_context, prefixCls, "-item-th")
    }, /*#__PURE__*/React.createElement("span", {
      className: keyCls
    }, itemKey)), /*#__PURE__*/React.createElement("td", {
      className: _concatInstanceProperty(_context2 = "".concat(prefixCls, "-item ")).call(_context2, prefixCls, "-item-td")
    }, /*#__PURE__*/React.createElement("span", {
      className: valCls
    }, typeof children === 'function' ? children() : children)));
    return item;
  }

}
Item.propTypes = {
  itemKey: PropTypes.node,
  hidden: PropTypes.bool,
  className: PropTypes.string,
  style: PropTypes.object
};
Item.contextType = DescriptionsContext;