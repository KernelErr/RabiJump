import _isPlainObject from "lodash/isPlainObject";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import React, { PureComponent } from 'react';
import cls from 'classnames';
import PropTypes from 'prop-types';
import { strings, cssClasses } from '@douyinfe/semi-foundation/lib/es/descriptions/constants';
import '@douyinfe/semi-foundation/lib/es/descriptions/descriptions.css';
import DescriptionsContext from './descriptions-context';
import Item from './item';
const prefixCls = cssClasses.PREFIX;

class Descriptions extends PureComponent {
  render() {
    var _context, _context2;

    const {
      align,
      row,
      size,
      className,
      style,
      children,
      data
    } = this.props;
    const classNames = cls(prefixCls, className, {
      [_concatInstanceProperty(_context = "".concat(prefixCls, "-")).call(_context, align)]: !row,
      ["".concat(prefixCls, "-double")]: row,
      [_concatInstanceProperty(_context2 = "".concat(prefixCls, "-double-")).call(_context2, size)]: row
    });
    const childrenList = data && data.length ? _mapInstanceProperty(data).call(data, (item, index) => _isPlainObject(item) ? /*#__PURE__*/React.createElement(Item, _Object$assign({
      itemKey: item.key
    }, item, {
      key: index
    }), item.value) : null) : children;
    return /*#__PURE__*/React.createElement("div", {
      className: classNames,
      style: style
    }, /*#__PURE__*/React.createElement("table", null, /*#__PURE__*/React.createElement("tbody", null, /*#__PURE__*/React.createElement(DescriptionsContext.Provider, {
      value: {
        align
      }
    }, childrenList))));
  }

}

Descriptions.Item = Item;
Descriptions.contextType = DescriptionsContext;
Descriptions.propTypes = {
  align: PropTypes.oneOf(strings.ALIGN_SET),
  row: PropTypes.bool,
  size: PropTypes.oneOf(strings.SIZE_SET),
  style: PropTypes.object,
  className: PropTypes.string,
  data: PropTypes.arrayOf(PropTypes.shape({
    key: PropTypes.node,
    value: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    hidden: PropTypes.bool,
    className: PropTypes.string,
    style: PropTypes.object
  }))
};
Descriptions.defaultProps = {
  align: 'center',
  row: false,
  size: 'medium',
  data: []
};
export default Descriptions;