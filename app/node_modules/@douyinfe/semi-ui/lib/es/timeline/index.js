import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import React, { PureComponent } from 'react';
import cls from 'classnames';
import PropTypes from 'prop-types';
import '@douyinfe/semi-foundation/lib/es/timeline/timeline.css';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/timeline/constants';
import ConfigContext from '../configProvider/context';
import Item from './item';
const prefixCls = cssClasses.PREFIX;

class Timeline extends PureComponent {
  constructor() {
    super(...arguments);

    this.getPosCls = (ele, idx) => {
      const {
        mode
      } = this.props;

      if (mode === 'alternate') {
        if (ele.props.position) {
          var _context;

          return _concatInstanceProperty(_context = "".concat(prefixCls, "-item-")).call(_context, ele.props.position);
        }

        return idx % 2 === 0 ? "".concat(prefixCls, "-item-left") : "".concat(prefixCls, "-item-right");
      }

      if (mode === 'center') {
        if (ele.props.position) {
          var _context2;

          return _concatInstanceProperty(_context2 = "".concat(prefixCls, "-item-")).call(_context2, ele.props.position);
        }

        return "".concat(prefixCls, "-item-left");
      }

      if (mode === 'left' || mode === 'right') {
        var _context3;

        return _concatInstanceProperty(_context3 = "".concat(prefixCls, "-item-")).call(_context3, mode);
      }

      if (ele.props.position) {
        var _context4;

        return _concatInstanceProperty(_context4 = "".concat(prefixCls, "-item-")).call(_context4, ele.props.position);
      }

      return '';
    };

    this.addClassName = items => {
      var _context5;

      return _mapInstanceProperty(_context5 = React.Children).call(_context5, items, (ele, idx) => {
        if ( /*#__PURE__*/React.isValidElement(ele)) {
          return /*#__PURE__*/React.cloneElement(ele, {
            className: cls(ele.props.className, this.getPosCls(ele, idx))
          });
        }

        return ele;
      });
    };
  }

  render() {
    var _context6;

    const {
      children,
      className,
      style,
      mode,
      dataSource
    } = this.props;
    const classString = cls(prefixCls, className, {
      [_concatInstanceProperty(_context6 = "".concat(prefixCls, "-")).call(_context6, mode)]: mode
    });
    let childrenList;

    if (dataSource && dataSource.length) {
      const items = _mapInstanceProperty(dataSource).call(dataSource, (item, index) => /*#__PURE__*/React.createElement(Item, _Object$assign({
        key: "timeline-item-".concat(index)
      }, item), item.content));

      childrenList = this.addClassName(items);
    }

    const items = childrenList || this.addClassName(children);
    return /*#__PURE__*/React.createElement("ul", {
      "aria-label": this.props['aria-label'],
      style: style,
      className: classString
    }, items);
  }

}

Timeline.contextType = ConfigContext;
Timeline.Item = Item;
Timeline.propTypes = {
  mode: PropTypes.oneOf(strings.MODE),
  className: PropTypes.string,
  style: PropTypes.object,
  dataSource: PropTypes.array
};
Timeline.defaultProps = {
  mode: 'left'
};
export default Timeline;