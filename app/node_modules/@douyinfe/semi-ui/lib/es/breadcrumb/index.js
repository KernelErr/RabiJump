import _isFunction from "lodash/isFunction";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _spliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/splice";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _bindInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/bind";

/* eslint-disable max-len */
import React from 'react';
import cls from 'classnames';
import propTypes from 'prop-types';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/breadcrumb/constants';
import BreadcrumbFoundation from '@douyinfe/semi-foundation/lib/es/breadcrumb/foundation';
import warning from '@douyinfe/semi-foundation/lib/es/utils/warning';
import '@douyinfe/semi-foundation/lib/es/breadcrumb/breadcrumb.css';
import { noop } from '@douyinfe/semi-foundation/lib/es/utils/function';
import BaseComponent from '../_base/baseComponent';
import Popover from '../popover';
import BreadcrumbItem from './item';
import BreadContext from './bread-context';
import { IconMore } from '@douyinfe/semi-icons';
const clsPrefix = cssClasses.PREFIX;

class Breadcrumb extends BaseComponent {
  constructor(props) {
    var _context3;

    super(props);

    this.handleCollapse = (template, itemsLen) => {
      var _context;

      const {
        maxItemCount,
        renderMore,
        moreType
      } = this.props;

      const hasRenderMore = _isFunction(renderMore);

      const restItem = _sliceInstanceProperty(template).call(template, 1, itemsLen - 3);

      const spread = /*#__PURE__*/React.createElement("span", {
        className: "".concat(clsPrefix, "-collapse"),
        key: "more-".concat(itemsLen)
      }, /*#__PURE__*/React.createElement("span", {
        className: "".concat(clsPrefix, "-item-wrap")
      }, /*#__PURE__*/React.createElement("span", {
        role: "button",
        tabIndex: 0,
        "aria-label": "Expand breadcrumb items",
        className: _concatInstanceProperty(_context = "".concat(clsPrefix, "-item ")).call(_context, clsPrefix, "-item-more"),
        onClick: item => this.foundation.handleExpand(item),
        onKeyPress: e => this.foundation.handleExpandEnterPress(e)
      }, hasRenderMore && renderMore(restItem), !hasRenderMore && moreType === 'default' && /*#__PURE__*/React.createElement(IconMore, null), !hasRenderMore && moreType === 'popover' && this.renderPopoverMore(restItem)), /*#__PURE__*/React.createElement("span", {
        className: "".concat(clsPrefix, "-separator"),
        "x-semi-prop": "separator"
      }, this.props.separator)));

      _spliceInstanceProperty(template).call(template, 1, itemsLen - maxItemCount, spread);

      return template;
    };

    this.renderRouteItems = (items, shouldCollapse, moreTypeIsPopover) => {
      const {
        renderItem,
        renderMore,
        maxItemCount
      } = this.props;
      const restItemLength = items.length - maxItemCount;

      const hasRenderMore = _isFunction(renderMore);

      const template = _mapInstanceProperty(items).call(items, (route, idx) => {
        var _context2;

        const key = route._origin.key || _concatInstanceProperty(_context2 = "item-".concat(route.name || route.path, "-")).call(_context2, idx);

        const inCollapseArea = idx > 0 && idx <= restItemLength;
        return /*#__PURE__*/React.createElement(BreadcrumbItem, _Object$assign({}, route, {
          key: key,
          active: idx === items.length - 1,
          route: route._origin,
          // eslint-disable-next-line max-len
          shouldRenderSeparator: !(shouldCollapse && (hasRenderMore || moreTypeIsPopover) && inCollapseArea)
        }), renderItem ? renderItem(route._origin) : route.name);
      });

      return template;
    };

    this.renderList = () => {
      const {
        routes,
        children,
        autoCollapse,
        maxItemCount,
        renderMore,
        moreType
      } = this.props;
      const {
        isCollapsed
      } = this.state;
      const hasRoutes = routes && routes.length > 0;
      const items = hasRoutes ? this.foundation.genRoutes(routes) : React.Children.toArray(children);
      let template;
      const itemLength = items.length; // children length

      const restItemLength = itemLength - maxItemCount; // Omitted children items

      const shouldCollapse = items && autoCollapse && itemLength > maxItemCount && isCollapsed; // Whether the number of children exceeds, need to collapse

      const hasRenderMore = _isFunction(renderMore); // Whether the user passes in the renderMore method


      const moreTypeIsPopover = moreType === 'popover';

      if (hasRoutes) {
        template = this.renderRouteItems(items, shouldCollapse, moreTypeIsPopover);
      } else {
        template = _mapInstanceProperty(items).call(items, (item, idx) => {
          const inCollapseArea = idx > 0 && idx <= restItemLength;

          if (!item) {
            return item;
          }

          warning(item.type && !item.type.isBreadcrumbItem, '[Semi Breadcrumb]: Only accepts Breadcrumb.Item as its children');
          return /*#__PURE__*/React.cloneElement(item, {
            key: "".concat(idx, "-item"),
            active: idx === items.length - 1,
            shouldRenderSeparator: !(shouldCollapse && (hasRenderMore || moreTypeIsPopover) && inCollapseArea)
          });
        });
      }

      if (shouldCollapse) {
        return this.handleCollapse(template, items.length);
      }

      return template;
    };

    this.onClick = (info, event) => {
      this.foundation.handleClick(info, event);
    };

    this.foundation = new BreadcrumbFoundation(this.adapter);
    this.state = {
      isCollapsed: true
    };
    this.onClick = _bindInstanceProperty(_context3 = this.onClick).call(_context3, this);
  }

  get adapter() {
    var _this = this;

    return _Object$assign(_Object$assign({}, super.adapter), {
      notifyClick: function () {
        _this.props.onClick(...arguments);
      },
      expandCollapsed: () => this.setState({
        isCollapsed: false
      })
    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  renderPopoverMore(restItem) {
    const {
      separator
    } = this.props;
    const content = /*#__PURE__*/React.createElement(React.Fragment, null, _mapInstanceProperty(restItem).call(restItem, (item, idx) => /*#__PURE__*/React.createElement(React.Fragment, {
      key: "restItem-".concat(idx)
    }, item, idx !== restItem.length - 1 && /*#__PURE__*/React.createElement("span", {
      className: "".concat(clsPrefix, "-restItem")
    }, separator))));
    return /*#__PURE__*/React.createElement(Popover, {
      content: content,
      style: {
        padding: 12
      },
      showArrow: true
    }, /*#__PURE__*/React.createElement(IconMore, null));
  }

  render() {
    const breadcrumbs = this.renderList();
    const {
      compact,
      className,
      style,
      separator,
      showTooltip
    } = this.props;
    const sizeCls = cls(className, {
      ["".concat(clsPrefix, "-wrapper")]: true,
      ["".concat(clsPrefix, "-wrapper-compact")]: compact,
      ["".concat(clsPrefix, "-wrapper-loose")]: !compact
    });
    return /*#__PURE__*/React.createElement(BreadContext.Provider, {
      value: {
        onClick: this.onClick,
        showTooltip,
        compact,
        separator
      }
    }, /*#__PURE__*/React.createElement("nav", {
      "aria-label": this.props['aria-label'],
      className: sizeCls,
      style: style
    }, breadcrumbs));
  }

}

Breadcrumb.contextType = BreadContext;
Breadcrumb.Item = BreadcrumbItem;
Breadcrumb.propTypes = {
  routes: propTypes.array,
  onClick: propTypes.func,
  separator: propTypes.node,
  compact: propTypes.bool,
  children: propTypes.node,
  style: propTypes.object,
  renderItem: propTypes.func,
  showTooltip: propTypes.oneOfType([propTypes.shape({
    width: propTypes.oneOfType([propTypes.string, propTypes.number]),
    ellipsisPos: propTypes.oneOf(['end', 'middle']),
    opts: propTypes.object
  }), propTypes.bool]),
  className: propTypes.string,
  autoCollapse: propTypes.bool,
  maxItemCount: propTypes.number,

  /* Customize the contents of the ellipsis area */
  renderMore: propTypes.func,

  /* Type of ellipsis area */
  moreType: propTypes.oneOf(strings.MORE_TYPE),
  'aria-label': propTypes.string
};
Breadcrumb.defaultProps = {
  routes: [],
  onClick: noop,
  renderItem: undefined,
  separator: '/',
  compact: true,
  showTooltip: {
    width: 150,
    ellipsisPos: 'end'
  },
  autoCollapse: true,
  moreType: 'default',
  maxItemCount: 4,
  'aria-label': 'Breadcrumb'
};
export default Breadcrumb;