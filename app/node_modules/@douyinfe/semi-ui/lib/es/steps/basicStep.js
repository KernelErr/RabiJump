import _isFunction from "lodash/isFunction";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { stepsClasses as css } from '@douyinfe/semi-foundation/lib/es/steps/constants';
import { IconTickCircle, IconAlertCircle, IconAlertTriangle } from '@douyinfe/semi-icons';
export var stepSizeMapIconSize;

(function (stepSizeMapIconSize) {
  stepSizeMapIconSize["small"] = "large";
  stepSizeMapIconSize["default"] = "extra-large";
})(stepSizeMapIconSize || (stepSizeMapIconSize = {}));

const BasicStep = props => {
  var _context;

  const {
    prefixCls,
    className,
    size,
    title,
    description,
    status,
    style,
    active,
    done,
    icon,
    stepNumber,
    onClick,
    onChange,
    onKeyDown
  } = props;

  const renderIcon = () => {
    let inner, progress;

    if ('icon' in props) {
      if ( /*#__PURE__*/React.isValidElement(icon)) {
        inner = icon;
      }
    } else if ('status' in props) {
      switch (status) {
        case 'error':
          inner = /*#__PURE__*/React.createElement(IconAlertCircle, {
            size: stepSizeMapIconSize[size]
          });
          break;

        case 'wait':
          inner = /*#__PURE__*/React.createElement("span", {
            className: "".concat(prefixCls, "-number-icon")
          }, stepNumber);
          break;

        case 'process':
          inner = /*#__PURE__*/React.createElement("span", {
            className: "".concat(prefixCls, "-number-icon")
          }, stepNumber);
          progress = true;
          break;

        case 'finish':
          inner = /*#__PURE__*/React.createElement(IconTickCircle, {
            size: stepSizeMapIconSize[size]
          });
          break;

        case 'warning':
          inner = /*#__PURE__*/React.createElement(IconAlertTriangle, {
            size: stepSizeMapIconSize[size]
          });
          break;

        default:
          inner = null;
          break;
      }
    }

    const cls = classnames({
      ["".concat(prefixCls, "-icon")]: true,
      ["".concat(prefixCls, "-custom-icon")]: 'icon' in props,
      ["".concat(prefixCls, "-icon-process")]: progress
    });
    return inner ? /*#__PURE__*/React.createElement("span", {
      className: cls
    }, inner) : null;
  };

  const classString = classnames(prefixCls, _concatInstanceProperty(_context = "".concat(prefixCls, "-")).call(_context, status), {
    ["".concat(prefixCls, "-active")]: active,
    ["".concat(prefixCls, "-done")]: done
  }, className);

  const handleClick = e => {
    if (_isFunction(onClick)) {
      onClick(e);
    }

    onChange();
  };

  const handleKeyDown = e => {
    if (e.key === 'Enter') {
      if (_isFunction(onKeyDown)) {
        onKeyDown(e);
      }

      onChange();
    }
  };

  return /*#__PURE__*/React.createElement("div", {
    role: props["role"],
    "aria-label": props["aria-label"],
    tabIndex: 0,
    "aria-current": "step",
    className: classString,
    style: style,
    onClick: e => handleClick(e),
    onKeyDown: handleKeyDown
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-container")
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-left")
  }, renderIcon()), /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-content")
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-title")
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-title-text")
  }, title)), description && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-description")
  }, description))));
};

BasicStep.propTypes = {
  prefixCls: PropTypes.string,
  description: PropTypes.node,
  icon: PropTypes.node,
  status: PropTypes.oneOf(['wait', 'process', 'finish', 'error', 'warning']),
  title: PropTypes.node,
  className: PropTypes.string,
  style: PropTypes.object,
  onClick: PropTypes.func,
  active: PropTypes.bool,
  done: PropTypes.bool
};
BasicStep.defaultProps = {
  prefixCls: css.ITEM,
  active: false,
  done: false,
  status: 'wait',
  className: ''
};
export default BasicStep;