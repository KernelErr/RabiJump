import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import React, { cloneElement, Children, useMemo, isValidElement } from 'react';
import PropTypes from 'prop-types';
import cls from 'classnames';
import { stepsClasses as css } from '@douyinfe/semi-foundation/lib/es/steps/constants';

const Steps = props => {
  var _context2;

  const {
    size,
    current,
    initial,
    children,
    prefixCls,
    className,
    style,
    onChange
  } = props;
  const inner = useMemo(() => {
    var _context;

    const filteredChildren = _filterInstanceProperty(_context = Children.toArray(children)).call(_context, c => /*#__PURE__*/isValidElement(c));

    const total = filteredChildren.length;

    const content = _mapInstanceProperty(Children).call(Children, filteredChildren, (child, index) => {
      if (!child) {
        return null;
      }

      const childProps = _Object$assign({
        index,
        total
      }, child.props);

      childProps.active = index === current;

      childProps.onChange = () => {
        if (index !== current) {
          onChange(index + initial);
        }
      };

      return /*#__PURE__*/cloneElement(child, _Object$assign({}, childProps));
    });

    return content;
  }, [children, prefixCls, current, size, initial, onChange]);
  const wrapperCls = cls(className, {
    ["".concat(prefixCls, "-nav")]: true,
    [_concatInstanceProperty(_context2 = "".concat(prefixCls, "-")).call(_context2, size)]: size !== 'default'
  });
  return /*#__PURE__*/React.createElement("div", {
    "aria-label": props["aria-label"],
    className: wrapperCls,
    style: style
  }, inner);
};

Steps.propTypes = {
  prefixCls: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object,
  current: PropTypes.number,
  initial: PropTypes.number,
  size: PropTypes.oneOf(['small', 'default'])
};
Steps.defaultProps = {
  prefixCls: css.PREFIX,
  current: 0,
  direction: 'horizontal',
  size: 'default',
  initial: 0,
  status: 'process'
};
export default Steps;