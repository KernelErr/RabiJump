import _isString from "lodash/isString";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable max-len */


import React, { PureComponent } from 'react';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import { cssClasses } from '@douyinfe/semi-foundation/lib/es/select/constants';
import LocaleConsumer from '../locale/localeConsumer';
import { IconTick } from '@douyinfe/semi-icons';
import { getHighLightTextHTML } from '../_utils/index';

class Option extends PureComponent {
  onClick(_a, event) {
    var {
      value,
      label,
      children
    } = _a,
        rest = __rest(_a, ["value", "label", "children"]);

    const {
      props
    } = this;
    const isDisabled = props.disabled;

    if (!isDisabled) {
      props.onSelect(_Object$assign(_Object$assign({}, rest), {
        value,
        label: label || children
      }), event);
    }
  }

  renderOptionContent(_ref) {
    let {
      config,
      children,
      inputValue,
      prefixCls
    } = _ref;

    if (_isString(children) && inputValue) {
      return getHighLightTextHTML(config);
    }

    return children;
  }

  render() {
    const _a = this.props,
          {
      children,
      disabled,
      value,
      selected,
      label,
      empty,
      emptyContent,
      onSelect,
      focused,
      showTick,
      className,
      style,
      onMouseEnter,
      prefixCls,
      renderOptionItem,
      inputValue,
      id
    } = _a,
          rest = __rest(_a, ["children", "disabled", "value", "selected", "label", "empty", "emptyContent", "onSelect", "focused", "showTick", "className", "style", "onMouseEnter", "prefixCls", "renderOptionItem", "inputValue", "id"]);

    const optionClassName = classNames(prefixCls, {
      ["".concat(prefixCls, "-disabled")]: disabled,
      ["".concat(prefixCls, "-selected")]: selected,
      ["".concat(prefixCls, "-focused")]: focused,
      ["".concat(prefixCls, "-empty")]: empty,
      [className]: className
    });
    const selectedIconClassName = classNames(["".concat(prefixCls, "-icon")]);

    if (empty) {
      if (emptyContent === null) {
        return null;
      }

      return /*#__PURE__*/React.createElement(LocaleConsumer, {
        componentName: "Select"
      }, locale => /*#__PURE__*/React.createElement("div", {
        className: optionClassName,
        "x-semi-prop": "emptyContent"
      }, emptyContent || locale.emptyText));
    } // Since there are empty, locale and other logic, the custom renderOptionItem is directly converged to the internal option instead of being placed in Select/index


    if (typeof renderOptionItem === 'function') {
      return renderOptionItem(_Object$assign({
        disabled,
        focused,
        selected,
        style,
        label,
        value,
        inputValue,
        onMouseEnter: e => onMouseEnter(e),
        onClick: e => this.onClick(_Object$assign({
          value,
          label,
          children
        }, rest), e)
      }, rest));
    }

    const config = {
      searchWords: inputValue,
      sourceString: children,
      option: {
        highlightClassName: "".concat(prefixCls, "-keyword")
      }
    };
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/interactive-supports-focus,jsx-a11y/click-events-have-key-events
      React.createElement("div", {
        className: optionClassName,
        onClick: e => {
          this.onClick(_Object$assign({
            value,
            label,
            children
          }, rest), e);
        },
        onMouseEnter: e => onMouseEnter && onMouseEnter(e),
        role: "option",
        id: id,
        "aria-selected": selected ? "true" : "false",
        "aria-disabled": disabled ? "true" : "false",
        style: style
      }, showTick ? /*#__PURE__*/React.createElement("div", {
        className: selectedIconClassName
      }, /*#__PURE__*/React.createElement(IconTick, null)) : null, _isString(children) ? /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-text")
      }, this.renderOptionContent({
        children,
        config,
        inputValue,
        prefixCls
      })) : children)
    );
  }

}

Option.isSelectOption = true;
Option.propTypes = {
  children: PropTypes.node,
  disabled: PropTypes.bool,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  selected: PropTypes.bool,
  label: PropTypes.node,
  empty: PropTypes.bool,
  emptyContent: PropTypes.node,
  onSelect: PropTypes.func,
  focused: PropTypes.bool,
  showTick: PropTypes.bool,
  className: PropTypes.string,
  style: PropTypes.object,
  onMouseEnter: PropTypes.func,
  prefixCls: PropTypes.string,
  renderOptionItem: PropTypes.func,
  inputValue: PropTypes.string
};
Option.defaultProps = {
  prefixCls: cssClasses.PREFIX_OPTION
};
export default Option;