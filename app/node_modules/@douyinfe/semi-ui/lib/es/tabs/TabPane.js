import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _findIndexInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/find-index";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React, { createRef, PureComponent } from 'react';
import PropTypes from 'prop-types';
import cls from 'classnames';
import { cssClasses } from '@douyinfe/semi-foundation/lib/es/tabs/constants';
import getDataAttr from '@douyinfe/semi-foundation/lib/es/utils/getDataAttr';
import TabsContext from './tabs-context';
import TabPaneTransition from './TabPaneTransition';

class TabPane extends PureComponent {
  constructor() {
    super(...arguments);
    this.lastActiveKey = null;
    this.ref = /*#__PURE__*/createRef(); // get direction from current item key to activeKey

    this.getDirection = (activeKey, itemKey, panes) => {
      if (itemKey !== null && activeKey !== null && _Array$isArray(panes) && panes.length) {
        const activeIndex = _findIndexInstanceProperty(panes).call(panes, pane => pane.itemKey === activeKey);

        const itemIndex = _findIndexInstanceProperty(panes).call(panes, pane => pane.itemKey === itemKey);

        const lastActiveIndex = _findIndexInstanceProperty(panes).call(panes, pane => pane.itemKey === this.lastActiveKey);

        this.lastActiveKey = activeKey;

        if (activeIndex === itemIndex) {
          return lastActiveIndex > activeIndex;
        } else {
          return itemIndex < activeIndex;
        }
      }

      return false;
    };
    /* istanbul ignore next */


    this.hideScroll = () => {
      if (this.ref && this.ref.current) {
        this.ref.current.style.overflow = 'hidden';
        this.isAnimating = true;
      }
    };
    /* istanbul ignore next */


    this.autoScroll = () => {
      if (this.ref && this.ref.current) {
        this.ref.current.style.overflow = '';
        this.isAnimating = false;
      }
    };

    this.shouldRender = () => {
      const {
        itemKey
      } = this.props;
      const {
        activeKey,
        lazyRender
      } = this.context;
      const active = activeKey === itemKey;
      this._active = this._active || active;
      return lazyRender ? this._active : true;
    };
  }

  componentDidMount() {
    this.lastActiveKey = this.context.activeKey;
  }

  render() {
    const {
      tabPaneMotion: motion,
      tabPosition
    } = this.context;

    const _a = this.props,
          {
      className,
      style,
      children,
      itemKey
    } = _a,
          restProps = __rest(_a, ["className", "style", "children", "itemKey"]);

    const active = this.context.activeKey === itemKey;
    const classNames = cls(className, {
      [cssClasses.TABS_PANE_INACTIVE]: !active,
      [cssClasses.TABS_PANE_ACTIVE]: active,
      [cssClasses.TABS_PANE]: true
    });
    const shouldRender = this.shouldRender();
    return /*#__PURE__*/React.createElement("div", _Object$assign({
      ref: this.ref,
      role: "tabpanel",
      id: "semiTabPanel".concat(itemKey),
      "aria-labelledby": "semiTab".concat(itemKey),
      className: classNames,
      style: style,
      "aria-hidden": active ? 'false' : 'true',
      tabIndex: 0
    }, getDataAttr(restProps), {
      "x-semi-prop": "children"
    }), motion ? /*#__PURE__*/React.createElement(TabPaneTransition, {
      direction: this.getDirection(this.context.activeKey, itemKey, this.context.panes),
      motion: motion,
      mode: tabPosition === 'top' ? 'horizontal' : 'vertical',
      state: active ? 'enter' : 'leave'
    }, transitionStyle => /*#__PURE__*/React.createElement("div", {
      className: "".concat(cssClasses.TABS_PANE_MOTION_OVERLAY),
      style: _Object$assign({}, transitionStyle),
      "x-semi-prop": "children"
    }, shouldRender ? children : null)) : shouldRender ? children : null);
  }

}

TabPane.isTabPane = true;
TabPane.contextType = TabsContext;
TabPane.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  children: PropTypes.node,
  disabled: PropTypes.bool,
  itemKey: PropTypes.string,
  tab: PropTypes.node,
  icon: PropTypes.node,
  closable: PropTypes.bool
};
export default TabPane;