import _isEmpty from "lodash/isEmpty";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React from 'react';
import PropTypes from 'prop-types';
import cls from 'classnames';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/tabs/constants';
import getDataAttr from '@douyinfe/semi-foundation/lib/es/utils/getDataAttr';
import OverflowList from '../overflowList';
import Dropdown from '../dropdown';
import Button from '../button';
import { IconChevronRight, IconChevronLeft, IconClose } from '@douyinfe/semi-icons';
import { getUuidv4 } from '@douyinfe/semi-foundation/lib/es/utils/uuid';

class TabBar extends React.Component {
  constructor(props) {
    super(props);

    this.handleItemClick = (itemKey, e) => {
      this.props.onTabClick(itemKey, e);

      if (this.props.collapsible) {
        var _context, _context2;

        const key = this._getItemKey(itemKey); // eslint-disable-next-line max-len


        const tabItem = document.querySelector(_concatInstanceProperty(_context = _concatInstanceProperty(_context2 = "[data-uuid=\"".concat(this.uuid, "\"] .")).call(_context2, cssClasses.TABS_TAB, "[data-scrollkey=\"")).call(_context, key, "\"]"));
        tabItem.scrollIntoView({
          behavior: 'smooth',
          block: 'nearest',
          inline: 'nearest'
        });
      }
    };

    this.handleKeyDown = (event, itemKey, closable) => {
      this.props.handleKeyDown(event, itemKey, closable);
    };

    this.renderTabItem = panel => {
      const {
        size,
        type,
        deleteTabItem
      } = this.props;
      const panelIcon = panel.icon ? this.renderIcon(panel.icon) : null;
      const closableIcon = type === 'card' && panel.closable ? /*#__PURE__*/React.createElement(IconClose, {
        "aria-label": "Close",
        role: "button",
        className: "".concat(cssClasses.TABS_TAB, "-icon-close"),
        onClick: e => deleteTabItem(panel.itemKey, e)
      }) : null;
      let events = {};
      const key = panel.itemKey;

      if (!panel.disabled) {
        events = {
          onClick: e => this.handleItemClick(key, e)
        };
      }

      const isSelected = this._isActive(key);

      const className = cls(cssClasses.TABS_TAB, {
        [cssClasses.TABS_TAB_ACTIVE]: isSelected,
        [cssClasses.TABS_TAB_DISABLED]: panel.disabled,
        ["".concat(cssClasses.TABS_TAB, "-small")]: size === 'small',
        ["".concat(cssClasses.TABS_TAB, "-medium")]: size === 'medium'
      });
      return /*#__PURE__*/React.createElement("div", _Object$assign({
        role: "tab",
        id: "semiTab".concat(key),
        "data-tabkey": "semiTab".concat(key),
        "aria-controls": "semiTabPanel".concat(key),
        "aria-disabled": panel.disabled ? 'true' : 'false',
        "aria-selected": isSelected ? 'true' : 'false',
        tabIndex: isSelected ? 0 : -1,
        onKeyDown: e => this.handleKeyDown(e, key, panel.closable)
      }, events, {
        className: className,
        key: this._getItemKey(key)
      }), panelIcon, panel.tab, closableIcon);
    };

    this.renderTabComponents = list => _mapInstanceProperty(list).call(list, panel => this.renderTabItem(panel));

    this.handleArrowClick = (items, pos) => {
      var _context3, _context4;

      const inline = pos === 'start' ? 'end' : 'start';
      const lastItem = pos === 'start' ? items.pop() : items.shift();

      if (!lastItem) {
        return;
      }

      const key = this._getItemKey(lastItem.itemKey); // eslint-disable-next-line max-len


      const tabItem = document.querySelector(_concatInstanceProperty(_context3 = _concatInstanceProperty(_context4 = "[data-uuid=\"".concat(this.uuid, "\"] .")).call(_context4, cssClasses.TABS_TAB, "[data-scrollkey=\"")).call(_context3, key, "\"]"));
      tabItem.scrollIntoView({
        behavior: 'smooth',
        block: 'nearest',
        inline
      });
    };

    this.renderCollapse = (items, icon, pos) => {
      var _context5, _context6;

      if (_isEmpty(items)) {
        return null;
      }

      const {
        dropdownClassName,
        dropdownStyle
      } = this.props;
      const {
        rePosKey
      } = this.state;
      const disabled = !items.length;
      const menu = /*#__PURE__*/React.createElement(Dropdown.Menu, null, _mapInstanceProperty(items).call(items, panel => {
        const {
          icon: i,
          tab,
          itemKey
        } = panel;
        const panelIcon = i ? this.renderIcon(panel.icon) : null;
        return /*#__PURE__*/React.createElement(Dropdown.Item, {
          key: itemKey,
          onClick: e => this.handleItemClick(itemKey, e),
          active: this._isActive(itemKey)
        }, panelIcon, tab);
      }));
      const arrowCls = cls({
        [_concatInstanceProperty(_context5 = "".concat(cssClasses.TABS_BAR, "-arrow-")).call(_context5, pos)]: pos,
        ["".concat(cssClasses.TABS_BAR, "-arrow")]: true
      });
      const dropdownCls = cls(dropdownClassName, {
        ["".concat(cssClasses.TABS_BAR, "-dropdown")]: true
      });
      return /*#__PURE__*/React.createElement(Dropdown, {
        className: dropdownCls,
        clickToHide: true,
        clickTriggerToHide: true,
        key: _concatInstanceProperty(_context6 = "".concat(rePosKey, "-")).call(_context6, pos),
        position: pos === 'start' ? 'bottomLeft' : 'bottomRight',
        render: disabled ? null : menu,
        showTick: true,
        style: dropdownStyle,
        trigger: 'hover'
      }, /*#__PURE__*/React.createElement("div", {
        role: "presentation",
        className: arrowCls,
        onClick: e => this.handleArrowClick(items, pos)
      }, /*#__PURE__*/React.createElement(Button, {
        disabled: disabled,
        icon: icon,
        // size="small"
        theme: "borderless"
      })));
    };

    this.renderOverflow = items => _mapInstanceProperty(items).call(items, (item, ind) => {
      const icon = ind === 0 ? /*#__PURE__*/React.createElement(IconChevronLeft, null) : /*#__PURE__*/React.createElement(IconChevronRight, null);
      const pos = ind === 0 ? 'start' : 'end';
      return this.renderCollapse(item, icon, pos);
    });

    this.renderCollapsedTab = () => {
      const {
        list
      } = this.props;

      const renderedList = _mapInstanceProperty(list).call(list, item => {
        const {
          itemKey
        } = item;
        return _Object$assign({
          key: this._getItemKey(itemKey),
          active: this._isActive(itemKey)
        }, item);
      });

      return /*#__PURE__*/React.createElement(OverflowList, {
        items: renderedList,
        overflowRenderer: this.renderOverflow,
        renderMode: "scroll",
        className: "".concat(cssClasses.TABS_BAR, "-overflow-list"),
        visibleItemRenderer: this.renderTabItem
      });
    };

    this._isActive = key => key === this.props.activeKey;

    this._getItemKey = key => "".concat(key, "-bar");

    this.state = {
      endInd: props.list.length,
      rePosKey: 0,
      startInd: 0
    };
    this.uuid = getUuidv4();
  }

  renderIcon(icon) {
    return /*#__PURE__*/React.createElement("span", null, icon);
  }

  renderExtra() {
    var _context7, _context8, _context9;

    const {
      tabBarExtraContent,
      type,
      size
    } = this.props;
    const tabBarExtraContentDefaultStyle = {
      float: 'right'
    };
    const tabBarExtraContentStyle = tabBarExtraContent && tabBarExtraContent.props ? tabBarExtraContent.props.style : {};
    const extraCls = cls(cssClasses.TABS_BAR_EXTRA, {
      [_concatInstanceProperty(_context7 = "".concat(cssClasses.TABS_BAR, "-")).call(_context7, type, "-extra")]: type,
      [_concatInstanceProperty(_context8 = _concatInstanceProperty(_context9 = "".concat(cssClasses.TABS_BAR, "-")).call(_context9, type, "-extra-")).call(_context8, size)]: size
    });

    if (tabBarExtraContent) {
      const tabBarStyle = _Object$assign(_Object$assign({}, tabBarExtraContentDefaultStyle), tabBarExtraContentStyle);

      return /*#__PURE__*/React.createElement("div", {
        className: extraCls,
        style: tabBarStyle,
        "x-semi-prop": "tabBarExtraContent"
      }, tabBarExtraContent);
    }

    return null;
  }

  render() {
    var _context10;

    const _a = this.props,
          {
      type,
      style,
      className,
      list,
      tabPosition,
      collapsible
    } = _a,
          restProps = __rest(_a, ["type", "style", "className", "list", "tabPosition", "collapsible"]);

    const classNames = cls(className, {
      [cssClasses.TABS_BAR]: true,
      [cssClasses.TABS_BAR_LINE]: type === 'line',
      [cssClasses.TABS_BAR_CARD]: type === 'card',
      [cssClasses.TABS_BAR_BUTTON]: type === 'button',
      [_concatInstanceProperty(_context10 = "".concat(cssClasses.TABS_BAR, "-")).call(_context10, tabPosition)]: tabPosition,
      ["".concat(cssClasses.TABS_BAR, "-collapse")]: collapsible
    });
    const extra = this.renderExtra();
    const contents = collapsible ? this.renderCollapsedTab() : this.renderTabComponents(list);
    return /*#__PURE__*/React.createElement("div", _Object$assign({
      role: "tablist",
      "aria-orientation": tabPosition === "left" ? "vertical" : "horizontal",
      className: classNames,
      style: style
    }, getDataAttr(restProps), {
      "data-uuid": this.uuid
    }), contents, extra);
  }

}

TabBar.propTypes = {
  activeKey: PropTypes.string,
  className: PropTypes.string,
  collapsible: PropTypes.bool,
  list: PropTypes.array,
  onTabClick: PropTypes.func,
  size: PropTypes.oneOf(strings.SIZE),
  style: PropTypes.object,
  tabBarExtraContent: PropTypes.node,
  tabPosition: PropTypes.oneOf(strings.POSITION_MAP),
  type: PropTypes.oneOf(strings.TYPE_MAP),
  closable: PropTypes.bool,
  deleteTabItem: PropTypes.func
};
export default TabBar;