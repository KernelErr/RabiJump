import _pick from "lodash/pick";
import _isEqual from "lodash/isEqual";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _findIndexInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/find-index";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React, { createRef, isValidElement } from 'react';
import cls from 'classnames';
import PropTypes from 'prop-types';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/tabs/constants';
import isNullOrUndefined from '@douyinfe/semi-foundation/lib/es/utils/isNullOrUndefined';
import getDataAttr from '@douyinfe/semi-foundation/lib/es/utils/getDataAttr';
import TabsFoundation from '@douyinfe/semi-foundation/lib/es/tabs/foundation';
import BaseComponent from '../_base/baseComponent';
import '@douyinfe/semi-foundation/lib/es/tabs/tabs.css';
import TabBar from './TabBar';
import TabPane from './TabPane';
import TabsContext from './tabs-context';
const panePickKeys = ['className', 'style', 'disabled', 'itemKey', 'tab', 'icon'];
export * from './interface';

class Tabs extends BaseComponent {
  constructor(props) {
    super(props);

    this.setContentRef = ref => {
      this.contentRef = {
        current: ref
      };
    };

    this.onTabClick = (activeKey, event) => {
      this.foundation.handleTabClick(activeKey, event);
    };
    /* istanbul ignore next */


    this.rePosChildren = (children, activeKey) => {
      const newChildren = [];
      const falttenChildren = React.Children.toArray(children);

      if (children.length) {
        newChildren.push(..._filterInstanceProperty(falttenChildren).call(falttenChildren, child => child.props && child.props.itemKey === activeKey));
        newChildren.push(..._filterInstanceProperty(falttenChildren).call(falttenChildren, child => child.props && child.props.itemKey !== activeKey));
      }

      return newChildren;
    };

    this.getActiveItem = () => {
      var _context;

      const {
        activeKey
      } = this.state;
      const {
        children,
        tabList
      } = this.props;

      if (tabList || !_Array$isArray(children)) {
        return children;
      }

      return _filterInstanceProperty(_context = React.Children.toArray(children)).call(_context, pane => {
        if ( /*#__PURE__*/isValidElement(pane) && pane.type && pane.type.isTabPane) {
          return pane.props.itemKey === activeKey;
        }

        return true;
      });
    };

    this.deleteTabItem = (tabKey, event) => {
      event.stopPropagation();
      this.foundation.handleTabDelete(tabKey);
    };

    this.foundation = new TabsFoundation(this.adapter);
    this.state = {
      activeKey: this.foundation.getDefaultActiveKey(),
      panes: []
    };
    this.contentRef = /*#__PURE__*/createRef();
    this.contentHeight = 'auto';
  }

  get adapter() {
    return _Object$assign(_Object$assign({}, super.adapter), {
      collectPane: () => {
        var _context2;

        const {
          tabList,
          children
        } = this.props;

        if (_Array$isArray(tabList) && tabList.length) {
          this.setState({
            panes: tabList
          });
          return;
        }

        const panes = _mapInstanceProperty(_context2 = React.Children).call(_context2, children, child => {
          if (child) {
            const {
              tab,
              icon,
              disabled,
              itemKey,
              closable
            } = child.props;
            return {
              tab,
              icon,
              disabled,
              itemKey,
              closable
            };
          }

          return undefined;
        });

        this.setState({
          panes
        });
      },
      collectActiveKey: () => {
        let panes = [];
        const {
          tabList,
          children,
          activeKey: propsActiveKey
        } = this.props;

        if (typeof propsActiveKey !== 'undefined') {
          return;
        }

        const {
          activeKey
        } = this.state;

        if (_Array$isArray(tabList) && tabList.length) {
          panes = tabList;
        } else {
          var _context3;

          panes = _mapInstanceProperty(_context3 = React.Children).call(_context3, children, child => {
            if (child) {
              const {
                tab,
                icon,
                disabled,
                itemKey,
                closable
              } = child.props;
              return {
                tab,
                icon,
                disabled,
                itemKey,
                closable
              };
            }

            return undefined;
          });
        }

        if (_findIndexInstanceProperty(panes).call(panes, p => p.itemKey === activeKey) === -1) {
          if (panes.length > 0) {
            this.setState({
              activeKey: panes[0].itemKey
            });
          } else {
            this.setState({
              activeKey: ''
            });
          }
        }
      },
      notifyTabClick: (activeKey, event) => {
        this.props.onTabClick(activeKey, event);
      },
      notifyChange: activeKey => {
        this.props.onChange(activeKey);
      },
      setNewActiveKey: activeKey => {
        this.setState({
          activeKey
        });
      },
      getDefaultActiveKeyFromChildren: () => {
        var _context4;

        const {
          tabList,
          children
        } = this.props;
        let activeKey = '';
        const list = tabList ? tabList : _mapInstanceProperty(_context4 = React.Children.toArray(children)).call(_context4, child => /*#__PURE__*/isValidElement(child) ? child.props : null);

        _forEachInstanceProperty(list).call(list, item => {
          if (item && !activeKey && !item.disabled) {
            activeKey = item.itemKey;
          }
        });

        return activeKey;
      },
      notifyTabDelete: tabKey => {
        this.props.onTabClose && this.props.onTabClose(tabKey);
      }
    });
  }

  static getDerivedStateFromProps(props, state) {
    const states = {};

    if (!isNullOrUndefined(props.activeKey) && props.activeKey !== state.activeKey) {
      states.activeKey = props.activeKey;
    }

    return states;
  }

  componentDidUpdate(prevProps) {
    var _context5, _context6;

    // Panes state acts on tab bar, no need to compare TabPane children
    const prevChildrenProps = _mapInstanceProperty(_context5 = React.Children.toArray(prevProps.children)).call(_context5, child => _pick( /*#__PURE__*/isValidElement(child) ? child.props : null, panePickKeys));

    const nowChildrenProps = _mapInstanceProperty(_context6 = React.Children.toArray(this.props.children)).call(_context6, child => _pick( /*#__PURE__*/isValidElement(child) ? child.props : null, panePickKeys));

    const isTabListType = this.props.tabList || prevProps.tabList;

    if (!_isEqual(this.props.tabList, prevProps.tabList)) {
      this.foundation.handleTabListChange();
    } // children变化，tabList方式使用时，啥也不用做
    // children变化，非tabList方式使用，需要重新取activeKey。TabPane可能是异步更新的，若不重新取，未设activeKey时，第一个不会自动激活
    // children changed: do nothing in tabList case
    // children changed: recalc activeKey. TabPane could be updated async. If not recalc the first panel will not be activated


    if (!_isEqual(prevChildrenProps, nowChildrenProps) && !isTabListType) {
      this.foundation.handleTabPanesChange();
    }
  }

  render() {
    var _context7, _context8;

    const _a = this.props,
          {
      children,
      className,
      collapsible,
      contentStyle,
      keepDOM,
      lazyRender,
      renderTabBar,
      size,
      style,
      tabBarClassName,
      tabBarExtraContent,
      tabBarStyle,
      tabPaneMotion,
      tabPosition,
      type
    } = _a,
          restProps = __rest(_a, ["children", "className", "collapsible", "contentStyle", "keepDOM", "lazyRender", "renderTabBar", "size", "style", "tabBarClassName", "tabBarExtraContent", "tabBarStyle", "tabPaneMotion", "tabPosition", "type"]);

    const {
      panes,
      activeKey
    } = this.state;
    const tabWrapperCls = cls(className, {
      [cssClasses.TABS]: true,
      [_concatInstanceProperty(_context7 = "".concat(cssClasses.TABS, "-")).call(_context7, tabPosition)]: tabPosition
    });
    const tabContentCls = cls({
      [cssClasses.TABS_CONTENT]: true,
      [_concatInstanceProperty(_context8 = "".concat(cssClasses.TABS_CONTENT, "-")).call(_context8, tabPosition)]: tabPosition
    });
    const tabBarProps = {
      activeKey,
      className: tabBarClassName,
      collapsible,
      list: panes,
      onTabClick: this.onTabClick,
      size,
      style: tabBarStyle,
      tabBarExtraContent,
      tabPosition,
      type,
      deleteTabItem: this.deleteTabItem,
      handleKeyDown: this.foundation.handleKeyDown
    };
    const tabBar = renderTabBar ? renderTabBar(tabBarProps, TabBar) : /*#__PURE__*/React.createElement(TabBar, _Object$assign({}, tabBarProps));
    const content = keepDOM ? children : this.getActiveItem();
    return /*#__PURE__*/React.createElement("div", _Object$assign({
      className: tabWrapperCls,
      style: style
    }, getDataAttr(restProps)), tabBar, /*#__PURE__*/React.createElement(TabsContext.Provider, {
      value: {
        activeKey,
        lazyRender,
        panes,
        tabPaneMotion,
        tabPosition
      }
    }, /*#__PURE__*/React.createElement("div", {
      ref: this.setContentRef,
      className: tabContentCls,
      style: _Object$assign({}, contentStyle)
    }, content)));
  }

}

Tabs.TabPane = TabPane;
Tabs.propTypes = {
  activeKey: PropTypes.string,
  className: PropTypes.string,
  collapsible: PropTypes.bool,
  contentStyle: PropTypes.oneOfType([PropTypes.object]),
  defaultActiveKey: PropTypes.string,
  keepDOM: PropTypes.bool,
  lazyRender: PropTypes.bool,
  onChange: PropTypes.func,
  onTabClick: PropTypes.func,
  renderTabBar: PropTypes.func,
  size: PropTypes.oneOf(strings.SIZE),
  style: PropTypes.object,
  tabBarClassName: PropTypes.string,
  tabBarExtraContent: PropTypes.node,
  tabBarStyle: PropTypes.object,
  tabList: PropTypes.array,
  tabPaneMotion: PropTypes.oneOfType([PropTypes.bool, PropTypes.object, PropTypes.func]),
  tabPosition: PropTypes.oneOf(strings.POSITION_MAP),
  type: PropTypes.oneOf(strings.TYPE_MAP),
  onTabClose: PropTypes.func,
  preventScroll: PropTypes.bool
};
Tabs.defaultProps = {
  children: [],
  collapsible: false,
  keepDOM: true,
  lazyRender: false,
  onChange: () => undefined,
  onTabClick: () => undefined,
  size: 'large',
  tabPaneMotion: true,
  tabPosition: 'top',
  type: 'line',
  onTabClose: () => undefined
};
export default Tabs;