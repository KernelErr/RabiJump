import React from 'react';
import PropTypes from 'prop-types';
import { ContextValue } from '../configProvider/context';
import DatePickerFoundation, { DatePickerAdapter, DatePickerFoundationProps, DatePickerFoundationState, DayStatusType, PresetType, Type, RangeType } from '@douyinfe/semi-foundation/lib/es/datePicker/foundation';
import BaseComponent from '../_base/baseComponent';
import { DateInputProps } from './dateInput';
import MonthsGrid, { MonthsGridProps } from './monthsGrid';
import { YearAndMonthProps } from './yearAndMonth';
import '@douyinfe/semi-foundation/lib/es/datePicker/datePicker.css';
import { Locale } from '../locale/interface';
import { TimePickerProps } from '../timePicker/TimePicker';
import { InsetInputChangeProps } from '@douyinfe/semi-foundation/lib/es/datePicker/inputFoundation';
export interface DatePickerProps extends DatePickerFoundationProps {
    'aria-describedby'?: React.AriaAttributes['aria-describedby'];
    'aria-errormessage'?: React.AriaAttributes['aria-errormessage'];
    'aria-invalid'?: React.AriaAttributes['aria-invalid'];
    'aria-labelledby'?: React.AriaAttributes['aria-labelledby'];
    'aria-required'?: React.AriaAttributes['aria-required'];
    timePickerOpts?: TimePickerProps;
    bottomSlot?: React.ReactNode;
    insetLabel?: React.ReactNode;
    insetLabelId?: string;
    prefix?: React.ReactNode;
    topSlot?: React.ReactNode;
    renderDate?: (dayNumber?: number, fullDate?: string) => React.ReactNode;
    renderFullDate?: (dayNumber?: number, fullDate?: string, dayStatus?: DayStatusType) => React.ReactNode;
    triggerRender?: (props: DatePickerProps) => React.ReactNode;
    onBlur?: React.MouseEventHandler<HTMLInputElement>;
    onClear?: React.MouseEventHandler<HTMLDivElement>;
    onFocus?: (e: React.MouseEvent, rangeType: RangeType) => void;
    onPresetClick?: (item: PresetType, e: React.MouseEvent<HTMLDivElement>) => void;
    locale?: Locale['DatePicker'];
    dateFnsLocale?: Locale['dateFnsLocale'];
}
export declare type DatePickerState = DatePickerFoundationState;
export default class DatePicker extends BaseComponent<DatePickerProps, DatePickerState> {
    static contextType: React.Context<ContextValue>;
    static propTypes: {
        'aria-describedby': PropTypes.Requireable<string>;
        'aria-errormessage': PropTypes.Requireable<string>;
        'aria-invalid': PropTypes.Requireable<boolean>;
        'aria-labelledby': PropTypes.Requireable<string>;
        'aria-required': PropTypes.Requireable<boolean>;
        type: PropTypes.Requireable<"dateTime" | "date" | "month" | "dateRange" | "year" | "dateTimeRange">;
        size: PropTypes.Requireable<"default" | "small" | "large">;
        density: PropTypes.Requireable<"default" | "compact">;
        defaultValue: PropTypes.Requireable<string | number | object>;
        value: PropTypes.Requireable<string | number | object>;
        defaultPickerValue: PropTypes.Requireable<string | number | object>;
        disabledTime: PropTypes.Requireable<(...args: any[]) => any>;
        disabledTimePicker: PropTypes.Requireable<boolean>;
        hideDisabledOptions: PropTypes.Requireable<boolean>;
        format: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        multiple: PropTypes.Requireable<boolean>;
        max: PropTypes.Requireable<number>;
        placeholder: PropTypes.Requireable<string | any[]>;
        presets: PropTypes.Requireable<any[]>;
        presetPosition: PropTypes.Requireable<"top" | "left" | "right" | "bottom">;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onChangeWithDateFirst: PropTypes.Requireable<boolean>;
        weekStartsOn: PropTypes.Requireable<number>;
        disabledDate: PropTypes.Requireable<(...args: any[]) => any>;
        timePickerOpts: PropTypes.Requireable<object>;
        showClear: PropTypes.Requireable<boolean>;
        onOpenChange: PropTypes.Requireable<(...args: any[]) => any>;
        open: PropTypes.Requireable<boolean>;
        defaultOpen: PropTypes.Requireable<boolean>;
        motion: PropTypes.Requireable<boolean | object>;
        className: PropTypes.Requireable<string>;
        prefixCls: PropTypes.Requireable<string>;
        prefix: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        insetLabel: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        insetLabelId: PropTypes.Requireable<string>;
        zIndex: PropTypes.Requireable<number>;
        position: PropTypes.Requireable<"top" | "topLeft" | "topRight" | "left" | "leftTop" | "leftBottom" | "right" | "rightTop" | "rightBottom" | "bottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver">;
        getPopupContainer: PropTypes.Requireable<(...args: any[]) => any>;
        onCancel: PropTypes.Requireable<(...args: any[]) => any>;
        onConfirm: PropTypes.Requireable<(...args: any[]) => any>;
        needConfirm: PropTypes.Requireable<boolean>;
        inputStyle: PropTypes.Requireable<object>;
        timeZone: PropTypes.Requireable<string | number>;
        triggerRender: PropTypes.Requireable<(...args: any[]) => any>;
        stopPropagation: PropTypes.Requireable<string | boolean>;
        autoAdjustOverflow: PropTypes.Requireable<boolean>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        onClear: PropTypes.Requireable<(...args: any[]) => any>;
        style: PropTypes.Requireable<object>;
        autoFocus: PropTypes.Requireable<boolean>;
        inputReadOnly: PropTypes.Requireable<boolean>;
        validateStatus: PropTypes.Requireable<"default" | "error" | "warning" | "success">;
        renderDate: PropTypes.Requireable<(...args: any[]) => any>;
        renderFullDate: PropTypes.Requireable<(...args: any[]) => any>;
        spacing: PropTypes.Requireable<number>;
        startDateOffset: PropTypes.Requireable<(...args: any[]) => any>;
        endDateOffset: PropTypes.Requireable<(...args: any[]) => any>;
        autoSwitchDate: PropTypes.Requireable<boolean>;
        dropdownClassName: PropTypes.Requireable<string>;
        dropdownStyle: PropTypes.Requireable<object>;
        topSlot: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        bottomSlot: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        dateFnsLocale: PropTypes.Requireable<object>;
        syncSwitchMonth: PropTypes.Requireable<boolean>;
        onPanelChange: PropTypes.Requireable<(...args: any[]) => any>;
        rangeSeparator: PropTypes.Requireable<string>;
        preventScroll: PropTypes.Requireable<boolean>;
    };
    static defaultProps: {
        onChangeWithDateFirst: boolean;
        autoAdjustOverflow: boolean;
        stopPropagation: boolean;
        motion: boolean;
        prefixCls: "semi-datepicker";
        presetPosition: string;
        zIndex: number;
        type: string;
        size: string;
        density: string;
        multiple: boolean;
        defaultOpen: boolean;
        disabledHours: (...args: any[]) => void;
        disabledMinutes: (...args: any[]) => void;
        disabledSeconds: (...args: any[]) => void;
        hideDisabledOptions: boolean;
        onBlur: (...args: any[]) => void;
        onFocus: (...args: any[]) => void;
        onClear: (...args: any[]) => void;
        onCancel: (...args: any[]) => void;
        onConfirm: (...args: any[]) => void;
        onChange: (...args: any[]) => void;
        onOpenChange: (...args: any[]) => void;
        onPanelChange: (...args: any[]) => void;
        onPresetClick: (...args: any[]) => void;
        weekStartsOn: 0;
        disabledDate: {
            (): false;
            (): false;
        };
        disabledTime: {
            (): false;
            (): false;
        };
        inputReadOnly: boolean;
        spacing: number;
        autoSwitchDate: boolean;
        syncSwitchMonth: boolean;
        rangeSeparator: " ~ ";
        insetInput: boolean;
    };
    triggerElRef: React.MutableRefObject<HTMLElement>;
    panelRef: React.RefObject<HTMLDivElement>;
    monthGrid: React.RefObject<MonthsGrid>;
    rangeInputStartRef: React.RefObject<HTMLElement>;
    rangeInputEndRef: React.RefObject<HTMLElement>;
    focusRecordsRef: React.RefObject<{
        rangeStart: boolean;
        rangeEnd: boolean;
    }>;
    clickOutSideHandler: (e: MouseEvent) => void;
    _mounted: boolean;
    foundation: DatePickerFoundation;
    context: ContextValue;
    constructor(props: DatePickerProps);
    get adapter(): DatePickerAdapter;
    isRangeType(type: Type, triggerRender: DatePickerProps['triggerRender']): boolean;
    componentDidUpdate(prevProps: DatePickerProps): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    setTriggerRef: (node: HTMLDivElement) => HTMLDivElement;
    handleSelectedChange: MonthsGridProps['onChange'];
    handleYMSelectedChange: YearAndMonthProps['onSelect'];
    disabledDisposeDate: MonthsGridProps['disabledDate'];
    disabledDisposeTime: MonthsGridProps['disabledTime'];
    renderMonthGrid(locale: Locale['DatePicker'], localeCode: string, dateFnsLocale: Locale['dateFnsLocale']): JSX.Element;
    renderQuickControls(): JSX.Element;
    renderDateInput(): JSX.Element;
    handleOpenPanel: () => void;
    handleInputChange: DatePickerFoundation['handleInputChange'];
    handleInsetInputChange: (options: InsetInputChangeProps) => void;
    handleInputComplete: DatePickerFoundation['handleInputComplete'];
    handleInputBlur: DateInputProps['onBlur'];
    handleInputFocus: DatePickerFoundation['handleInputFocus'];
    handleInputClear: DatePickerFoundation['handleInputClear'];
    handleTriggerWrapperClick: DatePickerFoundation['handleTriggerWrapperClick'];
    handleSetRangeFocus: DatePickerFoundation['handleSetRangeFocus'];
    handleRangeInputBlur: (value: any, e: any) => void;
    handleRangeInputClear: DatePickerFoundation['handleRangeInputClear'];
    handleRangeEndTabPress: DatePickerFoundation['handleRangeEndTabPress'];
    isAnotherPanelHasOpened: (currentRangeInput: RangeType) => boolean;
    handleInsetDateFocus: (e: React.FocusEvent, rangeType: 'rangeStart' | 'rangeEnd') => void;
    handleInsetTimeFocus: () => void;
    handlePanelVisibleChange: (visible: boolean) => void;
    renderInner(extraProps?: Partial<DatePickerProps>): JSX.Element;
    handleConfirm: (e: React.MouseEvent) => void;
    handleCancel: (e: React.MouseEvent) => void;
    renderFooter: (locale: Locale['DatePicker'], localeCode: string) => JSX.Element;
    renderPanel: (locale: Locale['DatePicker'], localeCode: string, dateFnsLocale: Locale['dateFnsLocale']) => JSX.Element;
    renderYearMonthPanel: (locale: Locale['DatePicker'], localeCode: string) => JSX.Element;
    wrapPopover: (children: React.ReactNode) => JSX.Element;
    render(): JSX.Element;
}
