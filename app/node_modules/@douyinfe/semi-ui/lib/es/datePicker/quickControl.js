import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";

/* eslint-disable jsx-a11y/no-static-element-interactions,jsx-a11y/click-events-have-key-events */
import React, { PureComponent } from 'react';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/datePicker/constants';
import Button from '../button/index';
import Typography from '../typography/index';
import { noop } from '@douyinfe/semi-foundation/lib/es/utils/function';
const prefixCls = cssClasses.PREFIX;
const {
  Text
} = Typography;

class QuickControl extends PureComponent {
  render() {
    var _context, _context2, _context3, _context4, _context5, _context6, _context7, _context8, _context9, _context10, _context11, _context12;

    const {
      presets,
      onPresetClick,
      type,
      presetPosition,
      insetInput
    } = this.props;
    const isTypeRange = type === 'dateRange' || type === 'dateTimeRange';
    const isPanelTopAndBottom = presetPosition === 'top' || presetPosition === 'bottom';
    const isMonth = type === 'month';
    const isTopAndBottomRange = isPanelTopAndBottom && isTypeRange;
    const isTopAndBottomMonth = isPanelTopAndBottom && isMonth;
    const wrapperCls = classNames("".concat(prefixCls, "-quick-control"), {
      [_concatInstanceProperty(_context = "".concat(prefixCls, "-quick-control-")).call(_context, type)]: type,
      [_concatInstanceProperty(_context2 = "".concat(prefixCls, "-quick-control-")).call(_context2, presetPosition)]: true
    });
    const headerCls = classNames({
      ["".concat(prefixCls, "-quick-control-header")]: true
    });
    const contentWrapperCls = classNames({
      [_concatInstanceProperty(_context3 = "".concat(prefixCls, "-quick-control-")).call(_context3, presetPosition, "-content-wrapper")]: true
    });
    const contentCls = classNames({
      [_concatInstanceProperty(_context4 = "".concat(prefixCls, "-quick-control-")).call(_context4, presetPosition, "-content")]: !isTopAndBottomRange && !isTopAndBottomMonth,
      [_concatInstanceProperty(_context5 = "".concat(prefixCls, "-quick-control-")).call(_context5, presetPosition, "-range-content")]: isTopAndBottomRange,
      [_concatInstanceProperty(_context6 = "".concat(prefixCls, "-quick-control-")).call(_context6, presetPosition, "-month-content")]: isTopAndBottomMonth
    });
    const itemCls = classNames({
      [_concatInstanceProperty(_context7 = "".concat(prefixCls, "-quick-control-")).call(_context7, presetPosition, "-content-item")]: !isTopAndBottomRange && !isTopAndBottomMonth,
      [_concatInstanceProperty(_context8 = "".concat(prefixCls, "-quick-control-")).call(_context8, presetPosition, "-range-content-item")]: isTopAndBottomRange,
      [_concatInstanceProperty(_context9 = "".concat(prefixCls, "-quick-control-")).call(_context9, presetPosition, "-month-content-item")]: isTopAndBottomMonth
    });
    const ellipsisCls = classNames({
      [_concatInstanceProperty(_context10 = "".concat(prefixCls, "-quick-control-")).call(_context10, presetPosition, "-content-item-ellipsis")]: !isTopAndBottomRange && !isTopAndBottomMonth,
      [_concatInstanceProperty(_context11 = "".concat(prefixCls, "-quick-control-")).call(_context11, presetPosition, "-range-content-item-ellipsis")]: isTopAndBottomRange,
      [_concatInstanceProperty(_context12 = "".concat(prefixCls, "-quick-control-")).call(_context12, presetPosition, "-month-content-item-ellipsis")]: isTopAndBottomMonth
    });

    if (!presets.length) {
      return null;
    }

    return /*#__PURE__*/React.createElement("div", {
      className: wrapperCls,
      "x-insetinput": insetInput ? "true" : "false"
    }, !isPanelTopAndBottom && /*#__PURE__*/React.createElement("div", {
      className: headerCls
    }, "\u5FEB\u6377\u9009\u62E9"), /*#__PURE__*/React.createElement("div", {
      className: contentWrapperCls
    }, /*#__PURE__*/React.createElement("div", {
      className: contentCls
    }, _mapInstanceProperty(presets).call(presets, (item, index) => {
      const _item = typeof item === 'function' ? item() : item;

      return /*#__PURE__*/React.createElement(Button, {
        size: "small",
        type: "primary",
        onClick: e => onPresetClick(_item, e),
        key: index
      }, /*#__PURE__*/React.createElement("div", {
        className: itemCls
      }, /*#__PURE__*/React.createElement(Text, {
        ellipsis: {
          showTooltip: true
        },
        className: ellipsisCls
      }, _item.text)));
    }))));
  }

}

QuickControl.propTypes = {
  presets: PropTypes.array,
  presetPosition: PropTypes.oneOf(strings.PRESET_POSITION_SET),
  onPresetClick: PropTypes.func,
  type: PropTypes.string,
  insetInput: PropTypes.bool
};
QuickControl.defaultProps = {
  presets: [],
  presetPosition: 'bottom',
  onPresetClick: noop
};
export default QuickControl;