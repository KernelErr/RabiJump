import _isEqual from "lodash/isEqual";
import _bindInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/bind";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";

/* eslint-disable max-len */
import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { checkboxGroupClasses as css, strings } from '@douyinfe/semi-foundation/lib/es/checkbox/constants';
import CheckboxGroupFoundation from '@douyinfe/semi-foundation/lib/es/checkbox/checkboxGroupFoundation';
import BaseComponent from '../_base/baseComponent';
import { Context } from './context';
import Checkbox from './checkbox';

class CheckboxGroup extends BaseComponent {
  constructor(props) {
    var _context;

    super(props);
    this.state = {
      value: props.value || props.defaultValue
    };
    this.foundation = new CheckboxGroupFoundation(this.adapter);
    this.onChange = _bindInstanceProperty(_context = this.onChange).call(_context, this);
  }

  get adapter() {
    return _Object$assign(_Object$assign({}, super.adapter), {
      updateGroupValue: value => {
        this.setState({
          value
        });
      },
      notifyChange: evt => {
        this.props.onChange && this.props.onChange(evt);
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentDidUpdate(prevProps) {
    if (!_isEqual(prevProps.value, this.props.value)) {
      this.foundation.handlePropValueChange(this.props.value);
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  onChange(evt) {
    this.foundation.handleChange(evt);
  }

  render() {
    var _context2, _context3, _context4;

    const {
      children,
      options,
      prefixCls,
      direction,
      className,
      id,
      style,
      type,
      disabled
    } = this.props;
    const isPureCardType = type === strings.TYPE_PURECARD;
    const isCardType = type === strings.TYPE_CARD || isPureCardType;
    const prefix = prefixCls || css.PREFIX;
    const prefixClsDisplay = classnames({
      [prefix]: true,
      ["".concat(prefix, "-wrapper")]: true,
      [_concatInstanceProperty(_context2 = "".concat(prefix, "-")).call(_context2, direction)]: direction,
      [_concatInstanceProperty(_context3 = "".concat(prefix, "-")).call(_context3, direction, "-cardType")]: direction && isCardType
    }, className);

    const realValue = _sliceInstanceProperty(_context4 = this.state.value).call(_context4);

    let inner;

    if (options) {
      var _context5;

      inner = _mapInstanceProperty(_context5 = options || []).call(_context5, (option, index) => {
        if (typeof option === 'string') {
          return /*#__PURE__*/React.createElement(Checkbox, {
            role: "listitem",
            key: index,
            disabled: this.props.disabled,
            value: option,
            prefixCls: prefixCls
          }, option);
        } else {
          return /*#__PURE__*/React.createElement(Checkbox, {
            role: "listitem",
            key: index,
            disabled: option.disabled || this.props.disabled,
            value: option.value,
            prefixCls: prefixCls,
            extra: option.extra,
            className: option.className,
            style: option.style,
            onChange: option.onChange
          }, option.label);
        }
      });
    } else if (children) {
      var _context6;

      inner = _mapInstanceProperty(_context6 = React.Children.toArray(children)).call(_context6, (itm, index) => /*#__PURE__*/React.cloneElement(itm, {
        key: index,
        role: 'listitem'
      }));
    }

    return /*#__PURE__*/React.createElement("div", {
      id: id,
      role: "list",
      "aria-label": this.props['aria-label'],
      className: prefixClsDisplay,
      style: style,
      "aria-labelledby": this.props['aria-labelledby'],
      "aria-describedby": this.props['aria-describedby']
    }, /*#__PURE__*/React.createElement(Context.Provider, {
      value: {
        checkboxGroup: {
          onChange: this.onChange,
          value: realValue,
          disabled: this.props.disabled,
          name: this.foundation.getFormatName(),
          isCardType,
          isPureCardType
        }
      }
    }, inner));
  }

}

CheckboxGroup.propTypes = {
  'aria-describedby': PropTypes.string,
  'aria-errormessage': PropTypes.string,
  'aria-invalid': PropTypes.bool,
  'aria-labelledby': PropTypes.string,
  'aria-required': PropTypes.bool,
  defaultValue: PropTypes.array,
  disabled: PropTypes.bool,
  name: PropTypes.string,
  options: PropTypes.array,
  value: PropTypes.array,
  onChange: PropTypes.func,
  children: PropTypes.node,
  prefixCls: PropTypes.string,
  direction: PropTypes.oneOf(strings.DIRECTION_SET),
  className: PropTypes.string,
  type: PropTypes.oneOf([strings.TYPE_DEFAULT, strings.TYPE_CARD, strings.TYPE_PURECARD]),
  style: PropTypes.object
};
CheckboxGroup.defaultProps = {
  disabled: false,
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  onChange: () => {},
  type: strings.TYPE_DEFAULT,
  defaultValue: [],
  direction: strings.DEFAULT_DIRECTION
};
export default CheckboxGroup;