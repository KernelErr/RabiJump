import React from 'react';
import PropTypes from 'prop-types';
import { BaseFormAdapter } from '@douyinfe/semi-foundation/lib/es/form/foundation';
import BaseComponent from '../_base/baseComponent';
import Section from './section';
import Label from './label';
import ErrorMessage from './errorMessage';
import FormInputGroup from './group';
import '@douyinfe/semi-foundation/lib/es/form/form.css';
import { BaseFormProps, FormApi } from './interface';
interface BaseFormState {
    formId: string;
}
declare class Form extends BaseComponent<BaseFormProps, BaseFormState> {
    static propTypes: {
        'aria-label': PropTypes.Requireable<string>;
        onSubmit: PropTypes.Requireable<(...args: any[]) => any>;
        onSubmitFail: PropTypes.Requireable<(...args: any[]) => any>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onReset: PropTypes.Requireable<(...args: any[]) => any>;
        onValueChange: PropTypes.Requireable<(...args: any[]) => any>;
        initValues: PropTypes.Requireable<object>;
        getFormApi: PropTypes.Requireable<(...args: any[]) => any>;
        component: PropTypes.Requireable<PropTypes.ReactNodeLike | ((...args: any[]) => any)>;
        render: PropTypes.Requireable<(...args: any[]) => any>;
        validateFields: PropTypes.Requireable<(...args: any[]) => any>;
        style: PropTypes.Requireable<object>;
        className: PropTypes.Requireable<string>;
        layout: PropTypes.Requireable<string>;
        labelPosition: PropTypes.Requireable<string>;
        labelWidth: PropTypes.Requireable<string | number>;
        labelAlign: PropTypes.Requireable<string>;
        labelCol: PropTypes.Requireable<object>;
        wrapperCol: PropTypes.Requireable<object>;
        allowEmpty: PropTypes.Requireable<boolean>;
        autoScrollToError: PropTypes.Requireable<boolean | object>;
        disabled: PropTypes.Requireable<boolean>;
        showValidateIcon: PropTypes.Requireable<boolean>;
        extraTextPosition: PropTypes.Requireable<string>;
        id: PropTypes.Requireable<string>;
    };
    static defaultProps: {
        onChange: (...args: any[]) => void;
        onSubmitFail: (...args: any[]) => void;
        onSubmit: (...args: any[]) => void;
        onReset: (...args: any[]) => void;
        onValueChange: (...args: any[]) => void;
        layout: string;
        labelPosition: string;
        allowEmpty: boolean;
        autoScrollToError: boolean;
        showValidateIcon: boolean;
    };
    static Input: React.ComponentType<import("utility-types").Subtract<Omit<import("../input").InputProps, "forwardRef"> & React.RefAttributes<HTMLInputElement>, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & React.RefAttributes<any>>;
    static TextArea: React.ComponentType<import("utility-types").Subtract<Omit<import("../input").TextAreaProps, "forwardRef"> & React.RefAttributes<HTMLTextAreaElement>, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & React.RefAttributes<any>>;
    static InputNumber: React.ComponentType<import("utility-types").Subtract<import("../inputNumber").InputNumberProps & React.RefAttributes<HTMLInputElement>, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & React.RefAttributes<any>>;
    static Select: React.ComponentType<import("utility-types").Subtract<{
        'aria-describedby'?: string;
        'aria-errormessage'?: string;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
        'aria-labelledby'?: string;
        'aria-required'?: boolean | "true" | "false";
        id?: string;
        autoFocus?: boolean;
        autoClearSearchValue?: boolean;
        arrowIcon?: React.ReactNode;
        defaultValue?: string | number | any[] | Record<string, any>;
        value?: string | number | any[] | Record<string, any>;
        placeholder?: React.ReactNode;
        onChange?: (value: string | number | any[] | Record<string, any>) => void;
        multiple?: boolean;
        filter?: boolean | ((inpueValue: string, option: import("../select").OptionProps) => boolean);
        max?: number;
        maxTagCount?: number;
        maxHeight?: string | number;
        style?: React.CSSProperties;
        className?: string;
        size?: import("../select").SelectSize;
        disabled?: boolean;
        emptyContent?: React.ReactNode;
        onDropdownVisibleChange?: (visible: boolean) => void;
        zIndex?: number;
        position?: "top" | "topLeft" | "topRight" | "left" | "leftTop" | "leftBottom" | "right" | "rightTop" | "rightBottom" | "bottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver";
        onSearch?: (value: string) => void;
        dropdownClassName?: string;
        dropdownStyle?: React.CSSProperties;
        outerTopSlot?: React.ReactNode;
        innerTopSlot?: React.ReactNode;
        outerBottomSlot?: React.ReactNode;
        innerBottomSlot?: React.ReactNode;
        optionList?: import("../select").OptionProps[];
        dropdownMatchSelectWidth?: boolean;
        loading?: boolean;
        defaultOpen?: boolean;
        validateStatus?: "default" | "error" | "warning" | "success";
        defaultActiveFirstOption?: boolean;
        onChangeWithObject?: boolean;
        suffix?: React.ReactNode;
        prefix?: React.ReactNode;
        insetLabel?: React.ReactNode;
        insetLabelId?: string;
        inputProps?: import("utility-types").Subtract<import("../input").InputProps, {
            value?: React.ReactText;
            onFocus?: (e: React.FocusEvent<HTMLInputElement, Element>) => void;
            onChange?: (value: string, e: React.ChangeEvent<HTMLInputElement>) => void;
        }>;
        showClear?: boolean;
        showArrow?: boolean;
        renderSelectedItem?: import("../select").RenderSelectedItemFn;
        renderCreateItem?: (inputValue: string | number, focus: boolean) => React.ReactNode;
        renderOptionItem?: (props: import("../select").optionRenderProps) => React.ReactNode;
        onMouseEnter?: (e: React.MouseEvent<Element, MouseEvent>) => any;
        onMouseLeave?: (e: React.MouseEvent<Element, MouseEvent>) => any;
        clickToHide?: boolean;
        onExceed?: (option: import("../select").OptionProps) => void;
        onCreate?: (option: import("../select").OptionProps) => void;
        remote?: boolean;
        onDeselect?: (value: string | number | any[] | Record<string, any>, option: Record<string, any>) => void;
        onSelect?: (value: string | number | any[] | Record<string, any>, option: Record<string, any>) => void;
        allowCreate?: boolean;
        triggerRender?: (props?: any) => React.ReactNode;
        onClear?: () => void;
        virtualize?: import("../select").virtualListProps;
        onFocus?: (e: React.FocusEvent<Element, Element>) => void;
        onBlur?: (e: React.FocusEvent<Element, Element>) => void;
        onListScroll?: (e: React.UIEvent<HTMLDivElement, UIEvent>) => void;
        children?: React.ReactNode;
        preventScroll?: boolean;
    } & Pick<import("../tooltip").TooltipProps, "stopPropagation" | "getPopupContainer" | "spacing" | "mouseEnterDelay" | "autoAdjustOverflow" | "mouseLeaveDelay" | "motion"> & React.RefAttributes<any> & import("./interface").CommonFieldProps, import("./interface").CommonexcludeType>> & import("./interface").SelectStatic;
    static Checkbox: React.ComponentType<import("utility-types").Subtract<import("./interface").CommonFieldProps, import("./interface").RadioCheckboxExcludeProps> & import("../checkbox").CheckboxProps & import("./interface").RCIncludeType>;
    static CheckboxGroup: React.ComponentType<import("utility-types").Subtract<import("../checkbox").CheckboxGroupProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & React.RefAttributes<any>>;
    static Radio: React.ComponentType<import("utility-types").Subtract<import("./interface").CommonFieldProps, import("./interface").RadioCheckboxExcludeProps> & import("../radio").RadioProps & import("./interface").RCIncludeType>;
    static RadioGroup: React.ComponentType<import("utility-types").Subtract<import("../radio").RadioGroupProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & React.RefAttributes<any>>;
    static DatePicker: React.ComponentType<import("utility-types").Subtract<import("../datePicker").DatePickerProps & React.RefAttributes<import("../datePicker/datePicker").default>, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & React.RefAttributes<any>>;
    static TimePicker: React.ComponentType<import("utility-types").Subtract<import("../timePicker").TimePickerProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & React.RefAttributes<any>>;
    static Switch: React.ComponentType<import("utility-types").Subtract<import("../switch").SwitchProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & React.RefAttributes<any>>;
    static Slider: React.ComponentType<import("utility-types").Subtract<import("../slider").SliderProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & React.RefAttributes<any>>;
    static TreeSelect: React.ComponentType<import("utility-types").Subtract<import("../treeSelect").TreeSelectProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & React.RefAttributes<any>>;
    static Cascader: React.ComponentType<import("utility-types").Subtract<import("../cascader").CascaderProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & React.RefAttributes<any>>;
    static Rating: React.ComponentType<import("utility-types").Subtract<import("../rating").RatingProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & React.RefAttributes<any>>;
    static AutoComplete: React.ComponentType<import("utility-types").Subtract<import("../autoComplete").AutoCompleteProps<import("../autoComplete").AutoCompleteItems>, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & React.RefAttributes<any>>;
    static Upload: React.ComponentType<import("utility-types").Subtract<import("../upload").UploadProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & React.RefAttributes<any>>;
    static TagInput: React.ComponentType<import("utility-types").Subtract<import("../tagInput").TagInputProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & React.RefAttributes<any>>;
    static Slot: (props: import("./slot").SlotProps) => JSX.Element;
    static ErrorMessage: typeof ErrorMessage;
    static InputGroup: typeof FormInputGroup;
    static Label: typeof Label;
    static Section: typeof Section;
    formApi: FormApi;
    constructor(props: BaseFormProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    get adapter(): BaseFormAdapter<BaseFormProps, BaseFormState>;
    get content(): React.ReactNode;
    submit(e: React.FormEvent<HTMLFormElement>): void;
    reset(e: React.FormEvent<HTMLFormElement>): void;
    render(): JSX.Element;
}
export default Form;
