import _isString from "lodash/isString";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable react/destructuring-assignment */


import React, { Component } from 'react';
import classNames from 'classnames';
import { isValid } from '@douyinfe/semi-foundation/lib/es/form/utils';
import { cssClasses } from '@douyinfe/semi-foundation/lib/es/form/constants';
import * as ObjectUtil from '@douyinfe/semi-foundation/lib/es/utils/object';
import ErrorMessage from './errorMessage';
import Label from './label';
import { FormUpdaterContext } from './context';
import { useFormState } from './hooks/index';
import InputGroup from '../input/inputGroup';
const prefix = cssClasses.PREFIX; // Group component to remove Labels and ErrorMessages from its child fields
// Unified insertion of Labels and ErrorMessages from the group level
// Get Errors of all field in this group

const GroupError = props => {
  const {
    fieldSet
  } = props;
  const formState = useFormState();

  const error = _mapInstanceProperty(fieldSet).call(fieldSet, field => ObjectUtil.get(formState.errors, field));

  if (isValid(error)) {
    return null;
  }

  return /*#__PURE__*/React.createElement(ErrorMessage, {
    error: error,
    showValidateIcon: props.showValidateIcon,
    isInInputGroup: props.isInInputGroup
  });
};

class FormInputGroup extends Component {
  renderLabel(label, formProps) {
    if (label) {
      if (_isString(label)) {
        return /*#__PURE__*/React.createElement(Label, {
          width: formProps.labelWidth,
          text: label
        });
      } else {
        return /*#__PURE__*/React.createElement(Label, _Object$assign({
          width: formProps.labelWidth
        }, label));
      }
    }

    return null;
  }

  render() {
    var _context;

    const _a = this.props,
          {
      children,
      label
    } = _a,
          rest = __rest(_a, ["children", "label"]);

    const updater = this.context;
    const formProps = updater.getFormProps(['labelPosition', 'labelWidth', 'labelAlign', 'showValidateIcon']);
    const labelPosition = this.props.labelPosition || formProps.labelPosition;
    const groupFieldSet = [];

    const inner = _mapInstanceProperty(_context = React.Children).call(_context, children, child => {
      if (child && child.props && child.props.field) {
        groupFieldSet.push(child.props.field);
        return /*#__PURE__*/React.cloneElement(child, {
          isInInputGroup: true // noErrorMessage: true,
          // noLabel: true

        });
      }

      return null;
    });

    const groupCls = classNames({
      ["".concat(prefix, "-field-group")]: true
    });
    return /*#__PURE__*/React.createElement("div", {
      "x-label-pos": labelPosition,
      className: groupCls
    }, this.renderLabel(label, formProps), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(InputGroup, _Object$assign({}, rest), inner), /*#__PURE__*/React.createElement(GroupError, {
      fieldSet: groupFieldSet,
      showValidateIcon: formProps.showValidateIcon,
      isInInputGroup: true
    })));
  }

}

FormInputGroup.contextType = FormUpdaterContext;
export default FormInputGroup;