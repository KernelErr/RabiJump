import _noop from "lodash/noop";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";

/* eslint-disable max-len */
import React from 'react';
import cls from 'classnames';
import PropTypes from 'prop-types';
import ConfigContext from '../configProvider/context';
import ToastFoundation from '@douyinfe/semi-foundation/lib/es/toast/toastFoundation';
import { numbers, cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/toast/constants';
import BaseComponent from '../_base/baseComponent';
import Button from '../iconButton/index';
import { IconClose, IconAlertTriangle, IconInfoCircle, IconTickCircle, IconAlertCircle } from '@douyinfe/semi-icons';
import { isSemiIcon } from '../_utils';
const prefixCls = cssClasses.PREFIX;

class Toast extends BaseComponent {
  constructor(props) {
    super(props);

    this.clearCloseTimer = () => {
      this.foundation.clearCloseTimer_();
    };

    this.startCloseTimer = () => {
      this.foundation.startCloseTimer_();
    };

    this.state = {};
    this.foundation = new ToastFoundation(this.adapter);
  }

  get adapter() {
    return _Object$assign(_Object$assign({}, super.adapter), {
      notifyWrapperToRemove: id => {
        this.props.close(id);
      },
      notifyClose: () => {
        this.props.onClose();
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  close(e) {
    this.foundation.close(e);
  }

  renderIcon() {
    var _context;

    const {
      type,
      icon
    } = this.props;
    const iconMap = {
      warning: /*#__PURE__*/React.createElement(IconAlertTriangle, null),
      success: /*#__PURE__*/React.createElement(IconTickCircle, null),
      info: /*#__PURE__*/React.createElement(IconInfoCircle, null),
      error: /*#__PURE__*/React.createElement(IconAlertCircle, null)
    };
    const iconType = iconMap[type];
    const iconSize = 'large';
    const iconCls = cls("".concat(prefixCls, "-icon"), _concatInstanceProperty(_context = "".concat(prefixCls, "-icon-")).call(_context, type));

    if (icon) {
      return isSemiIcon(icon) ? /*#__PURE__*/React.cloneElement(icon, {
        size: iconSize,
        className: "".concat(prefixCls, "-icon")
      }) : icon;
    }

    if (type && iconType) {
      return /*#__PURE__*/React.cloneElement(iconType, {
        size: iconSize,
        className: iconCls
      });
    }

    return null;
  }

  render() {
    var _context2, _context3;

    const {
      content,
      type,
      theme,
      showClose,
      textMaxWidth,
      className,
      style
    } = this.props;
    const direction = this.props.direction || this.context.direction;
    const toastCls = cls(prefixCls, className, {
      [_concatInstanceProperty(_context2 = "".concat(prefixCls, "-")).call(_context2, type)]: true,
      [_concatInstanceProperty(_context3 = "".concat(prefixCls, "-")).call(_context3, theme)]: theme === 'light',
      ["".concat(prefixCls, "-rtl")]: direction === 'rtl'
    });
    const textStyle = {};
    textStyle.maxWidth = textMaxWidth;
    const btnTheme = 'borderless';
    const btnSize = 'small';
    return /*#__PURE__*/React.createElement("div", {
      role: "alert",
      "aria-label": "".concat(type ? type : 'default', " type"),
      className: toastCls,
      style: style,
      onMouseEnter: this.clearCloseTimer,
      onMouseLeave: this.startCloseTimer
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-content")
    }, this.renderIcon(), /*#__PURE__*/React.createElement("span", {
      className: "".concat(prefixCls, "-content-text"),
      style: textStyle,
      "x-semi-prop": "content"
    }, content), showClose && /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-close-button")
    }, /*#__PURE__*/React.createElement(Button, {
      onClick: e => this.close(e),
      type: "tertiary",
      icon: /*#__PURE__*/React.createElement(IconClose, {
        "x-semi-prop": "icon"
      }),
      theme: btnTheme,
      size: btnSize
    }))));
  }

}

Toast.contextType = ConfigContext;
Toast.propTypes = {
  onClose: PropTypes.func,
  content: PropTypes.node,
  close: PropTypes.func,
  duration: PropTypes.number,
  theme: PropTypes.oneOf(strings.themes),
  type: PropTypes.oneOf(strings.types),
  textMaxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  style: PropTypes.object,
  className: PropTypes.string,
  showClose: PropTypes.bool,
  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  direction: PropTypes.oneOf(strings.directions)
};
Toast.defaultProps = {
  onClose: _noop,
  content: '',
  close: _noop,
  duration: numbers.duration,
  textMaxWidth: 450,
  showClose: true,
  theme: 'normal'
};
export default Toast;