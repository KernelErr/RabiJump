import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import _Set from "@babel/runtime-corejs3/core-js-stable/set";
import _findInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/find";

/* eslint-disable no-param-reassign */
import React from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';
import ToastListFoundation from '@douyinfe/semi-foundation/lib/es/toast/toastListFoundation';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/toast/constants';
import BaseComponent from '../_base/baseComponent';
import Toast from './toast';
import '@douyinfe/semi-foundation/lib/es/toast/toast.css';
import ToastTransition from './ToastTransition';
import getUuid from '@douyinfe/semi-foundation/lib/es/utils/uuid';
import useToast from './useToast';

const createBaseToast = () => {
  var _a;

  return _a = class ToastList extends BaseComponent {
    constructor(props) {
      super(props);
      this.state = {
        list: [],
        removedItems: []
      };
      this.foundation = new ToastListFoundation(this.adapter);
    }

    get adapter() {
      return _Object$assign(_Object$assign({}, super.adapter), {
        updateToast: (list, removedItems) => {
          this.setState({
            list,
            removedItems
          });
        }
      });
    }

    static create(opts) {
      const id = getUuid('toast'); // this.id = id;

      if (!ToastList.ref) {
        var _context2;

        const div = document.createElement('div');

        if (!this.wrapperId) {
          var _context;

          this.wrapperId = _sliceInstanceProperty(_context = getUuid('toast-wrapper')).call(_context, 0, 26);
        }

        div.className = cssClasses.WRAPPER;
        div.id = this.wrapperId;
        div.style.zIndex = String(typeof opts.zIndex === 'number' ? opts.zIndex : ToastList.defaultOpts.zIndex);

        _mapInstanceProperty(_context2 = ['top', 'left', 'bottom', 'right']).call(_context2, pos => {
          if (pos in ToastList.defaultOpts || pos in opts) {
            const val = opts[pos] ? opts[pos] : ToastList.defaultOpts[pos];
            div.style[pos] = typeof val === 'number' ? "".concat(val, "px") : val;
          }
        }); // document.body.appendChild(div);


        if (ToastList.defaultOpts.getPopupContainer) {
          const container = ToastList.defaultOpts.getPopupContainer();
          container.appendChild(div);
        } else {
          document.body.appendChild(div);
        }

        ReactDOM.render( /*#__PURE__*/React.createElement(ToastList, {
          ref: instance => ToastList.ref = instance
        }), div, () => {
          ToastList.ref.add(_Object$assign(_Object$assign({}, opts), {
            id
          }));
        });
      } else {
        var _context3;

        const node = document.querySelector("#".concat(this.wrapperId));

        _mapInstanceProperty(_context3 = ['top', 'left', 'bottom', 'right']).call(_context3, pos => {
          if (pos in opts) {
            node.style[pos] = typeof opts[pos] === 'number' ? "".concat(opts[pos], "px") : opts[pos];
          }
        });

        ToastList.ref.add(_Object$assign(_Object$assign({}, opts), {
          id
        }));
      }

      return id;
    }

    static close(id) {
      if (ToastList.ref) {
        ToastList.ref.remove(id);
      }
    }

    static destroyAll() {
      if (ToastList.ref) {
        ToastList.ref.destroyAll();
        const wrapper = document.querySelector("#".concat(this.wrapperId));
        ReactDOM.unmountComponentAtNode(wrapper);
        wrapper && wrapper.parentNode.removeChild(wrapper);
        ToastList.ref = null;
        this.wrapperId = null;
      }
    }

    static getWrapperId() {
      return this.wrapperId;
    }

    static info(opts) {
      if (typeof opts === 'string') {
        opts = {
          content: opts
        };
      }

      return this.create(_Object$assign(_Object$assign(_Object$assign({}, ToastList.defaultOpts), opts), {
        type: 'info'
      }));
    }

    static warning(opts) {
      if (typeof opts === 'string') {
        opts = {
          content: opts
        };
      }

      return this.create(_Object$assign(_Object$assign(_Object$assign({}, ToastList.defaultOpts), opts), {
        type: 'warning'
      }));
    }

    static error(opts) {
      if (typeof opts === 'string') {
        opts = {
          content: opts
        };
      }

      return this.create(_Object$assign(_Object$assign(_Object$assign({}, ToastList.defaultOpts), opts), {
        type: 'error'
      }));
    }

    static success(opts) {
      if (typeof opts === 'string') {
        opts = {
          content: opts
        };
      }

      return this.create(_Object$assign(_Object$assign(_Object$assign({}, ToastList.defaultOpts), opts), {
        type: 'success'
      }));
    }

    static config(opts) {
      var _context4;

      _forEachInstanceProperty(_context4 = ['top', 'left', 'bottom', 'right']).call(_context4, pos => {
        if (pos in opts) {
          ToastList.defaultOpts[pos] = opts[pos];
        }
      });

      if (typeof opts.zIndex === 'number') {
        ToastList.defaultOpts.zIndex = opts.zIndex;
      }

      if (typeof opts.duration === 'number') {
        ToastList.defaultOpts.duration = opts.duration;
      }

      if (typeof opts.getPopupContainer === 'function') {
        ToastList.defaultOpts.getPopupContainer = opts.getPopupContainer;
      }
    }

    add(opts) {
      return this.foundation.addToast(opts);
    }

    remove(id) {
      return this.foundation.removeToast(id);
    }

    destroyAll() {
      return this.foundation.destroyAll();
    }

    render() {
      let {
        list
      } = this.state;
      const {
        removedItems
      } = this.state;
      list = _Array$from(new _Set([...list, ...removedItems]));
      return /*#__PURE__*/React.createElement(React.Fragment, null, _mapInstanceProperty(list).call(list, (item, index) => item.motion ? /*#__PURE__*/React.createElement(ToastTransition, {
        key: item.id || index,
        motion: item.motion
      }, _findInstanceProperty(removedItems).call(removedItems, removedItem => removedItem.id === item.id) ? null : transitionStyle => /*#__PURE__*/React.createElement(Toast, _Object$assign({}, item, {
        style: _Object$assign(_Object$assign({}, transitionStyle), item.style),
        close: id => this.remove(id)
      }))) : /*#__PURE__*/React.createElement(Toast, _Object$assign({}, item, {
        style: _Object$assign({}, item.style),
        close: id => this.remove(id)
      }))));
    }

  }, _a.defaultOpts = {
    motion: true,
    zIndex: 1010,
    content: ''
  }, _a.propTypes = {
    content: PropTypes.node,
    duration: PropTypes.number,
    onClose: PropTypes.func,
    icon: PropTypes.node,
    direction: PropTypes.oneOf(strings.directions)
  }, _a.defaultProps = {}, _a;
};

export class ToastFactory {
  static create(config) {
    const newToast = createBaseToast();
    newToast.useToast = useToast;
    config && newToast.config(config);
    return newToast;
  }

}
export default ToastFactory.create();