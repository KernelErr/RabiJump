import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
// @ts-ignore  currently no type definition for @douyinfe/semi-animation-react
import { Transition } from '@douyinfe/semi-animation-react';
import PropTypes from 'prop-types';
import cls from 'classnames';
import React, { useRef, useState, useCallback, useMemo } from 'react';
import { cssClasses } from '@douyinfe/semi-foundation/lib/es/collapsible/constants';
import getMotionObjFromProps from '@douyinfe/semi-foundation/lib/es/utils/getMotionObjFromProps';
const ease = 'cubicBezier(.25,.1,.25,1)';

const Collapsible = props => {
  const {
    motion,
    children,
    isOpen,
    duration,
    keepDOM,
    collapseHeight,
    style,
    className,
    reCalcKey,
    id
  } = props;
  const ref = useRef(null);
  const [maxHeight, setMaxHeight] = useState(0);
  const [open, setOpen] = useState(props.isOpen);
  const [isFirst, setIsFirst] = useState(true);
  const [transitionImmediate, setTransitionImmediate] = useState(open && isFirst);
  const [left, setLeft] = useState(!props.isOpen);

  if (isOpen !== open) {
    setOpen(isOpen);

    if (isFirst) {
      setIsFirst(false);
      setTransitionImmediate(false);
    }

    isOpen && setLeft(!isOpen);
  }

  const setHeight = useCallback(node => {
    const currHeight = node && node.scrollHeight;

    if (currHeight && maxHeight !== currHeight) {
      setMaxHeight(currHeight);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [left, reCalcKey, maxHeight]);

  const resetHeight = () => {
    ref.current.style.maxHeight = 'none';
  };

  const formatStyle = _ref => {
    let {
      maxHeight: maxHeightInTransitionStyle
    } = _ref;
    return {
      maxHeight: maxHeightInTransitionStyle
    };
  };

  const shouldKeepDOM = () => keepDOM || collapseHeight !== 0;

  const defaultMaxHeight = useMemo(() => {
    return isOpen || !shouldKeepDOM() && !motion ? 'none' : collapseHeight;
  }, [collapseHeight, motion, isOpen, shouldKeepDOM]);

  const renderChildren = transitionStyle => {
    const transition = transitionStyle && typeof transitionStyle === 'object' ? formatStyle(transitionStyle) : {};

    const wrapperstyle = _Object$assign(_Object$assign({
      overflow: 'hidden',
      maxHeight: defaultMaxHeight
    }, style), transition);

    if (isFirst) {
      wrapperstyle.maxHeight = defaultMaxHeight;
    }

    const wrapperCls = cls("".concat(cssClasses.PREFIX, "-wrapper"), className);
    return /*#__PURE__*/React.createElement("div", {
      style: wrapperstyle,
      className: wrapperCls,
      ref: ref
    }, /*#__PURE__*/React.createElement("div", {
      ref: setHeight,
      style: {
        overflow: 'hidden'
      },
      id: id,
      "x-semi-prop": "children"
    }, children));
  };

  const didLeave = () => {
    setLeft(true);
    !shouldKeepDOM() && setMaxHeight(collapseHeight);
  };

  const renderContent = () => {
    if (left && !shouldKeepDOM()) {
      return null;
    }

    const mergedMotion = getMotionObjFromProps({
      didEnter: resetHeight,
      didLeave,
      motion
    });
    return /*#__PURE__*/React.createElement(Transition, _Object$assign({
      state: isOpen ? 'enter' : 'leave',
      immediate: transitionImmediate,
      from: {
        maxHeight: 0
      },
      enter: {
        maxHeight: {
          val: maxHeight,
          easing: ease,
          duration
        }
      },
      leave: {
        maxHeight: {
          val: collapseHeight,
          easing: ease,
          duration
        }
      }
    }, mergedMotion), transitionStyle => renderChildren(motion ? transitionStyle : null));
  };

  return renderContent();
};

Collapsible.propType = {
  motion: PropTypes.oneOfType([PropTypes.bool, PropTypes.func, PropTypes.object]),
  children: PropTypes.node,
  isOpen: PropTypes.bool,
  duration: PropTypes.number,
  keepDOM: PropTypes.bool,
  collapseHeight: PropTypes.number,
  style: PropTypes.object,
  className: PropTypes.string,
  reCalcKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
};
Collapsible.defaultProps = {
  isOpen: false,
  duration: 250,
  motion: true,
  keepDOM: false,
  collapseHeight: 0
};
export default Collapsible;