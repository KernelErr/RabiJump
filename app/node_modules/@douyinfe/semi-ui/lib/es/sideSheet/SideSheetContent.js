import _noop from "lodash/noop";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React from 'react';
import PropTypes from 'prop-types';
import cls from 'classnames';
import { cssClasses } from '@douyinfe/semi-foundation/lib/es/sideSheet/constants';
import Button from '../iconButton';
import { IconClose } from '@douyinfe/semi-icons';
let uuid = 0;
const prefixCls = cssClasses.PREFIX;
export default class SideSheetContent extends React.PureComponent {
  constructor() {
    super(...arguments);

    this.onMaskClick = e => {
      if (e.target === e.currentTarget) {
        this.close(e);
      }
    };

    this.close = e => {
      const {
        onClose
      } = this.props;
      onClose && onClose(e);
    };
  }

  componentDidMount() {
    this.sideSheetId = "sidesheet-".concat(uuid++);
  }

  componentWillUnmount() {
    clearTimeout(this.timeoutId);
  }

  getMaskElement() {
    const {
      mask,
      maskStyle,
      maskClosable
    } = this.props;

    if (mask) {
      return /*#__PURE__*/React.createElement("div", {
        "aria-hidden": true,
        key: "mask",
        className: "".concat(prefixCls, "-mask"),
        style: maskStyle,
        onClick: maskClosable ? this.onMaskClick : null
      });
    }

    return null;
  }

  renderHeader() {
    const {
      title,
      closable,
      headerStyle
    } = this.props;
    let header, closer;

    if (title) {
      header = /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-title"),
        "x-semi-prop": "title"
      }, this.props.title);
    }

    if (closable) {
      closer = /*#__PURE__*/React.createElement(Button, {
        className: "".concat(prefixCls, "-close"),
        key: "close-btn",
        onClick: this.close,
        type: "tertiary",
        icon: /*#__PURE__*/React.createElement(IconClose, null),
        theme: "borderless",
        size: "small"
      });
    }

    return /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-header"),
      role: 'heading',
      "aria-level": 1,
      style: _Object$assign({}, headerStyle)
    }, header, closer);
  }

  getDialogElement() {
    var _context;

    const props = __rest(this.props, []);

    const style = {};

    if (props.width) {
      style.width = props.width; // When the mask is false, the width is set on the wrapper. At this time, sidesheet-inner does not need to set the width again, otherwise, the percentage will be accumulated repeatedly when the width is a percentage

      if (!props.mask) {
        style.width = '100%';
      }
    }

    if (props.height) {
      style.height = props.height;
    }

    const header = this.renderHeader();
    const dialogElement = /*#__PURE__*/React.createElement("div", {
      key: "dialog-element",
      role: "dialog",
      tabIndex: -1,
      className: _concatInstanceProperty(_context = "".concat(prefixCls, "-inner ")).call(_context, prefixCls, "-inner-wrap"),
      // onMouseDown={this.onDialogMouseDown}
      style: _Object$assign(_Object$assign({}, props.style), style)
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-content")
    }, header, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-body"),
      style: props.bodyStyle,
      "x-semi-prop": "children"
    }, props.children), props.footer ? /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-footer"),
      "x-semi-prop": "footer"
    }, props.footer) : null));
    return dialogElement;
  }

  render() {
    const {
      mask,
      className,
      width
    } = this.props;
    const wrapperCls = cls(className, {
      ["".concat(prefixCls, "-fixed")]: !mask
    });
    const wrapperStyle = {};

    if (!mask && width) {
      wrapperStyle.width = width;
    }

    return /*#__PURE__*/React.createElement("div", {
      className: wrapperCls,
      style: wrapperStyle
    }, this.getMaskElement(), this.getDialogElement());
  }

}
SideSheetContent.propTypes = {
  onClose: PropTypes.func
};
SideSheetContent.defaultProps = {
  onClose: _noop
};