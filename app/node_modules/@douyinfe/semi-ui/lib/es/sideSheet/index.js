import _noop from "lodash/noop";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable no-nested-ternary */


import React from 'react';
import BaseComponent from '../_base/baseComponent';
import PropTypes from 'prop-types';
import Portal from '../_portal';
import cls from 'classnames';
import ConfigContext from '../configProvider/context';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/sideSheet/constants';
import SideSheetTransition from './SideSheetTransition';
import SideSheetContent from './SideSheetContent';
import SideSheetFoundation from '@douyinfe/semi-foundation/lib/es/sideSheet/sideSheetFoundation';
import '@douyinfe/semi-foundation/lib/es/sideSheet/sideSheet.css';
const prefixCls = cssClasses.PREFIX;
const defaultWidthList = strings.WIDTH;
const defaultHeight = strings.HEIGHT;
export default class SideSheet extends BaseComponent {
  constructor(props) {
    super(props);

    this.handleCancel = e => {
      this.foundation.handleCancel(e);
    };

    this.handleKeyDown = e => {
      this.foundation.handleKeyDown(e);
    };

    this.state = {
      hidden: !this.props.visible
    };
    this.foundation = new SideSheetFoundation(this.adapter);
    this._active = false;
  }

  get adapter() {
    return _Object$assign(_Object$assign({}, super.adapter), {
      disabledBodyScroll: () => {
        const {
          getPopupContainer
        } = this.props;

        if (!getPopupContainer && document) {
          document.body.style.overflow = 'hidden';
        }
      },
      enabledBodyScroll: () => {
        const {
          getPopupContainer
        } = this.props;

        if (!getPopupContainer && document) {
          document.body.style.overflow = '';
        }
      },
      notifyCancel: e => {
        this.props.onCancel && this.props.onCancel(e);
      },
      notifyVisibleChange: visible => {
        this.props.afterVisibleChange(visible);
      },
      setOnKeyDownListener: () => {
        if (window) {
          window.addEventListener('keydown', this.handleKeyDown);
        }
      },
      removeKeyDownListener: () => {
        if (window) {
          window.removeEventListener('keydown', this.handleKeyDown);
        }
      },
      toggleHidden: hidden => {
        if (hidden !== this.state.hidden) {
          this.setState({
            hidden
          });
        }
      }
    });
  }

  static getDerivedStateFromProps(props, prevState) {
    const newState = {};

    if (props.visible && prevState.hidden) {
      newState.hidden = false;
    }

    if (!props.visible && !props.motion && !prevState.hidden) {
      newState.hidden = true;
    }

    return newState;
  }

  componentDidMount() {
    if (this.props.visible) {
      this.foundation.beforeShow();
      this._active = this._active || this.props.visible;
    }
  }

  componentDidUpdate(prevProps, prevState, snapshot) {
    // hide => show
    if (!prevProps.visible && this.props.visible) {
      this.foundation.beforeShow();
    } // show => hide


    if (prevProps.visible && !this.props.visible) {
      this.foundation.afterHide();
    }
  }

  componentWillUnmount() {
    if (this.props.visible) {
      this.foundation.destroy();
    }
  }

  renderContent() {
    var _context;

    const _a = this.props,
          {
      placement,
      className,
      children,
      width,
      height,
      motion,
      visible,
      style,
      maskStyle,
      size,
      zIndex,
      getPopupContainer,
      keepDOM
    } = _a,
          props = __rest(_a, ["placement", "className", "children", "width", "height", "motion", "visible", "style", "maskStyle", "size", "zIndex", "getPopupContainer", "keepDOM"]);

    const {
      direction
    } = this.context;
    const isVertical = placement === 'left' || placement === 'right';
    const isHorizontal = placement === 'top' || placement === 'bottom';
    const sheetWidth = isVertical ? width ? width : defaultWidthList[size] : '100%';
    const sheetHeight = isHorizontal ? height ? height : defaultHeight : '100%';
    const classList = cls(prefixCls, className, {
      [_concatInstanceProperty(_context = "".concat(prefixCls, "-")).call(_context, placement)]: placement,
      ["".concat(prefixCls, "-popup")]: getPopupContainer,
      ["".concat(prefixCls, "-horizontal")]: isHorizontal,
      ["".concat(prefixCls, "-rtl")]: direction === 'rtl',
      ["".concat(prefixCls, "-hidden")]: keepDOM && this.state.hidden
    });

    const contentProps = _Object$assign(_Object$assign({}, props), {
      visible,
      motion: false,
      className: classList,
      width: sheetWidth,
      height: sheetHeight,
      onClose: this.handleCancel
    });

    const mergedMotion = this.foundation.getMergedMotion();
    this._active = this._active || visible;
    const shouldRender = (visible || keepDOM) && this._active;

    if (mergedMotion) {
      return /*#__PURE__*/React.createElement(SideSheetTransition, {
        placement: placement,
        motion: mergedMotion,
        controlled: keepDOM,
        visible: visible
      }, shouldRender ? transitionStyles => /*#__PURE__*/React.createElement(SideSheetContent, _Object$assign({}, contentProps, {
        style: _Object$assign(_Object$assign({}, transitionStyles), style),
        maskStyle: _Object$assign({
          opacity: transitionStyles.opacity
        }, maskStyle)
      }), children) : null);
    }

    if (shouldRender) {
      return /*#__PURE__*/React.createElement(SideSheetContent, _Object$assign({}, contentProps, {
        style: style,
        maskStyle: maskStyle
      }), children);
    }

    return null;
  }

  render() {
    const {
      zIndex,
      getPopupContainer
    } = this.props;
    let wrapperStyle = {
      zIndex
    };

    if (getPopupContainer) {
      wrapperStyle = {
        zIndex,
        position: 'static'
      };
    }

    return /*#__PURE__*/React.createElement(Portal, {
      getPopupContainer: getPopupContainer,
      style: wrapperStyle
    }, this.renderContent());
  }

}
SideSheet.contextType = ConfigContext;
SideSheet.propTypes = {
  bodyStyle: PropTypes.object,
  headerStyle: PropTypes.object,
  children: PropTypes.node,
  className: PropTypes.string,
  closable: PropTypes.bool,
  disableScroll: PropTypes.bool,
  getPopupContainer: PropTypes.func,
  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  mask: PropTypes.bool,
  maskClosable: PropTypes.bool,
  maskStyle: PropTypes.object,
  motion: PropTypes.oneOfType([PropTypes.bool, PropTypes.object, PropTypes.func]),
  onCancel: PropTypes.func,
  placement: PropTypes.oneOf(strings.PLACEMENT),
  size: PropTypes.oneOf(strings.SIZE),
  style: PropTypes.object,
  title: PropTypes.node,
  visible: PropTypes.bool,
  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  zIndex: PropTypes.number,
  afterVisibleChange: PropTypes.func,
  closeOnEsc: PropTypes.bool,
  footer: PropTypes.node,
  keepDOM: PropTypes.bool,
  'aria-label': PropTypes.string
};
SideSheet.defaultProps = {
  visible: false,
  motion: true,
  mask: true,
  placement: 'right',
  closable: true,
  footer: null,
  zIndex: 1000,
  maskClosable: true,
  size: 'small',
  disableScroll: true,
  closeOnEsc: false,
  afterVisibleChange: _noop,
  keepDOM: false
};