import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import React, { isValidElement } from 'react';
const REACT_FRAGMENT_TYPE = 'Symbol(react.fragment)';
/**
 * Flatten the children and return the processed data
 */

export const flatten = children => {
  var _context;

  let res = [];

  _forEachInstanceProperty(_context = React.Children).call(_context, children, child => {
    if (child === undefined || child === null) {
      return;
    }

    if (_Array$isArray(child)) {
      res = _concatInstanceProperty(res).call(res, flatten(child));
    } else if ( /*#__PURE__*/isValidElement(child) && child.type && child.type.toString() === REACT_FRAGMENT_TYPE && child.props) {
      res = _concatInstanceProperty(res).call(res, flatten(child.props.children));
    } else {
      res.push(child);
    }
  });

  return res;
};