import _isNumber from "lodash/isNumber";
import _isArray from "lodash/isArray";
import _isString from "lodash/isString";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import React, { PureComponent } from 'react';
import cls from 'classnames';
import PropTypes from 'prop-types';
import { strings, cssClasses } from '@douyinfe/semi-foundation/lib/es/space/constants';
import '@douyinfe/semi-foundation/lib/es/space/space.css';
import { flatten } from './utils';
const prefixCls = cssClasses.PREFIX;

class Space extends PureComponent {
  render() {
    var _context;

    const {
      children = null,
      style,
      className,
      spacing,
      wrap,
      align,
      vertical
    } = this.props;
    const isWrap = wrap && vertical ? false : wrap;

    const realStyle = _Object$assign({}, style);

    let spacingHorizontalType = '';
    let spacingVerticalType = '';

    if (_isString(spacing)) {
      spacingHorizontalType = spacing;
      spacingVerticalType = spacing;
    } else if (_isNumber(spacing)) {
      realStyle.rowGap = spacing;
      realStyle.columnGap = spacing;
    } else if (_isArray(spacing)) {
      if (_isString(spacing[0])) {
        spacingHorizontalType = spacing[0];
      } else if (_isNumber(spacing[0])) {
        realStyle.columnGap = "".concat(spacing[0], "px");
      }

      if (_isString(spacing[1])) {
        spacingVerticalType = spacing[1];
      } else if (_isNumber(spacing[1])) {
        realStyle.rowGap = "".concat(spacing[1], "px");
      }
    }

    const classNames = cls(prefixCls, className, {
      [_concatInstanceProperty(_context = "".concat(prefixCls, "-align-")).call(_context, align)]: align,
      ["".concat(prefixCls, "-vertical")]: vertical,
      ["".concat(prefixCls, "-horizontal")]: !vertical,
      ["".concat(prefixCls, "-wrap")]: isWrap,
      ["".concat(prefixCls, "-tight-horizontal")]: spacingHorizontalType === strings.SPACING_TIGHT,
      ["".concat(prefixCls, "-tight-vertical")]: spacingVerticalType === strings.SPACING_TIGHT,
      ["".concat(prefixCls, "-medium-horizontal")]: spacingHorizontalType === strings.SPACING_MEDIUM,
      ["".concat(prefixCls, "-medium-vertical")]: spacingVerticalType === strings.SPACING_MEDIUM,
      ["".concat(prefixCls, "-loose-horizontal")]: spacingHorizontalType === strings.SPACING_LOOSE,
      ["".concat(prefixCls, "-loose-vertical")]: spacingVerticalType === strings.SPACING_LOOSE
    });
    const childrenNodes = flatten(children);
    return /*#__PURE__*/React.createElement("div", {
      className: classNames,
      style: realStyle,
      "x-semi-prop": "children"
    }, childrenNodes);
  }

}

Space.propTypes = {
  wrap: PropTypes.bool,
  align: PropTypes.oneOf(strings.ALIGN_SET),
  vertical: PropTypes.bool,
  spacing: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.array]),
  children: PropTypes.node,
  style: PropTypes.object,
  className: PropTypes.string
};
Space.defaultProps = {
  vertical: false,
  wrap: false,
  spacing: 'tight',
  align: 'center'
};
export default Space;