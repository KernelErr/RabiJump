import React from 'react';
import { findDOMNode } from 'react-dom';
import PropTypes from 'prop-types';
import BaseComponent from '../_base/baseComponent';
import ResizeObserver from 'resize-observer-polyfill';
export default class ReactResizeObserver extends BaseComponent {
  constructor(props) {
    super(props);

    this.getElement = () => {
      try {
        // using findDOMNode for two reasons:
        // 1. cloning to insert a ref is unwieldy and not performant.
        // 2. ensure that we resolve to an actual DOM node (instead of any JSX ref instance).
        // eslint-disable-next-line
        return findDOMNode(this.childNode || this);
      } catch (error) {
        // swallow error if findDOMNode is run on unmounted component.
        return null;
      }
    };

    this.mergeRef = (ref, node) => {
      this.childNode = node;

      if (typeof ref === 'function') {
        ref(node);
      } else if (typeof ref === 'object' && ref && 'current' in ref) {
        ref.current = node;
      }
    };

    this.observer = new ResizeObserver(props.onResize);
  }

  componentDidMount() {
    this.observeElement();
  }

  componentDidUpdate(prevProps) {
    this.observeElement(this.props.observeParent !== prevProps.observeParent);
  }

  componentWillUnmount() {
    if (this.observer) {
      this.observer.disconnect();
      this.observer = null;
    }
  }

  observeElement() {
    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    const element = this.getElement();

    if (!(element && element instanceof Element)) {
      // stop everything if not defined
      this.observer.disconnect();
      return;
    }

    if (element === this.element && !force) {
      // abort if given same element -- nothing to update (unless forced)
      return;
    } else {
      // clear observer list if new element
      this.observer.disconnect(); // remember element reference for next time

      this.element = element;
    } // observer callback is invoked immediately when observing new elements


    this.observer.observe(element);

    if (this.props.observeParent && element.parentNode && element.parentNode.ownerDocument && element.parentNode.ownerDocument.defaultView && element.parentNode instanceof element.parentNode.ownerDocument.defaultView.HTMLElement) {
      this._parentNode = element.parentNode;
      this.observer.observe(this._parentNode);
    }
  }

  render() {
    const child = React.Children.only(this.props.children);
    const {
      ref
    } = child;
    return /*#__PURE__*/React.cloneElement(child, {
      ref: node => this.mergeRef(ref, node)
    });
  }

}
ReactResizeObserver.propTypes = {
  onResize: PropTypes.func,
  observeParent: PropTypes.bool
};
ReactResizeObserver.defaultProps = {
  onResize: () => {},
  observeParent: false
};