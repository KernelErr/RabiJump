import React from 'react';
import PropTypes from 'prop-types';
import BaseComponent, { BaseProps } from '../_base/baseComponent';
import ResizeObserver from 'resize-observer-polyfill';
/** A parallel type to `ResizeObserverEntry` (from resize-observer-polyfill). */
export interface ResizeEntry {
    contentRect: DOMRectReadOnly;
    target: Element;
}
export interface ReactResizeObserverProps extends BaseProps {
    onResize?: (entries: ResizeEntry[]) => void;
    observeParent?: boolean;
}
export default class ReactResizeObserver extends BaseComponent<ReactResizeObserverProps> {
    static propTypes: {
        onResize: PropTypes.Requireable<(...args: any[]) => any>;
        observeParent: PropTypes.Requireable<boolean>;
    };
    static defaultProps: {
        onResize: () => void;
        observeParent: boolean;
    };
    observer: ResizeObserver;
    childNode: any;
    element: Element;
    _parentNode: HTMLElement;
    constructor(props: ReactResizeObserverProps);
    componentDidMount(): void;
    componentDidUpdate(prevProps: ReactResizeObserverProps): void;
    componentWillUnmount(): void;
    getElement: () => Element | Text;
    observeElement(force?: boolean): void;
    mergeRef: (ref: any, node: HTMLDivElement) => void;
    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>>;
}
