import BaseComponent, { BaseProps } from '../_base/baseComponent';
import React from 'react';
import PropTypes from 'prop-types';
import { NavigationAdapter } from '@douyinfe/semi-foundation/lib/cjs/navigation/foundation';
import SubNav, { SubNavProps } from './SubNav';
import Item, { NavItemProps } from './Item';
import Footer, { NavFooterProps } from './Footer';
import Header, { NavHeaderProps } from './Header';
import '@douyinfe/semi-foundation/lib/cjs/navigation/navigation.css';
import { Motion } from '../_base/base';
export { CollapseButtonProps } from './CollapseButton';
export { NavFooterProps } from './Footer';
export { NavHeaderProps } from './Header';
export { NavItemProps } from './Item';
export { OpenIconTransitionProps } from './OpenIconTransition';
export { ToggleIcon, SubNavProps } from './SubNav';
export { SubNavTransitionProps } from './SubNavTransition';
export declare type Mode = 'vertical' | 'horizontal';
export interface OnSelectedData {
    itemKey: React.ReactText;
    selectedKeys: React.ReactText[];
    selectedItems: (NavItemProps | SubNavProps)[];
    domEvent: React.MouseEvent;
    isOpen: boolean;
}
export interface SubNavPropsWithItems extends SubNavProps {
    items?: (SubNavPropsWithItems | string)[];
}
export interface NavItemPropsWithItems extends NavItemProps {
    items?: (NavItemPropsWithItems | string)[];
}
export declare type NavItems = (string | SubNavPropsWithItems | NavItemPropsWithItems)[];
export interface NavProps extends BaseProps {
    bodyStyle?: React.CSSProperties;
    children?: React.ReactNode;
    defaultIsCollapsed?: boolean;
    defaultOpenKeys?: React.ReactText[];
    defaultSelectedKeys?: React.ReactText[];
    footer?: React.ReactNode | NavFooterProps;
    header?: React.ReactNode | NavHeaderProps;
    isCollapsed?: boolean;
    items?: NavItems;
    limitIndent?: boolean;
    mode?: Mode;
    multiple?: boolean;
    openKeys?: React.ReactText[];
    prefixCls?: string;
    selectedKeys?: React.ReactText[];
    subNavCloseDelay?: number;
    subNavMotion?: Motion;
    subNavOpenDelay?: number;
    toggleIconPosition?: string;
    tooltipHideDelay?: number;
    tooltipShowDelay?: number;
    onClick?: (data: {
        itemKey: React.ReactText;
        domEvent: MouseEvent;
        isOpen: boolean;
    }) => void;
    onCollapseChange?: (isCollapse: boolean) => void;
    onDeselect?: (data?: any) => void;
    onOpenChange?: (data: {
        itemKey: (string | number);
        openKeys: (string | number)[];
        domEvent: MouseEvent;
        isOpen: boolean;
    }) => void;
    onSelect?: (data: OnSelectedData) => void;
}
export interface NavState {
    isCollapsed: boolean;
    openKeys: (string | number)[];
    items: any[];
    itemKeysMap: {
        [itemKey: string]: (string | number)[];
    };
    selectedKeys: (string | number)[];
}
declare class Nav extends BaseComponent<NavProps, NavState> {
    static Sub: typeof SubNav;
    static Item: typeof Item;
    static Header: typeof Header;
    static Footer: typeof Footer;
    static propTypes: {
        defaultOpenKeys: PropTypes.Requireable<(string | number)[]>;
        openKeys: PropTypes.Requireable<(string | number)[]>;
        defaultSelectedKeys: PropTypes.Requireable<(string | number)[]>;
        selectedKeys: PropTypes.Requireable<(string | number)[]>;
        mode: PropTypes.Requireable<string>;
        onSelect: PropTypes.Requireable<(...args: any[]) => any>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onOpenChange: PropTypes.Requireable<(...args: any[]) => any>;
        items: PropTypes.Requireable<any[]>;
        isCollapsed: PropTypes.Requireable<boolean>;
        defaultIsCollapsed: PropTypes.Requireable<boolean>;
        onCollapseChange: PropTypes.Requireable<(...args: any[]) => any>;
        multiple: PropTypes.Requireable<boolean>;
        onDeselect: PropTypes.Requireable<(...args: any[]) => any>;
        subNavMotion: PropTypes.Requireable<boolean | object>;
        subNavCloseDelay: PropTypes.Requireable<number>;
        subNavOpenDelay: PropTypes.Requireable<number>;
        tooltipShowDelay: PropTypes.Requireable<number>;
        tooltipHideDelay: PropTypes.Requireable<number>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        style: PropTypes.Requireable<object>;
        bodyStyle: PropTypes.Requireable<object>;
        className: PropTypes.Requireable<string>;
        toggleIconPosition: PropTypes.Requireable<string>;
        prefixCls: PropTypes.Requireable<string>;
        header: PropTypes.Requireable<object | PropTypes.ReactNodeLike>;
        footer: PropTypes.Requireable<object | PropTypes.ReactNodeLike>;
        limitIndent: PropTypes.Requireable<boolean>;
    };
    static defaultProps: {
        subNavCloseDelay: number;
        subNavOpenDelay: number;
        tooltipHideDelay: number;
        tooltipShowDelay: number;
        onCollapseChange: (...args: any[]) => void;
        onSelect: (...args: any[]) => void;
        onClick: (...args: any[]) => void;
        onOpenChange: (...args: any[]) => void;
        toggleIconPosition: string;
        limitIndent: boolean;
        prefixCls: string;
        subNavMotion: boolean;
        mode: string;
    };
    itemsChanged: boolean;
    constructor(props: NavProps);
    static getDerivedStateFromProps(props: NavProps, state: NavState): Partial<NavState>;
    componentDidMount(): void;
    componentDidUpdate(prevProps: NavProps, prevState: NavState): void;
    get adapter(): NavigationAdapter<NavProps, NavState>;
    /**
     * Render navigation items recursively
     *
     * @param {NavItem[]} items
     * @returns {JSX.Element}
     */
    renderItems(items?: (SubNavPropsWithItems | NavItemPropsWithItems)[], level?: number): JSX.Element;
    onCollapseChange: () => void;
    render(): JSX.Element;
}
export default Nav;
