"use strict";

var _WeakMap = require("@babel/runtime-corejs3/core-js-stable/weak-map");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _set = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _from = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/from"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _splice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/splice"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _foundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/navigation/foundation"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/navigation/constants");

var _SubNav = _interopRequireDefault(require("./SubNav"));

var _Item = _interopRequireDefault(require("./Item"));

var _Footer = _interopRequireDefault(require("./Footer"));

var _Header = _interopRequireDefault(require("./Header"));

var _navContext = _interopRequireDefault(require("./nav-context"));

var _localeConsumer = _interopRequireDefault(require("../locale/localeConsumer"));

require("@douyinfe/semi-foundation/lib/cjs/navigation/navigation.css");

function _getRequireWildcardCache(nodeInterop) { if (typeof _WeakMap !== "function") return null; var cacheBabelInterop = new _WeakMap(); var cacheNodeInterop = new _WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { _Object$defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable max-lines-per-function */
function createAddKeysFn(context, keyName) {
  return function addKeys() {
    const handleKeys = new _set.default(context.state[keyName]);

    for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {
      keys[_key] = arguments[_key];
    }

    (0, _forEach.default)(keys).call(keys, key => key && handleKeys.add(key));
    context.setState({
      [keyName]: (0, _from.default)(handleKeys)
    });
  };
}

function createRemoveKeysFn(context, keyName) {
  return function removeKeys() {
    const handleKeys = new _set.default(context.state[keyName]);

    for (var _len2 = arguments.length, keys = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      keys[_key2] = arguments[_key2];
    }

    (0, _forEach.default)(keys).call(keys, key => key && handleKeys.delete(key));
    context.setState({
      [keyName]: (0, _from.default)(handleKeys)
    });
  };
}

const {
  hasOwnProperty
} = Object.prototype;

class Nav extends _baseComponent.default {
  constructor(props) {
    super(props);

    this.onCollapseChange = () => {
      this.foundation.handleCollapseChange();
    };

    this.foundation = new _foundation.default(this.adapter);
    this.itemsChanged = true;
    const {
      isCollapsed,
      defaultIsCollapsed,
      items,
      children
    } = props;
    const initState = {
      isCollapsed: Boolean(this.isControlled('isCollapsed') ? isCollapsed : defaultIsCollapsed),
      // calc state
      openKeys: [],
      items: [],
      itemKeysMap: {},
      selectedKeys: []
    };
    this.state = (0, _assign.default)({}, initState);

    if (items && items.length || children) {
      const calcState = this.foundation.init('constructor');
      this.state = (0, _assign.default)((0, _assign.default)({}, initState), calcState);
    }
  }

  static getDerivedStateFromProps(props, state) {
    const willUpdateState = {};

    if (hasOwnProperty.call(props, 'isCollapsed') && props.isCollapsed !== state.isCollapsed) {
      willUpdateState.isCollapsed = props.isCollapsed;
    }

    return willUpdateState;
  }

  componentDidMount() {// override BaseComponent
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevProps.items !== this.props.items || prevProps.children !== this.props.children) {
      this.foundation.init();
    } else {
      this.foundation.handleItemsChange(false);
      const {
        selectedKeys
      } = this.state;

      if (this.props.selectedKeys && !(0, _isEqual2.default)(prevProps.selectedKeys, this.props.selectedKeys)) {
        this.adapter.updateSelectedKeys(this.props.selectedKeys);
      }

      if (this.props.openKeys && !(0, _isEqual2.default)(prevProps.openKeys, this.props.openKeys)) {
        this.adapter.updateOpenKeys(this.props.openKeys);
      }

      if (!(0, _isEqual2.default)(selectedKeys, prevState.selectedKeys)) {
        const parentSelectKeys = this.foundation.selectLevelZeroParentKeys(null, ...selectedKeys);
        this.adapter.addSelectedKeys(...parentSelectKeys);
      }
    }
  }

  get adapter() {
    var _this = this;

    return (0, _assign.default)((0, _assign.default)({}, super.adapter), {
      notifySelect: function () {
        return _this.props.onSelect(...arguments);
      },
      notifyOpenChange: function () {
        return _this.props.onOpenChange(...arguments);
      },
      setIsCollapsed: isCollapsed => this.setState({
        isCollapsed
      }),
      notifyCollapseChange: function () {
        return _this.props.onCollapseChange(...arguments);
      },
      updateItems: items => this.setState({
        items: [...items]
      }),
      setItemKeysMap: itemKeysMap => this.setState({
        itemKeysMap: (0, _assign.default)({}, itemKeysMap)
      }),
      addSelectedKeys: createAddKeysFn(this, 'selectedKeys'),
      removeSelectedKeys: createRemoveKeysFn(this, 'selectedKeys'),
      updateSelectedKeys: selectedKeys => this.setState({
        selectedKeys: [...selectedKeys]
      }),
      updateOpenKeys: openKeys => this.setState({
        openKeys: [...openKeys]
      }),
      addOpenKeys: createAddKeysFn(this, 'openKeys'),
      removeOpenKeys: createRemoveKeysFn(this, 'openKeys'),
      setItemsChanged: isChanged => {
        this.itemsChanged = isChanged;
      }
    });
  }
  /**
   * Render navigation items recursively
   *
   * @param {NavItem[]} items
   * @returns {JSX.Element}
   */


  renderItems() {
    let items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    const finalDom = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _map.default)(items).call(items, (item, idx) => {
      if ((0, _isArray.default)(item.items) && item.items.length) {
        return /*#__PURE__*/_react.default.createElement(_SubNav.default, (0, _assign.default)({
          key: item.itemKey || String(level) + idx
        }, item, {
          level: level
        }), this.renderItems(item.items, level + 1));
      } else {
        return /*#__PURE__*/_react.default.createElement(_Item.default, (0, _assign.default)({
          key: item.itemKey || String(level) + idx
        }, item, {
          level: level
        }));
      }
    }));

    return finalDom;
  }

  render() {
    const {
      children: originChildren,
      mode,
      onOpenChange,
      onSelect,
      onClick,
      style,
      className,
      subNavCloseDelay,
      subNavOpenDelay,
      subNavMotion,
      tooltipShowDelay,
      tooltipHideDelay,
      prefixCls,
      bodyStyle,
      footer,
      header,
      toggleIconPosition,
      limitIndent
    } = this.props;
    const {
      selectedKeys,
      openKeys,
      items,
      isCollapsed
    } = this.state;
    const {
      updateOpenKeys,
      addOpenKeys,
      removeOpenKeys,
      updateSelectedKeys,
      addSelectedKeys,
      removeSelectedKeys
    } = this.adapter;
    const finalStyle = (0, _assign.default)({}, style);

    let children = _react.Children.toArray(originChildren);

    const footers = [];
    const headers = [];

    if ( /*#__PURE__*/_react.default.isValidElement(footer)) {
      footers.push( /*#__PURE__*/_react.default.createElement(_Footer.default, {
        key: 0
      }, footer));
    } else if (footer && typeof footer === 'object') {
      footers.push( /*#__PURE__*/_react.default.createElement(_Footer.default, (0, _assign.default)({
        key: 0
      }, footer)));
    }

    if ( /*#__PURE__*/_react.default.isValidElement(header)) {
      headers.push( /*#__PURE__*/_react.default.createElement(_Header.default, {
        key: 0
      }, header));
    } else if (header && typeof header === 'object') {
      headers.push( /*#__PURE__*/_react.default.createElement(_Header.default, (0, _assign.default)({
        key: 0
      }, header)));
    }

    if ((0, _isArray.default)(children) && children.length) {
      children = [...children];
      let childrenLength = children.length;

      for (let i = 0; i < childrenLength; i++) {
        const child = children[i];

        if (child.type === _Footer.default || (0, _get2.default)(child, 'type.name') === 'NavFooter') {
          footers.push(child);
          (0, _splice.default)(children).call(children, i, 1);
          i--;
          childrenLength--;
        } else if (child.type === _Header.default || (0, _get2.default)(child, 'type.name') === 'NavHeader') {
          headers.push(child);
          (0, _splice.default)(children).call(children, i, 1);
          i--;
          childrenLength--;
        }
      }
    }

    const finalCls = (0, _classnames.default)(prefixCls, className, {
      ["".concat(prefixCls, "-collapsed")]: isCollapsed,
      ["".concat(prefixCls, "-horizontal")]: mode === 'horizontal',
      ["".concat(prefixCls, "-vertical")]: mode === 'vertical'
    });
    const headerListOuterCls = (0, _classnames.default)("".concat(prefixCls, "-header-list-outer"), {
      ["".concat(prefixCls, "-header-list-outer-collapsed")]: isCollapsed
    });

    if (this.itemsChanged) {
      this.adapter.setCache('itemElems', this.renderItems(items));
    }

    return /*#__PURE__*/_react.default.createElement(_localeConsumer.default, {
      componentName: "Navigation"
    }, locale => /*#__PURE__*/_react.default.createElement(_navContext.default.Provider, {
      value: {
        subNavCloseDelay,
        subNavOpenDelay,
        subNavMotion,
        tooltipShowDelay,
        tooltipHideDelay,
        openKeys,
        openKeysIsControlled: this.isControlled('openKeys') && mode === 'vertical' && !isCollapsed,
        // canUpdateOpenKeys: mode === 'vertical' && !isCollapsed,
        canUpdateOpenKeys: true,
        selectedKeys,
        selectedKeysIsControlled: this.isControlled('selectedKeys'),
        isCollapsed,
        onCollapseChange: this.onCollapseChange,
        mode,
        onSelect,
        onOpenChange,
        updateOpenKeys,
        addOpenKeys,
        removeOpenKeys,
        updateSelectedKeys,
        addSelectedKeys,
        removeSelectedKeys,
        onClick,
        locale,
        prefixCls,
        toggleIconPosition,
        limitIndent
      }
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: finalCls,
      style: finalStyle
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-inner")
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: headerListOuterCls
    }, headers, /*#__PURE__*/_react.default.createElement("div", {
      style: bodyStyle,
      className: "".concat(prefixCls, "-list-wrapper")
    }, /*#__PURE__*/_react.default.createElement("ul", {
      role: "menu",
      "aria-orientation": mode,
      className: "".concat(prefixCls, "-list")
    }, this.adapter.getCache('itemElems'), children))), footers))));
  }

}

Nav.Sub = _SubNav.default;
Nav.Item = _Item.default;
Nav.Header = _Header.default;
Nav.Footer = _Footer.default;
Nav.propTypes = {
  // Initial expanded SubNav navigation key array
  defaultOpenKeys: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])),
  openKeys: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])),
  // Initial selected navigation key array
  defaultSelectedKeys: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])),
  selectedKeys: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])),
  // Navigation type, now supports vertical, horizontal
  mode: _propTypes.default.oneOf([..._constants.strings.MODE]),
  // Triggered when selecting a navigation item
  onSelect: _propTypes.default.func,
  // Triggered when clicking a navigation item
  onClick: _propTypes.default.func,
  // SubNav expand/close callback
  onOpenChange: _propTypes.default.func,
  // Array of options (nested options can continue)
  items: _propTypes.default.array,
  // Is it in the state of being stowed to the sidebar
  isCollapsed: _propTypes.default.bool,
  defaultIsCollapsed: _propTypes.default.bool,
  onCollapseChange: _propTypes.default.func,
  multiple: _propTypes.default.bool,
  onDeselect: _propTypes.default.func,
  subNavMotion: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.object, _propTypes.default.func]),
  subNavCloseDelay: _propTypes.default.number,
  subNavOpenDelay: _propTypes.default.number,
  tooltipShowDelay: _propTypes.default.number,
  tooltipHideDelay: _propTypes.default.number,
  children: _propTypes.default.node,
  style: _propTypes.default.object,
  bodyStyle: _propTypes.default.object,
  className: _propTypes.default.string,
  toggleIconPosition: _propTypes.default.string,
  prefixCls: _propTypes.default.string,
  header: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.object]),
  footer: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.object]),
  limitIndent: _propTypes.default.bool
};
Nav.defaultProps = {
  subNavCloseDelay: _constants.numbers.DEFAULT_SUBNAV_CLOSE_DELAY,
  subNavOpenDelay: _constants.numbers.DEFAULT_SUBNAV_OPEN_DELAY,
  tooltipHideDelay: _constants.numbers.DEFAULT_TOOLTIP_HIDE_DELAY,
  tooltipShowDelay: _constants.numbers.DEFAULT_TOOLTIP_SHOW_DELAY,
  onCollapseChange: _noop2.default,
  onSelect: _noop2.default,
  onClick: _noop2.default,
  onOpenChange: _noop2.default,
  toggleIconPosition: 'right',
  limitIndent: true,
  prefixCls: _constants.cssClasses.PREFIX,
  subNavMotion: true,
  // isOpen: false,
  mode: _constants.strings.MODE_VERTICAL // defaultOpenKeys: [],
  // defaultSelectedKeys: [],
  // items: [],

};
var _default = Nav;
exports.default = _default;