"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _isFunction2 = _interopRequireDefault(require("lodash/isFunction"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _textareaFoundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/input/textareaFoundation"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/input/constants");

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

require("@douyinfe/semi-foundation/lib/cjs/input/textarea.css");

var _semiIcons = require("@douyinfe/semi-icons");

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && (0, _indexOf.default)(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _getOwnPropertySymbols.default === "function") for (var i = 0, p = (0, _getOwnPropertySymbols.default)(s); i < p.length; i++) {
    if ((0, _indexOf.default)(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable no-unused-vars */


const prefixCls = _constants.cssClasses.PREFIX;

class TextArea extends _baseComponent.default {
  constructor(props) {
    super(props);

    this.handleClear = e => {
      this.foundation.handleClear(e);
    };

    this.setRef = node => {
      this.libRef.current = node;
      const {
        forwardRef
      } = this.props;

      if (typeof forwardRef === 'function') {
        forwardRef(node);
      } else if (forwardRef && typeof forwardRef === 'object') {
        forwardRef.current = node;
      }
    };

    this.state = {
      value: '',
      isFocus: false,
      isHover: false,
      height: 0,
      minLength: props.minLength
    };
    this.focusing = false;
    this.foundation = new _textareaFoundation.default(this.adapter);
    this.libRef = /*#__PURE__*/_react.default.createRef();
    this._resizeLock = false;
  }

  get adapter() {
    return (0, _assign.default)((0, _assign.default)({}, super.adapter), {
      setValue: value => this.setState({
        value
      }, () => {
        if (this.props.autosize) {
          this.foundation.resizeTextarea();
        }
      }),
      getRef: () => this.libRef,
      toggleFocusing: focusing => this.setState({
        isFocus: focusing
      }),
      toggleHovering: hovering => this.setState({
        isHover: hovering
      }),
      notifyChange: (val, e) => {
        this.props.onChange(val, e);
      },
      notifyClear: e => this.props.onClear(e),
      notifyBlur: (val, e) => this.props.onBlur(e),
      notifyFocus: (val, e) => this.props.onFocus(e),
      notifyKeyDown: e => {
        this.props.onKeyDown(e);
      },
      notifyHeightUpdate: height => {
        this.setState({
          height
        });
        this.props.onResize({
          height
        });
      },
      notifyPressEnter: e => {
        this.props.onEnterPress && this.props.onEnterPress(e);
      },
      setMinLength: minLength => this.setState({
        minLength
      })
    });
  }

  static getDerivedStateFromProps(props, state) {
    const willUpdateStates = {};

    if (props.value !== state.cachedValue) {
      willUpdateStates.value = props.value;
      willUpdateStates.cachedValue = props.value;
    }

    return willUpdateStates;
  }

  componentDidMount() {
    this.foundation.init();
    this._resizeListener = null;

    if (this.props.autosize) {
      // Working around Firefox bug which runs resize listeners even when other JS is running at the same moment
      // causing competing rerenders (due to setState in the listener) in React.
      // More can be found here - facebook/react#6324
      // // Reference to https://github.com/andreypopp/react-textarea-autosize/
      this._resizeListener = () => {
        if (this._resizeLock) {
          return;
        }

        this._resizeLock = true;
        this.foundation.resizeTextarea(() => {
          this._resizeLock = false;
        });
      };

      window.addEventListener('resize', this._resizeListener);
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
    this._resizeListener && window.removeEventListener('resize', this._resizeListener);
  }

  componentDidUpdate(prevProps, prevState) {
    if (this.props.value !== prevProps.value && this.props.autosize) {
      this.foundation.resizeTextarea();
    }
  }

  renderClearBtn() {
    const {
      showClear
    } = this.props;
    const displayClearBtn = this.foundation.isAllowClear();
    const clearCls = (0, _classnames.default)("".concat(prefixCls, "-clearbtn"), {
      ["".concat(prefixCls, "-clearbtn-hidden")]: !displayClearBtn
    });

    if (showClear) {
      return (
        /*#__PURE__*/
        // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
        _react.default.createElement("div", {
          className: clearCls,
          onClick: this.handleClear
        }, /*#__PURE__*/_react.default.createElement(_semiIcons.IconClear, null))
      );
    }

    return null;
  }

  renderCounter() {
    let counter, current, total, countCls;
    const {
      showCounter,
      maxCount,
      getValueLength
    } = this.props;

    if (showCounter || maxCount) {
      const {
        value
      } = this.state; // eslint-disable-next-line no-nested-ternary

      current = value ? (0, _isFunction2.default)(getValueLength) ? getValueLength(value) : value.length : 0;
      total = maxCount || null;
      countCls = (0, _classnames.default)("".concat(prefixCls, "-textarea-counter"), {
        ["".concat(prefixCls, "-textarea-counter-exceed")]: current > total
      });
      counter = /*#__PURE__*/_react.default.createElement("div", {
        className: countCls
      }, current, total ? '/' : null, total);
    } else {
      counter = null;
    }

    return counter;
  }

  render() {
    var _context;

    const _a = this.props,
          {
      autosize,
      placeholder,
      onEnterPress,
      onResize,
      // resize,
      disabled,
      readonly,
      className,
      showCounter,
      validateStatus,
      maxCount,
      defaultValue,
      style,
      forwardRef,
      getValueLength,
      maxLength,
      minLength,
      showClear
    } = _a,
          rest = __rest(_a, ["autosize", "placeholder", "onEnterPress", "onResize", "disabled", "readonly", "className", "showCounter", "validateStatus", "maxCount", "defaultValue", "style", "forwardRef", "getValueLength", "maxLength", "minLength", "showClear"]);

    const {
      isFocus,
      value,
      minLength: stateMinLength
    } = this.state;
    const wrapperCls = (0, _classnames.default)(className, "".concat(prefixCls, "-textarea-wrapper"), {
      ["".concat(prefixCls, "-textarea-wrapper-disabled")]: disabled,
      ["".concat(prefixCls, "-textarea-wrapper-readonly")]: readonly,
      [(0, _concat.default)(_context = "".concat(prefixCls, "-textarea-wrapper-")).call(_context, validateStatus)]: Boolean(validateStatus),
      ["".concat(prefixCls, "-textarea-wrapper-focus")]: isFocus // [`${prefixCls}-textarea-wrapper-resize`]: !autosize && resize,

    }); // const ref = this.props.forwardRef || this.textAreaRef;

    const itemCls = (0, _classnames.default)("".concat(prefixCls, "-textarea"), {
      ["".concat(prefixCls, "-textarea-disabled")]: disabled,
      ["".concat(prefixCls, "-textarea-readonly")]: readonly,
      ["".concat(prefixCls, "-textarea-autosize")]: autosize,
      ["".concat(prefixCls, "-textarea-showClear")]: showClear
    });
    const itemProps = (0, _assign.default)((0, _assign.default)({}, (0, _omit2.default)(rest, 'insetLabel', 'insetLabelId', 'getValueLength', 'onClear', 'showClear')), {
      className: itemCls,
      disabled,
      readOnly: readonly,
      placeholder: !placeholder ? null : placeholder,
      onChange: e => this.foundation.handleChange(e.target.value, e),
      onFocus: e => this.foundation.handleFocus(e),
      onBlur: e => this.foundation.handleBlur(e.nativeEvent),
      onKeyDown: e => this.foundation.handleKeyDown(e),
      value: value === null || value === undefined ? '' : value
    });

    if (!(0, _isFunction2.default)(getValueLength)) {
      itemProps.maxLength = maxLength;
    }

    if (stateMinLength) {
      itemProps.minLength = stateMinLength;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: wrapperCls,
      style: style,
      onMouseEnter: e => this.foundation.handleMouseEnter(e),
      onMouseLeave: e => this.foundation.handleMouseLeave(e)
    }, /*#__PURE__*/_react.default.createElement("textarea", (0, _assign.default)({}, itemProps, {
      ref: this.setRef
    })), this.renderClearBtn(), this.renderCounter());
  }

}

TextArea.propTypes = {
  autosize: _propTypes.default.bool,
  placeholder: _propTypes.default.string,
  value: _propTypes.default.string,
  rows: _propTypes.default.number,
  cols: _propTypes.default.number,
  maxCount: _propTypes.default.number,
  onEnterPress: _propTypes.default.func,
  validateStatus: _propTypes.default.string,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  showClear: _propTypes.default.bool,
  onClear: _propTypes.default.func,
  onResize: _propTypes.default.func,
  getValueLength: _propTypes.default.func // TODO
  // resize: PropTypes.bool,

};
TextArea.defaultProps = {
  autosize: false,
  rows: 4,
  cols: 20,
  showCounter: false,
  showClear: false,
  onEnterPress: _noop2.default,
  onChange: _noop2.default,
  onBlur: _noop2.default,
  onFocus: _noop2.default,
  onKeyDown: _noop2.default,
  onResize: _noop2.default,
  onClear: _noop2.default // resize: false,

};

const ForwardTextarea = /*#__PURE__*/_react.default.forwardRef((props, ref) => /*#__PURE__*/_react.default.createElement(TextArea, (0, _assign.default)({}, props, {
  forwardRef: ref
})));

var _default = ForwardTextarea;
exports.default = _default;