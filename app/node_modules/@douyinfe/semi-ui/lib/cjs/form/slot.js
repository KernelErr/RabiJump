"use strict";

var _WeakMap = require("@babel/runtime-corejs3/core-js-stable/weak-map");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _isObject2 = _interopRequireDefault(require("lodash/isObject"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/form/constants");

var _label = _interopRequireDefault(require("./label"));

var _grid = require("../grid");

var _context2 = require("./context");

var _errorMessage = _interopRequireDefault(require("./errorMessage"));

function _getRequireWildcardCache(nodeInterop) { if (typeof _WeakMap !== "function") return null; var cacheBabelInterop = new _WeakMap(); var cacheNodeInterop = new _WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { _Object$defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && (0, _indexOf.default)(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _getOwnPropertySymbols.default === "function") for (var i = 0, p = (0, _getOwnPropertySymbols.default)(s); i < p.length; i++) {
    if ((0, _indexOf.default)(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable max-lines-per-function, prefer-destructuring, prefer-const, @typescript-eslint/no-unused-vars */


const prefix = _constants.cssClasses.PREFIX;

const FormSlot = props => {
  var _context;

  let labelCol, wrapperCol, labelWidth, labelAlign, content;
  let labelPosition = 'top';

  try {
    const updater = (0, _react.useContext)(_context2.FormUpdaterContext);
    const formProps = updater.getFormProps(['labelPosition', 'labelWidth', 'labelAlign', 'labelCol', 'wrapperCol']);
    labelCol = formProps.labelCol;
    wrapperCol = formProps.wrapperCol;
    labelWidth = formProps.labelWidth;
    labelAlign = formProps.labelAlign;
    labelPosition = formProps.labelPosition ? formProps.labelPosition : labelPosition;
  } catch (error) {} // eslint-disable-next-line react/destructuring-assignment


  props.labelPosition ? labelPosition = props.labelPosition : null;

  let {
    children,
    label,
    className,
    style,
    error,
    noLabel
  } = props,
      rest = __rest(props, ["children", "label", "className", "style", "error", "noLabel"]);

  const appendCol = labelCol && wrapperCol;
  const slotCls = (0, _classnames.default)({
    ["".concat(prefix, "-field")]: true,
    ["".concat(prefix, "-slot")]: true
  }, className);
  const labelColCls = (0, _classnames.default)({
    [(0, _concat.default)(_context = "".concat(prefix, "-col-")).call(_context, labelAlign)]: true
  });

  switch (true) {
    case (0, _isObject2.default)(label) && ! /*#__PURE__*/_react.default.isValidElement(label):
      // do nothing
      break;

    case (0, _isString2.default)(label) || (0, _isNumber2.default)(label):
      // @ts-ignore skip type check, the actual type is already determined
      label = {
        text: label
      };
      break;

    case /*#__PURE__*/_react.default.isValidElement(label):
      // @ts-ignore skip type check, the actual type is already determined
      label = {
        text: label
      };
      break;

    default:
      break;
  }

  let slotError = null;

  if (typeof error !== undefined) {
    let emProps = {};

    switch (true) {
      case (0, _isObject2.default)(error) && ! /*#__PURE__*/_react.default.isValidElement(error):
        // do nothing
        emProps = error;
        break;

      case (0, _isString2.default)(error) || (0, _isNumber2.default)(error):
        emProps = {
          error
        };
        break;

      case /*#__PURE__*/_react.default.isValidElement(error):
        emProps = {
          error
        };
        break;

      default:
        break;
    }

    slotError = /*#__PURE__*/_react.default.createElement(_errorMessage.default, (0, _assign.default)({}, emProps));
  }

  let mergeLabelProps = (0, _assign.default)({
    align: labelAlign,
    width: labelWidth
  }, label);
  let mainCls = (0, _classnames.default)({
    ["".concat(prefix, "-field-main")]: true,
    ["".concat(prefix, "-slot-main")]: true
  });

  switch (true) {
    case !appendCol && !noLabel:
      content = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_label.default, (0, _assign.default)({}, mergeLabelProps)), /*#__PURE__*/_react.default.createElement("div", {
        className: mainCls
      }, children, slotError));
      break;

    case !appendCol && noLabel:
      content = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
        className: mainCls
      }, children, slotError));
      break;

    case appendCol && labelPosition === 'top':
      // When labelPosition is top, you need to add an overflow hidden div to the label, otherwise it will be arranged horizontally
      content = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
        style: {
          overflow: 'hidden'
        }
      }, /*#__PURE__*/_react.default.createElement(_grid.Col, (0, _assign.default)({}, labelCol, {
        className: labelColCls
      }), /*#__PURE__*/_react.default.createElement(_label.default, (0, _assign.default)({}, mergeLabelProps)))), /*#__PURE__*/_react.default.createElement(_grid.Col, null, children, slotError));
      break;

    case appendCol && labelPosition !== 'top':
      content = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_grid.Col, (0, _assign.default)({}, labelCol, {
        className: labelColCls
      }), /*#__PURE__*/_react.default.createElement(_label.default, (0, _assign.default)({}, mergeLabelProps))), /*#__PURE__*/_react.default.createElement(_grid.Col, null, children, slotError));
      break;

    default:
      break;
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: slotCls,
    "x-label-pos": labelPosition,
    style: style
  }, content);
};

var _default = FormSlot;
exports.default = _default;