"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _bind = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/bind"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _values = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/values"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _foundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/form/foundation"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/form/constants");

var _uuid = require("@douyinfe/semi-foundation/lib/cjs/utils/uuid");

var _warning = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/utils/warning"));

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

var _context5 = require("./context");

var _reactUtils = require("../_base/reactUtils");

var _row = _interopRequireDefault(require("../grid/row"));

var _index = require("../_utils/index");

var _slot = _interopRequireDefault(require("./slot"));

var _section = _interopRequireDefault(require("./section"));

var _label = _interopRequireDefault(require("./label"));

var _errorMessage = _interopRequireDefault(require("./errorMessage"));

var _group = _interopRequireDefault(require("./group"));

require("@douyinfe/semi-foundation/lib/cjs/form/form.css");

var _field = require("./field");

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && (0, _indexOf.default)(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _getOwnPropertySymbols.default === "function") for (var i = 0, p = (0, _getOwnPropertySymbols.default)(s); i < p.length; i++) {
    if ((0, _indexOf.default)(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable prefer-template, max-len, @typescript-eslint/no-unused-vars */


const prefix = _constants.cssClasses.PREFIX;

class Form extends _baseComponent.default {
  constructor(props) {
    var _context, _context2;

    super(props);
    this.state = {
      formId: ''
    };
    (0, _warning.default)(Boolean(props.component && props.render), '[Semi Form] You should not use <Form component> and <Form render> in ths same time; <Form render> will be ignored');
    (0, _warning.default)(props.component && props.children && !(0, _reactUtils.isEmptyChildren)(props.children), '[Semi Form] You should not use <Form component> and <Form>{children}</Form> in ths same time; <Form>{children}</Form> will be ignored');
    (0, _warning.default)(props.render && props.children && !(0, _reactUtils.isEmptyChildren)(props.children), '[Semi Form] You should not use <Form render> and <Form>{children}</Form> in ths same time; <Form>{children}</Form> will be ignored');
    this.submit = (0, _bind.default)(_context = this.submit).call(_context, this);
    this.reset = (0, _bind.default)(_context2 = this.reset).call(_context2, this);
    this.foundation = new _foundation.default(this.adapter);
    this.formApi = this.foundation.getFormApi();

    if (this.props.getFormApi) {
      this.props.getFormApi(this.formApi);
    }
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
    this.formApi = null;
  }

  get adapter() {
    return (0, _assign.default)((0, _assign.default)({}, super.adapter), {
      cloneDeep: _index.cloneDeep,
      notifySubmit: values => {
        this.props.onSubmit(values);
      },
      notifySubmitFail: (errors, values) => {
        this.props.onSubmitFail(errors, values);
      },
      forceUpdate: callback => {
        this.forceUpdate(callback);
      },
      notifyChange: formState => {
        this.props.onChange(formState);
      },
      notifyValueChange: (values, changedValues) => {
        this.props.onValueChange(values, changedValues);
      },
      notifyReset: () => {
        this.props.onReset();
      },
      initFormId: () => {
        this.setState({
          formId: (0, _uuid.getUuidv4)()
        });
      },
      getInitValues: () => this.props.initValues,
      getFormProps: keys => {
        if (typeof keys === 'undefined') {
          return this.props;
        } else if (typeof keys === 'string') {
          return this.props[keys];
        } else {
          const props = {};
          (0, _forEach.default)(keys).call(keys, key => {
            props[key] = this.props[key];
          });
          return props;
        }
      },
      getAllErrorDOM: () => {
        var _context3;

        const {
          formId
        } = this.state;
        return document.querySelectorAll((0, _concat.default)(_context3 = "form[x-form-id=\"".concat(formId, "\"] .")).call(_context3, _constants.cssClasses.PREFIX, "-field-error-message"));
      },
      getFieldDOM: field => {
        var _context4;

        return document.querySelector((0, _concat.default)(_context4 = ".".concat(_constants.cssClasses.PREFIX, "-field[x-field-id=\"")).call(_context4, field, "\"]"));
      }
    });
  }

  get content() {
    const {
      children,
      component,
      render
    } = this.props;
    const formState = this.foundation.getFormState();
    const props = {
      formState,
      formApi: this.foundation.getFormApi(),
      values: (0, _values.default)(formState)
    };

    if (component) {
      return /*#__PURE__*/_react.default.createElement(component, props);
    }

    if (render) {
      return render(props);
    }

    if (typeof children === 'function') {
      return children(props);
    }

    return children;
  }

  submit(e) {
    e.preventDefault();
    this.foundation.submit();
  }

  reset(e) {
    e.preventDefault();
    this.foundation.reset();
  }

  render() {
    const needClone = false;
    const formState = this.foundation.getFormState(needClone);
    const updaterApi = this.foundation.getModifyFormStateApi();
    const {
      formId
    } = this.state;

    const _a = this.props,
          {
      children,
      getFormApi,
      onChange,
      onSubmit,
      onSubmitFail,
      onValueChange,
      component,
      render,
      validateFields,
      initValues,
      layout,
      style,
      className,
      labelPosition,
      labelWidth,
      labelAlign,
      labelCol,
      wrapperCol,
      allowEmpty,
      autoScrollToError,
      showValidateIcon,
      extraTextPosition
    } = _a,
          rest = __rest(_a, ["children", "getFormApi", "onChange", "onSubmit", "onSubmitFail", "onValueChange", "component", "render", "validateFields", "initValues", "layout", "style", "className", "labelPosition", "labelWidth", "labelAlign", "labelCol", "wrapperCol", "allowEmpty", "autoScrollToError", "showValidateIcon", "extraTextPosition"]);

    const formCls = (0, _classnames.default)(prefix, className, {
      [prefix + '-vertical']: layout === 'vertical',
      [prefix + '-horizontal']: layout === 'horizontal'
    });
    const showldAppendRow = wrapperCol && labelCol;

    const formContent = /*#__PURE__*/_react.default.createElement("form", (0, _assign.default)({
      style: style
    }, rest, {
      onReset: this.reset,
      onSubmit: this.submit,
      className: formCls,
      "x-form-id": formId
    }), this.content);

    const withRowForm = /*#__PURE__*/_react.default.createElement(_row.default, null, formContent);

    return /*#__PURE__*/_react.default.createElement(_context5.FormUpdaterContext.Provider, {
      value: updaterApi
    }, /*#__PURE__*/_react.default.createElement(_context5.FormApiContext.Provider, {
      value: this.formApi
    }, /*#__PURE__*/_react.default.createElement(_context5.FormStateContext.Provider, {
      value: formState
    }, showldAppendRow ? withRowForm : formContent)));
  }

}

Form.propTypes = {
  'aria-label': _propTypes.default.string,
  onSubmit: _propTypes.default.func,
  onSubmitFail: _propTypes.default.func,

  /* Triggered from update, including field mount/unmount/value change/blur/verification status change/error prompt change, input parameter is formState, currentField */
  onChange: _propTypes.default.func,
  onReset: _propTypes.default.func,
  // Triggered when the value of the form is updated, only when the value of the subfield changes. The entry parameter is formState.values
  onValueChange: _propTypes.default.func,
  initValues: _propTypes.default.object,
  getFormApi: _propTypes.default.func,
  component: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  render: _propTypes.default.func,
  validateFields: _propTypes.default.func,
  style: _propTypes.default.object,
  className: _propTypes.default.string,
  layout: _propTypes.default.oneOf(_constants.strings.LAYOUT),
  labelPosition: _propTypes.default.oneOf(_constants.strings.LABEL_POS),
  labelWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  labelAlign: _propTypes.default.oneOf(_constants.strings.LABEL_ALIGN),
  labelCol: _propTypes.default.object,
  wrapperCol: _propTypes.default.object,
  allowEmpty: _propTypes.default.bool,
  autoScrollToError: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.object]),
  disabled: _propTypes.default.bool,
  showValidateIcon: _propTypes.default.bool,
  extraTextPosition: _propTypes.default.oneOf(_constants.strings.EXTRA_POS),
  id: _propTypes.default.string
};
Form.defaultProps = {
  onChange: _noop2.default,
  onSubmitFail: _noop2.default,
  onSubmit: _noop2.default,
  onReset: _noop2.default,
  onValueChange: _noop2.default,
  layout: 'vertical',
  labelPosition: 'top',
  allowEmpty: false,
  autoScrollToError: false,
  showValidateIcon: true
};
Form.Input = _field.FormInput;
Form.TextArea = _field.FormTextArea;
Form.InputNumber = _field.FormInputNumber;
Form.Select = _field.FormSelect;
Form.Checkbox = _field.FormCheckbox;
Form.CheckboxGroup = _field.FormCheckboxGroup;
Form.Radio = _field.FormRadio;
Form.RadioGroup = _field.FormRadioGroup;
Form.DatePicker = _field.FormDatePicker;
Form.TimePicker = _field.FormTimePicker;
Form.Switch = _field.FormSwitch;
Form.Slider = _field.FormSlider;
Form.TreeSelect = _field.FormTreeSelect;
Form.Cascader = _field.FormCascader;
Form.Rating = _field.FormRating;
Form.AutoComplete = _field.FormAutoComplete;
Form.Upload = _field.FormUpload;
Form.TagInput = _field.FormTagInput;
Form.Slot = _slot.default;
Form.ErrorMessage = _errorMessage.default;
Form.InputGroup = _group.default;
Form.Label = _label.default;
Form.Section = _section.default;
var _default = Form;
exports.default = _default;