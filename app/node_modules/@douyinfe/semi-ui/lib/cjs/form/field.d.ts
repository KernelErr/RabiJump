/// <reference types="react" />
declare const FormInput: import("react").ComponentType<import("utility-types").Subtract<Omit<import("../input/index").InputProps, "forwardRef"> & import("react").RefAttributes<HTMLInputElement>, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & import("react").RefAttributes<any>>;
declare const FormInputNumber: import("react").ComponentType<import("utility-types").Subtract<import("../inputNumber/index").InputNumberProps & import("react").RefAttributes<HTMLInputElement>, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & import("react").RefAttributes<any>>;
declare const FormTextArea: import("react").ComponentType<import("utility-types").Subtract<Omit<import("../input/textarea").TextAreaProps, "forwardRef"> & import("react").RefAttributes<HTMLTextAreaElement>, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & import("react").RefAttributes<any>>;
declare const FormSelect: import("react").ComponentType<import("utility-types").Subtract<{
    'aria-describedby'?: string;
    'aria-errormessage'?: string;
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
    'aria-labelledby'?: string;
    'aria-required'?: boolean | "true" | "false";
    id?: string;
    autoFocus?: boolean;
    autoClearSearchValue?: boolean;
    arrowIcon?: import("react").ReactNode;
    defaultValue?: string | number | any[] | Record<string, any>;
    value?: string | number | any[] | Record<string, any>;
    placeholder?: import("react").ReactNode;
    onChange?: (value: string | number | any[] | Record<string, any>) => void;
    multiple?: boolean;
    filter?: boolean | ((inpueValue: string, option: import("../select/option").OptionProps) => boolean);
    max?: number;
    maxTagCount?: number;
    maxHeight?: string | number;
    style?: import("react").CSSProperties;
    className?: string;
    size?: import("../select/index").SelectSize;
    disabled?: boolean;
    emptyContent?: import("react").ReactNode;
    onDropdownVisibleChange?: (visible: boolean) => void;
    zIndex?: number;
    position?: "top" | "topLeft" | "topRight" | "left" | "leftTop" | "leftBottom" | "right" | "rightTop" | "rightBottom" | "bottom" | "bottomLeft" | "bottomRight" | "leftTopOver" | "rightTopOver" | "leftBottomOver" | "rightBottomOver";
    onSearch?: (value: string) => void;
    dropdownClassName?: string;
    dropdownStyle?: import("react").CSSProperties;
    outerTopSlot?: import("react").ReactNode;
    innerTopSlot?: import("react").ReactNode;
    outerBottomSlot?: import("react").ReactNode;
    innerBottomSlot?: import("react").ReactNode;
    optionList?: import("../select/option").OptionProps[];
    dropdownMatchSelectWidth?: boolean;
    loading?: boolean;
    defaultOpen?: boolean;
    validateStatus?: "default" | "error" | "warning" | "success";
    defaultActiveFirstOption?: boolean;
    onChangeWithObject?: boolean;
    suffix?: import("react").ReactNode;
    prefix?: import("react").ReactNode;
    insetLabel?: import("react").ReactNode;
    insetLabelId?: string;
    inputProps?: import("utility-types").Subtract<import("../input/index").InputProps, {
        value?: import("react").ReactText;
        onFocus?: (e: import("react").FocusEvent<HTMLInputElement, Element>) => void;
        onChange?: (value: string, e: import("react").ChangeEvent<HTMLInputElement>) => void;
    }>;
    showClear?: boolean;
    showArrow?: boolean;
    renderSelectedItem?: import("../select/index").RenderSelectedItemFn;
    renderCreateItem?: (inputValue: string | number, focus: boolean) => import("react").ReactNode;
    renderOptionItem?: (props: import("../select/index").optionRenderProps) => import("react").ReactNode;
    onMouseEnter?: (e: import("react").MouseEvent<Element, MouseEvent>) => any;
    onMouseLeave?: (e: import("react").MouseEvent<Element, MouseEvent>) => any;
    clickToHide?: boolean;
    onExceed?: (option: import("../select/option").OptionProps) => void;
    onCreate?: (option: import("../select/option").OptionProps) => void;
    remote?: boolean;
    onDeselect?: (value: string | number | any[] | Record<string, any>, option: Record<string, any>) => void;
    onSelect?: (value: string | number | any[] | Record<string, any>, option: Record<string, any>) => void;
    allowCreate?: boolean;
    triggerRender?: (props?: any) => import("react").ReactNode;
    onClear?: () => void;
    virtualize?: import("../select/index").virtualListProps;
    onFocus?: (e: import("react").FocusEvent<Element, Element>) => void;
    onBlur?: (e: import("react").FocusEvent<Element, Element>) => void;
    onListScroll?: (e: import("react").UIEvent<HTMLDivElement, UIEvent>) => void;
    children?: import("react").ReactNode;
    preventScroll?: boolean;
} & Pick<import("../tooltip").TooltipProps, "stopPropagation" | "getPopupContainer" | "spacing" | "mouseEnterDelay" | "autoAdjustOverflow" | "mouseLeaveDelay" | "motion"> & import("react").RefAttributes<any> & import("./interface").CommonFieldProps, import("./interface").CommonexcludeType>> & import("./interface").SelectStatic;
declare const FormCheckboxGroup: import("react").ComponentType<import("utility-types").Subtract<import("../checkbox/checkboxGroup").CheckboxGroupProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & import("react").RefAttributes<any>>;
declare const FormCheckbox: import("react").ComponentType<import("utility-types").Subtract<import("./interface").CommonFieldProps, import("./interface").RadioCheckboxExcludeProps> & import("../checkbox/checkbox").CheckboxProps & import("./interface").RCIncludeType>;
declare const FormRadioGroup: import("react").ComponentType<import("utility-types").Subtract<import("../radio/radioGroup").RadioGroupProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & import("react").RefAttributes<any>>;
declare const FormRadio: import("react").ComponentType<import("utility-types").Subtract<import("./interface").CommonFieldProps, import("./interface").RadioCheckboxExcludeProps> & import("../radio/radio").RadioProps & import("./interface").RCIncludeType>;
declare const FormDatePicker: import("react").ComponentType<import("utility-types").Subtract<import("../datePicker/datePicker").DatePickerProps & import("react").RefAttributes<import("../datePicker/datePicker").default>, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & import("react").RefAttributes<any>>;
declare const FormSwitch: import("react").ComponentType<import("utility-types").Subtract<import("../switch/index").SwitchProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & import("react").RefAttributes<any>>;
declare const FormSlider: import("react").ComponentType<import("utility-types").Subtract<import("../slider/index").SliderProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & import("react").RefAttributes<any>>;
declare const FormTimePicker: import("react").ComponentType<import("utility-types").Subtract<import("../timePicker/TimePicker").TimePickerProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & import("react").RefAttributes<any>>;
declare const FormTreeSelect: import("react").ComponentType<import("utility-types").Subtract<import("../treeSelect/index").TreeSelectProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & import("react").RefAttributes<any>>;
declare const FormCascader: import("react").ComponentType<import("utility-types").Subtract<import("../cascader/index").CascaderProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & import("react").RefAttributes<any>>;
declare const FormRating: import("react").ComponentType<import("utility-types").Subtract<import("../rating/index").RatingProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & import("react").RefAttributes<any>>;
declare const FormAutoComplete: import("react").ComponentType<import("utility-types").Subtract<import("../autoComplete/index").AutoCompleteProps<import("../autoComplete/index").AutoCompleteItems>, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & import("react").RefAttributes<any>>;
declare const FormUpload: import("react").ComponentType<import("utility-types").Subtract<import("../upload/index").UploadProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & import("react").RefAttributes<any>>;
declare const FormTagInput: import("react").ComponentType<import("utility-types").Subtract<import("../tagInput/index").TagInputProps, import("./interface").CommonexcludeType> & import("./interface").CommonFieldProps & import("react").RefAttributes<any>>;
export { FormInput, FormInputNumber, FormTextArea, FormSelect, FormCheckboxGroup, FormCheckbox, FormRadioGroup, FormRadio, FormDatePicker, FormSwitch, FormSlider, FormTimePicker, FormTreeSelect, FormCascader, FormRating, FormAutoComplete, FormUpload, FormTagInput };
