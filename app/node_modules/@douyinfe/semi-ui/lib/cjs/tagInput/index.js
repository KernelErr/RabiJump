"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));

var _isFunction2 = _interopRequireDefault(require("lodash/isFunction"));

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var _isNull2 = _interopRequireDefault(require("lodash/isNull"));

var _isArray2 = _interopRequireDefault(require("lodash/isArray"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/tagInput/constants");

require("@douyinfe/semi-foundation/lib/cjs/tagInput/tagInput.css");

var _foundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/tagInput/foundation"));

var _utils = require("../_utils");

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

var _tag = _interopRequireDefault(require("../tag"));

var _input = _interopRequireDefault(require("../input"));

var _popover = _interopRequireDefault(require("../popover"));

var _paragraph = _interopRequireDefault(require("../typography/paragraph"));

var _semiIcons = require("@douyinfe/semi-icons");

var _reactSortableHoc = require("react-sortable-hoc");

const SortableItem = (0, _reactSortableHoc.SortableElement)(props => props.item);
const SortableList = (0, _reactSortableHoc.SortableContainer)(_ref => {
  let {
    items
  } = _ref;
  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      display: 'flex',
      flexFlow: 'row wrap'
    }
  }, (0, _map.default)(items).call(items, (item, index) =>
  /*#__PURE__*/
  // @ts-ignore skip SortableItem type check
  _react.default.createElement(SortableItem, {
    key: item.key,
    index: index,
    item: item.item
  })));
});
const prefixCls = _constants.cssClasses.PREFIX;

class TagInput extends _baseComponent.default {
  constructor(props) {
    super(props);

    this.handleInputChange = e => {
      this.foundation.handleInputChange(e);
    };

    this.handleKeyDown = e => {
      this.foundation.handleKeyDown(e);
    };

    this.handleInputFocus = e => {
      this.foundation.handleInputFocus(e);
    };

    this.handleInputBlur = e => {
      this.foundation.handleInputBlur(e);
    };

    this.handleClearBtn = e => {
      this.foundation.handleClearBtn(e);
    };
    /* istanbul ignore next */


    this.handleClearEnterPress = e => {
      this.foundation.handleClearEnterPress(e);
    };

    this.handleTagClose = idx => {
      this.foundation.handleTagClose(idx);
    };

    this.handleInputMouseLeave = e => {
      this.foundation.handleInputMouseLeave();
    };

    this.handleClick = e => {
      this.foundation.handleClick(e);
    };

    this.handleInputMouseEnter = e => {
      this.foundation.handleInputMouseEnter();
    };

    this.handleClickPrefixOrSuffix = e => {
      this.foundation.handleClickPrefixOrSuffix(e);
    };

    this.handlePreventMouseDown = e => {
      this.foundation.handlePreventMouseDown(e);
    };

    this.getAllTags = () => {
      var _context;

      const {
        size,
        disabled,
        renderTagItem,
        showContentTooltip,
        draggable
      } = this.props;
      const {
        tagsArray,
        active
      } = this.state;
      const showIconHandler = active && draggable;
      const tagCls = (0, _classnames.default)("".concat(prefixCls, "-wrapper-tag"), {
        [(0, _concat.default)(_context = "".concat(prefixCls, "-wrapper-tag-size-")).call(_context, size)]: size,
        ["".concat(prefixCls, "-wrapper-tag-icon")]: showIconHandler
      });
      const typoCls = (0, _classnames.default)("".concat(prefixCls, "-wrapper-typo"), {
        ["".concat(prefixCls, "-wrapper-typo-disabled")]: disabled
      });
      const itemWrapperCls = (0, _classnames.default)({
        ["".concat(prefixCls, "-drag-item")]: showIconHandler,
        ["".concat(prefixCls, "-wrapper-tag-icon")]: showIconHandler
      });
      const DragHandle = (0, _reactSortableHoc.SortableHandle)(() => /*#__PURE__*/_react.default.createElement(_semiIcons.IconHandle, {
        className: "".concat(prefixCls, "-drag-handler")
      }));
      return (0, _map.default)(tagsArray).call(tagsArray, (value, index) => {
        var _context2;

        const elementKey = showIconHandler ? value : (0, _concat.default)(_context2 = "".concat(index)).call(_context2, value);

        if ((0, _isFunction2.default)(renderTagItem)) {
          return showIconHandler ? /*#__PURE__*/_react.default.createElement("div", {
            className: itemWrapperCls,
            key: elementKey
          }, /*#__PURE__*/_react.default.createElement(DragHandle, null), renderTagItem(value, index)) : renderTagItem(value, index);
        } else {
          var _context3;

          return /*#__PURE__*/_react.default.createElement(_tag.default, {
            className: tagCls,
            color: "white",
            size: size === 'small' ? 'small' : 'large',
            type: "light",
            onClose: () => {
              !disabled && this.handleTagClose(index);
            },
            closable: !disabled,
            key: elementKey,
            visible: true,
            "aria-label": (0, _concat.default)(_context3 = "".concat(!disabled ? 'Closable ' : '', "Tag: ")).call(_context3, value)
          }, showIconHandler && /*#__PURE__*/_react.default.createElement(DragHandle, null), /*#__PURE__*/_react.default.createElement(_paragraph.default, {
            className: typoCls,
            ellipsis: {
              showTooltip: showContentTooltip,
              rows: 1
            }
          }, value));
        }
      });
    };

    this.onSortEnd = callbackProps => {
      this.foundation.handleSortEnd(callbackProps);
    };

    this.foundation = new _foundation.default(this.adapter);
    this.state = {
      tagsArray: props.defaultValue || [],
      inputValue: '',
      focusing: false,
      hovering: false,
      active: false
    };
    this.inputRef = /*#__PURE__*/_react.default.createRef();
    this.tagInputRef = /*#__PURE__*/_react.default.createRef();
    this.clickOutsideHandler = null;
  }

  static getDerivedStateFromProps(nextProps, prevState) {
    const {
      value,
      inputValue
    } = nextProps;
    const {
      tagsArray: prevTagsArray
    } = prevState;
    let tagsArray;

    if ((0, _isArray2.default)(value)) {
      tagsArray = value;
    } else if ('value' in nextProps && !value) {
      tagsArray = [];
    } else {
      tagsArray = prevTagsArray;
    }

    return {
      tagsArray,
      inputValue: (0, _isString2.default)(inputValue) ? inputValue : prevState.inputValue
    };
  }

  get adapter() {
    return (0, _assign.default)((0, _assign.default)({}, super.adapter), {
      setInputValue: inputValue => {
        this.setState({
          inputValue
        });
      },
      setTagsArray: tagsArray => {
        this.setState({
          tagsArray
        });
      },
      setFocusing: focusing => {
        this.setState({
          focusing
        });
      },
      toggleFocusing: isFocus => {
        const {
          preventScroll
        } = this.props;
        const input = this.inputRef && this.inputRef.current;

        if (isFocus) {
          input && input.focus({
            preventScroll
          });
        } else {
          input && input.blur();
        }

        this.setState({
          focusing: isFocus
        });
      },
      setHovering: hovering => {
        this.setState({
          hovering
        });
      },
      setActive: active => {
        this.setState({
          active
        });
      },
      getClickOutsideHandler: () => {
        return this.clickOutsideHandler;
      },
      notifyBlur: e => {
        this.props.onBlur(e);
      },
      notifyFocus: e => {
        this.props.onFocus(e);
      },
      notifyInputChange: (v, e) => {
        this.props.onInputChange(v, e);
      },
      notifyTagChange: v => {
        this.props.onChange(v);
      },
      notifyTagAdd: v => {
        this.props.onAdd(v);
      },
      notifyTagRemove: (v, idx) => {
        this.props.onRemove(v, idx);
      },
      notifyKeyDown: e => {
        this.props.onKeyDown(e);
      },
      registerClickOutsideHandler: cb => {
        const clickOutsideHandler = e => {
          const tagInputDom = this.tagInputRef && this.tagInputRef.current;
          const target = e.target;

          if (tagInputDom && !tagInputDom.contains(target)) {
            cb(e);
          }
        };

        this.clickOutsideHandler = clickOutsideHandler;
        document.addEventListener('click', clickOutsideHandler, false);
      },
      unregisterClickOutsideHandler: () => {
        document.removeEventListener('click', this.clickOutsideHandler, false);
        this.clickOutsideHandler = null;
      }
    });
  }

  componentDidMount() {
    const {
      disabled,
      autoFocus,
      preventScroll
    } = this.props;

    if (!disabled && autoFocus) {
      this.inputRef.current.focus({
        preventScroll
      });
      this.foundation.handleClick();
    }

    this.foundation.init();
  }

  renderClearBtn() {
    const {
      hovering,
      tagsArray,
      inputValue
    } = this.state;
    const {
      showClear,
      disabled
    } = this.props;
    const clearCls = (0, _classnames.default)("".concat(prefixCls, "-clearBtn"), {
      ["".concat(prefixCls, "-clearBtn-invisible")]: !hovering || inputValue === '' && tagsArray.length === 0 || disabled
    });

    if (showClear) {
      return /*#__PURE__*/_react.default.createElement("div", {
        role: "button",
        tabIndex: 0,
        "aria-label": "Clear TagInput value",
        className: clearCls,
        onClick: e => this.handleClearBtn(e),
        onKeyPress: e => this.handleClearEnterPress(e)
      }, /*#__PURE__*/_react.default.createElement(_semiIcons.IconClear, null));
    }

    return null;
  }

  renderPrefix() {
    const {
      prefix,
      insetLabel,
      insetLabelId
    } = this.props;
    const labelNode = prefix || insetLabel;

    if ((0, _isNull2.default)(labelNode) || (0, _isUndefined2.default)(labelNode)) {
      return null;
    }

    const prefixWrapperCls = (0, _classnames.default)("".concat(prefixCls, "-prefix"), {
      ["".concat(prefixCls, "-inset-label")]: insetLabel,
      ["".concat(prefixCls, "-prefix-text")]: labelNode && (0, _isString2.default)(labelNode),
      // eslint-disable-next-line max-len
      ["".concat(prefixCls, "-prefix-icon")]: (0, _utils.isSemiIcon)(labelNode)
    });
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/no-static-element-interactions,jsx-a11y/click-events-have-key-events
      _react.default.createElement("div", {
        className: prefixWrapperCls,
        onMouseDown: this.handlePreventMouseDown,
        onClick: this.handleClickPrefixOrSuffix,
        id: insetLabelId,
        "x-semi-prop": "prefix"
      }, labelNode)
    );
  }

  renderSuffix() {
    const {
      suffix
    } = this.props;

    if ((0, _isNull2.default)(suffix) || (0, _isUndefined2.default)(suffix)) {
      return null;
    }

    const suffixWrapperCls = (0, _classnames.default)("".concat(prefixCls, "-suffix"), {
      ["".concat(prefixCls, "-suffix-text")]: suffix && (0, _isString2.default)(suffix),
      // eslint-disable-next-line max-len
      ["".concat(prefixCls, "-suffix-icon")]: (0, _utils.isSemiIcon)(suffix)
    });
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
      _react.default.createElement("div", {
        className: suffixWrapperCls,
        onMouseDown: this.handlePreventMouseDown,
        onClick: this.handleClickPrefixOrSuffix,
        "x-semi-prop": "suffix"
      }, suffix)
    );
  }

  renderTags() {
    const {
      disabled,
      maxTagCount,
      showRestTagsPopover,
      restTagsPopoverProps = {},
      draggable,
      expandRestTagsOnClick
    } = this.props;
    const {
      tagsArray,
      active
    } = this.state;
    const restTagsCls = (0, _classnames.default)("".concat(prefixCls, "-wrapper-n"), {
      ["".concat(prefixCls, "-wrapper-n-disabled")]: disabled
    });
    const allTags = this.getAllTags();
    let restTags = [];
    let tags = [...allTags];

    if ((!active || !expandRestTagsOnClick) && maxTagCount && maxTagCount < allTags.length) {
      tags = (0, _slice.default)(allTags).call(allTags, 0, maxTagCount);
      restTags = (0, _slice.default)(allTags).call(allTags, maxTagCount);
    }

    const restTagsContent = /*#__PURE__*/_react.default.createElement("span", {
      className: restTagsCls
    }, "+", tagsArray.length - maxTagCount);

    const sortableListItems = (0, _map.default)(allTags).call(allTags, (item, index) => ({
      item: item,
      key: tagsArray[index]
    }));

    if (active && draggable && sortableListItems.length > 0) {
      // @ts-ignore skip SortableItem type check
      return /*#__PURE__*/_react.default.createElement(SortableList, {
        useDragHandle: true,
        items: sortableListItems,
        onSortEnd: this.onSortEnd,
        axis: "xy"
      });
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, tags, restTags.length > 0 && (showRestTagsPopover ? /*#__PURE__*/_react.default.createElement(_popover.default, (0, _assign.default)({
      content: restTags,
      showArrow: true,
      trigger: "hover",
      position: "top",
      autoAdjustOverflow: true
    }, restTagsPopoverProps), restTagsContent) : restTagsContent));
  }

  blur() {
    this.inputRef.current.blur(); // unregister clickOutside event 

    this.foundation.clickOutsideCallBack();
  }

  focus() {
    const {
      preventScroll,
      disabled
    } = this.props;
    this.inputRef.current.focus({
      preventScroll
    });

    if (!disabled) {
      // register clickOutside event 
      this.foundation.handleClick();
    }
  }

  render() {
    const {
      size,
      style,
      className,
      disabled,
      placeholder,
      validateStatus
    } = this.props;
    const {
      focusing,
      hovering,
      tagsArray,
      inputValue,
      active
    } = this.state;
    const tagInputCls = (0, _classnames.default)(prefixCls, className, {
      ["".concat(prefixCls, "-focus")]: focusing || active,
      ["".concat(prefixCls, "-disabled")]: disabled,
      ["".concat(prefixCls, "-hover")]: hovering && !disabled,
      ["".concat(prefixCls, "-error")]: validateStatus === 'error',
      ["".concat(prefixCls, "-warning")]: validateStatus === 'warning'
    });
    const inputCls = (0, _classnames.default)("".concat(prefixCls, "-wrapper-input"));
    const wrapperCls = (0, _classnames.default)("".concat(prefixCls, "-wrapper"));
    return (
      /*#__PURE__*/
      // eslint-disable-next-line 
      _react.default.createElement("div", {
        ref: this.tagInputRef,
        style: style,
        className: tagInputCls,
        "aria-disabled": disabled,
        "aria-label": this.props['aria-label'],
        "aria-invalid": validateStatus === 'error',
        onMouseEnter: e => {
          this.handleInputMouseEnter(e);
        },
        onMouseLeave: e => {
          this.handleInputMouseLeave(e);
        },
        onClick: e => {
          this.handleClick(e);
        }
      }, this.renderPrefix(), /*#__PURE__*/_react.default.createElement("div", {
        className: wrapperCls
      }, this.renderTags(), /*#__PURE__*/_react.default.createElement(_input.default, {
        "aria-label": 'input value',
        ref: this.inputRef,
        className: inputCls,
        disabled: disabled,
        value: inputValue,
        size: size,
        placeholder: tagsArray.length === 0 ? placeholder : '',
        onKeyDown: e => {
          this.handleKeyDown(e);
        },
        onChange: (v, e) => {
          this.handleInputChange(e);
        },
        onBlur: e => {
          this.handleInputBlur(e);
        },
        onFocus: e => {
          this.handleInputFocus(e);
        }
      })), this.renderClearBtn(), this.renderSuffix())
    );
  }

}

TagInput.propTypes = {
  children: _propTypes.default.node,
  style: _propTypes.default.object,
  className: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  allowDuplicates: _propTypes.default.bool,
  max: _propTypes.default.number,
  maxTagCount: _propTypes.default.number,
  maxLength: _propTypes.default.number,
  showRestTagsPopover: _propTypes.default.bool,
  restTagsPopoverProps: _propTypes.default.object,
  showContentTooltip: _propTypes.default.bool,
  defaultValue: _propTypes.default.array,
  value: _propTypes.default.array,
  inputValue: _propTypes.default.string,
  placeholder: _propTypes.default.string,
  separator: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.array]),
  showClear: _propTypes.default.bool,
  addOnBlur: _propTypes.default.bool,
  draggable: _propTypes.default.bool,
  expandRestTagsOnClick: _propTypes.default.bool,
  autoFocus: _propTypes.default.bool,
  renderTagItem: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  onFocus: _propTypes.default.func,
  onChange: _propTypes.default.func,
  onInputChange: _propTypes.default.func,
  onExceed: _propTypes.default.func,
  onInputExceed: _propTypes.default.func,
  onAdd: _propTypes.default.func,
  onRemove: _propTypes.default.func,
  onKeyDown: _propTypes.default.func,
  size: _propTypes.default.oneOf(_constants.strings.SIZE_SET),
  validateStatus: _propTypes.default.oneOf(_constants.strings.STATUS),
  prefix: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  suffix: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  'aria-label': _propTypes.default.string,
  preventScroll: _propTypes.default.bool
};
TagInput.defaultProps = {
  showClear: false,
  addOnBlur: false,
  allowDuplicates: true,
  showRestTagsPopover: true,
  autoFocus: false,
  draggable: false,
  expandRestTagsOnClick: true,
  showContentTooltip: true,
  separator: ',',
  size: 'default',
  validateStatus: 'default',
  onBlur: _noop2.default,
  onFocus: _noop2.default,
  onChange: _noop2.default,
  onInputChange: _noop2.default,
  onExceed: _noop2.default,
  onInputExceed: _noop2.default,
  onAdd: _noop2.default,
  onRemove: _noop2.default,
  onKeyDown: _noop2.default
};
var _default = TagInput;
exports.default = _default;