import PropTypes from 'prop-types';
declare const _default: {
    align: PropTypes.Requireable<"left" | "right" | "center">;
    className: PropTypes.Requireable<string>;
    colSpan: PropTypes.Requireable<number>;
    dataIndex: PropTypes.Requireable<string>;
    defaultSortOrder: PropTypes.Requireable<"ascend" | "descend">;
    filterChildrenRecord: PropTypes.Requireable<boolean>;
    filterDropdownProps: PropTypes.Requireable<object>;
    filterDropdown: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    filterDropdownVisible: PropTypes.Requireable<boolean>;
    filterIcon: PropTypes.Requireable<(...args: any[]) => any>;
    filterMultiple: PropTypes.Requireable<boolean>;
    filteredValue: PropTypes.Requireable<any[]>;
    filters: PropTypes.Requireable<any[]>;
    fixed: PropTypes.Requireable<boolean | "left" | "right">;
    onCell: PropTypes.Requireable<(...args: any[]) => any>;
    onFilter: PropTypes.Requireable<(...args: any[]) => any>;
    onFilterDropdownVisibleChange: PropTypes.Requireable<(...args: any[]) => any>;
    onHeaderCell: PropTypes.Requireable<(...args: any[]) => any>;
    onSorterChange: PropTypes.Requireable<(...args: any[]) => any>;
    render: PropTypes.Requireable<(...args: any[]) => any>;
    renderFilterDropdownItem: PropTypes.Requireable<(...args: any[]) => any>;
    sortChildrenRecord: PropTypes.Requireable<boolean>;
    sortDirections: PropTypes.Requireable<string[]>;
    sortOrder: PropTypes.Requireable<string | boolean>;
    sorter: PropTypes.Requireable<boolean | ((...args: any[]) => any)>;
    title: PropTypes.Requireable<PropTypes.ReactNodeLike | ((...args: any[]) => any)>;
    useFullRender: PropTypes.Requireable<boolean>;
    width: PropTypes.Requireable<string | number>;
};
export default _default;
