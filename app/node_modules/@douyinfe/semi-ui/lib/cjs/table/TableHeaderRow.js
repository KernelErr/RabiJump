"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _set2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set"));

var _findIndex2 = _interopRequireDefault(require("lodash/findIndex"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _set3 = _interopRequireDefault(require("lodash/set"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/table/constants");

var _utils = require("@douyinfe/semi-foundation/lib/cjs/table/utils");

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

var _tableContext = _interopRequireDefault(require("./table-context"));

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && (0, _indexOf.default)(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _getOwnPropertySymbols.default === "function") for (var i = 0, p = (0, _getOwnPropertySymbols.default)(s); i < p.length; i++) {
    if ((0, _indexOf.default)(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable eqeqeq */


class TableHeaderRow extends _baseComponent.default {
  constructor(props) {
    super(props);

    this.cacheRef = node => {
      this.headerNode = node;

      if (node && this.context.setHeadWidths) {
        const {
          prefixCls,
          row,
          index
        } = this.props;
        const cellSelector = ".".concat(prefixCls, "-row-head");
        const heads = node && node.querySelectorAll && node.querySelectorAll(cellSelector);
        this.context.setHeadWidths((0, _map2.default)(heads, (head, headIndex) => {
          let configWidth = (0, _get2.default)(row, [headIndex, 'column', 'width']);
          const key = (0, _get2.default)(row, [headIndex, 'column', 'key']);

          if (typeof configWidth !== 'number') {
            configWidth = head && head.getBoundingClientRect().width || 0;
          }

          return {
            width: configWidth,
            key
          };
        }), index);
      }
    };

    this.headerNode = null;
  }

  get adapter() {
    return (0, _assign.default)({}, super.adapter);
  }

  componentDidUpdate(prevProps) {
    if (prevProps.columns !== this.props.columns && this.headerNode) {
      this.cacheRef(this.headerNode);
    }
  }

  render() {
    const {
      components,
      row,
      prefixCls,
      onHeaderRow,
      index,
      style,
      columns
    } = this.props;
    const {
      getCellWidths
    } = this.context;
    const slicedColumns = (0, _utils.sliceColumnsByLevel)(columns, index);
    const headWidths = getCellWidths(slicedColumns);
    const HeaderRow = (0, _get2.default)(components, 'header.row', 'tr');
    const HeaderCell = (0, _get2.default)(components, 'header.cell', 'th');
    const rowProps = onHeaderRow(columns, index) || {};
    (0, _set3.default)(rowProps, 'className', (0, _classnames.default)((0, _get2.default)(rowProps, 'className'), "".concat(prefixCls, "-row")));
    const cells = (0, _map2.default)(row, (cell, cellIndex) => {
      const {
        column
      } = cell,
            cellProps = __rest(cell, ["column"]);

      const customProps = typeof column.onHeaderCell === 'function' ? column.onHeaderCell(column, cellIndex, index) : {};
      let cellStyle = (0, _assign.default)({}, customProps.style);

      if (column.align) {
        var _context;

        cellStyle = (0, _assign.default)((0, _assign.default)({}, cellStyle), {
          textAlign: column.align
        });
        customProps.className = (0, _classnames.default)(customProps.className, column.className, {
          [(0, _concat.default)(_context = "".concat(prefixCls, "-align-")).call(_context, column.align)]: Boolean(column.align)
        });
      }

      customProps.className = (0, _classnames.default)("".concat(prefixCls, "-row-head"), column.className, customProps.className, // `${prefixCls}-fixed-columns`,
      {
        ["".concat(prefixCls, "-cell-fixed-left")]: (0, _utils.isFixedLeft)(column),
        ["".concat(prefixCls, "-cell-fixed-left-last")]: (0, _utils.isLastLeftFixed)(slicedColumns, column),
        ["".concat(prefixCls, "-cell-fixed-right")]: (0, _utils.isFixedRight)(column),
        ["".concat(prefixCls, "-cell-fixed-right-first")]: (0, _utils.isFirstFixedRight)(slicedColumns, column)
      });

      if (headWidths.length && slicedColumns.length) {
        const indexOfSlicedColumns = (0, _findIndex2.default)(slicedColumns, item => item && item.key != null && item.key === column.key);

        if (indexOfSlicedColumns > -1) {
          if ((0, _utils.isFixedLeft)(column)) {
            cellStyle = (0, _assign.default)((0, _assign.default)({}, cellStyle), {
              position: 'sticky',
              left: (0, _utils.arrayAdd)(headWidths, 0, indexOfSlicedColumns)
            });
          } else if ((0, _utils.isFixedRight)(column)) {
            cellStyle = (0, _assign.default)((0, _assign.default)({}, cellStyle), {
              position: 'sticky',
              right: (0, _utils.arrayAdd)(headWidths, indexOfSlicedColumns + 1)
            });
          }
        }
      }

      const props = (0, _omit2.default)((0, _assign.default)((0, _assign.default)({}, cellProps), customProps), ['colStart', 'colEnd', 'hasSubColumns', 'parents', 'level']);
      const {
        rowSpan,
        colSpan
      } = props;

      if (rowSpan === 0 || colSpan === 0) {
        return null;
      }

      return /*#__PURE__*/_react.default.createElement(HeaderCell, (0, _assign.default)({
        role: "columnheader",
        "aria-colindex": cellIndex + 1
      }, props, {
        style: cellStyle,
        key: column.key || column.dataIndex || cellIndex
      }));
    });
    return /*#__PURE__*/_react.default.createElement(HeaderRow, (0, _assign.default)({
      role: "row",
      "aria-rowindex": index + 1
    }, rowProps, {
      style: style,
      ref: this.cacheRef
    }), cells);
  }

}

exports.default = TableHeaderRow;
TableHeaderRow.contextType = _tableContext.default;
TableHeaderRow.propTypes = {
  components: _propTypes.default.object,
  row: _propTypes.default.array,
  prefixCls: _propTypes.default.string,
  onHeaderRow: _propTypes.default.func,
  index: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  style: _propTypes.default.object,
  columns: _propTypes.default.array,
  fixed: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
  selectedRowKeysSet: _propTypes.default.instanceOf(_set2.default).isRequired
};
TableHeaderRow.defaultProps = {
  onHeaderRow: _noop2.default,
  prefixCls: _constants.cssClasses.PREFIX,
  columns: [],
  components: {
    header: {
      wrapper: 'thead',
      row: 'tr',
      cell: 'th'
    }
  }
};