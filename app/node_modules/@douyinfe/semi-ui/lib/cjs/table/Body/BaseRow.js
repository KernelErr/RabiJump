"use strict";

var _WeakMap = require("@babel/runtime-corejs3/core-js-stable/weak-map");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _stubTrue2 = _interopRequireDefault(require("lodash/stubTrue"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _each2 = _interopRequireDefault(require("lodash/each"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/table/constants");

var _shallowEqualObjects = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/utils/shallowEqualObjects"));

var _tableRowFoundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/table/tableRowFoundation"));

var _utils = require("@douyinfe/semi-foundation/lib/cjs/table/utils");

var _baseComponent = _interopRequireDefault(require("../../_base/baseComponent"));

var _TableCell = _interopRequireDefault(require("../TableCell"));

function _getRequireWildcardCache(nodeInterop) { if (typeof _WeakMap !== "function") return null; var cacheBabelInterop = new _WeakMap(); var cacheNodeInterop = new _WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { _Object$defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && (0, _indexOf.default)(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _getOwnPropertySymbols.default === "function") for (var i = 0, p = (0, _getOwnPropertySymbols.default)(s); i < p.length; i++) {
    if ((0, _indexOf.default)(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable max-len */

/* eslint-disable eqeqeq */


class TableRow extends _baseComponent.default {
  constructor(props) {
    super(props);

    this._cacheNode = node => {
      this.ref.current = node;
    }; // Pass true to render the tree-shaped expand button


    this.renderExpandIcon = record => {
      const {
        renderExpandIcon
      } = this.props;
      return renderExpandIcon(record, true);
    };

    this.handleMouseEnter = e => {
      this.foundation.handleMouseEnter(e);
      const customRowProps = this.adapter.getCache('customRowProps');

      if (typeof customRowProps.onMouseEnter === 'function') {
        customRowProps.onMouseEnter(e);
      }
    };

    this.handleMouseLeave = e => {
      this.foundation.handleMouseLeave(e);
      const customRowProps = this.adapter.getCache('customRowProps');

      if (typeof customRowProps.onMouseLeave === 'function') {
        customRowProps.onMouseLeave(e);
      }
    };

    this.handleClick = e => {
      this.foundation.handleClick(e);
      const customRowProps = this.adapter.getCache('customRowProps');

      if (customRowProps && typeof customRowProps.onClick === 'function') {
        customRowProps.onClick(e);
      }
    };

    this.ref = /*#__PURE__*/(0, _react.createRef)();
    this.foundation = new _tableRowFoundation.default(this.adapter);
  }

  get adapter() {
    var _this = this;

    return (0, _assign.default)((0, _assign.default)({}, super.adapter), {
      notifyClick: function () {
        return _this.props.onRowClick(...arguments);
      },
      notifyDoubleClick: function () {
        return _this.props.onRowDoubleClick(...arguments);
      },
      notifyMouseLeave: function () {
        _this.props.onHover(false, _this.props.rowKey);

        _this.props.onRowMouseEnter(...arguments);
      },
      notifyMouseEnter: function () {
        _this.props.onHover(true, _this.props.rowKey);

        _this.props.onRowMouseEnter(...arguments);
      }
    });
  }

  componentDidMount() {
    // fix #745
    // didmount/willUnmount may be called twice when React.StrictMode is true in React 18, we need to ensure that this.cache.customRowProps is correct
    const {
      onRow,
      index,
      record
    } = this.props;
    const customRowProps = this.adapter.getCache('customRowProps');

    if (typeof customRowProps === 'undefined') {
      const _a = onRow(record, index) || {},
            {
        className: customClassName,
        style: customStyle
      } = _a,
            rowProps = __rest(_a, ["className", "style"]);

      this.adapter.setCache('customRowProps', (0, _assign.default)({}, rowProps));
    }
  }

  shouldComponentUpdate(nextProps) {
    /**
      * Shallow comparison of incoming props to simulate PureComponent
      * Deep comparison cellWidths
      *
      * 浅层对比传入的 props，模拟 PureComponent
      * 深比较 cellWidths
      */
    const omitProps = ['cellWidths'];
    const isPropsShallowEqual = (0, _shallowEqualObjects.default)((0, _omit2.default)(nextProps, omitProps), (0, _omit2.default)(this.props, omitProps));

    if (!isPropsShallowEqual || !(0, _isEqual2.default)((0, _pick2.default)(nextProps, omitProps), (0, _pick2.default)(this.props, omitProps))) {
      return true;
    }

    return false;
  }

  renderCells() {
    const {
      columns,
      record,
      index,
      prefixCls,
      fixed,
      components,
      expandableRow,
      level,
      expandIcon,
      rowExpandable,
      isSection,
      expandedRow,
      virtualized,
      indentSize,
      hideExpandedColumn,
      cellWidths,
      selected,
      expanded,
      disabled,
      onDidUpdate
    } = this.props;
    const BodyCell = (0, _get2.default)(components, 'body.cell', _constants.strings.DEFAULT_COMPONENTS.body.cell);
    const cells = [];
    const displayExpandedColumn = rowExpandable(record);
    let firstIndex = 0; // const dataColumns = getDataColumns(columns);

    (0, _each2.default)(columns, (column, columnIndex) => {
      const columnKey = (0, _get2.default)(column, 'key');
      const expandableProps = {};

      if (fixed !== 'right') {
        if ((0, _utils.isInnerColumnKey)(columnKey)) {
          firstIndex++;
        }

        if (expandableRow && columnIndex === firstIndex) {
          expandableProps.renderExpandIcon = this.renderExpandIcon;

          if (hideExpandedColumn || isSection) {
            expandableProps.expandIcon = expandIcon != null ? expandIcon : true;
          }
        } // Only the first data row will be indented


        if (level != null && columnIndex === firstIndex) {
          expandableProps.indent = level;

          if (!expandableRow) {
            expandableProps.indent = level + 1;
          }
        }
      }

      if ((0, _utils.isExpandedColumn)(column) && !displayExpandedColumn) {
        cells.push( /*#__PURE__*/_react.default.createElement(_TableCell.default, {
          key: columnIndex,
          colIndex: columnIndex,
          isSection: isSection
        }));
      } else if (!(0, _utils.isScrollbarColumn)(column)) {
        const diyProps = {};

        if (BodyCell !== _constants.strings.DEFAULT_COMPONENTS.body.cell && virtualized && !expandedRow) {
          diyProps.width = (0, _get2.default)(cellWidths, columnIndex);
        }

        cells.push( /*#__PURE__*/_react.default.createElement(_TableCell.default, (0, _assign.default)({
          colIndex: columnIndex
        }, expandableProps, diyProps, {
          hideExpandedColumn: hideExpandedColumn,
          indentSize: indentSize,
          isSection: isSection,
          prefixCls: "".concat(prefixCls),
          column: column,
          key: columnIndex,
          index: index,
          record: record,
          component: BodyCell,
          fixedLeft: (0, _utils.isFixedLeft)(column) && (0, _utils.arrayAdd)(cellWidths, 0, columnIndex),
          lastFixedLeft: (0, _utils.isLastLeftFixed)(columns, column),
          fixedRight: (0, _utils.isFixedRight)(column) && (0, _utils.arrayAdd)(cellWidths, columnIndex + 1),
          firstFixedRight: (0, _utils.isFirstFixedRight)(columns, column),
          selected: selected,
          expanded: expanded,
          disabled: disabled,
          onDidUpdate: onDidUpdate
        })));
      }
    });
    return cells;
  }

  render() {
    const {
      style
    } = this.props;
    const {
      components,
      prefixCls,
      selected,
      onRow,
      index,
      className,
      replaceClassName,
      record,
      hovered,
      expanded,
      expandableRow,
      level,
      expandedRow,
      isSection
    } = this.props;
    const BodyRow = components.body.row;

    const _a = onRow(record, index) || {},
          {
      className: customClassName,
      style: customStyle
    } = _a,
          rowProps = __rest(_a, ["className", "style"]);

    this.adapter.setCache('customRowProps', (0, _assign.default)({}, rowProps));
    const baseRowStyle = (0, _assign.default)((0, _assign.default)({}, style), customStyle);
    const rowCls = typeof replaceClassName === 'string' && replaceClassName.length ? replaceClassName : (0, _classnames.default)(className, "".concat(prefixCls, "-row"), {
      ["".concat(prefixCls, "-row-selected")]: selected,
      ["".concat(prefixCls, "-row-expanded")]: expanded,
      ["".concat(prefixCls, "-row-hovered")]: hovered
    }, customClassName);
    const ariaProps = {};

    if (typeof index === 'number') {
      ariaProps['aria-rowindex'] = index + 1;
    }

    if (expandableRow) {
      ariaProps['aria-expanded'] = expanded;
    } // if row is expandedRow, set it's level to 2 


    if (expanded || expandedRow) {
      ariaProps['aria-level'] = 2;
    }

    if (typeof level === 'number') {
      ariaProps['aria-level'] = level + 1;
    }

    if (isSection) {
      ariaProps['aria-level'] = 1;
    }

    return /*#__PURE__*/_react.default.createElement(BodyRow, (0, _assign.default)({
      role: "row"
    }, ariaProps, rowProps, {
      style: baseRowStyle,
      className: rowCls,
      ref: this._cacheNode,
      onMouseEnter: this.handleMouseEnter,
      onMouseLeave: this.handleMouseLeave,
      onClick: this.handleClick
    }), this.renderCells());
  }

}

exports.default = TableRow;
TableRow.propTypes = {
  anyColumnFixed: _propTypes.default.bool,
  cellWidths: _propTypes.default.array.isRequired,
  className: _propTypes.default.string,
  columns: _propTypes.default.array.isRequired,
  components: _propTypes.default.object.isRequired,
  disabled: _propTypes.default.bool,
  expandIcon: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func, _propTypes.default.node]),
  expandableRow: _propTypes.default.bool,
  expanded: _propTypes.default.bool,
  expandedRow: _propTypes.default.bool,
  fixed: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool]),
  height: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  hideExpandedColumn: _propTypes.default.bool,
  hovered: _propTypes.default.bool.isRequired,
  indent: _propTypes.default.number,
  indentSize: _propTypes.default.number,
  index: _propTypes.default.number,
  isSection: _propTypes.default.bool,
  level: _propTypes.default.number,
  onDidUpdate: _propTypes.default.func,
  onHover: _propTypes.default.func,
  onRow: _propTypes.default.func,
  onRowClick: _propTypes.default.func,
  onRowContextMenu: _propTypes.default.func,
  onRowDoubleClick: _propTypes.default.func,
  onRowMouseEnter: _propTypes.default.func,
  onRowMouseLeave: _propTypes.default.func,
  prefixCls: _propTypes.default.string,
  record: _propTypes.default.object,
  renderExpandIcon: _propTypes.default.func,
  replaceClassName: _propTypes.default.string,
  rowExpandable: _propTypes.default.func,
  rowKey: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired,
  selected: _propTypes.default.bool,
  store: _propTypes.default.object,
  style: _propTypes.default.object,
  virtualized: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.bool]),
  visible: _propTypes.default.bool.isRequired
};
TableRow.defaultProps = {
  columns: [],
  rowExpandable: _stubTrue2.default,
  components: {
    body: {
      row: 'tr',
      cell: 'td'
    }
  },
  prefixCls: _constants.cssClasses.PREFIX,
  onRow: _noop2.default,
  onRowClick: _noop2.default,
  onRowDoubleClick: _noop2.default,
  onRowMouseEnter: _noop2.default,
  onRowMouseLeave: _noop2.default,
  onHover: _noop2.default,
  onDidUpdate: _noop2.default,
  visible: true,
  hovered: false,
  selected: false,
  disabled: false
};