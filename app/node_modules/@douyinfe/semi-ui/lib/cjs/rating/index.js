"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/keys"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

var _classnames = _interopRequireDefault(require("classnames"));

var _context7 = _interopRequireDefault(require("../configProvider/context"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/rating/constants");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _function = require("@douyinfe/semi-foundation/lib/cjs/utils/function");

var _item = _interopRequireDefault(require("./item"));

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _foundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/rating/foundation"));

require("@douyinfe/semi-foundation/lib/cjs/rating/rating.css");

class Rating extends _baseComponent.default {
  constructor(props) {
    super(props);
    this.rate = null;

    this.onHover = (event, index) => {
      this.foundation.handleHover(event, index);
    };

    this.onMouseLeave = () => {
      this.foundation.handleMouseLeave();
    };

    this.onClick = (event, index) => {
      this.foundation.handleClick(event, index);
    };

    this.onFocus = e => {
      this.foundation.handleFocus(e);
    };

    this.onBlur = e => {
      this.foundation.handleBlur(e);
    };

    this.onKeyDown = event => {
      const {
        value
      } = this.state;
      this.foundation.handleKeyDown(event, value);
    };

    this.focus = () => {
      const {
        disabled,
        preventScroll
      } = this.props;

      if (!disabled) {
        this.rate.focus({
          preventScroll
        });
      }
    };

    this.blur = () => {
      const {
        disabled
      } = this.props;

      if (!disabled) {
        this.rate.blur();
      }
    };

    this.saveRef = index => node => {
      this.stars[index] = node;
    };

    this.saveRate = node => {
      this.rate = node;
    };

    this.handleStarFocusVisible = event => {
      this.foundation.handleStarFocusVisible(event);
    };

    this.handleStarBlur = event => {
      this.foundation.handleStarBlur(event);
    };

    this.getAriaLabelPrefix = () => {
      if (this.props['aria-label']) {
        return this.props['aria-label'];
      }

      let prefix = 'star';
      const {
        character
      } = this.props;

      if (typeof character === 'string') {
        prefix = character;
      }

      return prefix;
    };

    this.getItemList = ariaLabelPrefix => {
      var _context, _context2;

      const {
        count,
        allowHalf,
        prefixCls,
        disabled,
        character,
        size,
        tooltips
      } = this.props;
      const {
        value,
        hoverValue,
        focused
      } = this.state; // index == count is for Empty rating

      const itemList = (0, _map.default)(_context = [...(0, _keys.default)(_context2 = Array(count + 1)).call(_context2)]).call(_context, ind => {
        const content = /*#__PURE__*/_react.default.createElement(_item.default, {
          ref: this.saveRef(ind),
          index: ind,
          count: count,
          prefixCls: "".concat(prefixCls, "-star"),
          allowHalf: allowHalf,
          value: hoverValue === undefined ? value : hoverValue,
          onClick: disabled ? _function.noop : this.onClick,
          onHover: disabled ? _function.noop : this.onHover,
          key: ind,
          disabled: disabled,
          character: character,
          focused: focused,
          size: ind === count ? 0 : size,
          ariaLabelPrefix: ariaLabelPrefix,
          onFocus: disabled || count !== ind ? _function.noop : this.handleStarFocusVisible,
          onBlur: disabled || count !== ind ? _function.noop : this.handleStarBlur
        });

        if (tooltips) {
          var _context3;

          const text = tooltips[ind] ? tooltips[ind] : '';
          const showTips = hoverValue - 1 === ind;
          return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
            visible: showTips,
            trigger: "custom",
            content: text,
            key: (0, _concat.default)(_context3 = "".concat(ind, "-")).call(_context3, showTips)
          }, content);
        }

        return content;
      });
      return itemList;
    };

    const value = props.value === undefined ? props.defaultValue : props.value;
    this.stars = {};
    this.state = {
      value,
      focused: false,
      hoverValue: undefined,
      clearedValue: null,
      emptyStarFocusVisible: false
    };
    this.foundation = new _foundation.default(this.adapter);
  }

  static getDerivedStateFromProps(nextProps, state) {
    if ('value' in nextProps && nextProps.value !== undefined) {
      return (0, _assign.default)((0, _assign.default)({}, state), {
        value: nextProps.value
      });
    }

    return state;
  }

  get adapter() {
    return (0, _assign.default)((0, _assign.default)({}, super.adapter), {
      focus: () => {
        const {
          disabled,
          count
        } = this.props;
        const {
          value
        } = this.state;

        if (!disabled) {
          const index = Math.ceil(value) - 1;
          this.stars[index < 0 ? count : index].starFocus();
        }
      },
      getStarDOM: index => {
        const instance = this.stars && this.stars[index]; // eslint-disable-next-line react/no-find-dom-node

        return _reactDom.default.findDOMNode(instance);
      },
      notifyHoverChange: (hoverValue, clearedValue) => {
        const {
          onHoverChange
        } = this.props;
        this.setState({
          hoverValue,
          clearedValue
        });
        onHoverChange(hoverValue);
      },
      updateValue: value => {
        const {
          onChange
        } = this.props;

        if (!('value' in this.props)) {
          this.setState({
            value
          });
        }

        onChange(value);
      },
      clearValue: clearedValue => {
        this.setState({
          clearedValue
        });
      },
      notifyFocus: e => {
        const {
          onFocus
        } = this.props;
        this.setState({
          focused: true
        });
        onFocus && onFocus(e);
      },
      notifyBlur: e => {
        const {
          onBlur
        } = this.props;
        this.setState({
          focused: false
        });
        onBlur && onBlur(e);
      },
      notifyKeyDown: e => {
        const {
          onKeyDown
        } = this.props;
        this.setState({
          focused: false
        });
        onKeyDown && onKeyDown(e);
      },
      setEmptyStarFocusVisible: focusVisible => {
        this.setState({
          emptyStarFocusVisible: focusVisible
        });
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  render() {
    var _context4, _context5, _context6;

    const {
      style,
      prefixCls,
      disabled,
      className,
      id,
      count,
      tabIndex
    } = this.props;
    const {
      value,
      emptyStarFocusVisible
    } = this.state;
    const ariaLabelPrefix = this.getAriaLabelPrefix();
    const ariaLabel = (0, _concat.default)(_context4 = (0, _concat.default)(_context5 = (0, _concat.default)(_context6 = "Rating: ".concat(value, " of ")).call(_context6, count, " ")).call(_context5, ariaLabelPrefix)).call(_context4, value === 1 ? '' : 's', ",");
    const itemList = this.getItemList(ariaLabelPrefix);
    const listCls = (0, _classnames.default)(prefixCls, {
      ["".concat(prefixCls, "-disabled")]: disabled,
      ["".concat(prefixCls, "-focus")]: emptyStarFocusVisible
    }, className);
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
      _react.default.createElement("ul", {
        "aria-label": ariaLabel,
        "aria-labelledby": this.props['aria-labelledby'],
        "aria-describedby": this.props['aria-describedby'],
        className: listCls,
        style: style,
        onMouseLeave: disabled ? _function.noop : this.onMouseLeave,
        tabIndex: disabled ? -1 : tabIndex,
        onFocus: disabled ? _function.noop : this.onFocus,
        onBlur: disabled ? _function.noop : this.onBlur,
        onKeyDown: disabled ? _function.noop : this.onKeyDown,
        ref: this.saveRate,
        id: id
      }, itemList)
    );
  }

}

exports.default = Rating;
Rating.contextType = _context7.default;
Rating.propTypes = {
  'aria-describedby': _propTypes.default.string,
  'aria-errormessage': _propTypes.default.string,
  'aria-invalid': _propTypes.default.bool,
  'aria-label': _propTypes.default.string,
  'aria-labelledby': _propTypes.default.string,
  'aria-required': _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  value: _propTypes.default.number,
  defaultValue: _propTypes.default.number,
  count: _propTypes.default.number,
  allowHalf: _propTypes.default.bool,
  allowClear: _propTypes.default.bool,
  style: _propTypes.default.object,
  prefixCls: _propTypes.default.string,
  onChange: _propTypes.default.func,
  onHoverChange: _propTypes.default.func,
  className: _propTypes.default.string,
  character: _propTypes.default.node,
  tabIndex: _propTypes.default.number,
  onFocus: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  onKeyDown: _propTypes.default.func,
  autoFocus: _propTypes.default.bool,
  size: _propTypes.default.oneOfType([_propTypes.default.oneOf(_constants.strings.SIZE_SET), _propTypes.default.number]),
  tooltips: _propTypes.default.arrayOf(_propTypes.default.string),
  id: _propTypes.default.string,
  preventScroll: _propTypes.default.bool
};
Rating.defaultProps = {
  defaultValue: 0,
  count: 5,
  allowHalf: false,
  allowClear: true,
  style: {},
  prefixCls: _constants.cssClasses.PREFIX,
  onChange: _function.noop,
  onHoverChange: _function.noop,
  tabIndex: -1,
  size: 'default'
};