"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.getOptionsFromGroup = exports.generateOption = void 0;

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _react = _interopRequireDefault(require("react"));

var _warning = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/utils/warning"));

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && (0, _indexOf.default)(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _getOwnPropertySymbols.default === "function") for (var i = 0, p = (0, _getOwnPropertySymbols.default)(s); i < p.length; i++) {
    if ((0, _indexOf.default)(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

const generateOption = (child, parent, index) => {
  const childProps = child.props;

  if (!child || !childProps) {
    return null;
  }

  const option = (0, _assign.default)((0, _assign.default)({
    value: childProps.value,
    // Drop-down menu rendering priority label value, children, value in turn downgrade
    label: childProps.label || childProps.children || childProps.value,
    _show: true,
    _selected: false,
    _scrollIndex: index
  }, childProps), {
    _parentGroup: parent
  });
  return option;
};

exports.generateOption = generateOption;

const getOptionsFromGroup = selectChildren => {
  let optionGroups = [];
  let options = [];
  const emptyGroup = {
    label: '',
    children: [],
    _show: false
  }; // avoid null
  // eslint-disable-next-line max-len

  let childNodes = _react.default.Children.toArray(selectChildren);

  childNodes = (0, _filter.default)(childNodes).call(childNodes, childNode => childNode && childNode.props);
  let type = '';
  let optionIndex = -1;
  (0, _forEach.default)(childNodes).call(childNodes, child => {
    if (child.type.isSelectOption) {
      type = 'option';
      optionIndex++;
      const option = generateOption(child, undefined, optionIndex);
      emptyGroup.children.push(option);
      options.push(option);
    } else if (child.type.isSelectOptionGroup) {
      type = 'group'; // Avoid saving children (reactNode) by... removing other props from the group except children, causing performance problems
      // eslint-disable-next-line prefer-const

      let _a = child.props,
          {
        children
      } = _a,
          restGroupProps = __rest(_a, ["children"]);

      children = _react.default.Children.toArray(children);
      const childrenOption = (0, _map.default)(children).call(children, option => {
        optionIndex++;
        return generateOption(option, restGroupProps, optionIndex);
      });
      const group = (0, _assign.default)((0, _assign.default)({}, child.props), {
        children: childrenOption,
        key: child.key
      });
      optionGroups.push(group);
      options = (0, _concat.default)(options).call(options, childrenOption);
    } else {
      (0, _warning.default)(true, '[Semi Select] The children of `Select` should be `Select.Option` or `Select.OptionGroup`');
    }
  });

  if (type === 'option') {
    optionGroups = [emptyGroup];
  }

  return {
    optionGroups,
    options
  };
};

exports.getOptionsFromGroup = getOptionsFromGroup;