"use strict";

var _WeakMap = require("@babel/runtime-corejs3/core-js-stable/weak-map");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/select/constants");

var _localeConsumer = _interopRequireDefault(require("../locale/localeConsumer"));

var _semiIcons = require("@douyinfe/semi-icons");

var _index = require("../_utils/index");

function _getRequireWildcardCache(nodeInterop) { if (typeof _WeakMap !== "function") return null; var cacheBabelInterop = new _WeakMap(); var cacheNodeInterop = new _WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { _Object$defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && (0, _indexOf.default)(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _getOwnPropertySymbols.default === "function") for (var i = 0, p = (0, _getOwnPropertySymbols.default)(s); i < p.length; i++) {
    if ((0, _indexOf.default)(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable max-len */


class Option extends _react.PureComponent {
  onClick(_a, event) {
    var {
      value,
      label,
      children
    } = _a,
        rest = __rest(_a, ["value", "label", "children"]);

    const {
      props
    } = this;
    const isDisabled = props.disabled;

    if (!isDisabled) {
      props.onSelect((0, _assign.default)((0, _assign.default)({}, rest), {
        value,
        label: label || children
      }), event);
    }
  }

  renderOptionContent(_ref) {
    let {
      config,
      children,
      inputValue,
      prefixCls
    } = _ref;

    if ((0, _isString2.default)(children) && inputValue) {
      return (0, _index.getHighLightTextHTML)(config);
    }

    return children;
  }

  render() {
    const _a = this.props,
          {
      children,
      disabled,
      value,
      selected,
      label,
      empty,
      emptyContent,
      onSelect,
      focused,
      showTick,
      className,
      style,
      onMouseEnter,
      prefixCls,
      renderOptionItem,
      inputValue,
      id
    } = _a,
          rest = __rest(_a, ["children", "disabled", "value", "selected", "label", "empty", "emptyContent", "onSelect", "focused", "showTick", "className", "style", "onMouseEnter", "prefixCls", "renderOptionItem", "inputValue", "id"]);

    const optionClassName = (0, _classnames.default)(prefixCls, {
      ["".concat(prefixCls, "-disabled")]: disabled,
      ["".concat(prefixCls, "-selected")]: selected,
      ["".concat(prefixCls, "-focused")]: focused,
      ["".concat(prefixCls, "-empty")]: empty,
      [className]: className
    });
    const selectedIconClassName = (0, _classnames.default)(["".concat(prefixCls, "-icon")]);

    if (empty) {
      if (emptyContent === null) {
        return null;
      }

      return /*#__PURE__*/_react.default.createElement(_localeConsumer.default, {
        componentName: "Select"
      }, locale => /*#__PURE__*/_react.default.createElement("div", {
        className: optionClassName,
        "x-semi-prop": "emptyContent"
      }, emptyContent || locale.emptyText));
    } // Since there are empty, locale and other logic, the custom renderOptionItem is directly converged to the internal option instead of being placed in Select/index


    if (typeof renderOptionItem === 'function') {
      return renderOptionItem((0, _assign.default)({
        disabled,
        focused,
        selected,
        style,
        label,
        value,
        inputValue,
        onMouseEnter: e => onMouseEnter(e),
        onClick: e => this.onClick((0, _assign.default)({
          value,
          label,
          children
        }, rest), e)
      }, rest));
    }

    const config = {
      searchWords: inputValue,
      sourceString: children,
      option: {
        highlightClassName: "".concat(prefixCls, "-keyword")
      }
    };
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/interactive-supports-focus,jsx-a11y/click-events-have-key-events
      _react.default.createElement("div", {
        className: optionClassName,
        onClick: e => {
          this.onClick((0, _assign.default)({
            value,
            label,
            children
          }, rest), e);
        },
        onMouseEnter: e => onMouseEnter && onMouseEnter(e),
        role: "option",
        id: id,
        "aria-selected": selected ? "true" : "false",
        "aria-disabled": disabled ? "true" : "false",
        style: style
      }, showTick ? /*#__PURE__*/_react.default.createElement("div", {
        className: selectedIconClassName
      }, /*#__PURE__*/_react.default.createElement(_semiIcons.IconTick, null)) : null, (0, _isString2.default)(children) ? /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "-text")
      }, this.renderOptionContent({
        children,
        config,
        inputValue,
        prefixCls
      })) : children)
    );
  }

}

Option.isSelectOption = true;
Option.propTypes = {
  children: _propTypes.default.node,
  disabled: _propTypes.default.bool,
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  selected: _propTypes.default.bool,
  label: _propTypes.default.node,
  empty: _propTypes.default.bool,
  emptyContent: _propTypes.default.node,
  onSelect: _propTypes.default.func,
  focused: _propTypes.default.bool,
  showTick: _propTypes.default.bool,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  onMouseEnter: _propTypes.default.func,
  prefixCls: _propTypes.default.string,
  renderOptionItem: _propTypes.default.func,
  inputValue: _propTypes.default.string
};
Option.defaultProps = {
  prefixCls: _constants.cssClasses.PREFIX_OPTION
};
var _default = Option;
exports.default = _default;