"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.stepSizeMapIconSize = exports.default = void 0;

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _isFunction2 = _interopRequireDefault(require("lodash/isFunction"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/steps/constants");

var _semiIcons = require("@douyinfe/semi-icons");

var stepSizeMapIconSize;
exports.stepSizeMapIconSize = stepSizeMapIconSize;

(function (stepSizeMapIconSize) {
  stepSizeMapIconSize["small"] = "large";
  stepSizeMapIconSize["default"] = "extra-large";
})(stepSizeMapIconSize || (exports.stepSizeMapIconSize = stepSizeMapIconSize = {}));

const BasicStep = props => {
  var _context;

  const {
    prefixCls,
    className,
    size,
    title,
    description,
    status,
    style,
    active,
    done,
    icon,
    stepNumber,
    onClick,
    onChange,
    onKeyDown
  } = props;

  const renderIcon = () => {
    let inner, progress;

    if ('icon' in props) {
      if ( /*#__PURE__*/_react.default.isValidElement(icon)) {
        inner = icon;
      }
    } else if ('status' in props) {
      switch (status) {
        case 'error':
          inner = /*#__PURE__*/_react.default.createElement(_semiIcons.IconAlertCircle, {
            size: stepSizeMapIconSize[size]
          });
          break;

        case 'wait':
          inner = /*#__PURE__*/_react.default.createElement("span", {
            className: "".concat(prefixCls, "-number-icon")
          }, stepNumber);
          break;

        case 'process':
          inner = /*#__PURE__*/_react.default.createElement("span", {
            className: "".concat(prefixCls, "-number-icon")
          }, stepNumber);
          progress = true;
          break;

        case 'finish':
          inner = /*#__PURE__*/_react.default.createElement(_semiIcons.IconTickCircle, {
            size: stepSizeMapIconSize[size]
          });
          break;

        case 'warning':
          inner = /*#__PURE__*/_react.default.createElement(_semiIcons.IconAlertTriangle, {
            size: stepSizeMapIconSize[size]
          });
          break;

        default:
          inner = null;
          break;
      }
    }

    const cls = (0, _classnames.default)({
      ["".concat(prefixCls, "-icon")]: true,
      ["".concat(prefixCls, "-custom-icon")]: 'icon' in props,
      ["".concat(prefixCls, "-icon-process")]: progress
    });
    return inner ? /*#__PURE__*/_react.default.createElement("span", {
      className: cls
    }, inner) : null;
  };

  const classString = (0, _classnames.default)(prefixCls, (0, _concat.default)(_context = "".concat(prefixCls, "-")).call(_context, status), {
    ["".concat(prefixCls, "-active")]: active,
    ["".concat(prefixCls, "-done")]: done
  }, className);

  const handleClick = e => {
    if ((0, _isFunction2.default)(onClick)) {
      onClick(e);
    }

    onChange();
  };

  const handleKeyDown = e => {
    if (e.key === 'Enter') {
      if ((0, _isFunction2.default)(onKeyDown)) {
        onKeyDown(e);
      }

      onChange();
    }
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    role: props["role"],
    "aria-label": props["aria-label"],
    tabIndex: 0,
    "aria-current": "step",
    className: classString,
    style: style,
    onClick: e => handleClick(e),
    onKeyDown: handleKeyDown
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-container")
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-left")
  }, renderIcon()), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-content")
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-title")
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-title-text")
  }, title)), description && /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-description")
  }, description))));
};

BasicStep.propTypes = {
  prefixCls: _propTypes.default.string,
  description: _propTypes.default.node,
  icon: _propTypes.default.node,
  status: _propTypes.default.oneOf(['wait', 'process', 'finish', 'error', 'warning']),
  title: _propTypes.default.node,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  onClick: _propTypes.default.func,
  active: _propTypes.default.bool,
  done: _propTypes.default.bool
};
BasicStep.defaultProps = {
  prefixCls: _constants.stepsClasses.ITEM,
  active: false,
  done: false,
  status: 'wait',
  className: ''
};
var _default = BasicStep;
exports.default = _default;