"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set-timeout"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/timePicker/constants");

var _input = _interopRequireDefault(require("../input"));

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

var _inputFoundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/timePicker/inputFoundation"));

var _semiIcons = require("@douyinfe/semi-icons");

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && (0, _indexOf.default)(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _getOwnPropertySymbols.default === "function") for (var i = 0, p = (0, _getOwnPropertySymbols.default)(s); i < p.length; i++) {
    if ((0, _indexOf.default)(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable no-unused-vars */


class TimeInput extends _baseComponent.default {
  constructor(props) {
    super(props);

    this.setRef = node => this.adapter.setCache('inputNode', node);

    this.handleClick = e => this.props.onClick(e);

    this.handleFocus = e => this.foundation.handleFocus(e);

    this.handleBlur = e => this.foundation.handleBlur(e);

    this.handleChange = v => this.foundation.handleChange(v);

    this.foundation = new _inputFoundation.default(this.adapter);
    this.state = {// focusing: props.focusOnOpen,
    };
  }

  componentDidMount() {
    super.componentDidMount();
    const {
      focusOnOpen,
      preventScroll
    } = this.props;

    if (focusOnOpen) {
      const requestAnimationFrame = window.requestAnimationFrame || _setTimeout2.default;
      requestAnimationFrame(() => {
        const inputNode = this.adapter.getCache('inputNode');

        if (inputNode) {
          inputNode.focus({
            preventScroll
          });
          inputNode.select();
        }
      });
    }
  }

  componentDidUpdate(prevProps) {
    const {
      timeStampValue
    } = this.props;

    if (this.isControlled('timeStampValue') && timeStampValue !== this.state.timeStampValue) {
      this.foundation.restoreCursor();
    }

    if (this.props.value !== prevProps.value) {
      this.foundation.restoreCursor();
    }
  }

  get adapter() {
    var _this = this;

    return (0, _assign.default)((0, _assign.default)({}, super.adapter), {
      notifyChange: function () {
        return _this.props.onChange(...arguments);
      },
      notifyFocus: function () {
        return _this.props.onFocus(...arguments);
      },
      notifyBlur: function () {
        return _this.props.onBlur(...arguments);
      }
    });
  }

  getInput() {
    const _a = this.props,
          {
      prefixCls,
      placeholder,
      inputReadOnly,
      onFocus,
      disabled,
      type,
      locale,
      localeCode,
      insetLabel,
      validateStatus,
      value,
      onChange,
      invalid,
      format,
      clearText,
      disabledHours,
      disabledMinutes,
      disabledSeconds,
      onEsc,
      defaultOpenValue,
      currentSelectPanel,
      focusOnOpen,
      timeStampValue,
      timeZone,
      defaultOpen,
      dateFnsLocale
    } = _a,
          rest = __rest(_a, ["prefixCls", "placeholder", "inputReadOnly", "onFocus", "disabled", "type", "locale", "localeCode", "insetLabel", "validateStatus", "value", "onChange", "invalid", "format", "clearText", "disabledHours", "disabledMinutes", "disabledSeconds", "onEsc", "defaultOpenValue", "currentSelectPanel", "focusOnOpen", "timeStampValue", "timeZone", "defaultOpen", "dateFnsLocale"]); // const { focusing } = this.state;


    const inputCls = (0, _classnames.default)("".concat(prefixCls, "-input"), {
      ["".concat(prefixCls, "-input-invalid")]: invalid,
      ["".concat(prefixCls, "-input-readonly")]: inputReadOnly
    });
    const mergeValidateStatus = invalid ? 'error' : validateStatus;
    return /*#__PURE__*/_react.default.createElement(_input.default, (0, _assign.default)({}, rest, {
      hideSuffix: true,
      className: inputCls,
      ref: this.setRef,
      value: value,
      placeholder: placeholder || locale.placeholder[type],
      readonly: Boolean(inputReadOnly),
      onChange: this.handleChange,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      suffix: /*#__PURE__*/_react.default.createElement(_semiIcons.IconClock, {
        onClick: this.handleClick
      }),
      validateStatus: mergeValidateStatus,
      disabled: disabled,
      insetLabel: insetLabel
    }));
  }

  render() {
    const {
      prefixCls
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-input-wrap")
    }, this.getInput());
  }

}

TimeInput.propTypes = {
  format: _propTypes.default.string,
  prefixCls: _propTypes.default.string,
  placeholder: _propTypes.default.string,
  clearText: _propTypes.default.string,
  inputReadOnly: _propTypes.default.bool,
  hourOptions: _propTypes.default.array,
  minuteOptions: _propTypes.default.array,
  secondOptions: _propTypes.default.array,
  disabledHours: _propTypes.default.func,
  disabledMinutes: _propTypes.default.func,
  disabledSeconds: _propTypes.default.func,
  onChange: _propTypes.default.func,
  onFocus: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  onEsc: _propTypes.default.func,
  onClick: _propTypes.default.func,
  defaultOpenValue: _propTypes.default.object,
  currentSelectPanel: _propTypes.default.string,
  focusOnOpen: _propTypes.default.bool,
  timeStampValue: _propTypes.default.any,
  locale: _propTypes.default.object,
  localeCode: _propTypes.default.string,
  insetLabel: _propTypes.default.node,
  validateStatus: _propTypes.default.string,
  preventScroll: _propTypes.default.bool
};
TimeInput.defaultProps = {
  inputReadOnly: false,
  onChange: _noop2.default,
  onBlur: _noop2.default,
  onFocus: _noop2.default,
  onClick: _noop2.default,
  disabledHours: _noop2.default,
  disabledMinutes: _noop2.default,
  disabledSeconds: _noop2.default,
  format: _constants.strings.DEFAULT_FORMAT
};
var _default = TimeInput;
exports.default = _default;