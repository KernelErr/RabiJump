import React from 'react';
import { TimePickerProps as BasePickerProps, BaseValueType } from './TimePicker';
import { ValidateStatus } from '../_base/baseComponent';
import { ScrollItemProps } from '../scrollList/scrollItem';
export { TimeInputProps } from './TimeInput';
export { TimePickerProps } from './TimePicker';
export { BaseValueType, ScrollItemProps, ValidateStatus };
export declare type LocalePickerProps = BasePickerProps;
export default class LocaleTimePicker extends React.PureComponent<LocalePickerProps> {
    static propTypes: {
        inputStyle: import("prop-types").Requireable<object>;
        preventScroll: import("prop-types").Requireable<boolean>;
        panelHeader: import("prop-types").Requireable<import("prop-types").ReactNodeLike>;
        panelFooter: import("prop-types").Requireable<import("prop-types").ReactNodeLike>;
        'aria-labelledby': import("prop-types").Requireable<string>;
        'aria-invalid': import("prop-types").Requireable<boolean>;
        'aria-errormessage': import("prop-types").Requireable<string>;
        'aria-describedby': import("prop-types").Requireable<string>;
        'aria-required': import("prop-types").Requireable<boolean>;
        prefixCls: import("prop-types").Requireable<string>;
        clearText: import("prop-types").Requireable<string>;
        value: import("prop-types").Requireable<string | number | string[] | number[] | Date | Date[]>;
        inputReadOnly: import("prop-types").Requireable<boolean>;
        disabled: import("prop-types").Requireable<boolean>;
        showClear: import("prop-types").Requireable<boolean>;
        defaultValue: import("prop-types").Requireable<string | number | string[] | number[] | Date | Date[]>;
        open: import("prop-types").Requireable<boolean>;
        defaultOpen: import("prop-types").Requireable<boolean>;
        onOpenChange: import("prop-types").Requireable<(...args: any[]) => any>;
        position: import("prop-types").Requireable<any>;
        getPopupContainer: import("prop-types").Requireable<(...args: any[]) => any>;
        placeholder: import("prop-types").Requireable<string>;
        format: import("prop-types").Requireable<string>;
        style: import("prop-types").Requireable<object>;
        className: import("prop-types").Requireable<string>;
        popupClassName: import("prop-types").Requireable<string>;
        popupStyle: import("prop-types").Requireable<object>;
        disabledHours: import("prop-types").Requireable<(...args: any[]) => any>;
        disabledMinutes: import("prop-types").Requireable<(...args: any[]) => any>;
        disabledSeconds: import("prop-types").Requireable<(...args: any[]) => any>;
        hideDisabledOptions: import("prop-types").Requireable<boolean>;
        onChange: import("prop-types").Requireable<(...args: any[]) => any>;
        use12Hours: import("prop-types").Requireable<boolean>;
        hourStep: import("prop-types").Requireable<number>;
        minuteStep: import("prop-types").Requireable<number>;
        secondStep: import("prop-types").Requireable<number>;
        focusOnOpen: import("prop-types").Requireable<boolean>;
        autoFocus: import("prop-types").Requireable<boolean>;
        size: import("prop-types").Requireable<"default" | "small" | "large">;
        panels: import("prop-types").Requireable<import("prop-types").InferProps<{
            panelHeader: import("prop-types").Requireable<import("prop-types").ReactNodeLike>;
            panelFooter: import("prop-types").Requireable<import("prop-types").ReactNodeLike>;
        }>[]>;
        onFocus: import("prop-types").Requireable<(...args: any[]) => any>;
        onBlur: import("prop-types").Requireable<(...args: any[]) => any>;
        locale: import("prop-types").Requireable<object>;
        localeCode: import("prop-types").Requireable<string>;
        dateFnsLocale: import("prop-types").Requireable<object>;
        zIndex: import("prop-types").Requireable<string | number>;
        insetLabel: import("prop-types").Requireable<import("prop-types").ReactNodeLike>;
        insetLabelId: import("prop-types").Requireable<string>;
        validateStatus: import("prop-types").Requireable<"default" | "error" | "warning" | "success">;
        type: import("prop-types").Requireable<import("./TimePicker").Type>;
        rangeSeparator: import("prop-types").Requireable<string>;
        triggerRender: import("prop-types").Requireable<(...args: any[]) => any>;
        timeZone: import("prop-types").Requireable<string | number>;
        scrollItemProps: import("prop-types").Requireable<object>;
        motion: import("prop-types").Requireable<boolean | object>;
        autoAdjustOverflow: import("prop-types").Requireable<boolean>;
    };
    static defaultProps: {
        autoAdjustOverflow: boolean;
        getPopupContainer: () => HTMLElement;
        showClear: boolean;
        zIndex: number;
        rangeSeparator: " ~ ";
        onOpenChange: (...args: any[]) => void;
        clearText: string;
        prefixCls: string;
        inputReadOnly: boolean;
        style: {};
        className: string;
        popupClassName: string;
        popupStyle: {
            left: string;
            top: string;
        };
        disabledHours: () => number[];
        disabledMinutes: () => number[];
        disabledSeconds: () => number[];
        hideDisabledOptions: boolean;
        onFocus: (...args: any[]) => void;
        onBlur: (...args: any[]) => void;
        onChange: (...args: any[]) => void;
        onChangeWithDateFirst: boolean;
        use12Hours: boolean;
        focusOnOpen: boolean;
        onKeyDown: (...args: any[]) => void;
        size: "default";
        type: "time";
    };
    render(): JSX.Element;
}
