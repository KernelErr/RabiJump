"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.cloneDeep = cloneDeep;
exports.getActiveElement = getActiveElement;
exports.getFocusableElements = getFocusableElements;
exports.getHighLightTextHTML = void 0;
exports.isNodeContainsFocus = isNodeContainsFocus;
exports.registerMediaQuery = exports.isSemiIcon = void 0;
exports.stopPropagation = stopPropagation;

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _from = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/from"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _set2 = _interopRequireDefault(require("lodash/set"));

var _cloneDeepWith2 = _interopRequireDefault(require("lodash/cloneDeepWith"));

var _react = _interopRequireDefault(require("react"));

var _warning = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/utils/warning"));

var _getHighlight = require("@douyinfe/semi-foundation/lib/cjs/utils/getHighlight");

var _dom = require("@douyinfe/semi-foundation/lib/cjs/utils/dom");

/* eslint-disable max-len */

/* argus-disable unPkgSensitiveInfo */

/**
 * stop propagation
 *
 * @param {React.MouseEvent<HTMLElement>} e React mouse event object
 * @param {boolean} noImmediate Skip stopping immediate propagation
 */
function stopPropagation(e, noImmediate) {
  if (e && typeof e.stopPropagation === 'function') {
    e.stopPropagation();
  }

  if (!noImmediate && e.nativeEvent && typeof e.nativeEvent.stopImmediatePropagation === 'function') {
    e.nativeEvent.stopImmediatePropagation();
  }
}
/**
 *
 * @param {any} value
 * @param {Function} customizer
 * @returns {any}
 * use in Table, Form, Navigation
 */


function cloneDeep(value, customizer) {
  return (0, _cloneDeepWith2.default)(value, v => {
    if (typeof customizer === 'function') {
      return customizer(v);
    }

    if (typeof v === 'function' || /*#__PURE__*/_react.default.isValidElement(v)) {
      return v;
    }

    if (Object.prototype.toString.call(v) === '[object Error]') {
      return v;
    }

    if ((0, _isArray.default)(v) && v.length === 0) {
      const keys = (0, _keys.default)(v);

      if (keys.length) {
        const newArray = [];
        (0, _forEach.default)(keys).call(keys, key => {
          (0, _set2.default)(newArray, key, v[key]);
        }); // internal-issues:887

        (0, _warning.default)((0, _get2.default)(process, 'env.NODE_ENV') !== 'production', "[Semi] You may use an out-of-bounds array. In some cases, your program may not behave as expected.\n                    The maximum length of an array is 4294967295.\n                    Please check whether the array subscript in your data exceeds the maximum value of the JS array subscript");
        return newArray;
      } else {
        return undefined;
      }
    }

    return undefined;
  });
}
/**
 * [getHighLightTextHTML description]
 *
 * @param   {string} sourceString [source content text]
 * @param   {Array<string>} searchWords [keywords to be highlighted]
 * @param   {object} option
 * @param   {true}      option.highlightTag [The tag wrapped by the highlighted content, mark is used by default]
 * @param   {true}      option.highlightClassName
 * @param   {true}      option.highlightStyle
 * @param   {boolean}   option.caseSensitive
 *
 * @return  {Array<object>}
 */


const getHighLightTextHTML = _ref => {
  let {
    sourceString = '',
    searchWords = [],
    option = {
      autoEscape: true,
      caseSensitive: false
    }
  } = _ref;
  const chunks = (0, _getHighlight.findAll)((0, _assign.default)({
    sourceString,
    searchWords
  }, option));
  const markEle = option.highlightTag || 'mark';
  const highlightClassName = option.highlightClassName || '';
  const highlightStyle = option.highlightStyle || {};
  return (0, _map.default)(chunks).call(chunks, (chunk, index) => {
    const {
      end,
      start,
      highlight
    } = chunk;
    const text = sourceString.substr(start, end - start);

    if (highlight) {
      return /*#__PURE__*/_react.default.createElement(markEle, {
        style: highlightStyle,
        className: highlightClassName,
        key: text + index
      }, text);
    } else {
      return text;
    }
  });
};
/**
 * register matchFn and unMatchFn callback while media query
 * @param {string} media media string
 * @param {object} param param object
 * @returns function
 */


exports.getHighLightTextHTML = getHighLightTextHTML;

const registerMediaQuery = (media, _ref2) => {
  let {
    match,
    unmatch,
    callInInit = true
  } = _ref2;

  if (typeof window !== 'undefined') {
    const mediaQueryList = window.matchMedia(media);

    function handlerMediaChange(e) {
      if (e.matches) {
        match && match(e);
      } else {
        unmatch && unmatch(e);
      }
    }

    callInInit && handlerMediaChange(mediaQueryList);

    if (Object.prototype.hasOwnProperty.call(mediaQueryList, 'addEventListener')) {
      mediaQueryList.addEventListener('change', handlerMediaChange);
      return () => mediaQueryList.removeEventListener('change', handlerMediaChange);
    }

    mediaQueryList.addListener(handlerMediaChange);
    return () => mediaQueryList.removeListener(handlerMediaChange);
  }

  return () => undefined;
};
/**
 * Determine whether the incoming element is a built-in icon
 * @param icon 元素
 * @returns boolean
 */


exports.registerMediaQuery = registerMediaQuery;

const isSemiIcon = icon => /*#__PURE__*/_react.default.isValidElement(icon) && (0, _get2.default)(icon.type, 'elementType') === 'Icon';

exports.isSemiIcon = isSemiIcon;

function getActiveElement() {
  return document ? document.activeElement : null;
}

function isNodeContainsFocus(node) {
  const activeElement = getActiveElement();
  return activeElement === node || node.contains(activeElement);
}

function getFocusableElements(node) {
  if (!(0, _dom.isHTMLElement)(node)) {
    return [];
  }

  const focusableSelectorsList = ["input:not([disabled]):not([tabindex='-1'])", "textarea:not([disabled]):not([tabindex='-1'])", "button:not([disabled]):not([tabindex='-1'])", "a[href]:not([tabindex='-1'])", "select:not([disabled]):not([tabindex='-1'])", "area[href]:not([tabindex='-1'])", "iframe:not([tabindex='-1'])", "object:not([tabindex='-1'])", "*[tabindex]:not([tabindex='-1'])", "*[contenteditable]:not([tabindex='-1'])"];
  const focusableSelectorsStr = focusableSelectorsList.join(','); // we are not filtered elements which are invisible

  const focusableElements = (0, _from.default)(node.querySelectorAll(focusableSelectorsStr));
  return focusableElements;
}