"use strict";

var _WeakMap = require("@babel/runtime-corejs3/core-js-stable/weak-map");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _isNull2 = _interopRequireDefault(require("lodash/isNull"));

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var _merge2 = _interopRequireDefault(require("lodash/merge"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/breadcrumb/constants");

var _itemFoundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/breadcrumb/itemFoundation"));

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

var _function = require("@douyinfe/semi-foundation/lib/cjs/utils/function");

var _breadContext = _interopRequireDefault(require("./bread-context"));

var _typography = _interopRequireDefault(require("../typography"));

function _getRequireWildcardCache(nodeInterop) { if (typeof _WeakMap !== "function") return null; var cacheBabelInterop = new _WeakMap(); var cacheNodeInterop = new _WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { _Object$defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const clsPrefix = _constants.cssClasses.PREFIX;

class BreadcrumbItem extends _baseComponent.default {
  constructor(props) {
    super(props);

    this.renderIcon = () => {
      const iconType = this.props.icon;
      const {
        compact
      } = this.context;
      const iconSize = compact ? 'small' : 'default';
      const className = "".concat(clsPrefix, "-item-icon");

      if ( /*#__PURE__*/_react.default.isValidElement(iconType)) {
        return /*#__PURE__*/_react.default.cloneElement(iconType, {
          className,
          size: iconSize
        });
      }

      return iconType;
    };

    this.getTooltipOpt = () => {
      const {
        showTooltip
      } = this.context;

      if (!showTooltip) {
        return {
          width: 150,
          ellipsisPos: 'end'
        };
      }

      const defaultOpts = {
        width: 150,
        ellipsisPos: 'end',
        opts: {
          autoAdjustOverflow: true,
          position: 'top'
        }
      };

      if (typeof showTooltip === 'object') {
        return (0, _merge2.default)(defaultOpts, showTooltip);
      }

      return defaultOpts;
    };

    this.getItemInfo = () => {
      let itemInfo = {};
      const {
        route,
        children,
        href
      } = this.props;
      const hasHref = !(0, _isUndefined2.default)(href) && !(0, _isNull2.default)(href);

      if (route) {
        itemInfo = route;
      } else {
        itemInfo.name = children;

        if (hasHref) {
          itemInfo.href = href;
        }
      }

      return itemInfo;
    };

    this.renderBreadItem = () => {
      var _context;

      const {
        children
      } = this.props;
      const {
        compact
      } = this.context;
      const showTooltip = this.getTooltipOpt();
      const icon = this.renderIcon();

      if (Boolean(children) && typeof children === 'string') {
        const {
          opts,
          ellipsisPos,
          width
        } = showTooltip;
        return /*#__PURE__*/_react.default.createElement(_react.Fragment, null, icon, /*#__PURE__*/_react.default.createElement("span", {
          className: "".concat(clsPrefix, "-item-title")
        }, /*#__PURE__*/_react.default.createElement(_typography.default.Text, {
          ellipsis: {
            showTooltip: opts ? {
              opts
            } : false,
            pos: ellipsisPos
          },
          // icon={this.renderIcon(icon)}
          style: {
            width
          },
          size: compact ? 'small' : 'normal'
        }, children)));
      }

      return /*#__PURE__*/_react.default.createElement(_react.Fragment, null, icon, children ? /*#__PURE__*/_react.default.createElement("span", {
        className: (0, _concat.default)(_context = "".concat(clsPrefix, "-item-title ")).call(_context, clsPrefix, "-item-title-inline")
      }, children) : null);
    };

    this.renderItem = () => {
      const {
        href,
        active,
        noLink
      } = this.props;
      const hasHref = href !== null && typeof href !== 'undefined';
      const itemCls = (0, _classnames.default)({
        ["".concat(clsPrefix, "-item")]: true,
        ["".concat(clsPrefix, "-item-active")]: active,
        ["".concat(clsPrefix, "-item-link")]: !noLink
      });
      const itemInner = this.renderBreadItem();
      const tag = active || !hasHref ? 'span' : 'a';
      const itemInfo = this.getItemInfo();
      return /*#__PURE__*/_react.default.createElement(tag, {
        className: itemCls,
        onClick: e => this.foundation.handleClick(itemInfo, e),
        href
      }, itemInner);
    };

    this.foundation = new _itemFoundation.default(this.adapter);
  }

  get adapter() {
    var _this = this;

    return (0, _assign.default)((0, _assign.default)({}, super.adapter), {
      notifyClick: function () {
        _this.props.onClick(...arguments);
      },
      notifyParent: function () {
        _this.context.onClick(...arguments);
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  render() {
    const {
      active,
      shouldRenderSeparator // children,

    } = this.props;
    const pageLabel = active ? {
      'aria-current': 'page'
    } : {};
    const item = this.renderItem();
    const separator = !active ? this.props.separator || /*#__PURE__*/_react.default.createElement("span", {
      className: "".concat(clsPrefix, "-separator")
    }, this.context.separator) : null;
    const wrapperCLs = (0, _classnames.default)({
      ["".concat(clsPrefix, "-item-wrap")]: true // [`${clsPrefix}-item-wrap-iconOnly`]: !!children && this.props.icon,

    });
    return /*#__PURE__*/_react.default.createElement("span", (0, _assign.default)({
      className: wrapperCLs
    }, pageLabel), item, shouldRenderSeparator && separator);
  }

}

exports.default = BreadcrumbItem;
BreadcrumbItem.isBreadcrumbItem = true;
BreadcrumbItem.contextType = _breadContext.default;
BreadcrumbItem.propTypes = {
  onClick: _propTypes.default.func,
  route: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string]),
  name: _propTypes.default.string,
  children: _propTypes.default.node,
  active: _propTypes.default.bool,
  shouldRenderSeparator: _propTypes.default.bool,
  icon: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  separator: _propTypes.default.node,
  noLink: _propTypes.default.bool
};
BreadcrumbItem.defaultProps = {
  onClick: _function.noop,
  shouldRenderSeparator: true
};