import React from 'react';
import PropTypes from 'prop-types';
import AvatarFoundation, { AvatarAdapter } from '@douyinfe/semi-foundation/lib/cjs/avatar/foundation';
import '@douyinfe/semi-foundation/lib/cjs/avatar/avatar.css';
import { noop } from '@douyinfe/semi-foundation/lib/cjs/utils/function';
import BaseComponent from '../_base/baseComponent';
import { AvatarProps } from './interface';
export * from './interface';
export interface AvatarState {
    isImgExist: boolean;
    hoverContent: React.ReactNode;
    focusVisible: boolean;
}
export default class Avatar extends BaseComponent<AvatarProps, AvatarState> {
    static defaultProps: {
        size: string;
        color: string;
        shape: string;
        onClick: typeof noop;
        onMouseEnter: typeof noop;
        onMouseLeave: typeof noop;
    };
    static propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        color: PropTypes.Requireable<string>;
        shape: PropTypes.Requireable<string>;
        size: PropTypes.Requireable<string>;
        hoverMask: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        className: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        imgAttr: PropTypes.Requireable<object>;
        src: PropTypes.Requireable<string>;
        srcSet: PropTypes.Requireable<string>;
        alt: PropTypes.Requireable<string>;
        onError: PropTypes.Requireable<(...args: any[]) => any>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
    };
    foundation: AvatarFoundation;
    constructor(props: AvatarProps);
    get adapter(): AvatarAdapter<AvatarProps, AvatarState>;
    componentDidMount(): void;
    componentDidUpdate(prevProps: AvatarProps): void;
    componentWillUnmount(): void;
    onEnter(e: React.MouseEvent): void;
    onLeave(e: React.MouseEvent): void;
    handleError(): void;
    handleKeyDown(event: any): void;
    handleFocusVisible: (event: React.FocusEvent) => void;
    handleBlur: (event: React.FocusEvent) => void;
    getContent: () => React.ReactNode;
    render(): JSX.Element;
}
