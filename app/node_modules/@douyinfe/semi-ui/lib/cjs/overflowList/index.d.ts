import React, { CSSProperties, ReactNode, MutableRefObject, RefCallback, Key, ReactElement } from 'react';
import BaseComponent from '../_base/baseComponent';
import PropTypes from 'prop-types';
import { ResizeEntry } from '../resizeObserver';
import { OverflowListAdapter } from '@douyinfe/semi-foundation/lib/cjs/overflowList/foundation';
import '@douyinfe/semi-foundation/lib/cjs/overflowList/overflowList.css';
declare const OverflowDirection: {
    NONE: number;
    GROW: number;
    SHRINK: number;
};
export { ReactIntersectionObserverProps } from './intersectionObserver';
export declare type OverflowItem = Record<string, any>;
export interface OverflowListProps {
    className?: string;
    collapseFrom?: 'start' | 'end';
    items?: Array<OverflowItem>;
    minVisibleItems?: number;
    onIntersect?: (res: {
        [key: string]: IntersectionObserverEntry;
    }) => void;
    onOverflow?: (overflowItems: Array<OverflowItem>) => void;
    overflowRenderer?: (overflowItems: Array<OverflowItem>) => ReactNode | ReactNode[];
    renderMode?: 'collapse' | 'scroll';
    style?: CSSProperties;
    threshold?: number;
    visibleItemRenderer?: (item: OverflowItem, index: number) => ReactElement;
    wrapperClassName?: string;
    wrapperStyle?: CSSProperties;
}
export interface OverflowListState {
    direction?: typeof OverflowDirection.GROW;
    lastOverflowCount?: number;
    overflow?: Array<OverflowItem>;
    visible?: Array<OverflowItem>;
    visibleState?: Map<string, boolean>;
    prevProps?: OverflowListProps;
}
declare class OverflowList extends BaseComponent<OverflowListProps, OverflowListState> {
    static defaultProps: {
        collapseFrom: string;
        minVisibleItems: number;
        overflowRenderer: () => ReactElement;
        renderMode: string;
        threshold: number;
        visibleItemRenderer: () => ReactElement;
    };
    static propTypes: {
        className: PropTypes.Requireable<string>;
        collapseFrom: PropTypes.Requireable<string>;
        direction: PropTypes.Requireable<string>;
        items: PropTypes.Requireable<any[]>;
        minVisibleItems: PropTypes.Requireable<number>;
        onIntersect: PropTypes.Requireable<(...args: any[]) => any>;
        onOverflow: PropTypes.Requireable<(...args: any[]) => any>;
        overflowRenderer: PropTypes.Requireable<(...args: any[]) => any>;
        renderMode: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        threshold: PropTypes.Requireable<number>;
        visibleItemRenderer: PropTypes.Requireable<(...args: any[]) => any>;
        wrapperClassName: PropTypes.Requireable<string>;
        wrapperStyle: PropTypes.Requireable<object>;
    };
    constructor(props: OverflowListProps);
    static getDerivedStateFromProps(props: OverflowListProps, prevState: OverflowListState): OverflowListState;
    get adapter(): OverflowListAdapter;
    itemRefs: Record<string, any>;
    scroller: HTMLDivElement;
    spacer: HTMLDivElement;
    previousWidths: Map<Element, number>;
    itemSizeMap: Map<string, any>;
    isScrollMode: () => boolean;
    componentDidMount(): void;
    shouldComponentUpdate(_nextProps: OverflowListProps, nextState: OverflowListState): boolean;
    componentDidUpdate(prevProps: OverflowListProps, prevState: OverflowListState): void;
    resize: (entries?: Array<ResizeEntry>) => void;
    repartition: (growing: boolean) => void;
    reintersect: (entries: Array<IntersectionObserverEntry>) => void;
    mergeRef: (ref: RefCallback<any> | MutableRefObject<any> | null, node: Element, key: Key) => void;
    renderOverflow: () => ReactNode | ReactNode[];
    renderItemList: () => React.DetailedReactHTMLElement<{
        className: string;
        style: React.CSSProperties;
    }, HTMLElement>;
    render(): ReactNode;
}
export default OverflowList;
