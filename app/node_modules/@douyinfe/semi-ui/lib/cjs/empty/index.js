"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/empty/constants");

require("@douyinfe/semi-foundation/lib/cjs/empty/empty.css");

var _typography = _interopRequireDefault(require("../typography"));

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

const prefixCls = _constants.cssClasses.PREFIX;

class Empty extends _baseComponent.default {
  constructor(props) {
    super(props);

    this.observe = mutationsList => {
      for (const mutation of mutationsList) {
        if (mutation.type === 'attributes' && mutation.attributeName === 'theme-mode') {
          this.updateMode();
        }
      }
    };

    this.updateMode = () => {
      const val = this.body.getAttribute('theme-mode');

      if (val !== this.state.mode) {
        this.setState({
          mode: val
        });
      }
    };

    this.state = {
      mode: null
    };
  }

  componentDidMount() {
    if (this.props.darkModeImage) {
      this.body = window.document.body;
      this.updateMode();
      const config = {
        attributes: true,
        childList: false,
        subtree: false
      };
      this.observer = new MutationObserver(this.observe);
      this.observer.observe(this.body, config);
    }
  }

  componentWillUnmount() {
    this.observer && this.observer.disconnect();
  }

  render() {
    var _context;

    const {
      className,
      image,
      description,
      style,
      title,
      imageStyle,
      children,
      layout,
      darkModeImage
    } = this.props;
    const alt = typeof description === 'string' ? description : 'empty';
    const imgSrc = this.state.mode === 'dark' && darkModeImage ? darkModeImage : image;
    let imageNode = null;

    if (typeof imgSrc === 'string') {
      imageNode = /*#__PURE__*/_react.default.createElement("img", {
        alt: alt,
        src: imgSrc
      });
    } else if (imgSrc && 'id' in imgSrc) {
      imageNode = /*#__PURE__*/_react.default.createElement("svg", {
        "aria-hidden": "true"
      }, /*#__PURE__*/_react.default.createElement("use", {
        xlinkHref: "#".concat(imgSrc.id)
      }));
    } else {
      imageNode = imgSrc;
    }

    const wrapperCls = (0, _classnames.default)(className, prefixCls, {
      [(0, _concat.default)(_context = "".concat(prefixCls, "-")).call(_context, layout)]: layout
    });
    const titleProps = imageNode ? {
      heading: 4
    } : {
      heading: 6,
      style: {
        fontWeight: 400
      }
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      className: wrapperCls,
      style: style
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-image"),
      style: imageStyle,
      "x-semi-prop": "image,darkModeImage"
    }, imageNode), /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-content")
    }, title ? /*#__PURE__*/_react.default.createElement(_typography.default.Title, (0, _assign.default)({}, titleProps, {
      className: "".concat(prefixCls, "-title"),
      "x-semi-prop": "title"
    }), title) : null, description ? /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-description"),
      "x-semi-prop": "description"
    }, description) : null, children ? /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-footer"),
      "x-semi-prop": "children"
    }, children) : null));
  }

}

exports.default = Empty;
Empty.defaultProps = {
  layout: 'vertical'
};