"use strict";

var _WeakMap = require("@babel/runtime-corejs3/core-js-stable/weak-map");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _iconButton = _interopRequireDefault(require("../iconButton"));

var _button = _interopRequireDefault(require("../button"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/datePicker/constants");

var _semiIcons = require("@douyinfe/semi-icons");

function _getRequireWildcardCache(nodeInterop) { if (typeof _WeakMap !== "function") return null; var cacheBabelInterop = new _WeakMap(); var cacheNodeInterop = new _WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { _Object$defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// import cls from 'classnames';
const prefixCls = _constants.cssClasses.NAVIGATION;

class Navigation extends _react.PureComponent {
  constructor(props) {
    super(props);
    this.navRef = /*#__PURE__*/_react.default.createRef();
  }

  render() {
    const {
      forwardRef,
      monthText,
      onMonthClick,
      onNextMonth,
      onPrevMonth,
      onPrevYear,
      onNextYear,
      density,
      shouldBimonthSwitch,
      panelType
    } = this.props;
    const btnTheme = 'borderless';
    const iconBtnSize = density === 'compact' ? 'default' : 'large';
    const btnNoHorizontalPadding = true;
    const buttonSize = density === 'compact' ? 'small' : 'default';
    const isLeftPanel = panelType === _constants.strings.PANEL_TYPE_LEFT;
    const isRightPanel = panelType === _constants.strings.PANEL_TYPE_RIGHT; // syncSwitchMonth and the current panel is the left

    const hiddenLeftPanelRightButtons = shouldBimonthSwitch && isLeftPanel; // syncSwitchMonth and the current panel is the right

    const hiddenRightPanelLeftButtons = shouldBimonthSwitch && isRightPanel; // `visibility: hidden` will keep the icon in position

    const leftButtonStyle = {};
    const rightButtonStyle = {};

    if (hiddenRightPanelLeftButtons) {
      leftButtonStyle.visibility = 'hidden';
    }

    if (hiddenLeftPanelRightButtons) {
      rightButtonStyle.visibility = 'hidden';
    }

    const ref = forwardRef || this.navRef;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: prefixCls,
      ref: ref
    }, /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      key: "double-chevron-left",
      "aria-label": "Previous year",
      icon: /*#__PURE__*/_react.default.createElement(_semiIcons.IconDoubleChevronLeft, {
        "aria-hidden": true,
        size: iconBtnSize
      }),
      size: buttonSize,
      theme: btnTheme,
      noHorizontalPadding: btnNoHorizontalPadding,
      onClick: onPrevYear,
      style: leftButtonStyle
    }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      key: "chevron-left",
      "aria-label": "Previous month",
      icon: /*#__PURE__*/_react.default.createElement(_semiIcons.IconChevronLeft, {
        "aria-hidden": true,
        size: iconBtnSize
      }),
      size: buttonSize,
      onClick: onPrevMonth,
      theme: btnTheme,
      noHorizontalPadding: btnNoHorizontalPadding,
      style: leftButtonStyle
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-month")
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      onClick: onMonthClick,
      theme: btnTheme,
      size: buttonSize
    }, /*#__PURE__*/_react.default.createElement("span", null, monthText))), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      key: "chevron-right",
      "aria-label": "Next month",
      icon: /*#__PURE__*/_react.default.createElement(_semiIcons.IconChevronRight, {
        "aria-hidden": true,
        size: iconBtnSize
      }),
      size: buttonSize,
      onClick: onNextMonth,
      theme: btnTheme,
      noHorizontalPadding: btnNoHorizontalPadding,
      style: rightButtonStyle
    }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      key: "double-chevron-right",
      "aria-label": "Next year",
      icon: /*#__PURE__*/_react.default.createElement(_semiIcons.IconDoubleChevronRight, {
        "aria-hidden": true,
        size: iconBtnSize
      }),
      size: buttonSize,
      theme: btnTheme,
      noHorizontalPadding: btnNoHorizontalPadding,
      onClick: onNextYear,
      style: rightButtonStyle
    }));
  }

}

exports.default = Navigation;
Navigation.propTypes = {
  monthText: _propTypes.default.string,
  density: _propTypes.default.string,
  onMonthClick: _propTypes.default.func,
  onNextMonth: _propTypes.default.func,
  onPrevMonth: _propTypes.default.func,
  onNextYear: _propTypes.default.func,
  onPrevYear: _propTypes.default.func,
  navPrev: _propTypes.default.node,
  navNext: _propTypes.default.node,
  // Whether to switch synchronously for two panels
  shouldBimonthSwitch: _propTypes.default.bool,
  // Panel type, divided into left panel and right panel
  panelType: _propTypes.default.oneOf([_constants.strings.PANEL_TYPE_LEFT, _constants.strings.PANEL_TYPE_RIGHT])
};
Navigation.defaultProps = {
  monthText: '',
  onMonthClick: _noop2.default,
  onNextMonth: _noop2.default,
  onPrevMonth: _noop2.default,
  onNextYear: _noop2.default,
  onPrevYear: _noop2.default
};