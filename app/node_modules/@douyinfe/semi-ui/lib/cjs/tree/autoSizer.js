"use strict";

var _WeakMap = require("@babel/runtime-corejs3/core-js-stable/weak-map");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/parse-int"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/tree/constants");

var _resizeObserver = _interopRequireDefault(require("../resizeObserver"));

function _getRequireWildcardCache(nodeInterop) { if (typeof _WeakMap !== "function") return null; var cacheBabelInterop = new _WeakMap(); var cacheNodeInterop = new _WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { _Object$defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const prefixcls = _constants.cssClasses.PREFIX;

class AutoSizer extends _react.PureComponent {
  constructor(props) {
    super(props);

    this._onResize = entries => {
      // observe parent node height
      const target = entries && entries[1] && entries[1].target;

      if (target) {
        const height = (0, _get2.default)(target, 'offsetHeight') || 0;
        const style = window.getComputedStyle(target) || {};
        const paddingTop = (0, _parseInt2.default)((0, _get2.default)(style, 'paddingTop'), 10) || 0;
        const paddingBottom = (0, _parseInt2.default)((0, _get2.default)(style, 'paddingBottom'), 10) || 0;
        const newHeight = height - paddingTop - paddingBottom;

        if (this.state.height !== newHeight) {
          this.setState({
            height: height - paddingTop - paddingBottom
          });
        }
      }
    };

    this.state = {
      height: this.props.defaultHeight || 0
    };
  }

  componentDidMount() {
    const {
      height
    } = this.state; // if height is a number, pass it directly to virtual-list

    if (typeof height === 'number') {
      return;
    }
  }

  render() {
    const {
      children,
      defaultWidth,
      defaultHeight
    } = this.props;
    const {
      height
    } = this.state; // Avoid rendering children before the initial measurements have been collected.
    // At best this would just be wasting cycles. Refer to https://github.com/bvaughn/react-virtualized-auto-sizer/

    let bailoutOnChildren = false;

    if (height === 0 || typeof height !== 'number') {
      bailoutOnChildren = true;
    }

    return /*#__PURE__*/_react.default.createElement(_resizeObserver.default, {
      observeParent: true,
      onResize: this._onResize
    }, /*#__PURE__*/_react.default.createElement("div", {
      style: {
        height: defaultHeight,
        overflow: 'visible'
      },
      className: "".concat(prefixcls, "-auto-wrapper")
    }, !bailoutOnChildren && children({
      height,
      width: defaultWidth
    })));
  }

}

exports.default = AutoSizer;
AutoSizer.propTypes = {
  defaultHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  defaultWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
};
AutoSizer.defaultProps = {
  defaultHeight: '100%',
  defaultWidth: '100%'
};