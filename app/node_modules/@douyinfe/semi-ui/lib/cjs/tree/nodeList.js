"use strict";

var _WeakMap = require("@babel/runtime-corejs3/core-js-stable/weak-map");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _splice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/splice"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _react = _interopRequireWildcard(require("react"));

var _treeContext = _interopRequireDefault(require("./treeContext"));

var _collapse = _interopRequireDefault(require("./collapse"));

function _getRequireWildcardCache(nodeInterop) { if (typeof _WeakMap !== "function") return null; var cacheBabelInterop = new _WeakMap(); var cacheNodeInterop = new _WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { _Object$defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const getTreeNodeKey = treeNode => {
  const {
    data
  } = treeNode;
  const {
    key
  } = data;
  return key;
};

class NodeList extends _react.PureComponent {
  constructor(props) {
    super(props);

    this.onMotionEnd = () => {
      typeof this.props.onMotionEnd === 'function' && this.props.onMotionEnd();
      this.setState({
        transitionNodes: []
      });
    };

    this.state = {
      transitionNodes: []
    };
  }

  static getDerivedStateFromProps(props, prevState) {
    var _context;

    const {
      flattenNodes = [],
      motionKeys,
      motionType,
      flattenList = []
    } = props;
    const hasChanged = !(0, _isEqual2.default)(prevState.cachedMotionKeys, motionKeys) || !(0, _isEqual2.default)((0, _map.default)(_context = prevState.cachedData).call(_context, i => i.key), (0, _map.default)(flattenNodes).call(flattenNodes, i => i.key));
    const motionArr = [...motionKeys];

    if (!hasChanged || !motionArr.length) {
      return null;
    }

    const transitionNodes = [];
    const transitionRange = [];
    let rangeStart = 0;
    let newState = {};
    const lookUpTarget = motionType === 'hide' && flattenList ? flattenList : flattenNodes;
    (0, _forEach.default)(lookUpTarget).call(lookUpTarget, (treeNode, ind) => {
      const nodeKey = getTreeNodeKey(treeNode);

      if (motionKeys.has(nodeKey)) {
        transitionRange.push(treeNode);

        if (nodeKey === motionArr[0]) {
          rangeStart = ind;
        }
      } else {
        transitionNodes.push(treeNode);
      }
    });
    (0, _splice.default)(transitionNodes).call(transitionNodes, rangeStart, 0, transitionRange);
    newState = {
      transitionNodes,
      cachedData: flattenNodes,
      cachedMotionKeys: motionKeys,
      cachedMotionType: motionType
    };
    return newState;
  }

  render() {
    const {
      flattenNodes,
      motionType,
      searchTargetIsDeep,
      renderTreeNode
    } = this.props;
    const {
      transitionNodes
    } = this.state;
    const mapData = transitionNodes.length && !searchTargetIsDeep ? transitionNodes : flattenNodes;
    const options = (0, _map.default)(mapData).call(mapData, treeNode => {
      const isMotionNode = (0, _isArray.default)(treeNode);

      if (isMotionNode && !treeNode.length) {
        return null;
      }

      if (isMotionNode && treeNode.length) {
        const nodeKey = getTreeNodeKey(treeNode[0]);
        return /*#__PURE__*/_react.default.createElement(_collapse.default, {
          motionType: motionType === 'show' ? 'enter' : 'leave',
          key: "motion-".concat(nodeKey),
          onMotionEnd: this.onMotionEnd,
          motion: Boolean(motionType)
        }, (0, _map.default)(treeNode).call(treeNode, node => renderTreeNode(node)));
      }

      return renderTreeNode(treeNode);
    });
    return options;
  }

}

exports.default = NodeList;
NodeList.contextType = _treeContext.default;