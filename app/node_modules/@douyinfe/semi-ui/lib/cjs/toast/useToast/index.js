"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = useToast;

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/map"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _map2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _react = _interopRequireDefault(require("react"));

var _uuid = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/utils/uuid"));

var _HookToast = _interopRequireDefault(require("./HookToast"));

// const ref = null;
// TODO: toast larger than N bars, automatic folding, allowing expansion, N configurable
const defaultOpts = {
  motion: true,
  zIndex: 1010,
  duration: 3
};

function usePatchElement() {
  const [elements, setElements] = _react.default.useState([]);

  function patchElement(element, config) {
    setElements(originElements => [{
      element,
      config
    }, ...originElements]);
    return id => {
      setElements(originElements => (0, _filter.default)(originElements).call(originElements, _ref => {
        let {
          config: configOfCurrentElement
        } = _ref;
        return configOfCurrentElement.id !== id;
      }));
    };
  }

  return [elements, patchElement];
}

function useToast() {
  const [elements, patchElement] = usePatchElement();
  const toastRef = new _map.default();

  const addToast = config => {
    const id = (0, _uuid.default)('semi_toast_');
    const mergeConfig = (0, _assign.default)((0, _assign.default)({}, config), {
      id
    }); // eslint-disable-next-line prefer-const

    let closeFunc;

    const ref = ele => {
      toastRef.set(id, ele);
    };

    const toast = /*#__PURE__*/_react.default.createElement(_HookToast.default, (0, _assign.default)({}, mergeConfig, {
      key: id,
      afterClose: instanceId => closeFunc(instanceId),
      ref: ref
    }));

    closeFunc = patchElement(toast, (0, _assign.default)({}, mergeConfig));
    return id;
  };

  const removeElement = id => {
    const ele = toastRef.get(id);
    ele && ele.close();
  };

  return [{
    success: config => addToast((0, _assign.default)((0, _assign.default)((0, _assign.default)({}, defaultOpts), config), {
      type: 'success'
    })),
    info: config => addToast((0, _assign.default)((0, _assign.default)((0, _assign.default)({}, defaultOpts), config), {
      type: 'info'
    })),
    error: config => addToast((0, _assign.default)((0, _assign.default)((0, _assign.default)({}, defaultOpts), config), {
      type: 'error'
    })),
    warning: config => addToast((0, _assign.default)((0, _assign.default)((0, _assign.default)({}, defaultOpts), config), {
      type: 'warning'
    })),
    open: config => addToast((0, _assign.default)((0, _assign.default)((0, _assign.default)({}, defaultOpts), config), {
      type: 'default'
    })),
    close: id => removeElement(id)
  }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _isArray.default)(elements) && elements.length ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _map2.default)(elements).call(elements, item => item.element)) : null)];
}