"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _bind = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/bind"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/anchor/constants");

var _linkFoundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/anchor/linkFoundation"));

var _anchorContext = _interopRequireDefault(require("./anchor-context"));

var _index = _interopRequireDefault(require("../typography/index"));

const prefixCls = _constants.cssClasses.PREFIX; // eslint-disable-next-line @typescript-eslint/ban-types

class Link extends _baseComponent.default {
  constructor(props) {
    var _context;

    super(props);

    this.renderTitle = () => {
      const {
        href,
        title,
        disabled = false
      } = this.props;
      const {
        activeLink,
        showTooltip,
        position,
        size
      } = this.context;
      const active = activeLink === href;
      const linkTitleCls = (0, _classnames.default)("".concat(prefixCls, "-link-tooltip"), {
        ["".concat(prefixCls, "-link-tooltip-small")]: size === 'small',
        ["".concat(prefixCls, "-link-tooltip-active")]: active,
        ["".concat(prefixCls, "-link-tooltip-disabled")]: disabled
      });
      const toolTipOpt = position ? {
        position
      } : {};

      if (showTooltip) {
        return /*#__PURE__*/_react.default.createElement(_index.default.Text, {
          size: size === 'default' ? 'normal' : 'small',
          ellipsis: {
            showTooltip: {
              opts: (0, _assign.default)({}, toolTipOpt)
            }
          },
          type: 'tertiary',
          className: linkTitleCls
        }, title);
      } else {
        return title;
      }
    };

    this.renderChildren = () => {
      const {
        activeLink,
        childMap
      } = this.context;
      const {
        href,
        children
      } = this.props;

      if (!this.context.autoCollapse) {
        return this.props.children;
      }

      return activeLink === href || childMap[href] && childMap[href].has(activeLink) ? children : null;
    };

    this.foundation = new _linkFoundation.default(this.adapter);
    this.handleClick = (0, _bind.default)(_context = this.handleClick).call(_context, this);
  }

  get adapter() {
    return (0, _assign.default)((0, _assign.default)({}, super.adapter), {
      addLink: href => {
        this.context.addLink(href);
      },
      removeLink: href => {
        this.context.removeLink(href);
      }
    });
  }

  handleAddLink() {
    this.foundation.handleAddLink();
  }

  handleRemoveLink() {
    this.foundation.handleRemoveLink();
  }

  handleUpdateLink(href, prevHref) {
    this.foundation.handleUpdateLink(href, prevHref);
  }

  handleClick(e) {
    const {
      disabled,
      href
    } = this.props;
    const {
      onClick
    } = this.context;
    !disabled && onClick(e, href);
  }

  componentDidMount() {
    this.handleAddLink();
  }

  componentDidUpdate(prevProps) {
    const prevHref = prevProps.href;
    const {
      href
    } = this.props;
    this.handleUpdateLink(href, prevHref);
  }

  componentWillUnmount() {
    this.handleRemoveLink();
  }

  render() {
    const {
      href,
      className,
      style,
      disabled = false,
      title
    } = this.props;
    const {
      activeLink,
      showTooltip
    } = this.context;
    const active = activeLink === href;
    const linkCls = (0, _classnames.default)("".concat(prefixCls, "-link"), className);
    const linkTitleCls = (0, _classnames.default)("".concat(prefixCls, "-link-title"), {
      ["".concat(prefixCls, "-link-title-active")]: active,
      ["".concat(prefixCls, "-link-title-disabled")]: disabled
    });
    const ariaProps = {
      'aria-disabled': disabled,
      'aria-label': href
    };

    if (active) {
      ariaProps['aria-details'] = 'active';
    }

    if (!showTooltip && typeof title === 'string') {
      ariaProps['title'] = title;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: linkCls,
      style: style
    }, /*#__PURE__*/_react.default.createElement("div", (0, _assign.default)({
      role: "link",
      tabIndex: 0
    }, ariaProps, {
      className: linkTitleCls,
      onClick: e => this.handleClick(e),
      onKeyPress: e => this.handleClick(e)
    }), this.renderTitle()), this.renderChildren());
  }

}

exports.default = Link;
Link.propTypes = {
  href: _propTypes.default.string,
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  className: _propTypes.default.string,
  style: _propTypes.default.object
};
Link.defaultProps = {
  href: '#',
  title: '',
  className: ''
};
Link.contextType = _anchorContext.default;