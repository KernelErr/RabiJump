import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Ellipsis, ShowTooltip, TypographyBaseSize, TypographyBaseType } from './interface';
import { CopyableConfig, LinkType } from './title';
import { BaseProps } from '../_base/baseComponent';
export interface BaseTypographyProps extends BaseProps {
    copyable?: CopyableConfig | boolean;
    delete?: boolean;
    disabled?: boolean;
    icon?: React.ReactNode;
    ellipsis?: Ellipsis | boolean;
    mark?: boolean;
    underline?: boolean;
    link?: LinkType;
    strong?: boolean;
    type?: TypographyBaseType;
    size?: TypographyBaseSize;
    style?: React.CSSProperties;
    className?: string;
    code?: boolean;
    children?: React.ReactNode;
    component?: React.ElementType;
    spacing?: string;
    heading?: string;
}
interface BaseTypographyState {
    editable: boolean;
    copied: boolean;
    isOverflowed: boolean;
    ellipsisContent: string;
    expanded: boolean;
    isTruncated: boolean;
    first: boolean;
    prevChildren: React.ReactNode;
}
export default class Base extends Component<BaseTypographyProps, BaseTypographyState> {
    static propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        copyable: PropTypes.Requireable<boolean | PropTypes.InferProps<{
            text: PropTypes.Requireable<string>;
            onCopy: PropTypes.Requireable<(...args: any[]) => any>;
            successTip: PropTypes.Requireable<PropTypes.ReactNodeLike>;
            copyTip: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        }>>;
        delete: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        ellipsis: PropTypes.Requireable<boolean | PropTypes.InferProps<{
            rows: PropTypes.Requireable<number>;
            expandable: PropTypes.Requireable<boolean>;
            expandText: PropTypes.Requireable<string>;
            onExpand: PropTypes.Requireable<(...args: any[]) => any>;
            suffix: PropTypes.Requireable<string>;
            showTooltip: PropTypes.Requireable<boolean | PropTypes.InferProps<{
                type: PropTypes.Requireable<string>;
                opts: PropTypes.Requireable<object>;
            }>>;
            collapsible: PropTypes.Requireable<boolean>;
            collapseText: PropTypes.Requireable<string>;
            pos: PropTypes.Requireable<string>;
        }>>;
        mark: PropTypes.Requireable<boolean>;
        underline: PropTypes.Requireable<boolean>;
        link: PropTypes.Requireable<boolean | object>;
        spacing: PropTypes.Requireable<"normal" | "extended">;
        strong: PropTypes.Requireable<boolean>;
        size: PropTypes.Requireable<"small" | "normal">;
        type: PropTypes.Requireable<"warning" | "success" | "primary" | "tertiary" | "secondary" | "danger" | "quaternary">;
        style: PropTypes.Requireable<object>;
        className: PropTypes.Requireable<string>;
        icon: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        heading: PropTypes.Requireable<string>;
        component: PropTypes.Requireable<string>;
    };
    static defaultProps: {
        children: React.ReactNode;
        copyable: boolean;
        delete: boolean;
        disabled: boolean;
        ellipsis: boolean;
        icon: string;
        mark: boolean;
        underline: boolean;
        strong: boolean;
        link: boolean;
        type: string;
        spacing: string;
        size: string;
        style: {};
        className: string;
    };
    wrapperRef: React.RefObject<any>;
    expandRef: React.RefObject<any>;
    copyRef: React.RefObject<any>;
    rafId: ReturnType<typeof requestAnimationFrame>;
    expandStr: string;
    collapseStr: string;
    constructor(props: BaseTypographyProps);
    componentDidMount(): void;
    static getDerivedStateFromProps(props: BaseTypographyProps, prevState: BaseTypographyState): Partial<BaseTypographyState>;
    componentDidUpdate(prevProps: BaseTypographyProps): void;
    componentWillUnmount(): void;
    onResize: () => void;
    canUseCSSEllipsis: () => boolean;
    /**
     * whether truncated
     *  rows < = 1 if there is overflow content, return true
     *  rows > 1 if there is overflow height, return true
     * @param {Number} rows
     * @returns {Boolean}
     */
    shouldTruncated: (rows: number) => boolean;
    showTooltip: () => boolean | ShowTooltip | {
        type: string;
        opts: {};
    };
    getEllipsisState(): boolean;
    /**
     * Triggered when the fold button is clicked to save the latest expanded state
     * @param {Event} e
     */
    toggleOverflow: (e: React.MouseEvent<HTMLAnchorElement>) => void;
    getEllipsisOpt: () => Ellipsis;
    renderExpandable: () => JSX.Element;
    /**
     * 获取文本的缩略class和style
     *
     * 截断类型：
     *  - CSS 截断，仅在 rows=1 且没有 expandable、pos、suffix 时生效
     *  - JS 截断，应对 CSS 无法阶段的场景
     * 相关变量
     *  props:
     *      - ellipsis:
     *          - rows
     *          - expandable
     *          - pos
     *          - suffix
     *  state:
     *      - isOverflowed，文本是否处于overflow状态
     *      - expanded，文本是否处于折叠状态
     *      - isTruncated，文本是否被js截断
     *
     * Get the abbreviated class and style of the text
     *
     * Truncation type:
     *  -CSS truncation, which only takes effect when rows = 1 and there is no expandable, pos, suffix
     *  -JS truncation, dealing with scenarios where CSS cannot stage
     * related variables
     *  props:
     *      -ellipsis:
     *          -rows
     *          -expandable
     *          -pos
     *          -suffix
     *  state:
     *      -isOverflowed, whether the text is in an overflow state
     *      -expanded, whether the text is in a collapsed state
     *      -isTruncated, whether the text is truncated by js
     * @returns {Object}
     */
    getEllipsisStyle: () => {
        ellipsisCls: string;
        ellipsisStyle: {
            WebkitLineClamp: number;
        } | {
            WebkitLineClamp?: undefined;
        };
    };
    renderEllipsisText: (opt: Ellipsis) => JSX.Element;
    renderOperations(): JSX.Element;
    renderCopy(): JSX.Element;
    renderIcon(): JSX.Element;
    renderContent(): JSX.Element;
    renderTipWrapper(): JSX.Element;
    render(): JSX.Element;
}
export {};
