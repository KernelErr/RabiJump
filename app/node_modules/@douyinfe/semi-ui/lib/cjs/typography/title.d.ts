import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { strings } from '@douyinfe/semi-foundation/lib/cjs/typography/constants';
import { Ellipsis, TypographyBaseType, OmitTypographyProps } from './interface';
import { ArrayElement } from '@douyinfe/semi-foundation/lib/cjs/utils/type';
declare type OmitTitleProps = OmitTypographyProps;
export interface CopyableConfig {
    content?: string;
    copyTip?: React.ReactNode;
    successTip?: React.ReactNode;
    onCopy?(e: React.MouseEvent, content: string, res: boolean): void;
}
export declare type LinkType = React.AnchorHTMLAttributes<HTMLAnchorElement> | boolean;
export interface TitleProps extends Omit<React.HTMLAttributes<HTMLHeadingElement>, OmitTitleProps> {
    className?: string;
    component?: React.ElementType;
    copyable?: CopyableConfig | boolean;
    delete?: boolean;
    disabled?: boolean;
    ellipsis?: Ellipsis | boolean;
    heading?: ArrayElement<typeof strings.HEADING>;
    link?: LinkType;
    mark?: boolean;
    strong?: boolean;
    style?: React.CSSProperties;
    type?: TypographyBaseType;
    underline?: boolean;
}
export default class Title extends PureComponent<TitleProps> {
    static propTypes: {
        copyable: PropTypes.Requireable<boolean | object>;
        delete: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        ellipsis: PropTypes.Requireable<boolean | object>;
        mark: PropTypes.Requireable<boolean>;
        link: PropTypes.Requireable<boolean | object>;
        underline: PropTypes.Requireable<boolean>;
        strong: PropTypes.Requireable<boolean>;
        type: PropTypes.Requireable<"warning" | "success" | "primary" | "tertiary" | "secondary" | "danger" | "quaternary">;
        heading: PropTypes.Requireable<1 | 2 | 3 | 4 | 5 | 6>;
        style: PropTypes.Requireable<object>;
        className: PropTypes.Requireable<string>;
        component: PropTypes.Requireable<string>;
    };
    static defaultProps: {
        copyable: boolean;
        delete: boolean;
        disabled: boolean;
        ellipsis: boolean;
        mark: boolean;
        underline: boolean;
        strong: boolean;
        link: boolean;
        type: string;
        heading: number;
        style: {};
        className: string;
    };
    render(): JSX.Element;
}
export {};
