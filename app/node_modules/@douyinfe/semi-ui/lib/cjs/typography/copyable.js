"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = exports.Copyable = void 0;

var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set-timeout"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _index = _interopRequireDefault(require("../tooltip/index"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/typography/constants");

var _copyTextToClipboard = _interopRequireDefault(require("copy-text-to-clipboard"));

var _classnames = _interopRequireDefault(require("classnames"));

var _function = require("@douyinfe/semi-foundation/lib/cjs/utils/function");

var _localeConsumer = _interopRequireDefault(require("../locale/localeConsumer"));

var _semiIcons = require("@douyinfe/semi-icons");

var _isEnterPress = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/utils/isEnterPress"));

const prefixCls = _constants.cssClasses.PREFIX;

class Copyable extends _react.default.PureComponent {
  constructor(props) {
    super(props);

    this.copy = e => {
      const {
        content,
        duration,
        onCopy
      } = this.props;
      const res = (0, _copyTextToClipboard.default)(content);
      onCopy && onCopy(e, content, res);
      this.setCopied(content, duration);
    };

    this.setCopied = (item, timer) => {
      this.setState({
        copied: true,
        item
      });
      this._timeId = (0, _setTimeout2.default)(() => {
        this.resetCopied();
      }, timer * 1000);
    };

    this.resetCopied = () => {
      if (this._timeId) {
        clearTimeout(this._timeId);
        this._timeId = null;
        this.setState({
          copied: false,
          item: ''
        });
      }
    };

    this.renderSuccessTip = () => {
      const {
        successTip
      } = this.props;

      if (typeof successTip !== 'undefined') {
        return successTip;
      }

      return /*#__PURE__*/_react.default.createElement(_localeConsumer.default, {
        componentName: "Typography"
      }, locale => /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_semiIcons.IconTick, null), locale.copied));
    };

    this.state = {
      copied: false,
      item: ''
    };
  }

  componentWillUnmount() {
    if (this._timeId) {
      clearTimeout(this._timeId);
      this._timeId = null;
    }
  }

  render() {
    const {
      style,
      className,
      forwardRef,
      copyTip
    } = this.props;
    const {
      copied
    } = this.state;
    const finalCls = (0, _classnames.default)(className, {
      ["".concat(prefixCls, "-action-copy")]: !copied,
      ["".concat(prefixCls, "-action-copied")]: copied
    });
    return /*#__PURE__*/_react.default.createElement(_localeConsumer.default, {
      componentName: "Typography"
    }, locale => /*#__PURE__*/_react.default.createElement("span", {
      style: (0, _assign.default)({
        marginLeft: '4px'
      }, style),
      className: finalCls,
      ref: forwardRef
    }, copied ? this.renderSuccessTip() : /*#__PURE__*/_react.default.createElement(_index.default, {
      content: typeof copyTip !== 'undefined' ? copyTip : locale.copy
    }, /*#__PURE__*/_react.default.createElement("a", {
      className: "".concat(prefixCls, "-action-copy-icon")
    }, /*#__PURE__*/_react.default.createElement(_semiIcons.IconCopy, {
      role: "button",
      tabIndex: 0,
      onClick: this.copy,
      onKeyPress: e => (0, _isEnterPress.default)(e) && this.copy(e)
    })))));
  }

}

exports.Copyable = Copyable;
Copyable.propTypes = {
  content: _propTypes.default.string,
  onCopy: _propTypes.default.func,
  successTip: _propTypes.default.node,
  copyTip: _propTypes.default.node,
  duration: _propTypes.default.number,
  style: _propTypes.default.object,
  className: _propTypes.default.string
};
Copyable.defaultProps = {
  content: '',
  onCopy: _function.noop,
  duration: 3,
  style: {},
  className: ''
};
var _default = Copyable;
exports.default = _default;