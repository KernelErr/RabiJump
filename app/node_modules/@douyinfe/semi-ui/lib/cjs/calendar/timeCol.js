"use strict";

var _WeakMap = require("@babel/runtime-corejs3/core-js-stable/weak-map");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/keys"));

var _splice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/splice"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _localeConsumer = _interopRequireDefault(require("../locale/localeConsumer"));

var _context3 = _interopRequireDefault(require("../locale/context"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/calendar/constants");

require("@douyinfe/semi-foundation/lib/cjs/calendar/calendar.css");

function _getRequireWildcardCache(nodeInterop) { if (typeof _WeakMap !== "function") return null; var cacheBabelInterop = new _WeakMap(); var cacheNodeInterop = new _WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { _Object$defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const prefixCls = "".concat(_constants.cssClasses.PREFIX, "-time");

class timeCol extends _react.PureComponent {
  formatTime(item) {
    const {
      renderTimeDisplay
    } = this.props;

    if (typeof renderTimeDisplay === 'function') {
      return renderTimeDisplay(item);
    } else {
      const replaceTime = (template, time) => template.replace('${time}', String(time));

      return /*#__PURE__*/_react.default.createElement(_localeConsumer.default, {
        componentName: "Calendar",
        key: "locale-".concat(item)
      }, locale => {
        let time = item < 12 ? replaceTime(locale.AM, item) : replaceTime(locale.PM, item - 12);

        if (item === 12) {
          time = replaceTime(locale.PM, item);
        }

        return time;
      });
    }
  }

  renderTime() {
    var _context, _context2;

    const {
      className
    } = this.props;
    const wrapperCls = (0, _classnames.default)(className, "".concat(prefixCls));
    const list = (0, _map.default)(_context = [...(0, _keys.default)(_context2 = Array(24)).call(_context2)]).call(_context, item => this.formatTime(item));
    (0, _splice.default)(list).call(list, 0, 1, '');
    const inner = (0, _map.default)(list).call(list, (item, index) => /*#__PURE__*/_react.default.createElement("li", {
      key: "time-".concat(index),
      className: "".concat(prefixCls, "-item")
    }, /*#__PURE__*/_react.default.createElement("span", null, item)));
    return /*#__PURE__*/_react.default.createElement("div", {
      className: wrapperCls
    }, /*#__PURE__*/_react.default.createElement("ul", {
      className: "".concat(prefixCls, "-items")
    }, inner));
  }

  render() {
    const time = this.renderTime();
    return time;
  }

}

exports.default = timeCol;
timeCol.propTypes = {
  className: _propTypes.default.string,
  renderTimeDisplay: _propTypes.default.func
};
timeCol.contextType = _context3.default;