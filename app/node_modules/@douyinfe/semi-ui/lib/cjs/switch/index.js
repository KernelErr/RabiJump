"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _foundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/switch/foundation"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/switch/constants");

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

require("@douyinfe/semi-foundation/lib/cjs/switch/switch.css");

var _spin = _interopRequireDefault(require("../spin"));

/* eslint-disable max-len */
class Switch extends _baseComponent.default {
  constructor(props) {
    super(props);

    this.handleFocusVisible = event => {
      this.foundation.handleFocusVisible(event);
    };

    this.handleBlur = event => {
      this.foundation.handleBlur();
    };

    this.state = {
      nativeControlChecked: false,
      nativeControlDisabled: false,
      focusVisible: false
    };
    this.switchRef = /*#__PURE__*/_react.default.createRef();
    this.foundation = new _foundation.default(this.adapter);
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentDidUpdate(prevProps) {
    if (this.props.checked !== prevProps.checked) {
      this.foundation.setChecked(this.props.checked);
    }

    if (this.props.disabled !== prevProps.disabled) {
      this.foundation.setDisabled(this.props.disabled);
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  get adapter() {
    return (0, _assign.default)((0, _assign.default)({}, super.adapter), {
      setNativeControlChecked: nativeControlChecked => {
        this.setState({
          nativeControlChecked
        });
      },
      setNativeControlDisabled: nativeControlDisabled => {
        this.setState({
          nativeControlDisabled
        });
      },
      setFocusVisible: focusVisible => {
        this.setState({
          focusVisible
        });
      },
      notifyChange: (checked, e) => {
        this.props.onChange(checked, e);
      }
    });
  }

  render() {
    const {
      nativeControlChecked,
      nativeControlDisabled,
      focusVisible
    } = this.state;
    const {
      className,
      style,
      onMouseEnter,
      onMouseLeave,
      size,
      checkedText,
      uncheckedText,
      loading,
      id
    } = this.props;
    const wrapperCls = (0, _classnames.default)(className, {
      [_constants.cssClasses.PREFIX]: true,
      [_constants.cssClasses.CHECKED]: nativeControlChecked,
      [_constants.cssClasses.DISABLED]: nativeControlDisabled,
      [_constants.cssClasses.LARGE]: size === 'large',
      [_constants.cssClasses.SMALL]: size === 'small',
      [_constants.cssClasses.LOADING]: loading,
      [_constants.cssClasses.FOCUS]: focusVisible
    });
    const switchProps = {
      type: 'checkbox',
      className: _constants.cssClasses.NATIVE_CONTROL,
      disabled: nativeControlDisabled || loading,
      checked: nativeControlChecked || false
    };
    const showCheckedText = checkedText && nativeControlChecked && size !== 'small';
    const showUncheckedText = uncheckedText && !nativeControlChecked && size !== 'small';
    return /*#__PURE__*/_react.default.createElement("div", {
      className: wrapperCls,
      style: style,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    }, loading ? /*#__PURE__*/_react.default.createElement(_spin.default, {
      wrapperClassName: _constants.cssClasses.LOADING_SPIN,
      size: size === 'default' ? 'middle' : size
    }) : /*#__PURE__*/_react.default.createElement("div", {
      className: _constants.cssClasses.KNOB,
      "aria-hidden": true
    }), showCheckedText ? /*#__PURE__*/_react.default.createElement("div", {
      className: _constants.cssClasses.CHECKED_TEXT,
      "x-semi-prop": "checkedText"
    }, checkedText) : null, showUncheckedText ? /*#__PURE__*/_react.default.createElement("div", {
      className: _constants.cssClasses.UNCHECKED_TEXT,
      "x-semi-prop": "uncheckedText"
    }, uncheckedText) : null, /*#__PURE__*/_react.default.createElement("input", (0, _assign.default)({}, switchProps, {
      ref: this.switchRef,
      id: id,
      role: "switch",
      "aria-checked": nativeControlChecked,
      "aria-invalid": this.props['aria-invalid'],
      "aria-errormessage": this.props['aria-errormessage'],
      "aria-label": this.props['aria-label'],
      "aria-labelledby": this.props['aria-labelledby'],
      "aria-describedby": this.props['aria-describedby'],
      "aria-disabled": this.props['disabled'],
      onChange: e => this.foundation.handleChange(e.target.checked, e),
      onFocus: e => this.handleFocusVisible(e),
      onBlur: e => this.handleBlur(e)
    })));
  }

}

Switch.propTypes = {
  'aria-label': _propTypes.default.string,
  'aria-labelledby': _propTypes.default.string,
  'aria-invalid': _propTypes.default.bool,
  'aria-errormessage': _propTypes.default.string,
  'aria-describedby': _propTypes.default.string,
  className: _propTypes.default.string,
  checked: _propTypes.default.bool,
  checkedText: _propTypes.default.node,
  defaultChecked: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  loading: _propTypes.default.bool,
  onChange: _propTypes.default.func,
  onMouseEnter: _propTypes.default.func,
  onMouseLeave: _propTypes.default.func,
  style: _propTypes.default.object,
  size: _propTypes.default.oneOf(_constants.strings.SIZE_MAP),
  uncheckedText: _propTypes.default.node,
  id: _propTypes.default.string
};
Switch.defaultProps = {
  disabled: false,
  className: '',
  onChange: _noop2.default,
  loading: false,
  onMouseEnter: _noop2.default,
  onMouseLeave: _noop2.default,
  size: 'default'
};
var _default = Switch;
exports.default = _default;