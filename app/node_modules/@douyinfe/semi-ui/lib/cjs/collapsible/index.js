"use strict";

var _WeakMap = require("@babel/runtime-corejs3/core-js-stable/weak-map");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _semiAnimationReact = require("@douyinfe/semi-animation-react");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/collapsible/constants");

var _getMotionObjFromProps = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/utils/getMotionObjFromProps"));

function _getRequireWildcardCache(nodeInterop) { if (typeof _WeakMap !== "function") return null; var cacheBabelInterop = new _WeakMap(); var cacheNodeInterop = new _WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { _Object$defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// @ts-ignore  currently no type definition for @douyinfe/semi-animation-react
const ease = 'cubicBezier(.25,.1,.25,1)';

const Collapsible = props => {
  const {
    motion,
    children,
    isOpen,
    duration,
    keepDOM,
    collapseHeight,
    style,
    className,
    reCalcKey,
    id
  } = props;
  const ref = (0, _react.useRef)(null);
  const [maxHeight, setMaxHeight] = (0, _react.useState)(0);
  const [open, setOpen] = (0, _react.useState)(props.isOpen);
  const [isFirst, setIsFirst] = (0, _react.useState)(true);
  const [transitionImmediate, setTransitionImmediate] = (0, _react.useState)(open && isFirst);
  const [left, setLeft] = (0, _react.useState)(!props.isOpen);

  if (isOpen !== open) {
    setOpen(isOpen);

    if (isFirst) {
      setIsFirst(false);
      setTransitionImmediate(false);
    }

    isOpen && setLeft(!isOpen);
  }

  const setHeight = (0, _react.useCallback)(node => {
    const currHeight = node && node.scrollHeight;

    if (currHeight && maxHeight !== currHeight) {
      setMaxHeight(currHeight);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [left, reCalcKey, maxHeight]);

  const resetHeight = () => {
    ref.current.style.maxHeight = 'none';
  };

  const formatStyle = _ref => {
    let {
      maxHeight: maxHeightInTransitionStyle
    } = _ref;
    return {
      maxHeight: maxHeightInTransitionStyle
    };
  };

  const shouldKeepDOM = () => keepDOM || collapseHeight !== 0;

  const defaultMaxHeight = (0, _react.useMemo)(() => {
    return isOpen || !shouldKeepDOM() && !motion ? 'none' : collapseHeight;
  }, [collapseHeight, motion, isOpen, shouldKeepDOM]);

  const renderChildren = transitionStyle => {
    const transition = transitionStyle && typeof transitionStyle === 'object' ? formatStyle(transitionStyle) : {};
    const wrapperstyle = (0, _assign.default)((0, _assign.default)({
      overflow: 'hidden',
      maxHeight: defaultMaxHeight
    }, style), transition);

    if (isFirst) {
      wrapperstyle.maxHeight = defaultMaxHeight;
    }

    const wrapperCls = (0, _classnames.default)("".concat(_constants.cssClasses.PREFIX, "-wrapper"), className);
    return /*#__PURE__*/_react.default.createElement("div", {
      style: wrapperstyle,
      className: wrapperCls,
      ref: ref
    }, /*#__PURE__*/_react.default.createElement("div", {
      ref: setHeight,
      style: {
        overflow: 'hidden'
      },
      id: id,
      "x-semi-prop": "children"
    }, children));
  };

  const didLeave = () => {
    setLeft(true);
    !shouldKeepDOM() && setMaxHeight(collapseHeight);
  };

  const renderContent = () => {
    if (left && !shouldKeepDOM()) {
      return null;
    }

    const mergedMotion = (0, _getMotionObjFromProps.default)({
      didEnter: resetHeight,
      didLeave,
      motion
    });
    return /*#__PURE__*/_react.default.createElement(_semiAnimationReact.Transition, (0, _assign.default)({
      state: isOpen ? 'enter' : 'leave',
      immediate: transitionImmediate,
      from: {
        maxHeight: 0
      },
      enter: {
        maxHeight: {
          val: maxHeight,
          easing: ease,
          duration
        }
      },
      leave: {
        maxHeight: {
          val: collapseHeight,
          easing: ease,
          duration
        }
      }
    }, mergedMotion), transitionStyle => renderChildren(motion ? transitionStyle : null));
  };

  return renderContent();
};

Collapsible.propType = {
  motion: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func, _propTypes.default.object]),
  children: _propTypes.default.node,
  isOpen: _propTypes.default.bool,
  duration: _propTypes.default.number,
  keepDOM: _propTypes.default.bool,
  collapseHeight: _propTypes.default.number,
  style: _propTypes.default.object,
  className: _propTypes.default.string,
  reCalcKey: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
};
Collapsible.defaultProps = {
  isOpen: false,
  duration: 250,
  motion: true,
  keepDOM: false,
  collapseHeight: 0
};
var _default = Collapsible;
exports.default = _default;