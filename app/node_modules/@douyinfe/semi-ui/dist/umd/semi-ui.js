(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("react-dom"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "react-dom"], factory);
	else if(typeof exports === 'object')
		exports["SemiUI"] = factory(require("react"), require("react-dom"));
	else
		root["SemiUI"] = factory(root["React"], root["ReactDOM"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE_cDcd__, __WEBPACK_EXTERNAL_MODULE_faye__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "+7q0":
/***/ (function(module, exports, __webpack_require__) {

var constant = __webpack_require__("eN33"),
    defineProperty = __webpack_require__("Pz+s"),
    identity = __webpack_require__("zWgn");

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;


/***/ }),

/***/ "+8d6":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("X+IB");

/***/ }),

/***/ "+DnP":
/***/ (function(module, exports, __webpack_require__) {

var arrayFilter = __webpack_require__("W0vE"),
    baseFilter = __webpack_require__("sjzV"),
    baseIteratee = __webpack_require__("S3pA"),
    isArray = __webpack_require__("wxYD");

/**
 * Iterates over elements of `collection`, returning an array of all elements
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * **Note:** Unlike `_.remove`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.reject
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * _.filter(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, { 'age': 36, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.filter(users, 'active');
 * // => objects for ['barney']
 *
 * // Combining several predicates using `_.overEvery` or `_.overSome`.
 * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
 * // => objects for ['fred', 'barney']
 */
function filter(collection, predicate) {
  var func = isArray(collection) ? arrayFilter : baseFilter;
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = filter;


/***/ }),

/***/ "+H1N":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var IS_PURE = __webpack_require__("Vl7J");
var IS_NODE = __webpack_require__("Cg7V");
var global = __webpack_require__("oNh+");
var call = __webpack_require__("9fDQ");
var redefine = __webpack_require__("yX36");
var redefineAll = __webpack_require__("mKZK");
var setPrototypeOf = __webpack_require__("wXON");
var setToStringTag = __webpack_require__("CtlU");
var setSpecies = __webpack_require__("KTPp");
var aCallable = __webpack_require__("JXge");
var isCallable = __webpack_require__("btm2");
var isObject = __webpack_require__("H3h0");
var anInstance = __webpack_require__("QjcZ");
var speciesConstructor = __webpack_require__("y4BW");
var task = __webpack_require__("moKl").set;
var microtask = __webpack_require__("swpL");
var hostReportErrors = __webpack_require__("S1ba");
var perform = __webpack_require__("cDK5");
var Queue = __webpack_require__("Yosg");
var InternalStateModule = __webpack_require__("WRdu");
var NativePromiseConstructor = __webpack_require__("Mzla");
var PromiseConstructorDetection = __webpack_require__("jIvz");
var newPromiseCapabilityModule = __webpack_require__("FfgP");

var PROMISE = 'Promise';
var FORCED_PROMISE_CONSTRUCTOR = PromiseConstructorDetection.CONSTRUCTOR;
var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
var NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;
var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
var setInternalState = InternalStateModule.set;
var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
var PromiseConstructor = NativePromiseConstructor;
var PromisePrototype = NativePromisePrototype;
var TypeError = global.TypeError;
var document = global.document;
var process = global.process;
var newPromiseCapability = newPromiseCapabilityModule.f;
var newGenericPromiseCapability = newPromiseCapability;

var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;

var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && isCallable(then = it.then) ? then : false;
};

var callReaction = function (reaction, state) {
  var value = state.value;
  var ok = state.state == FULFILLED;
  var handler = ok ? reaction.ok : reaction.fail;
  var resolve = reaction.resolve;
  var reject = reaction.reject;
  var domain = reaction.domain;
  var result, then, exited;
  try {
    if (handler) {
      if (!ok) {
        if (state.rejection === UNHANDLED) onHandleUnhandled(state);
        state.rejection = HANDLED;
      }
      if (handler === true) result = value;
      else {
        if (domain) domain.enter();
        result = handler(value); // can throw
        if (domain) {
          domain.exit();
          exited = true;
        }
      }
      if (result === reaction.promise) {
        reject(TypeError('Promise-chain cycle'));
      } else if (then = isThenable(result)) {
        call(then, result, resolve, reject);
      } else resolve(result);
    } else reject(value);
  } catch (error) {
    if (domain && !exited) domain.exit();
    reject(error);
  }
};

var notify = function (state, isReject) {
  if (state.notified) return;
  state.notified = true;
  microtask(function () {
    var reactions = state.reactions;
    var reaction;
    while (reaction = reactions.get()) {
      callReaction(reaction, state);
    }
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(state);
  });
};

var dispatchEvent = function (name, promise, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document.createEvent('Event');
    event.promise = promise;
    event.reason = reason;
    event.initEvent(name, false, true);
    global.dispatchEvent(event);
  } else event = { promise: promise, reason: reason };
  if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global['on' + name])) handler(event);
  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};

var onUnhandled = function (state) {
  call(task, global, function () {
    var promise = state.facade;
    var value = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform(function () {
        if (IS_NODE) {
          process.emit('unhandledRejection', value, promise);
        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};

var isUnhandled = function (state) {
  return state.rejection !== HANDLED && !state.parent;
};

var onHandleUnhandled = function (state) {
  call(task, global, function () {
    var promise = state.facade;
    if (IS_NODE) {
      process.emit('rejectionHandled', promise);
    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
  });
};

var bind = function (fn, state, unwrap) {
  return function (value) {
    fn(state, value, unwrap);
  };
};

var internalReject = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value;
  state.state = REJECTED;
  notify(state, true);
};

var internalResolve = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (state.facade === value) throw TypeError("Promise can't be resolved itself");
    var then = isThenable(value);
    if (then) {
      microtask(function () {
        var wrapper = { done: false };
        try {
          call(then, value,
            bind(internalResolve, wrapper, state),
            bind(internalReject, wrapper, state)
          );
        } catch (error) {
          internalReject(wrapper, error, state);
        }
      });
    } else {
      state.value = value;
      state.state = FULFILLED;
      notify(state, false);
    }
  } catch (error) {
    internalReject({ done: false }, error, state);
  }
};

// constructor polyfill
if (FORCED_PROMISE_CONSTRUCTOR) {
  // 25.4.3.1 Promise(executor)
  PromiseConstructor = function Promise(executor) {
    anInstance(this, PromisePrototype);
    aCallable(executor);
    call(Internal, this);
    var state = getInternalPromiseState(this);
    try {
      executor(bind(internalResolve, state), bind(internalReject, state));
    } catch (error) {
      internalReject(state, error);
    }
  };

  PromisePrototype = PromiseConstructor.prototype;

  // eslint-disable-next-line no-unused-vars -- required for `.length`
  Internal = function Promise(executor) {
    setInternalState(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: new Queue(),
      rejection: false,
      state: PENDING,
      value: undefined
    });
  };

  Internal.prototype = redefineAll(PromisePrototype, {
    // `Promise.prototype.then` method
    // https://tc39.es/ecma262/#sec-promise.prototype.then
    // eslint-disable-next-line unicorn/no-thenable -- safe
    then: function then(onFulfilled, onRejected) {
      var state = getInternalPromiseState(this);
      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
      state.parent = true;
      reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
      reaction.fail = isCallable(onRejected) && onRejected;
      reaction.domain = IS_NODE ? process.domain : undefined;
      if (state.state == PENDING) state.reactions.add(reaction);
      else microtask(function () {
        callReaction(reaction, state);
      });
      return reaction.promise;
    }
  });

  OwnPromiseCapability = function () {
    var promise = new Internal();
    var state = getInternalPromiseState(promise);
    this.promise = promise;
    this.resolve = bind(internalResolve, state);
    this.reject = bind(internalReject, state);
  };

  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === PromiseConstructor || C === PromiseWrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };

  if (!IS_PURE && isCallable(NativePromiseConstructor) && NativePromisePrototype !== Object.prototype) {
    nativeThen = NativePromisePrototype.then;

    if (!NATIVE_PROMISE_SUBCLASSING) {
      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
      redefine(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
        var that = this;
        return new PromiseConstructor(function (resolve, reject) {
          call(nativeThen, that, resolve, reject);
        }).then(onFulfilled, onRejected);
      // https://github.com/zloirock/core-js/issues/640
      }, { unsafe: true });
    }

    // make `.constructor === Promise` work for native promise-based APIs
    try {
      delete NativePromisePrototype.constructor;
    } catch (error) { /* empty */ }

    // make `instanceof Promise` work for native promise-based APIs
    if (setPrototypeOf) {
      setPrototypeOf(NativePromisePrototype, PromisePrototype);
    }
  }
}

$({ global: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
  Promise: PromiseConstructor
});

setToStringTag(PromiseConstructor, PROMISE, false, true);
setSpecies(PROMISE);


/***/ }),

/***/ "+N5y":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var $map = __webpack_require__("zDWZ").map;
var arrayMethodHasSpeciesSupport = __webpack_require__("nB+7");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');

// `Array.prototype.map` method
// https://tc39.es/ecma262/#sec-array.prototype.map
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "+Pc/":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("91A9");
__webpack_require__("p++B");
var path = __webpack_require__("j0PW");

module.exports = path.Array.from;


/***/ }),

/***/ "+Vyf":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("bfxQ");

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.findIndex;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.findIndex) ? method : own;
};


/***/ }),

/***/ "+cYm":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.cloneElement = cloneElement;

var _react = _interopRequireDefault(__webpack_require__("cDcd"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// React.addons.cloneWithProps look-alike that merges style & className.
function cloneElement(element, props) {
  if (props.style && element.props.style) {
    props.style = _objectSpread(_objectSpread({}, element.props.style), props.style);
  }

  if (props.className && element.props.className) {
    props.className = element.props.className + " " + props.className;
  }

  return /*#__PURE__*/_react.default.cloneElement(element, props);
}

/***/ }),

/***/ "+f76":
/***/ (function(module, exports, __webpack_require__) {

var baseIsDate = __webpack_require__("pPU8"),
    baseUnary = __webpack_require__("SU8Q"),
    nodeUtil = __webpack_require__("T6vp");

/* Node.js helper references. */
var nodeIsDate = nodeUtil && nodeUtil.isDate;

/**
 * Checks if `value` is classified as a `Date` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
 * @example
 *
 * _.isDate(new Date);
 * // => true
 *
 * _.isDate('Mon April 23 2012');
 * // => false
 */
var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

module.exports = isDate;


/***/ }),

/***/ "+fUG":
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__("5pfJ");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),

/***/ "+fwG":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__("oNh+");
var uncurryThis = __webpack_require__("XQ/X");
var aCallable = __webpack_require__("JXge");
var isObject = __webpack_require__("H3h0");
var hasOwn = __webpack_require__("PIIU");
var arraySlice = __webpack_require__("B3mq");
var NATIVE_BIND = __webpack_require__("Oksd");

var Function = global.Function;
var concat = uncurryThis([].concat);
var join = uncurryThis([].join);
var factories = {};

var construct = function (C, argsLength, args) {
  if (!hasOwn(factories, argsLength)) {
    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
    factories[argsLength] = Function('C,a', 'return new C(' + join(list, ',') + ')');
  } return factories[argsLength](C, args);
};

// `Function.prototype.bind` method implementation
// https://tc39.es/ecma262/#sec-function.prototype.bind
module.exports = NATIVE_BIND ? Function.bind : function bind(that /* , ...args */) {
  var F = aCallable(this);
  var Prototype = F.prototype;
  var partArgs = arraySlice(arguments, 1);
  var boundFunction = function bound(/* args... */) {
    var args = concat(partArgs, arraySlice(arguments));
    return this instanceof boundFunction ? construct(F, args.length, args) : F.apply(that, args);
  };
  if (isObject(Prototype)) boundFunction.prototype = Prototype;
  return boundFunction;
};


/***/ }),

/***/ "+gCC":
/***/ (function(module, exports, __webpack_require__) {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__("v2Fx");


/***/ }),

/***/ "+n+S":
/***/ (function(module, exports, __webpack_require__) {

var baseSlice = __webpack_require__("0Ocv"),
    isIterateeCall = __webpack_require__("R5u7"),
    toInteger = __webpack_require__("m2YG");

/**
 * Creates a slice of `array` from `start` up to, but not including, `end`.
 *
 * **Note:** This method is used instead of
 * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
 * returned.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function slice(array, start, end) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return [];
  }
  if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
    start = 0;
    end = length;
  }
  else {
    start = start == null ? 0 : toInteger(start);
    end = end === undefined ? length : toInteger(end);
  }
  return baseSlice(array, start, end);
}

module.exports = slice;


/***/ }),

/***/ "+ooz":
/***/ (function(module, exports, __webpack_require__) {

var listCacheClear = __webpack_require__("8Zrg"),
    listCacheDelete = __webpack_require__("kwr2"),
    listCacheGet = __webpack_require__("5VYK"),
    listCacheHas = __webpack_require__("Coc+"),
    listCacheSet = __webpack_require__("LzM7");

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),

/***/ "+tCn":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("tQYX");

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;


/***/ }),

/***/ "+yel":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = _interopRequireDefault(__webpack_require__("pnws"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* |                                |
 * |  d  | Day of month                   |  D  |                                |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  m  | Minute                         |  M  | Month                          |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  y  | Year (abs)                     |  Y  |                                |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 */
var formatters = {
  // Year
  y: function (date, token) {
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return (0, _index.default)(token === 'yy' ? year % 100 : year, token.length);
  },
  // Month
  M: function (date, token) {
    var month = date.getUTCMonth();
    return token === 'M' ? String(month + 1) : (0, _index.default)(month + 1, 2);
  },
  // Day of the month
  d: function (date, token) {
    return (0, _index.default)(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function (date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';

    switch (token) {
      case 'a':
      case 'aa':
        return dayPeriodEnumValue.toUpperCase();

      case 'aaa':
        return dayPeriodEnumValue;

      case 'aaaaa':
        return dayPeriodEnumValue[0];

      case 'aaaa':
      default:
        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
    }
  },
  // Hour [1-12]
  h: function (date, token) {
    return (0, _index.default)(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function (date, token) {
    return (0, _index.default)(date.getUTCHours(), token.length);
  },
  // Minute
  m: function (date, token) {
    return (0, _index.default)(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function (date, token) {
    return (0, _index.default)(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function (date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return (0, _index.default)(fractionalSeconds, token.length);
  }
};
var _default = formatters;
exports.default = _default;
module.exports = exports.default;

/***/ }),

/***/ "//nZ":
/***/ (function(module, exports, __webpack_require__) {

var basePick = __webpack_require__("QwI6"),
    flatRest = __webpack_require__("cH1A");

/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
var pick = flatRest(function(object, paths) {
  return object == null ? {} : basePick(object, paths);
});

module.exports = pick;


/***/ }),

/***/ "/30y":
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__("Dhk8"),
    isObjectLike = __webpack_require__("tLQN");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;


/***/ }),

/***/ "/3sO":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("zC4U");

/***/ }),

/***/ "/6So":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("LTNl");
var iteratorClose = __webpack_require__("PnYF");

// call something on iterator step with safe closing on error
module.exports = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  } catch (error) {
    iteratorClose(iterator, 'throw', error);
  }
};


/***/ }),

/***/ "/E8B":
/***/ (function(module, exports, __webpack_require__) {

// TODO: Remove from `core-js@4`
__webpack_require__("ixFa");


/***/ }),

/***/ "/L0j":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__("XU0c");
var isCallable = __webpack_require__("btm2");
var create = __webpack_require__("By9b");
var getPrototypeOf = __webpack_require__("K1oV");
var redefine = __webpack_require__("yX36");
var wellKnownSymbol = __webpack_require__("HVcX");
var IS_PURE = __webpack_require__("Vl7J");

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

// `%IteratorPrototype%` object
// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

/* eslint-disable es-x/no-array-prototype-keys -- safe */
if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function () {
  var test = {};
  // FF44- legacy iterators case
  return IteratorPrototype[ITERATOR].call(test) !== test;
});

if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};
else if (IS_PURE) IteratorPrototype = create(IteratorPrototype);

// `%IteratorPrototype%[@@iterator]()` method
// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
if (!isCallable(IteratorPrototype[ITERATOR])) {
  redefine(IteratorPrototype, ITERATOR, function () {
    return this;
  });
}

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};


/***/ }),

/***/ "/PBC":
/***/ (function(module, exports) {



/***/ }),

/***/ "/UTG":
/***/ (function(module, exports) {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;


/***/ }),

/***/ "/e7o":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("K50e");

module.exports = parent;


/***/ }),

/***/ "/f7G":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("oydA");

/***/ }),

/***/ "/iLo":
/***/ (function(module, exports, __webpack_require__) {

var baseIsSet = __webpack_require__("6I2w"),
    baseUnary = __webpack_require__("SU8Q"),
    nodeUtil = __webpack_require__("T6vp");

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

module.exports = isSet;


/***/ }),

/***/ "/rC8":
/***/ (function(module, exports) {



/***/ }),

/***/ "/t7F":
/***/ (function(module, exports) {



/***/ }),

/***/ "/urY":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cloneObject;

var _index = _interopRequireDefault(__webpack_require__("t+Lu"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function cloneObject(dirtyObject) {
  return (0, _index.default)({}, dirtyObject);
}

module.exports = exports.default;

/***/ }),

/***/ "/wCD":
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__("TAtK");

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;


/***/ }),

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("qVkA");


/***/ }),

/***/ "0+aC":
/***/ (function(module, exports, __webpack_require__) {

var memoize = __webpack_require__("pFSi");

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;


/***/ }),

/***/ "0/JC":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var isObject = __webpack_require__("H3h0");

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),

/***/ "02Gn":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("bLuP");

module.exports = parent;


/***/ }),

/***/ "095C":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var collection = __webpack_require__("vjRO");
var collectionStrong = __webpack_require__("krtk");

// `Set` constructor
// https://tc39.es/ecma262/#sec-set-objects
collection('Set', function (init) {
  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);


/***/ }),

/***/ "0J6L":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return append; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return prepend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return convertDOMRectToObject; });
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_instance_reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("r3cb");
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_instance_reduce__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs3_core_js_stable_instance_reduce__WEBPACK_IMPORTED_MODULE_0__);


/**
 *
 * @param {HTMLElement} parentNode
 * @param  {...HTMLElement} nodes
 *
 * @param {HTMLElement}
 */

function append(parentNode) {
  for (var _len = arguments.length, nodes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    nodes[_key - 1] = arguments[_key];
  }

  for (const node of nodes) {
    parentNode.appendChild(node);
  }

  return parentNode;
}
/**
 *
 * @param {HTMLElement} parentNode
 * @param  {...HTMLElement} nodes
 *
 * @param {HTMLElement}
 */

function prepend(parentNode) {
  for (var _len2 = arguments.length, nodes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    nodes[_key2 - 1] = arguments[_key2];
  }

  if (parentNode.children && parentNode.children.length) {
    const firstNode = parentNode.children[0];

    for (const node of nodes) {
      parentNode.insertBefore(node, firstNode);
    }
  } else {
    append(parentNode, ...nodes);
  }

  return parentNode;
}
/**
 *
 * @param {DOMRect} domRect
 * @returns {object|undefined}
 */

function convertDOMRectToObject(domRect) {
  if (domRect && typeof domRect === 'object') {
    if (typeof domRect.toJSON === 'function') {
      return domRect.toJSON();
    } else {
      const keys = ['left', 'top', 'right', 'bottom', 'width', 'height'];
      return _babel_runtime_corejs3_core_js_stable_instance_reduce__WEBPACK_IMPORTED_MODULE_0___default()(keys).call(keys, (obj, key) => {
        obj[key] = domRect[key];
        return obj;
      }, {});
    }
  }

  return undefined;
}


/***/ }),

/***/ "0Ocv":
/***/ (function(module, exports) {

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

module.exports = baseSlice;


/***/ }),

/***/ "0Ss3":
/***/ (function(module, exports) {

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;


/***/ }),

/***/ "0bGP":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("YPef");

module.exports = parent;


/***/ }),

/***/ "0fLf":
/***/ (function(module, exports) {



/***/ }),

/***/ "0fQ6":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("XQ/X");
var hasOwn = __webpack_require__("PIIU");
var toIndexedObject = __webpack_require__("VcbD");
var indexOf = __webpack_require__("A551").indexOf;
var hiddenKeys = __webpack_require__("lyTg");

var push = uncurryThis([].push);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn(O, key = names[i++])) {
    ~indexOf(result, key) || push(result, key);
  }
  return result;
};


/***/ }),

/***/ "0foe":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;


/***/ }),

/***/ "0i+n":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("dwwW");

module.exports = parent;


/***/ }),

/***/ "0iyY":
/***/ (function(module, exports, __webpack_require__) {

var baseValues = __webpack_require__("SJvO"),
    keys = __webpack_require__("BlJA");

/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values(object) {
  return object == null ? [] : baseValues(object, keys(object));
}

module.exports = values;


/***/ }),

/***/ "0q0E":
/***/ (function(module, exports, __webpack_require__) {

var arraySpeciesConstructor = __webpack_require__("XRsG");

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
};


/***/ }),

/***/ "15pl":
/***/ (function(module, exports, __webpack_require__) {

var baseTimes = __webpack_require__("2ZvR"),
    castFunction = __webpack_require__("D49j"),
    toInteger = __webpack_require__("m2YG");

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Invokes the iteratee `n` times, returning an array of the results of
 * each invocation. The iteratee is invoked with one argument; (index).
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 * @example
 *
 * _.times(3, String);
 * // => ['0', '1', '2']
 *
 *  _.times(4, _.constant(0));
 * // => [0, 0, 0, 0]
 */
function times(n, iteratee) {
  n = toInteger(n);
  if (n < 1 || n > MAX_SAFE_INTEGER) {
    return [];
  }
  var index = MAX_ARRAY_LENGTH,
      length = nativeMin(n, MAX_ARRAY_LENGTH);

  iteratee = castFunction(iteratee);
  n -= MAX_ARRAY_LENGTH;

  var result = baseTimes(length, iteratee);
  while (++index < n) {
    iteratee(index);
  }
  return result;
}

module.exports = times;


/***/ }),

/***/ "1EDM":
/***/ (function(module, exports, __webpack_require__) {

var baseProperty = __webpack_require__("EI7Z"),
    basePropertyDeep = __webpack_require__("CEyS"),
    isKey = __webpack_require__("i7nn"),
    toKey = __webpack_require__("Ypsa");

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;


/***/ }),

/***/ "1FCb":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toPropertyKey = __webpack_require__("jcKH");
var definePropertyModule = __webpack_require__("JliG");
var createPropertyDescriptor = __webpack_require__("96pp");

module.exports = function (object, key, value) {
  var propertyKey = toPropertyKey(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};


/***/ }),

/***/ "1Y7c":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("r89b");

module.exports = parent;


/***/ }),

/***/ "1aYn":
/***/ (function(module, exports, __webpack_require__) {

var baseIteratee = __webpack_require__("S3pA"),
    isArrayLike = __webpack_require__("9y2L"),
    keys = __webpack_require__("BlJA");

/**
 * Creates a `_.find` or `_.findLast` function.
 *
 * @private
 * @param {Function} findIndexFunc The function to find the collection index.
 * @returns {Function} Returns the new find function.
 */
function createFind(findIndexFunc) {
  return function(collection, predicate, fromIndex) {
    var iterable = Object(collection);
    if (!isArrayLike(collection)) {
      var iteratee = baseIteratee(predicate, 3);
      collection = keys(collection);
      predicate = function(key) { return iteratee(iterable[key], key, iterable); };
    }
    var index = findIndexFunc(collection, predicate, fromIndex);
    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
  };
}

module.exports = createFind;


/***/ }),

/***/ "1d3+":
/***/ (function(module, exports) {



/***/ }),

/***/ "1hU5":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var FREEZING = __webpack_require__("byqU");
var fails = __webpack_require__("XU0c");
var isObject = __webpack_require__("H3h0");
var onFreeze = __webpack_require__("N8Lc").onFreeze;

// eslint-disable-next-line es-x/no-object-freeze -- safe
var $freeze = Object.freeze;
var FAILS_ON_PRIMITIVES = fails(function () { $freeze(1); });

// `Object.freeze` method
// https://tc39.es/ecma262/#sec-object.freeze
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
  freeze: function freeze(it) {
    return $freeze && isObject(it) ? $freeze(onFreeze(it)) : it;
  }
});


/***/ }),

/***/ "1l5A":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("sybH");

/***/ }),

/***/ "1mr4":
/***/ (function(module, exports, __webpack_require__) {

var baseHas = __webpack_require__("SJov"),
    hasPath = __webpack_require__("z+TE");

/**
 * Checks if `path` is a direct property of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = { 'a': { 'b': 2 } };
 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.has(object, 'a');
 * // => true
 *
 * _.has(object, 'a.b');
 * // => true
 *
 * _.has(object, ['a', 'b']);
 * // => true
 *
 * _.has(other, 'a');
 * // => false
 */
function has(object, path) {
  return object != null && hasPath(object, path, baseHas);
}

module.exports = has;


/***/ }),

/***/ "1xil":
/***/ (function(module, exports, __webpack_require__) {

var baseFlatten = __webpack_require__("YpBQ");

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}

module.exports = flatten;


/***/ }),

/***/ "223E":
/***/ (function(module, exports) {



/***/ }),

/***/ "2Fbm":
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__("5pfJ");

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),

/***/ "2HTi":
/***/ (function(module, exports) {



/***/ }),

/***/ "2K/m":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("XQ/X");
var requireObjectCoercible = __webpack_require__("j0cD");
var toString = __webpack_require__("Xrs4");
var whitespaces = __webpack_require__("3sPw");

var replace = uncurryThis(''.replace);
var whitespace = '[' + whitespaces + ']';
var ltrim = RegExp('^' + whitespace + whitespace + '*');
var rtrim = RegExp(whitespace + whitespace + '*$');

// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
var createMethod = function (TYPE) {
  return function ($this) {
    var string = toString(requireObjectCoercible($this));
    if (TYPE & 1) string = replace(string, ltrim, '');
    if (TYPE & 2) string = replace(string, rtrim, '');
    return string;
  };
};

module.exports = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
  start: createMethod(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimend
  end: createMethod(2),
  // `String.prototype.trim` method
  // https://tc39.es/ecma262/#sec-string.prototype.trim
  trim: createMethod(3)
};


/***/ }),

/***/ "2ZvR":
/***/ (function(module, exports) {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;


/***/ }),

/***/ "2gRl":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("LiiN");
var path = __webpack_require__("j0PW");

module.exports = path.Number.isNaN;


/***/ }),

/***/ "2q8g":
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__("Dhk8"),
    isObject = __webpack_require__("tQYX");

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),

/***/ "2srY":
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__("w2Tz");

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;


/***/ }),

/***/ "2wsP":
/***/ (function(module, exports, __webpack_require__) {

var baseProperty = __webpack_require__("EI7Z");

/**
 * Gets the size of an ASCII `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */
var asciiSize = baseProperty('length');

module.exports = asciiSize;


/***/ }),

/***/ "33JB":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var $findIndex = __webpack_require__("zDWZ").findIndex;
var addToUnscopables = __webpack_require__("Uh/D");

var FIND_INDEX = 'findIndex';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });

// `Array.prototype.findIndex` method
// https://tc39.es/ecma262/#sec-array.prototype.findindex
$({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND_INDEX);


/***/ }),

/***/ "3KBa":
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__("IBsm");

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),

/***/ "3Mt6":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var call = __webpack_require__("9fDQ");
var isObject = __webpack_require__("H3h0");
var isSymbol = __webpack_require__("au4q");
var getMethod = __webpack_require__("fEH3");
var ordinaryToPrimitive = __webpack_require__("S0cN");
var wellKnownSymbol = __webpack_require__("HVcX");

var TypeError = global.TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};


/***/ }),

/***/ "3Qlq":
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;


/***/ }),

/***/ "3ajY":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__("IBsm"),
    stubFalse = __webpack_require__("DjCF");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("aYSr")(module)))

/***/ }),

/***/ "3al0":
/***/ (function(module, exports) {



/***/ }),

/***/ "3sPw":
/***/ (function(module, exports) {

// a string of all valid unicode whitespaces
module.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' +
  '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),

/***/ "4+Vk":
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__("vxC8"),
    root = __webpack_require__("IBsm");

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;


/***/ }),

/***/ "4/36":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("+Vyf");

module.exports = parent;


/***/ }),

/***/ "4/ik":
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__("+ooz"),
    Map = __webpack_require__("qeCs"),
    MapCache = __webpack_require__("hyzI");

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;


/***/ }),

/***/ "48fh":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("JFT0");

/***/ }),

/***/ "4ScB":
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__("LtXa"),
    keysIn = __webpack_require__("zH+d");

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

module.exports = toPlainObject;


/***/ }),

/***/ "4a5I":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("HVcX");
var Iterators = __webpack_require__("m/wn");

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};


/***/ }),

/***/ "4kHG":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("HApn");

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.fill;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.fill) ? method : own;
};


/***/ }),

/***/ "4p/L":
/***/ (function(module, exports) {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),

/***/ "4uJK":
/***/ (function(module, exports, __webpack_require__) {

var isPrototype = __webpack_require__("CbIe"),
    nativeKeys = __webpack_require__("OtNC");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;


/***/ }),

/***/ "525y":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable es-x/no-array-prototype-lastindexof -- safe */
var apply = __webpack_require__("Hj5v");
var toIndexedObject = __webpack_require__("VcbD");
var toIntegerOrInfinity = __webpack_require__("Kkai");
var lengthOfArrayLike = __webpack_require__("SO8O");
var arrayMethodIsStrict = __webpack_require__("nSCK");

var min = Math.min;
var $lastIndexOf = [].lastIndexOf;
var NEGATIVE_ZERO = !!$lastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
var STRICT_METHOD = arrayMethodIsStrict('lastIndexOf');
var FORCED = NEGATIVE_ZERO || !STRICT_METHOD;

// `Array.prototype.lastIndexOf` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.lastindexof
module.exports = FORCED ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
  // convert -0 to +0
  if (NEGATIVE_ZERO) return apply($lastIndexOf, this, arguments) || 0;
  var O = toIndexedObject(this);
  var length = lengthOfArrayLike(O);
  var index = length - 1;
  if (arguments.length > 1) index = min(index, toIntegerOrInfinity(arguments[1]));
  if (index < 0) index = length + index;
  for (;index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;
  return -1;
} : $lastIndexOf;


/***/ }),

/***/ "58fF":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $forEach = __webpack_require__("zDWZ").forEach;
var arrayMethodIsStrict = __webpack_require__("nSCK");

var STRICT_METHOD = arrayMethodIsStrict('forEach');

// `Array.prototype.forEach` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.foreach
module.exports = !STRICT_METHOD ? function forEach(callbackfn /* , thisArg */) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
// eslint-disable-next-line es-x/no-array-prototype-foreach -- safe
} : [].forEach;


/***/ }),

/***/ "5ILo":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("z/8x");

module.exports = parent;


/***/ }),

/***/ "5IZX":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("U33I");
var path = __webpack_require__("j0PW");

module.exports = path.Object.values;


/***/ }),

/***/ "5Jdw":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("XU0c");

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});


/***/ }),

/***/ "5TyG":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable es-x/no-symbol -- required for testing */
var V8_VERSION = __webpack_require__("Qb90");
var fails = __webpack_require__("XU0c");

// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol();
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});


/***/ }),

/***/ "5VYK":
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__("6QIk");

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),

/***/ "5YqL":
/***/ (function(module, exports) {



/***/ }),

/***/ "5nGS":
/***/ (function(module, exports) {



/***/ }),

/***/ "5nKN":
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__("2q8g"),
    isMasked = __webpack_require__("9vbJ"),
    isObject = __webpack_require__("tQYX"),
    toSource = __webpack_require__("c18h");

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),

/***/ "5pfJ":
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__("vxC8");

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),

/***/ "64g+":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("5Jdw");
var fails = __webpack_require__("XU0c");
var createElement = __webpack_require__("0/JC");

// Thanks to IE8 for its funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),

/***/ "6I2w":
/***/ (function(module, exports, __webpack_require__) {

var getTag = __webpack_require__("kkM+"),
    isObjectLike = __webpack_require__("tLQN");

/** `Object#toString` result references. */
var setTag = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return isObjectLike(value) && getTag(value) == setTag;
}

module.exports = baseIsSet;


/***/ }),

/***/ "6OdC":
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqual = __webpack_require__("NYSw");

/**
 * This method is like `_.isEqual` except that it accepts `customizer` which
 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
 * are handled by the method instead. The `customizer` is invoked with up to
 * six arguments: (objValue, othValue [, index|key, object, other, stack]).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * function isGreeting(value) {
 *   return /^h(?:i|ello)$/.test(value);
 * }
 *
 * function customizer(objValue, othValue) {
 *   if (isGreeting(objValue) && isGreeting(othValue)) {
 *     return true;
 *   }
 * }
 *
 * var array = ['hello', 'goodbye'];
 * var other = ['hi', 'goodbye'];
 *
 * _.isEqualWith(array, other, customizer);
 * // => true
 */
function isEqualWith(value, other, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  var result = customizer ? customizer(value, other) : undefined;
  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
}

module.exports = isEqualWith;


/***/ }),

/***/ "6QIk":
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__("pPzx");

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),

/***/ "6R5o":
/***/ (function(module, exports, __webpack_require__) {

var createFind = __webpack_require__("1aYn"),
    findIndex = __webpack_require__("FllU");

/**
 * Iterates over elements of `collection`, returning the first element
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36, 'active': true },
 *   { 'user': 'fred',    'age': 40, 'active': false },
 *   { 'user': 'pebbles', 'age': 1,  'active': true }
 * ];
 *
 * _.find(users, function(o) { return o.age < 40; });
 * // => object for 'barney'
 *
 * // The `_.matches` iteratee shorthand.
 * _.find(users, { 'age': 1, 'active': true });
 * // => object for 'pebbles'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.find(users, ['active', false]);
 * // => object for 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.find(users, 'active');
 * // => object for 'barney'
 */
var find = createFind(findIndex);

module.exports = find;


/***/ }),

/***/ "6Rtw":
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__("EAGB");

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;


/***/ }),

/***/ "6UKJ":
/***/ (function(module, exports) {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),

/***/ "6Uo2":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("ZqhF");

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.every;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.every) ? method : own;
};


/***/ }),

/***/ "6XIJ":
/***/ (function(module, exports) {

/** Used to match a single whitespace character. */
var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

module.exports = trimmedEndIndex;


/***/ }),

/***/ "6iX0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = log;

/*eslint no-console:0*/
function log() {
  var _console;

  if (undefined) (_console = console).log.apply(_console, arguments);
}

/***/ }),

/***/ "6rtJ":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.resizableProps = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__("aWzz"));

var _reactDraggable = __webpack_require__("j6Rw");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var resizableProps = {
  /*
  * Restricts resizing to a particular axis (default: 'both')
  * 'both' - allows resizing by width or height
  * 'x' - only allows the width to be changed
  * 'y' - only allows the height to be changed
  * 'none' - disables resizing altogether
  * */
  axis: _propTypes.default.oneOf(['both', 'x', 'y', 'none']),
  className: _propTypes.default.string,

  /*
  * Require that one and only one child be present.
  * */
  children: _propTypes.default.element.isRequired,

  /*
  * These will be passed wholesale to react-draggable's DraggableCore
  * */
  draggableOpts: _propTypes.default.shape({
    allowAnyClick: _propTypes.default.bool,
    cancel: _propTypes.default.string,
    children: _propTypes.default.node,
    disabled: _propTypes.default.bool,
    enableUserSelectHack: _propTypes.default.bool,
    offsetParent: _propTypes.default.node,
    grid: _propTypes.default.arrayOf(_propTypes.default.number),
    handle: _propTypes.default.string,
    nodeRef: _propTypes.default.object,
    onStart: _propTypes.default.func,
    onDrag: _propTypes.default.func,
    onStop: _propTypes.default.func,
    onMouseDown: _propTypes.default.func,
    scale: _propTypes.default.number
  }),

  /*
  * Initial height
  * */
  height: _propTypes.default.number.isRequired,

  /*
  * Customize cursor resize handle
  * */
  handle: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /*
  * If you change this, be sure to update your css
  * */
  handleSize: _propTypes.default.arrayOf(_propTypes.default.number),
  lockAspectRatio: _propTypes.default.bool,

  /*
  * Max X & Y measure
  * */
  maxConstraints: _propTypes.default.arrayOf(_propTypes.default.number),

  /*
  * Min X & Y measure
  * */
  minConstraints: _propTypes.default.arrayOf(_propTypes.default.number),

  /*
  * Called on stop resize event
  * */
  onResizeStop: _propTypes.default.func,

  /*
  * Called on start resize event
  * */
  onResizeStart: _propTypes.default.func,

  /*
  * Called on resize event
  * */
  onResize: _propTypes.default.func,

  /*
  * Defines which resize handles should be rendered (default: 'se')
  * 's' - South handle (bottom-center)
  * 'w' - West handle (left-center)
  * 'e' - East handle (right-center)
  * 'n' - North handle (top-center)
  * 'sw' - Southwest handle (bottom-left)
  * 'nw' - Northwest handle (top-left)
  * 'se' - Southeast handle (bottom-right)
  * 'ne' - Northeast handle (top-center)
  * */
  resizeHandles: _propTypes.default.arrayOf(_propTypes.default.oneOf(['s', 'w', 'e', 'n', 'sw', 'nw', 'se', 'ne'])),

  /*
  * If `transform: scale(n)` is set on the parent, this should be set to `n`.
  * */
  transformScale: _propTypes.default.number,

  /*
   * Initial width
   */
  width: _propTypes.default.number.isRequired
};
exports.resizableProps = resizableProps;

/***/ }),

/***/ "7/jS":
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__("Dhk8"),
    isLength = __webpack_require__("t0L4"),
    isObjectLike = __webpack_require__("tLQN");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;


/***/ }),

/***/ "7/we":
/***/ (function(module, exports, __webpack_require__) {

var baseIsMatch = __webpack_require__("ZjRn"),
    getMatchData = __webpack_require__("hMsr"),
    matchesStrictComparable = __webpack_require__("0Ss3");

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;


/***/ }),

/***/ "70Le":
/***/ (function(module, exports, __webpack_require__) {

var arrayFilter = __webpack_require__("W0vE"),
    stubArray = __webpack_require__("X4R2");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;


/***/ }),

/***/ "77dE":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var IS_PURE = __webpack_require__("Vl7J");
var NativePromiseConstructor = __webpack_require__("Mzla");
var fails = __webpack_require__("XU0c");
var getBuiltIn = __webpack_require__("wF8L");
var isCallable = __webpack_require__("btm2");
var speciesConstructor = __webpack_require__("y4BW");
var promiseResolve = __webpack_require__("QmWX");
var redefine = __webpack_require__("yX36");

var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;

// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
var NON_GENERIC = !!NativePromiseConstructor && fails(function () {
  // eslint-disable-next-line unicorn/no-thenable -- required for testing
  NativePromisePrototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });
});

// `Promise.prototype.finally` method
// https://tc39.es/ecma262/#sec-promise.prototype.finally
$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {
  'finally': function (onFinally) {
    var C = speciesConstructor(this, getBuiltIn('Promise'));
    var isFunction = isCallable(onFinally);
    return this.then(
      isFunction ? function (x) {
        return promiseResolve(C, onFinally()).then(function () { return x; });
      } : onFinally,
      isFunction ? function (e) {
        return promiseResolve(C, onFinally()).then(function () { throw e; });
      } : onFinally
    );
  }
});

// makes sure that native promise-based APIs `Promise#finally` properly works with patched `Promise#then`
if (!IS_PURE && isCallable(NativePromiseConstructor)) {
  var method = getBuiltIn('Promise').prototype['finally'];
  if (NativePromisePrototype['finally'] !== method) {
    redefine(NativePromisePrototype, 'finally', method, { unsafe: true });
  }
}


/***/ }),

/***/ "7No3":
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__("EAGB"),
    cloneDataView = __webpack_require__("lN3w"),
    cloneRegExp = __webpack_require__("Bstx"),
    cloneSymbol = __webpack_require__("bVbG"),
    cloneTypedArray = __webpack_require__("6Rtw");

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return new Ctor;

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return new Ctor;

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;


/***/ }),

/***/ "7O4Y":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function toVal(mix) {
	var k, y, str='';

	if (typeof mix === 'string' || typeof mix === 'number') {
		str += mix;
	} else if (typeof mix === 'object') {
		if (Array.isArray(mix)) {
			for (k=0; k < mix.length; k++) {
				if (mix[k]) {
					if (y = toVal(mix[k])) {
						str && (str += ' ');
						str += y;
					}
				}
			}
		} else {
			for (k in mix) {
				if (mix[k]) {
					str && (str += ' ');
					str += k;
				}
			}
		}
	}

	return str;
}

/* harmony default export */ __webpack_exports__["default"] = (function () {
	var i=0, tmp, x, str='';
	while (i < arguments.length) {
		if (tmp = arguments[i++]) {
			if (x = toVal(tmp)) {
				str && (str += ' ');
				str += x
			}
		}
	}
	return str;
});


/***/ }),

/***/ "7Pat":
/***/ (function(module, exports, __webpack_require__) {

var baseSetToString = __webpack_require__("+7q0"),
    shortOut = __webpack_require__("kG2z");

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;


/***/ }),

/***/ "7bLG":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var arrayMethod = __webpack_require__("ujsi");
var stringMethod = __webpack_require__("Yg9c");

var ArrayPrototype = Array.prototype;
var StringPrototype = String.prototype;

module.exports = function (it) {
  var own = it.includes;
  if (it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.includes)) return arrayMethod;
  if (typeof it == 'string' || it === StringPrototype || (isPrototypeOf(StringPrototype, it) && own === StringPrototype.includes)) {
    return stringMethod;
  } return own;
};


/***/ }),

/***/ "7kvy":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function() {
  throw new Error("Don't instantiate Resizable directly! Use require('react-resizable').Resizable");
};

module.exports.Resizable = __webpack_require__("DIYL").default;
module.exports.ResizableBox = __webpack_require__("ngvS").default;


/***/ }),

/***/ "7qAI":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var call = __webpack_require__("9fDQ");
var aCallable = __webpack_require__("JXge");
var newPromiseCapabilityModule = __webpack_require__("FfgP");
var perform = __webpack_require__("cDK5");
var iterate = __webpack_require__("Zf5/");
var PROMISE_STATICS_INCORRECT_ITERATION = __webpack_require__("TRDS");

// `Promise.all` method
// https://tc39.es/ecma262/#sec-promise.all
$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        remaining++;
        call($promiseResolve, C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "7rbk":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var $filter = __webpack_require__("zDWZ").filter;
var arrayMethodHasSpeciesSupport = __webpack_require__("nB+7");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');

// `Array.prototype.filter` method
// https://tc39.es/ecma262/#sec-array.prototype.filter
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "7seP":
/***/ (function(module, exports, __webpack_require__) {

var baseKeys = __webpack_require__("4uJK"),
    getTag = __webpack_require__("kkM+"),
    isArrayLike = __webpack_require__("9y2L"),
    isString = __webpack_require__("nDih"),
    stringSize = __webpack_require__("GVul");

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/**
 * Gets the size of `collection` by returning its length for array-like
 * values or the number of own enumerable string keyed properties for objects.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @returns {number} Returns the collection size.
 * @example
 *
 * _.size([1, 2, 3]);
 * // => 3
 *
 * _.size({ 'a': 1, 'b': 2 });
 * // => 2
 *
 * _.size('pebbles');
 * // => 7
 */
function size(collection) {
  if (collection == null) {
    return 0;
  }
  if (isArrayLike(collection)) {
    return isString(collection) ? stringSize(collection) : collection.length;
  }
  var tag = getTag(collection);
  if (tag == mapTag || tag == setTag) {
    return collection.size;
  }
  return baseKeys(collection).length;
}

module.exports = size;


/***/ }),

/***/ "7u0x":
/***/ (function(module, exports) {



/***/ }),

/***/ "8CiI":
/***/ (function(module, exports) {



/***/ }),

/***/ "8EUF":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("kDpG");

module.exports = parent;


/***/ }),

/***/ "8EaA":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = requiredArgs;

function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
  }
}

module.exports = exports.default;

/***/ }),

/***/ "8NmK":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("9HTI");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').lastIndexOf;


/***/ }),

/***/ "8Osh":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toObject = __webpack_require__("quhl");
var toAbsoluteIndex = __webpack_require__("Nj2W");
var lengthOfArrayLike = __webpack_require__("SO8O");

// `Array.prototype.fill` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.fill
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = lengthOfArrayLike(O);
  var argumentsLength = arguments.length;
  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
  var end = argumentsLength > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),

/***/ "8Zrg":
/***/ (function(module, exports) {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),

/***/ "8bDY":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("lv3h");
var DOMIterables = __webpack_require__("FszS");
var global = __webpack_require__("oNh+");
var classof = __webpack_require__("r/P8");
var createNonEnumerableProperty = __webpack_require__("jNzf");
var Iterators = __webpack_require__("m/wn");
var wellKnownSymbol = __webpack_require__("HVcX");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG) {
    createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
  }
  Iterators[COLLECTION_NAME] = Iterators.Array;
}


/***/ }),

/***/ "8msI":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("XQ/X");
var isCallable = __webpack_require__("btm2");
var store = __webpack_require__("yULr");

var functionToString = uncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString(it);
  };
}

module.exports = store.inspectSource;


/***/ }),

/***/ "8qN7":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable es-x/no-object-getownpropertynames -- safe */
var classof = __webpack_require__("WTd3");
var toIndexedObject = __webpack_require__("VcbD");
var $getOwnPropertyNames = __webpack_require__("x+gH").f;
var arraySlice = __webpack_require__("PtsP");

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return $getOwnPropertyNames(it);
  } catch (error) {
    return arraySlice(windowNames);
  }
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && classof(it) == 'Window'
    ? getWindowNames(it)
    : $getOwnPropertyNames(toIndexedObject(it));
};


/***/ }),

/***/ "8x0C":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");

// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

module.exports = function (key, value) {
  try {
    defineProperty(global, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ "91A9":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var charAt = __webpack_require__("LTnH").charAt;
var toString = __webpack_require__("Xrs4");
var InternalStateModule = __webpack_require__("WRdu");
var defineIterator = __webpack_require__("kYm/");

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: toString(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = charAt(string, index);
  state.index += point.length;
  return { value: point, done: false };
});


/***/ }),

/***/ "96pp":
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "9HTI":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var lastIndexOf = __webpack_require__("525y");

// `Array.prototype.lastIndexOf` method
// https://tc39.es/ecma262/#sec-array.prototype.lastindexof
// eslint-disable-next-line es-x/no-array-prototype-lastindexof -- required for testing
$({ target: 'Array', proto: true, forced: lastIndexOf !== [].lastIndexOf }, {
  lastIndexOf: lastIndexOf
});


/***/ }),

/***/ "9SCj":
/***/ (function(module, exports, __webpack_require__) {

var arrayEach = __webpack_require__("LmOH"),
    baseEach = __webpack_require__("Q4oW"),
    castFunction = __webpack_require__("D49j"),
    isArray = __webpack_require__("wxYD");

/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forEach(collection, iteratee) {
  var func = isArray(collection) ? arrayEach : baseEach;
  return func(collection, castFunction(iteratee));
}

module.exports = forEach;


/***/ }),

/***/ "9SKQ":
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__("JNqh");

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),

/***/ "9TP6":
/***/ (function(module, exports, __webpack_require__) {

var Set = __webpack_require__("OBn4"),
    noop = __webpack_require__("nnm9"),
    setToArray = __webpack_require__("XlL0");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
  return new Set(values);
};

module.exports = createSet;


/***/ }),

/***/ "9Tt7":
/***/ (function(module, exports) {

/**
 * https://github.com/gre/bezier-easing
 * BezierEasing - use bezier curve for transition easing function
 * by Gaëtan Renaudeau 2014 - 2015 – MIT License
 */

// These values are established by empiricism with tests (tradeoff: performance VS precision)
var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;

var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

var float32ArraySupported = typeof Float32Array === 'function';

function A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }
function B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }
function C (aA1)      { return 3.0 * aA1; }

// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
function calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }

// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
function getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }

function binarySubdivide (aX, aA, aB, mX1, mX2) {
  var currentX, currentT, i = 0;
  do {
    currentT = aA + (aB - aA) / 2.0;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0.0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
  return currentT;
}

function newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {
 for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
   var currentSlope = getSlope(aGuessT, mX1, mX2);
   if (currentSlope === 0.0) {
     return aGuessT;
   }
   var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
   aGuessT -= currentX / currentSlope;
 }
 return aGuessT;
}

function LinearEasing (x) {
  return x;
}

module.exports = function bezier (mX1, mY1, mX2, mY2) {
  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
    throw new Error('bezier x values must be in [0, 1] range');
  }

  if (mX1 === mY1 && mX2 === mY2) {
    return LinearEasing;
  }

  // Precompute samples table
  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  for (var i = 0; i < kSplineTableSize; ++i) {
    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
  }

  function getTForX (aX) {
    var intervalStart = 0.0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;

    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;

    // Interpolate to provide an initial guess for t
    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;

    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }

  return function BezierEasing (x) {
    // Because JavaScript number are imprecise, we should guarantee the extremes are right.
    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
};


/***/ }),

/***/ "9X0z":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("XQ/X");
var aCallable = __webpack_require__("JXge");
var NATIVE_BIND = __webpack_require__("Oksd");

var bind = uncurryThis(uncurryThis.bind);

// optional / simple context binding
module.exports = function (fn, that) {
  aCallable(fn);
  return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "9c3W":
/***/ (function(module, exports, __webpack_require__) {

var userAgent = __webpack_require__("9eyx");

var firefox = userAgent.match(/firefox\/(\d+)/i);

module.exports = !!firefox && +firefox[1];


/***/ }),

/***/ "9eyx":
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__("wF8L");

module.exports = getBuiltIn('navigator', 'userAgent') || '';


/***/ }),

/***/ "9fDQ":
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_BIND = __webpack_require__("Oksd");

var call = Function.prototype.call;

module.exports = NATIVE_BIND ? call.bind(call) : function () {
  return call.apply(call, arguments);
};


/***/ }),

/***/ "9hnf":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var forEach = __webpack_require__("58fF");

// `Array.prototype.forEach` method
// https://tc39.es/ecma262/#sec-array.prototype.foreach
// eslint-disable-next-line es-x/no-array-prototype-foreach -- safe
$({ target: 'Array', proto: true, forced: [].forEach != forEach }, {
  forEach: forEach
});


/***/ }),

/***/ "9vbJ":
/***/ (function(module, exports, __webpack_require__) {

var coreJsData = __webpack_require__("3KBa");

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),

/***/ "9y2L":
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__("2q8g"),
    isLength = __webpack_require__("t0L4");

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),

/***/ "9znW":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("02Gn");

/***/ }),

/***/ "A+N4":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("6Uo2");

module.exports = parent;


/***/ }),

/***/ "A0wc":
/***/ (function(module, exports) {

/**
 * This function is like `baseIndexOf` except that it accepts a comparator.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOfWith(array, value, fromIndex, comparator) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (comparator(array[index], value)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseIndexOfWith;


/***/ }),

/***/ "A551":
/***/ (function(module, exports, __webpack_require__) {

var toIndexedObject = __webpack_require__("VcbD");
var toAbsoluteIndex = __webpack_require__("Nj2W");
var lengthOfArrayLike = __webpack_require__("SO8O");

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),

/***/ "AKOj":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("J5kL");
var path = __webpack_require__("j0PW");

module.exports = path.parseFloat;


/***/ }),

/***/ "AYji":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var $trim = __webpack_require__("2K/m").trim;
var forcedStringTrimMethod = __webpack_require__("eLIV");

// `String.prototype.trim` method
// https://tc39.es/ecma262/#sec-string.prototype.trim
$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {
  trim: function trim() {
    return $trim(this);
  }
});


/***/ }),

/***/ "AjPR":
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__("LtXa"),
    getSymbols = __webpack_require__("70Le");

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;


/***/ }),

/***/ "Awix":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isElement; });
/* istanbul ignore next */
function isElement(obj) {
  try {
    // Using W3 DOM2 (works for FF, Opera and Chrome)
    return obj instanceof HTMLElement;
  } catch (e) {
    // Browsers not supporting W3 DOM2 don't have HTMLElement and
    // an exception is thrown and we end up here. Testing some
    // properties that all elements have (works on IE7)
    return typeof obj === 'object' && obj.nodeType === 1 && typeof obj.style === 'object' && typeof obj.ownerDocument === 'object';
  }
}

/***/ }),

/***/ "B3mq":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("XQ/X");

module.exports = uncurryThis([].slice);


/***/ }),

/***/ "B6F7":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var aCallable = __webpack_require__("JXge");
var toObject = __webpack_require__("quhl");
var IndexedObject = __webpack_require__("fDXD");
var lengthOfArrayLike = __webpack_require__("SO8O");

var TypeError = global.TypeError;

// `Array.prototype.{ reduce, reduceRight }` methods implementation
var createMethod = function (IS_RIGHT) {
  return function (that, callbackfn, argumentsLength, memo) {
    aCallable(callbackfn);
    var O = toObject(that);
    var self = IndexedObject(O);
    var length = lengthOfArrayLike(O);
    var index = IS_RIGHT ? length - 1 : 0;
    var i = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2) while (true) {
      if (index in self) {
        memo = self[index];
        index += i;
        break;
      }
      index += i;
      if (IS_RIGHT ? index < 0 : length <= index) {
        throw TypeError('Reduce of empty array with no initial value');
      }
    }
    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
    return memo;
  };
};

module.exports = {
  // `Array.prototype.reduce` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduce
  left: createMethod(false),
  // `Array.prototype.reduceRight` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduceright
  right: createMethod(true)
};


/***/ }),

/***/ "BKEV":
/***/ (function(module, exports) {



/***/ }),

/***/ "BMex":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("H3h0");
var createNonEnumerableProperty = __webpack_require__("jNzf");

// `InstallErrorCause` abstract operation
// https://tc39.es/proposal-error-cause/#sec-errorobjects-install-error-cause
module.exports = function (O, options) {
  if (isObject(options) && 'cause' in options) {
    createNonEnumerableProperty(O, 'cause', options.cause);
  }
};


/***/ }),

/***/ "BSqe":
/***/ (function(module, exports) {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;


/***/ }),

/***/ "Bcqe":
/***/ (function(module, exports, __webpack_require__) {

var debounce = __webpack_require__("RNvQ"),
    isObject = __webpack_require__("tQYX");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

module.exports = throttle;


/***/ }),

/***/ "BjSP":
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__("LtXa"),
    getSymbolsIn = __webpack_require__("Xidw");

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;


/***/ }),

/***/ "BkvR":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("H3h0");

var floor = Math.floor;

// `IsIntegralNumber` abstract operation
// https://tc39.es/ecma262/#sec-isintegralnumber
// eslint-disable-next-line es-x/no-number-isinteger -- safe
module.exports = Number.isInteger || function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),

/***/ "BlJA":
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__("rmhs"),
    baseKeys = __webpack_require__("4uJK"),
    isArrayLike = __webpack_require__("9y2L");

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;


/***/ }),

/***/ "BoX2":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("kXRz");

/***/ }),

/***/ "BqUW":
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__("HsnV"),
    equalArrays = __webpack_require__("ZZ+W"),
    equalByTag = __webpack_require__("R3gn"),
    equalObjects = __webpack_require__("yZHP"),
    getTag = __webpack_require__("kkM+"),
    isArray = __webpack_require__("wxYD"),
    isBuffer = __webpack_require__("3ajY"),
    isTypedArray = __webpack_require__("Qd2C");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;


/***/ }),

/***/ "Bstx":
/***/ (function(module, exports) {

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;


/***/ }),

/***/ "Bt2r":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("0bGP");

/***/ }),

/***/ "By9b":
/***/ (function(module, exports, __webpack_require__) {

/* global ActiveXObject -- old IE, WSH */
var anObject = __webpack_require__("LTNl");
var definePropertiesModule = __webpack_require__("uK0S");
var enumBugKeys = __webpack_require__("yk1j");
var hiddenKeys = __webpack_require__("lyTg");
var html = __webpack_require__("R5XV");
var documentCreateElement = __webpack_require__("0/JC");
var sharedKey = __webpack_require__("iDMO");

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    activeXDocument = new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = typeof document != 'undefined'
    ? document.domain && activeXDocument
      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
      : NullProtoObjectViaIFrame()
    : NullProtoObjectViaActiveX(activeXDocument); // WSH
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
// eslint-disable-next-line es-x/no-object-create -- safe
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
};


/***/ }),

/***/ "C0uO":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("8bDY");
var classof = __webpack_require__("r/P8");
var hasOwn = __webpack_require__("PIIU");
var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("8EUF");

var ArrayPrototype = Array.prototype;

var DOMIterables = {
  DOMTokenList: true,
  NodeList: true
};

module.exports = function (it) {
  var own = it.forEach;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.forEach)
    || hasOwn(DOMIterables, classof(it)) ? method : own;
};


/***/ }),

/***/ "C5xO":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return findAll; });
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("nDih");
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isString__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_instance_reduce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("r3cb");
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_instance_reduce__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs3_core_js_stable_instance_reduce__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_instance_filter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("Dl6t");
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_instance_filter__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs3_core_js_stable_instance_filter__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_instance_sort__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("/3sO");
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_instance_sort__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs3_core_js_stable_instance_sort__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_instance_for_each__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("w4m/");
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_instance_for_each__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs3_core_js_stable_instance_for_each__WEBPACK_IMPORTED_MODULE_4__);






const escapeRegExpFn = string => string.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
/**
   * Examine text for any matches.
   * If we find matches, add them to the returned array as a "chunk" object ({start:number, end:number}).
   * @return { start:number, end:number }[]
   */


const findChunks = _ref => {
  var _context;

  let {
    autoEscape,
    caseSensitive,
    searchWords,
    sourceString
  } = _ref;
  return _babel_runtime_corejs3_core_js_stable_instance_reduce__WEBPACK_IMPORTED_MODULE_1___default()(_context = _babel_runtime_corejs3_core_js_stable_instance_filter__WEBPACK_IMPORTED_MODULE_2___default()(searchWords).call(searchWords, searchWord => searchWord) // Remove empty words
  ).call(_context, (chunks, searchWord) => {
    if (autoEscape) {
      searchWord = escapeRegExpFn(searchWord);
    }

    const regex = new RegExp(searchWord, caseSensitive ? 'g' : 'gi');
    let match;

    while (match = regex.exec(sourceString)) {
      const start = match.index;
      const end = regex.lastIndex; // We do not return zero-length matches

      if (end > start) {
        chunks.push({
          highlight: false,
          start,
          end
        });
      } // Prevent browsers like Firefox from getting stuck in an infinite loop
      // See http://www.regexguru.com/2008/04/watch-out-for-zero-length-matches/


      if (match.index === regex.lastIndex) {
        regex.lastIndex++;
      }
    }

    return chunks;
  }, []);
};
/**
   * Takes an array of {start:number, end:number} objects and combines chunks that overlap into single chunks.
   * @return {start:number, end:number}[]
   */


const combineChunks = _ref2 => {
  var _context2;

  let {
    chunks
  } = _ref2;
  chunks = _babel_runtime_corejs3_core_js_stable_instance_reduce__WEBPACK_IMPORTED_MODULE_1___default()(_context2 = _babel_runtime_corejs3_core_js_stable_instance_sort__WEBPACK_IMPORTED_MODULE_3___default()(chunks).call(chunks, (first, second) => first.start - second.start)).call(_context2, (processedChunks, nextChunk) => {
    // First chunk just goes straight in the array...
    if (processedChunks.length === 0) {
      return [nextChunk];
    } else {
      // ... subsequent chunks get checked to see if they overlap...
      const prevChunk = processedChunks.pop();

      if (nextChunk.start <= prevChunk.end) {
        // It may be the case that prevChunk completely surrounds nextChunk, so take the
        // largest of the end indeces.
        const endIndex = Math.max(prevChunk.end, nextChunk.end);
        processedChunks.push({
          highlight: false,
          start: prevChunk.start,
          end: endIndex
        });
      } else {
        processedChunks.push(prevChunk, nextChunk);
      }

      return processedChunks;
    }
  }, []);
  return chunks;
};
/**
   * Given a set of chunks to highlight, create an additional set of chunks
   * to represent the bits of text between the highlighted text.
   * @param chunksToHighlight {start:number, end:number}[]
   * @param totalLength number
   * @return {start:number, end:number, highlight:boolean}[]
   */


const fillInChunks = _ref3 => {
  let {
    chunksToHighlight,
    totalLength
  } = _ref3;
  const allChunks = [];

  const append = (start, end, highlight) => {
    if (end - start > 0) {
      allChunks.push({
        start,
        end,
        highlight
      });
    }
  };

  if (chunksToHighlight.length === 0) {
    append(0, totalLength, false);
  } else {
    let lastIndex = 0;

    _babel_runtime_corejs3_core_js_stable_instance_for_each__WEBPACK_IMPORTED_MODULE_4___default()(chunksToHighlight).call(chunksToHighlight, chunk => {
      append(lastIndex, chunk.start, false);
      append(chunk.start, chunk.end, true);
      lastIndex = chunk.end;
    });

    append(lastIndex, totalLength, false);
  }

  return allChunks;
};
/**
 * Creates an array of chunk objects representing both higlightable and non highlightable pieces of text that match each search word.
 *
    findAll ['z'], 'aaazaaazaaa'
        result #=> [
            { start: 0, end: 3, highlight: false }
            { start: 3, end: 4, highlight: true }
            { start: 4, end: 7, highlight: false }
            { start: 7, end: 8, highlight: true }
            { start: 8, end: 11, highlight: false }
        ]

    findAll ['do', 'dollar'], 'aaa do dollar aaa'
        #=> chunks: [
                { start: 4, end: 6 },
                { start: 7, end: 9 },
                { start: 7, end: 13 },
            ]
        #=> chunksToHight: [
                { start: 4, end: 6 },
                { start: 7, end: 13 },
            ]
        #=> result: [
                { start: 0, end: 4, highlight: false },
                { start: 4, end: 6, highlight: true },
                { start: 6, end: 7, highlight: false },
                { start: 7, end: 13, highlight: true },
                { start: 13, end: 17, highlight: false },
            ]

 * @return Array of "chunks" (where a Chunk is { start:number, end:number, highlight:boolean })
 */


const findAll = _ref4 => {
  let {
    autoEscape = true,
    caseSensitive = false,
    searchWords,
    sourceString
  } = _ref4;

  if (lodash_isString__WEBPACK_IMPORTED_MODULE_0___default()(searchWords)) {
    searchWords = [searchWords];
  }

  const chunks = findChunks({
    autoEscape,
    caseSensitive,
    searchWords,
    sourceString
  });
  const chunksToHighlight = combineChunks({
    chunks
  });
  const result = fillInChunks({
    chunksToHighlight,
    totalLength: sourceString ? sourceString.length : 0
  });
  return result;
};



/***/ }),

/***/ "CEyS":
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__("w2Tz");

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;


/***/ }),

/***/ "CIyl":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("a5Wr");

/***/ }),

/***/ "CUmk":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var hasOwn = __webpack_require__("PIIU");
var isSymbol = __webpack_require__("au4q");
var tryToString = __webpack_require__("ZSZW");
var shared = __webpack_require__("PLru");
var NATIVE_SYMBOL_REGISTRY = __webpack_require__("SHeM");

var SymbolToStringRegistry = shared('symbol-to-string-registry');

// `Symbol.keyFor` method
// https://tc39.es/ecma262/#sec-symbol.keyfor
$({ target: 'Symbol', stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(tryToString(sym) + ' is not a symbol');
    if (hasOwn(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
  }
});


/***/ }),

/***/ "CZlo":
/***/ (function(module, exports) {

/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

module.exports = isUndefined;


/***/ }),

/***/ "CbIe":
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;


/***/ }),

/***/ "CbLw":
/***/ (function(module, exports) {



/***/ }),

/***/ "Cg7V":
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__("WTd3");
var global = __webpack_require__("oNh+");

module.exports = classof(global.process) == 'process';


/***/ }),

/***/ "Coc+":
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__("6QIk");

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),

/***/ "CtlU":
/***/ (function(module, exports, __webpack_require__) {

var TO_STRING_TAG_SUPPORT = __webpack_require__("WbkG");
var defineProperty = __webpack_require__("JliG").f;
var createNonEnumerableProperty = __webpack_require__("jNzf");
var hasOwn = __webpack_require__("PIIU");
var toString = __webpack_require__("x4oI");
var wellKnownSymbol = __webpack_require__("HVcX");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (it, TAG, STATIC, SET_METHOD) {
  if (it) {
    var target = STATIC ? it : it.prototype;
    if (!hasOwn(target, TO_STRING_TAG)) {
      defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
    }
    if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {
      createNonEnumerableProperty(target, 'toString', toString);
    }
  }
};


/***/ }),

/***/ "D49j":
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__("zWgn");

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = castFunction;


/***/ }),

/***/ "DE4K":
/***/ (function(module, exports) {



/***/ }),

/***/ "DIYL":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__("cDcd"));

var _reactDraggable = __webpack_require__("j6Rw");

var _utils = __webpack_require__("+cYm");

var _propTypes = __webpack_require__("6rtJ");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Resizable = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Resizable, _React$Component);

  function Resizable() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "state", undefined);

    _defineProperty(_assertThisInitialized(_this), "lastHandleRect", null);

    _defineProperty(_assertThisInitialized(_this), "slack", null);

    return _this;
  }

  var _proto = Resizable.prototype;

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.resetData();
  };

  _proto.lockAspectRatio = function lockAspectRatio(width, height, aspectRatio) {
    height = width / aspectRatio;
    width = height * aspectRatio;
    return [width, height];
  };

  _proto.resetData = function resetData() {
    this.lastHandleRect = this.slack = null;
  } // Clamp width and height within provided constraints
  ;

  _proto.runConstraints = function runConstraints(width, height) {
    var _ref = [this.props.minConstraints, this.props.maxConstraints],
        min = _ref[0],
        max = _ref[1];
    if (!min && !max) return [width, height]; // If constraining to min and max, we need to also fit width and height to aspect ratio.

    if (this.props.lockAspectRatio) {
      var resizingHorizontally = height === this.props.height;

      if (resizingHorizontally) {
        var ratio = this.props.width / this.props.height;
        height = width / ratio;
        width = height * ratio;
      } else {
        // Take into account vertical resize with N/S handles on locked aspect
        // ratio. Calculate the change height-first, instead of width-first
        var _ratio = this.props.height / this.props.width;

        width = height / _ratio;
        height = width * _ratio;
      }
    }

    var oldW = width,
        oldH = height; // Add slack to the values used to calculate bound position. This will ensure that if
    // we start removing slack, the element won't react to it right away until it's been
    // completely removed.

    var _ref2 = this.slack || [0, 0],
        slackW = _ref2[0],
        slackH = _ref2[1];

    width += slackW;
    height += slackH;

    if (min) {
      width = Math.max(min[0], width);
      height = Math.max(min[1], height);
    }

    if (max) {
      width = Math.min(max[0], width);
      height = Math.min(max[1], height);
    } // If the width or height changed, we must have introduced some slack. Record it for the next iteration.


    this.slack = [slackW + (oldW - width), slackH + (oldH - height)];
    return [width, height];
  }
  /**
   * Wrapper around drag events to provide more useful data.
   *
   * @param  {String} handlerName Handler name to wrap.
   * @return {Function}           Handler function.
   */
  ;

  _proto.resizeHandler = function resizeHandler(handlerName, axis) {
    var _this2 = this;

    return function (e, _ref3) {
      var node = _ref3.node,
          deltaX = _ref3.deltaX,
          deltaY = _ref3.deltaY;
      // Reset data in case it was left over somehow (should not be possible)
      if (handlerName === 'onResizeStart') _this2.resetData(); // Axis restrictions

      var canDragX = (_this2.props.axis === 'both' || _this2.props.axis === 'x') && axis !== 'n' && axis !== 's';
      var canDragY = (_this2.props.axis === 'both' || _this2.props.axis === 'y') && axis !== 'e' && axis !== 'w'; // No dragging possible.

      if (!canDragX && !canDragY) return; // Decompose axis for later use

      var axisV = axis[0];
      var axisH = axis[axis.length - 1]; // intentionally not axis[1], so that this catches axis === 'w' for example
      // Track the element being dragged to account for changes in position.
      // If a handle's position is changed between callbacks, we need to factor this in to the next callback.
      // Failure to do so will cause the element to "skip" when resized upwards or leftwards.

      var handleRect = node.getBoundingClientRect();

      if (_this2.lastHandleRect != null) {
        // If the handle has repositioned on either axis since last render,
        // we need to increase our callback values by this much.
        // Only checking 'n', 'w' since resizing by 's', 'w' won't affect the overall position on page,
        if (axisH === 'w') {
          var deltaLeftSinceLast = handleRect.left - _this2.lastHandleRect.left;
          deltaX += deltaLeftSinceLast;
        }

        if (axisV === 'n') {
          var deltaTopSinceLast = handleRect.top - _this2.lastHandleRect.top;
          deltaY += deltaTopSinceLast;
        }
      } // Storage of last rect so we know how much it has really moved.


      _this2.lastHandleRect = handleRect; // Reverse delta if using top or left drag handles.

      if (axisH === 'w') deltaX = -deltaX;
      if (axisV === 'n') deltaY = -deltaY; // Update w/h by the deltas. Also factor in transformScale.

      var width = _this2.props.width + (canDragX ? deltaX / _this2.props.transformScale : 0);
      var height = _this2.props.height + (canDragY ? deltaY / _this2.props.transformScale : 0); // Run user-provided constraints.

      var _this2$runConstraints = _this2.runConstraints(width, height);

      width = _this2$runConstraints[0];
      height = _this2$runConstraints[1];
      var dimensionsChanged = width !== _this2.props.width || height !== _this2.props.height; // Call user-supplied callback if present.

      var cb = typeof _this2.props[handlerName] === 'function' ? _this2.props[handlerName] : null; // Don't call 'onResize' if dimensions haven't changed.

      var shouldSkipCb = handlerName === 'onResize' && !dimensionsChanged;

      if (cb && !shouldSkipCb) {
        if (typeof e.persist === 'function') e.persist();
        cb(e, {
          node: node,
          size: {
            width: width,
            height: height
          },
          handle: axis
        });
      } // Reset internal data


      if (handlerName === 'onResizeStop') _this2.resetData();
    };
  };

  _proto.renderResizeHandle = function renderResizeHandle(resizeHandleAxis) {
    var handle = this.props.handle;

    if (handle) {
      if (typeof handle === 'function') {
        return handle(resizeHandleAxis);
      }

      return handle;
    }

    return /*#__PURE__*/_react.default.createElement("span", {
      className: "react-resizable-handle react-resizable-handle-" + resizeHandleAxis
    });
  };

  _proto.render = function render() {
    var _this3 = this;

    // Pass along only props not meant for the `<Resizable>`.`
    // eslint-disable-next-line no-unused-vars
    var _this$props = this.props,
        children = _this$props.children,
        className = _this$props.className,
        draggableOpts = _this$props.draggableOpts,
        width = _this$props.width,
        height = _this$props.height,
        handle = _this$props.handle,
        handleSize = _this$props.handleSize,
        lockAspectRatio = _this$props.lockAspectRatio,
        axis = _this$props.axis,
        minConstraints = _this$props.minConstraints,
        maxConstraints = _this$props.maxConstraints,
        onResize = _this$props.onResize,
        onResizeStop = _this$props.onResizeStop,
        onResizeStart = _this$props.onResizeStart,
        resizeHandles = _this$props.resizeHandles,
        transformScale = _this$props.transformScale,
        p = _objectWithoutPropertiesLoose(_this$props, ["children", "className", "draggableOpts", "width", "height", "handle", "handleSize", "lockAspectRatio", "axis", "minConstraints", "maxConstraints", "onResize", "onResizeStop", "onResizeStart", "resizeHandles", "transformScale"]); // What we're doing here is getting the child of this element, and cloning it with this element's props.
    // We are then defining its children as:
    // Its original children (resizable's child's children), and
    // One or more draggable handles.


    return (0, _utils.cloneElement)(children, _objectSpread(_objectSpread({}, p), {}, {
      className: (className ? className + " " : '') + "react-resizable",
      children: [].concat(children.props.children, resizeHandles.map(function (handleAxis) {
        return /*#__PURE__*/_react.default.createElement(_reactDraggable.DraggableCore, _extends({}, draggableOpts, {
          key: "resizableHandle-" + handleAxis,
          onStop: _this3.resizeHandler('onResizeStop', handleAxis),
          onStart: _this3.resizeHandler('onResizeStart', handleAxis),
          onDrag: _this3.resizeHandler('onResize', handleAxis)
        }), _this3.renderResizeHandle(handleAxis));
      }))
    }));
  };

  return Resizable;
}(_react.default.Component);

exports.default = Resizable;

_defineProperty(Resizable, "propTypes", _propTypes.resizableProps);

_defineProperty(Resizable, "defaultProps", {
  handleSize: [20, 20],
  lockAspectRatio: false,
  axis: 'both',
  minConstraints: [20, 20],
  maxConstraints: [Infinity, Infinity],
  resizeHandles: ['se'],
  transformScale: 1
});

/***/ }),

/***/ "DKl7":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getUTCWeekYear;

var _index = _interopRequireDefault(__webpack_require__("qxgV"));

var _index2 = _interopRequireDefault(__webpack_require__("8EaA"));

var _index3 = _interopRequireDefault(__webpack_require__("ivxi"));

var _index4 = _interopRequireDefault(__webpack_require__("yuhP"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function getUTCWeekYear(dirtyDate, dirtyOptions) {
  (0, _index2.default)(1, arguments);
  var date = (0, _index.default)(dirtyDate);
  var year = date.getUTCFullYear();
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : (0, _index4.default)(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : (0, _index4.default)(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }

  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = (0, _index3.default)(firstWeekOfNextYear, dirtyOptions);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = (0, _index3.default)(firstWeekOfThisYear, dirtyOptions);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

module.exports = exports.default;

/***/ }),

/***/ "DL3M":
/***/ (function(module, exports, __webpack_require__) {

var baseSet = __webpack_require__("y4bl");

/**
 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
 * it's created. Arrays are created for missing index properties while objects
 * are created for all other missing properties. Use `_.setWith` to customize
 * `path` creation.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.set(object, 'a[0].b.c', 4);
 * console.log(object.a[0].b.c);
 * // => 4
 *
 * _.set(object, ['x', '0', 'y', 'z'], 5);
 * console.log(object.x[0].y.z);
 * // => 5
 */
function set(object, path, value) {
  return object == null ? object : baseSet(object, path, value);
}

module.exports = set;


/***/ }),

/***/ "DMYm":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var global = __webpack_require__("oNh+");
var fails = __webpack_require__("XU0c");
var isArray = __webpack_require__("ygwS");
var isObject = __webpack_require__("H3h0");
var toObject = __webpack_require__("quhl");
var lengthOfArrayLike = __webpack_require__("SO8O");
var createProperty = __webpack_require__("1FCb");
var arraySpeciesCreate = __webpack_require__("0q0E");
var arrayMethodHasSpeciesSupport = __webpack_require__("nB+7");
var wellKnownSymbol = __webpack_require__("HVcX");
var V8_VERSION = __webpack_require__("Qb90");

var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';
var TypeError = global.TypeError;

// We can't use this feature detection in V8 since it causes
// deoptimization and serious performance degradation
// https://github.com/zloirock/core-js/issues/679
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});

var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

var isConcatSpreadable = function (O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};

var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

// `Array.prototype.concat` method
// https://tc39.es/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
$({ target: 'Array', proto: true, forced: FORCED }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  concat: function concat(arg) {
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;
    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = lengthOfArrayLike(E);
        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
      } else {
        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        createProperty(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});


/***/ }),

/***/ "DTge":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var IteratorPrototype = __webpack_require__("/L0j").IteratorPrototype;
var create = __webpack_require__("By9b");
var createPropertyDescriptor = __webpack_require__("96pp");
var setToStringTag = __webpack_require__("CtlU");
var Iterators = __webpack_require__("m/wn");

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};


/***/ }),

/***/ "DW9Q":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("vWPG");

module.exports = parent;


/***/ }),

/***/ "DXf7":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("ao9h");
__webpack_require__("8bDY");

module.exports = parent;


/***/ }),

/***/ "Dc5z":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("k8x3");

/***/ }),

/***/ "DeC2":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("xGbW");

/***/ }),

/***/ "Dhk8":
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__("Syyo"),
    getRawTag = __webpack_require__("KCLV"),
    objectToString = __webpack_require__("kHoZ");

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ "DjCF":
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ "Dl6t":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("IT17");

/***/ }),

/***/ "DlqW":
/***/ (function(module, exports, __webpack_require__) {

var isNumber = __webpack_require__("mGvo");

/**
 * Checks if `value` is `NaN`.
 *
 * **Note:** This method is based on
 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
 * `undefined` and other non-number values.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 * @example
 *
 * _.isNaN(NaN);
 * // => true
 *
 * _.isNaN(new Number(NaN));
 * // => true
 *
 * isNaN(undefined);
 * // => true
 *
 * _.isNaN(undefined);
 * // => false
 */
function isNaN(value) {
  // An `NaN` primitive is the only value that is not equal to itself.
  // Perform the `toStringTag` check first to avoid errors with some
  // ActiveX objects in IE.
  return isNumber(value) && value != +value;
}

module.exports = isNaN;


/***/ }),

/***/ "DuXo":
/***/ (function(module, exports) {

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;


/***/ }),

/***/ "DyR2":
/***/ (function(module, exports, __webpack_require__) {

var basePullAll = __webpack_require__("v5ZW");

/**
 * This method is like `_.pull` except that it accepts an array of values to remove.
 *
 * **Note:** Unlike `_.difference`, this method mutates `array`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {Array} values The values to remove.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
 *
 * _.pullAll(array, ['a', 'c']);
 * console.log(array);
 * // => ['b', 'b']
 */
function pullAll(array, values) {
  return (array && array.length && values && values.length)
    ? basePullAll(array, values)
    : array;
}

module.exports = pullAll;


/***/ }),

/***/ "E4ao":
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;


/***/ }),

/***/ "E8k3":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var isCallable = __webpack_require__("btm2");

var String = global.String;
var TypeError = global.TypeError;

module.exports = function (argument) {
  if (typeof argument == 'object' || isCallable(argument)) return argument;
  throw TypeError("Can't set " + String(argument) + ' as a prototype');
};


/***/ }),

/***/ "EAGB":
/***/ (function(module, exports, __webpack_require__) {

var Uint8Array = __webpack_require__("mGzy");

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;


/***/ }),

/***/ "EHlZ":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("MqFy");

module.exports = parent;


/***/ }),

/***/ "EI7Z":
/***/ (function(module, exports) {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;


/***/ }),

/***/ "ENE1":
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__("IBsm");

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

module.exports = now;


/***/ }),

/***/ "EZwN":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable es-x/no-symbol -- required for testing */
var NATIVE_SYMBOL = __webpack_require__("5TyG");

module.exports = NATIVE_SYMBOL
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';


/***/ }),

/***/ "ExWj":
/***/ (function(module, exports, __webpack_require__) {

var baseToString = __webpack_require__("JcJ6"),
    castSlice = __webpack_require__("rXFn"),
    hasUnicode = __webpack_require__("GZgP"),
    isIterateeCall = __webpack_require__("R5u7"),
    isRegExp = __webpack_require__("UBkg"),
    stringToArray = __webpack_require__("f2p0"),
    toString = __webpack_require__("dw5g");

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295;

/**
 * Splits `string` by `separator`.
 *
 * **Note:** This method is based on
 * [`String#split`](https://mdn.io/String/split).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to split.
 * @param {RegExp|string} separator The separator pattern to split by.
 * @param {number} [limit] The length to truncate results to.
 * @returns {Array} Returns the string segments.
 * @example
 *
 * _.split('a-b-c', '-', 2);
 * // => ['a', 'b']
 */
function split(string, separator, limit) {
  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
    separator = limit = undefined;
  }
  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
  if (!limit) {
    return [];
  }
  string = toString(string);
  if (string && (
        typeof separator == 'string' ||
        (separator != null && !isRegExp(separator))
      )) {
    separator = baseToString(separator);
    if (!separator && hasUnicode(string)) {
      return castSlice(stringToArray(string), 0, limit);
    }
  }
  return string.split(separator, limit);
}

module.exports = split;


/***/ }),

/***/ "EykU":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__("oNh+");
var bind = __webpack_require__("9X0z");
var call = __webpack_require__("9fDQ");
var toObject = __webpack_require__("quhl");
var callWithSafeIterationClosing = __webpack_require__("/6So");
var isArrayIteratorMethod = __webpack_require__("4a5I");
var isConstructor = __webpack_require__("mqoN");
var lengthOfArrayLike = __webpack_require__("SO8O");
var createProperty = __webpack_require__("1FCb");
var getIterator = __webpack_require__("OltT");
var getIteratorMethod = __webpack_require__("X9nO");

var Array = global.Array;

// `Array.from` method implementation
// https://tc39.es/ecma262/#sec-array.from
module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
  var O = toObject(arrayLike);
  var IS_CONSTRUCTOR = isConstructor(this);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
  var iteratorMethod = getIteratorMethod(O);
  var index = 0;
  var length, result, step, iterator, next, value;
  // if the target is not iterable or it's an array with the default iterator - use a simple case
  if (iteratorMethod && !(this == Array && isArrayIteratorMethod(iteratorMethod))) {
    iterator = getIterator(O, iteratorMethod);
    next = iterator.next;
    result = IS_CONSTRUCTOR ? new this() : [];
    for (;!(step = call(next, iterator)).done; index++) {
      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
      createProperty(result, index, value);
    }
  } else {
    length = lengthOfArrayLike(O);
    result = IS_CONSTRUCTOR ? new this(length) : Array(length);
    for (;length > index; index++) {
      value = mapping ? mapfn(O[index], index) : O[index];
      createProperty(result, index, value);
    }
  }
  result.length = index;
  return result;
};


/***/ }),

/***/ "F3GA":
/***/ (function(module, exports) {



/***/ }),

/***/ "F63i":
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "FaiA":
/***/ (function(module, exports) {

/**
 * The base implementation of `_.gt` which doesn't coerce arguments.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is greater than `other`,
 *  else `false`.
 */
function baseGt(value, other) {
  return value > other;
}

module.exports = baseGt;


/***/ }),

/***/ "FfgP":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aCallable = __webpack_require__("JXge");

var PromiseCapability = function (C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aCallable(resolve);
  this.reject = aCallable(reject);
};

// `NewPromiseCapability` abstract operation
// https://tc39.es/ecma262/#sec-newpromisecapability
module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),

/***/ "FiNQ":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("YzuV");

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.find;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.find) ? method : own;
};


/***/ }),

/***/ "FllU":
/***/ (function(module, exports, __webpack_require__) {

var baseFindIndex = __webpack_require__("DuXo"),
    baseIteratee = __webpack_require__("S3pA"),
    toInteger = __webpack_require__("m2YG");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * This method is like `_.find` except that it returns the index of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.findIndex(users, function(o) { return o.user == 'barney'; });
 * // => 0
 *
 * // The `_.matches` iteratee shorthand.
 * _.findIndex(users, { 'user': 'fred', 'active': false });
 * // => 1
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findIndex(users, ['active', false]);
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.findIndex(users, 'active');
 * // => 2
 */
function findIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger(fromIndex);
  if (index < 0) {
    index = nativeMax(length + index, 0);
  }
  return baseFindIndex(array, baseIteratee(predicate, 3), index);
}

module.exports = findIndex;


/***/ }),

/***/ "FsQw":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isValid;

var _index = _interopRequireDefault(__webpack_require__("qJ24"));

var _index2 = _interopRequireDefault(__webpack_require__("qxgV"));

var _index3 = _interopRequireDefault(__webpack_require__("8EaA"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @name isValid
 * @category Common Helpers
 * @summary Is the given date valid?
 *
 * @description
 * Returns false if argument is Invalid Date and true otherwise.
 * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * Invalid Date is a Date, whose time value is NaN.
 *
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - Now `isValid` doesn't throw an exception
 *   if the first argument is not an instance of Date.
 *   Instead, argument is converted beforehand using `toDate`.
 *
 *   Examples:
 *
 *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |
 *   |---------------------------|---------------|---------------|
 *   | `new Date()`              | `true`        | `true`        |
 *   | `new Date('2016-01-01')`  | `true`        | `true`        |
 *   | `new Date('')`            | `false`       | `false`       |
 *   | `new Date(1488370835081)` | `true`        | `true`        |
 *   | `new Date(NaN)`           | `false`       | `false`       |
 *   | `'2016-01-01'`            | `TypeError`   | `false`       |
 *   | `''`                      | `TypeError`   | `false`       |
 *   | `1488370835081`           | `TypeError`   | `true`        |
 *   | `NaN`                     | `TypeError`   | `false`       |
 *
 *   We introduce this change to make *date-fns* consistent with ECMAScript behavior
 *   that try to coerce arguments to the expected type
 *   (which is also the case with other *date-fns* functions).
 *
 * @param {*} date - the date to check
 * @returns {Boolean} the date is valid
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // For the valid date:
 * const result = isValid(new Date(2014, 1, 31))
 * //=> true
 *
 * @example
 * // For the value, convertable into a date:
 * const result = isValid(1393804800000)
 * //=> true
 *
 * @example
 * // For the invalid date:
 * const result = isValid(new Date(''))
 * //=> false
 */
function isValid(dirtyDate) {
  (0, _index3.default)(1, arguments);

  if (!(0, _index.default)(dirtyDate) && typeof dirtyDate !== 'number') {
    return false;
  }

  var date = (0, _index2.default)(dirtyDate);
  return !isNaN(Number(date));
}

module.exports = exports.default;

/***/ }),

/***/ "FszS":
/***/ (function(module, exports) {

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};


/***/ }),

/***/ "Fu/f":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("L1sM");

var StringPrototype = String.prototype;

module.exports = function (it) {
  var own = it.trim;
  return typeof it == 'string' || it === StringPrototype
    || (isPrototypeOf(StringPrototype, it) && own === StringPrototype.trim) ? method : own;
};


/***/ }),

/***/ "G2Xs":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var global = __webpack_require__("oNh+");
var call = __webpack_require__("9fDQ");
var uncurryThis = __webpack_require__("XQ/X");
var IS_PURE = __webpack_require__("Vl7J");
var DESCRIPTORS = __webpack_require__("5Jdw");
var NATIVE_SYMBOL = __webpack_require__("5TyG");
var fails = __webpack_require__("XU0c");
var hasOwn = __webpack_require__("PIIU");
var isPrototypeOf = __webpack_require__("cZmh");
var anObject = __webpack_require__("LTNl");
var toIndexedObject = __webpack_require__("VcbD");
var toPropertyKey = __webpack_require__("jcKH");
var $toString = __webpack_require__("Xrs4");
var createPropertyDescriptor = __webpack_require__("96pp");
var nativeObjectCreate = __webpack_require__("By9b");
var objectKeys = __webpack_require__("nKVx");
var getOwnPropertyNamesModule = __webpack_require__("x+gH");
var getOwnPropertyNamesExternal = __webpack_require__("8qN7");
var getOwnPropertySymbolsModule = __webpack_require__("iYt3");
var getOwnPropertyDescriptorModule = __webpack_require__("c9aA");
var definePropertyModule = __webpack_require__("JliG");
var definePropertiesModule = __webpack_require__("uK0S");
var propertyIsEnumerableModule = __webpack_require__("0foe");
var redefine = __webpack_require__("yX36");
var shared = __webpack_require__("PLru");
var sharedKey = __webpack_require__("iDMO");
var hiddenKeys = __webpack_require__("lyTg");
var uid = __webpack_require__("apkA");
var wellKnownSymbol = __webpack_require__("HVcX");
var wrappedWellKnownSymbolModule = __webpack_require__("wuos");
var defineWellKnownSymbol = __webpack_require__("tCEB");
var defineSymbolToPrimitive = __webpack_require__("j70h");
var setToStringTag = __webpack_require__("CtlU");
var InternalStateModule = __webpack_require__("WRdu");
var $forEach = __webpack_require__("zDWZ").forEach;

var HIDDEN = sharedKey('hidden');
var SYMBOL = 'Symbol';
var PROTOTYPE = 'prototype';

var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);

var ObjectPrototype = Object[PROTOTYPE];
var $Symbol = global.Symbol;
var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
var TypeError = global.TypeError;
var QObject = global.QObject;
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var push = uncurryThis([].push);

var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var WellKnownSymbolsStore = shared('wks');

// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDescriptor = DESCRIPTORS && fails(function () {
  return nativeObjectCreate(nativeDefineProperty({}, 'a', {
    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
  nativeDefineProperty(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
  }
} : nativeDefineProperty;

var wrap = function (tag, description) {
  var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
  setInternalState(symbol, {
    type: SYMBOL,
    tag: tag,
    description: description
  });
  if (!DESCRIPTORS) symbol.description = description;
  return symbol;
};

var $defineProperty = function defineProperty(O, P, Attributes) {
  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
  anObject(O);
  var key = toPropertyKey(P);
  anObject(Attributes);
  if (hasOwn(AllSymbols, key)) {
    if (!Attributes.enumerable) {
      if (!hasOwn(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
      O[HIDDEN][key] = true;
    } else {
      if (hasOwn(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
    } return setSymbolDescriptor(O, key, Attributes);
  } return nativeDefineProperty(O, key, Attributes);
};

var $defineProperties = function defineProperties(O, Properties) {
  anObject(O);
  var properties = toIndexedObject(Properties);
  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
  $forEach(keys, function (key) {
    if (!DESCRIPTORS || call($propertyIsEnumerable, properties, key)) $defineProperty(O, key, properties[key]);
  });
  return O;
};

var $create = function create(O, Properties) {
  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};

var $propertyIsEnumerable = function propertyIsEnumerable(V) {
  var P = toPropertyKey(V);
  var enumerable = call(nativePropertyIsEnumerable, this, P);
  if (this === ObjectPrototype && hasOwn(AllSymbols, P) && !hasOwn(ObjectPrototypeSymbols, P)) return false;
  return enumerable || !hasOwn(this, P) || !hasOwn(AllSymbols, P) || hasOwn(this, HIDDEN) && this[HIDDEN][P]
    ? enumerable : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
  var it = toIndexedObject(O);
  var key = toPropertyKey(P);
  if (it === ObjectPrototype && hasOwn(AllSymbols, key) && !hasOwn(ObjectPrototypeSymbols, key)) return;
  var descriptor = nativeGetOwnPropertyDescriptor(it, key);
  if (descriptor && hasOwn(AllSymbols, key) && !(hasOwn(it, HIDDEN) && it[HIDDEN][key])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};

var $getOwnPropertyNames = function getOwnPropertyNames(O) {
  var names = nativeGetOwnPropertyNames(toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (!hasOwn(AllSymbols, key) && !hasOwn(hiddenKeys, key)) push(result, key);
  });
  return result;
};

var $getOwnPropertySymbols = function (O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (hasOwn(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn(ObjectPrototype, key))) {
      push(result, AllSymbols[key]);
    }
  });
  return result;
};

// `Symbol` constructor
// https://tc39.es/ecma262/#sec-symbol-constructor
if (!NATIVE_SYMBOL) {
  $Symbol = function Symbol() {
    if (isPrototypeOf(SymbolPrototype, this)) throw TypeError('Symbol is not a constructor');
    var description = !arguments.length || arguments[0] === undefined ? undefined : $toString(arguments[0]);
    var tag = uid(description);
    var setter = function (value) {
      if (this === ObjectPrototype) call(setter, ObjectPrototypeSymbols, value);
      if (hasOwn(this, HIDDEN) && hasOwn(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
    };
    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
    return wrap(tag, description);
  };

  SymbolPrototype = $Symbol[PROTOTYPE];

  redefine(SymbolPrototype, 'toString', function toString() {
    return getInternalState(this).tag;
  });

  redefine($Symbol, 'withoutSetter', function (description) {
    return wrap(uid(description), description);
  });

  propertyIsEnumerableModule.f = $propertyIsEnumerable;
  definePropertyModule.f = $defineProperty;
  definePropertiesModule.f = $defineProperties;
  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

  wrappedWellKnownSymbolModule.f = function (name) {
    return wrap(wellKnownSymbol(name), name);
  };

  if (DESCRIPTORS) {
    // https://github.com/tc39/proposal-Symbol-description
    nativeDefineProperty(SymbolPrototype, 'description', {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });
    if (!IS_PURE) {
      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
    }
  }
}

$({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
  Symbol: $Symbol
});

$forEach(objectKeys(WellKnownSymbolsStore), function (name) {
  defineWellKnownSymbol(name);
});

$({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
  useSetter: function () { USE_SETTER = true; },
  useSimple: function () { USE_SETTER = false; }
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
  // `Object.create` method
  // https://tc39.es/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.es/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.es/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames
});

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
defineSymbolToPrimitive();

// `Symbol.prototype[@@toStringTag]` property
// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag($Symbol, SYMBOL);

hiddenKeys[HIDDEN] = true;


/***/ }),

/***/ "GELN":
/***/ (function(module, exports, __webpack_require__) {

// TODO: remove from `core-js@4`
__webpack_require__("/E8B");

var parent = __webpack_require__("HR5x");

module.exports = parent;


/***/ }),

/***/ "GGh4":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("+gCC");
__webpack_require__("f2Li");
__webpack_require__("gyOK");
var path = __webpack_require__("j0PW");

module.exports = path.URL;


/***/ }),

/***/ "GVul":
/***/ (function(module, exports, __webpack_require__) {

var asciiSize = __webpack_require__("2wsP"),
    hasUnicode = __webpack_require__("GZgP"),
    unicodeSize = __webpack_require__("QZ90");

/**
 * Gets the number of symbols in `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the string size.
 */
function stringSize(string) {
  return hasUnicode(string)
    ? unicodeSize(string)
    : asciiSize(string);
}

module.exports = stringSize;


/***/ }),

/***/ "GX8i":
/***/ (function(module, exports) {



/***/ }),

/***/ "GZgP":
/***/ (function(module, exports) {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

module.exports = hasUnicode;


/***/ }),

/***/ "GfSK":
/***/ (function(module, exports, __webpack_require__) {

var userAgent = __webpack_require__("9eyx");
var global = __webpack_require__("oNh+");

module.exports = /ipad|iphone|ipod/i.test(userAgent) && global.Pebble !== undefined;


/***/ }),

/***/ "Gfq3":
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__("j0PW");

module.exports = function (CONSTRUCTOR) {
  return path[CONSTRUCTOR + 'Prototype'];
};


/***/ }),

/***/ "GnwC":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("+N5y");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').map;


/***/ }),

/***/ "GoLU":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var call = __webpack_require__("9fDQ");
var aCallable = __webpack_require__("JXge");
var getBuiltIn = __webpack_require__("wF8L");
var newPromiseCapabilityModule = __webpack_require__("FfgP");
var perform = __webpack_require__("cDK5");
var iterate = __webpack_require__("Zf5/");

var PROMISE_ANY_ERROR = 'No one promise resolved';

// `Promise.any` method
// https://tc39.es/ecma262/#sec-promise.any
$({ target: 'Promise', stat: true }, {
  any: function any(iterable) {
    var C = this;
    var AggregateError = getBuiltIn('AggregateError');
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var promiseResolve = aCallable(C.resolve);
      var errors = [];
      var counter = 0;
      var remaining = 1;
      var alreadyResolved = false;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyRejected = false;
        remaining++;
        call(promiseResolve, C, promise).then(function (value) {
          if (alreadyRejected || alreadyResolved) return;
          alreadyResolved = true;
          resolve(value);
        }, function (error) {
          if (alreadyRejected || alreadyResolved) return;
          alreadyRejected = true;
          errors[index] = error;
          --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
        });
      });
      --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "Gpqx":
/***/ (function(module, exports, __webpack_require__) {

var toIntegerOrInfinity = __webpack_require__("Kkai");

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ "Grae":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__("IBsm");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("aYSr")(module)))

/***/ }),

/***/ "Guw5":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var apply = __webpack_require__("Hj5v");
var isCallable = __webpack_require__("btm2");
var userAgent = __webpack_require__("9eyx");
var arraySlice = __webpack_require__("B3mq");
var validateArgumentsLength = __webpack_require__("VYEZ");

var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var Function = global.Function;

var wrap = function (scheduler) {
  return MSIE ? function (handler, timeout /* , ...arguments */) {
    var boundArgs = validateArgumentsLength(arguments.length, 1) > 2;
    var fn = isCallable(handler) ? handler : Function(handler);
    var args = boundArgs ? arraySlice(arguments, 2) : undefined;
    return scheduler(boundArgs ? function () {
      apply(fn, this, args);
    } : fn, timeout);
  } : scheduler;
};

// ie9- setTimeout & setInterval additional parameters fix
// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
module.exports = {
  // `setTimeout` method
  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
  setTimeout: wrap(global.setTimeout),
  // `setInterval` method
  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
  setInterval: wrap(global.setInterval)
};


/***/ }),

/***/ "H3h0":
/***/ (function(module, exports, __webpack_require__) {

var isCallable = __webpack_require__("btm2");

module.exports = function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};


/***/ }),

/***/ "H87J":
/***/ (function(module, exports) {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),

/***/ "H8sf":
/***/ (function(module, exports, __webpack_require__) {

var baseMerge = __webpack_require__("MzY2"),
    createAssigner = __webpack_require__("wpQC");

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

module.exports = merge;


/***/ }),

/***/ "HApn":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("e33i");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').fill;


/***/ }),

/***/ "HDX/":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const copyTextToClipboard = (input, {target = document.body} = {}) => {
	const element = document.createElement('textarea');
	const previouslyFocusedElement = document.activeElement;

	element.value = input;

	// Prevent keyboard from showing on mobile
	element.setAttribute('readonly', '');

	element.style.contain = 'strict';
	element.style.position = 'absolute';
	element.style.left = '-9999px';
	element.style.fontSize = '12pt'; // Prevent zooming on iOS

	const selection = document.getSelection();
	let originalRange = false;
	if (selection.rangeCount > 0) {
		originalRange = selection.getRangeAt(0);
	}

	target.append(element);
	element.select();

	// Explicit selection workaround for iOS
	element.selectionStart = 0;
	element.selectionEnd = input.length;

	let isSuccess = false;
	try {
		isSuccess = document.execCommand('copy');
	} catch (_) {}

	element.remove();

	if (originalRange) {
		selection.removeAllRanges();
		selection.addRange(originalRange);
	}

	// Get the focus back on the previously focused element, if any
	if (previouslyFocusedElement) {
		previouslyFocusedElement.focus();
	}

	return isSuccess;
};

module.exports = copyTextToClipboard;
// TODO: Remove this for the next major release
module.exports.default = copyTextToClipboard;


/***/ }),

/***/ "HR5x":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("vut1");

module.exports = parent;


/***/ }),

/***/ "HUEr":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("5ILo");

/***/ }),

/***/ "HVcX":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var shared = __webpack_require__("PLru");
var hasOwn = __webpack_require__("PIIU");
var uid = __webpack_require__("apkA");
var NATIVE_SYMBOL = __webpack_require__("5TyG");
var USE_SYMBOL_AS_UID = __webpack_require__("EZwN");

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var symbolFor = Symbol && Symbol['for'];
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
    var description = 'Symbol.' + name;
    if (NATIVE_SYMBOL && hasOwn(Symbol, name)) {
      WellKnownSymbolsStore[name] = Symbol[name];
    } else if (USE_SYMBOL_AS_UID && symbolFor) {
      WellKnownSymbolsStore[name] = symbolFor(description);
    } else {
      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
    }
  } return WellKnownSymbolsStore[name];
};


/***/ }),

/***/ "HXNI":
/***/ (function(module, exports, __webpack_require__) {

// TODO: Remove this module from `core-js@4` since it's split to modules listed below
__webpack_require__("G2Xs");
__webpack_require__("iUQ/");
__webpack_require__("CUmk");
__webpack_require__("iaIM");
__webpack_require__("tBOq");


/***/ }),

/***/ "Hj5v":
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_BIND = __webpack_require__("Oksd");

var FunctionPrototype = Function.prototype;
var apply = FunctionPrototype.apply;
var call = FunctionPrototype.call;

// eslint-disable-next-line es-x/no-reflect -- safe
module.exports = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function () {
  return call.apply(apply, arguments);
});


/***/ }),

/***/ "HsnV":
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__("+ooz"),
    stackClear = __webpack_require__("RNlM"),
    stackDelete = __webpack_require__("E4ao"),
    stackGet = __webpack_require__("BSqe"),
    stackHas = __webpack_require__("L6um"),
    stackSet = __webpack_require__("4/ik");

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;


/***/ }),

/***/ "HzcD":
/***/ (function(module, exports) {



/***/ }),

/***/ "I1fX":
/***/ (function(module, exports, __webpack_require__) {

var trimmedEndIndex = __webpack_require__("6XIJ");

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim(string) {
  return string
    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    : string;
}

module.exports = baseTrim;


/***/ }),

/***/ "I5Pb":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addClassName = addClassName;
exports.addEvent = addEvent;
exports.addUserSelectStyles = addUserSelectStyles;
exports.createCSSTransform = createCSSTransform;
exports.createSVGTransform = createSVGTransform;
exports.getTouch = getTouch;
exports.getTouchIdentifier = getTouchIdentifier;
exports.getTranslation = getTranslation;
exports.innerHeight = innerHeight;
exports.innerWidth = innerWidth;
exports.matchesSelector = matchesSelector;
exports.matchesSelectorAndParentsTo = matchesSelectorAndParentsTo;
exports.offsetXYFromParent = offsetXYFromParent;
exports.outerHeight = outerHeight;
exports.outerWidth = outerWidth;
exports.removeClassName = removeClassName;
exports.removeEvent = removeEvent;
exports.removeUserSelectStyles = removeUserSelectStyles;

var _shims = __webpack_require__("cCoX");

var _getPrefix = _interopRequireWildcard(__webpack_require__("zN8s"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var matchesSelectorFunc = '';

function matchesSelector(el
/*: Node*/
, selector
/*: string*/
)
/*: boolean*/
{
  if (!matchesSelectorFunc) {
    matchesSelectorFunc = (0, _shims.findInArray)(['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector'], function (method) {
      // $FlowIgnore: Doesn't think elements are indexable
      return (0, _shims.isFunction)(el[method]);
    });
  } // Might not be found entirely (not an Element?) - in that case, bail
  // $FlowIgnore: Doesn't think elements are indexable


  if (!(0, _shims.isFunction)(el[matchesSelectorFunc])) return false; // $FlowIgnore: Doesn't think elements are indexable

  return el[matchesSelectorFunc](selector);
} // Works up the tree to the draggable itself attempting to match selector.


function matchesSelectorAndParentsTo(el
/*: Node*/
, selector
/*: string*/
, baseNode
/*: Node*/
)
/*: boolean*/
{
  var node = el;

  do {
    if (matchesSelector(node, selector)) return true;
    if (node === baseNode) return false;
    node = node.parentNode;
  } while (node);

  return false;
}

function addEvent(el
/*: ?Node*/
, event
/*: string*/
, handler
/*: Function*/
, inputOptions
/*: Object*/
)
/*: void*/
{
  if (!el) return;

  var options = _objectSpread({
    capture: true
  }, inputOptions); // $FlowIgnore[method-unbinding]


  if (el.addEventListener) {
    el.addEventListener(event, handler, options);
  } else if (el.attachEvent) {
    el.attachEvent('on' + event, handler);
  } else {
    // $FlowIgnore: Doesn't think elements are indexable
    el['on' + event] = handler;
  }
}

function removeEvent(el
/*: ?Node*/
, event
/*: string*/
, handler
/*: Function*/
, inputOptions
/*: Object*/
)
/*: void*/
{
  if (!el) return;

  var options = _objectSpread({
    capture: true
  }, inputOptions); // $FlowIgnore[method-unbinding]


  if (el.removeEventListener) {
    el.removeEventListener(event, handler, options);
  } else if (el.detachEvent) {
    el.detachEvent('on' + event, handler);
  } else {
    // $FlowIgnore: Doesn't think elements are indexable
    el['on' + event] = null;
  }
}

function outerHeight(node
/*: HTMLElement*/
)
/*: number*/
{
  // This is deliberately excluding margin for our calculations, since we are using
  // offsetTop which is including margin. See getBoundPosition
  var height = node.clientHeight;
  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
  height += (0, _shims.int)(computedStyle.borderTopWidth);
  height += (0, _shims.int)(computedStyle.borderBottomWidth);
  return height;
}

function outerWidth(node
/*: HTMLElement*/
)
/*: number*/
{
  // This is deliberately excluding margin for our calculations, since we are using
  // offsetLeft which is including margin. See getBoundPosition
  var width = node.clientWidth;
  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
  width += (0, _shims.int)(computedStyle.borderLeftWidth);
  width += (0, _shims.int)(computedStyle.borderRightWidth);
  return width;
}

function innerHeight(node
/*: HTMLElement*/
)
/*: number*/
{
  var height = node.clientHeight;
  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
  height -= (0, _shims.int)(computedStyle.paddingTop);
  height -= (0, _shims.int)(computedStyle.paddingBottom);
  return height;
}

function innerWidth(node
/*: HTMLElement*/
)
/*: number*/
{
  var width = node.clientWidth;
  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
  width -= (0, _shims.int)(computedStyle.paddingLeft);
  width -= (0, _shims.int)(computedStyle.paddingRight);
  return width;
}
/*:: interface EventWithOffset {
  clientX: number, clientY: number
}*/


// Get from offsetParent
function offsetXYFromParent(evt
/*: EventWithOffset*/
, offsetParent
/*: HTMLElement*/
, scale
/*: number*/
)
/*: ControlPosition*/
{
  var isBody = offsetParent === offsetParent.ownerDocument.body;
  var offsetParentRect = isBody ? {
    left: 0,
    top: 0
  } : offsetParent.getBoundingClientRect();
  var x = (evt.clientX + offsetParent.scrollLeft - offsetParentRect.left) / scale;
  var y = (evt.clientY + offsetParent.scrollTop - offsetParentRect.top) / scale;
  return {
    x: x,
    y: y
  };
}

function createCSSTransform(controlPos
/*: ControlPosition*/
, positionOffset
/*: PositionOffsetControlPosition*/
)
/*: Object*/
{
  var translation = getTranslation(controlPos, positionOffset, 'px');
  return _defineProperty({}, (0, _getPrefix.browserPrefixToKey)('transform', _getPrefix.default), translation);
}

function createSVGTransform(controlPos
/*: ControlPosition*/
, positionOffset
/*: PositionOffsetControlPosition*/
)
/*: string*/
{
  var translation = getTranslation(controlPos, positionOffset, '');
  return translation;
}

function getTranslation(_ref2, positionOffset
/*: PositionOffsetControlPosition*/
, unitSuffix
/*: string*/
)
/*: string*/
{
  var x = _ref2.x,
      y = _ref2.y;
  var translation = "translate(".concat(x).concat(unitSuffix, ",").concat(y).concat(unitSuffix, ")");

  if (positionOffset) {
    var defaultX = "".concat(typeof positionOffset.x === 'string' ? positionOffset.x : positionOffset.x + unitSuffix);
    var defaultY = "".concat(typeof positionOffset.y === 'string' ? positionOffset.y : positionOffset.y + unitSuffix);
    translation = "translate(".concat(defaultX, ", ").concat(defaultY, ")") + translation;
  }

  return translation;
}

function getTouch(e
/*: MouseTouchEvent*/
, identifier
/*: number*/
)
/*: ?{clientX: number, clientY: number}*/
{
  return e.targetTouches && (0, _shims.findInArray)(e.targetTouches, function (t) {
    return identifier === t.identifier;
  }) || e.changedTouches && (0, _shims.findInArray)(e.changedTouches, function (t) {
    return identifier === t.identifier;
  });
}

function getTouchIdentifier(e
/*: MouseTouchEvent*/
)
/*: ?number*/
{
  if (e.targetTouches && e.targetTouches[0]) return e.targetTouches[0].identifier;
  if (e.changedTouches && e.changedTouches[0]) return e.changedTouches[0].identifier;
} // User-select Hacks:
//
// Useful for preventing blue highlights all over everything when dragging.
// Note we're passing `document` b/c we could be iframed


function addUserSelectStyles(doc
/*: ?Document*/
) {
  if (!doc) return;
  var styleEl = doc.getElementById('react-draggable-style-el');

  if (!styleEl) {
    styleEl = doc.createElement('style');
    styleEl.type = 'text/css';
    styleEl.id = 'react-draggable-style-el';
    styleEl.innerHTML = '.react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n';
    styleEl.innerHTML += '.react-draggable-transparent-selection *::selection {all: inherit;}\n';
    doc.getElementsByTagName('head')[0].appendChild(styleEl);
  }

  if (doc.body) addClassName(doc.body, 'react-draggable-transparent-selection');
}

function removeUserSelectStyles(doc
/*: ?Document*/
) {
  if (!doc) return;

  try {
    if (doc.body) removeClassName(doc.body, 'react-draggable-transparent-selection'); // $FlowIgnore: IE

    if (doc.selection) {
      // $FlowIgnore: IE
      doc.selection.empty();
    } else {
      // Remove selection caused by scroll, unless it's a focused input
      // (we use doc.defaultView in case we're in an iframe)
      var selection = (doc.defaultView || window).getSelection();

      if (selection && selection.type !== 'Caret') {
        selection.removeAllRanges();
      }
    }
  } catch (e) {// probably IE
  }
}

function addClassName(el
/*: HTMLElement*/
, className
/*: string*/
) {
  if (el.classList) {
    el.classList.add(className);
  } else {
    if (!el.className.match(new RegExp("(?:^|\\s)".concat(className, "(?!\\S)")))) {
      el.className += " ".concat(className);
    }
  }
}

function removeClassName(el
/*: HTMLElement*/
, className
/*: string*/
) {
  if (el.classList) {
    el.classList.remove(className);
  } else {
    el.className = el.className.replace(new RegExp("(?:^|\\s)".concat(className, "(?!\\S)"), 'g'), '');
  }
}

/***/ }),

/***/ "I9iR":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (false) {}

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;


/***/ }),

/***/ "IBsm":
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__("e93E");

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ "IJ0B":
/***/ (function(module, exports) {



/***/ }),

/***/ "IKC6":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("xR7j");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').reduce;


/***/ }),

/***/ "IS0S":
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__("vxC8"),
    root = __webpack_require__("IBsm");

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;


/***/ }),

/***/ "IT17":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("i3IF");

module.exports = parent;


/***/ }),

/***/ "IVNG":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("5Jdw");
var hasOwn = __webpack_require__("PIIU");

var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));

module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};


/***/ }),

/***/ "Inyi":
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__("Q4oW");

/**
 * The base implementation of `_.some` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function baseSome(collection, predicate) {
  var result;

  baseEach(collection, function(value, index, collection) {
    result = predicate(value, index, collection);
    return !result;
  });
  return !!result;
}

module.exports = baseSome;


/***/ }),

/***/ "J5kL":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var $parseFloat = __webpack_require__("aZ/c");

// `parseFloat` method
// https://tc39.es/ecma262/#sec-parsefloat-string
$({ global: true, forced: parseFloat != $parseFloat }, {
  parseFloat: $parseFloat
});


/***/ }),

/***/ "J61X":
/***/ (function(module, exports) {



/***/ }),

/***/ "JBn+":
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__("hyzI"),
    setCacheAdd = __webpack_require__("qjF7"),
    setCacheHas = __webpack_require__("cEmw");

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;


/***/ }),

/***/ "JCy+":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("XU0c");
var isCallable = __webpack_require__("btm2");

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : isCallable(detection) ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ "JElN":
/***/ (function(module, exports, __webpack_require__) {

var isSymbol = __webpack_require__("a88S");

/**
 * The base implementation of methods like `_.max` and `_.min` which accepts a
 * `comparator` to determine the extremum value.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The iteratee invoked per iteration.
 * @param {Function} comparator The comparator used to compare values.
 * @returns {*} Returns the extremum value.
 */
function baseExtremum(array, iteratee, comparator) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    var value = array[index],
        current = iteratee(value);

    if (current != null && (computed === undefined
          ? (current === current && !isSymbol(current))
          : comparator(current, computed)
        )) {
      var computed = current,
          result = value;
    }
  }
  return result;
}

module.exports = baseExtremum;


/***/ }),

/***/ "JFT0":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("8bDY");
var classof = __webpack_require__("r/P8");
var hasOwn = __webpack_require__("PIIU");
var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("sQf1");

var ArrayPrototype = Array.prototype;

var DOMIterables = {
  DOMTokenList: true,
  NodeList: true
};

module.exports = function (it) {
  var own = it.entries;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.entries)
    || hasOwn(DOMIterables, classof(it)) ? method : own;
};


/***/ }),

/***/ "JNqh":
/***/ (function(module, exports, __webpack_require__) {

var isKeyable = __webpack_require__("6UKJ");

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),

/***/ "JUUs":
/***/ (function(module, exports, __webpack_require__) {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__("rMMG");


/***/ }),

/***/ "JXge":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var isCallable = __webpack_require__("btm2");
var tryToString = __webpack_require__("ZSZW");

var TypeError = global.TypeError;

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw TypeError(tryToString(argument) + ' is not a function');
};


/***/ }),

/***/ "JYmt":
/***/ (function(module, exports) {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;


/***/ }),

/***/ "Ja4h":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var IS_PURE = __webpack_require__("Vl7J");
var FORCED_PROMISE_CONSTRUCTOR = __webpack_require__("jIvz").CONSTRUCTOR;
var NativePromiseConstructor = __webpack_require__("Mzla");
var getBuiltIn = __webpack_require__("wF8L");
var isCallable = __webpack_require__("btm2");
var redefine = __webpack_require__("yX36");

var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;

// `Promise.prototype.catch` method
// https://tc39.es/ecma262/#sec-promise.prototype.catch
$({ target: 'Promise', proto: true, forced: FORCED_PROMISE_CONSTRUCTOR, real: true }, {
  'catch': function (onRejected) {
    return this.then(undefined, onRejected);
  }
});

// makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
if (!IS_PURE && isCallable(NativePromiseConstructor)) {
  var method = getBuiltIn('Promise').prototype['catch'];
  if (NativePromisePrototype['catch'] !== method) {
    redefine(NativePromisePrototype, 'catch', method, { unsafe: true });
  }
}


/***/ }),

/***/ "JcJ6":
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__("Syyo"),
    arrayMap = __webpack_require__("H87J"),
    isArray = __webpack_require__("wxYD"),
    isSymbol = __webpack_require__("a88S");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),

/***/ "JliG":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var DESCRIPTORS = __webpack_require__("5Jdw");
var IE8_DOM_DEFINE = __webpack_require__("64g+");
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__("pVjA");
var anObject = __webpack_require__("LTNl");
var toPropertyKey = __webpack_require__("jcKH");

var TypeError = global.TypeError;
// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  } return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "JxPw":
/***/ (function(module, exports) {



/***/ }),

/***/ "K1iI":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("cRnk");

/***/ }),

/***/ "K1oV":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var hasOwn = __webpack_require__("PIIU");
var isCallable = __webpack_require__("btm2");
var toObject = __webpack_require__("quhl");
var sharedKey = __webpack_require__("iDMO");
var CORRECT_PROTOTYPE_GETTER = __webpack_require__("KEoK");

var IE_PROTO = sharedKey('IE_PROTO');
var Object = global.Object;
var ObjectPrototype = Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
  var object = toObject(O);
  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];
  var constructor = object.constructor;
  if (isCallable(constructor) && object instanceof constructor) {
    return constructor.prototype;
  } return object instanceof Object ? ObjectPrototype : null;
};


/***/ }),

/***/ "K50e":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("xoPw");

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.some;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.some) ? method : own;
};


/***/ }),

/***/ "KAo/":
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqual = __webpack_require__("NYSw"),
    get = __webpack_require__("2srY"),
    hasIn = __webpack_require__("NW/2"),
    isKey = __webpack_require__("i7nn"),
    isStrictComparable = __webpack_require__("+tCn"),
    matchesStrictComparable = __webpack_require__("0Ss3"),
    toKey = __webpack_require__("Ypsa");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;


/***/ }),

/***/ "KCLV":
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__("Syyo");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ "KEoK":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("XU0c");

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  // eslint-disable-next-line es-x/no-object-getprototypeof -- required for testing
  return Object.getPrototypeOf(new F()) !== F.prototype;
});


/***/ }),

/***/ "KTPp":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var getBuiltIn = __webpack_require__("wF8L");
var definePropertyModule = __webpack_require__("JliG");
var wellKnownSymbol = __webpack_require__("HVcX");
var DESCRIPTORS = __webpack_require__("5Jdw");

var SPECIES = wellKnownSymbol('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = definePropertyModule.f;

  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineProperty(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};


/***/ }),

/***/ "Kkai":
/***/ (function(module, exports) {

var ceil = Math.ceil;
var floor = Math.floor;

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- safe
  return number !== number || number === 0 ? 0 : (number > 0 ? floor : ceil)(number);
};


/***/ }),

/***/ "Kkar":
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__("Dhk8"),
    getPrototype = __webpack_require__("/wCD"),
    isObjectLike = __webpack_require__("tLQN");

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;


/***/ }),

/***/ "KwJG":
/***/ (function(module, exports) {



/***/ }),

/***/ "L1sM":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("AYji");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('String').trim;


/***/ }),

/***/ "L6OJ":
/***/ (function(module, exports) {



/***/ }),

/***/ "L6um":
/***/ (function(module, exports) {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;


/***/ }),

/***/ "LBwL":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("pb5m");

/***/ }),

/***/ "LDNj":
/***/ (function(module, exports) {



/***/ }),

/***/ "LF7m":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("4kHG");

module.exports = parent;


/***/ }),

/***/ "LF7v":
/***/ (function(module, exports) {

/**
 * This method returns `true`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `true`.
 * @example
 *
 * _.times(2, _.stubTrue);
 * // => [true, true]
 */
function stubTrue() {
  return true;
}

module.exports = stubTrue;


/***/ }),

/***/ "LL3N":
/***/ (function(module, exports) {

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

module.exports = safeGet;


/***/ }),

/***/ "LPC+":
/***/ (function(module, exports, __webpack_require__) {

var baseExtremum = __webpack_require__("JElN"),
    baseGt = __webpack_require__("FaiA"),
    identity = __webpack_require__("zWgn");

/**
 * Computes the maximum value of `array`. If `array` is empty or falsey,
 * `undefined` is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {*} Returns the maximum value.
 * @example
 *
 * _.max([4, 2, 8, 6]);
 * // => 8
 *
 * _.max([]);
 * // => undefined
 */
function max(array) {
  return (array && array.length)
    ? baseExtremum(array, identity, baseGt)
    : undefined;
}

module.exports = max;


/***/ }),

/***/ "LTNl":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var isObject = __webpack_require__("H3h0");

var String = global.String;
var TypeError = global.TypeError;

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw TypeError(String(argument) + ' is not an object');
};


/***/ }),

/***/ "LTnH":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("XQ/X");
var toIntegerOrInfinity = __webpack_require__("Kkai");
var toString = __webpack_require__("Xrs4");
var requireObjectCoercible = __webpack_require__("j0cD");

var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var stringSlice = uncurryThis(''.slice);

var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = toString(requireObjectCoercible($this));
    var position = toIntegerOrInfinity(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = charCodeAt(S, position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING
          ? charAt(S, position)
          : first
        : CONVERT_TO_STRING
          ? stringSlice(S, position, position + 2)
          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};


/***/ }),

/***/ "LaGA":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/**
 * A collection of shims that provide minimal functionality of the ES6 collections.
 *
 * These implementations are not meant to be used outside of the ResizeObserver
 * modules as they cover only a limited range of use cases.
 */
/* eslint-disable require-jsdoc, valid-jsdoc */
var MapShim = (function () {
    if (typeof Map !== 'undefined') {
        return Map;
    }
    /**
     * Returns index in provided array that matches the specified key.
     *
     * @param {Array<Array>} arr
     * @param {*} key
     * @returns {number}
     */
    function getIndex(arr, key) {
        var result = -1;
        arr.some(function (entry, index) {
            if (entry[0] === key) {
                result = index;
                return true;
            }
            return false;
        });
        return result;
    }
    return /** @class */ (function () {
        function class_1() {
            this.__entries__ = [];
        }
        Object.defineProperty(class_1.prototype, "size", {
            /**
             * @returns {boolean}
             */
            get: function () {
                return this.__entries__.length;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {*} key
         * @returns {*}
         */
        class_1.prototype.get = function (key) {
            var index = getIndex(this.__entries__, key);
            var entry = this.__entries__[index];
            return entry && entry[1];
        };
        /**
         * @param {*} key
         * @param {*} value
         * @returns {void}
         */
        class_1.prototype.set = function (key, value) {
            var index = getIndex(this.__entries__, key);
            if (~index) {
                this.__entries__[index][1] = value;
            }
            else {
                this.__entries__.push([key, value]);
            }
        };
        /**
         * @param {*} key
         * @returns {void}
         */
        class_1.prototype.delete = function (key) {
            var entries = this.__entries__;
            var index = getIndex(entries, key);
            if (~index) {
                entries.splice(index, 1);
            }
        };
        /**
         * @param {*} key
         * @returns {void}
         */
        class_1.prototype.has = function (key) {
            return !!~getIndex(this.__entries__, key);
        };
        /**
         * @returns {void}
         */
        class_1.prototype.clear = function () {
            this.__entries__.splice(0);
        };
        /**
         * @param {Function} callback
         * @param {*} [ctx=null]
         * @returns {void}
         */
        class_1.prototype.forEach = function (callback, ctx) {
            if (ctx === void 0) { ctx = null; }
            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
                var entry = _a[_i];
                callback.call(ctx, entry[1], entry[0]);
            }
        };
        return class_1;
    }());
})();

/**
 * Detects whether window and document objects are available in current environment.
 */
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

// Returns global object of a current environment.
var global$1 = (function () {
    if (typeof global !== 'undefined' && global.Math === Math) {
        return global;
    }
    if (typeof self !== 'undefined' && self.Math === Math) {
        return self;
    }
    if (typeof window !== 'undefined' && window.Math === Math) {
        return window;
    }
    // eslint-disable-next-line no-new-func
    return Function('return this')();
})();

/**
 * A shim for the requestAnimationFrame which falls back to the setTimeout if
 * first one is not supported.
 *
 * @returns {number} Requests' identifier.
 */
var requestAnimationFrame$1 = (function () {
    if (typeof requestAnimationFrame === 'function') {
        // It's required to use a bounded function because IE sometimes throws
        // an "Invalid calling object" error if rAF is invoked without the global
        // object on the left hand side.
        return requestAnimationFrame.bind(global$1);
    }
    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
})();

// Defines minimum timeout before adding a trailing call.
var trailingTimeout = 2;
/**
 * Creates a wrapper function which ensures that provided callback will be
 * invoked only once during the specified delay period.
 *
 * @param {Function} callback - Function to be invoked after the delay period.
 * @param {number} delay - Delay after which to invoke callback.
 * @returns {Function}
 */
function throttle (callback, delay) {
    var leadingCall = false, trailingCall = false, lastCallTime = 0;
    /**
     * Invokes the original callback function and schedules new invocation if
     * the "proxy" was called during current request.
     *
     * @returns {void}
     */
    function resolvePending() {
        if (leadingCall) {
            leadingCall = false;
            callback();
        }
        if (trailingCall) {
            proxy();
        }
    }
    /**
     * Callback invoked after the specified delay. It will further postpone
     * invocation of the original function delegating it to the
     * requestAnimationFrame.
     *
     * @returns {void}
     */
    function timeoutCallback() {
        requestAnimationFrame$1(resolvePending);
    }
    /**
     * Schedules invocation of the original function.
     *
     * @returns {void}
     */
    function proxy() {
        var timeStamp = Date.now();
        if (leadingCall) {
            // Reject immediately following calls.
            if (timeStamp - lastCallTime < trailingTimeout) {
                return;
            }
            // Schedule new call to be in invoked when the pending one is resolved.
            // This is important for "transitions" which never actually start
            // immediately so there is a chance that we might miss one if change
            // happens amids the pending invocation.
            trailingCall = true;
        }
        else {
            leadingCall = true;
            trailingCall = false;
            setTimeout(timeoutCallback, delay);
        }
        lastCallTime = timeStamp;
    }
    return proxy;
}

// Minimum delay before invoking the update of observers.
var REFRESH_DELAY = 20;
// A list of substrings of CSS properties used to find transition events that
// might affect dimensions of observed elements.
var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
// Check if MutationObserver is available.
var mutationObserverSupported = typeof MutationObserver !== 'undefined';
/**
 * Singleton controller class which handles updates of ResizeObserver instances.
 */
var ResizeObserverController = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserverController.
     *
     * @private
     */
    function ResizeObserverController() {
        /**
         * Indicates whether DOM listeners have been added.
         *
         * @private {boolean}
         */
        this.connected_ = false;
        /**
         * Tells that controller has subscribed for Mutation Events.
         *
         * @private {boolean}
         */
        this.mutationEventsAdded_ = false;
        /**
         * Keeps reference to the instance of MutationObserver.
         *
         * @private {MutationObserver}
         */
        this.mutationsObserver_ = null;
        /**
         * A list of connected observers.
         *
         * @private {Array<ResizeObserverSPI>}
         */
        this.observers_ = [];
        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
    }
    /**
     * Adds observer to observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be added.
     * @returns {void}
     */
    ResizeObserverController.prototype.addObserver = function (observer) {
        if (!~this.observers_.indexOf(observer)) {
            this.observers_.push(observer);
        }
        // Add listeners if they haven't been added yet.
        if (!this.connected_) {
            this.connect_();
        }
    };
    /**
     * Removes observer from observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be removed.
     * @returns {void}
     */
    ResizeObserverController.prototype.removeObserver = function (observer) {
        var observers = this.observers_;
        var index = observers.indexOf(observer);
        // Remove observer if it's present in registry.
        if (~index) {
            observers.splice(index, 1);
        }
        // Remove listeners if controller has no connected observers.
        if (!observers.length && this.connected_) {
            this.disconnect_();
        }
    };
    /**
     * Invokes the update of observers. It will continue running updates insofar
     * it detects changes.
     *
     * @returns {void}
     */
    ResizeObserverController.prototype.refresh = function () {
        var changesDetected = this.updateObservers_();
        // Continue running updates if changes have been detected as there might
        // be future ones caused by CSS transitions.
        if (changesDetected) {
            this.refresh();
        }
    };
    /**
     * Updates every observer from observers list and notifies them of queued
     * entries.
     *
     * @private
     * @returns {boolean} Returns "true" if any observer has detected changes in
     *      dimensions of it's elements.
     */
    ResizeObserverController.prototype.updateObservers_ = function () {
        // Collect observers that have active observations.
        var activeObservers = this.observers_.filter(function (observer) {
            return observer.gatherActive(), observer.hasActive();
        });
        // Deliver notifications in a separate cycle in order to avoid any
        // collisions between observers, e.g. when multiple instances of
        // ResizeObserver are tracking the same element and the callback of one
        // of them changes content dimensions of the observed target. Sometimes
        // this may result in notifications being blocked for the rest of observers.
        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });
        return activeObservers.length > 0;
    };
    /**
     * Initializes DOM listeners.
     *
     * @private
     * @returns {void}
     */
    ResizeObserverController.prototype.connect_ = function () {
        // Do nothing if running in a non-browser environment or if listeners
        // have been already added.
        if (!isBrowser || this.connected_) {
            return;
        }
        // Subscription to the "Transitionend" event is used as a workaround for
        // delayed transitions. This way it's possible to capture at least the
        // final state of an element.
        document.addEventListener('transitionend', this.onTransitionEnd_);
        window.addEventListener('resize', this.refresh);
        if (mutationObserverSupported) {
            this.mutationsObserver_ = new MutationObserver(this.refresh);
            this.mutationsObserver_.observe(document, {
                attributes: true,
                childList: true,
                characterData: true,
                subtree: true
            });
        }
        else {
            document.addEventListener('DOMSubtreeModified', this.refresh);
            this.mutationEventsAdded_ = true;
        }
        this.connected_ = true;
    };
    /**
     * Removes DOM listeners.
     *
     * @private
     * @returns {void}
     */
    ResizeObserverController.prototype.disconnect_ = function () {
        // Do nothing if running in a non-browser environment or if listeners
        // have been already removed.
        if (!isBrowser || !this.connected_) {
            return;
        }
        document.removeEventListener('transitionend', this.onTransitionEnd_);
        window.removeEventListener('resize', this.refresh);
        if (this.mutationsObserver_) {
            this.mutationsObserver_.disconnect();
        }
        if (this.mutationEventsAdded_) {
            document.removeEventListener('DOMSubtreeModified', this.refresh);
        }
        this.mutationsObserver_ = null;
        this.mutationEventsAdded_ = false;
        this.connected_ = false;
    };
    /**
     * "Transitionend" event handler.
     *
     * @private
     * @param {TransitionEvent} event
     * @returns {void}
     */
    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
        // Detect whether transition may affect dimensions of an element.
        var isReflowProperty = transitionKeys.some(function (key) {
            return !!~propertyName.indexOf(key);
        });
        if (isReflowProperty) {
            this.refresh();
        }
    };
    /**
     * Returns instance of the ResizeObserverController.
     *
     * @returns {ResizeObserverController}
     */
    ResizeObserverController.getInstance = function () {
        if (!this.instance_) {
            this.instance_ = new ResizeObserverController();
        }
        return this.instance_;
    };
    /**
     * Holds reference to the controller's instance.
     *
     * @private {ResizeObserverController}
     */
    ResizeObserverController.instance_ = null;
    return ResizeObserverController;
}());

/**
 * Defines non-writable/enumerable properties of the provided target object.
 *
 * @param {Object} target - Object for which to define properties.
 * @param {Object} props - Properties to be defined.
 * @returns {Object} Target object.
 */
var defineConfigurable = (function (target, props) {
    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
        var key = _a[_i];
        Object.defineProperty(target, key, {
            value: props[key],
            enumerable: false,
            writable: false,
            configurable: true
        });
    }
    return target;
});

/**
 * Returns the global object associated with provided element.
 *
 * @param {Object} target
 * @returns {Object}
 */
var getWindowOf = (function (target) {
    // Assume that the element is an instance of Node, which means that it
    // has the "ownerDocument" property from which we can retrieve a
    // corresponding global object.
    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
    // Return the local global object if it's not possible extract one from
    // provided element.
    return ownerGlobal || global$1;
});

// Placeholder of an empty content rectangle.
var emptyRect = createRectInit(0, 0, 0, 0);
/**
 * Converts provided string to a number.
 *
 * @param {number|string} value
 * @returns {number}
 */
function toFloat(value) {
    return parseFloat(value) || 0;
}
/**
 * Extracts borders size from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @param {...string} positions - Borders positions (top, right, ...)
 * @returns {number}
 */
function getBordersSize(styles) {
    var positions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        positions[_i - 1] = arguments[_i];
    }
    return positions.reduce(function (size, position) {
        var value = styles['border-' + position + '-width'];
        return size + toFloat(value);
    }, 0);
}
/**
 * Extracts paddings sizes from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @returns {Object} Paddings box.
 */
function getPaddings(styles) {
    var positions = ['top', 'right', 'bottom', 'left'];
    var paddings = {};
    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
        var position = positions_1[_i];
        var value = styles['padding-' + position];
        paddings[position] = toFloat(value);
    }
    return paddings;
}
/**
 * Calculates content rectangle of provided SVG element.
 *
 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
 *      to be calculated.
 * @returns {DOMRectInit}
 */
function getSVGContentRect(target) {
    var bbox = target.getBBox();
    return createRectInit(0, 0, bbox.width, bbox.height);
}
/**
 * Calculates content rectangle of provided HTMLElement.
 *
 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
 * @returns {DOMRectInit}
 */
function getHTMLElementContentRect(target) {
    // Client width & height properties can't be
    // used exclusively as they provide rounded values.
    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
    // By this condition we can catch all non-replaced inline, hidden and
    // detached elements. Though elements with width & height properties less
    // than 0.5 will be discarded as well.
    //
    // Without it we would need to implement separate methods for each of
    // those cases and it's not possible to perform a precise and performance
    // effective test for hidden elements. E.g. even jQuery's ':visible' filter
    // gives wrong results for elements with width & height less than 0.5.
    if (!clientWidth && !clientHeight) {
        return emptyRect;
    }
    var styles = getWindowOf(target).getComputedStyle(target);
    var paddings = getPaddings(styles);
    var horizPad = paddings.left + paddings.right;
    var vertPad = paddings.top + paddings.bottom;
    // Computed styles of width & height are being used because they are the
    // only dimensions available to JS that contain non-rounded values. It could
    // be possible to utilize the getBoundingClientRect if only it's data wasn't
    // affected by CSS transformations let alone paddings, borders and scroll bars.
    var width = toFloat(styles.width), height = toFloat(styles.height);
    // Width & height include paddings and borders when the 'border-box' box
    // model is applied (except for IE).
    if (styles.boxSizing === 'border-box') {
        // Following conditions are required to handle Internet Explorer which
        // doesn't include paddings and borders to computed CSS dimensions.
        //
        // We can say that if CSS dimensions + paddings are equal to the "client"
        // properties then it's either IE, and thus we don't need to subtract
        // anything, or an element merely doesn't have paddings/borders styles.
        if (Math.round(width + horizPad) !== clientWidth) {
            width -= getBordersSize(styles, 'left', 'right') + horizPad;
        }
        if (Math.round(height + vertPad) !== clientHeight) {
            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
        }
    }
    // Following steps can't be applied to the document's root element as its
    // client[Width/Height] properties represent viewport area of the window.
    // Besides, it's as well not necessary as the <html> itself neither has
    // rendered scroll bars nor it can be clipped.
    if (!isDocumentElement(target)) {
        // In some browsers (only in Firefox, actually) CSS width & height
        // include scroll bars size which can be removed at this step as scroll
        // bars are the only difference between rounded dimensions + paddings
        // and "client" properties, though that is not always true in Chrome.
        var vertScrollbar = Math.round(width + horizPad) - clientWidth;
        var horizScrollbar = Math.round(height + vertPad) - clientHeight;
        // Chrome has a rather weird rounding of "client" properties.
        // E.g. for an element with content width of 314.2px it sometimes gives
        // the client width of 315px and for the width of 314.7px it may give
        // 314px. And it doesn't happen all the time. So just ignore this delta
        // as a non-relevant.
        if (Math.abs(vertScrollbar) !== 1) {
            width -= vertScrollbar;
        }
        if (Math.abs(horizScrollbar) !== 1) {
            height -= horizScrollbar;
        }
    }
    return createRectInit(paddings.left, paddings.top, width, height);
}
/**
 * Checks whether provided element is an instance of the SVGGraphicsElement.
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */
var isSVGGraphicsElement = (function () {
    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
    // interface.
    if (typeof SVGGraphicsElement !== 'undefined') {
        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
    }
    // If it's so, then check that element is at least an instance of the
    // SVGElement and that it has the "getBBox" method.
    // eslint-disable-next-line no-extra-parens
    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&
        typeof target.getBBox === 'function'); };
})();
/**
 * Checks whether provided element is a document element (<html>).
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */
function isDocumentElement(target) {
    return target === getWindowOf(target).document.documentElement;
}
/**
 * Calculates an appropriate content rectangle for provided html or svg element.
 *
 * @param {Element} target - Element content rectangle of which needs to be calculated.
 * @returns {DOMRectInit}
 */
function getContentRect(target) {
    if (!isBrowser) {
        return emptyRect;
    }
    if (isSVGGraphicsElement(target)) {
        return getSVGContentRect(target);
    }
    return getHTMLElementContentRect(target);
}
/**
 * Creates rectangle with an interface of the DOMRectReadOnly.
 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
 *
 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
 * @returns {DOMRectReadOnly}
 */
function createReadOnlyRect(_a) {
    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
    // If DOMRectReadOnly is available use it as a prototype for the rectangle.
    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
    var rect = Object.create(Constr.prototype);
    // Rectangle's properties are not writable and non-enumerable.
    defineConfigurable(rect, {
        x: x, y: y, width: width, height: height,
        top: y,
        right: x + width,
        bottom: height + y,
        left: x
    });
    return rect;
}
/**
 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
 *
 * @param {number} x - X coordinate.
 * @param {number} y - Y coordinate.
 * @param {number} width - Rectangle's width.
 * @param {number} height - Rectangle's height.
 * @returns {DOMRectInit}
 */
function createRectInit(x, y, width, height) {
    return { x: x, y: y, width: width, height: height };
}

/**
 * Class that is responsible for computations of the content rectangle of
 * provided DOM element and for keeping track of it's changes.
 */
var ResizeObservation = /** @class */ (function () {
    /**
     * Creates an instance of ResizeObservation.
     *
     * @param {Element} target - Element to be observed.
     */
    function ResizeObservation(target) {
        /**
         * Broadcasted width of content rectangle.
         *
         * @type {number}
         */
        this.broadcastWidth = 0;
        /**
         * Broadcasted height of content rectangle.
         *
         * @type {number}
         */
        this.broadcastHeight = 0;
        /**
         * Reference to the last observed content rectangle.
         *
         * @private {DOMRectInit}
         */
        this.contentRect_ = createRectInit(0, 0, 0, 0);
        this.target = target;
    }
    /**
     * Updates content rectangle and tells whether it's width or height properties
     * have changed since the last broadcast.
     *
     * @returns {boolean}
     */
    ResizeObservation.prototype.isActive = function () {
        var rect = getContentRect(this.target);
        this.contentRect_ = rect;
        return (rect.width !== this.broadcastWidth ||
            rect.height !== this.broadcastHeight);
    };
    /**
     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
     * from the corresponding properties of the last observed content rectangle.
     *
     * @returns {DOMRectInit} Last observed content rectangle.
     */
    ResizeObservation.prototype.broadcastRect = function () {
        var rect = this.contentRect_;
        this.broadcastWidth = rect.width;
        this.broadcastHeight = rect.height;
        return rect;
    };
    return ResizeObservation;
}());

var ResizeObserverEntry = /** @class */ (function () {
    /**
     * Creates an instance of ResizeObserverEntry.
     *
     * @param {Element} target - Element that is being observed.
     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
     */
    function ResizeObserverEntry(target, rectInit) {
        var contentRect = createReadOnlyRect(rectInit);
        // According to the specification following properties are not writable
        // and are also not enumerable in the native implementation.
        //
        // Property accessors are not being used as they'd require to define a
        // private WeakMap storage which may cause memory leaks in browsers that
        // don't support this type of collections.
        defineConfigurable(this, { target: target, contentRect: contentRect });
    }
    return ResizeObserverEntry;
}());

var ResizeObserverSPI = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback function that is invoked
     *      when one of the observed elements changes it's content dimensions.
     * @param {ResizeObserverController} controller - Controller instance which
     *      is responsible for the updates of observer.
     * @param {ResizeObserver} callbackCtx - Reference to the public
     *      ResizeObserver instance which will be passed to callback function.
     */
    function ResizeObserverSPI(callback, controller, callbackCtx) {
        /**
         * Collection of resize observations that have detected changes in dimensions
         * of elements.
         *
         * @private {Array<ResizeObservation>}
         */
        this.activeObservations_ = [];
        /**
         * Registry of the ResizeObservation instances.
         *
         * @private {Map<Element, ResizeObservation>}
         */
        this.observations_ = new MapShim();
        if (typeof callback !== 'function') {
            throw new TypeError('The callback provided as parameter 1 is not a function.');
        }
        this.callback_ = callback;
        this.controller_ = controller;
        this.callbackCtx_ = callbackCtx;
    }
    /**
     * Starts observing provided element.
     *
     * @param {Element} target - Element to be observed.
     * @returns {void}
     */
    ResizeObserverSPI.prototype.observe = function (target) {
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        // Do nothing if current environment doesn't have the Element interface.
        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
            return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
            throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        // Do nothing if element is already being observed.
        if (observations.has(target)) {
            return;
        }
        observations.set(target, new ResizeObservation(target));
        this.controller_.addObserver(this);
        // Force the update of observations.
        this.controller_.refresh();
    };
    /**
     * Stops observing provided element.
     *
     * @param {Element} target - Element to stop observing.
     * @returns {void}
     */
    ResizeObserverSPI.prototype.unobserve = function (target) {
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        // Do nothing if current environment doesn't have the Element interface.
        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
            return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
            throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        // Do nothing if element is not being observed.
        if (!observations.has(target)) {
            return;
        }
        observations.delete(target);
        if (!observations.size) {
            this.controller_.removeObserver(this);
        }
    };
    /**
     * Stops observing all elements.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.disconnect = function () {
        this.clearActive();
        this.observations_.clear();
        this.controller_.removeObserver(this);
    };
    /**
     * Collects observation instances the associated element of which has changed
     * it's content rectangle.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.gatherActive = function () {
        var _this = this;
        this.clearActive();
        this.observations_.forEach(function (observation) {
            if (observation.isActive()) {
                _this.activeObservations_.push(observation);
            }
        });
    };
    /**
     * Invokes initial callback function with a list of ResizeObserverEntry
     * instances collected from active resize observations.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.broadcastActive = function () {
        // Do nothing if observer doesn't have active observations.
        if (!this.hasActive()) {
            return;
        }
        var ctx = this.callbackCtx_;
        // Create ResizeObserverEntry instance for every active observation.
        var entries = this.activeObservations_.map(function (observation) {
            return new ResizeObserverEntry(observation.target, observation.broadcastRect());
        });
        this.callback_.call(ctx, entries, ctx);
        this.clearActive();
    };
    /**
     * Clears the collection of active observations.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.clearActive = function () {
        this.activeObservations_.splice(0);
    };
    /**
     * Tells whether observer has active observations.
     *
     * @returns {boolean}
     */
    ResizeObserverSPI.prototype.hasActive = function () {
        return this.activeObservations_.length > 0;
    };
    return ResizeObserverSPI;
}());

// Registry of internal observers. If WeakMap is not available use current shim
// for the Map collection as it has all required methods and because WeakMap
// can't be fully polyfilled anyway.
var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
/**
 * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
 * exposing only those methods and properties that are defined in the spec.
 */
var ResizeObserver = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback that is invoked when
     *      dimensions of the observed elements change.
     */
    function ResizeObserver(callback) {
        if (!(this instanceof ResizeObserver)) {
            throw new TypeError('Cannot call a class as a function.');
        }
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        var controller = ResizeObserverController.getInstance();
        var observer = new ResizeObserverSPI(callback, controller, this);
        observers.set(this, observer);
    }
    return ResizeObserver;
}());
// Expose public methods of ResizeObserver.
[
    'observe',
    'unobserve',
    'disconnect'
].forEach(function (method) {
    ResizeObserver.prototype[method] = function () {
        var _a;
        return (_a = observers.get(this))[method].apply(_a, arguments);
    };
});

var index = (function () {
    // Export existing implementation if available.
    if (typeof global$1.ResizeObserver !== 'undefined') {
        return global$1.ResizeObserver;
    }
    return ResizeObserver;
})();

/* harmony default export */ __webpack_exports__["a"] = (index);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("fRV1")))

/***/ }),

/***/ "LiiN":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");

// `Number.isNaN` method
// https://tc39.es/ecma262/#sec-number.isnan
$({ target: 'Number', stat: true }, {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare -- NaN check
    return number != number;
  }
});


/***/ }),

/***/ "LkP1":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("bUrk");

module.exports = parent;


/***/ }),

/***/ "LmOH":
/***/ (function(module, exports) {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;


/***/ }),

/***/ "LoE1":
/***/ (function(module, exports) {



/***/ }),

/***/ "LtXa":
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__("c72w"),
    baseAssignValue = __webpack_require__("wC3K");

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;


/***/ }),

/***/ "LzM7":
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__("6QIk");

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),

/***/ "M/Cp":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var global = __webpack_require__("oNh+");
var setTimeout = __webpack_require__("Guw5").setTimeout;

// ie9- setTimeout additional parameters fix
// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
$({ global: true, bind: true, forced: global.setTimeout !== setTimeout }, {
  setTimeout: setTimeout
});


/***/ }),

/***/ "M3tB":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("OLHY");

/***/ }),

/***/ "MDav":
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__("Dhk8"),
    isObjectLike = __webpack_require__("tLQN");

/** `Object#toString` result references. */
var regexpTag = '[object RegExp]';

/**
 * The base implementation of `_.isRegExp` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
 */
function baseIsRegExp(value) {
  return isObjectLike(value) && baseGetTag(value) == regexpTag;
}

module.exports = baseIsRegExp;


/***/ }),

/***/ "MYbw":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return warning; });
function warning(flag, info) {
  if (flag) {
    console.warn("Warning: ".concat(info));
  }
}

/***/ }),

/***/ "MYsx":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("SqXu");
var path = __webpack_require__("j0PW");

module.exports = path.parseInt;


/***/ }),

/***/ "Mb5A":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("szjH");

/***/ }),

/***/ "Mkvj":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var $some = __webpack_require__("zDWZ").some;
var arrayMethodIsStrict = __webpack_require__("nSCK");

var STRICT_METHOD = arrayMethodIsStrict('some');

// `Array.prototype.some` method
// https://tc39.es/ecma262/#sec-array.prototype.some
$({ target: 'Array', proto: true, forced: !STRICT_METHOD }, {
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "MomL":
/***/ (function(module, exports) {



/***/ }),

/***/ "MpGL":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var $includes = __webpack_require__("A551").includes;
var fails = __webpack_require__("XU0c");
var addToUnscopables = __webpack_require__("Uh/D");

// FF99+ bug
var BROKEN_ON_SPARSE = fails(function () {
  return !Array(1).includes();
});

// `Array.prototype.includes` method
// https://tc39.es/ecma262/#sec-array.prototype.includes
$({ target: 'Array', proto: true, forced: BROKEN_ON_SPARSE }, {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('includes');


/***/ }),

/***/ "MqFy":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("ZKWU");
var path = __webpack_require__("j0PW");

module.exports = path.Object.entries;


/***/ }),

/***/ "MwrP":
/***/ (function(module, exports, __webpack_require__) {

var baseKeys = __webpack_require__("4uJK"),
    getTag = __webpack_require__("kkM+"),
    isArguments = __webpack_require__("bvyN"),
    isArray = __webpack_require__("wxYD"),
    isArrayLike = __webpack_require__("9y2L"),
    isBuffer = __webpack_require__("3ajY"),
    isPrototype = __webpack_require__("CbIe"),
    isTypedArray = __webpack_require__("Qd2C");

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) &&
      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

module.exports = isEmpty;


/***/ }),

/***/ "MzY2":
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__("HsnV"),
    assignMergeValue = __webpack_require__("amiU"),
    baseFor = __webpack_require__("UdtX"),
    baseMergeDeep = __webpack_require__("cb1R"),
    isObject = __webpack_require__("tQYX"),
    keysIn = __webpack_require__("zH+d"),
    safeGet = __webpack_require__("LL3N");

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    stack || (stack = new Stack);
    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

module.exports = baseMerge;


/***/ }),

/***/ "Mzla":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");

module.exports = global.Promise;


/***/ }),

/***/ "N2D4":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("H3h0");
var classof = __webpack_require__("WTd3");
var wellKnownSymbol = __webpack_require__("HVcX");

var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.es/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
};


/***/ }),

/***/ "N8Lc":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var uncurryThis = __webpack_require__("XQ/X");
var hiddenKeys = __webpack_require__("lyTg");
var isObject = __webpack_require__("H3h0");
var hasOwn = __webpack_require__("PIIU");
var defineProperty = __webpack_require__("JliG").f;
var getOwnPropertyNamesModule = __webpack_require__("x+gH");
var getOwnPropertyNamesExternalModule = __webpack_require__("8qN7");
var isExtensible = __webpack_require__("q0jj");
var uid = __webpack_require__("apkA");
var FREEZING = __webpack_require__("byqU");

var REQUIRED = false;
var METADATA = uid('meta');
var id = 0;

var setMetadata = function (it) {
  defineProperty(it, METADATA, { value: {
    objectID: 'O' + id++, // object ID
    weakData: {}          // weak collections IDs
  } });
};

var fastKey = function (it, create) {
  // return a primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!hasOwn(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMetadata(it);
  // return object ID
  } return it[METADATA].objectID;
};

var getWeakData = function (it, create) {
  if (!hasOwn(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMetadata(it);
  // return the store of weak collections IDs
  } return it[METADATA].weakData;
};

// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZING && REQUIRED && isExtensible(it) && !hasOwn(it, METADATA)) setMetadata(it);
  return it;
};

var enable = function () {
  meta.enable = function () { /* empty */ };
  REQUIRED = true;
  var getOwnPropertyNames = getOwnPropertyNamesModule.f;
  var splice = uncurryThis([].splice);
  var test = {};
  test[METADATA] = 1;

  // prevent exposing of metadata key
  if (getOwnPropertyNames(test).length) {
    getOwnPropertyNamesModule.f = function (it) {
      var result = getOwnPropertyNames(it);
      for (var i = 0, length = result.length; i < length; i++) {
        if (result[i] === METADATA) {
          splice(result, i, 1);
          break;
        }
      } return result;
    };

    $({ target: 'Object', stat: true, forced: true }, {
      getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
    });
  }
};

var meta = module.exports = {
  enable: enable,
  fastKey: fastKey,
  getWeakData: getWeakData,
  onFreeze: onFreeze
};

hiddenKeys[METADATA] = true;


/***/ }),

/***/ "ND9x":
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__("H87J"),
    copyArray = __webpack_require__("QT01"),
    isArray = __webpack_require__("wxYD"),
    isSymbol = __webpack_require__("a88S"),
    stringToPath = __webpack_require__("SoOq"),
    toKey = __webpack_require__("Ypsa"),
    toString = __webpack_require__("dw5g");

/**
 * Converts `value` to a property path array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {*} value The value to convert.
 * @returns {Array} Returns the new property path array.
 * @example
 *
 * _.toPath('a.b.c');
 * // => ['a', 'b', 'c']
 *
 * _.toPath('a[0].b.c');
 * // => ['a', '0', 'b', 'c']
 */
function toPath(value) {
  if (isArray(value)) {
    return arrayMap(value, toKey);
  }
  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
}

module.exports = toPath;


/***/ }),

/***/ "NPwy":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.canDragX = canDragX;
exports.canDragY = canDragY;
exports.createCoreData = createCoreData;
exports.createDraggableData = createDraggableData;
exports.getBoundPosition = getBoundPosition;
exports.getControlPosition = getControlPosition;
exports.snapToGrid = snapToGrid;

var _shims = __webpack_require__("cCoX");

var _domFns = __webpack_require__("I5Pb");

function getBoundPosition(draggable
/*: Draggable*/
, x
/*: number*/
, y
/*: number*/
)
/*: [number, number]*/
{
  // If no bounds, short-circuit and move on
  if (!draggable.props.bounds) return [x, y]; // Clone new bounds

  var bounds = draggable.props.bounds;
  bounds = typeof bounds === 'string' ? bounds : cloneBounds(bounds);
  var node = findDOMNode(draggable);

  if (typeof bounds === 'string') {
    var ownerDocument = node.ownerDocument;
    var ownerWindow = ownerDocument.defaultView;
    var boundNode;

    if (bounds === 'parent') {
      boundNode = node.parentNode;
    } else {
      boundNode = ownerDocument.querySelector(bounds);
    }

    if (!(boundNode instanceof ownerWindow.HTMLElement)) {
      throw new Error('Bounds selector "' + bounds + '" could not find an element.');
    }

    var boundNodeEl
    /*: HTMLElement*/
    = boundNode; // for Flow, can't seem to refine correctly

    var nodeStyle = ownerWindow.getComputedStyle(node);
    var boundNodeStyle = ownerWindow.getComputedStyle(boundNodeEl); // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.

    bounds = {
      left: -node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingLeft) + (0, _shims.int)(nodeStyle.marginLeft),
      top: -node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingTop) + (0, _shims.int)(nodeStyle.marginTop),
      right: (0, _domFns.innerWidth)(boundNodeEl) - (0, _domFns.outerWidth)(node) - node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingRight) - (0, _shims.int)(nodeStyle.marginRight),
      bottom: (0, _domFns.innerHeight)(boundNodeEl) - (0, _domFns.outerHeight)(node) - node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingBottom) - (0, _shims.int)(nodeStyle.marginBottom)
    };
  } // Keep x and y below right and bottom limits...


  if ((0, _shims.isNum)(bounds.right)) x = Math.min(x, bounds.right);
  if ((0, _shims.isNum)(bounds.bottom)) y = Math.min(y, bounds.bottom); // But above left and top limits.

  if ((0, _shims.isNum)(bounds.left)) x = Math.max(x, bounds.left);
  if ((0, _shims.isNum)(bounds.top)) y = Math.max(y, bounds.top);
  return [x, y];
}

function snapToGrid(grid
/*: [number, number]*/
, pendingX
/*: number*/
, pendingY
/*: number*/
)
/*: [number, number]*/
{
  var x = Math.round(pendingX / grid[0]) * grid[0];
  var y = Math.round(pendingY / grid[1]) * grid[1];
  return [x, y];
}

function canDragX(draggable
/*: Draggable*/
)
/*: boolean*/
{
  return draggable.props.axis === 'both' || draggable.props.axis === 'x';
}

function canDragY(draggable
/*: Draggable*/
)
/*: boolean*/
{
  return draggable.props.axis === 'both' || draggable.props.axis === 'y';
} // Get {x, y} positions from event.


function getControlPosition(e
/*: MouseTouchEvent*/
, touchIdentifier
/*: ?number*/
, draggableCore
/*: DraggableCore*/
)
/*: ?ControlPosition*/
{
  var touchObj = typeof touchIdentifier === 'number' ? (0, _domFns.getTouch)(e, touchIdentifier) : null;
  if (typeof touchIdentifier === 'number' && !touchObj) return null; // not the right touch

  var node = findDOMNode(draggableCore); // User can provide an offsetParent if desired.

  var offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;
  return (0, _domFns.offsetXYFromParent)(touchObj || e, offsetParent, draggableCore.props.scale);
} // Create an data object exposed by <DraggableCore>'s events


function createCoreData(draggable
/*: DraggableCore*/
, x
/*: number*/
, y
/*: number*/
)
/*: DraggableData*/
{
  var state = draggable.state;
  var isStart = !(0, _shims.isNum)(state.lastX);
  var node = findDOMNode(draggable);

  if (isStart) {
    // If this is our first move, use the x and y as last coords.
    return {
      node: node,
      deltaX: 0,
      deltaY: 0,
      lastX: x,
      lastY: y,
      x: x,
      y: y
    };
  } else {
    // Otherwise calculate proper values.
    return {
      node: node,
      deltaX: x - state.lastX,
      deltaY: y - state.lastY,
      lastX: state.lastX,
      lastY: state.lastY,
      x: x,
      y: y
    };
  }
} // Create an data exposed by <Draggable>'s events


function createDraggableData(draggable
/*: Draggable*/
, coreData
/*: DraggableData*/
)
/*: DraggableData*/
{
  var scale = draggable.props.scale;
  return {
    node: coreData.node,
    x: draggable.state.x + coreData.deltaX / scale,
    y: draggable.state.y + coreData.deltaY / scale,
    deltaX: coreData.deltaX / scale,
    deltaY: coreData.deltaY / scale,
    lastX: draggable.state.x,
    lastY: draggable.state.y
  };
} // A lot faster than stringify/parse


function cloneBounds(bounds
/*: Bounds*/
)
/*: Bounds*/
{
  return {
    left: bounds.left,
    top: bounds.top,
    right: bounds.right,
    bottom: bounds.bottom
  };
}

function findDOMNode(draggable
/*: Draggable | DraggableCore*/
)
/*: HTMLElement*/
{
  var node = draggable.findDOMNode();

  if (!node) {
    throw new Error('<DraggableCore>: Unmounted during event!');
  } // $FlowIgnore we can't assert on HTMLElement due to tests... FIXME


  return node;
}

/***/ }),

/***/ "NW/2":
/***/ (function(module, exports, __webpack_require__) {

var baseHasIn = __webpack_require__("JYmt"),
    hasPath = __webpack_require__("z+TE");

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;


/***/ }),

/***/ "NX68":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("ixFa");

module.exports = __webpack_require__("oNh+");


/***/ }),

/***/ "NYSw":
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqualDeep = __webpack_require__("BqUW"),
    isObjectLike = __webpack_require__("tLQN");

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;


/***/ }),

/***/ "NbvU":
/***/ (function(module, exports, __webpack_require__) {

var baseIsMap = __webpack_require__("gEWz"),
    baseUnary = __webpack_require__("SU8Q"),
    nodeUtil = __webpack_require__("T6vp");

/* Node.js helper references. */
var nodeIsMap = nodeUtil && nodeUtil.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

module.exports = isMap;


/***/ }),

/***/ "NdXQ":
/***/ (function(module, exports, __webpack_require__) {

var baseClone = __webpack_require__("kn3Q");

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.cloneWith` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @param {Function} [customizer] The function to customize cloning.
 * @returns {*} Returns the deep cloned value.
 * @see _.cloneWith
 * @example
 *
 * function customizer(value) {
 *   if (_.isElement(value)) {
 *     return value.cloneNode(true);
 *   }
 * }
 *
 * var el = _.cloneDeepWith(document.body, customizer);
 *
 * console.log(el === document.body);
 * // => false
 * console.log(el.nodeName);
 * // => 'BODY'
 * console.log(el.childNodes.length);
 * // => 20
 */
function cloneDeepWith(value, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
}

module.exports = cloneDeepWith;


/***/ }),

/***/ "Ndl3":
/***/ (function(module, exports, __webpack_require__) {

var isArrayLike = __webpack_require__("9y2L"),
    isObjectLike = __webpack_require__("tLQN");

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;


/***/ }),

/***/ "NgYr":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = buildMatchFn;

function buildMatchFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}

function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }

  return undefined;
}

function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }

  return undefined;
}

module.exports = exports.default;

/***/ }),

/***/ "Ni74":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var DESCRIPTORS = __webpack_require__("5Jdw");
var defineProperties = __webpack_require__("uK0S").f;

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es-x/no-object-defineproperties -- safe
$({ target: 'Object', stat: true, forced: Object.defineProperties !== defineProperties, sham: !DESCRIPTORS }, {
  defineProperties: defineProperties
});


/***/ }),

/***/ "Nj2W":
/***/ (function(module, exports, __webpack_require__) {

var toIntegerOrInfinity = __webpack_require__("Kkai");

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ "Nve6":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("lv3h");
__webpack_require__("X7cO");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').entries;


/***/ }),

/***/ "NzBr":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("HVcX");

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line es-x/no-array-from, no-throw-literal -- required for testing
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};


/***/ }),

/***/ "O1Sc":
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__("w2Tz"),
    baseSet = __webpack_require__("y4bl"),
    castPath = __webpack_require__("xoyU");

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, paths, predicate) {
  var index = -1,
      length = paths.length,
      result = {};

  while (++index < length) {
    var path = paths[index],
        value = baseGet(object, path);

    if (predicate(value, path)) {
      baseSet(result, castPath(path, object), value);
    }
  }
  return result;
}

module.exports = basePickBy;


/***/ }),

/***/ "O1Tx":
/***/ (function(module, exports) {



/***/ }),

/***/ "O589":
/***/ (function(module, exports, __webpack_require__) {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__("huYy");


/***/ }),

/***/ "O94r":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames() {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				if (arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				}
			} else if (argType === 'object') {
				if (arg.toString === Object.prototype.toString) {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				} else {
					classes.push(arg.toString());
				}
			}
		}

		return classes.join(' ');
	}

	if ( true && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}());


/***/ }),

/***/ "OBn4":
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__("vxC8"),
    root = __webpack_require__("IBsm");

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;


/***/ }),

/***/ "OI5d":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var DESCRIPTORS = __webpack_require__("5Jdw");
var defineProperty = __webpack_require__("JliG").f;

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
// eslint-disable-next-line es-x/no-object-defineproperty -- safe
$({ target: 'Object', stat: true, forced: Object.defineProperty !== defineProperty, sham: !DESCRIPTORS }, {
  defineProperty: defineProperty
});


/***/ }),

/***/ "OLHY":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("MYsx");

module.exports = parent;


/***/ }),

/***/ "OYyg":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = _interopRequireDefault(__webpack_require__("kQ/h"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong = {
  date: (0, _index.default)({
    formats: dateFormats,
    defaultWidth: 'full'
  }),
  time: (0, _index.default)({
    formats: timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0, _index.default)({
    formats: dateTimeFormats,
    defaultWidth: 'full'
  })
};
var _default = formatLong;
exports.default = _default;
module.exports = exports.default;

/***/ }),

/***/ "OboX":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = _interopRequireDefault(__webpack_require__("sSg2"));

var _index2 = _interopRequireDefault(__webpack_require__("OYyg"));

var _index3 = _interopRequireDefault(__webpack_require__("XKxo"));

var _index4 = _interopRequireDefault(__webpack_require__("e3Ae"));

var _index5 = _interopRequireDefault(__webpack_require__("yclL"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */
var locale = {
  code: 'en-US',
  formatDistance: _index.default,
  formatLong: _index2.default,
  formatRelative: _index3.default,
  localize: _index4.default,
  match: _index5.default,
  options: {
    weekStartsOn: 0
    /* Sunday */
    ,
    firstWeekContainsDate: 1
  }
};
var _default = locale;
exports.default = _default;
module.exports = exports.default;

/***/ }),

/***/ "Oetr":
/***/ (function(module, exports, __webpack_require__) {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__("095C");


/***/ }),

/***/ "OfKG":
/***/ (function(module, exports, __webpack_require__) {

var baseIndexOf = __webpack_require__("c7Qd");

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;


/***/ }),

/***/ "Oksd":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("XU0c");

module.exports = !fails(function () {
  // eslint-disable-next-line es-x/no-function-prototype-bind -- safe
  var test = (function () { /* empty */ }).bind();
  // eslint-disable-next-line no-prototype-builtins -- safe
  return typeof test != 'function' || test.hasOwnProperty('prototype');
});


/***/ }),

/***/ "OltT":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var call = __webpack_require__("9fDQ");
var aCallable = __webpack_require__("JXge");
var anObject = __webpack_require__("LTNl");
var tryToString = __webpack_require__("ZSZW");
var getIteratorMethod = __webpack_require__("X9nO");

var TypeError = global.TypeError;

module.exports = function (argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
  if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
  throw TypeError(tryToString(argument) + ' is not iterable');
};


/***/ }),

/***/ "OtNC":
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__("TAtK");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),

/***/ "P2TP":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("ixfn");

/***/ }),

/***/ "PIIU":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("XQ/X");
var toObject = __webpack_require__("quhl");

var hasOwnProperty = uncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es-x/no-object-hasown -- safe
module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};


/***/ }),

/***/ "PLru":
/***/ (function(module, exports, __webpack_require__) {

var IS_PURE = __webpack_require__("Vl7J");
var store = __webpack_require__("yULr");

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.22.3',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.22.3/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});


/***/ }),

/***/ "PhxK":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function dateLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'P':
      return formatLong.date({
        width: 'short'
      });

    case 'PP':
      return formatLong.date({
        width: 'medium'
      });

    case 'PPP':
      return formatLong.date({
        width: 'long'
      });

    case 'PPPP':
    default:
      return formatLong.date({
        width: 'full'
      });
  }
}

function timeLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'p':
      return formatLong.time({
        width: 'short'
      });

    case 'pp':
      return formatLong.time({
        width: 'medium'
      });

    case 'ppp':
      return formatLong.time({
        width: 'long'
      });

    case 'pppp':
    default:
      return formatLong.time({
        width: 'full'
      });
  }
}

function dateTimeLongFormatter(pattern, formatLong) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];

  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong);
  }

  var dateTimeFormat;

  switch (datePattern) {
    case 'P':
      dateTimeFormat = formatLong.dateTime({
        width: 'short'
      });
      break;

    case 'PP':
      dateTimeFormat = formatLong.dateTime({
        width: 'medium'
      });
      break;

    case 'PPP':
      dateTimeFormat = formatLong.dateTime({
        width: 'long'
      });
      break;

    case 'PPPP':
    default:
      dateTimeFormat = formatLong.dateTime({
        width: 'full'
      });
      break;
  }

  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
}

var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var _default = longFormatters;
exports.default = _default;
module.exports = exports.default;

/***/ }),

/***/ "PnYF":
/***/ (function(module, exports, __webpack_require__) {

var call = __webpack_require__("9fDQ");
var anObject = __webpack_require__("LTNl");
var getMethod = __webpack_require__("fEH3");

module.exports = function (iterator, kind, value) {
  var innerResult, innerError;
  anObject(iterator);
  try {
    innerResult = getMethod(iterator, 'return');
    if (!innerResult) {
      if (kind === 'throw') throw value;
      return value;
    }
    innerResult = call(innerResult, iterator);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === 'throw') throw value;
  if (innerError) throw innerResult;
  anObject(innerResult);
  return value;
};


/***/ }),

/***/ "PtsP":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var toAbsoluteIndex = __webpack_require__("Nj2W");
var lengthOfArrayLike = __webpack_require__("SO8O");
var createProperty = __webpack_require__("1FCb");

var Array = global.Array;
var max = Math.max;

module.exports = function (O, start, end) {
  var length = lengthOfArrayLike(O);
  var k = toAbsoluteIndex(start, length);
  var fin = toAbsoluteIndex(end === undefined ? length : end, length);
  var result = Array(max(fin - k, 0));
  for (var n = 0; k < fin; k++, n++) createProperty(result, n, O[k]);
  result.length = n;
  return result;
};


/***/ }),

/***/ "Pu2W":
/***/ (function(module, exports) {



/***/ }),

/***/ "PwjB":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("Udow");

module.exports = parent;


/***/ }),

/***/ "Pypn":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("OI5d");
var path = __webpack_require__("j0PW");

var Object = path.Object;

var defineProperty = module.exports = function defineProperty(it, key, desc) {
  return Object.defineProperty(it, key, desc);
};

if (Object.defineProperty.sham) defineProperty.sham = true;


/***/ }),

/***/ "Pz+s":
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__("vxC8");

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),

/***/ "Q+0L":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("lv3h");
__webpack_require__("X7cO");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').keys;


/***/ }),

/***/ "Q4oW":
/***/ (function(module, exports, __webpack_require__) {

var baseForOwn = __webpack_require__("zKkv"),
    createBaseEach = __webpack_require__("bz5b");

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;


/***/ }),

/***/ "Q8Yr":
/***/ (function(module, exports) {



/***/ }),

/***/ "QF3D":
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__("vxC8"),
    root = __webpack_require__("IBsm");

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;


/***/ }),

/***/ "QHSe":
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (false) { var throwOnDirectAccess, ReactIs; } else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__("tObo")();
}


/***/ }),

/***/ "QMz8":
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__("5pfJ");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),

/***/ "QT01":
/***/ (function(module, exports) {

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;


/***/ }),

/***/ "QZ90":
/***/ (function(module, exports) {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Gets the size of a Unicode `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */
function unicodeSize(string) {
  var result = reUnicode.lastIndex = 0;
  while (reUnicode.test(string)) {
    ++result;
  }
  return result;
}

module.exports = unicodeSize;


/***/ }),

/***/ "Qb90":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var userAgent = __webpack_require__("9eyx");

var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

module.exports = version;


/***/ }),

/***/ "Qd2C":
/***/ (function(module, exports, __webpack_require__) {

var baseIsTypedArray = __webpack_require__("7/jS"),
    baseUnary = __webpack_require__("SU8Q"),
    nodeUtil = __webpack_require__("T6vp");

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;


/***/ }),

/***/ "QjT4":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("yoBI");

/***/ }),

/***/ "QjcZ":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var isPrototypeOf = __webpack_require__("cZmh");

var TypeError = global.TypeError;

module.exports = function (it, Prototype) {
  if (isPrototypeOf(Prototype, it)) return it;
  throw TypeError('Incorrect invocation');
};


/***/ }),

/***/ "QmWX":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("LTNl");
var isObject = __webpack_require__("H3h0");
var newPromiseCapability = __webpack_require__("FfgP");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),

/***/ "Qn2d":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("EHlZ");

/***/ }),

/***/ "Qqkl":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var toObject = __webpack_require__("quhl");
var nativeKeys = __webpack_require__("nKVx");
var fails = __webpack_require__("XU0c");

var FAILS_ON_PRIMITIVES = fails(function () { nativeKeys(1); });

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  keys: function keys(it) {
    return nativeKeys(toObject(it));
  }
});


/***/ }),

/***/ "QrYh":
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__("LtXa"),
    keysIn = __webpack_require__("zH+d");

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;


/***/ }),

/***/ "QwI6":
/***/ (function(module, exports, __webpack_require__) {

var basePickBy = __webpack_require__("O1Sc"),
    hasIn = __webpack_require__("NW/2");

/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */
function basePick(object, paths) {
  return basePickBy(object, paths, function(value, path) {
    return hasIn(object, path);
  });
}

module.exports = basePick;


/***/ }),

/***/ "R3TX":
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__("zWgn"),
    overRest = __webpack_require__("UAs9"),
    setToString = __webpack_require__("7Pat");

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;


/***/ }),

/***/ "R3gn":
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__("Syyo"),
    Uint8Array = __webpack_require__("mGzy"),
    eq = __webpack_require__("pPzx"),
    equalArrays = __webpack_require__("ZZ+W"),
    mapToArray = __webpack_require__("aURW"),
    setToArray = __webpack_require__("XlL0");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;


/***/ }),

/***/ "R5XV":
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__("wF8L");

module.exports = getBuiltIn('document', 'documentElement');


/***/ }),

/***/ "R5u7":
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__("pPzx"),
    isArrayLike = __webpack_require__("9y2L"),
    isIndex = __webpack_require__("pnw1"),
    isObject = __webpack_require__("tQYX");

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;


/***/ }),

/***/ "R7V3":
/***/ (function(module, exports) {

/**
 * Checks if `value` is `null`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
 * @example
 *
 * _.isNull(null);
 * // => true
 *
 * _.isNull(void 0);
 * // => false
 */
function isNull(value) {
  return value === null;
}

module.exports = isNull;


/***/ }),

/***/ "R8rS":
/***/ (function(module, exports) {



/***/ }),

/***/ "RCk1":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var call = __webpack_require__("9fDQ");
var aCallable = __webpack_require__("JXge");
var newPromiseCapabilityModule = __webpack_require__("FfgP");
var perform = __webpack_require__("cDK5");
var iterate = __webpack_require__("Zf5/");
var PROMISE_STATICS_INCORRECT_ITERATION = __webpack_require__("TRDS");

// `Promise.race` method
// https://tc39.es/ecma262/#sec-promise.race
$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      iterate(iterable, function (promise) {
        call($promiseResolve, C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "RFfO":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("PwjB");

/***/ }),

/***/ "RFxK":
/***/ (function(module, exports) {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;


/***/ }),

/***/ "RHNq":
/***/ (function(module, exports) {



/***/ }),

/***/ "RIzX":
/***/ (function(module, exports) {



/***/ }),

/***/ "RNlM":
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__("+ooz");

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;


/***/ }),

/***/ "RNvQ":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("tQYX"),
    now = __webpack_require__("ENE1"),
    toNumber = __webpack_require__("nvU9");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

module.exports = debounce;


/***/ }),

/***/ "RPkD":
/***/ (function(module, exports) {



/***/ }),

/***/ "RTm1":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = format;

var _index = _interopRequireDefault(__webpack_require__("FsQw"));

var _index2 = _interopRequireDefault(__webpack_require__("OboX"));

var _index3 = _interopRequireDefault(__webpack_require__("vcBr"));

var _index4 = _interopRequireDefault(__webpack_require__("qxgV"));

var _index5 = _interopRequireDefault(__webpack_require__("hw2v"));

var _index6 = _interopRequireDefault(__webpack_require__("PhxK"));

var _index7 = _interopRequireDefault(__webpack_require__("l/Ck"));

var _index8 = __webpack_require__("pJo6");

var _index9 = _interopRequireDefault(__webpack_require__("yuhP"));

var _index10 = _interopRequireDefault(__webpack_require__("8EaA"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
/**
 * @name format
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://git.io/fxCyr
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          | a..aa   | AM, PM                            |       |
 * |                                 | aaa     | am, pm                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
 * |                                 | bbb     | am, pm, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 001, ..., 999                |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 04/29/1453                        | 7     |
 * |                                 | PP      | Apr 29, 1453                      | 7     |
 * |                                 | PPP     | April 29th, 1453                  | 7     |
 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
 *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
 *
 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
 *    so right now these tokens fall back to GMT timezones.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
 *
 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - The second argument is now required for the sake of explicitness.
 *
 *   ```javascript
 *   // Before v2.0.0
 *   format(new Date(2016, 0, 1))
 *
 *   // v2.0.0 onward
 *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
 *   ```
 *
 * - New format string API for `format` function
 *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).
 *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
 *
 * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
 *
 * @param {Date|Number} date - the original date
 * @param {String} format - the string of tokens
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://git.io/fxCyr
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://git.io/fxCyr
 * @returns {String} the formatted date string
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `date` must not be Invalid Date
 * @throws {RangeError} `options.locale` must contain `localize` property
 * @throws {RangeError} `options.locale` must contain `formatLong` property
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
 *   locale: eoLocale
 * })
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
 * //=> "3 o'clock"
 */

function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
  (0, _index10.default)(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var options = dirtyOptions || {};
  var locale = options.locale || _index2.default;
  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : (0, _index9.default)(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : (0, _index9.default)(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }

  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0, _index9.default)(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : (0, _index9.default)(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  if (!locale.localize) {
    throw new RangeError('locale must contain localize property');
  }

  if (!locale.formatLong) {
    throw new RangeError('locale must contain formatLong property');
  }

  var originalDate = (0, _index4.default)(dirtyDate);

  if (!(0, _index.default)(originalDate)) {
    throw new RangeError('Invalid time value');
  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376


  var timezoneOffset = (0, _index7.default)(originalDate);
  var utcDate = (0, _index3.default)(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
    var firstCharacter = substring[0];

    if (firstCharacter === 'p' || firstCharacter === 'P') {
      var longFormatter = _index6.default[firstCharacter];
      return longFormatter(substring, locale.formatLong, formatterOptions);
    }

    return substring;
  }).join('').match(formattingTokensRegExp).map(function (substring) {
    // Replace two single quote characters with one single quote character
    if (substring === "''") {
      return "'";
    }

    var firstCharacter = substring[0];

    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }

    var formatter = _index5.default[firstCharacter];

    if (formatter) {
      if (!options.useAdditionalWeekYearTokens && (0, _index8.isProtectedWeekYearToken)(substring)) {
        (0, _index8.throwProtectedError)(substring, dirtyFormatStr, dirtyDate);
      }

      if (!options.useAdditionalDayOfYearTokens && (0, _index8.isProtectedDayOfYearToken)(substring)) {
        (0, _index8.throwProtectedError)(substring, dirtyFormatStr, dirtyDate);
      }

      return formatter(utcDate, substring, locale.localize, formatterOptions);
    }

    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
    }

    return substring;
  }).join('');
  return result;
}

function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

module.exports = exports.default;

/***/ }),

/***/ "Rd/+":
/***/ (function(module, exports, __webpack_require__) {

var userAgent = __webpack_require__("9eyx");

var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);

module.exports = !!webkit && +webkit[1];


/***/ }),

/***/ "RmU5":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("8bDY");
var classof = __webpack_require__("r/P8");
var hasOwn = __webpack_require__("PIIU");
var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("h7Xf");

var ArrayPrototype = Array.prototype;

var DOMIterables = {
  DOMTokenList: true,
  NodeList: true
};

module.exports = function (it) {
  var own = it.values;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.values)
    || hasOwn(DOMIterables, classof(it)) ? method : own;
};


/***/ }),

/***/ "Rs/X":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("XQ/X");

var $Error = Error;
var replace = uncurryThis(''.replace);

var TEST = (function (arg) { return String($Error(arg).stack); })('zxcasd');
var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);

module.exports = function (stack, dropEntries) {
  if (IS_V8_OR_CHAKRA_STACK && typeof stack == 'string' && !$Error.prepareStackTrace) {
    while (dropEntries--) stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, '');
  } return stack;
};


/***/ }),

/***/ "S0cN":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var call = __webpack_require__("9fDQ");
var isCallable = __webpack_require__("btm2");
var isObject = __webpack_require__("H3h0");

var TypeError = global.TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "S0iI":
/***/ (function(module, exports) {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;


/***/ }),

/***/ "S1ba":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");

module.exports = function (a, b) {
  var console = global.console;
  if (console && console.error) {
    arguments.length == 1 ? console.error(a) : console.error(a, b);
  }
};


/***/ }),

/***/ "S3pA":
/***/ (function(module, exports, __webpack_require__) {

var baseMatches = __webpack_require__("7/we"),
    baseMatchesProperty = __webpack_require__("KAo/"),
    identity = __webpack_require__("zWgn"),
    isArray = __webpack_require__("wxYD"),
    property = __webpack_require__("1EDM");

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;


/***/ }),

/***/ "SHeM":
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_SYMBOL = __webpack_require__("5TyG");

/* eslint-disable es-x/no-symbol -- safe */
module.exports = NATIVE_SYMBOL && !!Symbol['for'] && !!Symbol.keyFor;


/***/ }),

/***/ "SJov":
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHas(object, key) {
  return object != null && hasOwnProperty.call(object, key);
}

module.exports = baseHas;


/***/ }),

/***/ "SJvO":
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__("H87J");

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return arrayMap(props, function(key) {
    return object[key];
  });
}

module.exports = baseValues;


/***/ }),

/***/ "SO8O":
/***/ (function(module, exports, __webpack_require__) {

var toLength = __webpack_require__("Gpqx");

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function (obj) {
  return toLength(obj.length);
};


/***/ }),

/***/ "SU8Q":
/***/ (function(module, exports) {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;


/***/ }),

/***/ "SeRC":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var isCallable = __webpack_require__("btm2");
var inspectSource = __webpack_require__("8msI");

var WeakMap = global.WeakMap;

module.exports = isCallable(WeakMap) && /native code/.test(inspectSource(WeakMap));


/***/ }),

/***/ "SiwR":
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__("w2Tz"),
    baseSlice = __webpack_require__("0Ocv");

/**
 * Gets the parent value at `path` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path to get the parent value of.
 * @returns {*} Returns the parent value.
 */
function parent(object, path) {
  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
}

module.exports = parent;


/***/ }),

/***/ "SoOq":
/***/ (function(module, exports, __webpack_require__) {

var memoizeCapped = __webpack_require__("0+aC");

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;


/***/ }),

/***/ "SqXu":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var $parseInt = __webpack_require__("z2yT");

// `parseInt` method
// https://tc39.es/ecma262/#sec-parseint-string-radix
$({ global: true, forced: parseInt != $parseInt }, {
  parseInt: $parseInt
});


/***/ }),

/***/ "SwUm":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = startOfUTCISOWeek;

var _index = _interopRequireDefault(__webpack_require__("qxgV"));

var _index2 = _interopRequireDefault(__webpack_require__("8EaA"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function startOfUTCISOWeek(dirtyDate) {
  (0, _index2.default)(1, arguments);
  var weekStartsOn = 1;
  var date = (0, _index.default)(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

module.exports = exports.default;

/***/ }),

/***/ "Syyo":
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__("IBsm");

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ "T6vp":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__("e93E");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("aYSr")(module)))

/***/ }),

/***/ "TAas":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("2gRl");

module.exports = parent;


/***/ }),

/***/ "TApb":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var uncurryThis = __webpack_require__("XQ/X");
var isArray = __webpack_require__("ygwS");

var un$Reverse = uncurryThis([].reverse);
var test = [1, 2];

// `Array.prototype.reverse` method
// https://tc39.es/ecma262/#sec-array.prototype.reverse
// fix for Safari 12.0 bug
// https://bugs.webkit.org/show_bug.cgi?id=188794
$({ target: 'Array', proto: true, forced: String(test) === String(test.reverse()) }, {
  reverse: function reverse() {
    // eslint-disable-next-line no-self-assign -- dirty hack
    if (isArray(this)) this.length = this.length;
    return un$Reverse(this);
  }
});


/***/ }),

/***/ "TAtK":
/***/ (function(module, exports) {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),

/***/ "TPNd":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(__webpack_require__("cDcd"));

var _propTypes = _interopRequireDefault(__webpack_require__("aWzz"));

var _reactDom = _interopRequireDefault(__webpack_require__("faye"));

var _domFns = __webpack_require__("I5Pb");

var _positionFns = __webpack_require__("NPwy");

var _shims = __webpack_require__("cCoX");

var _log = _interopRequireDefault(__webpack_require__("6iX0"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Simple abstraction for dragging events names.
var eventsFor = {
  touch: {
    start: 'touchstart',
    move: 'touchmove',
    stop: 'touchend'
  },
  mouse: {
    start: 'mousedown',
    move: 'mousemove',
    stop: 'mouseup'
  }
}; // Default to mouse events.

var dragEventFor = eventsFor.mouse;
/*:: type DraggableCoreState = {
  dragging: boolean,
  lastX: number,
  lastY: number,
  touchIdentifier: ?number
};*/

/*:: export type DraggableData = {
  node: HTMLElement,
  x: number, y: number,
  deltaX: number, deltaY: number,
  lastX: number, lastY: number,
};*/

/*:: export type DraggableEventHandler = (e: MouseEvent, data: DraggableData) => void | false;*/

/*:: export type ControlPosition = {x: number, y: number};*/

/*:: export type PositionOffsetControlPosition = {x: number|string, y: number|string};*/

/*:: export type DraggableCoreDefaultProps = {
  allowAnyClick: boolean,
  disabled: boolean,
  enableUserSelectHack: boolean,
  onStart: DraggableEventHandler,
  onDrag: DraggableEventHandler,
  onStop: DraggableEventHandler,
  onMouseDown: (e: MouseEvent) => void,
  scale: number,
};*/

/*:: export type DraggableCoreProps = {
  ...DraggableCoreDefaultProps,
  cancel: string,
  children: ReactElement<any>,
  offsetParent: HTMLElement,
  grid: [number, number],
  handle: string,
  nodeRef?: ?React.ElementRef<any>,
};*/

//
// Define <DraggableCore>.
//
// <DraggableCore> is for advanced usage of <Draggable>. It maintains minimal internal state so it can
// work well with libraries that require more control over the element.
//
var DraggableCore = /*#__PURE__*/function (_React$Component) {
  _inherits(DraggableCore, _React$Component);

  var _super = _createSuper(DraggableCore);

  function DraggableCore() {
    var _this;

    _classCallCheck(this, DraggableCore);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      dragging: false,
      // Used while dragging to determine deltas.
      lastX: NaN,
      lastY: NaN,
      touchIdentifier: null
    });

    _defineProperty(_assertThisInitialized(_this), "mounted", false);

    _defineProperty(_assertThisInitialized(_this), "handleDragStart", function (e) {
      // Make it possible to attach event handlers on top of this one.
      _this.props.onMouseDown(e); // Only accept left-clicks.


      if (!_this.props.allowAnyClick && typeof e.button === 'number' && e.button !== 0) return false; // Get nodes. Be sure to grab relative document (could be iframed)

      var thisNode = _this.findDOMNode();

      if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {
        throw new Error('<DraggableCore> not mounted on DragStart!');
      }

      var ownerDocument = thisNode.ownerDocument; // Short circuit if handle or cancel prop was provided and selector doesn't match.

      if (_this.props.disabled || !(e.target instanceof ownerDocument.defaultView.Node) || _this.props.handle && !(0, _domFns.matchesSelectorAndParentsTo)(e.target, _this.props.handle, thisNode) || _this.props.cancel && (0, _domFns.matchesSelectorAndParentsTo)(e.target, _this.props.cancel, thisNode)) {
        return;
      } // Prevent scrolling on mobile devices, like ipad/iphone.
      // Important that this is after handle/cancel.


      if (e.type === 'touchstart') e.preventDefault(); // Set touch identifier in component state if this is a touch event. This allows us to
      // distinguish between individual touches on multitouch screens by identifying which
      // touchpoint was set to this element.

      var touchIdentifier = (0, _domFns.getTouchIdentifier)(e);

      _this.setState({
        touchIdentifier: touchIdentifier
      }); // Get the current drag point from the event. This is used as the offset.


      var position = (0, _positionFns.getControlPosition)(e, touchIdentifier, _assertThisInitialized(_this));
      if (position == null) return; // not possible but satisfies flow

      var x = position.x,
          y = position.y; // Create an event object with all the data parents need to make a decision here.

      var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y);
      (0, _log.default)('DraggableCore: handleDragStart: %j', coreEvent); // Call event handler. If it returns explicit false, cancel.

      (0, _log.default)('calling', _this.props.onStart);

      var shouldUpdate = _this.props.onStart(e, coreEvent);

      if (shouldUpdate === false || _this.mounted === false) return; // Add a style to the body to disable user-select. This prevents text from
      // being selected all over the page.

      if (_this.props.enableUserSelectHack) (0, _domFns.addUserSelectStyles)(ownerDocument); // Initiate dragging. Set the current x and y as offsets
      // so we know how much we've moved during the drag. This allows us
      // to drag elements around even if they have been moved, without issue.

      _this.setState({
        dragging: true,
        lastX: x,
        lastY: y
      }); // Add events to the document directly so we catch when the user's mouse/touch moves outside of
      // this element. We use different events depending on whether or not we have detected that this
      // is a touch-capable device.


      (0, _domFns.addEvent)(ownerDocument, dragEventFor.move, _this.handleDrag);
      (0, _domFns.addEvent)(ownerDocument, dragEventFor.stop, _this.handleDragStop);
    });

    _defineProperty(_assertThisInitialized(_this), "handleDrag", function (e) {
      // Get the current drag point from the event. This is used as the offset.
      var position = (0, _positionFns.getControlPosition)(e, _this.state.touchIdentifier, _assertThisInitialized(_this));
      if (position == null) return;
      var x = position.x,
          y = position.y; // Snap to grid if prop has been provided

      if (Array.isArray(_this.props.grid)) {
        var deltaX = x - _this.state.lastX,
            deltaY = y - _this.state.lastY;

        var _snapToGrid = (0, _positionFns.snapToGrid)(_this.props.grid, deltaX, deltaY);

        var _snapToGrid2 = _slicedToArray(_snapToGrid, 2);

        deltaX = _snapToGrid2[0];
        deltaY = _snapToGrid2[1];
        if (!deltaX && !deltaY) return; // skip useless drag

        x = _this.state.lastX + deltaX, y = _this.state.lastY + deltaY;
      }

      var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y);
      (0, _log.default)('DraggableCore: handleDrag: %j', coreEvent); // Call event handler. If it returns explicit false, trigger end.

      var shouldUpdate = _this.props.onDrag(e, coreEvent);

      if (shouldUpdate === false || _this.mounted === false) {
        try {
          // $FlowIgnore
          _this.handleDragStop(new MouseEvent('mouseup'));
        } catch (err) {
          // Old browsers
          var event = ((document.createEvent('MouseEvents')
          /*: any*/
          )
          /*: MouseTouchEvent*/
          ); // I see why this insanity was deprecated
          // $FlowIgnore

          event.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);

          _this.handleDragStop(event);
        }

        return;
      }

      _this.setState({
        lastX: x,
        lastY: y
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleDragStop", function (e) {
      if (!_this.state.dragging) return;
      var position = (0, _positionFns.getControlPosition)(e, _this.state.touchIdentifier, _assertThisInitialized(_this));
      if (position == null) return;
      var x = position.x,
          y = position.y; // Snap to grid if prop has been provided

      if (Array.isArray(_this.props.grid)) {
        var deltaX = x - _this.state.lastX || 0;
        var deltaY = y - _this.state.lastY || 0;

        var _snapToGrid3 = (0, _positionFns.snapToGrid)(_this.props.grid, deltaX, deltaY);

        var _snapToGrid4 = _slicedToArray(_snapToGrid3, 2);

        deltaX = _snapToGrid4[0];
        deltaY = _snapToGrid4[1];
        x = _this.state.lastX + deltaX, y = _this.state.lastY + deltaY;
      }

      var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y); // Call event handler

      var shouldContinue = _this.props.onStop(e, coreEvent);

      if (shouldContinue === false || _this.mounted === false) return false;

      var thisNode = _this.findDOMNode();

      if (thisNode) {
        // Remove user-select hack
        if (_this.props.enableUserSelectHack) (0, _domFns.removeUserSelectStyles)(thisNode.ownerDocument);
      }

      (0, _log.default)('DraggableCore: handleDragStop: %j', coreEvent); // Reset the el.

      _this.setState({
        dragging: false,
        lastX: NaN,
        lastY: NaN
      });

      if (thisNode) {
        // Remove event handlers
        (0, _log.default)('DraggableCore: Removing handlers');
        (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.move, _this.handleDrag);
        (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.stop, _this.handleDragStop);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onMouseDown", function (e) {
      dragEventFor = eventsFor.mouse; // on touchscreen laptops we could switch back to mouse

      return _this.handleDragStart(e);
    });

    _defineProperty(_assertThisInitialized(_this), "onMouseUp", function (e) {
      dragEventFor = eventsFor.mouse;
      return _this.handleDragStop(e);
    });

    _defineProperty(_assertThisInitialized(_this), "onTouchStart", function (e) {
      // We're on a touch device now, so change the event handlers
      dragEventFor = eventsFor.touch;
      return _this.handleDragStart(e);
    });

    _defineProperty(_assertThisInitialized(_this), "onTouchEnd", function (e) {
      // We're on a touch device now, so change the event handlers
      dragEventFor = eventsFor.touch;
      return _this.handleDragStop(e);
    });

    return _this;
  }

  _createClass(DraggableCore, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mounted = true; // Touch handlers must be added with {passive: false} to be cancelable.
      // https://developers.google.com/web/updates/2017/01/scrolling-intervention

      var thisNode = this.findDOMNode();

      if (thisNode) {
        (0, _domFns.addEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
          passive: false
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.mounted = false; // Remove any leftover event handlers. Remove both touch and mouse handlers in case
      // some browser quirk caused a touch event to fire during a mouse move, or vice versa.

      var thisNode = this.findDOMNode();

      if (thisNode) {
        var ownerDocument = thisNode.ownerDocument;
        (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.move, this.handleDrag);
        (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.move, this.handleDrag);
        (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);
        (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.stop, this.handleDragStop);
        (0, _domFns.removeEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
          passive: false
        });
        if (this.props.enableUserSelectHack) (0, _domFns.removeUserSelectStyles)(ownerDocument);
      }
    } // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find
    // the underlying DOM node ourselves. See the README for more information.

  }, {
    key: "findDOMNode",
    value: function findDOMNode()
    /*: ?HTMLElement*/
    {
      var _this$props, _this$props2, _this$props2$nodeRef;

      return (_this$props = this.props) !== null && _this$props !== void 0 && _this$props.nodeRef ? (_this$props2 = this.props) === null || _this$props2 === void 0 ? void 0 : (_this$props2$nodeRef = _this$props2.nodeRef) === null || _this$props2$nodeRef === void 0 ? void 0 : _this$props2$nodeRef.current : _reactDom.default.findDOMNode(this);
    }
  }, {
    key: "render",
    value: function render()
    /*: React.Element<any>*/
    {
      // Reuse the child provided
      // This makes it flexible to use whatever element is wanted (div, ul, etc)
      return /*#__PURE__*/React.cloneElement(React.Children.only(this.props.children), {
        // Note: mouseMove handler is attached to document so it will still function
        // when the user drags quickly and leaves the bounds of the element.
        onMouseDown: this.onMouseDown,
        onMouseUp: this.onMouseUp,
        // onTouchStart is added on `componentDidMount` so they can be added with
        // {passive: false}, which allows it to cancel. See
        // https://developers.google.com/web/updates/2017/01/scrolling-intervention
        onTouchEnd: this.onTouchEnd
      });
    }
  }]);

  return DraggableCore;
}(React.Component);

exports.default = DraggableCore;

_defineProperty(DraggableCore, "displayName", 'DraggableCore');

_defineProperty(DraggableCore, "propTypes", {
  /**
   * `allowAnyClick` allows dragging using any mouse button.
   * By default, we only accept the left button.
   *
   * Defaults to `false`.
   */
  allowAnyClick: _propTypes.default.bool,

  /**
   * `disabled`, if true, stops the <Draggable> from dragging. All handlers,
   * with the exception of `onMouseDown`, will not fire.
   */
  disabled: _propTypes.default.bool,

  /**
   * By default, we add 'user-select:none' attributes to the document body
   * to prevent ugly text selection during drag. If this is causing problems
   * for your app, set this to `false`.
   */
  enableUserSelectHack: _propTypes.default.bool,

  /**
   * `offsetParent`, if set, uses the passed DOM node to compute drag offsets
   * instead of using the parent node.
   */
  offsetParent: function offsetParent(props
  /*: DraggableCoreProps*/
  , propName
  /*: $Keys<DraggableCoreProps>*/
  ) {
    if (props[propName] && props[propName].nodeType !== 1) {
      throw new Error('Draggable\'s offsetParent must be a DOM Node.');
    }
  },

  /**
   * `grid` specifies the x and y that dragging should snap to.
   */
  grid: _propTypes.default.arrayOf(_propTypes.default.number),

  /**
   * `handle` specifies a selector to be used as the handle that initiates drag.
   *
   * Example:
   *
   * ```jsx
   *   let App = React.createClass({
   *       render: function () {
   *         return (
   *            <Draggable handle=".handle">
   *              <div>
   *                  <div className="handle">Click me to drag</div>
   *                  <div>This is some other content</div>
   *              </div>
   *           </Draggable>
   *         );
   *       }
   *   });
   * ```
   */
  handle: _propTypes.default.string,

  /**
   * `cancel` specifies a selector to be used to prevent drag initialization.
   *
   * Example:
   *
   * ```jsx
   *   let App = React.createClass({
   *       render: function () {
   *           return(
   *               <Draggable cancel=".cancel">
   *                   <div>
   *                     <div className="cancel">You can't drag from here</div>
   *                     <div>Dragging here works fine</div>
   *                   </div>
   *               </Draggable>
   *           );
   *       }
   *   });
   * ```
   */
  cancel: _propTypes.default.string,

  /* If running in React Strict mode, ReactDOM.findDOMNode() is deprecated.
   * Unfortunately, in order for <Draggable> to work properly, we need raw access
   * to the underlying DOM node. If you want to avoid the warning, pass a `nodeRef`
   * as in this example:
   *
   * function MyComponent() {
   *   const nodeRef = React.useRef(null);
   *   return (
   *     <Draggable nodeRef={nodeRef}>
   *       <div ref={nodeRef}>Example Target</div>
   *     </Draggable>
   *   );
   * }
   *
   * This can be used for arbitrarily nested components, so long as the ref ends up
   * pointing to the actual child DOM node and not a custom component.
   */
  nodeRef: _propTypes.default.object,

  /**
   * Called when dragging starts.
   * If this function returns the boolean false, dragging will be canceled.
   */
  onStart: _propTypes.default.func,

  /**
   * Called while dragging.
   * If this function returns the boolean false, dragging will be canceled.
   */
  onDrag: _propTypes.default.func,

  /**
   * Called when dragging stops.
   * If this function returns the boolean false, the drag will remain active.
   */
  onStop: _propTypes.default.func,

  /**
   * A workaround option which can be passed if onMouseDown needs to be accessed,
   * since it'll always be blocked (as there is internal use of onMouseDown)
   */
  onMouseDown: _propTypes.default.func,

  /**
   * `scale`, if set, applies scaling while dragging an element
   */
  scale: _propTypes.default.number,

  /**
   * These properties should be defined on the child, not here.
   */
  className: _shims.dontSetMe,
  style: _shims.dontSetMe,
  transform: _shims.dontSetMe
});

_defineProperty(DraggableCore, "defaultProps", {
  allowAnyClick: false,
  // by default only accept left click
  disabled: false,
  enableUserSelectHack: true,
  onStart: function onStart() {},
  onDrag: function onDrag() {},
  onStop: function onStop() {},
  onMouseDown: function onMouseDown() {},
  scale: 1
});

/***/ }),

/***/ "TRDS":
/***/ (function(module, exports, __webpack_require__) {

var NativePromiseConstructor = __webpack_require__("Mzla");
var checkCorrectnessOfIteration = __webpack_require__("NzBr");
var FORCED_PROMISE_CONSTRUCTOR = __webpack_require__("jIvz").CONSTRUCTOR;

module.exports = FORCED_PROMISE_CONSTRUCTOR || !checkCorrectnessOfIteration(function (iterable) {
  NativePromiseConstructor.all(iterable).then(undefined, function () { /* empty */ });
});


/***/ }),

/***/ "TVq8":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("y2wv");

module.exports = parent;


/***/ }),

/***/ "TgHf":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var call = __webpack_require__("9fDQ");
var aCallable = __webpack_require__("JXge");
var newPromiseCapabilityModule = __webpack_require__("FfgP");
var perform = __webpack_require__("cDK5");
var iterate = __webpack_require__("Zf5/");

// `Promise.allSettled` method
// https://tc39.es/ecma262/#sec-promise.allsettled
$({ target: 'Promise', stat: true }, {
  allSettled: function allSettled(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var promiseResolve = aCallable(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        remaining++;
        call(promiseResolve, C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = { status: 'fulfilled', value: value };
          --remaining || resolve(values);
        }, function (error) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = { status: 'rejected', reason: error };
          --remaining || resolve(values);
        });
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "TqVg":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var uncurryThis = __webpack_require__("XQ/X");
var notARegExp = __webpack_require__("wtyc");
var requireObjectCoercible = __webpack_require__("j0cD");
var toString = __webpack_require__("Xrs4");
var correctIsRegExpLogic = __webpack_require__("sBhu");

var stringIndexOf = uncurryThis(''.indexOf);

// `String.prototype.includes` method
// https://tc39.es/ecma262/#sec-string.prototype.includes
$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~stringIndexOf(
      toString(requireObjectCoercible(this)),
      toString(notARegExp(searchString)),
      arguments.length > 1 ? arguments[1] : undefined
    );
  }
});


/***/ }),

/***/ "Tv3l":
/***/ (function(module, exports, __webpack_require__) {

var hashClear = __webpack_require__("2Fbm"),
    hashDelete = __webpack_require__("VPai"),
    hashGet = __webpack_require__("+fUG"),
    hashHas = __webpack_require__("QMz8"),
    hashSet = __webpack_require__("mUsV");

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),

/***/ "Tycz":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var isArray = __webpack_require__("ygwS");

// `Array.isArray` method
// https://tc39.es/ecma262/#sec-array.isarray
$({ target: 'Array', stat: true }, {
  isArray: isArray
});


/***/ }),

/***/ "U33I":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var $values = __webpack_require__("UEJI").values;

// `Object.values` method
// https://tc39.es/ecma262/#sec-object.values
$({ target: 'Object', stat: true }, {
  values: function values(O) {
    return $values(O);
  }
});


/***/ }),

/***/ "UAs9":
/***/ (function(module, exports, __webpack_require__) {

var apply = __webpack_require__("zaNA");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;


/***/ }),

/***/ "UBkg":
/***/ (function(module, exports, __webpack_require__) {

var baseIsRegExp = __webpack_require__("MDav"),
    baseUnary = __webpack_require__("SU8Q"),
    nodeUtil = __webpack_require__("T6vp");

/* Node.js helper references. */
var nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;

/**
 * Checks if `value` is classified as a `RegExp` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
 * @example
 *
 * _.isRegExp(/abc/);
 * // => true
 *
 * _.isRegExp('/abc/');
 * // => false
 */
var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

module.exports = isRegExp;


/***/ }),

/***/ "UEJI":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("5Jdw");
var uncurryThis = __webpack_require__("XQ/X");
var objectKeys = __webpack_require__("nKVx");
var toIndexedObject = __webpack_require__("VcbD");
var $propertyIsEnumerable = __webpack_require__("0foe").f;

var propertyIsEnumerable = uncurryThis($propertyIsEnumerable);
var push = uncurryThis([].push);

// `Object.{ entries, values }` methods implementation
var createMethod = function (TO_ENTRIES) {
  return function (it) {
    var O = toIndexedObject(it);
    var keys = objectKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || propertyIsEnumerable(O, key)) {
        push(result, TO_ENTRIES ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};

module.exports = {
  // `Object.entries` method
  // https://tc39.es/ecma262/#sec-object.entries
  entries: createMethod(true),
  // `Object.values` method
  // https://tc39.es/ecma262/#sec-object.values
  values: createMethod(false)
};


/***/ }),

/***/ "UO4o":
/***/ (function(module, exports) {



/***/ }),

/***/ "UU7A":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return stopPropagation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return cloneDeep; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getHighLightTextHTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return registerMediaQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return isSemiIcon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getActiveElement; });
/* unused harmony export isNodeContainsFocus */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getFocusableElements; });
/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("2srY");
/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_get__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("DL3M");
/* harmony import */ var lodash_set__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_set__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash_cloneDeepWith__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("NdXQ");
/* harmony import */ var lodash_cloneDeepWith__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_cloneDeepWith__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_array_is_array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("+8d6");
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_array_is_array__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs3_core_js_stable_array_is_array__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_object_keys__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("rVmq");
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_object_keys__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs3_core_js_stable_object_keys__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_instance_for_each__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("w4m/");
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_instance_for_each__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs3_core_js_stable_instance_for_each__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_object_assign__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("lGT8");
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_object_assign__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs3_core_js_stable_object_assign__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_instance_map__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("bIJA");
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_instance_map__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs3_core_js_stable_instance_map__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_array_from__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("Dc5z");
/* harmony import */ var _babel_runtime_corejs3_core_js_stable_array_from__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs3_core_js_stable_array_from__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("cDcd");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _douyinfe_semi_foundation_utils_warning__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("MYbw");
/* harmony import */ var _douyinfe_semi_foundation_utils_getHighlight__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("C5xO");
/* harmony import */ var _douyinfe_semi_foundation_utils_dom__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("Awix");










/* eslint-disable max-len */

/* argus-disable unPkgSensitiveInfo */




/**
 * stop propagation
 *
 * @param {React.MouseEvent<HTMLElement>} e React mouse event object
 * @param {boolean} noImmediate Skip stopping immediate propagation
 */

function stopPropagation(e, noImmediate) {
  if (e && typeof e.stopPropagation === 'function') {
    e.stopPropagation();
  }

  if (!noImmediate && e.nativeEvent && typeof e.nativeEvent.stopImmediatePropagation === 'function') {
    e.nativeEvent.stopImmediatePropagation();
  }
}
/**
 *
 * @param {any} value
 * @param {Function} customizer
 * @returns {any}
 * use in Table, Form, Navigation
 */

function cloneDeep(value, customizer) {
  return lodash_cloneDeepWith__WEBPACK_IMPORTED_MODULE_2___default()(value, v => {
    if (typeof customizer === 'function') {
      return customizer(v);
    }

    if (typeof v === 'function' || /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_9___default.a.isValidElement(v)) {
      return v;
    }

    if (Object.prototype.toString.call(v) === '[object Error]') {
      return v;
    }

    if (_babel_runtime_corejs3_core_js_stable_array_is_array__WEBPACK_IMPORTED_MODULE_3___default()(v) && v.length === 0) {
      const keys = _babel_runtime_corejs3_core_js_stable_object_keys__WEBPACK_IMPORTED_MODULE_4___default()(v);

      if (keys.length) {
        const newArray = [];

        _babel_runtime_corejs3_core_js_stable_instance_for_each__WEBPACK_IMPORTED_MODULE_5___default()(keys).call(keys, key => {
          lodash_set__WEBPACK_IMPORTED_MODULE_1___default()(newArray, key, v[key]);
        }); // internal-issues:887


        Object(_douyinfe_semi_foundation_utils_warning__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"])(lodash_get__WEBPACK_IMPORTED_MODULE_0___default()(process, 'env.NODE_ENV') !== 'production', "[Semi] You may use an out-of-bounds array. In some cases, your program may not behave as expected.\n                    The maximum length of an array is 4294967295.\n                    Please check whether the array subscript in your data exceeds the maximum value of the JS array subscript");
        return newArray;
      } else {
        return undefined;
      }
    }

    return undefined;
  });
}
/**
 * [getHighLightTextHTML description]
 *
 * @param   {string} sourceString [source content text]
 * @param   {Array<string>} searchWords [keywords to be highlighted]
 * @param   {object} option
 * @param   {true}      option.highlightTag [The tag wrapped by the highlighted content, mark is used by default]
 * @param   {true}      option.highlightClassName
 * @param   {true}      option.highlightStyle
 * @param   {boolean}   option.caseSensitive
 *
 * @return  {Array<object>}
 */

const getHighLightTextHTML = _ref => {
  let {
    sourceString = '',
    searchWords = [],
    option = {
      autoEscape: true,
      caseSensitive: false
    }
  } = _ref;
  const chunks = Object(_douyinfe_semi_foundation_utils_getHighlight__WEBPACK_IMPORTED_MODULE_11__[/* findAll */ "a"])(_babel_runtime_corejs3_core_js_stable_object_assign__WEBPACK_IMPORTED_MODULE_6___default()({
    sourceString,
    searchWords
  }, option));
  const markEle = option.highlightTag || 'mark';
  const highlightClassName = option.highlightClassName || '';
  const highlightStyle = option.highlightStyle || {};
  return _babel_runtime_corejs3_core_js_stable_instance_map__WEBPACK_IMPORTED_MODULE_7___default()(chunks).call(chunks, (chunk, index) => {
    const {
      end,
      start,
      highlight
    } = chunk;
    const text = sourceString.substr(start, end - start);

    if (highlight) {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement(markEle, {
        style: highlightStyle,
        className: highlightClassName,
        key: text + index
      }, text);
    } else {
      return text;
    }
  });
};
/**
 * register matchFn and unMatchFn callback while media query
 * @param {string} media media string
 * @param {object} param param object
 * @returns function
 */

const registerMediaQuery = (media, _ref2) => {
  let {
    match,
    unmatch,
    callInInit = true
  } = _ref2;

  if (typeof window !== 'undefined') {
    const mediaQueryList = window.matchMedia(media);

    function handlerMediaChange(e) {
      if (e.matches) {
        match && match(e);
      } else {
        unmatch && unmatch(e);
      }
    }

    callInInit && handlerMediaChange(mediaQueryList);

    if (Object.prototype.hasOwnProperty.call(mediaQueryList, 'addEventListener')) {
      mediaQueryList.addEventListener('change', handlerMediaChange);
      return () => mediaQueryList.removeEventListener('change', handlerMediaChange);
    }

    mediaQueryList.addListener(handlerMediaChange);
    return () => mediaQueryList.removeListener(handlerMediaChange);
  }

  return () => undefined;
};
/**
 * Determine whether the incoming element is a built-in icon
 * @param icon 元素
 * @returns boolean
 */

const isSemiIcon = icon => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_9___default.a.isValidElement(icon) && lodash_get__WEBPACK_IMPORTED_MODULE_0___default()(icon.type, 'elementType') === 'Icon';
function getActiveElement() {
  return document ? document.activeElement : null;
}
function isNodeContainsFocus(node) {
  const activeElement = getActiveElement();
  return activeElement === node || node.contains(activeElement);
}
function getFocusableElements(node) {
  if (!Object(_douyinfe_semi_foundation_utils_dom__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"])(node)) {
    return [];
  }

  const focusableSelectorsList = ["input:not([disabled]):not([tabindex='-1'])", "textarea:not([disabled]):not([tabindex='-1'])", "button:not([disabled]):not([tabindex='-1'])", "a[href]:not([tabindex='-1'])", "select:not([disabled]):not([tabindex='-1'])", "area[href]:not([tabindex='-1'])", "iframe:not([tabindex='-1'])", "object:not([tabindex='-1'])", "*[tabindex]:not([tabindex='-1'])", "*[contenteditable]:not([tabindex='-1'])"];
  const focusableSelectorsStr = focusableSelectorsList.join(','); // we are not filtered elements which are invisible

  const focusableElements = _babel_runtime_corejs3_core_js_stable_array_from__WEBPACK_IMPORTED_MODULE_8___default()(node.querySelectorAll(focusableSelectorsStr));

  return focusableElements;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("F63i")))

/***/ }),

/***/ "Udow":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("8NmK");

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.lastIndexOf;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.lastIndexOf) ? method : own;
};


/***/ }),

/***/ "UdtX":
/***/ (function(module, exports, __webpack_require__) {

var createBaseFor = __webpack_require__("RFxK");

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;


/***/ }),

/***/ "Uh/D":
/***/ (function(module, exports) {

module.exports = function () { /* empty */ };


/***/ }),

/***/ "Utz3":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("0i+n");

/***/ }),

/***/ "VFLD":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("HXNI");
var path = __webpack_require__("j0PW");

module.exports = path.Object.getOwnPropertySymbols;


/***/ }),

/***/ "VPai":
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),

/***/ "VQVM":
/***/ (function(module, exports) {



/***/ }),

/***/ "VYEZ":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");

var TypeError = global.TypeError;

module.exports = function (passed, required) {
  if (passed < required) throw TypeError('Not enough arguments');
  return passed;
};


/***/ }),

/***/ "VcbD":
/***/ (function(module, exports, __webpack_require__) {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__("fDXD");
var requireObjectCoercible = __webpack_require__("j0cD");

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ "Vl7J":
/***/ (function(module, exports) {

module.exports = true;


/***/ }),

/***/ "W0vE":
/***/ (function(module, exports) {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;


/***/ }),

/***/ "WO6V":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var call = __webpack_require__("9fDQ");
var newPromiseCapabilityModule = __webpack_require__("FfgP");
var FORCED_PROMISE_CONSTRUCTOR = __webpack_require__("jIvz").CONSTRUCTOR;

// `Promise.reject` method
// https://tc39.es/ecma262/#sec-promise.reject
$({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
  reject: function reject(r) {
    var capability = newPromiseCapabilityModule.f(this);
    call(capability.reject, undefined, r);
    return capability.promise;
  }
});


/***/ }),

/***/ "WRdu":
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_WEAK_MAP = __webpack_require__("SeRC");
var global = __webpack_require__("oNh+");
var uncurryThis = __webpack_require__("XQ/X");
var isObject = __webpack_require__("H3h0");
var createNonEnumerableProperty = __webpack_require__("jNzf");
var hasOwn = __webpack_require__("PIIU");
var shared = __webpack_require__("yULr");
var sharedKey = __webpack_require__("iDMO");
var hiddenKeys = __webpack_require__("lyTg");

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError = global.TypeError;
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  var wmget = uncurryThis(store.get);
  var wmhas = uncurryThis(store.has);
  var wmset = uncurryThis(store.set);
  set = function (it, metadata) {
    if (wmhas(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    wmset(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget(store, it) || {};
  };
  has = function (it) {
    return wmhas(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return hasOwn(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwn(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ "WTd3":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("XQ/X");

var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);

module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};


/***/ }),

/***/ "WbkG":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("HVcX");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';


/***/ }),

/***/ "Wud5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = buildMatchPatternFn;

function buildMatchPatternFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}

module.exports = exports.default;

/***/ }),

/***/ "X+IB":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("mm5/");

module.exports = parent;


/***/ }),

/***/ "X+YX":
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__("JBn+"),
    arrayIncludes = __webpack_require__("OfKG"),
    arrayIncludesWith = __webpack_require__("sCL+"),
    arrayMap = __webpack_require__("H87J"),
    baseUnary = __webpack_require__("SU8Q"),
    cacheHas = __webpack_require__("S0iI");

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */
function baseDifference(array, values, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }
  if (iteratee) {
    values = arrayMap(values, baseUnary(iteratee));
  }
  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  }
  else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee == null ? value : iteratee(value);

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }
      result.push(value);
    }
    else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }
  return result;
}

module.exports = baseDifference;


/***/ }),

/***/ "X4R2":
/***/ (function(module, exports) {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),

/***/ "X7cO":
/***/ (function(module, exports) {

// empty


/***/ }),

/***/ "X9hi":
/***/ (function(module, exports) {



/***/ }),

/***/ "X9nO":
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__("r/P8");
var getMethod = __webpack_require__("fEH3");
var Iterators = __webpack_require__("m/wn");
var wellKnownSymbol = __webpack_require__("HVcX");

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (it != undefined) return getMethod(it, ITERATOR)
    || getMethod(it, '@@iterator')
    || Iterators[classof(it)];
};


/***/ }),

/***/ "XKxo":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};

var formatRelative = function (token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};

var _default = formatRelative;
exports.default = _default;
module.exports = exports.default;

/***/ }),

/***/ "XQ/X":
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_BIND = __webpack_require__("Oksd");

var FunctionPrototype = Function.prototype;
var bind = FunctionPrototype.bind;
var call = FunctionPrototype.call;
var uncurryThis = NATIVE_BIND && bind.bind(call, call);

module.exports = NATIVE_BIND ? function (fn) {
  return fn && uncurryThis(fn);
} : function (fn) {
  return fn && function () {
    return call.apply(fn, arguments);
  };
};


/***/ }),

/***/ "XRsG":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var isArray = __webpack_require__("ygwS");
var isConstructor = __webpack_require__("mqoN");
var isObject = __webpack_require__("H3h0");
var wellKnownSymbol = __webpack_require__("HVcX");

var SPECIES = wellKnownSymbol('species');
var Array = global.Array;

// a part of `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (isConstructor(C) && (C === Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),

/***/ "XU0c":
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ "Xidw":
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__("y/9h"),
    getPrototype = __webpack_require__("/wCD"),
    getSymbols = __webpack_require__("70Le"),
    stubArray = __webpack_require__("X4R2");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;


/***/ }),

/***/ "XlL0":
/***/ (function(module, exports) {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;


/***/ }),

/***/ "Xm/D":
/***/ (function(module, exports) {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

module.exports = unicodeToArray;


/***/ }),

/***/ "Xrs4":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var classof = __webpack_require__("r/P8");

var String = global.String;

module.exports = function (argument) {
  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
  return String(argument);
};


/***/ }),

/***/ "Y9n4":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("lv3h");
__webpack_require__("O589");
__webpack_require__("X7cO");
__webpack_require__("91A9");
var path = __webpack_require__("j0PW");

module.exports = path.Map;


/***/ }),

/***/ "YPef":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("nVA8");

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.splice;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.splice) ? method : own;
};


/***/ }),

/***/ "Yg9c":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("TqVg");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('String').includes;


/***/ }),

/***/ "YiZF":
/***/ (function(module, exports, __webpack_require__) {

// FF26- bug: ArrayBuffers are non-extensible, but Object.isExtensible does not report it
var fails = __webpack_require__("XU0c");

module.exports = fails(function () {
  if (typeof ArrayBuffer == 'function') {
    var buffer = new ArrayBuffer(8);
    // eslint-disable-next-line es-x/no-object-isextensible, es-x/no-object-defineproperty -- safe
    if (Object.isExtensible(buffer)) Object.defineProperty(buffer, 'a', { value: 8 });
  }
});


/***/ }),

/***/ "YjNL":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),

/***/ "YkBG":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("lOCh");

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.indexOf;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.indexOf) ? method : own;
};


/***/ }),

/***/ "Yosg":
/***/ (function(module, exports) {

var Queue = function () {
  this.head = null;
  this.tail = null;
};

Queue.prototype = {
  add: function (item) {
    var entry = { item: item, next: null };
    if (this.head) this.tail.next = entry;
    else this.head = entry;
    this.tail = entry;
  },
  get: function () {
    var entry = this.head;
    if (entry) {
      this.head = entry.next;
      if (this.tail === entry) this.tail = null;
      return entry.item;
    }
  }
};

module.exports = Queue;


/***/ }),

/***/ "YpBQ":
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__("y/9h"),
    isFlattenable = __webpack_require__("oCTG");

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

module.exports = baseFlatten;


/***/ }),

/***/ "Ypsa":
/***/ (function(module, exports, __webpack_require__) {

var isSymbol = __webpack_require__("a88S");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;


/***/ }),

/***/ "YsqY":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
__webpack_require__("lv3h");
var $ = __webpack_require__("n9AK");
var global = __webpack_require__("oNh+");
var call = __webpack_require__("9fDQ");
var uncurryThis = __webpack_require__("XQ/X");
var DESCRIPTORS = __webpack_require__("5Jdw");
var USE_NATIVE_URL = __webpack_require__("crqh");
var redefine = __webpack_require__("yX36");
var redefineAll = __webpack_require__("mKZK");
var setToStringTag = __webpack_require__("CtlU");
var createIteratorConstructor = __webpack_require__("DTge");
var InternalStateModule = __webpack_require__("WRdu");
var anInstance = __webpack_require__("QjcZ");
var isCallable = __webpack_require__("btm2");
var hasOwn = __webpack_require__("PIIU");
var bind = __webpack_require__("9X0z");
var classof = __webpack_require__("r/P8");
var anObject = __webpack_require__("LTNl");
var isObject = __webpack_require__("H3h0");
var $toString = __webpack_require__("Xrs4");
var create = __webpack_require__("By9b");
var createPropertyDescriptor = __webpack_require__("96pp");
var getIterator = __webpack_require__("OltT");
var getIteratorMethod = __webpack_require__("X9nO");
var validateArgumentsLength = __webpack_require__("VYEZ");
var wellKnownSymbol = __webpack_require__("HVcX");
var arraySort = __webpack_require__("n7tI");

var ITERATOR = wellKnownSymbol('iterator');
var URL_SEARCH_PARAMS = 'URLSearchParams';
var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
var setInternalState = InternalStateModule.set;
var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Avoid NodeJS experimental warning
var safeGetBuiltIn = function (name) {
  if (!DESCRIPTORS) return global[name];
  var descriptor = getOwnPropertyDescriptor(global, name);
  return descriptor && descriptor.value;
};

var nativeFetch = safeGetBuiltIn('fetch');
var NativeRequest = safeGetBuiltIn('Request');
var Headers = safeGetBuiltIn('Headers');
var RequestPrototype = NativeRequest && NativeRequest.prototype;
var HeadersPrototype = Headers && Headers.prototype;
var RegExp = global.RegExp;
var TypeError = global.TypeError;
var decodeURIComponent = global.decodeURIComponent;
var encodeURIComponent = global.encodeURIComponent;
var charAt = uncurryThis(''.charAt);
var join = uncurryThis([].join);
var push = uncurryThis([].push);
var replace = uncurryThis(''.replace);
var shift = uncurryThis([].shift);
var splice = uncurryThis([].splice);
var split = uncurryThis(''.split);
var stringSlice = uncurryThis(''.slice);

var plus = /\+/g;
var sequences = Array(4);

var percentSequence = function (bytes) {
  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
};

var percentDecode = function (sequence) {
  try {
    return decodeURIComponent(sequence);
  } catch (error) {
    return sequence;
  }
};

var deserialize = function (it) {
  var result = replace(it, plus, ' ');
  var bytes = 4;
  try {
    return decodeURIComponent(result);
  } catch (error) {
    while (bytes) {
      result = replace(result, percentSequence(bytes--), percentDecode);
    }
    return result;
  }
};

var find = /[!'()~]|%20/g;

var replacements = {
  '!': '%21',
  "'": '%27',
  '(': '%28',
  ')': '%29',
  '~': '%7E',
  '%20': '+'
};

var replacer = function (match) {
  return replacements[match];
};

var serialize = function (it) {
  return replace(encodeURIComponent(it), find, replacer);
};

var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
  setInternalState(this, {
    type: URL_SEARCH_PARAMS_ITERATOR,
    iterator: getIterator(getInternalParamsState(params).entries),
    kind: kind
  });
}, 'Iterator', function next() {
  var state = getInternalIteratorState(this);
  var kind = state.kind;
  var step = state.iterator.next();
  var entry = step.value;
  if (!step.done) {
    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
  } return step;
}, true);

var URLSearchParamsState = function (init) {
  this.entries = [];
  this.url = null;

  if (init !== undefined) {
    if (isObject(init)) this.parseObject(init);
    else this.parseQuery(typeof init == 'string' ? charAt(init, 0) === '?' ? stringSlice(init, 1) : init : $toString(init));
  }
};

URLSearchParamsState.prototype = {
  type: URL_SEARCH_PARAMS,
  bindURL: function (url) {
    this.url = url;
    this.update();
  },
  parseObject: function (object) {
    var iteratorMethod = getIteratorMethod(object);
    var iterator, next, step, entryIterator, entryNext, first, second;

    if (iteratorMethod) {
      iterator = getIterator(object, iteratorMethod);
      next = iterator.next;
      while (!(step = call(next, iterator)).done) {
        entryIterator = getIterator(anObject(step.value));
        entryNext = entryIterator.next;
        if (
          (first = call(entryNext, entryIterator)).done ||
          (second = call(entryNext, entryIterator)).done ||
          !call(entryNext, entryIterator).done
        ) throw TypeError('Expected sequence with length 2');
        push(this.entries, { key: $toString(first.value), value: $toString(second.value) });
      }
    } else for (var key in object) if (hasOwn(object, key)) {
      push(this.entries, { key: key, value: $toString(object[key]) });
    }
  },
  parseQuery: function (query) {
    if (query) {
      var attributes = split(query, '&');
      var index = 0;
      var attribute, entry;
      while (index < attributes.length) {
        attribute = attributes[index++];
        if (attribute.length) {
          entry = split(attribute, '=');
          push(this.entries, {
            key: deserialize(shift(entry)),
            value: deserialize(join(entry, '='))
          });
        }
      }
    }
  },
  serialize: function () {
    var entries = this.entries;
    var result = [];
    var index = 0;
    var entry;
    while (index < entries.length) {
      entry = entries[index++];
      push(result, serialize(entry.key) + '=' + serialize(entry.value));
    } return join(result, '&');
  },
  update: function () {
    this.entries.length = 0;
    this.parseQuery(this.url.query);
  },
  updateURL: function () {
    if (this.url) this.url.update();
  }
};

// `URLSearchParams` constructor
// https://url.spec.whatwg.org/#interface-urlsearchparams
var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
  anInstance(this, URLSearchParamsPrototype);
  var init = arguments.length > 0 ? arguments[0] : undefined;
  setInternalState(this, new URLSearchParamsState(init));
};

var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

redefineAll(URLSearchParamsPrototype, {
  // `URLSearchParams.prototype.append` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
  append: function append(name, value) {
    validateArgumentsLength(arguments.length, 2);
    var state = getInternalParamsState(this);
    push(state.entries, { key: $toString(name), value: $toString(value) });
    state.updateURL();
  },
  // `URLSearchParams.prototype.delete` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
  'delete': function (name) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var key = $toString(name);
    var index = 0;
    while (index < entries.length) {
      if (entries[index].key === key) splice(entries, index, 1);
      else index++;
    }
    state.updateURL();
  },
  // `URLSearchParams.prototype.get` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
  get: function get(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = $toString(name);
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) return entries[index].value;
    }
    return null;
  },
  // `URLSearchParams.prototype.getAll` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
  getAll: function getAll(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = $toString(name);
    var result = [];
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) push(result, entries[index].value);
    }
    return result;
  },
  // `URLSearchParams.prototype.has` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
  has: function has(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = $toString(name);
    var index = 0;
    while (index < entries.length) {
      if (entries[index++].key === key) return true;
    }
    return false;
  },
  // `URLSearchParams.prototype.set` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
  set: function set(name, value) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var found = false;
    var key = $toString(name);
    var val = $toString(value);
    var index = 0;
    var entry;
    for (; index < entries.length; index++) {
      entry = entries[index];
      if (entry.key === key) {
        if (found) splice(entries, index--, 1);
        else {
          found = true;
          entry.value = val;
        }
      }
    }
    if (!found) push(entries, { key: key, value: val });
    state.updateURL();
  },
  // `URLSearchParams.prototype.sort` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
  sort: function sort() {
    var state = getInternalParamsState(this);
    arraySort(state.entries, function (a, b) {
      return a.key > b.key ? 1 : -1;
    });
    state.updateURL();
  },
  // `URLSearchParams.prototype.forEach` method
  forEach: function forEach(callback /* , thisArg */) {
    var entries = getInternalParamsState(this).entries;
    var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined);
    var index = 0;
    var entry;
    while (index < entries.length) {
      entry = entries[index++];
      boundFunction(entry.value, entry.key, this);
    }
  },
  // `URLSearchParams.prototype.keys` method
  keys: function keys() {
    return new URLSearchParamsIterator(this, 'keys');
  },
  // `URLSearchParams.prototype.values` method
  values: function values() {
    return new URLSearchParamsIterator(this, 'values');
  },
  // `URLSearchParams.prototype.entries` method
  entries: function entries() {
    return new URLSearchParamsIterator(this, 'entries');
  }
}, { enumerable: true });

// `URLSearchParams.prototype[@@iterator]` method
redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries, { name: 'entries' });

// `URLSearchParams.prototype.toString` method
// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
redefine(URLSearchParamsPrototype, 'toString', function toString() {
  return getInternalParamsState(this).serialize();
}, { enumerable: true });

setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

$({ global: true, forced: !USE_NATIVE_URL }, {
  URLSearchParams: URLSearchParamsConstructor
});

// Wrap `fetch` and `Request` for correct work with polyfilled `URLSearchParams`
if (!USE_NATIVE_URL && isCallable(Headers)) {
  var headersHas = uncurryThis(HeadersPrototype.has);
  var headersSet = uncurryThis(HeadersPrototype.set);

  var wrapRequestOptions = function (init) {
    if (isObject(init)) {
      var body = init.body;
      var headers;
      if (classof(body) === URL_SEARCH_PARAMS) {
        headers = init.headers ? new Headers(init.headers) : new Headers();
        if (!headersHas(headers, 'content-type')) {
          headersSet(headers, 'content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
        return create(init, {
          body: createPropertyDescriptor(0, $toString(body)),
          headers: createPropertyDescriptor(0, headers)
        });
      }
    } return init;
  };

  if (isCallable(nativeFetch)) {
    $({ global: true, enumerable: true, noTargetGet: true, forced: true }, {
      fetch: function fetch(input /* , init */) {
        return nativeFetch(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
      }
    });
  }

  if (isCallable(NativeRequest)) {
    var RequestConstructor = function Request(input /* , init */) {
      anInstance(this, RequestPrototype);
      return new NativeRequest(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
    };

    RequestPrototype.constructor = RequestConstructor;
    RequestConstructor.prototype = RequestPrototype;

    $({ global: true, forced: true, noTargetGet: true }, {
      Request: RequestConstructor
    });
  }
}

module.exports = {
  URLSearchParams: URLSearchParamsConstructor,
  getState: getInternalParamsState
};


/***/ }),

/***/ "YzuV":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("yZNQ");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').find;


/***/ }),

/***/ "ZIXj":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("DXf7");

/***/ }),

/***/ "ZKWU":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var $entries = __webpack_require__("UEJI").entries;

// `Object.entries` method
// https://tc39.es/ecma262/#sec-object.entries
$({ target: 'Object', stat: true }, {
  entries: function entries(O) {
    return $entries(O);
  }
});


/***/ }),

/***/ "ZSZW":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");

var String = global.String;

module.exports = function (argument) {
  try {
    return String(argument);
  } catch (error) {
    return 'Object';
  }
};


/***/ }),

/***/ "ZZ+W":
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__("JBn+"),
    arraySome = __webpack_require__("myUI"),
    cacheHas = __webpack_require__("S0iI");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;


/***/ }),

/***/ "Zf5/":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var bind = __webpack_require__("9X0z");
var call = __webpack_require__("9fDQ");
var anObject = __webpack_require__("LTNl");
var tryToString = __webpack_require__("ZSZW");
var isArrayIteratorMethod = __webpack_require__("4a5I");
var lengthOfArrayLike = __webpack_require__("SO8O");
var isPrototypeOf = __webpack_require__("cZmh");
var getIterator = __webpack_require__("OltT");
var getIteratorMethod = __webpack_require__("X9nO");
var iteratorClose = __webpack_require__("PnYF");

var TypeError = global.TypeError;

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var ResultPrototype = Result.prototype;

module.exports = function (iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn = bind(unboundFunction, that);
  var iterator, iterFn, index, length, result, next, step;

  var stop = function (condition) {
    if (iterator) iteratorClose(iterator, 'normal', condition);
    return new Result(true, condition);
  };

  var callFn = function (value) {
    if (AS_ENTRIES) {
      anObject(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    } return INTERRUPTED ? fn(value, stop) : fn(value);
  };

  if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (!iterFn) throw TypeError(tryToString(iterable) + ' is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
        result = callFn(iterable[index]);
        if (result && isPrototypeOf(ResultPrototype, result)) return result;
      } return new Result(false);
    }
    iterator = getIterator(iterable, iterFn);
  }

  next = iterator.next;
  while (!(step = call(next, iterator)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator, 'throw', error);
    }
    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;
  } return new Result(false);
};


/***/ }),

/***/ "ZfxR":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = startOfUTCWeekYear;

var _index = _interopRequireDefault(__webpack_require__("DKl7"));

var _index2 = _interopRequireDefault(__webpack_require__("8EaA"));

var _index3 = _interopRequireDefault(__webpack_require__("ivxi"));

var _index4 = _interopRequireDefault(__webpack_require__("yuhP"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
  (0, _index2.default)(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : (0, _index4.default)(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : (0, _index4.default)(options.firstWeekContainsDate);
  var year = (0, _index.default)(dirtyDate, dirtyOptions);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = (0, _index3.default)(firstWeek, dirtyOptions);
  return date;
}

module.exports = exports.default;

/***/ }),

/***/ "ZjRn":
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__("HsnV"),
    baseIsEqual = __webpack_require__("NYSw");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;


/***/ }),

/***/ "ZqhF":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("c58X");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').every;


/***/ }),

/***/ "a49g":
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__("xoyU"),
    last = __webpack_require__("p1C/"),
    parent = __webpack_require__("SiwR"),
    toKey = __webpack_require__("Ypsa");

/**
 * The base implementation of `_.unset`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The property path to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 */
function baseUnset(object, path) {
  path = castPath(path, object);
  object = parent(object, path);
  return object == null || delete object[toKey(last(path))];
}

module.exports = baseUnset;


/***/ }),

/***/ "a5Wr":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("Fu/f");

module.exports = parent;


/***/ }),

/***/ "a637":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("4/36");

/***/ }),

/***/ "a88S":
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__("Dhk8"),
    isObjectLike = __webpack_require__("tLQN");

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ "aBaL":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = startOfUTCISOWeekYear;

var _index = _interopRequireDefault(__webpack_require__("cQI/"));

var _index2 = _interopRequireDefault(__webpack_require__("SwUm"));

var _index3 = _interopRequireDefault(__webpack_require__("8EaA"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function startOfUTCISOWeekYear(dirtyDate) {
  (0, _index3.default)(1, arguments);
  var year = (0, _index.default)(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = (0, _index2.default)(fourthOfJanuary);
  return date;
}

module.exports = exports.default;

/***/ }),

/***/ "aURW":
/***/ (function(module, exports) {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;


/***/ }),

/***/ "aWzz":
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (false) { var throwOnDirectAccess, ReactIs; } else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__("emlf")();
}


/***/ }),

/***/ "aYSr":
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "aZ/c":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var fails = __webpack_require__("XU0c");
var uncurryThis = __webpack_require__("XQ/X");
var toString = __webpack_require__("Xrs4");
var trim = __webpack_require__("2K/m").trim;
var whitespaces = __webpack_require__("3sPw");

var charAt = uncurryThis(''.charAt);
var n$ParseFloat = global.parseFloat;
var Symbol = global.Symbol;
var ITERATOR = Symbol && Symbol.iterator;
var FORCED = 1 / n$ParseFloat(whitespaces + '-0') !== -Infinity
  // MS Edge 18- broken with boxed symbols
  || (ITERATOR && !fails(function () { n$ParseFloat(Object(ITERATOR)); }));

// `parseFloat` method
// https://tc39.es/ecma262/#sec-parsefloat-string
module.exports = FORCED ? function parseFloat(string) {
  var trimmedString = trim(toString(string));
  var result = n$ParseFloat(trimmedString);
  return result === 0 && charAt(trimmedString, 0) == '-' ? -0 : result;
} : n$ParseFloat;


/***/ }),

/***/ "aidk":
/***/ (function(module, exports) {



/***/ }),

/***/ "amiU":
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__("wC3K"),
    eq = __webpack_require__("pPzx");

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignMergeValue;


/***/ }),

/***/ "ao9h":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("lv3h");
__webpack_require__("X7cO");
__webpack_require__("Oetr");
__webpack_require__("91A9");
var path = __webpack_require__("j0PW");

module.exports = path.Set;


/***/ }),

/***/ "apkA":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("XQ/X");

var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);

module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};


/***/ }),

/***/ "au0Q":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("jA1f");

var FunctionPrototype = Function.prototype;

module.exports = function (it) {
  var own = it.bind;
  return it === FunctionPrototype || (isPrototypeOf(FunctionPrototype, it) && own === FunctionPrototype.bind) ? method : own;
};


/***/ }),

/***/ "au4q":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var getBuiltIn = __webpack_require__("wF8L");
var isCallable = __webpack_require__("btm2");
var isPrototypeOf = __webpack_require__("cZmh");
var USE_SYMBOL_AS_UID = __webpack_require__("EZwN");

var Object = global.Object;

module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, Object(it));
};


/***/ }),

/***/ "avNT":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var assign = __webpack_require__("cpF+");

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
// eslint-disable-next-line es-x/no-object-assign -- required for testing
$({ target: 'Object', stat: true, forced: Object.assign !== assign }, {
  assign: assign
});


/***/ }),

/***/ "b96R":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

/* eslint no-console:0 */
var formatRegExp = /%[sdj%]/g;
var warning = function warning() {}; // don't print warning message when in production env or node runtime

if (typeof process !== 'undefined' && Object({"NODE_ENV":"production","PUBLIC_URL":undefined}) && "production" !== 'production' && typeof window !== 'undefined' && typeof document !== 'undefined') {
  warning = function warning(type, errors) {
    if (typeof console !== 'undefined' && console.warn) {
      if (errors.every(function (e) {
        return typeof e === 'string';
      })) {
        console.warn(type, errors);
      }
    }
  };
}

function convertFieldsError(errors) {
  if (!errors || !errors.length) return null;
  var fields = {};
  errors.forEach(function (error) {
    var field = error.field;
    fields[field] = fields[field] || [];
    fields[field].push(error);
  });
  return fields;
}
function format() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var i = 1;
  var f = args[0];
  var len = args.length;

  if (typeof f === 'function') {
    return f.apply(null, args.slice(1));
  }

  if (typeof f === 'string') {
    var str = String(f).replace(formatRegExp, function (x) {
      if (x === '%%') {
        return '%';
      }

      if (i >= len) {
        return x;
      }

      switch (x) {
        case '%s':
          return String(args[i++]);

        case '%d':
          return Number(args[i++]);

        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }

          break;

        default:
          return x;
      }
    });
    return str;
  }

  return f;
}

function isNativeStringType(type) {
  return type === 'string' || type === 'url' || type === 'hex' || type === 'email' || type === 'date' || type === 'pattern';
}

function isEmptyValue(value, type) {
  if (value === undefined || value === null) {
    return true;
  }

  if (type === 'array' && Array.isArray(value) && !value.length) {
    return true;
  }

  if (isNativeStringType(type) && typeof value === 'string' && !value) {
    return true;
  }

  return false;
}

function asyncParallelArray(arr, func, callback) {
  var results = [];
  var total = 0;
  var arrLength = arr.length;

  function count(errors) {
    results.push.apply(results, errors);
    total++;

    if (total === arrLength) {
      callback(results);
    }
  }

  arr.forEach(function (a) {
    func(a, count);
  });
}

function asyncSerialArray(arr, func, callback) {
  var index = 0;
  var arrLength = arr.length;

  function next(errors) {
    if (errors && errors.length) {
      callback(errors);
      return;
    }

    var original = index;
    index = index + 1;

    if (original < arrLength) {
      func(arr[original], next);
    } else {
      callback([]);
    }
  }

  next([]);
}

function flattenObjArr(objArr) {
  var ret = [];
  Object.keys(objArr).forEach(function (k) {
    ret.push.apply(ret, objArr[k]);
  });
  return ret;
}

var AsyncValidationError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(AsyncValidationError, _Error);

  function AsyncValidationError(errors, fields) {
    var _this;

    _this = _Error.call(this, 'Async Validation Error') || this;
    _this.errors = errors;
    _this.fields = fields;
    return _this;
  }

  return AsyncValidationError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
function asyncMap(objArr, option, func, callback) {
  if (option.first) {
    var _pending = new Promise(function (resolve, reject) {
      var next = function next(errors) {
        callback(errors);
        return errors.length ? reject(new AsyncValidationError(errors, convertFieldsError(errors))) : resolve();
      };

      var flattenArr = flattenObjArr(objArr);
      asyncSerialArray(flattenArr, func, next);
    });

    _pending["catch"](function (e) {
      return e;
    });

    return _pending;
  }

  var firstFields = option.firstFields || [];

  if (firstFields === true) {
    firstFields = Object.keys(objArr);
  }

  var objArrKeys = Object.keys(objArr);
  var objArrLength = objArrKeys.length;
  var total = 0;
  var results = [];
  var pending = new Promise(function (resolve, reject) {
    var next = function next(errors) {
      results.push.apply(results, errors);
      total++;

      if (total === objArrLength) {
        callback(results);
        return results.length ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve();
      }
    };

    if (!objArrKeys.length) {
      callback(results);
      resolve();
    }

    objArrKeys.forEach(function (key) {
      var arr = objArr[key];

      if (firstFields.indexOf(key) !== -1) {
        asyncSerialArray(arr, func, next);
      } else {
        asyncParallelArray(arr, func, next);
      }
    });
  });
  pending["catch"](function (e) {
    return e;
  });
  return pending;
}
function complementError(rule) {
  return function (oe) {
    if (oe && oe.message) {
      oe.field = oe.field || rule.fullField;
      return oe;
    }

    return {
      message: typeof oe === 'function' ? oe() : oe,
      field: oe.field || rule.fullField
    };
  };
}
function deepMerge(target, source) {
  if (source) {
    for (var s in source) {
      if (source.hasOwnProperty(s)) {
        var value = source[s];

        if (typeof value === 'object' && typeof target[s] === 'object') {
          target[s] = _extends({}, target[s], value);
        } else {
          target[s] = value;
        }
      }
    }
  }

  return target;
}

/**
 *  Rule for validating required fields.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param source The source object being validated.
 *  @param errors An array of errors that this rule may add
 *  validation errors to.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function required(rule, value, source, errors, options, type) {
  if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type || rule.type))) {
    errors.push(format(options.messages.required, rule.fullField));
  }
}

/**
 *  Rule for validating whitespace.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param source The source object being validated.
 *  @param errors An array of errors that this rule may add
 *  validation errors to.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function whitespace(rule, value, source, errors, options) {
  if (/^\s+$/.test(value) || value === '') {
    errors.push(format(options.messages.whitespace, rule.fullField));
  }
}

/* eslint max-len:0 */

var pattern = {
  // http://emailregex.com/
  email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
  url: new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$", 'i'),
  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
};
var types = {
  integer: function integer(value) {
    return types.number(value) && parseInt(value, 10) === value;
  },
  "float": function float(value) {
    return types.number(value) && !types.integer(value);
  },
  array: function array(value) {
    return Array.isArray(value);
  },
  regexp: function regexp(value) {
    if (value instanceof RegExp) {
      return true;
    }

    try {
      return !!new RegExp(value);
    } catch (e) {
      return false;
    }
  },
  date: function date(value) {
    return typeof value.getTime === 'function' && typeof value.getMonth === 'function' && typeof value.getYear === 'function' && !isNaN(value.getTime());
  },
  number: function number(value) {
    if (isNaN(value)) {
      return false;
    }

    return typeof value === 'number';
  },
  object: function object(value) {
    return typeof value === 'object' && !types.array(value);
  },
  method: function method(value) {
    return typeof value === 'function';
  },
  email: function email(value) {
    return typeof value === 'string' && !!value.match(pattern.email) && value.length < 255;
  },
  url: function url(value) {
    return typeof value === 'string' && !!value.match(pattern.url);
  },
  hex: function hex(value) {
    return typeof value === 'string' && !!value.match(pattern.hex);
  }
};
/**
 *  Rule for validating the type of a value.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param source The source object being validated.
 *  @param errors An array of errors that this rule may add
 *  validation errors to.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function type(rule, value, source, errors, options) {
  if (rule.required && value === undefined) {
    required(rule, value, source, errors, options);
    return;
  }

  var custom = ['integer', 'float', 'array', 'regexp', 'object', 'method', 'email', 'number', 'date', 'url', 'hex'];
  var ruleType = rule.type;

  if (custom.indexOf(ruleType) > -1) {
    if (!types[ruleType](value)) {
      errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
    } // straight typeof check

  } else if (ruleType && typeof value !== rule.type) {
    errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
  }
}

/**
 *  Rule for validating minimum and maximum allowed values.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param source The source object being validated.
 *  @param errors An array of errors that this rule may add
 *  validation errors to.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function range(rule, value, source, errors, options) {
  var len = typeof rule.len === 'number';
  var min = typeof rule.min === 'number';
  var max = typeof rule.max === 'number'; // 正则匹配码点范围从U+010000一直到U+10FFFF的文字（补充平面Supplementary Plane）

  var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  var val = value;
  var key = null;
  var num = typeof value === 'number';
  var str = typeof value === 'string';
  var arr = Array.isArray(value);

  if (num) {
    key = 'number';
  } else if (str) {
    key = 'string';
  } else if (arr) {
    key = 'array';
  } // if the value is not of a supported type for range validation
  // the validation rule rule should use the
  // type property to also test for a particular type


  if (!key) {
    return false;
  }

  if (arr) {
    val = value.length;
  }

  if (str) {
    // 处理码点大于U+010000的文字length属性不准确的bug，如"𠮷𠮷𠮷".lenght !== 3
    val = value.replace(spRegexp, '_').length;
  }

  if (len) {
    if (val !== rule.len) {
      errors.push(format(options.messages[key].len, rule.fullField, rule.len));
    }
  } else if (min && !max && val < rule.min) {
    errors.push(format(options.messages[key].min, rule.fullField, rule.min));
  } else if (max && !min && val > rule.max) {
    errors.push(format(options.messages[key].max, rule.fullField, rule.max));
  } else if (min && max && (val < rule.min || val > rule.max)) {
    errors.push(format(options.messages[key].range, rule.fullField, rule.min, rule.max));
  }
}

var ENUM = 'enum';
/**
 *  Rule for validating a value exists in an enumerable list.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param source The source object being validated.
 *  @param errors An array of errors that this rule may add
 *  validation errors to.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function enumerable(rule, value, source, errors, options) {
  rule[ENUM] = Array.isArray(rule[ENUM]) ? rule[ENUM] : [];

  if (rule[ENUM].indexOf(value) === -1) {
    errors.push(format(options.messages[ENUM], rule.fullField, rule[ENUM].join(', ')));
  }
}

/**
 *  Rule for validating a regular expression pattern.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param source The source object being validated.
 *  @param errors An array of errors that this rule may add
 *  validation errors to.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function pattern$1(rule, value, source, errors, options) {
  if (rule.pattern) {
    if (rule.pattern instanceof RegExp) {
      // if a RegExp instance is passed, reset `lastIndex` in case its `global`
      // flag is accidentally set to `true`, which in a validation scenario
      // is not necessary and the result might be misleading
      rule.pattern.lastIndex = 0;

      if (!rule.pattern.test(value)) {
        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
      }
    } else if (typeof rule.pattern === 'string') {
      var _pattern = new RegExp(rule.pattern);

      if (!_pattern.test(value)) {
        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
      }
    }
  }
}

var rules = {
  required: required,
  whitespace: whitespace,
  type: type,
  range: range,
  "enum": enumerable,
  pattern: pattern$1
};

/**
 *  Performs validation for string types.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param callback The callback function.
 *  @param source The source object being validated.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function string(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

  if (validate) {
    if (isEmptyValue(value, 'string') && !rule.required) {
      return callback();
    }

    rules.required(rule, value, source, errors, options, 'string');

    if (!isEmptyValue(value, 'string')) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
      rules.pattern(rule, value, source, errors, options);

      if (rule.whitespace === true) {
        rules.whitespace(rule, value, source, errors, options);
      }
    }
  }

  callback(errors);
}

/**
 *  Validates a function.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param callback The callback function.
 *  @param source The source object being validated.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function method(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }

    rules.required(rule, value, source, errors, options);

    if (value !== undefined) {
      rules.type(rule, value, source, errors, options);
    }
  }

  callback(errors);
}

/**
 *  Validates a number.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param callback The callback function.
 *  @param source The source object being validated.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function number(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

  if (validate) {
    if (value === '') {
      value = undefined;
    }

    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }

    rules.required(rule, value, source, errors, options);

    if (value !== undefined) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }

  callback(errors);
}

/**
 *  Validates a boolean.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param callback The callback function.
 *  @param source The source object being validated.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function _boolean(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }

    rules.required(rule, value, source, errors, options);

    if (value !== undefined) {
      rules.type(rule, value, source, errors, options);
    }
  }

  callback(errors);
}

/**
 *  Validates the regular expression type.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param callback The callback function.
 *  @param source The source object being validated.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function regexp(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }

    rules.required(rule, value, source, errors, options);

    if (!isEmptyValue(value)) {
      rules.type(rule, value, source, errors, options);
    }
  }

  callback(errors);
}

/**
 *  Validates a number is an integer.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param callback The callback function.
 *  @param source The source object being validated.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function integer(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }

    rules.required(rule, value, source, errors, options);

    if (value !== undefined) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }

  callback(errors);
}

/**
 *  Validates a number is a floating point number.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param callback The callback function.
 *  @param source The source object being validated.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function floatFn(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }

    rules.required(rule, value, source, errors, options);

    if (value !== undefined) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }

  callback(errors);
}

/**
 *  Validates an array.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param callback The callback function.
 *  @param source The source object being validated.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function array(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

  if (validate) {
    if ((value === undefined || value === null) && !rule.required) {
      return callback();
    }

    rules.required(rule, value, source, errors, options, 'array');

    if (value !== undefined && value !== null) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }

  callback(errors);
}

/**
 *  Validates an object.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param callback The callback function.
 *  @param source The source object being validated.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function object(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }

    rules.required(rule, value, source, errors, options);

    if (value !== undefined) {
      rules.type(rule, value, source, errors, options);
    }
  }

  callback(errors);
}

var ENUM$1 = 'enum';
/**
 *  Validates an enumerable list.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param callback The callback function.
 *  @param source The source object being validated.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function enumerable$1(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }

    rules.required(rule, value, source, errors, options);

    if (value !== undefined) {
      rules[ENUM$1](rule, value, source, errors, options);
    }
  }

  callback(errors);
}

/**
 *  Validates a regular expression pattern.
 *
 *  Performs validation when a rule only contains
 *  a pattern property but is not declared as a string type.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param callback The callback function.
 *  @param source The source object being validated.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function pattern$2(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

  if (validate) {
    if (isEmptyValue(value, 'string') && !rule.required) {
      return callback();
    }

    rules.required(rule, value, source, errors, options);

    if (!isEmptyValue(value, 'string')) {
      rules.pattern(rule, value, source, errors, options);
    }
  }

  callback(errors);
}

function date(rule, value, callback, source, options) {
  // console.log('integer rule called %j', rule);
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field); // console.log('validate on %s value', value);

  if (validate) {
    if (isEmptyValue(value, 'date') && !rule.required) {
      return callback();
    }

    rules.required(rule, value, source, errors, options);

    if (!isEmptyValue(value, 'date')) {
      var dateObject;

      if (value instanceof Date) {
        dateObject = value;
      } else {
        dateObject = new Date(value);
      }

      rules.type(rule, dateObject, source, errors, options);

      if (dateObject) {
        rules.range(rule, dateObject.getTime(), source, errors, options);
      }
    }
  }

  callback(errors);
}

function required$1(rule, value, callback, source, options) {
  var errors = [];
  var type = Array.isArray(value) ? 'array' : typeof value;
  rules.required(rule, value, source, errors, options, type);
  callback(errors);
}

function type$1(rule, value, callback, source, options) {
  var ruleType = rule.type;
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

  if (validate) {
    if (isEmptyValue(value, ruleType) && !rule.required) {
      return callback();
    }

    rules.required(rule, value, source, errors, options, ruleType);

    if (!isEmptyValue(value, ruleType)) {
      rules.type(rule, value, source, errors, options);
    }
  }

  callback(errors);
}

/**
 *  Performs validation for any type.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param callback The callback function.
 *  @param source The source object being validated.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function any(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }

    rules.required(rule, value, source, errors, options);
  }

  callback(errors);
}

var validators = {
  string: string,
  method: method,
  number: number,
  "boolean": _boolean,
  regexp: regexp,
  integer: integer,
  "float": floatFn,
  array: array,
  object: object,
  "enum": enumerable$1,
  pattern: pattern$2,
  date: date,
  url: type$1,
  hex: type$1,
  email: type$1,
  required: required$1,
  any: any
};

function newMessages() {
  return {
    "default": 'Validation error on field %s',
    required: '%s is required',
    "enum": '%s must be one of %s',
    whitespace: '%s cannot be empty',
    date: {
      format: '%s date %s is invalid for format %s',
      parse: '%s date could not be parsed, %s is invalid ',
      invalid: '%s date %s is invalid'
    },
    types: {
      string: '%s is not a %s',
      method: '%s is not a %s (function)',
      array: '%s is not an %s',
      object: '%s is not an %s',
      number: '%s is not a %s',
      date: '%s is not a %s',
      "boolean": '%s is not a %s',
      integer: '%s is not an %s',
      "float": '%s is not a %s',
      regexp: '%s is not a valid %s',
      email: '%s is not a valid %s',
      url: '%s is not a valid %s',
      hex: '%s is not a valid %s'
    },
    string: {
      len: '%s must be exactly %s characters',
      min: '%s must be at least %s characters',
      max: '%s cannot be longer than %s characters',
      range: '%s must be between %s and %s characters'
    },
    number: {
      len: '%s must equal %s',
      min: '%s cannot be less than %s',
      max: '%s cannot be greater than %s',
      range: '%s must be between %s and %s'
    },
    array: {
      len: '%s must be exactly %s in length',
      min: '%s cannot be less than %s in length',
      max: '%s cannot be greater than %s in length',
      range: '%s must be between %s and %s in length'
    },
    pattern: {
      mismatch: '%s value %s does not match pattern %s'
    },
    clone: function clone() {
      var cloned = JSON.parse(JSON.stringify(this));
      cloned.clone = this.clone;
      return cloned;
    }
  };
}
var messages = newMessages();

/**
 *  Encapsulates a validation schema.
 *
 *  @param descriptor An object declaring validation rules
 *  for this schema.
 */

function Schema(descriptor) {
  this.rules = null;
  this._messages = messages;
  this.define(descriptor);
}

Schema.prototype = {
  messages: function messages(_messages) {
    if (_messages) {
      this._messages = deepMerge(newMessages(), _messages);
    }

    return this._messages;
  },
  define: function define(rules) {
    if (!rules) {
      throw new Error('Cannot configure a schema with no rules');
    }

    if (typeof rules !== 'object' || Array.isArray(rules)) {
      throw new Error('Rules must be an object');
    }

    this.rules = {};
    var z;
    var item;

    for (z in rules) {
      if (rules.hasOwnProperty(z)) {
        item = rules[z];
        this.rules[z] = Array.isArray(item) ? item : [item];
      }
    }
  },
  validate: function validate(source_, o, oc) {
    var _this = this;

    if (o === void 0) {
      o = {};
    }

    if (oc === void 0) {
      oc = function oc() {};
    }

    var source = source_;
    var options = o;
    var callback = oc;

    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    if (!this.rules || Object.keys(this.rules).length === 0) {
      if (callback) {
        callback();
      }

      return Promise.resolve();
    }

    function complete(results) {
      var i;
      var errors = [];
      var fields = {};

      function add(e) {
        if (Array.isArray(e)) {
          var _errors;

          errors = (_errors = errors).concat.apply(_errors, e);
        } else {
          errors.push(e);
        }
      }

      for (i = 0; i < results.length; i++) {
        add(results[i]);
      }

      if (!errors.length) {
        errors = null;
        fields = null;
      } else {
        fields = convertFieldsError(errors);
      }

      callback(errors, fields);
    }

    if (options.messages) {
      var messages$1 = this.messages();

      if (messages$1 === messages) {
        messages$1 = newMessages();
      }

      deepMerge(messages$1, options.messages);
      options.messages = messages$1;
    } else {
      options.messages = this.messages();
    }

    var arr;
    var value;
    var series = {};
    var keys = options.keys || Object.keys(this.rules);
    keys.forEach(function (z) {
      arr = _this.rules[z];
      value = source[z];
      arr.forEach(function (r) {
        var rule = r;

        if (typeof rule.transform === 'function') {
          if (source === source_) {
            source = _extends({}, source);
          }

          value = source[z] = rule.transform(value);
        }

        if (typeof rule === 'function') {
          rule = {
            validator: rule
          };
        } else {
          rule = _extends({}, rule);
        }

        rule.validator = _this.getValidationMethod(rule);
        rule.field = z;
        rule.fullField = rule.fullField || z;
        rule.type = _this.getType(rule);

        if (!rule.validator) {
          return;
        }

        series[z] = series[z] || [];
        series[z].push({
          rule: rule,
          value: value,
          source: source,
          field: z
        });
      });
    });
    var errorFields = {};
    return asyncMap(series, options, function (data, doIt) {
      var rule = data.rule;
      var deep = (rule.type === 'object' || rule.type === 'array') && (typeof rule.fields === 'object' || typeof rule.defaultField === 'object');
      deep = deep && (rule.required || !rule.required && data.value);
      rule.field = data.field;

      function addFullfield(key, schema) {
        return _extends({}, schema, {
          fullField: rule.fullField + "." + key
        });
      }

      function cb(e) {
        if (e === void 0) {
          e = [];
        }

        var errors = e;

        if (!Array.isArray(errors)) {
          errors = [errors];
        }

        if (!options.suppressWarning && errors.length) {
          Schema.warning('async-validator:', errors);
        }

        if (errors.length && rule.message !== undefined) {
          errors = [].concat(rule.message);
        }

        errors = errors.map(complementError(rule));

        if (options.first && errors.length) {
          errorFields[rule.field] = 1;
          return doIt(errors);
        }

        if (!deep) {
          doIt(errors);
        } else {
          // if rule is required but the target object
          // does not exist fail at the rule level and don't
          // go deeper
          if (rule.required && !data.value) {
            if (rule.message !== undefined) {
              errors = [].concat(rule.message).map(complementError(rule));
            } else if (options.error) {
              errors = [options.error(rule, format(options.messages.required, rule.field))];
            }

            return doIt(errors);
          }

          var fieldsSchema = {};

          if (rule.defaultField) {
            for (var k in data.value) {
              if (data.value.hasOwnProperty(k)) {
                fieldsSchema[k] = rule.defaultField;
              }
            }
          }

          fieldsSchema = _extends({}, fieldsSchema, data.rule.fields);

          for (var f in fieldsSchema) {
            if (fieldsSchema.hasOwnProperty(f)) {
              var fieldSchema = Array.isArray(fieldsSchema[f]) ? fieldsSchema[f] : [fieldsSchema[f]];
              fieldsSchema[f] = fieldSchema.map(addFullfield.bind(null, f));
            }
          }

          var schema = new Schema(fieldsSchema);
          schema.messages(options.messages);

          if (data.rule.options) {
            data.rule.options.messages = options.messages;
            data.rule.options.error = options.error;
          }

          schema.validate(data.value, data.rule.options || options, function (errs) {
            var finalErrors = [];

            if (errors && errors.length) {
              finalErrors.push.apply(finalErrors, errors);
            }

            if (errs && errs.length) {
              finalErrors.push.apply(finalErrors, errs);
            }

            doIt(finalErrors.length ? finalErrors : null);
          });
        }
      }

      var res;

      if (rule.asyncValidator) {
        res = rule.asyncValidator(rule, data.value, cb, data.source, options);
      } else if (rule.validator) {
        res = rule.validator(rule, data.value, cb, data.source, options);

        if (res === true) {
          cb();
        } else if (res === false) {
          cb(rule.message || rule.field + " fails");
        } else if (res instanceof Array) {
          cb(res);
        } else if (res instanceof Error) {
          cb(res.message);
        }
      }

      if (res && res.then) {
        res.then(function () {
          return cb();
        }, function (e) {
          return cb(e);
        });
      }
    }, function (results) {
      complete(results);
    });
  },
  getType: function getType(rule) {
    if (rule.type === undefined && rule.pattern instanceof RegExp) {
      rule.type = 'pattern';
    }

    if (typeof rule.validator !== 'function' && rule.type && !validators.hasOwnProperty(rule.type)) {
      throw new Error(format('Unknown rule type %s', rule.type));
    }

    return rule.type || 'string';
  },
  getValidationMethod: function getValidationMethod(rule) {
    if (typeof rule.validator === 'function') {
      return rule.validator;
    }

    var keys = Object.keys(rule);
    var messageIndex = keys.indexOf('message');

    if (messageIndex !== -1) {
      keys.splice(messageIndex, 1);
    }

    if (keys.length === 1 && keys[0] === 'required') {
      return validators.required;
    }

    return validators[this.getType(rule)] || false;
  }
};

Schema.register = function register(type, validator) {
  if (typeof validator !== 'function') {
    throw new Error('Cannot register a validator by type, validator is not a function');
  }

  validators[type] = validator;
};

Schema.warning = warning;
Schema.messages = messages;
Schema.validators = validators;

/* harmony default export */ __webpack_exports__["a"] = (Schema);
//# sourceMappingURL=index.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("F63i")))

/***/ }),

/***/ "bFjY":
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__("Q4oW"),
    isArrayLike = __webpack_require__("9y2L");

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;


/***/ }),

/***/ "bIJA":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("1Y7c");

/***/ }),

/***/ "bLuP":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("uOTx");
var path = __webpack_require__("j0PW");

module.exports = path.Date.now;


/***/ }),

/***/ "bUrk":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("uoFg");

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.slice;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.slice) ? method : own;
};


/***/ }),

/***/ "bVbG":
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__("Syyo");

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;


/***/ }),

/***/ "bfxQ":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("33JB");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').findIndex;


/***/ }),

/***/ "btm2":
/***/ (function(module, exports) {

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = function (argument) {
  return typeof argument == 'function';
};


/***/ }),

/***/ "bvyN":
/***/ (function(module, exports, __webpack_require__) {

var baseIsArguments = __webpack_require__("/30y"),
    isObjectLike = __webpack_require__("tLQN");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;


/***/ }),

/***/ "byqU":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("XU0c");

module.exports = !fails(function () {
  // eslint-disable-next-line es-x/no-object-isextensible, es-x/no-object-preventextensions -- required for testing
  return Object.isExtensible(Object.preventExtensions({}));
});


/***/ }),

/***/ "bz5b":
/***/ (function(module, exports, __webpack_require__) {

var isArrayLike = __webpack_require__("9y2L");

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;


/***/ }),

/***/ "c18h":
/***/ (function(module, exports) {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),

/***/ "c2re":
/***/ (function(module, exports, __webpack_require__) {

var baseClone = __webpack_require__("kn3Q");

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

module.exports = cloneDeep;


/***/ }),

/***/ "c58X":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var $every = __webpack_require__("zDWZ").every;
var arrayMethodIsStrict = __webpack_require__("nSCK");

var STRICT_METHOD = arrayMethodIsStrict('every');

// `Array.prototype.every` method
// https://tc39.es/ecma262/#sec-array.prototype.every
$({ target: 'Array', proto: true, forced: !STRICT_METHOD }, {
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "c72w":
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__("wC3K"),
    eq = __webpack_require__("pPzx");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),

/***/ "c7Qd":
/***/ (function(module, exports, __webpack_require__) {

var baseFindIndex = __webpack_require__("DuXo"),
    baseIsNaN = __webpack_require__("z9Jh"),
    strictIndexOf = __webpack_require__("n1QJ");

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;


/***/ }),

/***/ "c9aA":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("5Jdw");
var call = __webpack_require__("9fDQ");
var propertyIsEnumerableModule = __webpack_require__("0foe");
var createPropertyDescriptor = __webpack_require__("96pp");
var toIndexedObject = __webpack_require__("VcbD");
var toPropertyKey = __webpack_require__("jcKH");
var hasOwn = __webpack_require__("PIIU");
var IE8_DOM_DEFINE = __webpack_require__("64g+");

// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};


/***/ }),

/***/ "cCoX":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dontSetMe = dontSetMe;
exports.findInArray = findInArray;
exports.int = int;
exports.isFunction = isFunction;
exports.isNum = isNum;

// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc
function findInArray(array
/*: Array<any> | TouchList*/
, callback
/*: Function*/
)
/*: any*/
{
  for (var i = 0, length = array.length; i < length; i++) {
    if (callback.apply(callback, [array[i], i, array])) return array[i];
  }
}

function isFunction(func
/*: any*/
)
/*: boolean %checks*/
{
  // $FlowIgnore[method-unbinding]
  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';
}

function isNum(num
/*: any*/
)
/*: boolean %checks*/
{
  return typeof num === 'number' && !isNaN(num);
}

function int(a
/*: string*/
)
/*: number*/
{
  return parseInt(a, 10);
}

function dontSetMe(props
/*: Object*/
, propName
/*: string*/
, componentName
/*: string*/
)
/*: ?Error*/
{
  if (props[propName]) {
    return new Error("Invalid prop ".concat(propName, " passed to ").concat(componentName, " - do not set this, set it on the child."));
  }
}

/***/ }),

/***/ "cDK5":
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { error: false, value: exec() };
  } catch (error) {
    return { error: true, value: error };
  }
};


/***/ }),

/***/ "cDcd":
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_cDcd__;

/***/ }),

/***/ "cEmw":
/***/ (function(module, exports) {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;


/***/ }),

/***/ "cH1A":
/***/ (function(module, exports, __webpack_require__) {

var flatten = __webpack_require__("1xil"),
    overRest = __webpack_require__("UAs9"),
    setToString = __webpack_require__("7Pat");

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest(func) {
  return setToString(overRest(func, undefined, flatten), func + '');
}

module.exports = flatRest;


/***/ }),

/***/ "cQI/":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getUTCISOWeekYear;

var _index = _interopRequireDefault(__webpack_require__("qxgV"));

var _index2 = _interopRequireDefault(__webpack_require__("8EaA"));

var _index3 = _interopRequireDefault(__webpack_require__("SwUm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function getUTCISOWeekYear(dirtyDate) {
  (0, _index2.default)(1, arguments);
  var date = (0, _index.default)(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = (0, _index3.default)(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = (0, _index3.default)(fourthOfJanuaryOfThisYear);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

module.exports = exports.default;

/***/ }),

/***/ "cRnk":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("Pypn");

module.exports = parent;


/***/ }),

/***/ "cY0r":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("avNT");
var path = __webpack_require__("j0PW");

module.exports = path.Object.assign;


/***/ }),

/***/ "cZmh":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("XQ/X");

module.exports = uncurryThis({}.isPrototypeOf);


/***/ }),

/***/ "cb1R":
/***/ (function(module, exports, __webpack_require__) {

var assignMergeValue = __webpack_require__("amiU"),
    cloneBuffer = __webpack_require__("Grae"),
    cloneTypedArray = __webpack_require__("6Rtw"),
    copyArray = __webpack_require__("QT01"),
    initCloneObject = __webpack_require__("sD1O"),
    isArguments = __webpack_require__("bvyN"),
    isArray = __webpack_require__("wxYD"),
    isArrayLikeObject = __webpack_require__("Ndl3"),
    isBuffer = __webpack_require__("3ajY"),
    isFunction = __webpack_require__("2q8g"),
    isObject = __webpack_require__("tQYX"),
    isPlainObject = __webpack_require__("Kkar"),
    isTypedArray = __webpack_require__("Qd2C"),
    safeGet = __webpack_require__("LL3N"),
    toPlainObject = __webpack_require__("4ScB");

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

module.exports = baseMergeDeep;


/***/ }),

/***/ "cdI6":
/***/ (function(module, exports, __webpack_require__) {

var baseFlatten = __webpack_require__("YpBQ");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Recursively flattens `array`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flattenDeep([1, [2, [3, [4]], 5]]);
 * // => [1, 2, 3, 4, 5]
 */
function flattenDeep(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, INFINITY) : [];
}

module.exports = flattenDeep;


/***/ }),

/***/ "cpF+":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__("5Jdw");
var uncurryThis = __webpack_require__("XQ/X");
var call = __webpack_require__("9fDQ");
var fails = __webpack_require__("XU0c");
var objectKeys = __webpack_require__("nKVx");
var getOwnPropertySymbolsModule = __webpack_require__("iYt3");
var propertyIsEnumerableModule = __webpack_require__("0foe");
var toObject = __webpack_require__("quhl");
var IndexedObject = __webpack_require__("fDXD");

// eslint-disable-next-line es-x/no-object-assign -- safe
var $assign = Object.assign;
// eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
var defineProperty = Object.defineProperty;
var concat = uncurryThis([].concat);

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
module.exports = !$assign || fails(function () {
  // should have correct order of operations (Edge bug)
  if (DESCRIPTORS && $assign({ b: 1 }, $assign(defineProperty({}, 'a', {
    enumerable: true,
    get: function () {
      defineProperty(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1) return true;
  // should work with symbols and should have deterministic property order (V8 bug)
  var A = {};
  var B = {};
  // eslint-disable-next-line es-x/no-symbol -- safe
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? concat(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || call(propertyIsEnumerable, S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),

/***/ "crqh":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("XU0c");
var wellKnownSymbol = __webpack_require__("HVcX");
var IS_PURE = __webpack_require__("Vl7J");

var ITERATOR = wellKnownSymbol('iterator');

module.exports = !fails(function () {
  // eslint-disable-next-line unicorn/relative-url-style -- required for testing
  var url = new URL('b?a=1&b=2&c=3', 'http://a');
  var searchParams = url.searchParams;
  var result = '';
  url.pathname = 'c%20d';
  searchParams.forEach(function (value, key) {
    searchParams['delete']('b');
    result += key + value;
  });
  return (IS_PURE && !url.toJSON)
    || !searchParams.sort
    || url.href !== 'http://a/c%20d?a=1&c=3'
    || searchParams.get('c') !== '3'
    || String(new URLSearchParams('?a=1')) !== 'a=1'
    || !searchParams[ITERATOR]
    // throws in Edge
    || new URL('https://a@b').username !== 'a'
    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
    // not punycoded in Edge
    || new URL('http://тест').host !== 'xn--e1aybc'
    // not escaped in Chrome 62-
    || new URL('http://a#б').hash !== '#%D0%B1'
    // fails in Chrome 66-
    || result !== 'a1c3'
    // throws in Safari
    || new URL('http://x', undefined).host !== 'x';
});


/***/ }),

/***/ "d0UJ":
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__("JNqh");

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),

/***/ "dB0S":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "DraggableCore", {
  enumerable: true,
  get: function get() {
    return _DraggableCore.default;
  }
});
exports.default = void 0;

var React = _interopRequireWildcard(__webpack_require__("cDcd"));

var _propTypes = _interopRequireDefault(__webpack_require__("aWzz"));

var _reactDom = _interopRequireDefault(__webpack_require__("faye"));

var _clsx2 = _interopRequireDefault(__webpack_require__("7O4Y"));

var _domFns = __webpack_require__("I5Pb");

var _positionFns = __webpack_require__("NPwy");

var _shims = __webpack_require__("cCoX");

var _DraggableCore = _interopRequireDefault(__webpack_require__("TPNd"));

var _log = _interopRequireDefault(__webpack_require__("6iX0"));

var _excluded = ["axis", "bounds", "children", "defaultPosition", "defaultClassName", "defaultClassNameDragging", "defaultClassNameDragged", "position", "positionOffset", "scale"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
// Define <Draggable>
//
var Draggable = /*#__PURE__*/function (_React$Component) {
  _inherits(Draggable, _React$Component);

  var _super = _createSuper(Draggable);

  function Draggable(props
  /*: DraggableProps*/
  ) {
    var _this;

    _classCallCheck(this, Draggable);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "onDragStart", function (e, coreData) {
      (0, _log.default)('Draggable: onDragStart: %j', coreData); // Short-circuit if user's callback killed it.

      var shouldStart = _this.props.onStart(e, (0, _positionFns.createDraggableData)(_assertThisInitialized(_this), coreData)); // Kills start event on core as well, so move handlers are never bound.


      if (shouldStart === false) return false;

      _this.setState({
        dragging: true,
        dragged: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onDrag", function (e, coreData) {
      if (!_this.state.dragging) return false;
      (0, _log.default)('Draggable: onDrag: %j', coreData);
      var uiData = (0, _positionFns.createDraggableData)(_assertThisInitialized(_this), coreData);
      var newState
      /*: $Shape<DraggableState>*/
      = {
        x: uiData.x,
        y: uiData.y
      }; // Keep within bounds.

      if (_this.props.bounds) {
        // Save original x and y.
        var x = newState.x,
            y = newState.y; // Add slack to the values used to calculate bound position. This will ensure that if
        // we start removing slack, the element won't react to it right away until it's been
        // completely removed.

        newState.x += _this.state.slackX;
        newState.y += _this.state.slackY; // Get bound position. This will ceil/floor the x and y within the boundaries.

        var _getBoundPosition = (0, _positionFns.getBoundPosition)(_assertThisInitialized(_this), newState.x, newState.y),
            _getBoundPosition2 = _slicedToArray(_getBoundPosition, 2),
            newStateX = _getBoundPosition2[0],
            newStateY = _getBoundPosition2[1];

        newState.x = newStateX;
        newState.y = newStateY; // Recalculate slack by noting how much was shaved by the boundPosition handler.

        newState.slackX = _this.state.slackX + (x - newState.x);
        newState.slackY = _this.state.slackY + (y - newState.y); // Update the event we fire to reflect what really happened after bounds took effect.

        uiData.x = newState.x;
        uiData.y = newState.y;
        uiData.deltaX = newState.x - _this.state.x;
        uiData.deltaY = newState.y - _this.state.y;
      } // Short-circuit if user's callback killed it.


      var shouldUpdate = _this.props.onDrag(e, uiData);

      if (shouldUpdate === false) return false;

      _this.setState(newState);
    });

    _defineProperty(_assertThisInitialized(_this), "onDragStop", function (e, coreData) {
      if (!_this.state.dragging) return false; // Short-circuit if user's callback killed it.

      var shouldContinue = _this.props.onStop(e, (0, _positionFns.createDraggableData)(_assertThisInitialized(_this), coreData));

      if (shouldContinue === false) return false;
      (0, _log.default)('Draggable: onDragStop: %j', coreData);
      var newState
      /*: $Shape<DraggableState>*/
      = {
        dragging: false,
        slackX: 0,
        slackY: 0
      }; // If this is a controlled component, the result of this operation will be to
      // revert back to the old position. We expect a handler on `onDragStop`, at the least.

      var controlled = Boolean(_this.props.position);

      if (controlled) {
        var _this$props$position = _this.props.position,
            x = _this$props$position.x,
            y = _this$props$position.y;
        newState.x = x;
        newState.y = y;
      }

      _this.setState(newState);
    });

    _this.state = {
      // Whether or not we are currently dragging.
      dragging: false,
      // Whether or not we have been dragged before.
      dragged: false,
      // Current transform x and y.
      x: props.position ? props.position.x : props.defaultPosition.x,
      y: props.position ? props.position.y : props.defaultPosition.y,
      prevPropsPosition: _objectSpread({}, props.position),
      // Used for compensating for out-of-bounds drags
      slackX: 0,
      slackY: 0,
      // Can only determine if SVG after mounting
      isElementSVG: false
    };

    if (props.position && !(props.onDrag || props.onStop)) {
      // eslint-disable-next-line no-console
      console.warn('A `position` was applied to this <Draggable>, without drag handlers. This will make this ' + 'component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the ' + '`position` of this element.');
    }

    return _this;
  }

  _createClass(Draggable, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // Check to see if the element passed is an instanceof SVGElement
      if (typeof window.SVGElement !== 'undefined' && this.findDOMNode() instanceof window.SVGElement) {
        this.setState({
          isElementSVG: true
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.setState({
        dragging: false
      }); // prevents invariant if unmounted while dragging
    } // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find
    // the underlying DOM node ourselves. See the README for more information.

  }, {
    key: "findDOMNode",
    value: function findDOMNode()
    /*: ?HTMLElement*/
    {
      var _this$props$nodeRef$c, _this$props, _this$props$nodeRef;

      return (_this$props$nodeRef$c = (_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$nodeRef = _this$props.nodeRef) === null || _this$props$nodeRef === void 0 ? void 0 : _this$props$nodeRef.current) !== null && _this$props$nodeRef$c !== void 0 ? _this$props$nodeRef$c : _reactDom.default.findDOMNode(this);
    }
  }, {
    key: "render",
    value: function render()
    /*: ReactElement<any>*/
    {
      var _clsx;

      var _this$props2 = this.props,
          axis = _this$props2.axis,
          bounds = _this$props2.bounds,
          children = _this$props2.children,
          defaultPosition = _this$props2.defaultPosition,
          defaultClassName = _this$props2.defaultClassName,
          defaultClassNameDragging = _this$props2.defaultClassNameDragging,
          defaultClassNameDragged = _this$props2.defaultClassNameDragged,
          position = _this$props2.position,
          positionOffset = _this$props2.positionOffset,
          scale = _this$props2.scale,
          draggableCoreProps = _objectWithoutProperties(_this$props2, _excluded);

      var style = {};
      var svgTransform = null; // If this is controlled, we don't want to move it - unless it's dragging.

      var controlled = Boolean(position);
      var draggable = !controlled || this.state.dragging;
      var validPosition = position || defaultPosition;
      var transformOpts = {
        // Set left if horizontal drag is enabled
        x: (0, _positionFns.canDragX)(this) && draggable ? this.state.x : validPosition.x,
        // Set top if vertical drag is enabled
        y: (0, _positionFns.canDragY)(this) && draggable ? this.state.y : validPosition.y
      }; // If this element was SVG, we use the `transform` attribute.

      if (this.state.isElementSVG) {
        svgTransform = (0, _domFns.createSVGTransform)(transformOpts, positionOffset);
      } else {
        // Add a CSS transform to move the element around. This allows us to move the element around
        // without worrying about whether or not it is relatively or absolutely positioned.
        // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>
        // has a clean slate.
        style = (0, _domFns.createCSSTransform)(transformOpts, positionOffset);
      } // Mark with class while dragging


      var className = (0, _clsx2.default)(children.props.className || '', defaultClassName, (_clsx = {}, _defineProperty(_clsx, defaultClassNameDragging, this.state.dragging), _defineProperty(_clsx, defaultClassNameDragged, this.state.dragged), _clsx)); // Reuse the child provided
      // This makes it flexible to use whatever element is wanted (div, ul, etc)

      return /*#__PURE__*/React.createElement(_DraggableCore.default, _extends({}, draggableCoreProps, {
        onStart: this.onDragStart,
        onDrag: this.onDrag,
        onStop: this.onDragStop
      }), /*#__PURE__*/React.cloneElement(React.Children.only(children), {
        className: className,
        style: _objectSpread(_objectSpread({}, children.props.style), style),
        transform: svgTransform
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: // React 16.3+
    // Arity (props, state)
    function getDerivedStateFromProps(_ref, _ref2)
    /*: ?$Shape<DraggableState>*/
    {
      var position = _ref.position;
      var prevPropsPosition = _ref2.prevPropsPosition;

      // Set x/y if a new position is provided in props that is different than the previous.
      if (position && (!prevPropsPosition || position.x !== prevPropsPosition.x || position.y !== prevPropsPosition.y)) {
        (0, _log.default)('Draggable: getDerivedStateFromProps %j', {
          position: position,
          prevPropsPosition: prevPropsPosition
        });
        return {
          x: position.x,
          y: position.y,
          prevPropsPosition: _objectSpread({}, position)
        };
      }

      return null;
    }
  }]);

  return Draggable;
}(React.Component);

exports.default = Draggable;

_defineProperty(Draggable, "displayName", 'Draggable');

_defineProperty(Draggable, "propTypes", _objectSpread(_objectSpread({}, _DraggableCore.default.propTypes), {}, {
  /**
   * `axis` determines which axis the draggable can move.
   *
   *  Note that all callbacks will still return data as normal. This only
   *  controls flushing to the DOM.
   *
   * 'both' allows movement horizontally and vertically.
   * 'x' limits movement to horizontal axis.
   * 'y' limits movement to vertical axis.
   * 'none' limits all movement.
   *
   * Defaults to 'both'.
   */
  axis: _propTypes.default.oneOf(['both', 'x', 'y', 'none']),

  /**
   * `bounds` determines the range of movement available to the element.
   * Available values are:
   *
   * 'parent' restricts movement within the Draggable's parent node.
   *
   * Alternatively, pass an object with the following properties, all of which are optional:
   *
   * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}
   *
   * All values are in px.
   *
   * Example:
   *
   * ```jsx
   *   let App = React.createClass({
   *       render: function () {
   *         return (
   *            <Draggable bounds={{right: 300, bottom: 300}}>
   *              <div>Content</div>
   *           </Draggable>
   *         );
   *       }
   *   });
   * ```
   */
  bounds: _propTypes.default.oneOfType([_propTypes.default.shape({
    left: _propTypes.default.number,
    right: _propTypes.default.number,
    top: _propTypes.default.number,
    bottom: _propTypes.default.number
  }), _propTypes.default.string, _propTypes.default.oneOf([false])]),
  defaultClassName: _propTypes.default.string,
  defaultClassNameDragging: _propTypes.default.string,
  defaultClassNameDragged: _propTypes.default.string,

  /**
   * `defaultPosition` specifies the x and y that the dragged item should start at
   *
   * Example:
   *
   * ```jsx
   *      let App = React.createClass({
   *          render: function () {
   *              return (
   *                  <Draggable defaultPosition={{x: 25, y: 25}}>
   *                      <div>I start with transformX: 25px and transformY: 25px;</div>
   *                  </Draggable>
   *              );
   *          }
   *      });
   * ```
   */
  defaultPosition: _propTypes.default.shape({
    x: _propTypes.default.number,
    y: _propTypes.default.number
  }),
  positionOffset: _propTypes.default.shape({
    x: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    y: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
  }),

  /**
   * `position`, if present, defines the current position of the element.
   *
   *  This is similar to how form elements in React work - if no `position` is supplied, the component
   *  is uncontrolled.
   *
   * Example:
   *
   * ```jsx
   *      let App = React.createClass({
   *          render: function () {
   *              return (
   *                  <Draggable position={{x: 25, y: 25}}>
   *                      <div>I start with transformX: 25px and transformY: 25px;</div>
   *                  </Draggable>
   *              );
   *          }
   *      });
   * ```
   */
  position: _propTypes.default.shape({
    x: _propTypes.default.number,
    y: _propTypes.default.number
  }),

  /**
   * These properties should be defined on the child, not here.
   */
  className: _shims.dontSetMe,
  style: _shims.dontSetMe,
  transform: _shims.dontSetMe
}));

_defineProperty(Draggable, "defaultProps", _objectSpread(_objectSpread({}, _DraggableCore.default.defaultProps), {}, {
  axis: 'both',
  bounds: false,
  defaultClassName: 'react-draggable',
  defaultClassNameDragging: 'react-draggable-dragging',
  defaultClassNameDragged: 'react-draggable-dragged',
  defaultPosition: {
    x: 0,
    y: 0
  },
  scale: 1
}));

/***/ }),

/***/ "dD6V":
/***/ (function(module, exports) {



/***/ }),

/***/ "dLyh":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var global = __webpack_require__("oNh+");
var isArray = __webpack_require__("ygwS");
var isConstructor = __webpack_require__("mqoN");
var isObject = __webpack_require__("H3h0");
var toAbsoluteIndex = __webpack_require__("Nj2W");
var lengthOfArrayLike = __webpack_require__("SO8O");
var toIndexedObject = __webpack_require__("VcbD");
var createProperty = __webpack_require__("1FCb");
var wellKnownSymbol = __webpack_require__("HVcX");
var arrayMethodHasSpeciesSupport = __webpack_require__("nB+7");
var un$Slice = __webpack_require__("B3mq");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');

var SPECIES = wellKnownSymbol('species');
var Array = global.Array;
var max = Math.max;

// `Array.prototype.slice` method
// https://tc39.es/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  slice: function slice(start, end) {
    var O = toIndexedObject(this);
    var length = lengthOfArrayLike(O);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
    var Constructor, result, n;
    if (isArray(O)) {
      Constructor = O.constructor;
      // cross-realm fallback
      if (isConstructor(Constructor) && (Constructor === Array || isArray(Constructor.prototype))) {
        Constructor = undefined;
      } else if (isObject(Constructor)) {
        Constructor = Constructor[SPECIES];
        if (Constructor === null) Constructor = undefined;
      }
      if (Constructor === Array || Constructor === undefined) {
        return un$Slice(O, k, fin);
      }
    }
    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));
    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
    result.length = n;
    return result;
  }
});


/***/ }),

/***/ "dQAp":
/***/ (function(module, exports, __webpack_require__) {

var userAgent = __webpack_require__("9eyx");

module.exports = /web0s(?!.*chrome)/i.test(userAgent);


/***/ }),

/***/ "dw5g":
/***/ (function(module, exports, __webpack_require__) {

var baseToString = __webpack_require__("JcJ6");

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),

/***/ "dwwW":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("uB1P");

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.reverse;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.reverse) ? method : own;
};


/***/ }),

/***/ "e33i":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var fill = __webpack_require__("8Osh");
var addToUnscopables = __webpack_require__("Uh/D");

// `Array.prototype.fill` method
// https://tc39.es/ecma262/#sec-array.prototype.fill
$({ target: 'Array', proto: true }, {
  fill: fill
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('fill');


/***/ }),

/***/ "e3Ae":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = _interopRequireDefault(__webpack_require__("tImS"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var eraValues = {
  narrow: ['B', 'A'],
  abbreviated: ['BC', 'AD'],
  wide: ['Before Christ', 'Anno Domini']
};
var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
}; // Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.

var monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};
var dayValues = {
  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};
var dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  }
};

var ordinalNumber = function (dirtyNumber, _options) {
  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`.
  //
  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'.

  var rem100 = number % 100;

  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st';

      case 2:
        return number + 'nd';

      case 3:
        return number + 'rd';
    }
  }

  return number + 'th';
};

var localize = {
  ordinalNumber: ordinalNumber,
  era: (0, _index.default)({
    values: eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0, _index.default)({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function (quarter) {
      return quarter - 1;
    }
  }),
  month: (0, _index.default)({
    values: monthValues,
    defaultWidth: 'wide'
  }),
  day: (0, _index.default)({
    values: dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0, _index.default)({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
var _default = localize;
exports.default = _default;
module.exports = exports.default;

/***/ }),

/***/ "e63W":
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__("JNqh");

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),

/***/ "e93E":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("fRV1")))

/***/ }),

/***/ "eGeI":
/***/ (function(module, exports, __webpack_require__) {

var baseUnset = __webpack_require__("a49g");

/**
 * Removes the property at `path` of `object`.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
 * _.unset(object, 'a[0].b.c');
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 *
 * _.unset(object, ['a', '0', 'b', 'c']);
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 */
function unset(object, path) {
  return object == null ? true : baseUnset(object, path);
}

module.exports = unset;


/***/ }),

/***/ "eLIV":
/***/ (function(module, exports, __webpack_require__) {

var PROPER_FUNCTION_NAME = __webpack_require__("IVNG").PROPER;
var fails = __webpack_require__("XU0c");
var whitespaces = __webpack_require__("3sPw");

var non = '\u200B\u0085\u180E';

// check that a method works with the correct list
// of whitespaces and has a correct name
module.exports = function (METHOD_NAME) {
  return fails(function () {
    return !!whitespaces[METHOD_NAME]()
      || non[METHOD_NAME]() !== non
      || (PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME);
  });
};


/***/ }),

/***/ "eN33":
/***/ (function(module, exports) {

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;


/***/ }),

/***/ "eVHe":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var global = __webpack_require__("oNh+");
var setInterval = __webpack_require__("Guw5").setInterval;

// ie9- setInterval additional parameters fix
// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
$({ global: true, bind: true, forced: global.setInterval !== setInterval }, {
  setInterval: setInterval
});


/***/ }),

/***/ "eask":
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__("JNqh");

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),

/***/ "eeEa":
/***/ (function(module, exports, __webpack_require__) {

// TODO: Remove from `core-js@4`
var $ = __webpack_require__("n9AK");
var bind = __webpack_require__("+fwG");

// `Function.prototype.bind` method
// https://tc39.es/ecma262/#sec-function.prototype.bind
$({ target: 'Function', proto: true, forced: Function.bind !== bind }, {
  bind: bind
});


/***/ }),

/***/ "ehGJ":
/***/ (function(module, exports, __webpack_require__) {

var baseFindIndex = __webpack_require__("DuXo"),
    baseIteratee = __webpack_require__("S3pA"),
    toInteger = __webpack_require__("m2YG");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * This method is like `_.findIndex` except that it iterates over elements
 * of `collection` from right to left.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=array.length-1] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': true },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': false }
 * ];
 *
 * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
 * // => 2
 *
 * // The `_.matches` iteratee shorthand.
 * _.findLastIndex(users, { 'user': 'barney', 'active': true });
 * // => 0
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findLastIndex(users, ['active', false]);
 * // => 2
 *
 * // The `_.property` iteratee shorthand.
 * _.findLastIndex(users, 'active');
 * // => 0
 */
function findLastIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = length - 1;
  if (fromIndex !== undefined) {
    index = toInteger(fromIndex);
    index = fromIndex < 0
      ? nativeMax(length + index, 0)
      : nativeMin(index, length - 1);
  }
  return baseFindIndex(array, baseIteratee(predicate, 3), index, true);
}

module.exports = findLastIndex;


/***/ }),

/***/ "emlf":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = __webpack_require__("YjNL");

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bigint: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),

/***/ "f2Li":
/***/ (function(module, exports) {

// empty


/***/ }),

/***/ "f2p0":
/***/ (function(module, exports, __webpack_require__) {

var asciiToArray = __webpack_require__("gEzS"),
    hasUnicode = __webpack_require__("GZgP"),
    unicodeToArray = __webpack_require__("Xm/D");

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return hasUnicode(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

module.exports = stringToArray;


/***/ }),

/***/ "f6U5":
/***/ (function(module, exports, __webpack_require__) {

var hasOwn = __webpack_require__("PIIU");
var ownKeys = __webpack_require__("pDLF");
var getOwnPropertyDescriptorModule = __webpack_require__("c9aA");
var definePropertyModule = __webpack_require__("JliG");

module.exports = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};


/***/ }),

/***/ "f6aC":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("DMYm");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').concat;


/***/ }),

/***/ "f8hu":
/***/ (function(module, exports) {



/***/ }),

/***/ "fDXD":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var uncurryThis = __webpack_require__("XQ/X");
var fails = __webpack_require__("XU0c");
var classof = __webpack_require__("WTd3");

var Object = global.Object;
var split = uncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split(it, '') : Object(it);
} : Object;


/***/ }),

/***/ "fEH3":
/***/ (function(module, exports, __webpack_require__) {

var aCallable = __webpack_require__("JXge");

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return func == null ? undefined : aCallable(func);
};


/***/ }),

/***/ "fFnB":
/***/ (function(module, exports) {



/***/ }),

/***/ "fIqP":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var isIntegralNumber = __webpack_require__("BkvR");

// `Number.isInteger` method
// https://tc39.es/ecma262/#sec-number.isinteger
$({ target: 'Number', stat: true }, {
  isInteger: isIntegralNumber
});


/***/ }),

/***/ "fRV1":
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "fWyh":
/***/ (function(module, exports, __webpack_require__) {

var toNumber = __webpack_require__("nvU9");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;


/***/ }),

/***/ "faye":
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_faye__;

/***/ }),

/***/ "ffXp":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("2srY");
/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_get__WEBPACK_IMPORTED_MODULE_0__);


const log = function (text) {
  if (lodash_get__WEBPACK_IMPORTED_MODULE_0___default()(process, 'env.NODE_ENV') === 'development') {
    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    console.log(text, ...rest);
  }
};

/* harmony default export */ __webpack_exports__["a"] = (log);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("F63i")))

/***/ }),

/***/ "fzZl":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("sPAe");

/***/ }),

/***/ "gEWz":
/***/ (function(module, exports, __webpack_require__) {

var getTag = __webpack_require__("kkM+"),
    isObjectLike = __webpack_require__("tLQN");

/** `Object#toString` result references. */
var mapTag = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return isObjectLike(value) && getTag(value) == mapTag;
}

module.exports = baseIsMap;


/***/ }),

/***/ "gEzS":
/***/ (function(module, exports) {

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

module.exports = asciiToArray;


/***/ }),

/***/ "gJkj":
/***/ (function(module, exports) {



/***/ }),

/***/ "gKI9":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("AKOj");

module.exports = parent;


/***/ }),

/***/ "gjqq":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var getBuiltIn = __webpack_require__("wF8L");
var IS_PURE = __webpack_require__("Vl7J");
var NativePromiseConstructor = __webpack_require__("Mzla");
var FORCED_PROMISE_CONSTRUCTOR = __webpack_require__("jIvz").CONSTRUCTOR;
var promiseResolve = __webpack_require__("QmWX");

var PromiseConstructorWrapper = getBuiltIn('Promise');
var CHECK_WRAPPER = IS_PURE && !FORCED_PROMISE_CONSTRUCTOR;

// `Promise.resolve` method
// https://tc39.es/ecma262/#sec-promise.resolve
$({ target: 'Promise', stat: true, forced: IS_PURE || FORCED_PROMISE_CONSTRUCTOR }, {
  resolve: function resolve(x) {
    return promiseResolve(CHECK_WRAPPER && this === PromiseConstructorWrapper ? NativePromiseConstructor : this, x);
  }
});


/***/ }),

/***/ "gobS":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("TAas");

/***/ }),

/***/ "gyOK":
/***/ (function(module, exports, __webpack_require__) {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__("YsqY");


/***/ }),

/***/ "h4um":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("9SCj");


/***/ }),

/***/ "h7Xf":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("uAsO");

module.exports = parent;


/***/ }),

/***/ "hIpk":
/***/ (function(module, exports) {



/***/ }),

/***/ "hMsr":
/***/ (function(module, exports, __webpack_require__) {

var isStrictComparable = __webpack_require__("+tCn"),
    keys = __webpack_require__("BlJA");

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;


/***/ }),

/***/ "hQnK":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("JUUs");
__webpack_require__("lv3h");
__webpack_require__("X7cO");
__webpack_require__("hVCw");
__webpack_require__("TgHf");
__webpack_require__("GoLU");
__webpack_require__("77dE");
__webpack_require__("91A9");
var path = __webpack_require__("j0PW");

module.exports = path.Promise;


/***/ }),

/***/ "hVCw":
/***/ (function(module, exports, __webpack_require__) {

// TODO: Remove this module from `core-js@4` since it's split to modules listed below
__webpack_require__("+H1N");
__webpack_require__("7qAI");
__webpack_require__("Ja4h");
__webpack_require__("RCk1");
__webpack_require__("WO6V");
__webpack_require__("gjqq");


/***/ }),

/***/ "hqFE":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("TVq8");

/***/ }),

/***/ "huYy":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var collection = __webpack_require__("vjRO");
var collectionStrong = __webpack_require__("krtk");

// `Map` constructor
// https://tc39.es/ecma262/#sec-map-objects
collection('Map', function (init) {
  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);


/***/ }),

/***/ "hw2v":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = _interopRequireDefault(__webpack_require__("ww8C"));

var _index2 = _interopRequireDefault(__webpack_require__("vnVX"));

var _index3 = _interopRequireDefault(__webpack_require__("cQI/"));

var _index4 = _interopRequireDefault(__webpack_require__("xV2z"));

var _index5 = _interopRequireDefault(__webpack_require__("DKl7"));

var _index6 = _interopRequireDefault(__webpack_require__("pnws"));

var _index7 = _interopRequireDefault(__webpack_require__("+yel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dayPeriodEnum = {
  am: 'am',
  pm: 'pm',
  midnight: 'midnight',
  noon: 'noon',
  morning: 'morning',
  afternoon: 'afternoon',
  evening: 'evening',
  night: 'night'
};
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
 * |  p! | Long localized time            |  P! | Long localized date            |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 * - `P` is long localized date format
 * - `p` is long localized time format
 */

var formatters = {
  // Era
  G: function (date, token, localize) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;

    switch (token) {
      // AD, BC
      case 'G':
      case 'GG':
      case 'GGG':
        return localize.era(era, {
          width: 'abbreviated'
        });
      // A, B

      case 'GGGGG':
        return localize.era(era, {
          width: 'narrow'
        });
      // Anno Domini, Before Christ

      case 'GGGG':
      default:
        return localize.era(era, {
          width: 'wide'
        });
    }
  },
  // Year
  y: function (date, token, localize) {
    // Ordinal number
    if (token === 'yo') {
      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize.ordinalNumber(year, {
        unit: 'year'
      });
    }

    return _index7.default.y(date, token);
  },
  // Local week-numbering year
  Y: function (date, token, localize, options) {
    var signedWeekYear = (0, _index5.default)(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)

    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year

    if (token === 'YY') {
      var twoDigitYear = weekYear % 100;
      return (0, _index6.default)(twoDigitYear, 2);
    } // Ordinal number


    if (token === 'Yo') {
      return localize.ordinalNumber(weekYear, {
        unit: 'year'
      });
    } // Padding


    return (0, _index6.default)(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function (date, token) {
    var isoWeekYear = (0, _index3.default)(date); // Padding

    return (0, _index6.default)(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function (date, token) {
    var year = date.getUTCFullYear();
    return (0, _index6.default)(year, token.length);
  },
  // Quarter
  Q: function (date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

    switch (token) {
      // 1, 2, 3, 4
      case 'Q':
        return String(quarter);
      // 01, 02, 03, 04

      case 'QQ':
        return (0, _index6.default)(quarter, 2);
      // 1st, 2nd, 3rd, 4th

      case 'Qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });
      // Q1, Q2, Q3, Q4

      case 'QQQ':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)

      case 'QQQQQ':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'formatting'
        });
      // 1st quarter, 2nd quarter, ...

      case 'QQQQ':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone quarter
  q: function (date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

    switch (token) {
      // 1, 2, 3, 4
      case 'q':
        return String(quarter);
      // 01, 02, 03, 04

      case 'qq':
        return (0, _index6.default)(quarter, 2);
      // 1st, 2nd, 3rd, 4th

      case 'qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });
      // Q1, Q2, Q3, Q4

      case 'qqq':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)

      case 'qqqqq':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'standalone'
        });
      // 1st quarter, 2nd quarter, ...

      case 'qqqq':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // Month
  M: function (date, token, localize) {
    var month = date.getUTCMonth();

    switch (token) {
      case 'M':
      case 'MM':
        return _index7.default.M(date, token);
      // 1st, 2nd, ..., 12th

      case 'Mo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });
      // Jan, Feb, ..., Dec

      case 'MMM':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // J, F, ..., D

      case 'MMMMM':
        return localize.month(month, {
          width: 'narrow',
          context: 'formatting'
        });
      // January, February, ..., December

      case 'MMMM':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone month
  L: function (date, token, localize) {
    var month = date.getUTCMonth();

    switch (token) {
      // 1, 2, ..., 12
      case 'L':
        return String(month + 1);
      // 01, 02, ..., 12

      case 'LL':
        return (0, _index6.default)(month + 1, 2);
      // 1st, 2nd, ..., 12th

      case 'Lo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });
      // Jan, Feb, ..., Dec

      case 'LLL':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // J, F, ..., D

      case 'LLLLL':
        return localize.month(month, {
          width: 'narrow',
          context: 'standalone'
        });
      // January, February, ..., December

      case 'LLLL':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // Local week of year
  w: function (date, token, localize, options) {
    var week = (0, _index4.default)(date, options);

    if (token === 'wo') {
      return localize.ordinalNumber(week, {
        unit: 'week'
      });
    }

    return (0, _index6.default)(week, token.length);
  },
  // ISO week of year
  I: function (date, token, localize) {
    var isoWeek = (0, _index2.default)(date);

    if (token === 'Io') {
      return localize.ordinalNumber(isoWeek, {
        unit: 'week'
      });
    }

    return (0, _index6.default)(isoWeek, token.length);
  },
  // Day of the month
  d: function (date, token, localize) {
    if (token === 'do') {
      return localize.ordinalNumber(date.getUTCDate(), {
        unit: 'date'
      });
    }

    return _index7.default.d(date, token);
  },
  // Day of year
  D: function (date, token, localize) {
    var dayOfYear = (0, _index.default)(date);

    if (token === 'Do') {
      return localize.ordinalNumber(dayOfYear, {
        unit: 'dayOfYear'
      });
    }

    return (0, _index6.default)(dayOfYear, token.length);
  },
  // Day of week
  E: function (date, token, localize) {
    var dayOfWeek = date.getUTCDay();

    switch (token) {
      // Tue
      case 'E':
      case 'EE':
      case 'EEE':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'EEEEE':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'EEEEEE':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'EEEE':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Local day of week
  e: function (date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

    switch (token) {
      // Numerical value (Nth day of week with current locale or weekStartsOn)
      case 'e':
        return String(localDayOfWeek);
      // Padded numerical value

      case 'ee':
        return (0, _index6.default)(localDayOfWeek, 2);
      // 1st, 2nd, ..., 7th

      case 'eo':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });

      case 'eee':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'eeeee':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'eeeeee':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'eeee':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone local day of week
  c: function (date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

    switch (token) {
      // Numerical value (same as in `e`)
      case 'c':
        return String(localDayOfWeek);
      // Padded numerical value

      case 'cc':
        return (0, _index6.default)(localDayOfWeek, token.length);
      // 1st, 2nd, ..., 7th

      case 'co':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });

      case 'ccc':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // T

      case 'ccccc':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'standalone'
        });
      // Tu

      case 'cccccc':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'standalone'
        });
      // Tuesday

      case 'cccc':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // ISO day of week
  i: function (date, token, localize) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;

    switch (token) {
      // 2
      case 'i':
        return String(isoDayOfWeek);
      // 02

      case 'ii':
        return (0, _index6.default)(isoDayOfWeek, token.length);
      // 2nd

      case 'io':
        return localize.ordinalNumber(isoDayOfWeek, {
          unit: 'day'
        });
      // Tue

      case 'iii':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'iiiii':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'iiiiii':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'iiii':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // AM or PM
  a: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';

    switch (token) {
      case 'a':
      case 'aa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'aaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        }).toLowerCase();

      case 'aaaaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'aaaa':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // AM, PM, midnight, noon
  b: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;

    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
    }

    switch (token) {
      case 'b':
      case 'bb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'bbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        }).toLowerCase();

      case 'bbbbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'bbbb':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;

    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }

    switch (token) {
      case 'B':
      case 'BB':
      case 'BBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'BBBBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'BBBB':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Hour [1-12]
  h: function (date, token, localize) {
    if (token === 'ho') {
      var hours = date.getUTCHours() % 12;
      if (hours === 0) hours = 12;
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return _index7.default.h(date, token);
  },
  // Hour [0-23]
  H: function (date, token, localize) {
    if (token === 'Ho') {
      return localize.ordinalNumber(date.getUTCHours(), {
        unit: 'hour'
      });
    }

    return _index7.default.H(date, token);
  },
  // Hour [0-11]
  K: function (date, token, localize) {
    var hours = date.getUTCHours() % 12;

    if (token === 'Ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return (0, _index6.default)(hours, token.length);
  },
  // Hour [1-24]
  k: function (date, token, localize) {
    var hours = date.getUTCHours();
    if (hours === 0) hours = 24;

    if (token === 'ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return (0, _index6.default)(hours, token.length);
  },
  // Minute
  m: function (date, token, localize) {
    if (token === 'mo') {
      return localize.ordinalNumber(date.getUTCMinutes(), {
        unit: 'minute'
      });
    }

    return _index7.default.m(date, token);
  },
  // Second
  s: function (date, token, localize) {
    if (token === 'so') {
      return localize.ordinalNumber(date.getUTCSeconds(), {
        unit: 'second'
      });
    }

    return _index7.default.s(date, token);
  },
  // Fraction of second
  S: function (date, token) {
    return _index7.default.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    if (timezoneOffset === 0) {
      return 'Z';
    }

    switch (token) {
      // Hours and optional minutes
      case 'X':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XX`

      case 'XXXX':
      case 'XX':
        // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XXX`

      case 'XXXXX':
      case 'XXX': // Hours and minutes with `:` delimiter

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Hours and optional minutes
      case 'x':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xx`

      case 'xxxx':
      case 'xx':
        // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xxx`

      case 'xxxxx':
      case 'xxx': // Hours and minutes with `:` delimiter

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (GMT)
  O: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Short
      case 'O':
      case 'OO':
      case 'OOO':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
      // Long

      case 'OOOO':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (specific non-location)
  z: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Short
      case 'z':
      case 'zz':
      case 'zzz':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
      // Long

      case 'zzzz':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  // Seconds timestamp
  t: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1000);
    return (0, _index6.default)(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return (0, _index6.default)(timestamp, token.length);
  }
};

function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;

  if (minutes === 0) {
    return sign + String(hours);
  }

  var delimiter = dirtyDelimiter || '';
  return sign + String(hours) + delimiter + (0, _index6.default)(minutes, 2);
}

function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? '-' : '+';
    return sign + (0, _index6.default)(Math.abs(offset) / 60, 2);
  }

  return formatTimezone(offset, dirtyDelimiter);
}

function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || '';
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = (0, _index6.default)(Math.floor(absOffset / 60), 2);
  var minutes = (0, _index6.default)(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}

var _default = formatters;
exports.default = _default;
module.exports = exports.default;

/***/ }),

/***/ "hyzI":
/***/ (function(module, exports, __webpack_require__) {

var mapCacheClear = __webpack_require__("m5o6"),
    mapCacheDelete = __webpack_require__("d0UJ"),
    mapCacheGet = __webpack_require__("eask"),
    mapCacheHas = __webpack_require__("9SKQ"),
    mapCacheSet = __webpack_require__("e63W");

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),

/***/ "i2yQ":
/***/ (function(module, exports, __webpack_require__) {

var UA = __webpack_require__("9eyx");

module.exports = /MSIE|Trident/.test(UA);


/***/ }),

/***/ "i3IF":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("qqzA");

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.filter;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.filter) ? method : own;
};


/***/ }),

/***/ "i7nn":
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__("wxYD"),
    isSymbol = __webpack_require__("a88S");

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;


/***/ }),

/***/ "iDMO":
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__("PLru");
var uid = __webpack_require__("apkA");

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ "iUQ/":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var getBuiltIn = __webpack_require__("wF8L");
var hasOwn = __webpack_require__("PIIU");
var toString = __webpack_require__("Xrs4");
var shared = __webpack_require__("PLru");
var NATIVE_SYMBOL_REGISTRY = __webpack_require__("SHeM");

var StringToSymbolRegistry = shared('string-to-symbol-registry');
var SymbolToStringRegistry = shared('symbol-to-string-registry');

// `Symbol.for` method
// https://tc39.es/ecma262/#sec-symbol.for
$({ target: 'Symbol', stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
  'for': function (key) {
    var string = toString(key);
    if (hasOwn(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
    var symbol = getBuiltIn('Symbol')(string);
    StringToSymbolRegistry[string] = symbol;
    SymbolToStringRegistry[symbol] = string;
    return symbol;
  }
});


/***/ }),

/***/ "iYt3":
/***/ (function(module, exports) {

// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "iaIM":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var getBuiltIn = __webpack_require__("wF8L");
var apply = __webpack_require__("Hj5v");
var call = __webpack_require__("9fDQ");
var uncurryThis = __webpack_require__("XQ/X");
var fails = __webpack_require__("XU0c");
var isArray = __webpack_require__("ygwS");
var isCallable = __webpack_require__("btm2");
var isObject = __webpack_require__("H3h0");
var isSymbol = __webpack_require__("au4q");
var arraySlice = __webpack_require__("B3mq");
var NATIVE_SYMBOL = __webpack_require__("5TyG");

var $stringify = getBuiltIn('JSON', 'stringify');
var exec = uncurryThis(/./.exec);
var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var replace = uncurryThis(''.replace);
var numberToString = uncurryThis(1.0.toString);

var tester = /[\uD800-\uDFFF]/g;
var low = /^[\uD800-\uDBFF]$/;
var hi = /^[\uDC00-\uDFFF]$/;

var WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL || fails(function () {
  var symbol = getBuiltIn('Symbol')();
  // MS Edge converts symbol values to JSON as {}
  return $stringify([symbol]) != '[null]'
    // WebKit converts symbol values to JSON as null
    || $stringify({ a: symbol }) != '{}'
    // V8 throws on boxed symbols
    || $stringify(Object(symbol)) != '{}';
});

// https://github.com/tc39/proposal-well-formed-stringify
var ILL_FORMED_UNICODE = fails(function () {
  return $stringify('\uDF06\uD834') !== '"\\udf06\\ud834"'
    || $stringify('\uDEAD') !== '"\\udead"';
});

var stringifyWithSymbolsFix = function (it, replacer) {
  var args = arraySlice(arguments);
  var $replacer = replacer;
  if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
  if (!isArray(replacer)) replacer = function (key, value) {
    if (isCallable($replacer)) value = call($replacer, this, key, value);
    if (!isSymbol(value)) return value;
  };
  args[1] = replacer;
  return apply($stringify, null, args);
};

var fixIllFormed = function (match, offset, string) {
  var prev = charAt(string, offset - 1);
  var next = charAt(string, offset + 1);
  if ((exec(low, match) && !exec(hi, next)) || (exec(hi, match) && !exec(low, prev))) {
    return '\\u' + numberToString(charCodeAt(match, 0), 16);
  } return match;
};

if ($stringify) {
  // `JSON.stringify` method
  // https://tc39.es/ecma262/#sec-json.stringify
  $({ target: 'JSON', stat: true, forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    stringify: function stringify(it, replacer, space) {
      var args = arraySlice(arguments);
      var result = apply(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);
      return ILL_FORMED_UNICODE && typeof result == 'string' ? replace(result, tester, fixIllFormed) : result;
    }
  });
}


/***/ }),

/***/ "ivxi":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = startOfUTCWeek;

var _index = _interopRequireDefault(__webpack_require__("qxgV"));

var _index2 = _interopRequireDefault(__webpack_require__("8EaA"));

var _index3 = _interopRequireDefault(__webpack_require__("yuhP"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function startOfUTCWeek(dirtyDate, dirtyOptions) {
  (0, _index2.default)(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0, _index3.default)(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : (0, _index3.default)(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = (0, _index.default)(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

module.exports = exports.default;

/***/ }),

/***/ "ixFa":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var global = __webpack_require__("oNh+");

// `globalThis` object
// https://tc39.es/ecma262/#sec-globalthis
$({ global: true }, {
  globalThis: global
});


/***/ }),

/***/ "ixfn":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("jb4q");

module.exports = parent;


/***/ }),

/***/ "j0PW":
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "j0cD":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");

var TypeError = global.TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ "j6Rw":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _require = __webpack_require__("dB0S"),
    Draggable = _require.default,
    DraggableCore = _require.DraggableCore; // Previous versions of this lib exported <Draggable> as the root export. As to no-// them, or TypeScript, we export *both* as the root and as 'default'.
// See https://github.com/mzabriskie/react-draggable/pull/254
// and https://github.com/mzabriskie/react-draggable/issues/266


module.exports = Draggable;
module.exports.default = Draggable;
module.exports.DraggableCore = DraggableCore;

/***/ }),

/***/ "j70h":
/***/ (function(module, exports, __webpack_require__) {

var call = __webpack_require__("9fDQ");
var getBuiltIn = __webpack_require__("wF8L");
var wellKnownSymbol = __webpack_require__("HVcX");
var redefine = __webpack_require__("yX36");

module.exports = function () {
  var Symbol = getBuiltIn('Symbol');
  var SymbolPrototype = Symbol && Symbol.prototype;
  var valueOf = SymbolPrototype && SymbolPrototype.valueOf;
  var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

  if (SymbolPrototype && !SymbolPrototype[TO_PRIMITIVE]) {
    // `Symbol.prototype[@@toPrimitive]` method
    // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
    // eslint-disable-next-line no-unused-vars -- required for .length
    redefine(SymbolPrototype, TO_PRIMITIVE, function (hint) {
      return call(valueOf, this);
    });
  }
};


/***/ }),

/***/ "jA1f":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("eeEa");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Function').bind;


/***/ }),

/***/ "jHPj":
/***/ (function(module, exports, __webpack_require__) {

var baseRest = __webpack_require__("R3TX"),
    pullAll = __webpack_require__("DyR2");

/**
 * Removes all given values from `array` using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
 * to remove elements from an array by predicate.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {...*} [values] The values to remove.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
 *
 * _.pull(array, 'a', 'c');
 * console.log(array);
 * // => ['b', 'b']
 */
var pull = baseRest(pullAll);

module.exports = pull;


/***/ }),

/***/ "jIvz":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var NativePromiseConstructor = __webpack_require__("Mzla");
var isCallable = __webpack_require__("btm2");
var isForced = __webpack_require__("JCy+");
var inspectSource = __webpack_require__("8msI");
var wellKnownSymbol = __webpack_require__("HVcX");
var IS_BROWSER = __webpack_require__("xdyI");
var IS_PURE = __webpack_require__("Vl7J");
var V8_VERSION = __webpack_require__("Qb90");

var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
var SPECIES = wellKnownSymbol('species');
var SUBCLASSING = false;
var NATIVE_PROMISE_REJECTION_EVENT = isCallable(global.PromiseRejectionEvent);

var FORCED_PROMISE_CONSTRUCTOR = isForced('Promise', function () {
  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor);
  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor);
  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
  // We can't detect it synchronously, so just check versions
  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
  // We need Promise#{ catch, finally } in the pure version for preventing prototype pollution
  if (IS_PURE && !(NativePromisePrototype['catch'] && NativePromisePrototype['finally'])) return true;
  // We can't use @@species feature detection in V8 since it causes
  // deoptimization and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false;
  // Detect correctness of subclassing with @@species support
  var promise = new NativePromiseConstructor(function (resolve) { resolve(1); });
  var FakePromise = function (exec) {
    exec(function () { /* empty */ }, function () { /* empty */ });
  };
  var constructor = promise.constructor = {};
  constructor[SPECIES] = FakePromise;
  SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
  if (!SUBCLASSING) return true;
  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
  return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_PROMISE_REJECTION_EVENT;
});

module.exports = {
  CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR,
  REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT,
  SUBCLASSING: SUBCLASSING
};


/***/ }),

/***/ "jLkM":
/***/ (function(module, exports, __webpack_require__) {

var baseUniq = __webpack_require__("s+R0");

/**
 * Creates a duplicate-free version of an array, using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons, in which only the first occurrence of each element
 * is kept. The order of result values is determined by the order they occur
 * in the array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.uniq([2, 1, 2]);
 * // => [2, 1]
 */
function uniq(array) {
  return (array && array.length) ? baseUniq(array) : [];
}

module.exports = uniq;


/***/ }),

/***/ "jLuO":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("pL1y");

/***/ }),

/***/ "jMEd":
/***/ (function(module, exports, __webpack_require__) {

var userAgent = __webpack_require__("9eyx");

module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);


/***/ }),

/***/ "jNzf":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("5Jdw");
var definePropertyModule = __webpack_require__("JliG");
var createPropertyDescriptor = __webpack_require__("96pp");

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "jb4q":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("fIqP");
var path = __webpack_require__("j0PW");

module.exports = path.Number.isInteger;


/***/ }),

/***/ "jcKH":
/***/ (function(module, exports, __webpack_require__) {

var toPrimitive = __webpack_require__("3Mt6");
var isSymbol = __webpack_require__("au4q");

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};


/***/ }),

/***/ "k8x3":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("+Pc/");

module.exports = parent;


/***/ }),

/***/ "kDpG":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("9hnf");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').forEach;


/***/ }),

/***/ "kG2z":
/***/ (function(module, exports) {

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;


/***/ }),

/***/ "kHoZ":
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ "kNzS":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("lF2A");

/***/ }),

/***/ "kQ/h":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = buildFormatLongFn;

function buildFormatLongFn(args) {
  return function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    // TODO: Remove String()
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

module.exports = exports.default;

/***/ }),

/***/ "kXRz":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("8bDY");
var classof = __webpack_require__("r/P8");
var hasOwn = __webpack_require__("PIIU");
var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("vFRI");

var ArrayPrototype = Array.prototype;

var DOMIterables = {
  DOMTokenList: true,
  NodeList: true
};

module.exports = function (it) {
  var own = it.keys;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.keys)
    || hasOwn(DOMIterables, classof(it)) ? method : own;
};


/***/ }),

/***/ "kYm/":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var call = __webpack_require__("9fDQ");
var IS_PURE = __webpack_require__("Vl7J");
var FunctionName = __webpack_require__("IVNG");
var isCallable = __webpack_require__("btm2");
var createIteratorConstructor = __webpack_require__("DTge");
var getPrototypeOf = __webpack_require__("K1oV");
var setPrototypeOf = __webpack_require__("wXON");
var setToStringTag = __webpack_require__("CtlU");
var createNonEnumerableProperty = __webpack_require__("jNzf");
var redefine = __webpack_require__("yX36");
var wellKnownSymbol = __webpack_require__("HVcX");
var Iterators = __webpack_require__("m/wn");
var IteratorsCore = __webpack_require__("/L0j");

var PROPER_FUNCTION_NAME = FunctionName.PROPER;
var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
          redefine(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
  if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
      createNonEnumerableProperty(IterablePrototype, 'name', VALUES);
    } else {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values() { return call(nativeIterator, this); };
    }
  }

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    redefine(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
  }
  Iterators[NAME] = defaultIterator;

  return methods;
};


/***/ }),

/***/ "kjVY":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("Qqkl");
var path = __webpack_require__("j0PW");

module.exports = path.Object.keys;


/***/ }),

/***/ "kkM+":
/***/ (function(module, exports, __webpack_require__) {

var DataView = __webpack_require__("QF3D"),
    Map = __webpack_require__("qeCs"),
    Promise = __webpack_require__("IS0S"),
    Set = __webpack_require__("OBn4"),
    WeakMap = __webpack_require__("4+Vk"),
    baseGetTag = __webpack_require__("Dhk8"),
    toSource = __webpack_require__("c18h");

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;


/***/ }),

/***/ "kn3Q":
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__("HsnV"),
    arrayEach = __webpack_require__("LmOH"),
    assignValue = __webpack_require__("c72w"),
    baseAssign = __webpack_require__("tPQG"),
    baseAssignIn = __webpack_require__("QrYh"),
    cloneBuffer = __webpack_require__("Grae"),
    copyArray = __webpack_require__("QT01"),
    copySymbols = __webpack_require__("AjPR"),
    copySymbolsIn = __webpack_require__("BjSP"),
    getAllKeys = __webpack_require__("tlBq"),
    getAllKeysIn = __webpack_require__("zF5n"),
    getTag = __webpack_require__("kkM+"),
    initCloneArray = __webpack_require__("3Qlq"),
    initCloneByTag = __webpack_require__("7No3"),
    initCloneObject = __webpack_require__("sD1O"),
    isArray = __webpack_require__("wxYD"),
    isBuffer = __webpack_require__("3ajY"),
    isMap = __webpack_require__("NbvU"),
    isObject = __webpack_require__("tQYX"),
    isSet = __webpack_require__("/iLo"),
    keys = __webpack_require__("BlJA"),
    keysIn = __webpack_require__("zH+d");

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;


/***/ }),

/***/ "krtk":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var defineProperty = __webpack_require__("JliG").f;
var create = __webpack_require__("By9b");
var redefineAll = __webpack_require__("mKZK");
var bind = __webpack_require__("9X0z");
var anInstance = __webpack_require__("QjcZ");
var iterate = __webpack_require__("Zf5/");
var defineIterator = __webpack_require__("kYm/");
var setSpecies = __webpack_require__("KTPp");
var DESCRIPTORS = __webpack_require__("5Jdw");
var fastKey = __webpack_require__("N8Lc").fastKey;
var InternalStateModule = __webpack_require__("WRdu");

var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;

module.exports = {
  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper(function (that, iterable) {
      anInstance(that, Prototype);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        index: create(null),
        first: undefined,
        last: undefined,
        size: 0
      });
      if (!DESCRIPTORS) that.size = 0;
      if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
    });

    var Prototype = Constructor.prototype;

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    var define = function (that, key, value) {
      var state = getInternalState(that);
      var entry = getEntry(that, key);
      var previous, index;
      // change existing entry
      if (entry) {
        entry.value = value;
      // create new entry
      } else {
        state.last = entry = {
          index: index = fastKey(key, true),
          key: key,
          value: value,
          previous: previous = state.last,
          next: undefined,
          removed: false
        };
        if (!state.first) state.first = entry;
        if (previous) previous.next = entry;
        if (DESCRIPTORS) state.size++;
        else that.size++;
        // add to index
        if (index !== 'F') state.index[index] = entry;
      } return that;
    };

    var getEntry = function (that, key) {
      var state = getInternalState(that);
      // fast case
      var index = fastKey(key);
      var entry;
      if (index !== 'F') return state.index[index];
      // frozen object case
      for (entry = state.first; entry; entry = entry.next) {
        if (entry.key == key) return entry;
      }
    };

    redefineAll(Prototype, {
      // `{ Map, Set }.prototype.clear()` methods
      // https://tc39.es/ecma262/#sec-map.prototype.clear
      // https://tc39.es/ecma262/#sec-set.prototype.clear
      clear: function clear() {
        var that = this;
        var state = getInternalState(that);
        var data = state.index;
        var entry = state.first;
        while (entry) {
          entry.removed = true;
          if (entry.previous) entry.previous = entry.previous.next = undefined;
          delete data[entry.index];
          entry = entry.next;
        }
        state.first = state.last = undefined;
        if (DESCRIPTORS) state.size = 0;
        else that.size = 0;
      },
      // `{ Map, Set }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.delete
      // https://tc39.es/ecma262/#sec-set.prototype.delete
      'delete': function (key) {
        var that = this;
        var state = getInternalState(that);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.next;
          var prev = entry.previous;
          delete state.index[entry.index];
          entry.removed = true;
          if (prev) prev.next = next;
          if (next) next.previous = prev;
          if (state.first == entry) state.first = next;
          if (state.last == entry) state.last = prev;
          if (DESCRIPTORS) state.size--;
          else that.size--;
        } return !!entry;
      },
      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.foreach
      // https://tc39.es/ecma262/#sec-set.prototype.foreach
      forEach: function forEach(callbackfn /* , that = undefined */) {
        var state = getInternalState(this);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        var entry;
        while (entry = entry ? entry.next : state.first) {
          boundFunction(entry.value, entry.key, this);
          // revert to the last existing entry
          while (entry && entry.removed) entry = entry.previous;
        }
      },
      // `{ Map, Set}.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.has
      // https://tc39.es/ecma262/#sec-set.prototype.has
      has: function has(key) {
        return !!getEntry(this, key);
      }
    });

    redefineAll(Prototype, IS_MAP ? {
      // `Map.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-map.prototype.get
      get: function get(key) {
        var entry = getEntry(this, key);
        return entry && entry.value;
      },
      // `Map.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-map.prototype.set
      set: function set(key, value) {
        return define(this, key === 0 ? 0 : key, value);
      }
    } : {
      // `Set.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-set.prototype.add
      add: function add(value) {
        return define(this, value = value === 0 ? 0 : value, value);
      }
    });
    if (DESCRIPTORS) defineProperty(Prototype, 'size', {
      get: function () {
        return getInternalState(this).size;
      }
    });
    return Constructor;
  },
  setStrong: function (Constructor, CONSTRUCTOR_NAME, IS_MAP) {
    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
    // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
    // https://tc39.es/ecma262/#sec-map.prototype.entries
    // https://tc39.es/ecma262/#sec-map.prototype.keys
    // https://tc39.es/ecma262/#sec-map.prototype.values
    // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
    // https://tc39.es/ecma262/#sec-set.prototype.entries
    // https://tc39.es/ecma262/#sec-set.prototype.keys
    // https://tc39.es/ecma262/#sec-set.prototype.values
    // https://tc39.es/ecma262/#sec-set.prototype-@@iterator
    defineIterator(Constructor, CONSTRUCTOR_NAME, function (iterated, kind) {
      setInternalState(this, {
        type: ITERATOR_NAME,
        target: iterated,
        state: getInternalCollectionState(iterated),
        kind: kind,
        last: undefined
      });
    }, function () {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var entry = state.last;
      // revert to the last existing entry
      while (entry && entry.removed) entry = entry.previous;
      // get next entry
      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
        // or finish the iteration
        state.target = undefined;
        return { value: undefined, done: true };
      }
      // return step by kind
      if (kind == 'keys') return { value: entry.key, done: false };
      if (kind == 'values') return { value: entry.value, done: false };
      return { value: [entry.key, entry.value], done: false };
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // `{ Map, Set }.prototype[@@species]` accessors
    // https://tc39.es/ecma262/#sec-get-map-@@species
    // https://tc39.es/ecma262/#sec-get-set-@@species
    setSpecies(CONSTRUCTOR_NAME);
  }
};


/***/ }),

/***/ "ktkQ":
/***/ (function(module, exports) {



/***/ }),

/***/ "kwr2":
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__("6QIk");

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),

/***/ "l/Ck":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getTimezoneOffsetInMilliseconds;

/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

module.exports = exports.default;

/***/ }),

/***/ "lF2A":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("hQnK");
__webpack_require__("8bDY");

module.exports = parent;


/***/ }),

/***/ "lFsg":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable es-x/no-array-prototype-indexof -- required for testing */
var $ = __webpack_require__("n9AK");
var uncurryThis = __webpack_require__("XQ/X");
var $IndexOf = __webpack_require__("A551").indexOf;
var arrayMethodIsStrict = __webpack_require__("nSCK");

var un$IndexOf = uncurryThis([].indexOf);

var NEGATIVE_ZERO = !!un$IndexOf && 1 / un$IndexOf([1], 1, -0) < 0;
var STRICT_METHOD = arrayMethodIsStrict('indexOf');

// `Array.prototype.indexOf` method
// https://tc39.es/ecma262/#sec-array.prototype.indexof
$({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD }, {
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    var fromIndex = arguments.length > 1 ? arguments[1] : undefined;
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? un$IndexOf(this, searchElement, fromIndex) || 0
      : $IndexOf(this, searchElement, fromIndex);
  }
});


/***/ }),

/***/ "lGT8":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("w0Ba");

/***/ }),

/***/ "lKOy":
/***/ (function(module, exports, __webpack_require__) {

var baseDifference = __webpack_require__("X+YX"),
    baseFlatten = __webpack_require__("YpBQ"),
    baseRest = __webpack_require__("R3TX"),
    isArrayLikeObject = __webpack_require__("Ndl3");

/**
 * Creates an array of `array` values not included in the other given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order and references of result values are
 * determined by the first array.
 *
 * **Note:** Unlike `_.pullAll`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.without, _.xor
 * @example
 *
 * _.difference([2, 1], [2, 3]);
 * // => [1]
 */
var difference = baseRest(function(array, values) {
  return isArrayLikeObject(array)
    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
    : [];
});

module.exports = difference;


/***/ }),

/***/ "lN3w":
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__("EAGB");

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;


/***/ }),

/***/ "lOCh":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("lFsg");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').indexOf;


/***/ }),

/***/ "lSFK":
/***/ (function(module, exports) {



/***/ }),

/***/ "lff2":
/***/ (function(module, exports) {



/***/ }),

/***/ "lpbv":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("DW9Q");

/***/ }),

/***/ "lv3h":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toIndexedObject = __webpack_require__("VcbD");
var addToUnscopables = __webpack_require__("Uh/D");
var Iterators = __webpack_require__("m/wn");
var InternalStateModule = __webpack_require__("WRdu");
var defineProperty = __webpack_require__("JliG").f;
var defineIterator = __webpack_require__("kYm/");
var IS_PURE = __webpack_require__("Vl7J");
var DESCRIPTORS = __webpack_require__("5Jdw");

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.es/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.es/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.es/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.es/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
// https://tc39.es/ecma262/#sec-createmappedargumentsobject
var values = Iterators.Arguments = Iterators.Array;

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

// V8 ~ Chrome 45- bug
if (!IS_PURE && DESCRIPTORS && values.name !== 'values') try {
  defineProperty(values, 'name', { value: 'values' });
} catch (error) { /* empty */ }


/***/ }),

/***/ "lxn1":
/***/ (function(module, exports) {



/***/ }),

/***/ "lyTg":
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "m/wn":
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "m2YG":
/***/ (function(module, exports, __webpack_require__) {

var toFinite = __webpack_require__("fWyh");

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

module.exports = toInteger;


/***/ }),

/***/ "m5o6":
/***/ (function(module, exports, __webpack_require__) {

var Hash = __webpack_require__("Tv3l"),
    ListCache = __webpack_require__("+ooz"),
    Map = __webpack_require__("qeCs");

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),

/***/ "mGvo":
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__("Dhk8"),
    isObjectLike = __webpack_require__("tLQN");

/** `Object#toString` result references. */
var numberTag = '[object Number]';

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
  return typeof value == 'number' ||
    (isObjectLike(value) && baseGetTag(value) == numberTag);
}

module.exports = isNumber;


/***/ }),

/***/ "mGzy":
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__("IBsm");

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;


/***/ }),

/***/ "mKZK":
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__("yX36");

module.exports = function (target, src, options) {
  for (var key in src) {
    if (options && options.unsafe && target[key]) target[key] = src[key];
    else redefine(target, key, src[key], options);
  } return target;
};


/***/ }),

/***/ "mUsV":
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__("5pfJ");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),

/***/ "mVjH":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var isIntegralNumber = __webpack_require__("BkvR");

var abs = Math.abs;

// `Number.isSafeInteger` method
// https://tc39.es/ecma262/#sec-number.issafeinteger
$({ target: 'Number', stat: true }, {
  isSafeInteger: function isSafeInteger(number) {
    return isIntegralNumber(number) && abs(number) <= 0x1FFFFFFFFFFFFF;
  }
});


/***/ }),

/***/ "mbB6":
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__("H87J"),
    baseIteratee = __webpack_require__("S3pA"),
    baseMap = __webpack_require__("bFjY"),
    isArray = __webpack_require__("wxYD");

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}

module.exports = map;


/***/ }),

/***/ "mm5/":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("Tycz");
var path = __webpack_require__("j0PW");

module.exports = path.Array.isArray;


/***/ }),

/***/ "mo0a":
/***/ (function(module, exports) {



/***/ }),

/***/ "moKl":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var apply = __webpack_require__("Hj5v");
var bind = __webpack_require__("9X0z");
var isCallable = __webpack_require__("btm2");
var hasOwn = __webpack_require__("PIIU");
var fails = __webpack_require__("XU0c");
var html = __webpack_require__("R5XV");
var arraySlice = __webpack_require__("B3mq");
var createElement = __webpack_require__("0/JC");
var validateArgumentsLength = __webpack_require__("VYEZ");
var IS_IOS = __webpack_require__("jMEd");
var IS_NODE = __webpack_require__("Cg7V");

var set = global.setImmediate;
var clear = global.clearImmediate;
var process = global.process;
var Dispatch = global.Dispatch;
var Function = global.Function;
var MessageChannel = global.MessageChannel;
var String = global.String;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var location, defer, channel, port;

try {
  // Deno throws a ReferenceError on `location` access without `--location` flag
  location = global.location;
} catch (error) { /* empty */ }

var run = function (id) {
  if (hasOwn(queue, id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var runner = function (id) {
  return function () {
    run(id);
  };
};

var listener = function (event) {
  run(event.data);
};

var post = function (id) {
  // old engines have not location.origin
  global.postMessage(String(id), location.protocol + '//' + location.host);
};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
  set = function setImmediate(handler) {
    validateArgumentsLength(arguments.length, 1);
    var fn = isCallable(handler) ? handler : Function(handler);
    var args = arraySlice(arguments, 1);
    queue[++counter] = function () {
      apply(fn, undefined, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (IS_NODE) {
    defer = function (id) {
      process.nextTick(runner(id));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(runner(id));
    };
  // Browsers with MessageChannel, includes WebWorkers
  // except iOS - https://github.com/zloirock/core-js/issues/624
  } else if (MessageChannel && !IS_IOS) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = bind(port.postMessage, port);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (
    global.addEventListener &&
    isCallable(global.postMessage) &&
    !global.importScripts &&
    location && location.protocol !== 'file:' &&
    !fails(post)
  ) {
    defer = post;
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in createElement('script')) {
    defer = function (id) {
      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(runner(id), 0);
    };
  }
}

module.exports = {
  set: set,
  clear: clear
};


/***/ }),

/***/ "mqoN":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("XQ/X");
var fails = __webpack_require__("XU0c");
var isCallable = __webpack_require__("btm2");
var classof = __webpack_require__("r/P8");
var getBuiltIn = __webpack_require__("wF8L");
var inspectSource = __webpack_require__("8msI");

var noop = function () { /* empty */ };
var empty = [];
var construct = getBuiltIn('Reflect', 'construct');
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec = uncurryThis(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);

var isConstructorModern = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  try {
    construct(noop, empty, argument);
    return true;
  } catch (error) {
    return false;
  }
};

var isConstructorLegacy = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  switch (classof(argument)) {
    case 'AsyncFunction':
    case 'GeneratorFunction':
    case 'AsyncGeneratorFunction': return false;
  }
  try {
    // we can't check .prototype since constructors produced by .bind haven't it
    // `Function#toString` throws on some built-it function in some legacy engines
    // (for example, `DOMQuad` and similar in FF41-)
    return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
  } catch (error) {
    return true;
  }
};

isConstructorLegacy.sham = true;

// `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor
module.exports = !construct || fails(function () {
  var called;
  return isConstructorModern(isConstructorModern.call)
    || !isConstructorModern(Object)
    || !isConstructorModern(function () { called = true; })
    || called;
}) ? isConstructorLegacy : isConstructorModern;


/***/ }),

/***/ "mxB3":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("wA+a");
var path = __webpack_require__("j0PW");

module.exports = path.setTimeout;


/***/ }),

/***/ "myUI":
/***/ (function(module, exports) {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;


/***/ }),

/***/ "n1QJ":
/***/ (function(module, exports) {

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;


/***/ }),

/***/ "n7tI":
/***/ (function(module, exports, __webpack_require__) {

var arraySlice = __webpack_require__("PtsP");

var floor = Math.floor;

var mergeSort = function (array, comparefn) {
  var length = array.length;
  var middle = floor(length / 2);
  return length < 8 ? insertionSort(array, comparefn) : merge(
    array,
    mergeSort(arraySlice(array, 0, middle), comparefn),
    mergeSort(arraySlice(array, middle), comparefn),
    comparefn
  );
};

var insertionSort = function (array, comparefn) {
  var length = array.length;
  var i = 1;
  var element, j;

  while (i < length) {
    j = i;
    element = array[i];
    while (j && comparefn(array[j - 1], element) > 0) {
      array[j] = array[--j];
    }
    if (j !== i++) array[j] = element;
  } return array;
};

var merge = function (array, left, right, comparefn) {
  var llength = left.length;
  var rlength = right.length;
  var lindex = 0;
  var rindex = 0;

  while (lindex < llength || rindex < rlength) {
    array[lindex + rindex] = (lindex < llength && rindex < rlength)
      ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]
      : lindex < llength ? left[lindex++] : right[rindex++];
  } return array;
};

module.exports = mergeSort;


/***/ }),

/***/ "n9AK":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__("oNh+");
var apply = __webpack_require__("Hj5v");
var uncurryThis = __webpack_require__("XQ/X");
var isCallable = __webpack_require__("btm2");
var getOwnPropertyDescriptor = __webpack_require__("c9aA").f;
var isForced = __webpack_require__("JCy+");
var path = __webpack_require__("j0PW");
var bind = __webpack_require__("9X0z");
var createNonEnumerableProperty = __webpack_require__("jNzf");
var hasOwn = __webpack_require__("PIIU");

var wrapConstructor = function (NativeConstructor) {
  var Wrapper = function (a, b, c) {
    if (this instanceof Wrapper) {
      switch (arguments.length) {
        case 0: return new NativeConstructor();
        case 1: return new NativeConstructor(a);
        case 2: return new NativeConstructor(a, b);
      } return new NativeConstructor(a, b, c);
    } return apply(NativeConstructor, this, arguments);
  };
  Wrapper.prototype = NativeConstructor.prototype;
  return Wrapper;
};

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
  options.name        - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var PROTO = options.proto;

  var nativeSource = GLOBAL ? global : STATIC ? global[TARGET] : (global[TARGET] || {}).prototype;

  var target = GLOBAL ? path : path[TARGET] || createNonEnumerableProperty(path, TARGET, {})[TARGET];
  var targetPrototype = target.prototype;

  var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;

  for (key in source) {
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contains in native
    USE_NATIVE = !FORCED && nativeSource && hasOwn(nativeSource, key);

    targetProperty = target[key];

    if (USE_NATIVE) if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(nativeSource, key);
      nativeProperty = descriptor && descriptor.value;
    } else nativeProperty = nativeSource[key];

    // export native or implementation
    sourceProperty = (USE_NATIVE && nativeProperty) ? nativeProperty : source[key];

    if (USE_NATIVE && typeof targetProperty == typeof sourceProperty) continue;

    // bind timers to global for call from export context
    if (options.bind && USE_NATIVE) resultProperty = bind(sourceProperty, global);
    // wrap global constructors for prevent changs in this version
    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty);
    // make static versions for prototype methods
    else if (PROTO && isCallable(sourceProperty)) resultProperty = uncurryThis(sourceProperty);
    // default case
    else resultProperty = sourceProperty;

    // add a flag to not completely full polyfills
    if (options.sham || (sourceProperty && sourceProperty.sham) || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(resultProperty, 'sham', true);
    }

    createNonEnumerableProperty(target, key, resultProperty);

    if (PROTO) {
      VIRTUAL_PROTOTYPE = TARGET + 'Prototype';
      if (!hasOwn(path, VIRTUAL_PROTOTYPE)) {
        createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
      }
      // export virtual prototype methods
      createNonEnumerableProperty(path[VIRTUAL_PROTOTYPE], key, sourceProperty);
      // export real prototype methods
      if (options.real && targetPrototype && !targetPrototype[key]) {
        createNonEnumerableProperty(targetPrototype, key, sourceProperty);
      }
    }
  }
};


/***/ }),

/***/ "nB+7":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("XU0c");
var wellKnownSymbol = __webpack_require__("HVcX");
var V8_VERSION = __webpack_require__("Qb90");

var SPECIES = wellKnownSymbol('species');

module.exports = function (METHOD_NAME) {
  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/677
  return V8_VERSION >= 51 || !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};


/***/ }),

/***/ "nDih":
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__("Dhk8"),
    isArray = __webpack_require__("wxYD"),
    isObjectLike = __webpack_require__("tLQN");

/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
}

module.exports = isString;


/***/ }),

/***/ "nICx":
/***/ (function(module, exports, __webpack_require__) {

var toString = __webpack_require__("Xrs4");

module.exports = function (argument, $default) {
  return argument === undefined ? arguments.length < 2 ? '' : $default : toString(argument);
};


/***/ }),

/***/ "nJ3c":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("VFLD");

module.exports = parent;


/***/ }),

/***/ "nKVx":
/***/ (function(module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__("0fQ6");
var enumBugKeys = __webpack_require__("yk1j");

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es-x/no-object-keys -- safe
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),

/***/ "nNpY":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("RmU5");

/***/ }),

/***/ "nSCK":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__("XU0c");

module.exports = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call -- required for testing
    method.call(null, argument || function () { return 1; }, 1);
  });
};


/***/ }),

/***/ "nVA8":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("yFGb");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').splice;


/***/ }),

/***/ "nX4I":
/***/ (function(module, exports) {



/***/ }),

/***/ "nY5w":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = addMilliseconds;

var _index = _interopRequireDefault(__webpack_require__("yuhP"));

var _index2 = _interopRequireDefault(__webpack_require__("qxgV"));

var _index3 = _interopRequireDefault(__webpack_require__("8EaA"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */
function addMilliseconds(dirtyDate, dirtyAmount) {
  (0, _index3.default)(2, arguments);
  var timestamp = (0, _index2.default)(dirtyDate).getTime();
  var amount = (0, _index.default)(dirtyAmount);
  return new Date(timestamp + amount);
}

module.exports = exports.default;

/***/ }),

/***/ "ncYK":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("xQG8");

module.exports = parent;


/***/ }),

/***/ "nctR":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("LF7m");

/***/ }),

/***/ "ngvS":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var React = _interopRequireWildcard(__webpack_require__("cDcd"));

var _propTypes = _interopRequireDefault(__webpack_require__("aWzz"));

var _Resizable = _interopRequireDefault(__webpack_require__("DIYL"));

var _propTypes2 = __webpack_require__("6rtJ");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ResizableBox = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ResizableBox, _React$Component);

  function ResizableBox() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "state", {
      width: _this.props.width,
      height: _this.props.height,
      propsWidth: _this.props.width,
      propsHeight: _this.props.height
    });

    _defineProperty(_assertThisInitialized(_this), "onResize", function (e, data) {
      var size = data.size;

      if (_this.props.onResize) {
        e.persist && e.persist();

        _this.setState(size, function () {
          return _this.props.onResize && _this.props.onResize(e, data);
        });
      } else {
        _this.setState(size);
      }
    });

    return _this;
  }

  ResizableBox.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    // If parent changes height/width, set that in our state.
    if (state.propsWidth !== props.width || state.propsHeight !== props.height) {
      return {
        width: props.width,
        height: props.height,
        propsWidth: props.width,
        propsHeight: props.height
      };
    }

    return null;
  };

  var _proto = ResizableBox.prototype;

  _proto.render = function render() {
    // Basic wrapper around a Resizable instance.
    // If you use Resizable directly, you are responsible for updating the child component
    // with a new width and height.
    var _this$props = this.props,
        handle = _this$props.handle,
        handleSize = _this$props.handleSize,
        onResize = _this$props.onResize,
        onResizeStart = _this$props.onResizeStart,
        onResizeStop = _this$props.onResizeStop,
        draggableOpts = _this$props.draggableOpts,
        minConstraints = _this$props.minConstraints,
        maxConstraints = _this$props.maxConstraints,
        lockAspectRatio = _this$props.lockAspectRatio,
        axis = _this$props.axis,
        width = _this$props.width,
        height = _this$props.height,
        resizeHandles = _this$props.resizeHandles,
        style = _this$props.style,
        transformScale = _this$props.transformScale,
        props = _objectWithoutPropertiesLoose(_this$props, ["handle", "handleSize", "onResize", "onResizeStart", "onResizeStop", "draggableOpts", "minConstraints", "maxConstraints", "lockAspectRatio", "axis", "width", "height", "resizeHandles", "style", "transformScale"]);

    return /*#__PURE__*/React.createElement(_Resizable.default, {
      axis: axis,
      draggableOpts: draggableOpts,
      handle: handle,
      handleSize: handleSize,
      height: this.state.height,
      lockAspectRatio: lockAspectRatio,
      maxConstraints: maxConstraints,
      minConstraints: minConstraints,
      onResizeStart: onResizeStart,
      onResize: this.onResize,
      onResizeStop: onResizeStop,
      resizeHandles: resizeHandles,
      transformScale: transformScale,
      width: this.state.width
    }, /*#__PURE__*/React.createElement("div", _extends({}, props, {
      style: _objectSpread(_objectSpread({}, style), {}, {
        width: this.state.width + 'px',
        height: this.state.height + 'px'
      })
    })));
  };

  return ResizableBox;
}(React.Component);

exports.default = ResizableBox;

_defineProperty(ResizableBox, "propTypes", _objectSpread(_objectSpread({}, _propTypes2.resizableProps), {}, {
  children: _propTypes.default.element
}));

/***/ }),

/***/ "nlsB":
/***/ (function(module, exports) {



/***/ }),

/***/ "nnRT":
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqual = __webpack_require__("NYSw");

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;


/***/ }),

/***/ "nnm9":
/***/ (function(module, exports) {

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

module.exports = noop;


/***/ }),

/***/ "nvU9":
/***/ (function(module, exports, __webpack_require__) {

var baseTrim = __webpack_require__("I1fX"),
    isObject = __webpack_require__("tQYX"),
    isSymbol = __webpack_require__("a88S");

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;


/***/ }),

/***/ "o2yd":
/***/ (function(module, exports) {



/***/ }),

/***/ "oBkS":
/***/ (function(module, exports, __webpack_require__) {

var arraySome = __webpack_require__("myUI"),
    baseIteratee = __webpack_require__("S3pA"),
    baseSome = __webpack_require__("Inyi"),
    isArray = __webpack_require__("wxYD"),
    isIterateeCall = __webpack_require__("R5u7");

/**
 * Checks if `predicate` returns truthy for **any** element of `collection`.
 * Iteration is stopped once `predicate` returns truthy. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 * @example
 *
 * _.some([null, 0, 'yes', false], Boolean);
 * // => true
 *
 * var users = [
 *   { 'user': 'barney', 'active': true },
 *   { 'user': 'fred',   'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.some(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.some(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.some(users, 'active');
 * // => true
 */
function some(collection, predicate, guard) {
  var func = isArray(collection) ? arraySome : baseSome;
  if (guard && isIterateeCall(collection, predicate, guard)) {
    predicate = undefined;
  }
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = some;


/***/ }),

/***/ "oCTG":
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__("Syyo"),
    isArguments = __webpack_require__("bvyN"),
    isArray = __webpack_require__("wxYD");

/** Built-in value references. */
var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

module.exports = isFlattenable;


/***/ }),

/***/ "oHLe":
/***/ (function(module, exports) {



/***/ }),

/***/ "oNh+":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line es-x/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof global == 'object' && global) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("fRV1")))

/***/ }),

/***/ "odIl":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("nJ3c");

/***/ }),

/***/ "oor1":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("XU0c");
var createPropertyDescriptor = __webpack_require__("96pp");

module.exports = !fails(function () {
  var error = Error('a');
  if (!('stack' in error)) return true;
  // eslint-disable-next-line es-x/no-object-defineproperty -- safe
  Object.defineProperty(error, 'stack', createPropertyDescriptor(1, 7));
  return error.stack !== 7;
});


/***/ }),

/***/ "oydA":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("Y9n4");
__webpack_require__("8bDY");

module.exports = parent;


/***/ }),

/***/ "p++B":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var from = __webpack_require__("EykU");
var checkCorrectnessOfIteration = __webpack_require__("NzBr");

var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
  // eslint-disable-next-line es-x/no-array-from -- required for testing
  Array.from(iterable);
});

// `Array.from` method
// https://tc39.es/ecma262/#sec-array.from
$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
  from: from
});


/***/ }),

/***/ "p1C/":
/***/ (function(module, exports) {

/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

module.exports = last;


/***/ }),

/***/ "p2lg":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("tQYX"),
    isPrototype = __webpack_require__("CbIe"),
    nativeKeysIn = __webpack_require__("/UTG");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;


/***/ }),

/***/ "p6M4":
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__("Dhk8"),
    isObjectLike = __webpack_require__("tLQN");

/** `Object#toString` result references. */
var boolTag = '[object Boolean]';

/**
 * Checks if `value` is classified as a boolean primitive or object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
 * @example
 *
 * _.isBoolean(false);
 * // => true
 *
 * _.isBoolean(null);
 * // => false
 */
function isBoolean(value) {
  return value === true || value === false ||
    (isObjectLike(value) && baseGetTag(value) == boolTag);
}

module.exports = isBoolean;


/***/ }),

/***/ "p7Hb":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var uncurryThis = __webpack_require__("XQ/X");
var aCallable = __webpack_require__("JXge");
var toObject = __webpack_require__("quhl");
var lengthOfArrayLike = __webpack_require__("SO8O");
var toString = __webpack_require__("Xrs4");
var fails = __webpack_require__("XU0c");
var internalSort = __webpack_require__("n7tI");
var arrayMethodIsStrict = __webpack_require__("nSCK");
var FF = __webpack_require__("9c3W");
var IE_OR_EDGE = __webpack_require__("i2yQ");
var V8 = __webpack_require__("Qb90");
var WEBKIT = __webpack_require__("Rd/+");

var test = [];
var un$Sort = uncurryThis(test.sort);
var push = uncurryThis(test.push);

// IE8-
var FAILS_ON_UNDEFINED = fails(function () {
  test.sort(undefined);
});
// V8 bug
var FAILS_ON_NULL = fails(function () {
  test.sort(null);
});
// Old WebKit
var STRICT_METHOD = arrayMethodIsStrict('sort');

var STABLE_SORT = !fails(function () {
  // feature detection can be too slow, so check engines versions
  if (V8) return V8 < 70;
  if (FF && FF > 3) return;
  if (IE_OR_EDGE) return true;
  if (WEBKIT) return WEBKIT < 603;

  var result = '';
  var code, chr, value, index;

  // generate an array with more 512 elements (Chakra and old V8 fails only in this case)
  for (code = 65; code < 76; code++) {
    chr = String.fromCharCode(code);

    switch (code) {
      case 66: case 69: case 70: case 72: value = 3; break;
      case 68: case 71: value = 4; break;
      default: value = 2;
    }

    for (index = 0; index < 47; index++) {
      test.push({ k: chr + index, v: value });
    }
  }

  test.sort(function (a, b) { return b.v - a.v; });

  for (index = 0; index < test.length; index++) {
    chr = test[index].k.charAt(0);
    if (result.charAt(result.length - 1) !== chr) result += chr;
  }

  return result !== 'DGBEFHACIJK';
});

var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;

var getSortCompare = function (comparefn) {
  return function (x, y) {
    if (y === undefined) return -1;
    if (x === undefined) return 1;
    if (comparefn !== undefined) return +comparefn(x, y) || 0;
    return toString(x) > toString(y) ? 1 : -1;
  };
};

// `Array.prototype.sort` method
// https://tc39.es/ecma262/#sec-array.prototype.sort
$({ target: 'Array', proto: true, forced: FORCED }, {
  sort: function sort(comparefn) {
    if (comparefn !== undefined) aCallable(comparefn);

    var array = toObject(this);

    if (STABLE_SORT) return comparefn === undefined ? un$Sort(array) : un$Sort(array, comparefn);

    var items = [];
    var arrayLength = lengthOfArrayLike(array);
    var itemsLength, index;

    for (index = 0; index < arrayLength; index++) {
      if (index in array) push(items, array[index]);
    }

    internalSort(items, getSortCompare(comparefn));

    itemsLength = items.length;
    index = 0;

    while (index < itemsLength) array[index] = items[index++];
    while (index < arrayLength) delete array[index++];

    return array;
  }
});


/***/ }),

/***/ "p7I/":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("xXiX");

/***/ }),

/***/ "pDLF":
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__("wF8L");
var uncurryThis = __webpack_require__("XQ/X");
var getOwnPropertyNamesModule = __webpack_require__("x+gH");
var getOwnPropertySymbolsModule = __webpack_require__("iYt3");
var anObject = __webpack_require__("LTNl");

var concat = uncurryThis([].concat);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ "pFSi":
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__("hyzI");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;


/***/ }),

/***/ "pIod":
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__("y/9h"),
    isArray = __webpack_require__("wxYD");

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;


/***/ }),

/***/ "pJo6":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isProtectedDayOfYearToken = isProtectedDayOfYearToken;
exports.isProtectedWeekYearToken = isProtectedWeekYearToken;
exports.throwProtectedError = throwProtectedError;
var protectedDayOfYearTokens = ['D', 'DD'];
var protectedWeekYearTokens = ['YY', 'YYYY'];

function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}

function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}

function throwProtectedError(token, format, input) {
  if (token === 'YYYY') {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'YY') {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'D') {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'DD') {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  }
}

/***/ }),

/***/ "pL1y":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("YkBG");

module.exports = parent;


/***/ }),

/***/ "pPU8":
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__("Dhk8"),
    isObjectLike = __webpack_require__("tLQN");

/** `Object#toString` result references. */
var dateTag = '[object Date]';

/**
 * The base implementation of `_.isDate` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
 */
function baseIsDate(value) {
  return isObjectLike(value) && baseGetTag(value) == dateTag;
}

module.exports = baseIsDate;


/***/ }),

/***/ "pPzx":
/***/ (function(module, exports) {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),

/***/ "pVjA":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("5Jdw");
var fails = __webpack_require__("XU0c");

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
module.exports = DESCRIPTORS && fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
    value: 42,
    writable: false
  }).prototype != 42;
});


/***/ }),

/***/ "pb5m":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("au0Q");

module.exports = parent;


/***/ }),

/***/ "pnw1":
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),

/***/ "pnws":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = addLeadingZeros;

function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? '-' : '';
  var output = Math.abs(number).toString();

  while (output.length < targetLength) {
    output = '0' + output;
  }

  return sign + output;
}

module.exports = exports.default;

/***/ }),

/***/ "q0jj":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("XU0c");
var isObject = __webpack_require__("H3h0");
var classof = __webpack_require__("WTd3");
var ARRAY_BUFFER_NON_EXTENSIBLE = __webpack_require__("YiZF");

// eslint-disable-next-line es-x/no-object-isextensible -- safe
var $isExtensible = Object.isExtensible;
var FAILS_ON_PRIMITIVES = fails(function () { $isExtensible(1); });

// `Object.isExtensible` method
// https://tc39.es/ecma262/#sec-object.isextensible
module.exports = (FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE) ? function isExtensible(it) {
  if (!isObject(it)) return false;
  if (ARRAY_BUFFER_NON_EXTENSIBLE && classof(it) == 'ArrayBuffer') return false;
  return $isExtensible ? $isExtensible(it) : true;
} : $isExtensible;


/***/ }),

/***/ "q6Y3":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("/e7o");

/***/ }),

/***/ "qJ24":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isDate;

var _index = _interopRequireDefault(__webpack_require__("8EaA"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @name isDate
 * @category Common Helpers
 * @summary Is the given value a date?
 *
 * @description
 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {*} value - the value to check
 * @returns {boolean} true if the given value is a date
 * @throws {TypeError} 1 arguments required
 *
 * @example
 * // For a valid date:
 * const result = isDate(new Date())
 * //=> true
 *
 * @example
 * // For an invalid date:
 * const result = isDate(new Date(NaN))
 * //=> true
 *
 * @example
 * // For some value:
 * const result = isDate('2014-02-31')
 * //=> false
 *
 * @example
 * // For an object:
 * const result = isDate({})
 * //=> false
 */
function isDate(value) {
  (0, _index.default)(1, arguments);
  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';
}

module.exports = exports.default;

/***/ }),

/***/ "qVkA":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "Anchor", function() { return /* reexport */ anchor_0; });
__webpack_require__.d(__webpack_exports__, "AutoComplete", function() { return /* reexport */ autoComplete_0; });
__webpack_require__.d(__webpack_exports__, "Avatar", function() { return /* reexport */ avatar_Avatar; });
__webpack_require__.d(__webpack_exports__, "AvatarGroup", function() { return /* reexport */ avatarGroup_AvatarGroup; });
__webpack_require__.d(__webpack_exports__, "BackTop", function() { return /* reexport */ backtop_BackTop; });
__webpack_require__.d(__webpack_exports__, "Badge", function() { return /* reexport */ badge_Badge; });
__webpack_require__.d(__webpack_exports__, "Banner", function() { return /* reexport */ banner_Banner; });
__webpack_require__.d(__webpack_exports__, "Breadcrumb", function() { return /* reexport */ breadcrumb_0; });
__webpack_require__.d(__webpack_exports__, "Button", function() { return /* reexport */ button_0; });
__webpack_require__.d(__webpack_exports__, "ButtonGroup", function() { return /* reexport */ buttonGroup_ButtonGroup; });
__webpack_require__.d(__webpack_exports__, "Calendar", function() { return /* reexport */ calendar_0; });
__webpack_require__.d(__webpack_exports__, "Card", function() { return /* reexport */ card_0; });
__webpack_require__.d(__webpack_exports__, "CardGroup", function() { return /* reexport */ cardGroup; });
__webpack_require__.d(__webpack_exports__, "Carousel", function() { return /* reexport */ carousel_0; });
__webpack_require__.d(__webpack_exports__, "Cascader", function() { return /* reexport */ cascader_0; });
__webpack_require__.d(__webpack_exports__, "Checkbox", function() { return /* reexport */ checkbox_0; });
__webpack_require__.d(__webpack_exports__, "CheckboxGroup", function() { return /* reexport */ checkboxGroup; });
__webpack_require__.d(__webpack_exports__, "Collapse", function() { return /* reexport */ collapse_0; });
__webpack_require__.d(__webpack_exports__, "Collapsible", function() { return /* reexport */ collapsible_0; });
__webpack_require__.d(__webpack_exports__, "ConfigProvider", function() { return /* reexport */ configProvider_ConfigProvider; });
__webpack_require__.d(__webpack_exports__, "DatePicker", function() { return /* reexport */ datePicker_0; });
__webpack_require__.d(__webpack_exports__, "Descriptions", function() { return /* reexport */ descriptions_0; });
__webpack_require__.d(__webpack_exports__, "Divider", function() { return /* reexport */ divider_0; });
__webpack_require__.d(__webpack_exports__, "Empty", function() { return /* reexport */ empty_Empty; });
__webpack_require__.d(__webpack_exports__, "Modal", function() { return /* reexport */ modal_0; });
__webpack_require__.d(__webpack_exports__, "Dropdown", function() { return /* reexport */ dropdown_0; });
__webpack_require__.d(__webpack_exports__, "DropdownMenu", function() { return /* reexport */ dropdownMenu; });
__webpack_require__.d(__webpack_exports__, "DropdownItem", function() { return /* reexport */ dropdown_dropdownItem; });
__webpack_require__.d(__webpack_exports__, "DropdownDivider", function() { return /* reexport */ dropdownDivider; });
__webpack_require__.d(__webpack_exports__, "Row", function() { return /* reexport */ grid_row; });
__webpack_require__.d(__webpack_exports__, "Col", function() { return /* reexport */ grid_col; });
__webpack_require__.d(__webpack_exports__, "Layout", function() { return /* reexport */ layout_Layout; });
__webpack_require__.d(__webpack_exports__, "List", function() { return /* reexport */ list_0; });
__webpack_require__.d(__webpack_exports__, "IconButton", function() { return /* reexport */ iconButton_0; });
__webpack_require__.d(__webpack_exports__, "Icon", function() { return /* reexport */ icons_0; });
__webpack_require__.d(__webpack_exports__, "Input", function() { return /* reexport */ input_0; });
__webpack_require__.d(__webpack_exports__, "InputGroup", function() { return /* reexport */ inputGroup_inputGroup; });
__webpack_require__.d(__webpack_exports__, "TextArea", function() { return /* reexport */ input_textarea_0; });
__webpack_require__.d(__webpack_exports__, "InputNumber", function() { return /* reexport */ inputNumber_0; });
__webpack_require__.d(__webpack_exports__, "Nav", function() { return /* reexport */ navigation_0; });
__webpack_require__.d(__webpack_exports__, "NavItem", function() { return /* reexport */ Item_NavItem; });
__webpack_require__.d(__webpack_exports__, "SubNav", function() { return /* reexport */ SubNav_SubNav; });
__webpack_require__.d(__webpack_exports__, "Notification", function() { return /* reexport */ notification_0; });
__webpack_require__.d(__webpack_exports__, "OverflowList", function() { return /* reexport */ overflowList_0; });
__webpack_require__.d(__webpack_exports__, "Pagination", function() { return /* reexport */ pagination_Pagination; });
__webpack_require__.d(__webpack_exports__, "Popconfirm", function() { return /* reexport */ popconfirm_Popconfirm; });
__webpack_require__.d(__webpack_exports__, "Popover", function() { return /* reexport */ popover_0; });
__webpack_require__.d(__webpack_exports__, "Progress", function() { return /* reexport */ progress_0; });
__webpack_require__.d(__webpack_exports__, "Radio", function() { return /* reexport */ radio_0; });
__webpack_require__.d(__webpack_exports__, "RadioGroup", function() { return /* reexport */ radioGroup; });
__webpack_require__.d(__webpack_exports__, "Rating", function() { return /* reexport */ rating_Rating; });
__webpack_require__.d(__webpack_exports__, "ScrollList", function() { return /* reexport */ scrollList_0; });
__webpack_require__.d(__webpack_exports__, "ScrollItem", function() { return /* reexport */ scrollItem_ScrollItem; });
__webpack_require__.d(__webpack_exports__, "Select", function() { return /* reexport */ select_0; });
__webpack_require__.d(__webpack_exports__, "SideSheet", function() { return /* reexport */ sideSheet_SideSheet; });
__webpack_require__.d(__webpack_exports__, "Skeleton", function() { return /* reexport */ skeleton_0; });
__webpack_require__.d(__webpack_exports__, "Slider", function() { return /* reexport */ slider_Slider; });
__webpack_require__.d(__webpack_exports__, "Space", function() { return /* reexport */ space_0; });
__webpack_require__.d(__webpack_exports__, "Spin", function() { return /* reexport */ spin_0; });
__webpack_require__.d(__webpack_exports__, "SplitButtonGroup", function() { return /* reexport */ splitButtonGroup_SplitButtonGroup; });
__webpack_require__.d(__webpack_exports__, "Step", function() { return /* reexport */ steps_step; });
__webpack_require__.d(__webpack_exports__, "Steps", function() { return /* reexport */ steps_0; });
__webpack_require__.d(__webpack_exports__, "Switch", function() { return /* reexport */ switch_0; });
__webpack_require__.d(__webpack_exports__, "Table", function() { return /* reexport */ table_0; });
__webpack_require__.d(__webpack_exports__, "Tabs", function() { return /* reexport */ tabs_0; });
__webpack_require__.d(__webpack_exports__, "TabPane", function() { return /* reexport */ tabs_TabPane; });
__webpack_require__.d(__webpack_exports__, "Tag", function() { return /* reexport */ tag_Tag; });
__webpack_require__.d(__webpack_exports__, "TagGroup", function() { return /* reexport */ group_TagGroup; });
__webpack_require__.d(__webpack_exports__, "TagInput", function() { return /* reexport */ tagInput_0; });
__webpack_require__.d(__webpack_exports__, "Timeline", function() { return /* reexport */ timeline_0; });
__webpack_require__.d(__webpack_exports__, "TimePicker", function() { return /* reexport */ timePicker_LocaleTimePicker; });
__webpack_require__.d(__webpack_exports__, "Toast", function() { return /* reexport */ toast_0; });
__webpack_require__.d(__webpack_exports__, "ToastFactory", function() { return /* reexport */ toast_ToastFactory; });
__webpack_require__.d(__webpack_exports__, "Tooltip", function() { return /* reexport */ tooltip_Tooltip; });
__webpack_require__.d(__webpack_exports__, "Tree", function() { return /* reexport */ tree_0; });
__webpack_require__.d(__webpack_exports__, "TreeSelect", function() { return /* reexport */ treeSelect_0; });
__webpack_require__.d(__webpack_exports__, "Upload", function() { return /* reexport */ upload_0; });
__webpack_require__.d(__webpack_exports__, "Typography", function() { return /* reexport */ typography_0; });
__webpack_require__.d(__webpack_exports__, "Transfer", function() { return /* reexport */ transfer_0; });
__webpack_require__.d(__webpack_exports__, "LocaleProvider", function() { return /* reexport */ localeProvider_LocaleProvider; });
__webpack_require__.d(__webpack_exports__, "Form", function() { return /* reexport */ baseForm; });
__webpack_require__.d(__webpack_exports__, "useFormApi", function() { return /* reexport */ useFormApi; });
__webpack_require__.d(__webpack_exports__, "useFormState", function() { return /* reexport */ hooks_useFormState; });
__webpack_require__.d(__webpack_exports__, "useFieldApi", function() { return /* reexport */ hooks_useFieldApi; });
__webpack_require__.d(__webpack_exports__, "useFieldState", function() { return /* reexport */ hooks_useFieldState; });
__webpack_require__.d(__webpack_exports__, "withFormState", function() { return /* reexport */ hoc_withFormState; });
__webpack_require__.d(__webpack_exports__, "withFormApi", function() { return /* reexport */ hoc_withFormApi; });
__webpack_require__.d(__webpack_exports__, "withField", function() { return /* reexport */ hoc_withField; });
__webpack_require__.d(__webpack_exports__, "ArrayField", function() { return /* reexport */ form_arrayField; });

// NAMESPACE OBJECT: ../semi-animation-styled/lib/es/src/constants/types.js
var types_namespaceObject = {};
__webpack_require__.r(types_namespaceObject);
__webpack_require__.d(types_namespaceObject, "attentionSeekers", function() { return attentionSeekers; });
__webpack_require__.d(types_namespaceObject, "bouncingEntrances", function() { return bouncingEntrances; });
__webpack_require__.d(types_namespaceObject, "bouncingExits", function() { return bouncingExits; });
__webpack_require__.d(types_namespaceObject, "fadingEntrances", function() { return fadingEntrances; });
__webpack_require__.d(types_namespaceObject, "fadingExits", function() { return fadingExits; });
__webpack_require__.d(types_namespaceObject, "flippers", function() { return flippers; });
__webpack_require__.d(types_namespaceObject, "lightspeed", function() { return lightspeed; });
__webpack_require__.d(types_namespaceObject, "rotatingEntrances", function() { return rotatingEntrances; });
__webpack_require__.d(types_namespaceObject, "rotatingExits", function() { return rotatingExits; });
__webpack_require__.d(types_namespaceObject, "slidingEntrances", function() { return slidingEntrances; });
__webpack_require__.d(types_namespaceObject, "slidingExits", function() { return slidingExits; });
__webpack_require__.d(types_namespaceObject, "specials", function() { return specials; });
__webpack_require__.d(types_namespaceObject, "zoomingEntrances", function() { return zoomingEntrances; });
__webpack_require__.d(types_namespaceObject, "zoomingExits", function() { return zoomingExits; });

// EXTERNAL MODULE: ./_base/base.scss
var base = __webpack_require__("JxPw");

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/throttle.js
var throttle = __webpack_require__("Bcqe");
var throttle_default = /*#__PURE__*/__webpack_require__.n(throttle);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/debounce.js
var debounce = __webpack_require__("RNvQ");
var debounce_default = /*#__PURE__*/__webpack_require__.n(debounce);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/noop.js
var noop = __webpack_require__("nnm9");
var noop_default = /*#__PURE__*/__webpack_require__.n(noop);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/object/assign.js
var object_assign = __webpack_require__("lGT8");
var assign_default = /*#__PURE__*/__webpack_require__.n(object_assign);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/slice.js
var slice = __webpack_require__("xzjO");
var slice_default = /*#__PURE__*/__webpack_require__.n(slice);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/index-of.js
var index_of = __webpack_require__("jLuO");
var index_of_default = /*#__PURE__*/__webpack_require__.n(index_of);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/splice.js
var splice = __webpack_require__("Bt2r");
var splice_default = /*#__PURE__*/__webpack_require__.n(splice);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/map.js
var instance_map = __webpack_require__("bIJA");
var map_default = /*#__PURE__*/__webpack_require__.n(instance_map);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/concat.js
var concat = __webpack_require__("HUEr");
var concat_default = /*#__PURE__*/__webpack_require__.n(concat);

// EXTERNAL MODULE: external {"root":"React","commonjs2":"react","commonjs":"react","amd":"react"}
var external_root_React_commonjs2_react_commonjs_react_amd_react_ = __webpack_require__("cDcd");
var external_root_React_commonjs2_react_commonjs_react_amd_react_default = /*#__PURE__*/__webpack_require__.n(external_root_React_commonjs2_react_commonjs_react_amd_react_);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/classnames/index.js
var classnames = __webpack_require__("O94r");
var classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/prop-types/index.js
var prop_types = __webpack_require__("aWzz");
var prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);

// CONCATENATED MODULE: ../semi-foundation/base/env.ts
const BASE_CLASS_PREFIX = 'semi';
// CONCATENATED MODULE: ../semi-foundation/anchor/constants.ts

const cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-anchor")
};
const strings = {
  SIZE: ['small', 'default'],
  SLIDE_COLOR: ['primary', 'tertiary', 'muted'],
  MAX_WIDTH: '200px',
  MAX_HEIGHT: '750px',
  POSITION_SET: ['top', 'topLeft', 'topRight', 'left', 'leftTop', 'leftBottom', 'right', 'rightTop', 'rightBottom', 'bottom', 'bottomLeft', 'bottomRight', 'leftTopOver', 'rightTopOver']
};

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/get.js
var lodash_get = __webpack_require__("2srY");
var get_default = /*#__PURE__*/__webpack_require__.n(lodash_get);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/isArray.js
var isArray = __webpack_require__("wxYD");
var isArray_default = /*#__PURE__*/__webpack_require__.n(isArray);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/set.js
var core_js_stable_set = __webpack_require__("ZIXj");
var set_default = /*#__PURE__*/__webpack_require__.n(core_js_stable_set);

// EXTERNAL MODULE: ../semi-foundation/utils/log.ts
var log = __webpack_require__("ffXp");

// CONCATENATED MODULE: ../semi-foundation/base/foundation.ts



/**
 * The Semi Foundation / Adapter architecture split was inspired by Material Component For Web. （https://github.com/material-components/material-components-web）
 * We re-implemented our own code based on the principle and added more functions we need according to actual needs.
 *
 */


class foundation_BaseFoundation {
  constructor(adapter) {
    this._adapter = assign_default()(assign_default()({}, foundation_BaseFoundation.defaultAdapter), adapter);
  }
  /** @return enum{css className} */

  /* istanbul ignore next */


  static get cssClasses() {
    // Classes extending Foundation should implement this method to return an object which exports every
    // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'component--active'}
    return {};
  }
  /** @return enum{strings} */

  /* istanbul ignore next */


  static get strings() {
    // Classes extending Foundation should implement this method to return an object which exports all
    // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
    return {};
  }
  /** @return enum{numbers} */

  /* istanbul ignore next */


  static get numbers() {
    // Classes extending Foundation should implement this method to return an object which exports all
    // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
    return {};
  }

  static get defaultAdapter() {
    return {
      getProp: noop_default.a,
      getProps: noop_default.a,
      getState: noop_default.a,
      getStates: noop_default.a,
      setState: noop_default.a,
      getContext: noop_default.a,
      getContexts: noop_default.a,
      getCache: noop_default.a,
      setCache: noop_default.a,
      getCaches: noop_default.a,
      stopPropagation: noop_default.a
    };
  }

  getProp(key) {
    return this._adapter.getProp(key);
  }

  getProps() {
    return this._adapter.getProps();
  }

  getState(key) {
    return this._adapter.getState(key);
  }

  getStates() {
    return this._adapter.getStates();
  }

  setState(states, cb) {
    return this._adapter.setState(assign_default()({}, states), cb);
  }

  getContext(key) {
    return this._adapter.getContext(key);
  }
  /* istanbul ignore next */


  getContexts() {
    return this._adapter.getContexts();
  }
  /* istanbul ignore next */


  getCaches() {
    return this._adapter.getCaches();
  }

  getCache(key) {
    return this._adapter.getCache(key);
  }

  setCache(key, value) {
    return key && this._adapter.setCache(key, value);
  }

  stopPropagation(e) {
    this._adapter.stopPropagation(e);
  } // Determine whether a controlled component


  _isControlledComponent() {
    let key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'value';
    const props = this.getProps();
    const isControlComponent = (key in props);
    return isControlComponent;
  } // Does the user have incoming props, eg: _isInProps (value)


  _isInProps(key) {
    const props = this.getProps();
    return key in props;
  }

  init(lifecycle) {// Subclasses should override this method to perform initialization routines (registering events, etc.)
  }

  destroy() {// Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
  }
  /* istanbul ignore next */


  log(text) {
    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    Object(log["a" /* default */])(text, ...rest);
  }

}

/* harmony default export */ var foundation = (foundation_BaseFoundation);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/compute-scroll-into-view/dist/index.module.js
function index_module_t(t){return"object"==typeof t&&null!=t&&1===t.nodeType}function index_module_e(t,e){return(!e||"hidden"!==t)&&"visible"!==t&&"clip"!==t}function index_module_n(t,n){if(t.clientHeight<t.scrollHeight||t.clientWidth<t.scrollWidth){var r=getComputedStyle(t,null);return index_module_e(r.overflowY,n)||index_module_e(r.overflowX,n)||function(t){var e=function(t){if(!t.ownerDocument||!t.ownerDocument.defaultView)return null;try{return t.ownerDocument.defaultView.frameElement}catch(t){return null}}(t);return!!e&&(e.clientHeight<t.scrollHeight||e.clientWidth<t.scrollWidth)}(t)}return!1}function index_module_r(t,e,n,r,i,o,l,d){return o<t&&l>e||o>t&&l<e?0:o<=t&&d<=n||l>=e&&d>=n?o-t-r:l>e&&d<n||o<t&&d>n?l-e+i:0}/* harmony default export */ var index_module = (function(e,i){var o=window,l=i.scrollMode,d=i.block,u=i.inline,h=i.boundary,a=i.skipOverflowHiddenElements,c="function"==typeof h?h:function(t){return t!==h};if(!index_module_t(e))throw new TypeError("Invalid target");for(var f=document.scrollingElement||document.documentElement,s=[],p=e;index_module_t(p)&&c(p);){if((p=p.parentElement)===f){s.push(p);break}null!=p&&p===document.body&&index_module_n(p)&&!index_module_n(document.documentElement)||null!=p&&index_module_n(p,a)&&s.push(p)}for(var m=o.visualViewport?o.visualViewport.width:innerWidth,g=o.visualViewport?o.visualViewport.height:innerHeight,w=window.scrollX||pageXOffset,v=window.scrollY||pageYOffset,W=e.getBoundingClientRect(),b=W.height,H=W.width,y=W.top,E=W.right,M=W.bottom,V=W.left,x="start"===d||"nearest"===d?y:"end"===d?M:y+b/2,I="center"===u?V+H/2:"end"===u?E:V,C=[],T=0;T<s.length;T++){var k=s[T],B=k.getBoundingClientRect(),D=B.height,O=B.width,R=B.top,X=B.right,Y=B.bottom,L=B.left;if("if-needed"===l&&y>=0&&V>=0&&M<=g&&E<=m&&y>=R&&M<=Y&&V>=L&&E<=X)return C;var S=getComputedStyle(k),j=parseInt(S.borderLeftWidth,10),q=parseInt(S.borderTopWidth,10),z=parseInt(S.borderRightWidth,10),A=parseInt(S.borderBottomWidth,10),F=0,G=0,J="offsetWidth"in k?k.offsetWidth-k.clientWidth-j-z:0,K="offsetHeight"in k?k.offsetHeight-k.clientHeight-q-A:0;if(f===k)F="start"===d?x:"end"===d?x-g:"nearest"===d?index_module_r(v,v+g,g,q,A,v+x,v+x+b,b):x-g/2,G="start"===u?I:"center"===u?I-m/2:"end"===u?I-m:index_module_r(w,w+m,m,j,z,w+I,w+I+H,H),F=Math.max(0,F+v),G=Math.max(0,G+w);else{F="start"===d?x-R-q:"end"===d?x-Y+A+K:"nearest"===d?index_module_r(R,Y,D,q,A+K,x,x+b,b):x-(R+D/2)+K/2,G="start"===u?I-L-j:"center"===u?I-(L+O/2)+J/2:"end"===u?I-X+z+J:index_module_r(L,X,O,j,z+J,I,I+H,H);var N=k.scrollLeft,P=k.scrollTop;x+=P-(F=Math.max(0,Math.min(P+F,k.scrollHeight-D+K))),I+=N-(G=Math.max(0,Math.min(N+G,k.scrollWidth-O+J)))}C.push({el:k,top:F,left:G})}return C});
//# sourceMappingURL=index.module.js.map

// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/scroll-into-view-if-needed/es/index.js


function isOptionsObject(options) {
  return options === Object(options) && Object.keys(options).length !== 0;
}

function defaultBehavior(actions, behavior) {
  if (behavior === void 0) {
    behavior = 'auto';
  }

  var canSmoothScroll = ('scrollBehavior' in document.body.style);
  actions.forEach(function (_ref) {
    var el = _ref.el,
        top = _ref.top,
        left = _ref.left;

    if (el.scroll && canSmoothScroll) {
      el.scroll({
        top: top,
        left: left,
        behavior: behavior
      });
    } else {
      el.scrollTop = top;
      el.scrollLeft = left;
    }
  });
}

function getOptions(options) {
  if (options === false) {
    return {
      block: 'end',
      inline: 'nearest'
    };
  }

  if (isOptionsObject(options)) {
    return options;
  }

  return {
    block: 'start',
    inline: 'nearest'
  };
}

function scrollIntoView(target, options) {
  var isTargetAttached = target.isConnected || target.ownerDocument.documentElement.contains(target);

  if (isOptionsObject(options) && typeof options.behavior === 'function') {
    return options.behavior(isTargetAttached ? index_module(target, options) : []);
  }

  if (!isTargetAttached) {
    return;
  }

  var computeOptions = getOptions(options);
  return defaultBehavior(index_module(target, computeOptions), computeOptions.behavior);
}

/* harmony default export */ var es = (scrollIntoView);
// CONCATENATED MODULE: ../semi-foundation/anchor/foundation.ts







const foundation_prefixCls = cssClasses.PREFIX;
class foundation_AnchorFoundation extends foundation {
  constructor(adapter) {
    var _this;

    super(assign_default()(assign_default()({}, foundation_AnchorFoundation.defaultAdapter), adapter));
    _this = this;

    // eslint-disable-next-line @typescript-eslint/no-empty-function
    this.init = () => {}; // eslint-disable-next-line @typescript-eslint/no-empty-function


    this.destroy = () => {};

    this.addLink = link => {
      this._adapter.addLink(link);
    };

    this.removeLink = link => {
      this._adapter.removeLink(link);
    };

    this.setActiveLink = function (link, prevLink) {
      let shouldNotify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      const activeLink = _this._adapter.getState('activeLink');

      const onChange = _this._adapter.getProp('onChange');

      if (activeLink !== link) {
        _this._adapter.setActiveLink(link, _this._setActiveSlide);

        if (onChange && shouldNotify) {
          _this._adapter.notifyChange(link, prevLink);
        }
      }
    }; // Adjust rail height according to text link content height


    this.setScrollHeight = () => {
      const anchorWrapper = ".".concat(foundation_prefixCls, "-link-wrapper");

      const anchorNode = this._adapter.getAnchorNode(anchorWrapper);

      if (anchorNode) {
        const scrollHeight = "".concat(anchorNode.scrollHeight, "px");

        this._adapter.setScrollHeight(scrollHeight);
      }
    };

    this.updateScrollHeight = (prevState, state) => {
      const prevLinks = prevState.links.join('');
      const links = state.links.join('');

      if (prevLinks !== links) {
        this.setScrollHeight();
      }
    };

    this.setChildMap = () => {
      const children = this._adapter.getProp('children');

      const childMap = {};

      if (isArray_default()(children)) {
        for (const link of children) {
          this._getLinkToMap(link, [], childMap);
        }
      } else {
        this._getLinkToMap(children, [], childMap);
      }

      this._adapter.setChildMap(childMap);
    };

    this.updateChildMap = (prevState, state) => {
      const prevLinks = prevState.links.join('');
      const links = state.links.join('');

      if (prevLinks !== links) {
        this.setChildMap();
      }
    };

    this.getLinksTop = () => this._adapter.getLinksBoundingTop();

    this.handleScroll = () => {
      const {
        clickLink,
        links,
        activeLink: prevActiveLink
      } = this.getStates(); // TODO check this._adapter -> this.
      // ActiveLink Determined by the clicked link

      if (clickLink) {
        return;
      }

      const elTop = this.getLinksTop();
      let lastNegative = -Infinity;
      let lastNegativeIndex = -1;

      for (let i = 0; i < elTop.length; i++) {
        if (elTop[i] < 0 && elTop[i] > lastNegative) {
          lastNegative = elTop[i];
          lastNegativeIndex = i;
        }
      }

      const activeLink = links[lastNegativeIndex];
      this.setActiveLink(activeLink, prevActiveLink);
    };

    this.handleClick = function (e, link) {
      let shouldNotify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      const destNode = _this._adapter.getContentNode(link);

      const prevLink = _this._adapter.getState('activeLink');

      _this.setActiveLink(link, prevLink, shouldNotify);

      if (destNode) {
        try {
          _this._adapter.setClickLinkWithCallBack(true, link, _this._scrollIntoView);
        } catch (error) {}
      }

      shouldNotify && _this._adapter.notifyClick(e, link);
    };

    this.handleClickLink = () => {
      this._adapter.setClickLink(false);
    }; // Get the child nodes of each link


    this._getLinkToMap = (link, parents, linkMap) => {
      const node = link && link.props;

      if (!node || !node.href) {
        return;
      }

      if (!(node.href in linkMap)) {
        linkMap[node.href] = new set_default.a();
      } // Every ancestor kept a map


      for (const parent of parents) {
        linkMap[parent].add(node.href);
      }

      if (node.children && node.children.length) {
        parents.push(node.href); // Maintain child node map

        for (const child of node.children) {
          this._getLinkToMap(child, parents, linkMap);
        }

        parents.pop();
      }
    };

    this._scrollIntoView = link => {
      const {
        scrollMotion,
        targetOffset
      } = this.getProps(); // TODO check this._adapter -> this.

      const behavior = scrollMotion ? 'smooth' : 'auto';

      const canSmoothScroll = this._adapter.canSmoothScroll();

      if (link) {
        const destNode = this._adapter.getContentNode(link);

        const scrollOpts = {
          /**
           * Behavior defines scrolling behavior
           *  - Optional'auto '|' smooth '| Function
           *  - Function Custom scrolling behavior
           *    - Enter parameters as actions, each action contains an element that should be scrolled
           *    - Actions include scrolling containers to the outermost scrollable container (document.body), the scrollable capacity needs to meet
           *      1. The parent of the scroll container (directly or indirectly)
           *      2. There is a scroll axis (clientHeight < scrollHeight | | clientWidth < scrollWidth)
           *      3.overflowX or overflowY has a value and is not visible or clip
           *       For details, please see https://github.com/stipsan/compute-scroll-into-view
           *
           * behavior定义滚动行为
           *  - 可选 'auto' | 'smooth' | Function
           *  - Function 自定义滚动行为
           *    - 入参为 actions，每个action包含一个应该滚动的元素
           *    - actions包括滚动容器到最外层的可滚动容器（document.body），可滚动容需满足
           *      1. 滚动容器的父级（直接或间接）
           *      2. 有滚动轴（clientHeight < scrollHeight || clientWidth < scrollWidth）
           *      3. overflowX 或 overflowY 有值且不为 visible 或 clip
           *      详情请看https://github.com/stipsan/compute-scroll-into-view
           */
          behavior: actions => {
            // We just need to scroll the innermost target container
            const innermostAction = get_default()(actions, '0');

            const el = get_default()(innermostAction, 'el');

            const top = get_default()(innermostAction, 'top');

            if (el) {
              const offsetTop = top - targetOffset;

              if (el.scroll && canSmoothScroll) {
                el.scroll({
                  top: offsetTop,
                  behavior
                });
              } else {
                el.scrollTop = offsetTop;
              }
            }
          },
          block: 'start'
        };

        if (destNode) {
          es(destNode, scrollOpts);
        }
      }
    };

    this._setActiveSlide = () => {
      const activeClass = ".".concat(cssClasses.PREFIX, "-link-title-active");

      const linkNode = this._adapter.getAnchorNode(activeClass);

      if (linkNode) {
        const height = linkNode.offsetTop;

        this._adapter.setSlideBarTop(height);
      }
    };
  }

}
// CONCATENATED MODULE: ./_base/baseComponent.tsx


/**
 * The Semi Foundation / Adapter architecture split was inspired by Material Component For Web. （https://github.com/material-components/material-components-web）
 * We re-implemented our own code based on the principle and added more functions we need according to actual needs.
 */


const {
  hasOwnProperty: baseComponent_hasOwnProperty
} = Object.prototype; // eslint-disable-next-line

class baseComponent_BaseComponent extends external_root_React_commonjs2_react_commonjs_react_amd_react_["Component"] {
  constructor(props) {
    super(props); // eslint-disable-next-line

    this.isControlled = key => Boolean(key && this.props && typeof this.props === 'object' && baseComponent_hasOwnProperty.call(this.props, key));

    this.cache = {};
    this.foundation = null;
  }

  componentDidMount() {
    this.foundation && typeof this.foundation.init === 'function' && this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation && typeof this.foundation.destroy === 'function' && this.foundation.destroy();
    this.cache = {};
  }

  get adapter() {
    return {
      getContext: key => {
        if (this.context && key) {
          return this.context[key];
        }
      },
      getContexts: () => this.context,
      getProp: key => this.props[key],
      // return all props
      getProps: () => this.props,
      getState: key => this.state[key],
      getStates: () => this.state,
      setState: (states, cb) => this.setState(assign_default()({}, states), cb),
      getCache: key => key && this.cache[key],
      getCaches: () => this.cache,
      setCache: (key, value) => key && (this.cache[key] = value),
      stopPropagation: e => {
        try {
          e.stopPropagation();
          e.nativeEvent && e.nativeEvent.stopImmediatePropagation();
        } catch (error) {}
      }
    };
  }

  log(text) {
    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    return Object(log["a" /* default */])(text, ...rest);
  }

}
baseComponent_BaseComponent.propTypes = {};
baseComponent_BaseComponent.defaultProps = {};
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/bind.js
var bind = __webpack_require__("LBwL");
var bind_default = /*#__PURE__*/__webpack_require__.n(bind);

// CONCATENATED MODULE: ../semi-foundation/anchor/linkFoundation.ts


class linkFoundation_LinkFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  }

  init() {// this.setInitValue();
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  destroy() {}

  handleAddLink() {
    const href = this._adapter.getProp('href');

    this._adapter.addLink(href);
  }

  handleUpdateLink(href, prevHref) {
    if (href !== prevHref) {
      this._adapter.removeLink(prevHref);

      this._adapter.addLink(href);
    }
  }

  handleRemoveLink() {
    const href = this._adapter.getProp('href');

    this._adapter.removeLink(href);
  }

}
// CONCATENATED MODULE: ./anchor/anchor-context.ts

const AnchorContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext(null);
/* harmony default export */ var anchor_context = (AnchorContext);
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols.js
var get_own_property_symbols = __webpack_require__("odIl");
var get_own_property_symbols_default = /*#__PURE__*/__webpack_require__.n(get_own_property_symbols);

// CONCATENATED MODULE: ../semi-foundation/typography/constants.ts

const constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-typography")
};
const constants_strings = {
  TYPE: ['primary', 'secondary', 'danger', 'warning', 'success', 'tertiary', 'quaternary'],
  SIZE: ['normal', 'small'],
  SPACING: ['normal', 'extended'],
  HEADING: [1, 2, 3, 4, 5, 6]
};

// EXTERNAL MODULE: ../semi-foundation/typography/typography.scss
var typography = __webpack_require__("LoE1");

// CONCATENATED MODULE: ./typography/typography.tsx




var __rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};






const typography_prefixCls = constants_cssClasses.PREFIX;

class typography_Typography extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    const _a = this.props,
          {
      component,
      className,
      children,
      forwardRef
    } = _a,
          rest = __rest(_a, ["component", "className", "children", "forwardRef"]);

    const Component = component;
    const classNames = classnames_default()(typography_prefixCls, className);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Component, assign_default()({
      className: classNames,
      ref: forwardRef
    }, rest), children);
  }

}

typography_Typography.defaultProps = {
  component: 'article',
  style: {},
  className: ''
};
typography_Typography.propTypes = {
  component: prop_types_default.a.string,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string
};
/* harmony default export */ var typography_typography = (typography_Typography);
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/isString.js
var isString = __webpack_require__("nDih");
var isString_default = /*#__PURE__*/__webpack_require__.n(isString);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/merge.js
var merge = __webpack_require__("H8sf");
var merge_default = /*#__PURE__*/__webpack_require__.n(merge);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/omit.js
var omit = __webpack_require__("uZih");
var omit_default = /*#__PURE__*/__webpack_require__.n(omit);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/isUndefined.js
var isUndefined = __webpack_require__("CZlo");
var isUndefined_default = /*#__PURE__*/__webpack_require__.n(isUndefined);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js
var is_array = __webpack_require__("+8d6");
var is_array_default = /*#__PURE__*/__webpack_require__.n(is_array);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/for-each.js
var for_each = __webpack_require__("w4m/");
var for_each_default = /*#__PURE__*/__webpack_require__.n(for_each);

// EXTERNAL MODULE: external {"root":"ReactDOM","commonjs2":"react-dom","commonjs":"react-dom","amd":"react-dom"}
var external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_ = __webpack_require__("faye");
var external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default = /*#__PURE__*/__webpack_require__.n(external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/set-timeout.js
var set_timeout = __webpack_require__("rPqN");
var set_timeout_default = /*#__PURE__*/__webpack_require__.n(set_timeout);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/isFunction.js
var isFunction = __webpack_require__("2q8g");
var isFunction_default = /*#__PURE__*/__webpack_require__.n(isFunction);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/isEmpty.js
var lodash_isEmpty = __webpack_require__("MwrP");
var isEmpty_default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/each.js
var lodash_each = __webpack_require__("h4um");
var each_default = /*#__PURE__*/__webpack_require__.n(lodash_each);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/includes.js
var includes = __webpack_require__("DeC2");
var includes_default = /*#__PURE__*/__webpack_require__.n(includes);

// EXTERNAL MODULE: ../semi-foundation/utils/warning.ts
var warning = __webpack_require__("MYbw");

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/map.js
var core_js_stable_map = __webpack_require__("/f7G");
var core_js_stable_map_default = /*#__PURE__*/__webpack_require__.n(core_js_stable_map);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/find-index.js
var find_index = __webpack_require__("a637");
var find_index_default = /*#__PURE__*/__webpack_require__.n(find_index);

// CONCATENATED MODULE: ../semi-foundation/utils/isNullOrUndefined.ts
/**
 * Whether null or undefined
 * @param {*} value
 * @returns  {boolean}
 */
function isNullOrUndefined(value) {
  return value === null || value === undefined;
}
// CONCATENATED MODULE: ../semi-foundation/utils/Event.ts






class Event_Event {
  constructor() {
    this._eventMap = new core_js_stable_map_default.a();
  }

  on(event, callback) {
    if (event && typeof callback === 'function') {
      this._eventMap.has(event) || this._eventMap.set(event, []);

      this._eventMap.get(event).push(callback);
    }

    return this;
  }

  once(event, callback) {
    var _this = this;

    if (event && typeof callback === 'function') {
      const fn = function () {
        callback(...arguments);

        _this.off(event, fn);
      };

      this.on(event, fn);
    }
  }

  off(event, callback) {
    if (event) {
      if (typeof callback === 'function') {
        const callbacks = this._eventMap.get(event);

        if (is_array_default()(callbacks) && callbacks.length) {
          let index = -1; // eslint-disable-next-line max-depth

          while ((index = find_index_default()(callbacks).call(callbacks, cb => cb === callback)) > -1) {
            splice_default()(callbacks).call(callbacks, index, 1);
          }
        }
      } else if (isNullOrUndefined(callback)) {
        this._eventMap.delete(event);
      }
    }

    return this;
  }

  emit(event) {
    var _context;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (!this._eventMap.has(event)) {
      return false;
    }

    for_each_default()(_context = this._eventMap.get(event)).call(_context, callback => callback(...args));

    return true;
  }

}
// EXTERNAL MODULE: ../semi-foundation/utils/dom.ts
var dom = __webpack_require__("0J6L");

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js
var define_property = __webpack_require__("K1iI");
var define_property_default = /*#__PURE__*/__webpack_require__.n(define_property);

// CONCATENATED MODULE: ../semi-foundation/utils/a11y.ts


function handlePrevent(event) {
  event.stopPropagation();
  event.preventDefault();
}
function isPrintableCharacter(string) {
  return string.length === 1 && string.match(/\S/);
} // set focus to the target item in item list

function setFocusToItem(itemNodes, targetItem) {
  for (let i = 0; i < itemNodes.length; i++) {
    if (itemNodes[i] === targetItem) {
      itemNodes[i].tabIndex = 0;
      itemNodes[i].focus();
    } else {
      itemNodes[i].tabIndex = -1;
    }
  }
} // set focus to the first item in item list

function setFocusToFirstItem(itemNodes) {
  itemNodes.length > 0 && setFocusToItem(itemNodes, itemNodes[0]);
} // set focus to the last item in item list

function setFocusToLastItem(itemNodes) {
  itemNodes.length > 0 && setFocusToItem(itemNodes, itemNodes[itemNodes.length - 1]);
} // set focus to the previous item in item list

function setFocusToPreviousMenuItem(itemNodes, currentItem) {
  let newMenuItem, index;

  if (itemNodes.length > 0) {
    if (currentItem === itemNodes[0]) {
      newMenuItem = itemNodes[itemNodes.length - 1];
    } else {
      index = index_of_default()(itemNodes).call(itemNodes, currentItem);
      newMenuItem = itemNodes[index - 1];
    }

    setFocusToItem(itemNodes, newMenuItem);
  }
} // set focus to the next item in item list

function setFocusToNextMenuitem(itemNodes, currentItem) {
  let newMenuItem, index;

  if (itemNodes.length > 0) {
    if (currentItem === itemNodes[itemNodes.length - 1]) {
      newMenuItem = itemNodes[0];
    } else {
      index = index_of_default()(itemNodes).call(itemNodes, currentItem);
      newMenuItem = itemNodes[index + 1];
    }

    setFocusToItem(itemNodes, newMenuItem);
  }
}
function findIndexByCharacter(itemList, curItem, firstCharList, char) {
  let start, index;

  if (!itemList || !firstCharList || !char || char.length > 1) {
    return -1;
  }

  char = char.toLowerCase(); // Get start index for search based on position of currentItem

  start = index_of_default()(itemList).call(itemList, curItem) + 1;

  if (start >= itemList.length) {
    start = 0;
  } // Check remaining menu items in the menu


  index = index_of_default()(firstCharList).call(firstCharList, char, start); // If not found in remaining menu items, check from beginning

  if (index === -1) {
    index = index_of_default()(firstCharList).call(firstCharList, char, 0);
  }

  return index >= 0 ? index : -1;
}
function getAncestorNodeByRole(curElement, role) {
  if (!curElement) {
    return null;
  }

  while (curElement.parentElement && get_default()(curElement.parentElement, 'attributes.role.value', '') !== role) {
    curElement = curElement.parentElement;
  }

  return curElement.parentElement;
} // According to the Id, find the corresponding data-popupid element

function getMenuButton(focusableEle, Id) {
  for (let i = 0; i < focusableEle.length; i++) {
    const curAriDescribedby = focusableEle[i].attributes['data-popupid'];

    if (curAriDescribedby && curAriDescribedby.value === Id) {
      return focusableEle[i];
    }
  }

  return null;
}
// CONCATENATED MODULE: ../semi-foundation/tooltip/foundation.ts










const REGS = {
  TOP: /top/i,
  RIGHT: /right/i,
  BOTTOM: /bottom/i,
  LEFT: /left/i
};
const defaultRect = {
  left: 0,
  top: 0,
  height: 0,
  width: 0,
  scrollLeft: 0,
  scrollTop: 0
};
class foundation_Tooltip extends foundation {
  constructor(adapter) {
    var _this;

    super(assign_default()({}, adapter));
    _this = this;

    this.onResize = () => {
      // this.log('resize');
      // rePosition when window resize
      this.calcPosition();
    };

    this.delayShow = () => {
      const mouseEnterDelay = this.getProp('mouseEnterDelay');
      this.clearDelayTimer();

      if (mouseEnterDelay > 0) {
        this._timer = set_timeout_default()(() => {
          this.show();
          this.clearDelayTimer();
        }, mouseEnterDelay);
      } else {
        this.show();
      }
    };

    this.show = () => {
      const content = this.getProp('content');
      const trigger = this.getProp('trigger');
      const clickTriggerToHide = this.getProp('clickTriggerToHide');
      this.clearDelayTimer();
      /**
       * If you emit an event in setState callback, you need to place the event listener function before setState to execute.
       * This is to avoid event registration being executed later than setState callback when setState is executed in setTimeout.
       * internal-issues:1402#note_38969412
       */

      this._adapter.on('portalInserted', () => {
        this.calcPosition();
      });

      this._adapter.on('positionUpdated', () => {
        this._togglePortalVisible(true);
      });

      const position = this.calcPosition(null, null, null, false);

      this._adapter.insertPortal(content, position);

      if (trigger === 'custom') {
        // eslint-disable-next-line
        this._adapter.registerClickOutsideHandler(() => {});
      }
      /**
       * trigger类型是click时，仅当portal被插入显示后，才绑定clickOutsideHandler
       * 因为handler需要绑定在document上。如果在constructor阶段绑定
       * 当一个页面中有多个容器实例时，一次click会触发多个容器的handler
       *
       * When the trigger type is click, clickOutsideHandler is bound only after the portal is inserted and displayed
       * Because the handler needs to be bound to the document. If you bind during the constructor phase
       * When there are multiple container instances in a page, one click triggers the handler of multiple containers
       */


      if (trigger === 'click' || clickTriggerToHide) {
        this._adapter.registerClickOutsideHandler(this.hide);
      }

      this._bindScrollEvent();

      this._bindResizeEvent();
    };
    /**
     * 耦合的东西比较多，稍微罗列一下：
     *
     * - 根据 trigger 和 wrapper 的 boundingClient 计算当前的 left、top、transform-origin
     * - 根据当前的 position 和 wrapper 的 boundingClient 决定是否需要自动调整位置
     * - 根据当前的 position、trigger 的 boundingClient 以及 motion.handleStyle 调整当前的 style
     *
     * There are many coupling things, a little list:
     *
     * - calculate the current left, top, and transfer-origin according to the boundingClient of trigger and wrapper
     * - decide whether to automatically adjust the position according to the current position and the boundingClient of wrapper
     * - adjust the current style according to the current position, the boundingClient of trigger and motion.handle Style
     */


    this.calcPosition = function (triggerRect, wrapperRect, containerRect) {
      let shouldUpdatePos = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      triggerRect = (isEmpty_default()(triggerRect) ? _this._adapter.getTriggerBounding() : triggerRect) || assign_default()({}, defaultRect);
      containerRect = (isEmpty_default()(containerRect) ? _this._adapter.getPopupContainerRect() : containerRect) || assign_default()({}, defaultRect);
      wrapperRect = (isEmpty_default()(wrapperRect) ? _this._adapter.getWrapperBounding() : wrapperRect) || assign_default()({}, defaultRect); // console.log('containerRect: ', containerRect, 'triggerRect: ', triggerRect, 'wrapperRect: ', wrapperRect);

      let style = _this.calcPosStyle(triggerRect, wrapperRect, containerRect);

      let position = _this.getProp('position');

      if (_this.getProp('autoAdjustOverflow')) {
        // console.log('style: ', style, '\ntriggerRect: ', triggerRect, '\nwrapperRect: ', wrapperRect);
        const adjustedPos = _this.adjustPosIfNeed(position, style, triggerRect, wrapperRect, containerRect);

        if (position !== adjustedPos) {
          position = adjustedPos;
          style = _this.calcPosStyle(triggerRect, wrapperRect, containerRect, position);
        }
      }

      if (shouldUpdatePos && _this._mounted) {
        // this._adapter.updatePlacementAttr(style.position);
        _this._adapter.setPosition(assign_default()(assign_default()({}, style), {
          position
        }));
      }

      return style;
    };

    this.delayHide = () => {
      const mouseLeaveDelay = this.getProp('mouseLeaveDelay');
      this.clearDelayTimer();

      if (mouseLeaveDelay > 0) {
        this._timer = set_timeout_default()(() => {
          // console.log('delayHide for ', mouseLeaveDelay, ' ms, ', ...args);
          this.hide();
          this.clearDelayTimer();
        }, mouseLeaveDelay);
      } else {
        this.hide();
      }
    };

    this.hide = () => {
      this.clearDelayTimer();

      this._togglePortalVisible(false);

      this._adapter.off('portalInserted');

      this._adapter.off('positionUpdated');

      if (!this._adapter.canMotion()) {
        this._adapter.removePortal(); // When the portal is removed, the global click outside event binding is also removed


        this._adapter.unregisterClickOutsideHandler();

        this._unBindScrollEvent();

        this._unBindResizeEvent();
      }
    };

    this.handleContainerKeydown = event => {
      const {
        guardFocus,
        closeOnEsc
      } = this.getProps();

      switch (event && event.key) {
        case "Escape":
          closeOnEsc && this._handleEscKeyDown(event);
          break;

        case "Tab":
          if (guardFocus) {
            const container = this._adapter.getContainer();

            const focusableElements = this._adapter.getFocusableElements(container);

            const focusableNum = focusableElements.length;

            if (focusableNum) {
              // Shift + Tab will move focus backward
              if (event.shiftKey) {
                this._handleContainerShiftTabKeyDown(focusableElements, event);
              } else {
                this._handleContainerTabKeyDown(focusableElements, event);
              }
            }
          }

          break;

        default:
          break;
      }
    };

    this._timer = null;
  }

  init() {
    const {
      wrapperId
    } = this.getProps();
    this._mounted = true;

    this._bindEvent();

    this._shouldShow();

    this._initContainerPosition();

    if (!wrapperId) {
      this._adapter.setId();
    }
  }

  destroy() {
    this._mounted = false;

    this._unBindEvent();
  }

  _bindEvent() {
    const trigger = this.getProp('trigger'); // get trigger type

    const {
      triggerEventSet,
      portalEventSet
    } = this._generateEvent(trigger);

    this._bindTriggerEvent(triggerEventSet);

    this._bindPortalEvent(portalEventSet);

    this._bindResizeEvent();
  }

  _unBindEvent() {
    this._unBindTriggerEvent();

    this._unBindPortalEvent();

    this._unBindResizeEvent();

    this._unBindScrollEvent();
  }

  _bindTriggerEvent(triggerEventSet) {
    this._adapter.registerTriggerEvent(triggerEventSet);
  }

  _unBindTriggerEvent() {
    this._adapter.unregisterTriggerEvent();
  }

  _bindPortalEvent(portalEventSet) {
    this._adapter.registerPortalEvent(portalEventSet);
  }

  _unBindPortalEvent() {
    this._adapter.unregisterPortalEvent();
  }

  _bindResizeEvent() {
    this._adapter.registerResizeHandler(this.onResize);
  }

  _unBindResizeEvent() {
    this._adapter.unregisterResizeHandler(this.onResize);
  }

  _reversePos() {
    let position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let isVertical = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (isVertical) {
      if (REGS.TOP.test(position)) {
        return position.replace('top', 'bottom').replace('Top', 'Bottom');
      } else if (REGS.BOTTOM.test(position)) {
        return position.replace('bottom', 'top').replace('Bottom', 'Top');
      }
    } else if (REGS.LEFT.test(position)) {
      return position.replace('left', 'right').replace('Left', 'Right');
    } else if (REGS.RIGHT.test(position)) {
      return position.replace('right', 'left').replace('Right', 'Left');
    }

    return position;
  }

  clearDelayTimer() {
    if (this._timer) {
      clearTimeout(this._timer);
      this._timer = null;
    }
  }

  _generateEvent(types) {
    const eventNames = this._adapter.getEventName();

    const triggerEventSet = {
      // bind esc keydown on trigger for a11y
      [eventNames.keydown]: event => {
        this._handleTriggerKeydown(event);
      }
    };
    let portalEventSet = {};

    switch (types) {
      case 'focus':
        triggerEventSet[eventNames.focus] = () => {
          this.delayShow();
        };

        triggerEventSet[eventNames.blur] = () => {
          this.delayHide();
        };

        portalEventSet = triggerEventSet;
        break;

      case 'click':
        triggerEventSet[eventNames.click] = () => {
          // this.delayShow();
          this.show();
        };

        portalEventSet = {}; // Click outside needs special treatment, can not be directly tied to the trigger Element, need to be bound to the document

        break;

      case 'hover':
        triggerEventSet[eventNames.mouseEnter] = () => {
          // console.log(e);
          this.setCache('isClickToHide', false);
          this.delayShow(); // this.show('trigger');
        };

        triggerEventSet[eventNames.mouseLeave] = () => {
          // console.log(e);
          this.delayHide(); // this.hide('trigger');
        }; // bind focus to hover trigger for a11y


        triggerEventSet[eventNames.focus] = () => {
          const {
            disableFocusListener
          } = this.getProps();
          !disableFocusListener && this.delayShow();
        };

        triggerEventSet[eventNames.blur] = () => {
          const {
            disableFocusListener
          } = this.getProps();
          !disableFocusListener && this.delayHide();
        };

        portalEventSet = assign_default()({}, triggerEventSet);

        if (this.getProp('clickToHide')) {
          portalEventSet[eventNames.click] = () => {
            this.setCache('isClickToHide', true);
            this.hide();
          };

          portalEventSet[eventNames.mouseEnter] = () => {
            if (this.getCache('isClickToHide')) {
              return;
            }

            this.delayShow();
          };
        }

        break;

      case 'custom':
        // when trigger type is 'custom', no need to bind eventHandler
        // show/hide completely depend on props.visible which change by user
        break;

      default:
        break;
    }

    return {
      triggerEventSet,
      portalEventSet
    };
  }

  _shouldShow() {
    const visible = this.getProp('visible');

    if (visible) {
      this.show();
    } else {// this.hide();
    }
  }

  _togglePortalVisible(isVisible) {
    const nowVisible = this.getState('visible');

    if (nowVisible !== isVisible) {
      this._adapter.togglePortalVisible(isVisible, () => {
        if (isVisible) {
          this._adapter.setInitialFocus();
        }

        this._adapter.notifyVisibleChange(isVisible);
      });
    }
  }

  _roundPixel(pixel) {
    if (typeof pixel === 'number') {
      return Math.round(pixel);
    }

    return pixel;
  }

  calcTransformOrigin(position, triggerRect, translateX, translateY) {
    // eslint-disable-next-line
    if (position && triggerRect && translateX != null && translateY != null) {
      var _context9;

      if (this.getProp('transformFromCenter')) {
        var _context, _context3, _context5, _context7;

        if (includes_default()(_context = ['topLeft', 'bottomLeft']).call(_context, position)) {
          var _context2;

          return concat_default()(_context2 = "".concat(this._roundPixel(triggerRect.width / 2), "px ")).call(_context2, -translateY * 100, "%");
        }

        if (includes_default()(_context3 = ['topRight', 'bottomRight']).call(_context3, position)) {
          var _context4;

          return concat_default()(_context4 = "calc(100% - ".concat(this._roundPixel(triggerRect.width / 2), "px) ")).call(_context4, -translateY * 100, "%");
        }

        if (includes_default()(_context5 = ['leftTop', 'rightTop']).call(_context5, position)) {
          var _context6;

          return concat_default()(_context6 = "".concat(-translateX * 100, "% ")).call(_context6, this._roundPixel(triggerRect.height / 2), "px");
        }

        if (includes_default()(_context7 = ['leftBottom', 'rightBottom']).call(_context7, position)) {
          var _context8;

          return concat_default()(_context8 = "".concat(-translateX * 100, "% calc(100% - ")).call(_context8, this._roundPixel(triggerRect.height / 2), "px)");
        }
      }

      return concat_default()(_context9 = "".concat(-translateX * 100, "% ")).call(_context9, -translateY * 100, "%");
    }

    return null;
  }

  calcPosStyle(triggerRect, wrapperRect, containerRect, position, spacing) {
    triggerRect = (isEmpty_default()(triggerRect) ? triggerRect : this._adapter.getTriggerBounding()) || assign_default()({}, defaultRect);
    containerRect = (isEmpty_default()(containerRect) ? containerRect : this._adapter.getPopupContainerRect()) || assign_default()({}, defaultRect);
    wrapperRect = (isEmpty_default()(wrapperRect) ? wrapperRect : this._adapter.getWrapperBounding()) || assign_default()({}, defaultRect); // eslint-disable-next-line

    position = position != null ? position : this.getProp('position'); // eslint-disable-next-line

    const SPACING = spacing != null ? spacing : this.getProp('spacing');
    const {
      arrowPointAtCenter,
      showArrow,
      arrowBounding
    } = this.getProps();
    const pointAtCenter = showArrow && arrowPointAtCenter;

    const horizontalArrowWidth = get_default()(arrowBounding, 'width', 24);

    const verticalArrowHeight = get_default()(arrowBounding, 'width', 24);

    const arrowOffsetY = get_default()(arrowBounding, 'offsetY', 0);

    const positionOffsetX = 6;
    const positionOffsetY = 6; // You must use left/top when rendering, using right/bottom does not render the element position correctly
    // Use left/top + translate to achieve tooltip positioning perfectly without knowing the size of the tooltip expansion layer

    let left;
    let top;
    let translateX = 0; // Container x-direction translation distance

    let translateY = 0; // Container y-direction translation distance

    const middleX = triggerRect.left + triggerRect.width / 2;
    const middleY = triggerRect.top + triggerRect.height / 2;
    const offsetXWithArrow = positionOffsetX + horizontalArrowWidth / 2;
    const offsetYWithArrow = positionOffsetY + verticalArrowHeight / 2;

    switch (position) {
      case 'top':
        left = middleX;
        top = triggerRect.top - SPACING;
        translateX = -0.5;
        translateY = -1;
        break;

      case 'topLeft':
        left = pointAtCenter ? middleX - offsetXWithArrow : triggerRect.left;
        top = triggerRect.top - SPACING;
        translateY = -1;
        break;

      case 'topRight':
        left = pointAtCenter ? middleX + offsetXWithArrow : triggerRect.right;
        top = triggerRect.top - SPACING;
        translateY = -1;
        translateX = -1;
        break;

      case 'left':
        left = triggerRect.left - SPACING;
        top = middleY;
        translateX = -1;
        translateY = -0.5;
        break;

      case 'leftTop':
        left = triggerRect.left - SPACING;
        top = pointAtCenter ? middleY - offsetYWithArrow : triggerRect.top;
        translateX = -1;
        break;

      case 'leftBottom':
        left = triggerRect.left - SPACING;
        top = pointAtCenter ? middleY + offsetYWithArrow : triggerRect.bottom;
        translateX = -1;
        translateY = -1;
        break;

      case 'bottom':
        left = middleX;
        top = triggerRect.top + triggerRect.height + SPACING;
        translateX = -0.5;
        break;

      case 'bottomLeft':
        left = pointAtCenter ? middleX - offsetXWithArrow : triggerRect.left;
        top = triggerRect.bottom + SPACING;
        break;

      case 'bottomRight':
        left = pointAtCenter ? middleX + offsetXWithArrow : triggerRect.right;
        top = triggerRect.bottom + SPACING;
        translateX = -1;
        break;

      case 'right':
        left = triggerRect.right + SPACING;
        top = middleY;
        translateY = -0.5;
        break;

      case 'rightTop':
        left = triggerRect.right + SPACING;
        top = pointAtCenter ? middleY - offsetYWithArrow : triggerRect.top;
        break;

      case 'rightBottom':
        left = triggerRect.right + SPACING;
        top = pointAtCenter ? middleY + offsetYWithArrow : triggerRect.bottom;
        translateY = -1;
        break;

      case 'leftTopOver':
        left = triggerRect.left - SPACING;
        top = triggerRect.top - SPACING;
        break;

      case 'rightTopOver':
        left = triggerRect.right + SPACING;
        top = triggerRect.top - SPACING;
        translateX = -1;
        break;

      case 'leftBottomOver':
        left = triggerRect.left - SPACING;
        top = triggerRect.bottom + SPACING;
        translateY = -1;
        break;

      case 'rightBottomOver':
        left = triggerRect.right + SPACING;
        top = triggerRect.bottom + SPACING;
        translateX = -1;
        translateY = -1;
        break;

      default:
        break;
    }

    const transformOrigin = this.calcTransformOrigin(position, triggerRect, translateX, translateY); // Transform origin

    const _containerIsBody = this._adapter.containerIsBody(); // Calculate container positioning relative to window


    left = left - containerRect.left;
    top = top - containerRect.top;
    /**
     * container为body时，如果position不为relative或absolute，这时trigger计算出的top/left会根据html定位（initial containing block）
     * 此时如果body有margin，则计算出的位置相对于body会有问题 fix issue #1368
     *
     * When container is body, if position is not relative or absolute, then the top/left calculated by trigger will be positioned according to html
     * At this time, if the body has a margin, the calculated position will have a problem relative to the body fix issue #1368
     */

    if (_containerIsBody && !this._adapter.containerIsRelativeOrAbsolute()) {
      const documentEleRect = this._adapter.getDocumentElementBounding(); // Represents the left of the body relative to html


      left += containerRect.left - documentEleRect.left; // Represents the top of the body relative to html

      top += containerRect.top - documentEleRect.top;
    } // ContainerRect.scrollLeft to solve the inner scrolling of the container


    left = _containerIsBody ? left : left + containerRect.scrollLeft;
    top = _containerIsBody ? top : top + containerRect.scrollTop;
    const triggerHeight = triggerRect.height;

    if (this.getProp('showArrow') && !arrowPointAtCenter && triggerHeight <= (verticalArrowHeight / 2 + arrowOffsetY) * 2) {
      const offsetY = triggerHeight / 2 - (arrowOffsetY + verticalArrowHeight / 2);

      if ((includes_default()(position).call(position, 'Top') || includes_default()(position).call(position, 'Bottom')) && !includes_default()(position).call(position, 'Over')) {
        top = includes_default()(position).call(position, 'Top') ? top + offsetY : top - offsetY;
      }
    } // The left/top value here must be rounded, otherwise it will cause the small triangle to shake


    const style = {
      left: this._roundPixel(left),
      top: this._roundPixel(top)
    };
    let transform = ''; // eslint-disable-next-line

    if (translateX != null) {
      transform += "translateX(".concat(translateX * 100, "%) ");

      define_property_default()(style, 'translateX', {
        enumerable: false,
        value: translateX
      });
    } // eslint-disable-next-line


    if (translateY != null) {
      transform += "translateY(".concat(translateY * 100, "%) ");

      define_property_default()(style, 'translateY', {
        enumerable: false,
        value: translateY
      });
    } // eslint-disable-next-line


    if (transformOrigin != null) {
      style.transformOrigin = transformOrigin;
    }

    if (transform) {
      style.transform = transform;
    }

    return style;
  }

  isLR() {
    let position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    return index_of_default()(position).call(position, 'left') === 0 || index_of_default()(position).call(position, 'right') === 0;
  }

  isTB() {
    let position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    return index_of_default()(position).call(position, 'top') === 0 || index_of_default()(position).call(position, 'bottom') === 0;
  } // place the dom correctly


  adjustPosIfNeed(position, style, triggerRect, wrapperRect, containerRect) {
    const {
      innerWidth,
      innerHeight
    } = window;
    const {
      spacing
    } = this.getProps();

    if (wrapperRect.width > 0 && wrapperRect.height > 0) {
      // let clientLeft = left + translateX * wrapperRect.width - containerRect.scrollLeft;
      // let clientTop = top + translateY * wrapperRect.height - containerRect.scrollTop;
      // if (this._adapter.containerIsBody() || this._adapter.containerIsRelative()) {
      //     clientLeft += containerRect.left;
      //     clientTop += containerRect.top;
      // }
      // const clientRight = clientLeft + wrapperRect.width;
      // const clientBottom = clientTop + wrapperRect.height;
      // The relative position of the elements on the screen
      // https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/tooltip-pic.svg
      const clientLeft = triggerRect.left;
      const clientRight = triggerRect.right;
      const clientTop = triggerRect.top;
      const clientBottom = triggerRect.bottom;
      const restClientLeft = innerWidth - clientLeft;
      const restClientTop = innerHeight - clientTop;
      const restClientRight = innerWidth - clientRight;
      const restClientBottom = innerHeight - clientBottom;
      const widthIsBigger = wrapperRect.width > triggerRect.width;
      const heightIsBigger = wrapperRect.height > triggerRect.height; // The wrapperR ect.top|bottom equivalent cannot be directly used here for comparison, which is easy to cause jitter

      const shouldReverseTop = clientTop < wrapperRect.height + spacing && restClientBottom > wrapperRect.height + spacing;
      const shouldReverseLeft = clientLeft < wrapperRect.width + spacing && restClientRight > wrapperRect.width + spacing;
      const shouldReverseBottom = restClientBottom < wrapperRect.height + spacing && clientTop > wrapperRect.height + spacing;
      const shouldReverseRight = restClientRight < wrapperRect.width + spacing && clientLeft > wrapperRect.width + spacing;
      const shouldReverseTopOver = restClientTop < wrapperRect.height + spacing && clientBottom > wrapperRect.height + spacing;
      const shouldReverseBottomOver = clientBottom < wrapperRect.height + spacing && restClientTop > wrapperRect.height + spacing;
      const shouldReverseTopSide = restClientTop < wrapperRect.height && clientBottom > wrapperRect.height;
      const shouldReverseBottomSide = clientBottom < wrapperRect.height && restClientTop > wrapperRect.height;
      const shouldReverseLeftSide = restClientLeft < wrapperRect.width && clientRight > wrapperRect.width;
      const shouldReverseRightSide = clientRight < wrapperRect.width && restClientLeft > wrapperRect.width;
      const shouldReverseLeftOver = restClientLeft < wrapperRect.width && clientRight > wrapperRect.width;
      const shouldReverseRightOver = clientRight < wrapperRect.width && restClientLeft > wrapperRect.width;

      switch (position) {
        case 'top':
          if (shouldReverseTop) {
            position = this._reversePos(position, true);
          }

          break;

        case 'topLeft':
          if (shouldReverseTop) {
            position = this._reversePos(position, true);
          }

          if (shouldReverseLeftSide && widthIsBigger) {
            position = this._reversePos(position);
          }

          break;

        case 'topRight':
          if (shouldReverseTop) {
            position = this._reversePos(position, true);
          }

          if (shouldReverseRightSide && widthIsBigger) {
            position = this._reversePos(position);
          }

          break;

        case 'left':
          if (shouldReverseLeft) {
            position = this._reversePos(position);
          }

          break;

        case 'leftTop':
          if (shouldReverseLeft) {
            position = this._reversePos(position);
          }

          if (shouldReverseTopSide && heightIsBigger) {
            position = this._reversePos(position, true);
          }

          break;

        case 'leftBottom':
          if (shouldReverseLeft) {
            position = this._reversePos(position);
          }

          if (shouldReverseBottomSide && heightIsBigger) {
            position = this._reversePos(position, true);
          }

          break;

        case 'bottom':
          if (shouldReverseBottom) {
            position = this._reversePos(position, true);
          }

          break;

        case 'bottomLeft':
          if (shouldReverseBottom) {
            position = this._reversePos(position, true);
          }

          if (shouldReverseLeftSide && widthIsBigger) {
            position = this._reversePos(position);
          }

          break;

        case 'bottomRight':
          if (shouldReverseBottom) {
            position = this._reversePos(position, true);
          }

          if (shouldReverseRightSide && widthIsBigger) {
            position = this._reversePos(position);
          }

          break;

        case 'right':
          if (shouldReverseRight) {
            position = this._reversePos(position);
          }

          break;

        case 'rightTop':
          if (shouldReverseRight) {
            position = this._reversePos(position);
          }

          if (shouldReverseTopSide && heightIsBigger) {
            position = this._reversePos(position, true);
          }

          break;

        case 'rightBottom':
          if (shouldReverseRight) {
            position = this._reversePos(position);
          }

          if (shouldReverseBottomSide && heightIsBigger) {
            position = this._reversePos(position, true);
          }

          break;

        case 'leftTopOver':
          if (shouldReverseTopOver) {
            position = this._reversePos(position, true);
          }

          if (shouldReverseLeftOver) {
            position = this._reversePos(position);
          }

          break;

        case 'leftBottomOver':
          if (shouldReverseBottomOver) {
            position = this._reversePos(position, true);
          }

          if (shouldReverseLeftOver) {
            position = this._reversePos(position);
          }

          break;

        case 'rightTopOver':
          if (shouldReverseTopOver) {
            position = this._reversePos(position, true);
          }

          if (shouldReverseRightOver) {
            position = this._reversePos(position);
          }

          break;

        case 'rightBottomOver':
          if (shouldReverseBottomOver) {
            position = this._reversePos(position, true);
          }

          if (shouldReverseRightOver) {
            position = this._reversePos(position);
          }

          break;

        default:
          break;
      }
    }

    return position;
  }

  _bindScrollEvent() {
    this._adapter.registerScrollHandler(() => this.calcPosition()); // Capture scroll events on the window to determine whether the current scrolling area (e.target) will affect the positioning of the pop-up layer relative to the viewport when scrolling
    // (By determining whether the e.target contains the triggerDom of the current tooltip) If so, the pop-up layer will also be affected and needs to be repositioned

  }

  _unBindScrollEvent() {
    this._adapter.unregisterScrollHandler();
  }

  _initContainerPosition() {
    this._adapter.updateContainerPosition();
  }

  _handleTriggerKeydown(event) {
    const {
      closeOnEsc,
      disableArrowKeyDown
    } = this.getProps();

    const container = this._adapter.getContainer();

    const focusableElements = this._adapter.getFocusableElements(container);

    const focusableNum = focusableElements.length;

    switch (event && event.key) {
      case "Escape":
        handlePrevent(event);
        closeOnEsc && this._handleEscKeyDown(event);
        break;

      case "ArrowUp":
        // when disableArrowKeyDown is true, disable tooltip's arrow keyboard event action
        !disableArrowKeyDown && focusableNum && this._handleTriggerArrowUpKeydown(focusableElements, event);
        break;

      case "ArrowDown":
        !disableArrowKeyDown && focusableNum && this._handleTriggerArrowDownKeydown(focusableElements, event);
        break;

      default:
        break;
    }
  }
  /**
   * focus trigger
   *
   * when trigger is 'focus' or 'hover', onFocus is bind to show popup
   * if we focus trigger, popup will show again
   *
   * 如果 trigger 是 focus 或者 hover，则它绑定了 onFocus，这里我们如果重新 focus 的话，popup 会再次打开
   * 因此 returnFocusOnClose 只支持 click trigger
   */


  _focusTrigger() {
    const {
      trigger,
      returnFocusOnClose,
      preventScroll
    } = this.getProps();

    if (returnFocusOnClose && trigger !== 'custom') {
      const triggerNode = this._adapter.getTriggerNode();

      if (triggerNode && 'focus' in triggerNode) {
        triggerNode.focus({
          preventScroll
        });
      }
    }
  }

  _handleEscKeyDown(event) {
    const {
      trigger
    } = this.getProps();

    if (trigger !== 'custom') {
      // Move the focus into the trigger first and then close the pop-up layer 
      // to avoid the problem of opening the pop-up layer again when the focus returns to the trigger in the case of hover and focus
      this._focusTrigger();

      this.hide();
    }

    this._adapter.notifyEscKeydown(event);
  }

  _handleContainerTabKeyDown(focusableElements, event) {
    const {
      preventScroll
    } = this.getProps();

    const activeElement = this._adapter.getActiveElement();

    const isLastCurrentFocus = focusableElements[focusableElements.length - 1] === activeElement;

    if (isLastCurrentFocus) {
      focusableElements[0].focus({
        preventScroll
      });
      event.preventDefault(); // prevent browser default tab move behavior
    }
  }

  _handleContainerShiftTabKeyDown(focusableElements, event) {
    const {
      preventScroll
    } = this.getProps();

    const activeElement = this._adapter.getActiveElement();

    const isFirstCurrentFocus = focusableElements[0] === activeElement;

    if (isFirstCurrentFocus) {
      focusableElements[focusableElements.length - 1].focus({
        preventScroll
      });
      event.preventDefault(); // prevent browser default tab move behavior
    }
  }

  _handleTriggerArrowDownKeydown(focusableElements, event) {
    const {
      preventScroll
    } = this.getProps();
    focusableElements[0].focus({
      preventScroll
    });
    event.preventDefault(); // prevent browser default scroll behavior
  }

  _handleTriggerArrowUpKeydown(focusableElements, event) {
    const {
      preventScroll
    } = this.getProps();
    focusableElements[focusableElements.length - 1].focus({
      preventScroll
    });
    event.preventDefault(); // prevent browser default scroll behavior
  }

}
// CONCATENATED MODULE: ../semi-foundation/tooltip/constants.ts

const tooltip_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-tooltip")
};
const tooltip_constants_strings = {
  POSITION_SET: ['top', 'topLeft', 'topRight', 'left', 'leftTop', 'leftBottom', 'right', 'rightTop', 'rightBottom', 'bottom', 'bottomLeft', 'bottomRight', 'leftTopOver', 'rightTopOver', 'leftBottomOver', 'rightBottomOver'],
  TRIGGER_SET: ['hover', 'focus', 'click', 'custom'],
  STATUS_DISABLED: 'disabled',
  STATUS_LOADING: 'loading'
};
const numbers = {
  ARROW_BOUNDING: {
    offsetX: 0,
    offsetY: 2,
    width: 24,
    height: 7
  },
  DEFAULT_Z_INDEX: 1060,
  MOUSE_ENTER_DELAY: 50,
  MOUSE_LEAVE_DELAY: 50,
  SPACING: 8 // Values are consistent with spacing-tight in scss

};

// CONCATENATED MODULE: ../semi-foundation/utils/uuid.ts

function getUuid(prefix) {
  var _context, _context2;

  return concat_default()(_context = concat_default()(_context2 = "".concat(prefix, "-")).call(_context2, new Date().getTime(), "-")).call(_context, Math.random());
} // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript

function getUuidv4() {
  try {
    return String(1e7 + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c => (Number(c) ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> Number(c) / 4).toString(16));
  } catch (err) {
    return getUuid('semi');
  }
}
/**
 * Get a random id with prefix, it not strictly guarantee id uniqueness
 *
 * Note: the return value of getUuid is too long, we need a short one
 *
 * @example
 * getUuidShort({ prefix: 'semi' }) => 'semi-46dinzc'
 * getUuidShort({ prefix: '' }) => '0eer2i0'
 * getUuidShort({ prefix: 'semi', length: 4 }) => 'semi-8jts'
 */


function getUuidShort() {
  var _context3;

  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const {
    prefix = '',
    length = 7
  } = options;
  const characters = '0123456789abcdefghijklmnopqrstuvwxyz';
  const total = characters.length;
  let randomId = '';

  for (let i = 0; i < length; i++) {
    const random = Math.floor(Math.random() * total);
    randomId += characters.charAt(random);
  }

  return prefix ? concat_default()(_context3 = "".concat(prefix, "-")).call(_context3, randomId) : randomId;
}


// EXTERNAL MODULE: ../semi-foundation/tooltip/tooltip.scss
var tooltip = __webpack_require__("VQVM");

// EXTERNAL MODULE: ../semi-foundation/utils/isElement.ts
var isElement = __webpack_require__("Awix");

// EXTERNAL MODULE: ./_utils/index.ts
var _utils = __webpack_require__("UU7A");

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/object/keys.js
var object_keys = __webpack_require__("rVmq");
var keys_default = /*#__PURE__*/__webpack_require__.n(object_keys);

// CONCATENATED MODULE: ./configProvider/context.tsx

const ConfigContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext({});
/* harmony default export */ var configProvider_context = (ConfigContext);
// EXTERNAL MODULE: ../semi-foundation/_portal/portal.scss
var portal = __webpack_require__("8CiI");

// CONCATENATED MODULE: ./_portal/index.tsx









const defaultGetContainer = () => document.body;

class _portal_Portal extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  constructor(props) {
    var _this;

    super(props);
    _this = this;

    this.addStyle = function () {
      let style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (_this.el) {
        for (const key of keys_default()(style)) {
          _this.el.style[key] = style[key];
        }
      }
    };

    this.addClass = function (prefixCls) {
      const {
        direction
      } = _this.context;

      for (var _len = arguments.length, classNames = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        classNames[_key - 1] = arguments[_key];
      }

      const cls = classnames_default()(prefixCls, ...classNames, {
        ["".concat(prefixCls, "-rtl")]: direction === 'rtl'
      });

      if (_this.el) {
        _this.el.className = cls;
      }
    };

    try {
      this.el = document.createElement('div');
    } catch (e) {}

    this.state = {
      container: undefined
    };
  }

  componentDidMount() {
    if (!this.el) {
      this.el = document.createElement('div');
    }

    const {
      state,
      props,
      context
    } = this;
    const getContainer = props.getPopupContainer || context.getPopupContainer || defaultGetContainer;
    const container = getContainer();

    if (container !== state.container) {
      // const computedStyle = window.getComputedStyle(container);
      // if (computedStyle.position !== 'relative') {
      //    container.style.position = 'relative';
      // }
      container.appendChild(this.el);
      this.addStyle(props.style);
      this.addClass(props.prefixCls, props.className);
      this.setState({
        container
      });
    }
  }

  componentDidUpdate(prevProps) {
    // visible callback
    const {
      didUpdate
    } = this.props;

    if (didUpdate) {
      didUpdate(prevProps);
    }
  }

  componentWillUnmount() {
    const {
      container
    } = this.state;

    if (container) {
      container.removeChild(this.el);
    }
  }

  render() {
    const {
      state,
      props
    } = this;

    if (state.container) {
      return /*#__PURE__*/Object(external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_["createPortal"])(props.children, this.el);
    }

    return null;
  }

}

_portal_Portal.contextType = configProvider_context;
_portal_Portal.defaultProps = {
  // getPopupContainer: () => document.body,
  prefixCls: "".concat(BASE_CLASS_PREFIX, "-portal")
};
_portal_Portal.propTypes = {
  children: prop_types_default.a.node,
  prefixCls: prop_types_default.a.string,
  getPopupContainer: prop_types_default.a.func,
  className: prop_types_default.a.string,
  didUpdate: prop_types_default.a.func
};
/* harmony default export */ var _portal = (_portal_Portal);
// CONCATENATED MODULE: ./tooltip/TriangleArrow.tsx




var TriangleArrow_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};



const TriangleArrow = props => {
  const {
    className,
    style
  } = props,
        restProps = TriangleArrow_rest(props, ["className", "style"]);

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("svg", assign_default()({
    "aria-hidden": true,
    className: className,
    style: style
  }, restProps, {
    width: "24",
    height: "7",
    viewBox: "0 0 24 7",
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("path", {
    d: "M24 0V1C20 1 18.5 2 16.5 4C14.5 6 14 7 12 7C10 7 9.5 6 7.5 4C5.5 2 4 1 0 1V0H24Z"
  }));
};

/* harmony default export */ var tooltip_TriangleArrow = (TriangleArrow);
// CONCATENATED MODULE: ./tooltip/TriangleArrowVertical.tsx




var TriangleArrowVertical_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};



const TriangleArrowVertical = props => {
  const {
    className,
    style
  } = props,
        restProps = TriangleArrowVertical_rest(props, ["className", "style"]);

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("svg", assign_default()({
    "aria-hidden": true,
    className: className,
    style: style
  }, restProps, {
    width: "7",
    height: "24",
    xmlns: "http://www.w3.org/2000/svg",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("path", {
    d: "M0 0L1 0C1 4, 2 5.5, 4 7.5S7,10 7,12S6 14.5, 4 16.5S1,20 1,24L0 24L0 0z"
  }));
};

/* harmony default export */ var tooltip_TriangleArrowVertical = (TriangleArrowVertical);
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/reduce.js
var reduce = __webpack_require__("r3cb");
var reduce_default = /*#__PURE__*/__webpack_require__.n(reduce);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/object/values.js
var object_values = __webpack_require__("Mb5A");
var values_default = /*#__PURE__*/__webpack_require__.n(object_values);

// EXTERNAL MODULE: ../semi-animation-react/node_modules/prop-types/index.js
var node_modules_prop_types = __webpack_require__("QHSe");
var node_modules_prop_types_default = /*#__PURE__*/__webpack_require__.n(node_modules_prop_types);

// CONCATENATED MODULE: ../semi-animation-styled/lib/es/src/constants/times.js
const loops = ['1', '2', '3', '4', '5', 'infinite'];
const delays = ['0s', '1s', '2s', '3s', '4s', '5s'];
const speeds = ['default', 'fast', 'faster', 'slow', 'slower'];
// CONCATENATED MODULE: ../semi-animation-styled/lib/es/src/constants/types.js
const attentionSeekers = ['bounce', 'flash', 'headShake', 'heartBeat', 'jello', 'pulse', 'rubberBand', 'shake', 'swing', 'tada', 'wobble'];
const bouncingEntrances = ['bounceIn', 'bounceInDown', 'bounceInLeft', 'bounceInRight', 'bounceInUp'];
const bouncingExits = ['bounceOut', 'bounceOutDown', 'bounceOutLeft', 'bounceOutRight', 'bounceOutUp'];
const fadingEntrances = ['fadeIn', 'fadeInDown', 'fadeInDownBig', 'fadeInLeft', 'fadeInLeftBig', 'fadeInRight', 'fadeInRightBig', 'fadeInUp', 'fadeInUpBig'];
const fadingExits = ['fadeOut', 'fadeOutDown', 'fadeOutDownBig', 'fadeOutLeft', 'fadeOutLeftBig', 'fadeOutRight', 'fadeOutRightBig', 'fadeOutUp', 'fadeOutUpBig'];
const flippers = ['flip', 'flipInX', 'flipInY', 'flipOutX', 'flipOutY'];
const lightspeed = ['lightSpeedIn', 'lightSpeedOut'];
const rotatingEntrances = ['rotateIn', 'rotateInDownLeft', 'rotateInDownRight', 'rotateInUpLeft', 'rotateInUpRight'];
const rotatingExits = ['rotateOut', 'rotateOutDownLeft', 'rotateOutDownRight', 'rotateOutUpLeft', 'rotateOutUpRight'];
const slidingEntrances = ['slideInDown', 'slideInLeft', 'slideInRight', 'slideInUp'];
const slidingExits = ['slideOutDown', 'slideOutLeft', 'slideOutRight', 'slideOutUp'];
const specials = ['hinge', 'jackInTheBox', 'rollIn', 'rollOut'];
const zoomingEntrances = ['zoomIn', 'zoomInDown', 'zoomInLeft', 'zoomInRight', 'zoomInUp'];
const zoomingExits = ['zoomOut', 'zoomOutDown', 'zoomOutLeft', 'zoomOutRight', 'zoomOutUp'];
// CONCATENATED MODULE: ../semi-animation-styled/lib/es/index.js



// CONCATENATED MODULE: ../semi-animation-react/lib/es/src/utils/noop.js
// eslint-disable-next-line @typescript-eslint/no-empty-function
function noop_noop() {}
// CONCATENATED MODULE: ../semi-animation-react/lib/es/src/utils/invokeFns.js


function invokeFns(fns) {
  let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (is_array_default()(fns) && fns.length) {
    for_each_default()(fns).call(fns, fn => {
      if (typeof fn === 'function') {
        fn(...args);
      }
    });
  }
}
// CONCATENATED MODULE: ../semi-animation-react/lib/es/src/StyledAnimation.js
var StyledAnimation_context;








/* eslint-disable react/destructuring-assignment */

/* eslint-disable prefer-const */

/* eslint-disable eqeqeq */

/* eslint-disable import/no-duplicates */

/* eslint-disable no-duplicate-imports */







const StyledAnimation_types = reduce_default()(StyledAnimation_context = values_default()(types_namespaceObject)).call(StyledAnimation_context, (arr, cur) => [...arr, ...cur], []);

class StyledAnimation_StyledAnimation extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  constructor() {
    var _this;

    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super(props);
    _this = this;

    this._generateAnimateEvents = function (child) {
      let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return {
        onAnimationIteration: function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return invokeFns([child && child.props && child.props.onAnimationIteration, props.onFrame], args);
        },
        onAnimationStart: function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          return invokeFns([child && child.props && child.props.onAnimationStart, props.onStart], args);
        },
        onAnimationEnd: function () {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          return invokeFns([child && child.props && child.props.onAnimationEnd, props.onRest], args);
        }
      };
    };

    this._hasSpeedClass = function () {
      let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props.speed;
      return speed != null && includes_default()(speeds).call(speeds, speed);
    };

    this._hasTypeClass = function () {
      let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props.type;
      return type != null && includes_default()(StyledAnimation_types).call(StyledAnimation_types, type);
    };

    this._hasDelayClass = function () {
      let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props.delay;
      return delay != null && includes_default()(delays).call(delays, delay);
    };

    this._hasLoopClass = function () {
      let loop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props.loop;
      return loop != null && includes_default()(loops).call(loops, loop);
    };
  }

  render() {
    var _context2, _context3, _context4, _context5;

    let {
      type,
      speed,
      duration,
      delay,
      loop,
      reverse,
      children,
      prefixCls,
      timing,
      className,
      fillMode
    } = this.props;

    const hasTypeClass = this._hasTypeClass();

    const hasSpeedClass = this._hasSpeedClass();

    const hasDelayClass = this._hasDelayClass();

    const hasLoopClass = this._hasLoopClass();

    const animateCls = className || classnames_default()("".concat(prefixCls, "-animated"), {
      [concat_default()(_context2 = "".concat(prefixCls, "-")).call(_context2, type)]: Boolean(type),
      [concat_default()(_context3 = "".concat(prefixCls, "-speed-")).call(_context3, speed)]: hasSpeedClass,
      [concat_default()(_context4 = "".concat(prefixCls, "-delay-")).call(_context4, delay)]: hasDelayClass,
      [concat_default()(_context5 = "".concat(prefixCls, "-loop-")).call(_context5, loop)]: hasLoopClass
    });
    const animateStyle = {
      animationTimingFunction: timing,
      animationName: !hasTypeClass && type,
      animationDuration: duration,
      animationDelay: !hasDelayClass && delay,
      animationIterationCount: !hasLoopClass && loop,
      animationDirection: reverse ? 'alternate' : 'normal',
      animationFillMode: fillMode
    };

    if ( /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(children)) {
      children = map_default()(external_root_React_commonjs2_react_commonjs_react_amd_react_["Children"]).call(external_root_React_commonjs2_react_commonjs_react_amd_react_["Children"], children, child => {
        const animateEvents = this._generateAnimateEvents(child, this.props);

        return /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["cloneElement"])(child, assign_default()({
          className: classnames_default()(child.props.className, animateCls),
          style: assign_default()(assign_default()({}, child.props.style), this.props.style)
        }, animateEvents));
      });
    }

    return typeof children === 'function' ? children({
      animateCls,
      animateStyle,
      animateEvents: this._generateAnimateEvents(null, this.props)
    }) : children;
  }

}
StyledAnimation_StyledAnimation.propTypes = {
  className: node_modules_prop_types_default.a.string,
  type: node_modules_prop_types_default.a.oneOfType([node_modules_prop_types_default.a.string, node_modules_prop_types_default.a.any]),
  speed: node_modules_prop_types_default.a.oneOfType([node_modules_prop_types_default.a.string, node_modules_prop_types_default.a.number]),
  delay: node_modules_prop_types_default.a.oneOfType([node_modules_prop_types_default.a.string, node_modules_prop_types_default.a.number]),
  reverse: node_modules_prop_types_default.a.oneOfType([node_modules_prop_types_default.a.bool, node_modules_prop_types_default.a.string]),
  loop: node_modules_prop_types_default.a.oneOfType([node_modules_prop_types_default.a.string, node_modules_prop_types_default.a.number]),
  children: node_modules_prop_types_default.a.any,
  onStart: node_modules_prop_types_default.a.func,
  onFrame: node_modules_prop_types_default.a.func,
  onRest: node_modules_prop_types_default.a.func,
  prefixCls: node_modules_prop_types_default.a.string,
  timing: node_modules_prop_types_default.a.string,
  duration: node_modules_prop_types_default.a.oneOfType([node_modules_prop_types_default.a.string, node_modules_prop_types_default.a.number]),
  fillMode: node_modules_prop_types_default.a.string
};
StyledAnimation_StyledAnimation.defaultProps = {
  prefixCls: 'semi',
  speed: 'faster',
  onFrame: noop_noop,
  onStart: noop_noop,
  onRest: noop_noop
};
// CONCATENATED MODULE: ../semi-animation-react/lib/es/src/StyledTransition.js





var StyledTransition_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable eqeqeq */






class StyledTransition_StyledTransition extends external_root_React_commonjs2_react_commonjs_react_amd_react_["Component"] {
  constructor() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super(props);

    this._isControlled = () => {
      var _context;

      return includes_default()(_context = [true, false, 'enter', 'leave']).call(_context, this.props.state);
    };

    this.onRest = props => {
      const {
        state
      } = this.state;

      if (state === 'enter') {
        this.props.didEnter(props);
      } else if (state === 'leave') {
        this.setState({
          currentChildren: null,
          lastChildren: null
        });
        this.props.didLeave(props);
      }

      this.props.onRest(props);
    };

    this.onStart = props => {
      const {
        state
      } = this.state;

      if (state === 'enter') {
        this.props.willEnter(props);
      } else if (state === 'leave') {
        this.props.willLeave(props);
      }

      this.props.onStart(props);
    };

    this.state = {
      state: '',
      lastChildren: null,
      currentChildren: null
    };
  }

  static getDerivedStateFromProps(props, state) {
    const willUpdateStates = {};

    if (props.children !== state.currentChildren) {
      willUpdateStates.lastChildren = state.currentChildren;
      willUpdateStates.currentChildren = props.children;

      if (props.children == null) {
        willUpdateStates.state = 'leave';
      } else {
        willUpdateStates.state = 'enter';
      }
    }

    if (props.state != null && props.state !== state.state) {
      willUpdateStates.state = props.state;
    }

    return willUpdateStates;
  }

  render() {
    const _a = this.props,
          {
      enter,
      leave
    } = _a,
          restProps = StyledTransition_rest(_a, ["enter", "leave"]);

    const {
      currentChildren,
      lastChildren
    } = this.state;

    const isControlled = this._isControlled();

    let children, type;
    let {
      state
    } = this.state;

    if (isControlled) {
      children = this.props.children;
      state = this.props.state;
    } else if (currentChildren == null && lastChildren == null) {
      return null;
    }

    if (state === 'enter') {
      type = enter;

      if (!isControlled) {
        children = currentChildren;
      }
    } else if (state === 'leave') {
      type = leave;

      if (!isControlled) {
        children = lastChildren;
      }
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(StyledAnimation_StyledAnimation, assign_default()({}, restProps, {
      type: type,
      onStart: this.onStart,
      onRest: this.onRest
    }), children);
  }

}
StyledTransition_StyledTransition.propTypes = {
  state: node_modules_prop_types_default.a.string,
  enter: node_modules_prop_types_default.a.string,
  leave: node_modules_prop_types_default.a.string,
  children: node_modules_prop_types_default.a.any,
  willEnter: node_modules_prop_types_default.a.func,
  didEnter: node_modules_prop_types_default.a.func,
  willLeave: node_modules_prop_types_default.a.func,
  didLeave: node_modules_prop_types_default.a.func,
  onStart: node_modules_prop_types_default.a.func,
  onRest: node_modules_prop_types_default.a.func
};
StyledTransition_StyledTransition.defaultProps = {
  willEnter: noop_noop,
  didEnter: noop_noop,
  willLeave: noop_noop,
  didLeave: noop_noop,
  onStart: noop_noop,
  onRest: noop_noop
};
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/reverse.js
var instance_reverse = __webpack_require__("Utz3");
var reverse_default = /*#__PURE__*/__webpack_require__.n(instance_reverse);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/parse-float.js
var parse_float = __webpack_require__("xBbx");
var parse_float_default = /*#__PURE__*/__webpack_require__.n(parse_float);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/trim.js
var trim = __webpack_require__("CIyl");
var trim_default = /*#__PURE__*/__webpack_require__.n(trim);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/bezier-easing/src/index.js
var bezier_easing_src = __webpack_require__("9Tt7");
var src_default = /*#__PURE__*/__webpack_require__.n(bezier_easing_src);

// CONCATENATED MODULE: ../semi-animation-react/node_modules/@douyinfe/semi-animation/lib/es/src/getEasing.js







function minMax(val, min, max) {
  return Math.min(Math.max(val, min), max);
}

function parseEasingParameters(string) {
  var _context;

  const match = /\(([^)]+)\)/.exec(string);
  return match ? map_default()(_context = match[1].split(',')).call(_context, p => parse_float_default()(p)) : [];
} // Elastic easing adapted from jQueryUI http://api.jqueryui.com/easings/


function elastic() {
  let amplitude = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  let period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
  const a = minMax(amplitude, 1, 10);
  const p = minMax(period, 0.1, 2);
  return t => t === 0 || t === 1 ? t : -a * Math.pow(2, 10 * (t - 1)) * Math.sin((t - 1 - p / (Math.PI * 2) * Math.asin(1 / a)) * (Math.PI * 2) / p);
} // anime.js/src/index.js


const easingMap = (() => {
  const names = ['Quad', 'Cubic', 'Quart', 'Quint', 'Sine', 'Expo', 'Circ', 'Back', 'Elastic']; // Approximated Penner equations http://matthewlein.com/ceaser/

  const curves = {
    In: [[0.55, 0.085, 0.68, 0.53]
    /* inQuad */
    , [0.55, 0.055, 0.675, 0.19]
    /* inCubic */
    , [0.895, 0.03, 0.685, 0.22]
    /* inQuart */
    , [0.755, 0.05, 0.855, 0.06]
    /* inQuint */
    , [0.47, 0.0, 0.745, 0.715]
    /* inSine */
    , [0.95, 0.05, 0.795, 0.035]
    /* inExpo */
    , [0.6, 0.04, 0.98, 0.335]
    /* inCirc */
    , [0.6, -0.28, 0.735, 0.045]
    /* inBack */
    , elastic
    /* inElastic */
    ],
    Out: [[0.25, 0.46, 0.45, 0.94]
    /* outQuad */
    , [0.215, 0.61, 0.355, 1.0]
    /* outCubic */
    , [0.165, 0.84, 0.44, 1.0]
    /* outQuart */
    , [0.23, 1.0, 0.32, 1.0]
    /* outQuint */
    , [0.39, 0.575, 0.565, 1.0]
    /* outSine */
    , [0.19, 1.0, 0.22, 1.0]
    /* outExpo */
    , [0.075, 0.82, 0.165, 1.0]
    /* outCirc */
    , [0.175, 0.885, 0.32, 1.275]
    /* outBack */
    , (a, p) => t => 1 - elastic(a, p)(1 - t)
    /* outElastic */
    ],
    InOut: [[0.455, 0.03, 0.515, 0.955]
    /* inOutQuad */
    , [0.645, 0.045, 0.355, 1.0]
    /* inOutCubic */
    , [0.77, 0.0, 0.175, 1.0]
    /* inOutQuart */
    , [0.86, 0.0, 0.07, 1.0]
    /* inOutQuint */
    , [0.445, 0.05, 0.55, 0.95]
    /* inOutSine */
    , [1.0, 0.0, 0.0, 1.0]
    /* inOutExpo */
    , [0.785, 0.135, 0.15, 0.86]
    /* inOutCirc */
    , [0.68, -0.55, 0.265, 1.55]
    /* inOutBack */
    , (a, p) => t => t < 0.5 ? elastic(a, p)(t * 2) / 2 : 1 - elastic(a, p)(t * -2 + 2) / 2
    /* inOutElastic */
    ]
  };
  const eases = {
    linear: [0.25, 0.25, 0.75, 0.75]
  };

  for (const coords of keys_default()(curves)) {
    var _context2;

    for_each_default()(_context2 = curves[coords]).call(_context2, (ease, i) => {
      eases['ease' + coords + names[i]] = ease;
    });
  }

  return eases;
})();
/**
 * get easing function
 * @param {string|Function} easing
 * @returns {Function}
 */

function getEasing(easing) {
  if (typeof easing === 'function') {
    return easing;
  }

  if (!easing || typeof easing !== 'string') {
    easing = 'linear';
  } else {
    easing = trim_default()(easing).call(easing);
  }

  let name = easing.split('(')[0];
  const args = parseEasingParameters(easing);
  let ease;

  if (name === 'cubic-bezier' || name === 'cubicBezier') {
    return src_default()(...(args.length ? args : easingMap.linear));
  } else {
    // eslint-disable-next-line eqeqeq
    if (!name || typeof name !== 'string' || typeof name === 'string' && easingMap[name] == null) {
      name = 'linear';
    }

    ease = easingMap[name];

    if (typeof ease === 'function') {
      return ease(...args);
    } else if (args.length) {
      return src_default()(...args);
    } else {
      return src_default()(...ease);
    }
  }
}
// CONCATENATED MODULE: ../semi-animation-react/node_modules/@douyinfe/semi-animation/lib/es/src/constants.js
const constants_events = ['start', 'frame', 'pause', 'resume', 'stop', 'rest'];
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/date/now.js
var date_now = __webpack_require__("9znW");
var now_default = /*#__PURE__*/__webpack_require__.n(date_now);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/parse-int.js
var parse_int = __webpack_require__("M3tB");
var parse_int_default = /*#__PURE__*/__webpack_require__.n(parse_int);

// CONCATENATED MODULE: ../semi-animation-react/node_modules/@douyinfe/semi-animation/lib/es/src/utils/Event.js





class utils_Event_Event {
  constructor() {
    this._eventMap = new core_js_stable_map_default.a();
  }

  on(event, callback) {
    if (event && typeof callback === 'function') {
      this._eventMap.has(event) || this._eventMap.set(event, []);

      this._eventMap.get(event).push(callback);
    }

    return this;
  }

  once(event, callback) {
    var _this = this;

    if (event && typeof callback === 'function') {
      const fn = function () {
        callback(...arguments);

        _this.off(event, fn);
      };

      this.on(event, fn);
    }
  }

  off(event, callback) {
    if (event) {
      if (typeof callback === 'function') {
        const callbacks = this._eventMap.get(event);

        if (is_array_default()(callbacks) && callbacks.length) {
          let index = -1; // eslint-disable-next-line max-depth

          while ((index = find_index_default()(callbacks).call(callbacks, cb => cb === callback)) > -1) {
            splice_default()(callbacks).call(callbacks, index, 1);
          }
        } // eslint-disable-next-line eqeqeq

      } else if (callback == null) {
        this._eventMap.delete(event);
      }
    }

    return this;
  }

  emit(event) {
    var _context;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (!this._eventMap.has(event)) {
      return false;
    }

    for_each_default()(_context = this._eventMap.get(event)).call(_context, callback => callback(...args));

    return true;
  }

}
// CONCATENATED MODULE: ../semi-animation-react/node_modules/@douyinfe/semi-animation/lib/es/src/shouldUseBezier.js
function shouldUseBezier(config) {
  return Boolean(config && typeof config === 'object' && (config.duration > 0 || typeof config.easing === 'string' || typeof config.easing === 'function'));
}
// CONCATENATED MODULE: ../semi-animation-react/node_modules/@douyinfe/semi-animation/lib/es/src/shouldStopAnimation.js


/**
 * usage assumption: currentStyle values have already been rendered but it says
 * nothing of whether currentStyle is stale (see unreadPropStyle)
 *
 * @param {object} currentStyle
 * @param {object} style
 * @param {object} currentVelocity
 * @param {number} startTime
 * @param {number} nowTime
 *
 * @returns {boolean}
 */
// eslint-disable-next-line max-len

function shouldStopAnimation(currentStyle, style, currentVelocity, startTime, nowTime) {
  for (const key of keys_default()(style)) {
    const styleValue = style[key];
    const value = typeof styleValue === 'number' ? styleValue : styleValue.val;

    if (typeof styleValue === 'object' && styleValue.done) {
      continue;
    }

    if (shouldUseBezier(styleValue) && startTime && nowTime && styleValue.duration) {
      if (styleValue.duration + startTime <= nowTime || value !== currentStyle[key]) {
        return false;
      }
    } else if (typeof currentVelocity[key] === 'number' && currentVelocity[key] !== 0) {
      return false;
    } // stepper will have already taken care of rounding precision errors, so
    // won't have such thing as 0.9999 !=== 1


    if (currentStyle[key] !== value) {
      return false;
    }
  }

  return true;
}
// CONCATENATED MODULE: ../semi-animation-react/node_modules/@douyinfe/semi-animation/lib/es/src/stripStyle.js
/* eslint-disable no-restricted-syntax */
function stripStyle(style) {
  const ret = {};

  for (const key in style) {
    if (!Object.prototype.hasOwnProperty.call(style, key)) {
      continue;
    }

    ret[key] = typeof style[key] === 'number' ? style[key] : style[key].val;
  }

  return ret;
}
// CONCATENATED MODULE: ../semi-animation-react/node_modules/@douyinfe/semi-animation/lib/es/src/stepper.js
/**
 * @file
 *
 * react-motion/src/stepper.js
 */
// stepper is used a lot. Saves allocation to return the same array wrapper.
// This is fine and danger-free against mutations because the callsite
// immediately destructures it and gets the numbers inside without passing the
// array reference around.
const reusedTuple = [0, 0];
/**
 *
 * @param {number} secondPerFrame
 * @param {number} x
 * @param {number} v
 * @param {number} destX
 * @param {number} k
 * @param {number} b
 * @param {number} precision
 */
// eslint-disable-next-line max-len

function stepper(secondPerFrame, x, v, destX, k, b, precision) {
  // Spring stiffness, in kg / s^2
  // for animations, destX is really spring length (spring at rest). initial
  // position is considered as the stretched/compressed position of a spring
  const Fspring = -k * (x - destX); // Damping, in kg / s

  const Fdamper = -b * v; // usually we put mass here, but for animation purposes, specifying mass is a
  // bit redundant. you could simply adjust k and b accordingly
  // let a = (Fspring + Fdamper) / mass;

  const a = Fspring + Fdamper;
  const newV = v + a * secondPerFrame;
  const newX = x + newV * secondPerFrame;

  if (Math.abs(newV) < precision && Math.abs(newX - destX) < precision) {
    reusedTuple[0] = destX;
    reusedTuple[1] = 0;
    return reusedTuple;
  }

  reusedTuple[0] = newX;
  reusedTuple[1] = newV;
  return reusedTuple;
}
// CONCATENATED MODULE: ../semi-animation-react/node_modules/@douyinfe/semi-animation/lib/es/src/mapToZero.js

// currently used to initiate the velocity style object to 0
function mapToZero(obj) {
  const ret = {};
  const objKeys = obj && keys_default()(obj) || [];

  for (const key of objKeys) {
    ret[key] = 0;
  }

  return ret;
}
// CONCATENATED MODULE: ../semi-animation-react/node_modules/@douyinfe/semi-animation/lib/es/src/presets.js
/**
 * stiffness is like tension
 * damping is like friction
 */
/* harmony default export */ var src_presets = ({
  default: {
    tension: 170,
    friction: 26
  },
  gentle: {
    tension: 120,
    friction: 14
  },
  wobbly: {
    tension: 180,
    friction: 12
  },
  stiff: {
    tension: 210,
    friction: 20
  },
  slow: {
    tension: 280,
    friction: 60
  },
  molasses: {
    tension: 280,
    friction: 120
  }
});
// CONCATENATED MODULE: ../semi-animation-react/node_modules/@douyinfe/semi-animation/lib/es/src/wrapValue.js






const wrapValue_defaultConfig = assign_default()(assign_default()({}, src_presets.default), {
  precision: 0.01
});

function wrapValue(val) {
  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (shouldUseBezier(config)) {
    const easing = getEasing(config.easing);
    const duration = typeof config.duration === 'number' && config.duration > 0 ? config.duration : 1000;
    config = assign_default()(assign_default()({}, config), {
      easing,
      duration
    });
  }

  let wrapped = assign_default()(assign_default()(assign_default()({}, wrapValue_defaultConfig), config), {
    done: false
  });

  if (val && typeof val === 'object' && 'val' in val) {
    if (shouldUseBezier(val)) {
      const easing = getEasing(val.easing);
      const duration = typeof val.duration === 'number' && val.duration > 0 ? val.duration : parse_int_default()(config.duration) || 1000;
      val = assign_default()(assign_default()({}, val), {
        easing,
        duration
      });
    }

    wrapped = assign_default()(assign_default()({}, wrapped), val);
  } else {
    wrapped = assign_default()(assign_default()({}, wrapped), {
      val
    });
  }

  return wrapped;
}
// CONCATENATED MODULE: ../semi-animation-react/node_modules/@douyinfe/semi-animation/lib/es/src/Animation.js






/* eslint-disable max-depth */

/* eslint-disable eqeqeq */

/* eslint-disable max-lines-per-function */








const Animation_now = () => now_default()();

const msPerFrame = 1000 / 60;
/**
 * @summary
 *
 * Lifecycle hook:
 * start, pause, resume, stop, frame, rest
 *
 * Binding method:
 * const animation = new Animation (); animation.on ('start | frame | rest ', () => {});
 */

class Animation_Animation extends utils_Event_Event {
  constructor() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super();
    this._props = assign_default()({}, props);
    this._config = assign_default()({}, config);
    this.initStates();
  }

  _wrapConfig(object, config) {
    config = config && typeof config === 'object' ? config : this._config;
    const ret = {};

    for (const key of keys_default()(object)) {
      ret[key] = wrapValue(object[key], config);
    }

    return ret;
  }

  initStates(props, config) {
    props = props && typeof props === 'object' ? props : this._props;
    config = config && typeof config === 'object' ? config : this._config;
    const {
      from,
      to
    } = props;
    this._from = {};

    if (from && typeof from) {
      for (const key of keys_default()(from)) {
        this._from[key] = typeof from[key] === 'object' && from[key].val ? from[key].val : from[key];
      }
    }

    this._to = this._wrapConfig(to, config);
    this._delay = parse_int_default()(config.delay) || 0;
    const currentStyle = this._from && stripStyle(this._from) || stripStyle(this._to);
    const currentVelocity = mapToZero(currentStyle);
    this._currentStyle = assign_default()({}, currentStyle);
    this._currentVelocity = assign_default()({}, currentVelocity);
    this._lastIdealStyle = assign_default()({}, currentStyle);
    this._lastIdealVelocity = assign_default()({}, currentVelocity);
    this.resetPlayStates();
    this._frameCount = 0;
    this._prevTime = 0;
  }

  animate() {
    if (this._timer != null) {
      return;
    }

    this._timer = requestAnimationFrame(timestamp => {
      const nowTime = Animation_now(); // stop animation and emit onRest event

      if (shouldStopAnimation(this._currentStyle, this._to, this._currentVelocity, this._startedTime || nowTime, nowTime) || this._ended || this._stopped) {
        if (this._wasAnimating && !this._ended && !this._stopped) {
          // should emit reset in settimeout for delay msPerframe
          this._timer = set_timeout_default()(() => {
            clearTimeout(this._timer);
            this._timer = null;
            this._ended = true;
            this.emit('rest', this.getCurrentStates());
          }, msPerFrame);
        }

        this.resetPlayStates();
        return;
      }

      if (!this._started) {
        this._started = true;
        this.emit('start', this.getCurrentStates());
      }

      this._stopped = false;
      this._paused = false;
      this._wasAnimating = true;

      if (this._startedTime === 0) {
        this._startedTime = nowTime;
      }

      const currentTime = nowTime;
      const timeDelta = currentTime - this._prevTime;
      this._prevTime = currentTime;

      if (currentTime - this._startedTime < this._delay) {
        this._timer = null;
        this.animate();
      }

      const newLastIdealStyle = {};
      const newLastIdealVelocity = {};
      const newCurrentStyle = {};
      const newCurrentVelocity = {};
      const toKeys = this._to && keys_default()(this._to) || [];

      for (const key of toKeys) {
        const styleValue = this._to[key];
        this._accumulatedTime[key] = typeof this._accumulatedTime[key] !== 'number' ? timeDelta : this._accumulatedTime[key] + timeDelta;
        const from = this._from[key] != null && typeof this._from[key] === 'object' ? this._from[key].val : this._from[key];
        const to = styleValue.val;

        if (typeof styleValue === 'number') {
          newCurrentStyle[key] = styleValue;
          newCurrentVelocity[key] = 0;
          newLastIdealStyle[key] = styleValue;
          newLastIdealVelocity[key] = 0;
        } else {
          let newLastIdealStyleValue = this._lastIdealStyle[key];
          let newLastIdealVelocityValue = this._lastIdealVelocity[key];

          if (shouldUseBezier(this._config) || shouldUseBezier(styleValue)) {
            // easing
            const {
              easing,
              duration
            } = styleValue;
            newLastIdealStyleValue = from + easing((currentTime - this._startedTime) / duration) * (to - from);

            if (currentTime >= this._startedTime + duration) {
              newLastIdealStyleValue = to;
              styleValue.done = true;
            }

            newLastIdealStyle[key] = newLastIdealStyleValue;
            newCurrentStyle[key] = newLastIdealStyleValue;
          } else if (to != null && to === this._currentStyle[key]) {
            newCurrentStyle[key] = to;
            newCurrentVelocity[key] = 0;
            newLastIdealStyle[key] = to;
            newLastIdealVelocity[key] = 0;
          } else {
            // spring
            const currentFrameCompletion = (this._accumulatedTime[key] - Math.floor(this._accumulatedTime[key] / msPerFrame) * msPerFrame) / msPerFrame;
            const framesToCatchUp = Math.floor(this._accumulatedTime[key] / msPerFrame);

            for (let i = 0; i < framesToCatchUp; i++) {
              [newLastIdealStyleValue, newLastIdealVelocityValue] = stepper(msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.tension, styleValue.friction, styleValue.precision);
            }

            const [nextIdealX, nextIdealV] = stepper(msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.tension, styleValue.friction, styleValue.precision);
            newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
            newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
            newLastIdealStyle[key] = newLastIdealStyleValue;
            newLastIdealVelocity[key] = newLastIdealVelocityValue;
            this._accumulatedTime[key] -= framesToCatchUp * msPerFrame;
          }
        }
      }

      this._timer = null;
      this._currentStyle = assign_default()({}, newCurrentStyle);
      this._currentVelocity = assign_default()({}, newCurrentVelocity);
      this._lastIdealStyle = assign_default()({}, newLastIdealStyle);
      this._lastIdealVelocity = assign_default()({}, newLastIdealVelocity); // console.log(newCurrentStyle);

      if (!this._destroyed) {
        this.emit('frame', this.getCurrentStates());
        this.animate();
      }
    });
  }

  start() {
    this._prevTime = Animation_now();
    this._startedTime = Animation_now();
    this.animate();
  }

  end() {
    if (!this._ended) {
      this._ended = true;
      this._currentStyle = this.getFinalStates();
      this.emit('frame', this.getFinalStates());
      this.emit('rest', this.getFinalStates());
    }

    this.destroy();
  }

  pause() {
    if (!this._paused) {
      this._pausedTime = Animation_now();
      this._paused = true;
      this.emit('pause', this.getCurrentStates());
      this.destroy();
      this._destroyed = false;
    }
  }

  resume() {
    if (this._started && this._paused) {
      const nowTime = Animation_now();
      const pausedDuration = nowTime - this._pausedTime;
      this._paused = false; // should add with pausedDuration

      this._startedTime += pausedDuration;
      this._prevTime += pausedDuration;
      this._pausedTime = 0;
      this.emit('resume', this.getCurrentStates());
      this.animate();
    }
  }

  stop() {
    this.destroy();

    if (!this._stopped) {
      this._stopped = true; // this.emit('frame', this.getInitialStates());

      this.emit('stop', this.getInitialStates());
      this.initStates();
    }
  }

  destroy() {
    cancelAnimationFrame(this._timer);
    clearTimeout(this._timer);
    this._timer = null;
    this._destroyed = true;
  }

  resetPlayStates() {
    this._started = false;
    this._stopped = false;
    this._ended = false;
    this._paused = false;
    this._destroyed = false;
    this._timer = null;
    this._wasAnimating = false;
    this._accumulatedTime = {};
    this._startedTime = 0;
    this._pausedTime = 0;
  }

  reset() {
    this.destroy();
    this.initStates();
  }

  reverse() {
    this.destroy();

    const props = assign_default()({}, this._props);

    const [from, to] = [props.to, props.from];
    props.from = from;
    props.to = to;
    this._props = assign_default()({}, props);
    this.initStates();
  }

  getCurrentStates() {
    return assign_default()({}, this._currentStyle);
  }

  getInitialStates() {
    return assign_default()({}, stripStyle(this._props.from));
  }

  getFinalStates() {
    return assign_default()({}, stripStyle(this._props.to));
  }

}
// CONCATENATED MODULE: ../semi-animation-react/node_modules/@douyinfe/semi-animation/lib/es/src/interpolate.js




/**
 *
 * @param {number|number[]|string|string[]} from
 * @param {number|number[]|string|string[]} to
 * @param {number} ratio
 * @param {Function} [parser]
 * @param {Function} [formatter]
 * @returns {any}
*/
// eslint-disable-next-line max-len
function interpolate(from, to) {
  let ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  let parser = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  let formatter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

  if (typeof parser === 'function') {
    from = parser(from);
    to = parser(to);
  }

  if (typeof from === 'string' || typeof from === 'number') {
    from = [parse_float_default()(from)];
  }

  if (typeof to === 'string' || typeof to === 'number') {
    to = [parse_float_default()(to)];
  }

  const result = [];

  if (is_array_default()(from) && is_array_default()(to)) {
    for_each_default()(from).call(from, (fromVal, idx) => {
      fromVal = parse_float_default()(fromVal);

      const toVal = parse_float_default()(to[idx]);

      result.push((toVal - fromVal) * ratio + fromVal);
    });
  }

  if (typeof formatter === 'function') {
    return formatter(result);
  } else {
    return result;
  }
}
// CONCATENATED MODULE: ../semi-animation-react/node_modules/@douyinfe/semi-animation/lib/es/index.js






// CONCATENATED MODULE: ../semi-animation-react/lib/es/src/Animation.js





/* eslint-disable @typescript-eslint/ban-types */

/* eslint-disable react/destructuring-assignment */




class src_Animation_Animation extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  constructor() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super(props);

    this.initAnimation = props => {
      // eslint-disable-next-line eqeqeq
      props = props == null ? this.props : props; // eslint-disable-next-line prefer-const

      let {
        from,
        to,
        config,
        reverse
      } = props;

      if (reverse) {
        [from, to] = [to, from];
      }

      this.animation = new Animation_Animation({
        from: assign_default()({}, from),
        to: assign_default()({}, to)
      }, assign_default()({}, config));

      for_each_default()(constants_events).call(constants_events, event => {
        const propName = "on".concat(event[0].toUpperCase() + slice_default()(event).call(event, 1)); // eslint-disable-next-line @typescript-eslint/no-shadow

        this.animation.on(event, props => {
          // avoid memory leak
          if (this._mounted && !this._destroyed) {
            this.setState({
              currentStyle: assign_default()({}, props)
            });
            this.props[propName](props);
          }
        });
      });

      this._destroyed = false;
    };

    this.bindEvents = () => {
      this.startOrNot = () => {
        const {
          immediate,
          autoStart
        } = this.props;

        if (immediate) {
          this.end();
        } else if (autoStart) {
          this.start();
        }
      };

      this.start = () => {
        this.animation && this.animation.start();
      };

      this.pause = () => {
        this.animation && this.animation.pause();
      };

      this.stop = () => {
        this.animation && this.animation.stop();
      };

      this.end = () => {
        this.animation && this.animation.end();
      };

      this.resume = () => {
        this.animation && this.animation.resume();
      };

      this.reset = () => {
        if (this.animation) {
          this.animation.reset();
          this.startOrNot();
        }
      };

      this.reverse = () => {
        if (this.animation) {
          var _context;

          reverse_default()(_context = this.animation).call(_context);

          this.startOrNot();
        }
      };

      this.destroy = () => {
        this._destroyed = true;
        this.animation && this.animation.destroy();
      };
    };

    this.state = {
      currentStyle: {}
    };
    this._mounted = false;
    this._destroyed = false;
    this.initAnimation();
    this.bindEvents();
  }

  startOrNot() {
    throw new Error('Method not implemented.');
  }

  componentDidMount() {
    this._mounted = true;
    const {
      forwardInstance
    } = this.props;

    if (this.animation === null) {
      // didmount/willUnmount may be called twice when React.StrictMode is true in React 18, we need to ensure that this.animation is correct
      this.initAnimation();
      this.bindEvents();
    }

    if (typeof forwardInstance === 'function') {
      forwardInstance(this.animation);
    }

    this.startOrNot();
  }

  componentWillUnmount() {
    this._mounted = false;

    if (this.animation) {
      this.animation.destroy();
      this.animation = null;
    }
  }

  componentDidUpdate() {
    let prevProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.props.reset) {
      if (this.props.from !== prevProps.from || this.props.to !== prevProps.to) {
        this.destroy();
        this.initAnimation();
        this.startOrNot();
      }
    }

    if (this.props.force) {
      if (this.props.to !== prevProps.to) {
        this.initAnimation(assign_default()(assign_default()({}, this.props), {
          from: prevProps.to
        }));
        this.startOrNot();
      }
    }
  }

  render() {
    const {
      children
    } = this.props;

    if (typeof children === 'function') {
      return children(this.animation.getCurrentStates());
    } else if ( /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(children)) {
      return children;
    } else {
      return null;
    }
  }

}
src_Animation_Animation.propTypes = {
  onStart: node_modules_prop_types_default.a.func,
  onFrame: node_modules_prop_types_default.a.func,
  onPause: node_modules_prop_types_default.a.func,
  onResume: node_modules_prop_types_default.a.func,
  onStop: node_modules_prop_types_default.a.func,
  onRest: node_modules_prop_types_default.a.func,
  children: node_modules_prop_types_default.a.any,
  from: node_modules_prop_types_default.a.object,
  to: node_modules_prop_types_default.a.object,
  reverse: node_modules_prop_types_default.a.bool,
  reset: node_modules_prop_types_default.a.bool,
  force: node_modules_prop_types_default.a.bool,
  config: node_modules_prop_types_default.a.object,
  autoStart: node_modules_prop_types_default.a.bool,
  forwardInstance: node_modules_prop_types_default.a.func,
  immediate: node_modules_prop_types_default.a.bool
};
src_Animation_Animation.defaultProps = {
  autoStart: true,
  force: false,
  onStart: noop_noop,
  onFrame: noop_noop,
  onPause: noop_noop,
  onResume: noop_noop,
  onStop: noop_noop,
  onRest: noop_noop
};
// CONCATENATED MODULE: ../semi-animation-react/lib/es/src/KeyFrames.js


/* eslint-disable react/destructuring-assignment */




class KeyFrames_KeyFrames extends external_root_React_commonjs2_react_commonjs_react_amd_react_["Component"] {
  constructor() {
    var _this;

    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super(props);
    _this = this;

    this.onFrame = function () {
      let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      const currentStyle = assign_default()({}, props);

      _this.props.onFrame(currentStyle);

      _this.setState({
        currentStyle
      });
    };

    this.next = () => {
      let {
        frameIndex
      } = this.state;
      const {
        frames,
        loop
      } = this.props;
      frameIndex++;

      if (frameIndex < frames.length - 1) {
        this.setState({
          frameIndex
        });
      } else {
        frameIndex = 0;
        this.props.onRest(this.state.currentStyle);

        if (loop) {
          this.setState({
            frameIndex
          });
        }
      }

      this.props.onKeyRest(this.state.currentStyle);
    };

    this.forwardInstance = instance => {
      this.instance = instance;

      if (typeof this.props.forwardInstance === 'function') {
        this.props.forwardInstance(this.instance);
      }
    };

    this.state = {
      currentStyle: {},
      frameIndex: 0
    };
  }

  componentDidMount() {// this.props.forwardInstance(this.instance);
  }

  componentWillUnmount() {
    this.instance && this.instance.destroy();
  }

  render() {
    const {
      children,
      frames
    } = this.props;
    const {
      frameIndex,
      currentStyle
    } = this.state;
    const from = frames[frameIndex];
    const to = frames[frameIndex + 1];
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(src_Animation_Animation, assign_default()({}, this.props, {
      forwardInstance: this.forwardInstance,
      from: from,
      to: to,
      onFrame: this.onFrame,
      onRest: this.next
    }), typeof children === 'function' ? children(currentStyle) : children);
  }

}
KeyFrames_KeyFrames.propTypes = {
  frames: node_modules_prop_types_default.a.array,
  loop: node_modules_prop_types_default.a.bool,
  onFrame: node_modules_prop_types_default.a.func,
  onKeyRest: node_modules_prop_types_default.a.func,
  onRest: node_modules_prop_types_default.a.func
};
KeyFrames_KeyFrames.defaultProps = {
  frames: [],
  loop: false,
  onKeyRest: noop_noop,
  onRest: noop_noop,
  onFrame: noop_noop
};
// CONCATENATED MODULE: ../semi-animation-react/lib/es/src/Transition.js





var Transition_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable eqeqeq */






class Transition_Transition extends external_root_React_commonjs2_react_commonjs_react_amd_react_["Component"] {
  constructor() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super(props);

    this._isControlled = () => {
      var _context;

      return includes_default()(_context = [true, false, 'enter', 'leave']).call(_context, this.props.state);
    };

    this.forwardInstance = instance => {
      this.instance = instance;
    };

    this.onRest = props => {
      const {
        state
      } = this.state;

      if (state === 'enter') {
        this.props.didEnter(props);
      } else if (state === 'leave') {
        this.setState({
          currentChildren: null,
          lastChildren: null
        });
        this.props.didLeave(props);
      }

      this.props.onRest(props);
    };

    this.onStart = props => {
      const {
        state
      } = this.state;

      if (state === 'enter') {
        this.props.willEnter(props);
      } else if (state === 'leave') {
        this.props.willLeave(props);
      }

      this.props.onStart(props);
    };

    this.state = {
      state: '',
      lastChildren: null,
      currentChildren: null
    };
  }

  static getDerivedStateFromProps(props, state) {
    const willUpdateStates = {};

    if (props.children !== state.currentChildren // && (props.children == null || state.currentChildren == null)
    ) {
      willUpdateStates.lastChildren = state.currentChildren;
      willUpdateStates.currentChildren = props.children;

      if (props.children == null) {
        willUpdateStates.state = 'leave';
      } else {
        willUpdateStates.state = 'enter';
      }
    }

    if (props.state != null) {
      willUpdateStates.state = props.state;
    }

    return willUpdateStates;
  }

  componentWillUnmount() {
    if (this.instance) {
      this.instance.destroy();
      this.instance = null;
    }
  }

  render() {
    const _a = this.props,
          {
      from: propsFrom,
      enter,
      leave
    } = _a,
          restProps = Transition_rest(_a, ["from", "enter", "leave"]);

    let children; // eslint-disable-next-line prefer-const

    let {
      currentChildren,
      lastChildren,
      state
    } = this.state;
    let from = {};
    let to = {};

    const isControlled = this._isControlled();

    if (isControlled) {
      children = this.props.children;
      state = this.props.state;
    } else if (currentChildren == null && lastChildren == null) {
      return null;
    }

    if (state === 'enter') {
      from = propsFrom;
      to = enter;

      if (!isControlled) {
        children = currentChildren;
      }
    } else if (state === 'leave') {
      from = enter;
      to = leave;

      if (!isControlled) {
        children = lastChildren;
      }
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(src_Animation_Animation, assign_default()({}, restProps, {
      force: true,
      from: from,
      to: to,
      onRest: this.onRest,
      onStart: this.onStart
    }), props => // eslint-disable-next-line no-nested-ternary
    typeof children === 'function' ? children(props) : /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(children) ? children : null);
  }

}
Transition_Transition.propTypes = {
  children: node_modules_prop_types_default.a.any,
  from: node_modules_prop_types_default.a.object,
  enter: node_modules_prop_types_default.a.object,
  leave: node_modules_prop_types_default.a.object,
  willEnter: node_modules_prop_types_default.a.func,
  didEnter: node_modules_prop_types_default.a.func,
  willLeave: node_modules_prop_types_default.a.func,
  didLeave: node_modules_prop_types_default.a.func,
  state: node_modules_prop_types_default.a.oneOfType([node_modules_prop_types_default.a.string, node_modules_prop_types_default.a.bool])
};
Transition_Transition.defaultProps = {
  willEnter: noop_noop,
  didEnter: noop_noop,
  willLeave: noop_noop,
  didLeave: noop_noop,
  onStart: noop_noop,
  onRest: noop_noop
};
// CONCATENATED MODULE: ../semi-animation-react/lib/es/index.js






// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/isObject.js
var isObject = __webpack_require__("tQYX");
var isObject_default = /*#__PURE__*/__webpack_require__.n(isObject);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/cloneDeep.js
var cloneDeep = __webpack_require__("c2re");
var cloneDeep_default = /*#__PURE__*/__webpack_require__.n(cloneDeep);

// CONCATENATED MODULE: ../semi-foundation/utils/getMotionObjFromProps.ts




/**
 * get motion object from props
 *
 * example:
 *
 * ```
 *  props = { didLeave: componentHandler, motion: { didLeave: userHandler } };
 *  return { didLeave: () => { componentHandler(); userHandler(); }};
 * ```
 *
 * @param { props: Object }
 * @returns { motion: Object }
 */

function getMotionObjFromProps(props) {
  if (typeof props !== 'object' || props === null) {
    throw new TypeError("props should be object type, got ".concat(typeof props));
  }

  const MOTION_PROPS = ['willEnter', 'didEnter', 'willLeave', 'didLeave', 'onStart', 'onRest', 'state'];
  const {
    motion: motionProp = {}
  } = props;
  let motion = {};

  if (isObject_default()(motionProp)) {
    motion = cloneDeep_default()(motionProp);

    for (const key of keys_default()(motionProp)) {
      const handler = motionProp[key];

      if (typeof handler === 'function') {
        if (key in props) {
          motion[key] = () => {
            props[key](); // call handler function of semi build-in components firstly

            handler(); // call user given handler function
          };
        }
      } else {
        Object(warning["a" /* default */])(true, "[Semi] duplicate motion key '".concat(key, "' from motion prop and props"));
      }
    }
  } else if (typeof motionProp === 'function') {
    const motionFnResult = motionProp(props);
    motion = isObject_default()(motionFnResult) ? motionFnResult : {};
  }

  if (isObject_default()(motion)) {
    for (const key of MOTION_PROPS) {
      if (key in props && !(key in motion)) {
        motion[key] = props[key];
      }
    }
  }

  return motion;
}
// CONCATENATED MODULE: ./tooltip/TooltipStyledTransition.tsx


/* eslint-disable max-len */

/* eslint-disable @typescript-eslint/no-shadow */




const enterCls = "".concat(tooltip_constants_cssClasses.PREFIX, "-bounceIn");
const leaveCls = "".concat(tooltip_constants_cssClasses.PREFIX, "-zoomOut");

const TooltipTransition = function () {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const {
    children
  } = props;
  const motion = getMotionObjFromProps(props); //  add fillMode forwards to fix issue 715, tooltip close will flashing under react 18

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(StyledTransition_StyledTransition, assign_default()({}, props, {
    enter: enterCls,
    leave: leaveCls,
    duration: '100ms'
  }, motion, {
    fillMode: 'forwards'
  }), typeof children === 'function' ? _ref => {
    let {
      animateCls,
      animateEvents,
      animateStyle
    } = _ref;
    return children({
      animateCls,
      animateEvents,
      animateStyle
    });
  } : children);
};

/* harmony default export */ var TooltipStyledTransition = (TooltipTransition);
// CONCATENATED MODULE: ./tooltip/ArrowBoundingShape.ts

/* harmony default export */ var ArrowBoundingShape = (prop_types_default.a.shape({
  offsetX: prop_types_default.a.number,
  offsetY: prop_types_default.a.number,
  width: prop_types_default.a.number,
  height: prop_types_default.a.number
}));
// CONCATENATED MODULE: ./tooltip/index.tsx













var tooltip_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable prefer-destructuring, max-lines-per-function, react/no-find-dom-node, max-len, @typescript-eslint/no-empty-function */
























const tooltip_prefix = tooltip_constants_cssClasses.PREFIX;
const positionSet = tooltip_constants_strings.POSITION_SET;
const triggerSet = tooltip_constants_strings.TRIGGER_SET;
const blockDisplays = ['flex', 'block', 'table', 'flow-root', 'grid'];

const tooltip_defaultGetContainer = () => document.body;

class tooltip_Tooltip extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.setContainerEl = node => this.containerEl = {
      current: node
    };

    this.isSpecial = elem => {
      if (Object(isElement["a" /* default */])(elem)) {
        return Boolean(elem.disabled);
      } else if ( /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(elem)) {
        const disabled = get_default()(elem, 'props.disabled');

        if (disabled) {
          return tooltip_constants_strings.STATUS_DISABLED;
        }

        const loading = get_default()(elem, 'props.loading');
        /* Only judge the loading state of the Button, and no longer judge other components */


        const isButton = !isEmpty_default()(elem) && !isEmpty_default()(elem.type) && elem.type.name === 'Button' || elem.type.name === 'IconButton';

        if (loading && isButton) {
          return tooltip_constants_strings.STATUS_LOADING;
        }
      }

      return false;
    }; // willEnter = () => {
    // this.foundation.calcPosition();
    // this.setState({ visible: true });
    // };


    this.didLeave = () => {
      this.adapter.unregisterClickOutsideHandler();
      this.adapter.unregisterScrollHandler();
      this.adapter.unregisterResizeHandler();
      this.adapter.removePortal();
    };

    this.renderIcon = () => {
      const {
        placement
      } = this.state;
      const {
        showArrow,
        prefixCls,
        style
      } = this.props;
      let icon = null;
      const triangleCls = classnames_default()(["".concat(prefixCls, "-icon-arrow")]);

      const bgColor = get_default()(style, 'backgroundColor');

      const iconComponent = includes_default()(placement).call(placement, 'left') || includes_default()(placement).call(placement, 'right') ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tooltip_TriangleArrowVertical, null) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tooltip_TriangleArrow, null);

      if (showArrow) {
        if ( /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(showArrow)) {
          icon = showArrow;
        } else {
          icon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(iconComponent, {
            className: triangleCls,
            style: {
              color: bgColor,
              fill: 'currentColor'
            }
          });
        }
      }

      return icon;
    };

    this.handlePortalInnerClick = e => {
      if (this.props.clickToHide) {
        this.foundation.hide();
      }

      if (this.props.stopPropagation) {
        Object(_utils["g" /* stopPropagation */])(e);
      }
    };

    this.handlePortalMouseDown = e => {
      if (this.props.stopPropagation) {
        Object(_utils["g" /* stopPropagation */])(e);
      }
    };

    this.handlePortalInnerKeyDown = e => {
      this.foundation.handleContainerKeydown(e);
    };

    this.renderContentNode = content => {
      const contentProps = {
        initialFocusRef: this.initialFocusRef
      };
      return !isFunction_default()(content) ? content : content(contentProps);
    };

    this.renderPortal = () => {
      const {
        containerStyle = {},
        visible,
        portalEventSet,
        placement,
        transitionState,
        id,
        isPositionUpdated
      } = this.state;
      const {
        prefixCls,
        content,
        showArrow,
        style,
        motion,
        role,
        zIndex
      } = this.props;
      const contentNode = this.renderContentNode(content);
      const {
        className: propClassName
      } = this.props;
      const direction = this.context.direction;
      const className = classnames_default()(propClassName, {
        ["".concat(prefixCls, "-wrapper")]: true,
        ["".concat(prefixCls, "-wrapper-show")]: visible,
        ["".concat(prefixCls, "-with-arrow")]: Boolean(showArrow),
        ["".concat(prefixCls, "-rtl")]: direction === 'rtl'
      });
      const icon = this.renderIcon();

      const portalInnerStyle = omit_default()(containerStyle, motion ? ['transformOrigin'] : undefined);

      const transformOrigin = get_default()(containerStyle, 'transformOrigin');

      const inner = motion && isPositionUpdated ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(TooltipStyledTransition, {
        position: placement,
        didLeave: this.didLeave,
        motion: motion
      }, transitionState === 'enter' ? _ref => {
        let {
          animateCls,
          animateStyle,
          animateEvents
        } = _ref;
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
          className: classnames_default()(className, animateCls),
          style: assign_default()(assign_default()(assign_default()({
            visibility: 'visible'
          }, animateStyle), {
            transformOrigin
          }), style)
        }, portalEventSet, animateEvents, {
          role: role,
          "x-placement": placement,
          id: id
        }), contentNode, icon);
      } : null) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
        className: className
      }, portalEventSet, {
        "x-placement": placement,
        style: assign_default()({
          visibility: motion ? 'hidden' : 'visible'
        }, style)
      }), contentNode, icon);
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(_portal, {
        getPopupContainer: this.props.getPopupContainer,
        style: {
          zIndex
        }
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(BASE_CLASS_PREFIX, "-portal-inner"),
        style: portalInnerStyle,
        ref: this.setContainerEl,
        onClick: this.handlePortalInnerClick,
        onMouseDown: this.handlePortalMouseDown,
        onKeyDown: this.handlePortalInnerKeyDown
      }, inner));
    };

    this.wrapSpan = elem => {
      const {
        wrapperClassName
      } = this.props;

      const display = get_default()(elem, 'props.style.display');

      const block = get_default()(elem, 'props.block');

      const style = {
        display: 'inline-block'
      };

      if (block || includes_default()(blockDisplays).call(blockDisplays, display)) {
        style.width = '100%';
      } // eslint-disable-next-line jsx-a11y/no-static-element-interactions


      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: wrapperClassName,
        style: style
      }, elem);
    };

    this.mergeEvents = (rawEvents, events) => {
      const mergedEvents = {};

      each_default()(events, (handler, key) => {
        if (typeof handler === 'function') {
          mergedEvents[key] = function () {
            handler(...arguments);

            if (rawEvents && typeof rawEvents[key] === 'function') {
              rawEvents[key](...arguments);
            }
          };
        }
      });

      return mergedEvents;
    };

    this.state = {
      visible: false,

      /**
       *
       * Note: The transitionState parameter is equivalent to isInsert
       */
      transitionState: '',
      triggerEventSet: {},
      portalEventSet: {},
      containerStyle: {// zIndex: props.zIndex,
      },
      isInsert: false,
      placement: props.position || 'top',
      transitionStyle: {},
      isPositionUpdated: false,
      id: props.wrapperId // auto generate id, will be used by children.aria-describedby & content.id, improve a11y

    };
    this.foundation = new foundation_Tooltip(this.adapter);
    this.eventManager = new Event_Event();
    this.triggerEl = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.containerEl = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.initialFocusRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.clickOutsideHandler = null;
    this.resizeHandler = null;
    this.isWrapped = false; // Identifies whether a span element is wrapped

    this.containerPosition = undefined;
  }

  get adapter() {
    var _this = this;

    return assign_default()(assign_default()({}, super.adapter), {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      on: function () {
        return _this.eventManager.on(...arguments);
      },
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      off: function () {
        return _this.eventManager.off(...arguments);
      },
      insertPortal: (content, _a) => {
        var {
          position
        } = _a,
            containerStyle = tooltip_rest(_a, ["position"]);

        this.setState({
          isInsert: true,
          transitionState: 'enter',
          containerStyle: assign_default()(assign_default()({}, this.state.containerStyle), containerStyle)
        }, () => {
          set_timeout_default()(() => {
            // waiting child component mounted
            this.eventManager.emit('portalInserted');
          }, 0);
        });
      },
      removePortal: () => {
        this.setState({
          isInsert: false,
          isPositionUpdated: false
        });
      },
      getEventName: () => ({
        mouseEnter: 'onMouseEnter',
        mouseLeave: 'onMouseLeave',
        mouseOut: 'onMouseOut',
        mouseOver: 'onMouseOver',
        click: 'onClick',
        focus: 'onFocus',
        blur: 'onBlur',
        keydown: 'onKeyDown'
      }),
      registerTriggerEvent: triggerEventSet => {
        this.setState({
          triggerEventSet
        });
      },
      unregisterTriggerEvent: () => {},
      registerPortalEvent: portalEventSet => {
        this.setState({
          portalEventSet
        });
      },
      unregisterPortalEvent: () => {},
      getTriggerBounding: () => {
        // eslint-disable-next-line
        // It may be a React component or an html element
        // There is no guarantee that triggerE l.current can get the real dom, so call findDOMNode to ensure that you can get the real dom
        const triggerDOM = this.adapter.getTriggerNode();
        this.triggerEl.current = triggerDOM;
        return triggerDOM && triggerDOM.getBoundingClientRect();
      },
      // Gets the outer size of the specified container
      getPopupContainerRect: () => {
        const container = this.getPopupContainer();
        let rect = null;

        if (container && Object(isElement["a" /* default */])(container)) {
          const boundingRect = Object(dom["b" /* convertDOMRectToObject */])(container.getBoundingClientRect());
          rect = assign_default()(assign_default()({}, boundingRect), {
            scrollLeft: container.scrollLeft,
            scrollTop: container.scrollTop
          });
        }

        return rect;
      },
      containerIsBody: () => {
        const container = this.getPopupContainer();
        return container === document.body;
      },
      containerIsRelative: () => {
        const container = this.getPopupContainer();
        const computedStyle = window.getComputedStyle(container);
        return computedStyle.getPropertyValue('position') === 'relative';
      },
      containerIsRelativeOrAbsolute: () => {
        var _context;

        return includes_default()(_context = ['relative', 'absolute']).call(_context, this.containerPosition);
      },
      // Get the size of the pop-up layer
      getWrapperBounding: () => {
        const el = this.containerEl && this.containerEl.current;
        return el && el.getBoundingClientRect();
      },
      getDocumentElementBounding: () => document.documentElement.getBoundingClientRect(),
      setPosition: _a => {
        var {
          position
        } = _a,
            style = tooltip_rest(_a, ["position"]);

        this.setState({
          containerStyle: assign_default()(assign_default()({}, this.state.containerStyle), style),
          placement: position,
          isPositionUpdated: true
        }, () => {
          this.eventManager.emit('positionUpdated');
        });
      },
      updatePlacementAttr: placement => {
        this.setState({
          placement
        });
      },
      togglePortalVisible: (visible, cb) => {
        const willUpdateStates = {};

        if (this.adapter.canMotion()) {
          willUpdateStates.transitionState = visible ? 'enter' : 'leave';
          willUpdateStates.visible = visible;
        } else {
          willUpdateStates.visible = visible;
        }

        this.mounted && this.setState(willUpdateStates, () => {
          cb();
        });
      },
      registerClickOutsideHandler: cb => {
        if (this.clickOutsideHandler) {
          this.adapter.unregisterClickOutsideHandler();
        }

        this.clickOutsideHandler = e => {
          if (!this.mounted) {
            return false;
          }

          let el = this.triggerEl && this.triggerEl.current;
          let popupEl = this.containerEl && this.containerEl.current;
          el = external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default.a.findDOMNode(el);
          popupEl = external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default.a.findDOMNode(popupEl);

          if (el && !el.contains(e.target) && popupEl && !popupEl.contains(e.target) || this.props.clickTriggerToHide) {
            this.props.onClickOutSide(e);
            cb();
          }
        };

        window.addEventListener('mousedown', this.clickOutsideHandler);
      },
      unregisterClickOutsideHandler: () => {
        if (this.clickOutsideHandler) {
          window.removeEventListener('mousedown', this.clickOutsideHandler);
          this.clickOutsideHandler = null;
        }
      },
      registerResizeHandler: cb => {
        if (this.resizeHandler) {
          this.adapter.unregisterResizeHandler();
        }

        this.resizeHandler = throttle_default()(e => {
          if (!this.mounted) {
            return false;
          }

          cb(e);
        }, 10);
        window.addEventListener('resize', this.resizeHandler, false);
      },
      unregisterResizeHandler: () => {
        if (this.resizeHandler) {
          window.removeEventListener('resize', this.resizeHandler, false);
          this.resizeHandler = null;
        }
      },
      notifyVisibleChange: visible => {
        this.props.onVisibleChange(visible);
      },
      registerScrollHandler: rePositionCb => {
        if (this.scrollHandler) {
          this.adapter.unregisterScrollHandler();
        }

        this.scrollHandler = throttle_default()(e => {
          if (!this.mounted) {
            return false;
          }

          const triggerDOM = this.adapter.getTriggerNode();
          const isRelativeScroll = e.target.contains(triggerDOM);

          if (isRelativeScroll) {
            const scrollPos = {
              x: e.target.scrollLeft,
              y: e.target.scrollTop
            };
            rePositionCb(scrollPos);
          }
        }, 10); // When it is greater than 16ms, it will be very obvious

        window.addEventListener('scroll', this.scrollHandler, true);
      },
      unregisterScrollHandler: () => {
        if (this.scrollHandler) {
          window.removeEventListener('scroll', this.scrollHandler, true);
          this.scrollHandler = null;
        }
      },
      canMotion: () => Boolean(this.props.motion),
      updateContainerPosition: () => {
        const container = this.getPopupContainer();

        if (container && Object(isElement["a" /* default */])(container)) {
          // getComputedStyle need first parameter is Element type
          const computedStyle = window.getComputedStyle(container);
          const position = computedStyle.getPropertyValue('position');
          this.containerPosition = position;
        }
      },
      getContainerPosition: () => this.containerPosition,
      getContainer: () => this.containerEl && this.containerEl.current,
      getTriggerNode: () => {
        let triggerDOM = this.triggerEl.current;

        if (!Object(isElement["a" /* default */])(this.triggerEl.current)) {
          triggerDOM = external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default.a.findDOMNode(this.triggerEl.current);
        }

        return triggerDOM;
      },
      getFocusableElements: node => {
        return Object(_utils["c" /* getFocusableElements */])(node);
      },
      getActiveElement: () => {
        return Object(_utils["b" /* getActiveElement */])();
      },
      setInitialFocus: () => {
        const {
          preventScroll
        } = this.props;

        const focusRefNode = get_default()(this, 'initialFocusRef.current');

        if (focusRefNode && 'focus' in focusRefNode) {
          focusRefNode.focus({
            preventScroll
          });
        }
      },
      notifyEscKeydown: event => {
        this.props.onEscKeyDown(event);
      },
      setId: () => {
        this.setState({
          id: getUuidShort()
        });
      }
    });
  }

  componentDidMount() {
    this.mounted = true;
    this.getPopupContainer = this.props.getPopupContainer || this.context.getPopupContainer || tooltip_defaultGetContainer;
    this.foundation.init();
  }

  componentWillUnmount() {
    this.mounted = false;
    this.foundation.destroy();
  }
  /** for transition - end */


  rePosition() {
    return this.foundation.calcPosition();
  }

  componentDidUpdate(prevProps, prevState) {
    Object(warning["a" /* default */])(this.props.mouseLeaveDelay < this.props.mouseEnterDelay, "[Semi Tooltip] 'mouseLeaveDelay' cannot be less than 'mouseEnterDelay', which may cause the dropdown layer to not be hidden.");

    if (prevProps.visible !== this.props.visible) {
      this.props.visible ? this.foundation.delayShow() : this.foundation.delayHide();
    }

    if (prevProps.rePosKey !== this.props.rePosKey) {
      this.rePosition();
    }
  }

  render() {
    const {
      isInsert,
      triggerEventSet,
      visible,
      id
    } = this.state;
    const {
      wrapWhenSpecial,
      role,
      trigger
    } = this.props;
    let {
      children
    } = this.props;

    const childrenStyle = assign_default()({}, get_default()(children, 'props.style'));

    const extraStyle = {};

    if (wrapWhenSpecial) {
      const isSpecial = this.isSpecial(children);

      if (isSpecial) {
        childrenStyle.pointerEvents = 'none';

        if (isSpecial === tooltip_constants_strings.STATUS_DISABLED) {
          extraStyle.cursor = 'not-allowed';
        }

        children = /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["cloneElement"])(children, {
          style: childrenStyle
        });

        if (trigger !== 'custom') {
          // no need to wrap span when trigger is custom, cause it don't need bind event
          children = this.wrapSpan(children);
        }

        this.isWrapped = true;
      } else if (! /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(children)) {
        children = this.wrapSpan(children);
        this.isWrapped = true;
      }
    } // eslint-disable-next-line prefer-const


    let ariaAttribute = {}; // Take effect when used by Popover component

    if (role === 'dialog') {
      ariaAttribute['aria-expanded'] = visible ? 'true' : 'false';
      ariaAttribute['aria-haspopup'] = 'dialog';
      ariaAttribute['aria-controls'] = id;
    } else {
      ariaAttribute['aria-describedby'] = id;
    } // The incoming children is a single valid element, otherwise wrap a layer with span


    const newChild = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(children, assign_default()(assign_default()(assign_default()(assign_default()({}, ariaAttribute), children.props), this.mergeEvents(children.props, triggerEventSet)), {
      style: assign_default()(assign_default()({}, get_default()(children, 'props.style')), extraStyle),
      className: classnames_default()(get_default()(children, 'props.className')),
      // to maintain refs with callback
      ref: node => {
        // Keep your own reference
        this.triggerEl.current = node; // Call the original ref, if any

        const {
          ref
        } = children; // this.log('tooltip render() - get ref', ref);

        if (typeof ref === 'function') {
          ref(node);
        } else if (ref && typeof ref === 'object') {
          ref.current = node;
        }
      },
      tabIndex: children.props.tabIndex || 0 // a11y keyboard, in some condition select's tabindex need to -1 or 0 

    })); // If you do not add a layer of div, in order to bind the events and className in the tooltip, you need to cloneElement children, but this time it may overwrite the children's original ref reference
    // So if the user adds ref to the content, you need to use callback ref: https://github.com/facebook/react/issues/8873

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, isInsert ? this.renderPortal() : null, newChild);
  }

}
tooltip_Tooltip.contextType = configProvider_context;
tooltip_Tooltip.propTypes = {
  children: prop_types_default.a.node,
  motion: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.object, prop_types_default.a.func]),
  autoAdjustOverflow: prop_types_default.a.bool,
  position: prop_types_default.a.oneOf(positionSet),
  getPopupContainer: prop_types_default.a.func,
  mouseEnterDelay: prop_types_default.a.number,
  mouseLeaveDelay: prop_types_default.a.number,
  trigger: prop_types_default.a.oneOf(triggerSet).isRequired,
  className: prop_types_default.a.string,
  wrapperClassName: prop_types_default.a.string,
  clickToHide: prop_types_default.a.bool,
  // used with trigger === hover, private
  clickTriggerToHide: prop_types_default.a.bool,
  visible: prop_types_default.a.bool,
  style: prop_types_default.a.object,
  content: prop_types_default.a.oneOfType([prop_types_default.a.node, prop_types_default.a.func]),
  prefixCls: prop_types_default.a.string,
  onVisibleChange: prop_types_default.a.func,
  onClickOutSide: prop_types_default.a.func,
  spacing: prop_types_default.a.number,
  showArrow: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.node]),
  zIndex: prop_types_default.a.number,
  rePosKey: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  arrowBounding: ArrowBoundingShape,
  transformFromCenter: prop_types_default.a.bool,
  arrowPointAtCenter: prop_types_default.a.bool,
  stopPropagation: prop_types_default.a.bool,
  // private
  role: prop_types_default.a.string,
  wrapWhenSpecial: prop_types_default.a.bool,
  guardFocus: prop_types_default.a.bool,
  returnFocusOnClose: prop_types_default.a.bool,
  preventScroll: prop_types_default.a.bool
};
tooltip_Tooltip.defaultProps = {
  arrowBounding: numbers.ARROW_BOUNDING,
  autoAdjustOverflow: true,
  arrowPointAtCenter: true,
  trigger: 'hover',
  transformFromCenter: true,
  position: 'top',
  prefixCls: tooltip_prefix,
  role: 'tooltip',
  mouseEnterDelay: numbers.MOUSE_ENTER_DELAY,
  mouseLeaveDelay: numbers.MOUSE_LEAVE_DELAY,
  motion: true,
  onVisibleChange: noop_default.a,
  onClickOutSide: noop_default.a,
  spacing: numbers.SPACING,
  showArrow: true,
  wrapWhenSpecial: true,
  zIndex: numbers.DEFAULT_Z_INDEX,
  closeOnEsc: false,
  guardFocus: false,
  returnFocusOnClose: false,
  onEscKeyDown: noop_default.a,
  disableFocusListener: false,
  disableArrowKeyDown: false
};

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/copy-text-to-clipboard/index.js
var copy_text_to_clipboard = __webpack_require__("HDX/");
var copy_text_to_clipboard_default = /*#__PURE__*/__webpack_require__.n(copy_text_to_clipboard);

// CONCATENATED MODULE: ../semi-foundation/utils/function.ts
/**
 * no operation
 */
// eslint-disable-next-line @typescript-eslint/no-empty-function
function function_noop() {}
// CONCATENATED MODULE: ./locale/context.tsx

const LocaleContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext(null);
/* harmony default export */ var locale_context = (LocaleContext);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/locale/zh-CN/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: '不到 1 秒',
    other: '不到 {{count}} 秒'
  },
  xSeconds: {
    one: '1 秒',
    other: '{{count}} 秒'
  },
  halfAMinute: '半分钟',
  lessThanXMinutes: {
    one: '不到 1 分钟',
    other: '不到 {{count}} 分钟'
  },
  xMinutes: {
    one: '1 分钟',
    other: '{{count}} 分钟'
  },
  xHours: {
    one: '1 小时',
    other: '{{count}} 小时'
  },
  aboutXHours: {
    one: '大约 1 小时',
    other: '大约 {{count}} 小时'
  },
  xDays: {
    one: '1 天',
    other: '{{count}} 天'
  },
  aboutXWeeks: {
    one: '大约 1 个星期',
    other: '大约 {{count}} 个星期'
  },
  xWeeks: {
    one: '1 个星期',
    other: '{{count}} 个星期'
  },
  aboutXMonths: {
    one: '大约 1 个月',
    other: '大约 {{count}} 个月'
  },
  xMonths: {
    one: '1 个月',
    other: '{{count}} 个月'
  },
  aboutXYears: {
    one: '大约 1 年',
    other: '大约 {{count}} 年'
  },
  xYears: {
    one: '1 年',
    other: '{{count}} 年'
  },
  overXYears: {
    one: '超过 1 年',
    other: '超过 {{count}} 年'
  },
  almostXYears: {
    one: '将近 1 年',
    other: '将近 {{count}} 年'
  }
};
function formatDistance(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale[token] === 'string') {
    result = formatDistanceLocale[token];
  } else if (count === 1) {
    result = formatDistanceLocale[token].one;
  } else {
    result = formatDistanceLocale[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return result + '内';
    } else {
      return result + '前';
    }
  }

  return result;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    // TODO: Remove String()
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/locale/zh-CN/_lib/formatLong/index.js

var dateFormats = {
  full: "y'年'M'月'd'日' EEEE",
  long: "y'年'M'月'd'日'",
  medium: 'yyyy-MM-dd',
  short: 'yy-MM-dd'
};
var timeFormats = {
  full: 'zzzz a h:mm:ss',
  long: 'z a h:mm:ss',
  medium: 'a h:mm:ss',
  short: 'a h:mm'
};
var dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ var _lib_formatLong = (formatLong);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
  }
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/toDate/index.js

/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @param {Date|Number} argument - the value to convert
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */

function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument); // Clone the date

  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new Date(argument.getTime());
  } else if (typeof argument === 'number' || argStr === '[object Number]') {
    return new Date(argument);
  } else {
    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
      // eslint-disable-next-line no-console
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console

      console.warn(new Error().stack);
    }

    return new Date(NaN);
  }
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }

  var number = Number(dirtyNumber);

  if (isNaN(number)) {
    return number;
  }

  return number < 0 ? Math.ceil(number) : Math.floor(number);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js


 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/isSameUTCWeek/index.js

 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function isSameUTCWeek(dirtyDateLeft, dirtyDateRight, options) {
  requiredArgs(2, arguments);
  var dateLeftStartOfWeek = startOfUTCWeek(dirtyDateLeft, options);
  var dateRightStartOfWeek = startOfUTCWeek(dirtyDateRight, options);
  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/locale/zh-CN/_lib/formatRelative/index.js


function checkWeek(_date, _baseDate, _options, baseFormat) {
  if (isSameUTCWeek(_date, _baseDate, _options)) {
    return baseFormat; // in same week
  } else if (_date.getTime() > _baseDate.getTime()) {
    return "'下个'" + baseFormat; // in next week
  }

  return "'上个'" + baseFormat; // in last week
}

var formatRelativeLocale = {
  lastWeek: checkWeek,
  // days before yesterday, maybe in this week or last week
  yesterday: "'昨天' p",
  today: "'今天' p",
  tomorrow: "'明天' p",
  nextWeek: checkWeek,
  // days after tomorrow, maybe in this week or next week
  other: 'PP p'
};
function formatRelative(token, _date, _baseDate, _options) {
  var format = formatRelativeLocale[token];

  if (typeof format === 'function') {
    return format(_date, _baseDate, _options, 'eeee p');
  }

  return format;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function (dirtyIndex, dirtyOptions) {
    var options = dirtyOptions || {};
    var context = options.context ? String(options.context) : 'standalone';
    var valuesArray;

    if (context === 'formatting' && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;

      var _width = options.width ? String(options.width) : args.defaultWidth;

      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }

    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!

    return valuesArray[index];
  };
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/locale/zh-CN/_lib/localize/index.js

var eraValues = {
  narrow: ['前', '公元'],
  abbreviated: ['前', '公元'],
  wide: ['公元前', '公元']
};
var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['第一季', '第二季', '第三季', '第四季'],
  wide: ['第一季度', '第二季度', '第三季度', '第四季度']
};
var monthValues = {
  narrow: ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'],
  abbreviated: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
  wide: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月']
};
var dayValues = {
  narrow: ['日', '一', '二', '三', '四', '五', '六'],
  short: ['日', '一', '二', '三', '四', '五', '六'],
  abbreviated: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
  wide: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六']
};
var dayPeriodValues = {
  narrow: {
    am: '上',
    pm: '下',
    midnight: '凌晨',
    noon: '午',
    morning: '早',
    afternoon: '下午',
    evening: '晚',
    night: '夜'
  },
  abbreviated: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜间'
  },
  wide: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜间'
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: '上',
    pm: '下',
    midnight: '凌晨',
    noon: '午',
    morning: '早',
    afternoon: '下午',
    evening: '晚',
    night: '夜'
  },
  abbreviated: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜间'
  },
  wide: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜间'
  }
};

function ordinalNumber(dirtyNumber, dirtyOptions) {
  // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`:
  //
  //   var options = dirtyOptions || {}
  //   var unit = String(options.unit)
  //
  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'
  var number = Number(dirtyNumber);
  var options = dirtyOptions || {};
  var unit = String(options.unit);

  switch (unit) {
    case 'date':
      return number.toString() + '日';

    case 'hour':
      return number.toString() + '时';

    case 'minute':
      return number.toString() + '分';

    case 'second':
      return number.toString() + '秒';

    default:
      return '第 ' + number.toString();
  }
}

var localize_localize = {
  ordinalNumber: ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function (quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ var _lib_localize = (localize_localize);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}

function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }

  return undefined;
}

function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }

  return undefined;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/locale/zh-CN/_lib/match/index.js


var matchOrdinalNumberPattern = /^(第\s*)?\d+(日|时|分|秒)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(前)/i,
  abbreviated: /^(前)/i,
  wide: /^(公元前|公元)/i
};
var parseEraPatterns = {
  any: [/^(前)/i, /^(公元)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^第[一二三四]刻/i,
  wide: /^第[一二三四]刻钟/i
};
var parseQuarterPatterns = {
  any: [/(1|一)/i, /(2|二)/i, /(3|三)/i, /(4|四)/i]
};
var matchMonthPatterns = {
  narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
  abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
  wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
};
var parseMonthPatterns = {
  narrow: [/^一/i, /^二/i, /^三/i, /^四/i, /^五/i, /^六/i, /^七/i, /^八/i, /^九/i, /^十(?!(一|二))/i, /^十一/i, /^十二/i],
  any: [/^一|1/i, /^二|2/i, /^三|3/i, /^四|4/i, /^五|5/i, /^六|6/i, /^七|7/i, /^八|8/i, /^九|9/i, /^十(?!(一|二))|10/i, /^十一|11/i, /^十二|12/i]
};
var matchDayPatterns = {
  narrow: /^[一二三四五六日]/i,
  short: /^[一二三四五六日]/i,
  abbreviated: /^周[一二三四五六日]/i,
  wide: /^星期[一二三四五六日]/i
};
var parseDayPatterns = {
  any: [/日/i, /一/i, /二/i, /三/i, /四/i, /五/i, /六/i]
};
var matchDayPeriodPatterns = {
  any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨|)/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^上午?/i,
    pm: /^下午?/i,
    midnight: /^午夜/i,
    noon: /^[中正]午/i,
    morning: /^早上/i,
    afternoon: /^下午/i,
    evening: /^晚上?/i,
    night: /^凌晨/i
  }
};
var match_match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function (value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function (index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ var _lib_match = (match_match);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/locale/zh-CN/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Chinese Simplified locale.
 * @language Chinese Simplified
 * @iso-639-2 zho
 * @author Changyu Geng [@KingMario]{@link https://github.com/KingMario}
 * @author Song Shuoyun [@fnlctrl]{@link https://github.com/fnlctrl}
 * @author sabrinaM [@sabrinamiao]{@link https://github.com/sabrinamiao}
 * @author Carney Wu [@cubicwork]{@link https://github.com/cubicwork}
 * @author Terrence Lam [@skyuplam]{@link https://github.com/skyuplam}
 */

var zh_CN_locale = {
  code: 'zh-CN',
  formatDistance: formatDistance,
  formatLong: _lib_formatLong,
  formatRelative: formatRelative,
  localize: _lib_localize,
  match: _lib_match,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ var zh_CN = (zh_CN_locale);
// CONCATENATED MODULE: ./locale/source/zh_CN.ts

const local = {
  code: 'zh-CN',
  dateFnsLocale: zh_CN,
  Pagination: {
    item: '条',
    page: '页',
    pageSize: '条/页',
    total: '共',
    jumpTo: '跳至'
  },
  Modal: {
    confirm: '确定',
    cancel: '取消'
  },
  TimePicker: {
    placeholder: {
      time: '请选择时间',
      timeRange: '请选择时间范围'
    },
    begin: '开始时间',
    end: '结束时间',
    hour: '时',
    minute: '分',
    second: '秒',
    AM: '上午',
    PM: '下午'
  },
  DatePicker: {
    placeholder: {
      date: '请选择日期',
      dateTime: '请选择日期及时间',
      dateRange: ['开始日期', '结束日期'],
      dateTimeRange: ['开始日期', '结束日期']
    },
    footer: {
      confirm: '确定',
      cancel: '取消'
    },
    selectDate: '返回选择日期',
    selectTime: '选择时间',
    year: '年',
    month: '月',
    day: '日',
    monthText: '${year}年 ${month}',
    months: {
      1: '1月',
      2: '2月',
      3: '3月',
      4: '4月',
      5: '5月',
      6: '6月',
      7: '7月',
      8: '8月',
      9: '9月',
      10: '10月',
      11: '11月',
      12: '12月'
    },
    // timepicker scrollwheel里只需要展示[1、2……]，所以这里的fullMonths根据UI定制了
    fullMonths: {
      1: '1',
      2: '2',
      3: '3',
      4: '4',
      5: '5',
      6: '6',
      7: '7',
      8: '8',
      9: '9',
      10: '10',
      11: '11',
      12: '12'
    },
    weeks: {
      Mon: '一',
      Tue: '二',
      Wed: '三',
      Thu: '四',
      Fri: '五',
      Sat: '六',
      Sun: '日'
    },
    localeFormatToken: {
      FORMAT_SWITCH_DATE: 'yyyy-MM-dd'
    }
  },
  Navigation: {
    collapseText: '收起侧边栏',
    expandText: '展开侧边栏'
  },
  Popconfirm: {
    confirm: '确定',
    cancel: '取消'
  },
  Table: {
    emptyText: '暂无数据',
    pageText: '显示第 ${currentStart} 条-第 ${currentEnd} 条，共 ${total} 条'
  },
  Select: {
    emptyText: '暂无数据',
    createText: '创建'
  },
  Cascader: {
    emptyText: '暂无数据'
  },
  Tree: {
    emptyText: '暂无数据',
    searchPlaceholder: '搜索'
  },
  List: {
    emptyText: '暂无数据'
  },
  Calendar: {
    allDay: '全天',
    AM: '上午${time}时',
    PM: '下午${time}时',
    datestring: '日',
    remaining: '还有${remained}项'
  },
  Upload: {
    mainText: '点击上传文件或拖拽文件到这里',
    illegalTips: '不支持此类型文件',
    legalTips: '松手开始上传',
    retry: '重试',
    replace: '替换文件',
    clear: '清空',
    selectedFiles: '已选择文件',
    illegalSize: '文件尺寸不合法',
    fail: '上传失败'
  },
  TreeSelect: {
    searchPlaceholder: '搜索'
  },
  Typography: {
    copy: '复制',
    copied: '复制成功',
    expand: '展开',
    collapse: '收起'
  },
  Transfer: {
    emptyLeft: '暂无数据',
    emptySearch: '无搜索结果',
    emptyRight: '暂无内容，可从左侧勾选',
    placeholder: '搜索',
    clear: '清空',
    selectAll: '全选',
    clearSelectAll: '取消全选',
    total: '共 ${total} 项',
    selected: '已选 ${total} 项'
  }
}; // 中文

/* harmony default export */ var source_zh_CN = (local);
// CONCATENATED MODULE: ./locale/localeConsumer.tsx






class localeConsumer_LocaleConsumer extends external_root_React_commonjs2_react_commonjs_react_amd_react_["Component"] {
  renderChildren(localeData, children) {
    const {
      componentName
    } = this.props;
    let locale = localeData;

    if (!(localeData === null || localeData === void 0 ? void 0 : localeData.code)) {
      locale = source_zh_CN;
    }
    /**
     * dateFnsLocale is used to format the date into a local date
     * example:
     *  import { zhCN } from "date-fns/locale";
     *  format(new Date("2021-04-29"), "yyyy-MM-dd EEEE")
     *      => '2021-04-29 Thursday' (默认 locale 为 en-US)
     *  format(new Date('2021-04-29'), "yyyy-MM-dd EEEE", { locale: zhCN })
     *      => '2021-04-29 星期四'
     */


    const defaultFnsLocale = get_default()(source_zh_CN, 'dateFnsLocale');

    const dateFnsLocale = get_default()(locale, 'dateFnsLocale', defaultFnsLocale);

    return children(locale[componentName], locale.code, dateFnsLocale);
  }

  render() {
    const {
      children
    } = this.props;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(configProvider_context.Consumer, null, _ref => {
      let {
        locale
      } = _ref;
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(locale_context.Consumer, null, localeData => this.renderChildren(locale || localeData, children));
    });
  }

}
localeConsumer_LocaleConsumer.propTypes = {
  componentName: prop_types_default.a.string.isRequired,
  children: prop_types_default.a.any
};
localeConsumer_LocaleConsumer.defaultProps = {
  componentName: ''
};
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/number/is-safe-integer.js
var is_safe_integer = __webpack_require__("lpbv");
var is_safe_integer_default = /*#__PURE__*/__webpack_require__.n(is_safe_integer);

// CONCATENATED MODULE: ../semi-icons/lib/es/env.js
const env_BASE_CLASS_PREFIX = 'semi';
// EXTERNAL MODULE: ../semi-icons/lib/es/styles/icons.css
var icons = __webpack_require__("BKEV");

// CONCATENATED MODULE: ../semi-icons/lib/es/components/Icon.js






var Icon_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};





const Icon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.forwardRef((props, ref) => {
  var _context;

  const {
    svg,
    spin = false,
    rotate,
    style,
    className,
    prefixCls = env_BASE_CLASS_PREFIX,
    type,
    size = 'default'
  } = props,
        restProps = Icon_rest(props, ["svg", "spin", "rotate", "style", "className", "prefixCls", "type", "size"]);

  const classes = classnames_default()("".concat(prefixCls, "-icon"), {
    ["".concat(prefixCls, "-icon-extra-small")]: size === 'extra-small',
    ["".concat(prefixCls, "-icon-small")]: size === 'small',
    ["".concat(prefixCls, "-icon-default")]: size === 'default',
    ["".concat(prefixCls, "-icon-large")]: size === 'large',
    ["".concat(prefixCls, "-icon-extra-large")]: size === 'extra-large',
    ["".concat(prefixCls, "-icon-spinning")]: spin === true,
    [concat_default()(_context = "".concat(prefixCls, "-icon-")).call(_context, type)]: Boolean(type)
  }, className);
  const outerStyle = {};

  if (is_safe_integer_default()(rotate)) {
    outerStyle.transform = "rotate(".concat(rotate, "deg)");
  }

  assign_default()(outerStyle, style);

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", assign_default()({
    role: "img",
    ref: ref,
    "aria-label": type,
    className: classes,
    style: outerStyle
  }, restProps), svg);
}); // @ts-ignore used to judge whether it is a semi-icon in semi-ui
// custom icon case

Icon.elementType = 'Icon';

const convertIcon = (Svg, iconType) => {
  const InnerIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.forwardRef((props, ref) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Icon, assign_default()({
    svg: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Svg),
    type: iconType,
    ref: ref
  }, props))); // @ts-ignore used to judge whether it is a semi-icon in semi-ui 
  // builtin icon case

  InnerIcon.elementType = 'Icon';
  return InnerIcon;
};


/* harmony default export */ var components_Icon = (Icon);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconAlertCircle.js




function SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM13.5 17.5C13.5 16.6716 12.8284 16 12 16C11.1716 16 10.5 16.6716 10.5 17.5C10.5 18.3284 11.1716 19 12 19C12.8284 19 13.5 18.3284 13.5 17.5ZM12 5C10.9138 5 10.0507 5.91244 10.1109 6.99692L10.4168 12.5023C10.4635 13.3426 11.1584 14 12 14C12.8416 14 13.5365 13.3426 13.5832 12.5023L13.8891 6.99692C13.9493 5.91244 13.0862 5 12 5Z",
    fill: "currentColor"
  }));
}

const IconComponent = convertIcon(SvgComponent, 'alert_circle');
/* harmony default export */ var IconAlertCircle = (IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconAlertTriangle.js




function IconAlertTriangle_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M10.2268 2.3986L1.52616 19.0749C0.831449 20.4064 1.79747 22 3.29933 22H20.7007C22.2025 22 23.1686 20.4064 22.4739 19.0749L13.7732 2.3986C13.0254 0.965441 10.9746 0.965442 10.2268 2.3986ZM13.1415 14.0101C13.0603 14.5781 12.5739 15 12.0001 15C11.4263 15 10.9398 14.5781 10.8586 14.0101L10.2829 9.97992C10.1336 8.93495 10.9445 8.00002 12.0001 8.00002C13.0556 8.00002 13.8665 8.93495 13.7172 9.97992L13.1415 14.0101ZM13.5001 18.5C13.5001 19.3284 12.8285 20 12.0001 20C11.1716 20 10.5001 19.3284 10.5001 18.5C10.5001 17.6716 11.1716 17 12.0001 17C12.8285 17 13.5001 17.6716 13.5001 18.5Z",
    fill: "currentColor"
  }));
}

const IconAlertTriangle_IconComponent = convertIcon(IconAlertTriangle_SvgComponent, 'alert_triangle');
/* harmony default export */ var IconAlertTriangle = (IconAlertTriangle_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconCalendar.js




function IconCalendar_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M4 20V8H20V20H4ZM2 4C2 2.89543 2.89543 2 4 2H20C21.1046 2 22 2.89543 22 4V20C22 21.1046 21.1046 22 20 22H4C2.89543 22 2 21.1046 2 20V4ZM6 10.5C6 10.2239 6.22386 10 6.5 10H8.5C8.77614 10 9 10.2239 9 10.5V12.5C9 12.7761 8.77614 13 8.5 13H6.5C6.22386 13 6 12.7761 6 12.5V10.5ZM6.5 15C6.22386 15 6 15.2239 6 15.5V17.5C6 17.7761 6.22386 18 6.5 18H8.5C8.77614 18 9 17.7761 9 17.5V15.5C9 15.2239 8.77614 15 8.5 15H6.5ZM10.5 10.5C10.5 10.2239 10.7239 10 11 10H13C13.2761 10 13.5 10.2239 13.5 10.5V12.5C13.5 12.7761 13.2761 13 13 13H11C10.7239 13 10.5 12.7761 10.5 12.5V10.5ZM11 15C10.7239 15 10.5 15.2239 10.5 15.5V17.5C10.5 17.7761 10.7239 18 11 18H13C13.2761 18 13.5 17.7761 13.5 17.5V15.5C13.5 15.2239 13.2761 15 13 15H11ZM15 10.5C15 10.2239 15.2239 10 15.5 10H17.5C17.7761 10 18 10.2239 18 10.5V12.5C18 12.7761 17.7761 13 17.5 13H15.5C15.2239 13 15 12.7761 15 12.5V10.5ZM15.5 15C15.2239 15 15 15.2239 15 15.5V17.5C15 17.7761 15.2239 18 15.5 18H17.5C17.7761 18 18 17.7761 18 17.5V15.5C18 15.2239 17.7761 15 17.5 15H15.5Z",
    fill: "currentColor"
  }));
}

const IconCalendar_IconComponent = convertIcon(IconCalendar_SvgComponent, 'calendar');
/* harmony default export */ var IconCalendar = (IconCalendar_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconCalendarClock.js




function IconCalendarClock_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M2 5V19C2 20.6569 3.34315 22 5 22H12.101C11.5151 21.4259 11.0297 20.7496 10.6736 20H6C4.89543 20 4 19.1046 4 18V8C4 7.44772 4.44772 7 5 7H19C19.5523 7 20 7.44772 20 8V10.6736C20.7496 11.0297 21.4259 11.5151 22 12.101V5C22 3.34315 20.6569 2 19 2H5C3.34315 2 2 3.34315 2 5Z",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M16 10H17C16.4614 10 15.9369 10.0608 15.4332 10.176C15.5943 10.065 15.7896 10 16 10Z",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M13.4981 10.9376C13.4659 10.4144 13.0313 10 12.5 10H11.5C10.9477 10 10.5 10.4477 10.5 11V12C10.5 12.4742 10.83 12.8712 11.2729 12.9741C11.857 12.1446 12.6168 11.4478 13.4981 10.9376Z",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M7 10C6.44772 10 6 10.4477 6 11V12C6 12.5523 6.44772 13 7 13H8C8.55228 13 9 12.5523 9 12V11C9 10.4477 8.55228 10 8 10H7Z",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M6 16C6 15.4477 6.44772 15 7 15H8C8.55228 15 9 15.4477 9 16V17C9 17.5523 8.55228 18 8 18H7C6.44772 18 6 17.5523 6 17V16Z",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M22 17C22 19.7614 19.7614 22 17 22C14.2386 22 12 19.7614 12 17C12 14.2386 14.2386 12 17 12C19.7614 12 22 14.2386 22 17ZM18 15C18 14.4477 17.5523 14 17 14C16.4477 14 16 14.4477 16 15V17C16 17.2652 16.1054 17.5196 16.2929 17.7071L17.7929 19.2071C18.1834 19.5976 18.8166 19.5976 19.2071 19.2071C19.5976 18.8166 19.5976 18.1834 19.2071 17.7929L18 16.5858V15Z",
    fill: "currentColor"
  }));
}

const IconCalendarClock_IconComponent = convertIcon(IconCalendarClock_SvgComponent, 'calendar_clock');
/* harmony default export */ var IconCalendarClock = (IconCalendarClock_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconCaretdown.js




function IconCaretdown_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M17.549 15.659L12.753 21.139C12.6591 21.2464 12.5434 21.3325 12.4135 21.3915C12.2836 21.4505 12.1427 21.481 12 21.481C11.8574 21.481 11.7164 21.4505 11.5865 21.3915C11.4566 21.3325 11.3409 21.2464 11.247 21.139L6.45101 15.659C5.88501 15.011 6.34501 14 7.20401 14H16.796C17.656 14 18.115 15.012 17.549 15.659Z",
    fill: "currentColor"
  }));
}

const IconCaretdown_IconComponent = convertIcon(IconCaretdown_SvgComponent, 'caretdown');
/* harmony default export */ var IconCaretdown = (IconCaretdown_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconCaretup.js




function IconCaretup_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M6.45096 8.34102L11.247 2.86102C11.3408 2.75361 11.4566 2.66753 11.5865 2.60854C11.7163 2.54956 11.8573 2.51904 12 2.51904C12.1426 2.51904 12.2836 2.54956 12.4135 2.60854C12.5433 2.66753 12.6591 2.75361 12.753 2.86102L17.549 8.34102C18.115 8.98802 17.655 10 16.796 10H7.20396C6.34396 10 5.88496 8.98802 6.45096 8.34102Z",
    fill: "currentColor"
  }));
}

const IconCaretup_IconComponent = convertIcon(IconCaretup_SvgComponent, 'caretup');
/* harmony default export */ var IconCaretup = (IconCaretup_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconCheckboxIndeterminate.js




function IconCheckboxIndeterminate_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M5 12.5C5 11.6716 5.67157 11 6.5 11H17.5C18.3284 11 19 11.6716 19 12.5C19 13.3284 18.3284 14 17.5 14H6.5C5.67157 14 5 13.3284 5 12.5Z",
    fill: "currentColor"
  }));
}

const IconCheckboxIndeterminate_IconComponent = convertIcon(IconCheckboxIndeterminate_SvgComponent, 'checkbox_indeterminate');
/* harmony default export */ var IconCheckboxIndeterminate = (IconCheckboxIndeterminate_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconCheckboxTick.js




function IconCheckboxTick_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M17.4111 7.30848C18.0692 7.81171 18.1947 8.75312 17.6915 9.41119L11.1915 17.9112C10.909 18.2806 10.4711 18.4981 10.0061 18.5C9.54105 18.5019 9.10143 18.288 8.81592 17.9209L5.31592 13.4209C4.80731 12.767 4.92512 11.8246 5.57904 11.316C6.23296 10.8074 7.17537 10.9252 7.68398 11.5791L9.98988 14.5438L15.3084 7.58884C15.8116 6.93077 16.7531 6.80525 17.4111 7.30848Z",
    fill: "currentColor"
  }));
}

const IconCheckboxTick_IconComponent = convertIcon(IconCheckboxTick_SvgComponent, 'checkbox_tick');
/* harmony default export */ var IconCheckboxTick = (IconCheckboxTick_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconChevronDown.js




function IconChevronDown_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M4.08045 7.59809C4.66624 7.01231 5.61599 7.01231 6.20177 7.59809L11.8586 13.2549L17.5155 7.59809C18.1013 7.01231 19.051 7.01231 19.6368 7.59809C20.2226 8.18388 20.2226 9.13363 19.6368 9.71941L12.9193 16.4369C12.3335 17.0227 11.3838 17.0227 10.798 16.4369L4.08045 9.71941C3.49467 9.13363 3.49467 8.18388 4.08045 7.59809Z",
    fill: "currentColor"
  }));
}

const IconChevronDown_IconComponent = convertIcon(IconChevronDown_SvgComponent, 'chevron_down');
/* harmony default export */ var IconChevronDown = (IconChevronDown_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconChevronLeft.js




function IconChevronLeft_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M16.2782 4.23933C16.864 4.82511 16.864 5.77486 16.2782 6.36065L10.6213 12.0175L16.2782 17.6744C16.864 18.2601 16.864 19.2099 16.2782 19.7957C15.6924 20.3815 14.7426 20.3815 14.1569 19.7957L7.43934 13.0782C6.85355 12.4924 6.85355 11.5426 7.43934 10.9568L14.1569 4.23933C14.7426 3.65354 15.6924 3.65354 16.2782 4.23933Z",
    fill: "currentColor"
  }));
}

const IconChevronLeft_IconComponent = convertIcon(IconChevronLeft_SvgComponent, 'chevron_left');
/* harmony default export */ var IconChevronLeft = (IconChevronLeft_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconChevronRight.js




function IconChevronRight_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M7.43934 19.7957C6.85355 19.2099 6.85355 18.2601 7.43934 17.6744L13.0962 12.0175L7.43934 6.36065C6.85355 5.77486 6.85355 4.82511 7.43934 4.23933C8.02513 3.65354 8.97487 3.65354 9.56066 4.23933L16.2782 10.9568C16.864 11.5426 16.864 12.4924 16.2782 13.0782L9.56066 19.7957C8.97487 20.3815 8.02513 20.3815 7.43934 19.7957Z",
    fill: "currentColor"
  }));
}

const IconChevronRight_IconComponent = convertIcon(IconChevronRight_SvgComponent, 'chevron_right');
/* harmony default export */ var IconChevronRight = (IconChevronRight_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconChevronUp.js




function IconChevronUp_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M19.637 16.4369C19.0513 17.0227 18.1015 17.0227 17.5157 16.4369L11.8589 10.7801L6.20202 16.4369C5.61623 17.0227 4.66648 17.0227 4.0807 16.4369C3.49491 15.8511 3.49491 14.9014 4.0807 14.3156L10.7982 7.59809C11.384 7.01231 12.3337 7.01231 12.9195 7.59809L19.637 14.3156C20.2228 14.9014 20.2228 15.8511 19.637 16.4369Z",
    fill: "currentColor"
  }));
}

const IconChevronUp_IconComponent = convertIcon(IconChevronUp_SvgComponent, 'chevron_up');
/* harmony default export */ var IconChevronUp = (IconChevronUp_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconClear.js




function IconClear_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23ZM17.0352 16.8626C16.4597 17.4585 15.5101 17.4751 14.9142 16.8996L12.0368 14.121L9.25822 16.9984C8.68274 17.5943 7.73314 17.6109 7.13722 17.0354C6.5413 16.4599 6.52472 15.5103 7.1002 14.9144L9.87883 12.037L7.00147 9.2584C6.40555 8.68293 6.38897 7.73332 6.96445 7.1374C7.53992 6.54148 8.48953 6.52491 9.08545 7.10038L11.9628 9.87901L14.7414 7.00165C15.3169 6.40573 16.2665 6.38916 16.8624 6.96463C17.4584 7.54011 17.4749 8.48971 16.8995 9.08563L14.1208 11.963L16.9982 14.7416C17.5941 15.3171 17.6107 16.2667 17.0352 16.8626Z",
    fill: "currentColor"
  }));
}

const IconClear_IconComponent = convertIcon(IconClear_SvgComponent, 'clear');
/* harmony default export */ var IconClear = (IconClear_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconClock.js




function IconClock_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23ZM13.5 6.5V11.3787L17.0607 14.9393C17.6464 15.5251 17.6464 16.4749 17.0607 17.0607C16.4749 17.6464 15.5251 17.6464 14.9393 17.0607L10.9393 13.0607C10.658 12.7794 10.5 12.3978 10.5 12V6.5C10.5 5.67157 11.1716 5 12 5C12.8284 5 13.5 5.67157 13.5 6.5Z",
    fill: "currentColor"
  }));
}

const IconClock_IconComponent = convertIcon(IconClock_SvgComponent, 'clock');
/* harmony default export */ var IconClock = (IconClock_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconClose.js




function IconClose_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M17.6568 19.7782C18.2426 20.3639 19.1924 20.3639 19.7782 19.7782C20.3639 19.1924 20.3639 18.2426 19.7782 17.6568L14.1213 12L19.7782 6.34313C20.3639 5.75734 20.3639 4.8076 19.7782 4.22181C19.1924 3.63602 18.2426 3.63602 17.6568 4.22181L12 9.87866L6.34313 4.22181C5.75734 3.63602 4.8076 3.63602 4.22181 4.22181C3.63602 4.8076 3.63602 5.75734 4.22181 6.34313L9.87866 12L4.22181 17.6568C3.63602 18.2426 3.63602 19.1924 4.22181 19.7782C4.8076 20.3639 5.75734 20.3639 6.34313 19.7782L12 14.1213L17.6568 19.7782Z",
    fill: "currentColor"
  }));
}

const IconClose_IconComponent = convertIcon(IconClose_SvgComponent, 'close');
/* harmony default export */ var IconClose = (IconClose_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconCopy.js




function IconCopy_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M7 4C7 2.89543 7.89543 2 9 2H20C21.1046 2 22 2.89543 22 4V15C22 16.1046 21.1046 17 20 17H19V8C19 6 18 5 16 5H7V4Z",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M5 7C3.89543 7 3 7.89543 3 9V19C3 20.1046 3.89543 21 5 21H15C16.1046 21 17 20.1046 17 19V9C17 7.89543 16.1046 7 15 7H5Z",
    fill: "currentColor"
  }));
}

const IconCopy_IconComponent = convertIcon(IconCopy_SvgComponent, 'copy');
/* harmony default export */ var IconCopy = (IconCopy_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconDoubleChevronLeft.js




function IconDoubleChevronLeft_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12.6185 4.39653C13.1272 4.92524 13.1272 5.78245 12.6185 6.31116L7.14483 12L12.6185 17.6888C13.1272 18.2176 13.1272 19.0748 12.6185 19.6035C12.1098 20.1322 11.285 20.1322 10.7763 19.6035L4.38153 12.9573C3.87282 12.4286 3.87282 11.5714 4.38153 11.0427L10.7763 4.39653C11.285 3.86782 12.1098 3.86782 12.6185 4.39653Z",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M19.6185 4.39653C20.1272 4.92524 20.1272 5.78245 19.6185 6.31116L14.1448 12L19.6185 17.6888C20.1272 18.2176 20.1272 19.0748 19.6185 19.6035C19.1098 20.1322 18.285 20.1322 17.7763 19.6035L11.3815 12.9573C10.8728 12.4286 10.8728 11.5714 11.3815 11.0427L17.7763 4.39653C18.285 3.86782 19.1098 3.86782 19.6185 4.39653Z",
    fill: "currentColor"
  }));
}

const IconDoubleChevronLeft_IconComponent = convertIcon(IconDoubleChevronLeft_SvgComponent, 'double_chevron_left');
/* harmony default export */ var IconDoubleChevronLeft = (IconDoubleChevronLeft_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconDoubleChevronRight.js




function IconDoubleChevronRight_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M4.38153 4.39653C4.89024 3.86782 5.71502 3.86782 6.22373 4.39653L12.6185 11.0427C13.1272 11.5714 13.1272 12.4286 12.6185 12.9573L6.22373 19.6035C5.71502 20.1322 4.89024 20.1322 4.38153 19.6035C3.87282 19.0748 3.87282 18.2176 4.38153 17.6888L9.85517 12L4.38153 6.31116C3.87282 5.78245 3.87282 4.92524 4.38153 4.39653Z",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M11.3815 4.39653C11.8902 3.86782 12.715 3.86782 13.2237 4.39653L19.6185 11.0427C20.1272 11.5714 20.1272 12.4286 19.6185 12.9573L13.2237 19.6035C12.715 20.1322 11.8902 20.1322 11.3815 19.6035C10.8728 19.0748 10.8728 18.2176 11.3815 17.6888L16.8552 12L11.3815 6.31116C10.8728 5.78245 10.8728 4.92524 11.3815 4.39653Z",
    fill: "currentColor"
  }));
}

const IconDoubleChevronRight_IconComponent = convertIcon(IconDoubleChevronRight_SvgComponent, 'double_chevron_right');
/* harmony default export */ var IconDoubleChevronRight = (IconDoubleChevronRight_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconEyeClosedSolid.js




function IconEyeClosedSolid_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M21.7071 3.70711C22.0976 3.31658 22.0976 2.68342 21.7071 2.29289C21.3166 1.90237 20.6834 1.90237 20.2929 2.29289L17.3135 5.27233C15.8114 4.50566 14.0321 4 12 4C5 4 1 10 1 12C1 13.1757 2.38219 15.7335 4.94345 17.6423L2.29289 20.2929C1.90237 20.6834 1.90237 21.3166 2.29289 21.7071C2.68342 22.0976 3.31658 22.0976 3.70711 21.7071L21.7071 3.70711ZM7.8284 14.7574L9.29237 13.2934C9.10495 12.9018 9 12.4631 9 12C9 10.3431 10.3431 9 12 9C12.4631 9 12.9018 9.10495 13.2934 9.29237L14.7574 7.8284C13.967 7.30488 13.0191 7 12 7C9.23858 7 7 9.23858 7 12C7 13.0191 7.30488 13.967 7.8284 14.7574Z",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M12 20C10.7789 20 9.64914 19.8174 8.61594 19.5054L11.1871 16.9342C11.4516 16.9775 11.7232 17 12 17C14.7614 17 17 14.7614 17 12C17 11.7232 16.9775 11.4516 16.9342 11.1871L20.5032 7.61808C22.1342 9.27317 23 11.0695 23 12C23 14 19 20 12 20Z",
    fill: "currentColor"
  }));
}

const IconEyeClosedSolid_IconComponent = convertIcon(IconEyeClosedSolid_SvgComponent, 'eye_closed_solid');
/* harmony default export */ var IconEyeClosedSolid = (IconEyeClosedSolid_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconEyeOpened.js




function IconEyeOpened_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12 4C5 4 1 10 1 12C1 14 5 20 12 20C19 20 23 14 23 12C23 10 19 4 12 4ZM17 12C17 14.7614 14.7614 17 12 17C9.23858 17 7 14.7614 7 12C7 9.23858 9.23858 7 12 7C14.7614 7 17 9.23858 17 12ZM12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15Z",
    fill: "currentColor"
  }));
}

const IconEyeOpened_IconComponent = convertIcon(IconEyeOpened_SvgComponent, 'eye_opened');
/* harmony default export */ var IconEyeOpened = (IconEyeOpened_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconFile.js




function IconFile_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12 2C12 1.44772 11.5523 1 11 1H6C4.89543 1 4 1.89543 4 3V21C4 22.1046 4.89543 23 6 23H18C19.1046 23 20 22.1046 20 21V10C20 9.44772 19.5523 9 19 9H14C12.8954 9 12 8.10457 12 7V2ZM7 8C7 7.44772 7.44772 7 8 7H9C9.55228 7 10 7.44772 10 8C10 8.55228 9.55228 9 9 9H8C7.44772 9 7 8.55228 7 8ZM7 13C7 12.4477 7.44772 12 8 12H16C16.5523 12 17 12.4477 17 13C17 13.5523 16.5523 14 16 14H8C7.44772 14 7 13.5523 7 13ZM8 17C7.44772 17 7 17.4477 7 18C7 18.5523 7.44772 19 8 19H16C16.5523 19 17 18.5523 17 18C17 17.4477 16.5523 17 16 17H8ZM19.0686 7.49999H14.5C13.9477 7.49999 13.5 7.05228 13.5 6.49999V1.93136C13.5 1.21864 14.3617 0.861707 14.8657 1.36568L19.6343 6.13431C20.1383 6.63828 19.7814 7.49999 19.0686 7.49999Z",
    fill: "currentColor"
  }));
}

const IconFile_IconComponent = convertIcon(IconFile_SvgComponent, 'file');
/* harmony default export */ var IconFile = (IconFile_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconFilter.js




function IconFilter_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M1.0929 2.57912C1.25675 2.22596 1.61069 2 2.00001 2H22C22.3893 2 22.7433 2.22596 22.9071 2.57912C23.071 2.93229 23.015 3.34845 22.7636 3.64573L14.5654 12.8261V21C14.5654 21.3466 14.386 21.6684 14.0911 21.8507C13.7963 22.0329 13.4282 22.0494 13.1182 21.8944L10.0528 19.8944C9.71401 19.725 9.5 19.3788 9.5 19V12.8261L1.23644 3.64573C0.985045 3.34845 0.929036 2.93229 1.0929 2.57912Z",
    fill: "currentColor"
  }));
}

const IconFilter_IconComponent = convertIcon(IconFilter_SvgComponent, 'filter');
/* harmony default export */ var IconFilter = (IconFilter_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconFolder.js




function IconFolder_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M5 2C3.34315 2 2 3.34315 2 5V8H22C22 6 21 4 19 4H12.5523C11.8711 4 11.2102 3.76816 10.6783 3.34261L9.54783 2.43826C9.1932 2.15456 8.75258 2 8.29844 2H5Z",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M22 10H2V19C2 20.6569 3.34315 22 5 22H19C20.6569 22 22 20.6569 22 19V10Z",
    fill: "currentColor"
  }));
}

const IconFolder_IconComponent = convertIcon(IconFolder_SvgComponent, 'folder');
/* harmony default export */ var IconFolder = (IconFolder_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconFolderOpen.js




function IconFolderOpen_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2 5C2 3.34315 3.34315 2 5 2H8.29844C8.75258 2 9.1932 2.15456 9.54783 2.43826L10.6783 3.34261C11.2102 3.76816 11.8711 4 12.5523 4H18C20 4 21 6 21 8H7.53361C6.62889 8 5.83683 8.60735 5.6021 9.48109L2.57151 20.7617C2.21202 20.2671 2 19.6583 2 19V5ZM22.1667 10H9.5C8.61111 10 7.82889 10.5867 7.58 11.44L4.87333 20.72C4.68667 21.36 5.16667 22 5.83333 22H18.5C19.3889 22 20.1711 21.4133 20.42 20.56L23.1267 11.28C23.3133 10.64 22.8333 10 22.1667 10Z",
    fill: "currentColor"
  }));
}

const IconFolderOpen_IconComponent = convertIcon(IconFolderOpen_SvgComponent, 'folder_open');
/* harmony default export */ var IconFolderOpen = (IconFolderOpen_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconHandle.js




function IconHandle_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M9 7C10.1046 7 11 6.10457 11 5C11 3.89543 10.1046 3 9 3C7.89543 3 7 3.89543 7 5C7 6.10457 7.89543 7 9 7Z",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M9 14C10.1046 14 11 13.1046 11 12C11 10.8954 10.1046 10 9 10C7.89543 10 7 10.8954 7 12C7 13.1046 7.89543 14 9 14Z",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M11 19C11 20.1046 10.1046 21 9 21C7.89543 21 7 20.1046 7 19C7 17.8954 7.89543 17 9 17C10.1046 17 11 17.8954 11 19Z",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M15 7C16.1046 7 17 6.10457 17 5C17 3.89543 16.1046 3 15 3C13.8954 3 13 3.89543 13 5C13 6.10457 13.8954 7 15 7Z",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M17 12C17 13.1046 16.1046 14 15 14C13.8954 14 13 13.1046 13 12C13 10.8954 13.8954 10 15 10C16.1046 10 17 10.8954 17 12Z",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M15 21C16.1046 21 17 20.1046 17 19C17 17.8954 16.1046 17 15 17C13.8954 17 13 17.8954 13 19C13 20.1046 13.8954 21 15 21Z",
    fill: "currentColor"
  }));
}

const IconHandle_IconComponent = convertIcon(IconHandle_SvgComponent, 'handle');
/* harmony default export */ var IconHandle = (IconHandle_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconHelpCircle.js




function IconHelpCircle_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23ZM11.8281 14.6094C10.9688 14.6094 10.5391 14.0723 10.5391 13.3691C10.5391 12.3242 11.0566 11.6504 12.2676 10.7324C12.2894 10.7158 12.3111 10.6993 12.3326 10.6829C13.1573 10.0555 13.7324 9.61807 13.7324 8.82812C13.7324 7.93945 12.9023 7.42188 11.9746 7.42188C11.2129 7.42188 10.627 7.70508 10.168 8.30078C9.83594 8.64258 9.57227 8.82812 9.12305 8.82812C8.38086 8.82812 8 8.31055 8 7.71484C8 7.10938 8.3418 6.49414 8.87891 6.02539C9.60156 5.40039 10.7539 5 12.2773 5C14.9922 5 16.8965 6.33789 16.8965 8.64258C16.8965 10.3223 15.8906 11.1328 14.709 11.9531C13.9082 12.5391 13.5273 12.8809 13.2246 13.5742L13.2238 13.5756C12.8922 14.1609 12.638 14.6094 11.8281 14.6094ZM11.8086 18.7695C10.8711 18.7695 10.0996 18.1641 10.0996 17.2266C10.0996 16.2891 10.8711 15.6836 11.8086 15.6836C12.7461 15.6836 13.5078 16.2891 13.5078 17.2266C13.5078 18.1641 12.7461 18.7695 11.8086 18.7695Z",
    fill: "currentColor"
  }));
}

const IconHelpCircle_IconComponent = convertIcon(IconHelpCircle_SvgComponent, 'help_circle');
/* harmony default export */ var IconHelpCircle = (IconHelpCircle_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconInfoCircle.js




function IconInfoCircle_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23ZM14 7C14 8.10457 13.1046 9 12 9C10.8954 9 10 8.10457 10 7C10 5.89543 10.8954 5 12 5C13.1046 5 14 5.89543 14 7ZM9 10.75C9 10.3358 9.33579 10 9.75 10H12.5C13.0523 10 13.5 10.4477 13.5 11V16.5H14.25C14.6642 16.5 15 16.8358 15 17.25C15 17.6642 14.6642 18 14.25 18H9.75C9.33579 18 9 17.6642 9 17.25C9 16.8358 9.33579 16.5 9.75 16.5H10.5V11.5H9.75C9.33579 11.5 9 11.1642 9 10.75Z",
    fill: "currentColor"
  }));
}

const IconInfoCircle_IconComponent = convertIcon(IconInfoCircle_SvgComponent, 'info_circle');
/* harmony default export */ var IconInfoCircle = (IconInfoCircle_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconMore.js




function IconMore_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M7 12C7 13.3807 5.88071 14.5 4.5 14.5C3.11929 14.5 2 13.3807 2 12C2 10.6193 3.11929 9.5 4.5 9.5C5.88071 9.5 7 10.6193 7 12Z",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M14.5 12C14.5 13.3807 13.3807 14.5 12 14.5C10.6193 14.5 9.5 13.3807 9.5 12C9.5 10.6193 10.6193 9.5 12 9.5C13.3807 9.5 14.5 10.6193 14.5 12Z",
    fill: "currentColor"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M19.5 14.5C20.8807 14.5 22 13.3807 22 12C22 10.6193 20.8807 9.5 19.5 9.5C18.1193 9.5 17 10.6193 17 12C17 13.3807 18.1193 14.5 19.5 14.5Z",
    fill: "currentColor"
  }));
}

const IconMore_IconComponent = convertIcon(IconMore_SvgComponent, 'more');
/* harmony default export */ var IconMore = (IconMore_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconRadio.js




function IconRadio_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("circle", {
    cx: 12,
    cy: 12,
    r: 5,
    fill: "currentColor"
  }));
}

const IconRadio_IconComponent = convertIcon(IconRadio_SvgComponent, 'radio');
/* harmony default export */ var IconRadio = (IconRadio_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconRefresh.js




function IconRefresh_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M4.49993 11.9998C4.49993 7.85775 7.85775 4.49993 11.9998 4.49993C14.6403 4.49993 16.9645 5.86506 18.3012 7.9305L16.2939 7.52902C15.4815 7.36656 14.6913 7.89337 14.5288 8.7057C14.3664 9.51803 14.8932 10.3083 15.7055 10.4707L20.7055 11.4707C21.4643 11.6225 22.214 11.1721 22.4363 10.4309L23.9363 5.43095C24.1744 4.63747 23.7241 3.80126 22.9307 3.56321C22.1372 3.32517 21.301 3.77543 21.0629 4.56891L20.6287 6.01635C18.7332 3.28781 15.5765 1.49998 11.9998 1.49998C6.20092 1.49998 1.49998 6.20092 1.49998 11.9998C1.49998 17.7987 6.20092 22.4997 11.9998 22.4997C16.5739 22.4997 20.4611 19.5757 21.9018 15.4996C22.1779 14.7186 21.7685 13.8616 20.9874 13.5855C20.2064 13.3095 19.3494 13.7189 19.0733 14.4999C18.0431 17.4149 15.263 19.4997 11.9998 19.4997C7.85775 19.4997 4.49993 16.1419 4.49993 11.9998Z",
    fill: "currentColor"
  }));
}

const IconRefresh_IconComponent = convertIcon(IconRefresh_SvgComponent, 'refresh');
/* harmony default export */ var IconRefresh = (IconRefresh_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconSearch.js




function IconSearch_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M10.5 2C5.80558 2 2 5.80558 2 10.5C2 15.1944 5.80558 19 10.5 19C12.3054 19 13.9794 18.4371 15.356 17.4773L19.4393 21.5606C20.0251 22.1464 20.9749 22.1464 21.5606 21.5606C22.1464 20.9749 22.1464 20.0251 21.5606 19.4393L17.4773 15.356C18.4371 13.9794 19 12.3054 19 10.5C19 5.80558 15.1944 2 10.5 2ZM5 10.5C5 7.46243 7.46243 5 10.5 5C13.5376 5 16 7.46243 16 10.5C16 13.5376 13.5376 16 10.5 16C7.46243 16 5 13.5376 5 10.5Z",
    fill: "currentColor"
  }));
}

const IconSearch_IconComponent = convertIcon(IconSearch_SvgComponent, 'search');
/* harmony default export */ var IconSearch = (IconSearch_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconSidebar.js




function IconSidebar_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M5 2H19C20.6569 2 22 3.34315 22 5V19C22 20.6569 20.6569 22 19 22H5C3.34315 22 2 20.6569 2 19V5C2 3.34315 3.34315 2 5 2ZM6 4C5.44772 4 5 4.44772 5 5V19C5 19.5523 5.44772 20 6 20H9C9.55229 20 10 19.5523 10 19V5C10 4.44772 9.55229 4 9 4H6Z",
    fill: "currentColor"
  }));
}

const IconSidebar_IconComponent = convertIcon(IconSidebar_SvgComponent, 'sidebar');
/* harmony default export */ var IconSidebar = (IconSidebar_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconStar.js




function IconStar_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M10.7525 1.90411C11.1451 0.698628 12.8549 0.698631 13.2475 1.90411L15.2395 8.01946H21.6858C22.9565 8.01946 23.4848 9.64143 22.4568 10.3865L17.2417 14.1659L19.2337 20.2813C19.6263 21.4868 18.2431 22.4892 17.2151 21.7442L12 17.9647L6.78489 21.7442C5.75687 22.4892 4.37368 21.4868 4.76635 20.2813L6.75834 14.1659L1.54323 10.3865C0.515206 9.64142 1.04354 8.01946 2.31425 8.01946H8.76048L10.7525 1.90411Z",
    fill: "currentColor"
  }));
}

const IconStar_IconComponent = convertIcon(IconStar_SvgComponent, 'star');
/* harmony default export */ var IconStar = (IconStar_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconTick.js




function IconTick_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M21.3516 4.2652C22.0336 4.73552 22.2052 5.66964 21.7348 6.35162L11.7348 20.8516C11.4765 21.2262 11.0622 21.4632 10.6084 21.4961C10.1546 21.529 9.71041 21.3541 9.40082 21.0207L2.90082 14.0207C2.33711 13.4136 2.37226 12.4645 2.97933 11.9008C3.5864 11.3371 4.53549 11.3723 5.0992 11.9793L10.3268 17.6091L19.2652 4.64842C19.7355 3.96644 20.6696 3.79487 21.3516 4.2652Z",
    fill: "currentColor"
  }));
}

const IconTick_IconComponent = convertIcon(IconTick_SvgComponent, 'tick');
/* harmony default export */ var IconTick = (IconTick_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconTickCircle.js




function IconTickCircle_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23ZM17.8831 9.82235L11.6854 17.4112C11.4029 17.7806 10.965 17.9981 10.5 18C10.035 18.0019 9.59533 17.788 9.30982 17.421L5.81604 13.4209C5.30744 12.767 5.42524 11.8246 6.07916 11.316C6.73308 10.8074 7.67549 10.9252 8.1841 11.5791L10.4838 14.0439L15.5 8C16.0032 7.34193 16.9446 7.21641 17.6027 7.71964C18.2608 8.22287 18.3863 9.16428 17.8831 9.82235Z",
    fill: "currentColor"
  }));
}

const IconTickCircle_IconComponent = convertIcon(IconTickCircle_SvgComponent, 'tick_circle');
/* harmony default export */ var IconTickCircle = (IconTickCircle_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconTreeTriangleDown.js




function IconTreeTriangleDown_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M20.5598 9.65618L12.7546 18.6322C12.3559 19.0906 11.644 19.0906 11.2453 18.6322L3.4401 9.65618C2.8773 9.00895 3.33701 8 4.19471 8L19.8052 8C20.6629 8 21.1226 9.00895 20.5598 9.65618Z",
    fill: "currentColor"
  }));
}

const IconTreeTriangleDown_IconComponent = convertIcon(IconTreeTriangleDown_SvgComponent, 'tree_triangle_down');
/* harmony default export */ var IconTreeTriangleDown = (IconTreeTriangleDown_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconTreeTriangleRight.js




function IconTreeTriangleRight_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    d: "M9.65618 3.44015L18.6322 11.2454C19.0906 11.644 19.0906 12.356 18.6322 12.7546L9.65618 20.5598C9.00895 21.1226 8 20.6629 8 19.8052V4.19475C8 3.33705 9.00895 2.87734 9.65618 3.44015Z",
    fill: "currentColor"
  }));
}

const IconTreeTriangleRight_IconComponent = convertIcon(IconTreeTriangleRight_SvgComponent, 'tree_triangle_right');
/* harmony default export */ var IconTreeTriangleRight = (IconTreeTriangleRight_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/IconUpload.js




function IconUpload_SvgComponent(props) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("svg", assign_default()({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    focusable: false,
    "aria-hidden": true
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"]("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M17.8395 8.05827C17.1837 5.16226 14.5944 3 11.5 3C7.91015 3 5 5.91015 5 9.5C5 10.0204 5.06115 10.5264 5.17665 11.0114C2.84229 11.1772 1 13.1234 1 15.5C1 17.9853 3.01469 20 5.49995 20H17C20.3137 20 23 17.3137 23 14C23 10.9712 20.7558 8.46659 17.8395 8.05827ZM12.3201 8.26674C12.1347 8.11222 11.8653 8.11222 11.6799 8.26674L6.53047 12.5579C6.35084 12.7076 6.45669 13 6.69051 13H10V17.5C10 17.7761 10.2239 18 10.5 18H13.5C13.7761 18 14 17.7761 14 17.5V13H17.3095C17.5433 13 17.6492 12.7076 17.4695 12.5579L12.3201 8.26674Z",
    fill: "currentColor"
  }));
}

const IconUpload_IconComponent = convertIcon(IconUpload_SvgComponent, 'upload');
/* harmony default export */ var IconUpload = (IconUpload_IconComponent);
// CONCATENATED MODULE: ../semi-icons/lib/es/icons/index.js





















































































































































































































































































































































































































































// CONCATENATED MODULE: ../semi-icons/lib/es/index.js



/* harmony default export */ var lib_es = (components_Icon);
// CONCATENATED MODULE: ../semi-foundation/utils/keyCode.ts
/**
 * @ignore
 * some key-codes definition and utils from closure-library
 */
const keyCode_keyCode = {
  /**
   * MAC_ENTER
   */
  MAC_ENTER: 3,

  /**
   * BACKSPACE
   */
  BACKSPACE: 8,

  /**
   * TAB
   */
  TAB: 9,

  /**
   * NUMLOCK on FF/Safari Mac
   */
  NUM_CENTER: 12,

  /**
   * ENTER
   */
  ENTER: 13,

  /**
   * SHIFT
   */
  SHIFT: 16,

  /**
   * CTRL
   */
  CTRL: 17,

  /**
   * ALT
   */
  ALT: 18,

  /**
   * PAUSE
   */
  PAUSE: 19,

  /**
   * CAPS_LOCK
   */
  CAPS_LOCK: 20,

  /**
   * ESC
   */
  ESC: 27,

  /**
   * SPACE
   */
  SPACE: 32,

  /**
   * PAGE_UP
   */
  PAGE_UP: 33,

  /**
   * PAGE_DOWN
   */
  PAGE_DOWN: 34,

  /**
   * END
   */
  END: 35,

  /**
   * HOME
   */
  HOME: 36,

  /**
   * LEFT
   */
  LEFT: 37,

  /**
   * UP
   */
  UP: 38,

  /**
   * RIGHT
   */
  RIGHT: 39,

  /**
   * DOWN
   */
  DOWN: 40,

  /**
   * PRINT_SCREEN
   */
  PRINT_SCREEN: 44,

  /**
   * INSERT
   */
  INSERT: 45,

  /**
   * DELETE
   */
  DELETE: 46,

  /**
   * ZERO
   */
  ZERO: 48,

  /**
   * ONE
   */
  ONE: 49,

  /**
   * TWO
   */
  TWO: 50,

  /**
   * THREE
   */
  THREE: 51,

  /**
   * FOUR
   */
  FOUR: 52,

  /**
   * FIVE
   */
  FIVE: 53,

  /**
   * SIX
   */
  SIX: 54,

  /**
   * SEVEN
   */
  SEVEN: 55,

  /**
   * EIGHT
   */
  EIGHT: 56,

  /**
   * NINE
   */
  NINE: 57,

  /**
   * QUESTION_MARK
   */
  QUESTION_MARK: 63,

  /**
   * A
   */
  A: 65,

  /**
   * B
   */
  B: 66,

  /**
   * C
   */
  C: 67,

  /**
   * D
   */
  D: 68,

  /**
   * E
   */
  E: 69,

  /**
   * F
   */
  F: 70,

  /**
   * G
   */
  G: 71,

  /**
   * H
   */
  H: 72,

  /**
   * I
   */
  I: 73,

  /**
   * J
   */
  J: 74,

  /**
   * K
   */
  K: 75,

  /**
   * L
   */
  L: 76,

  /**
   * M
   */
  M: 77,

  /**
   * N
   */
  N: 78,

  /**
   * O
   */
  O: 79,

  /**
   * P
   */
  P: 80,

  /**
   * Q
   */
  Q: 81,

  /**
   * R
   */
  R: 82,

  /**
   * S
   */
  S: 83,

  /**
   * T
   */
  T: 84,

  /**
   * U
   */
  U: 85,

  /**
   * V
   */
  V: 86,

  /**
   * W
   */
  W: 87,

  /**
   * X
   */
  X: 88,

  /**
   * Y
   */
  Y: 89,

  /**
   * Z
   */
  Z: 90,

  /**
   * META
   */
  META: 91,

  /**
   * WIN_KEY_RIGHT
   */
  WIN_KEY_RIGHT: 92,

  /**
   * CONTEXT_MENU
   */
  CONTEXT_MENU: 93,

  /**
   * NUM_ZERO
   */
  NUM_ZERO: 96,

  /**
   * NUM_ONE
   */
  NUM_ONE: 97,

  /**
   * NUM_TWO
   */
  NUM_TWO: 98,

  /**
   * NUM_THREE
   */
  NUM_THREE: 99,

  /**
   * NUM_FOUR
   */
  NUM_FOUR: 100,

  /**
   * NUM_FIVE
   */
  NUM_FIVE: 101,

  /**
   * NUM_SIX
   */
  NUM_SIX: 102,

  /**
   * NUM_SEVEN
   */
  NUM_SEVEN: 103,

  /**
   * NUM_EIGHT
   */
  NUM_EIGHT: 104,

  /**
   * NUM_NINE
   */
  NUM_NINE: 105,

  /**
   * NUM_MULTIPLY
   */
  NUM_MULTIPLY: 106,

  /**
   * NUM_PLUS
   */
  NUM_PLUS: 107,

  /**
   * NUM_MINUS
   */
  NUM_MINUS: 109,

  /**
   * NUM_PERIOD
   */
  NUM_PERIOD: 110,

  /**
   * NUM_DIVISION
   */
  NUM_DIVISION: 111,

  /**
   * F1
   */
  F1: 112,

  /**
   * F2
   */
  F2: 113,

  /**
   * F3
   */
  F3: 114,

  /**
   * F4
   */
  F4: 115,

  /**
   * F5
   */
  F5: 116,

  /**
   * F6
   */
  F6: 117,

  /**
   * F7
   */
  F7: 118,

  /**
   * F8
   */
  F8: 119,

  /**
   * F9
   */
  F9: 120,

  /**
   * F10
   */
  F10: 121,

  /**
   * F11
   */
  F11: 122,

  /**
   * F12
   */
  F12: 123,

  /**
   * NUMLOCK
   */
  NUMLOCK: 144,

  /**
   * SEMICOLON
   */
  SEMICOLON: 186,

  /**
   * DASH
   */
  DASH: 189,

  /**
   * EQUALS
   */
  EQUALS: 187,

  /**
   * COMMA
   */
  COMMA: 188,

  /**
   * PERIOD
   */
  PERIOD: 190,

  /**
   * SLASH
   */
  SLASH: 191,

  /**
   * APOSTROPHE
   */
  APOSTROPHE: 192,

  /**
   * SINGLE_QUOTE
   */
  SINGLE_QUOTE: 222,

  /**
   * OPEN_SQUARE_BRACKET
   */
  OPEN_SQUARE_BRACKET: 219,

  /**
   * BACKSLASH
   */
  BACKSLASH: 220,

  /**
   * CLOSE_SQUARE_BRACKET
   */
  CLOSE_SQUARE_BRACKET: 221,

  /**
   * WIN_KEY
   */
  WIN_KEY: 224,

  /**
   * MAC_FF_META
   */
  MAC_FF_META: 224,

  /**
   * WIN_IME
   */
  WIN_IME: 229
};
const ENTER_KEY = 'Enter';
const TAB_KEY = 'Tab';
const ESC_KEY = 'Escape';
/* harmony default export */ var utils_keyCode = (keyCode_keyCode);
// CONCATENATED MODULE: ../semi-foundation/utils/isEnterPress.ts



function isEnterPress(e) {
  return get_default()(e, 'key') === ENTER_KEY ? true : false;
}

/* harmony default export */ var utils_isEnterPress = (isEnterPress);
// CONCATENATED MODULE: ./typography/copyable.tsx












const copyable_prefixCls = constants_cssClasses.PREFIX;
class copyable_Copyable extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
  constructor(props) {
    super(props);

    this.copy = e => {
      const {
        content,
        duration,
        onCopy
      } = this.props;
      const res = copy_text_to_clipboard_default()(content);
      onCopy && onCopy(e, content, res);
      this.setCopied(content, duration);
    };

    this.setCopied = (item, timer) => {
      this.setState({
        copied: true,
        item
      });
      this._timeId = set_timeout_default()(() => {
        this.resetCopied();
      }, timer * 1000);
    };

    this.resetCopied = () => {
      if (this._timeId) {
        clearTimeout(this._timeId);
        this._timeId = null;
        this.setState({
          copied: false,
          item: ''
        });
      }
    };

    this.renderSuccessTip = () => {
      const {
        successTip
      } = this.props;

      if (typeof successTip !== 'undefined') {
        return successTip;
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
        componentName: "Typography"
      }, locale => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconTick, null), locale.copied));
    };

    this.state = {
      copied: false,
      item: ''
    };
  }

  componentWillUnmount() {
    if (this._timeId) {
      clearTimeout(this._timeId);
      this._timeId = null;
    }
  }

  render() {
    const {
      style,
      className,
      forwardRef,
      copyTip
    } = this.props;
    const {
      copied
    } = this.state;
    const finalCls = classnames_default()(className, {
      ["".concat(copyable_prefixCls, "-action-copy")]: !copied,
      ["".concat(copyable_prefixCls, "-action-copied")]: copied
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
      componentName: "Typography"
    }, locale => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      style: assign_default()({
        marginLeft: '4px'
      }, style),
      className: finalCls,
      ref: forwardRef
    }, copied ? this.renderSuccessTip() : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tooltip_Tooltip, {
      content: typeof copyTip !== 'undefined' ? copyTip : locale.copy
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("a", {
      className: "".concat(copyable_prefixCls, "-action-copy-icon")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconCopy, {
      role: "button",
      tabIndex: 0,
      onClick: this.copy,
      onKeyPress: e => utils_isEnterPress(e) && this.copy(e)
    })))));
  }

}
copyable_Copyable.propTypes = {
  content: prop_types_default.a.string,
  onCopy: prop_types_default.a.func,
  successTip: prop_types_default.a.node,
  copyTip: prop_types_default.a.node,
  duration: prop_types_default.a.number,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string
};
copyable_Copyable.defaultProps = {
  content: '',
  onCopy: function_noop,
  duration: 3,
  style: {},
  className: ''
};
/* harmony default export */ var typography_copyable = (copyable_Copyable);
// CONCATENATED MODULE: ../semi-foundation/popover/constants.ts



const popover_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-popover"),
  ARROW: "".concat(BASE_CLASS_PREFIX, "-popover-icon-arrow")
};
const popover_constants_strings = {
  POSITION_SET: ['top', 'topLeft', 'topRight', 'left', 'leftTop', 'leftBottom', 'right', 'rightTop', 'rightBottom', 'bottom', 'bottomLeft', 'bottomRight', 'leftTopOver', 'rightTopOver'],
  TRIGGER_SET: ['hover', 'focus', 'click', 'custom'],
  DEFAULT_ARROW_STYLE: {
    borderOpacity: '1',
    backgroundColor: 'var(--semi-color-bg-3)',
    // borderColor: 'var(--semi-color-shadow)',
    borderColor: 'var(--semi-color-border)'
  }
};
const constants_numbers = {
  ARROW_BOUNDING: assign_default()(assign_default()({}, numbers.ARROW_BOUNDING), {
    offsetY: 6,
    offsetX: 0,
    height: 8
  }),
  SPACING: 4,
  SPACING_WITH_ARROW: 10,
  DEFAULT_Z_INDEX: 1030
};

// CONCATENATED MODULE: ./popover/Arrow.tsx





var Arrow_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};






const Arrow = function () {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  const {
    position = '',
    className,
    arrowStyle,
    popStyle
  } = props,
        rest = Arrow_rest(props, ["position", "className", "arrowStyle", "popStyle"]);

  const isVertical = index_of_default()(position).call(position, 'top') === 0 || index_of_default()(position).call(position, 'bottom') === 0;
  const cls = classnames_default()(className, popover_constants_cssClasses.ARROW);

  const borderOpacity = get_default()(arrowStyle, 'borderOpacity', popover_constants_strings.DEFAULT_ARROW_STYLE.borderOpacity);

  const bgColor = get_default()(arrowStyle, 'backgroundColor', get_default()(popStyle, 'backgroundColor', popover_constants_strings.DEFAULT_ARROW_STYLE.backgroundColor));

  const borderColor = get_default()(arrowStyle, 'borderColor', get_default()(popStyle, 'borderColor', popover_constants_strings.DEFAULT_ARROW_STYLE.borderColor));

  const wrapProps = assign_default()(assign_default()({}, rest), {
    width: constants_numbers.ARROW_BOUNDING.width,
    height: constants_numbers.ARROW_BOUNDING.height,
    xmlns: 'http://www.w3.org/2000/svg',
    className: cls
  });

  return isVertical ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("svg", assign_default()({}, wrapProps), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("path", {
    d: "M0 0.5L0 1.5C4 1.5, 5.5 3, 7.5 5S10,8 12,8S14.5 7, 16.5 5S20,1.5 24,1.5L24 0.5L0 0.5z",
    fill: borderColor,
    opacity: borderOpacity
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("path", {
    d: "M0 0L0 1C4 1, 5.5 2, 7.5 4S10,7 12,7S14.5  6, 16.5 4S20,1 24,1L24 0L0 0z",
    fill: bgColor
  })) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("svg", assign_default()({}, wrapProps), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("path", {
    d: "M0.5 0L1.5 0C1.5 4, 3 5.5, 5 7.5S8,10 8,12S7 14.5, 5 16.5S1.5,20 1.5,24L0.5 24L0.5 0z",
    fill: borderColor,
    opacity: borderOpacity
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("path", {
    d: "M0 0L1 0C1 4, 2 5.5, 4 7.5S7,10 7,12S6 14.5, 4 16.5S1,20 1,24L0 24L0 0z",
    fill: bgColor
  }));
};

Arrow.propTypes = {
  position: prop_types_default.a.string,
  className: prop_types_default.a.string,
  arrowStyle: prop_types_default.a.object,
  popStyle: prop_types_default.a.object
};
/* harmony default export */ var popover_Arrow = (Arrow);
// EXTERNAL MODULE: ../semi-foundation/popover/popover.scss
var popover = __webpack_require__("f8hu");

// CONCATENATED MODULE: ./popover/index.tsx






var popover_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};










const popover_positionSet = popover_constants_strings.POSITION_SET;
const popover_triggerSet = popover_constants_strings.TRIGGER_SET;

class popover_Popover extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
  constructor() {
    super(...arguments);

    this.renderPopCard = _ref => {
      let {
        initialFocusRef
      } = _ref;
      const {
        content,
        contentClassName,
        prefixCls
      } = this.props;
      const {
        direction
      } = this.context;
      const popCardCls = classnames_default()(prefixCls, contentClassName, {
        ["".concat(prefixCls, "-rtl")]: direction === 'rtl'
      });
      const contentNode = this.renderContentNode({
        initialFocusRef,
        content
      });
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: popCardCls
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(prefixCls, "-content")
      }, contentNode));
    };

    this.renderContentNode = props => {
      const {
        initialFocusRef,
        content
      } = props;
      const contentProps = {
        initialFocusRef
      };
      return !isFunction_default()(content) ? content : content(contentProps);
    };
  }

  render() {
    const _a = this.props,
          {
      children,
      prefixCls,
      showArrow,
      arrowStyle = {},
      arrowBounding,
      position,
      style,
      trigger
    } = _a,
          attr = popover_rest(_a, ["children", "prefixCls", "showArrow", "arrowStyle", "arrowBounding", "position", "style", "trigger"]);

    let {
      spacing
    } = this.props;
    const arrowProps = {
      position,
      className: '',
      popStyle: style,
      arrowStyle
    };
    const arrow = showArrow ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(popover_Arrow, assign_default()({}, arrowProps)) : false;

    if (typeof spacing !== 'number') {
      spacing = showArrow ? constants_numbers.SPACING_WITH_ARROW : constants_numbers.SPACING;
    }

    const role = trigger === 'click' || trigger === 'custom' ? 'dialog' : 'tooltip';
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tooltip_Tooltip, assign_default()({
      guardFocus: true
    }, attr, {
      trigger: trigger,
      position: position,
      style: style,
      content: this.renderPopCard,
      prefixCls: prefixCls,
      spacing: spacing,
      showArrow: arrow,
      arrowBounding: arrowBounding,
      role: role
    }), children);
  }

}

popover_Popover.contextType = configProvider_context;
popover_Popover.propTypes = {
  children: prop_types_default.a.node,
  content: prop_types_default.a.oneOfType([prop_types_default.a.node, prop_types_default.a.func]),
  visible: prop_types_default.a.bool,
  autoAdjustOverflow: prop_types_default.a.bool,
  motion: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.object, prop_types_default.a.func]),
  position: prop_types_default.a.oneOf(popover_positionSet),
  // getPopupContainer: PropTypes.func,
  mouseEnterDelay: prop_types_default.a.number,
  mouseLeaveDelay: prop_types_default.a.number,
  trigger: prop_types_default.a.oneOf(popover_triggerSet).isRequired,
  contentClassName: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.array]),
  onVisibleChange: prop_types_default.a.func,
  onClickOutSide: prop_types_default.a.func,
  style: prop_types_default.a.object,
  spacing: prop_types_default.a.number,
  zIndex: prop_types_default.a.number,
  showArrow: prop_types_default.a.bool,
  arrowStyle: prop_types_default.a.shape({
    borderColor: prop_types_default.a.string,
    backgroundColor: prop_types_default.a.string,
    borderOpacity: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number])
  }),
  arrowPointAtCenter: prop_types_default.a.bool,
  arrowBounding: prop_types_default.a.object,
  prefixCls: prop_types_default.a.string,
  guardFocus: prop_types_default.a.bool,
  disableArrowKeyDown: prop_types_default.a.bool
};
popover_Popover.defaultProps = {
  arrowBounding: constants_numbers.ARROW_BOUNDING,
  showArrow: false,
  autoAdjustOverflow: true,
  zIndex: constants_numbers.DEFAULT_Z_INDEX,
  motion: true,
  trigger: 'hover',
  cancelText: 'No',
  okText: 'Yes',
  position: 'bottom',
  prefixCls: popover_constants_cssClasses.PREFIX,
  onClickOutSide: noop_default.a,
  onEscKeyDown: noop_default.a,
  closeOnEsc: true,
  returnFocusOnClose: true,
  guardFocus: true,
  disableFocusListener: true
};
/* harmony default export */ var popover_0 = (popover_Popover);
// CONCATENATED MODULE: ./typography/util.tsx





/**
 * The logic of JS for text truncation is referenced from antd typography
 * https://github.com/ant-design/ant-design/blob/master/components/typography/util.tsx
 *
 * For more thinking and analysis about this function, please refer to Feishu document
 * https://bytedance.feishu.cn/docs/doccnqovjjyoKm2U5O13bj30aTh
 */

let ellipsisContainer;

function pxToNumber(value) {
  if (!value) {
    return 0;
  }

  const match = value.match(/^\d*(\.\d*)?/);
  return match ? Number(match[0]) : 0;
}

function styleToString(style) {
  // There are some different behavior between Firefox & Chrome.
  // We have to handle this ourself.
  const styleNames = slice_default()(Array.prototype).apply(style);

  return map_default()(styleNames).call(styleNames, name => {
    var _context;

    return concat_default()(_context = "".concat(name, ": ")).call(_context, style.getPropertyValue(name), ";");
  }).join('');
}

const getRenderText = function (originEle, rows) {
  let content = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  let fixedContent = arguments.length > 3 ? arguments[3] : undefined;
  let ellipsisStr = arguments.length > 4 ? arguments[4] : undefined;
  let suffix = arguments.length > 5 ? arguments[5] : undefined;
  let ellipsisPos // eslint-disable-next-line max-params
  = arguments.length > 6 ? arguments[6] : undefined;

  if (!ellipsisContainer) {
    ellipsisContainer = document.createElement('div');
    ellipsisContainer.setAttribute('aria-hidden', 'true');
    document.body.appendChild(ellipsisContainer);
  } // Get origin style


  const originStyle = window.getComputedStyle(originEle);
  const originCSS = styleToString(originStyle);
  const lineHeight = pxToNumber(originStyle.lineHeight);
  const maxHeight = Math.round(lineHeight * (rows + 1) + pxToNumber(originStyle.paddingTop) + pxToNumber(originStyle.paddingBottom)); // Set shadow

  ellipsisContainer.setAttribute('style', originCSS);
  ellipsisContainer.style.position = 'fixed';
  ellipsisContainer.style.left = '0';
  ellipsisContainer.style.height = 'auto';
  ellipsisContainer.style.top = '-999999px';
  ellipsisContainer.style.zIndex = '-1000'; // clean up css overflow

  ellipsisContainer.style.textOverflow = 'clip';
  ellipsisContainer.style.webkitLineClamp = 'none'; // Render fake container

  external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default.a.render( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null), ellipsisContainer); // Check if ellipsis in measure div is height enough for content

  function inRange() {
    // console.log('inrange?', ellipsisContainer.scrollHeight, ellipsisContainer.scrollHeight < maxHeight)
    return ellipsisContainer.scrollHeight < maxHeight;
  } // ========================= Find match ellipsis content =========================
  // Create origin content holder


  const ellipsisContentHolder = document.createElement('span');
  const ellipsisTextNode = document.createTextNode(suffix);
  ellipsisContentHolder.appendChild(ellipsisTextNode);
  ellipsisContainer.appendChild(ellipsisContentHolder);

  map_default()(fixedContent).call(fixedContent, node => node && ellipsisContainer.appendChild(node.cloneNode(true))); // Append before fixed nodes


  function appendChildNode(node) {
    ellipsisContentHolder.insertBefore(node, ellipsisTextNode);
  }

  function getCurrentText(text, pos) {
    const end = text.length;

    if (!pos) {
      return ellipsisStr;
    }

    if (ellipsisPos === 'end' || pos > end - pos) {
      return slice_default()(text).call(text, 0, pos) + ellipsisStr;
    }

    return slice_default()(text).call(text, 0, pos) + ellipsisStr + slice_default()(text).call(text, end - pos, end);
  } // Get maximum text


  function measureText(textNode, fullText) {
    let startLoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    let endLoc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : fullText.length;
    let lastSuccessLoc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    const midLoc = Math.floor((startLoc + endLoc) / 2);
    const currentText = getCurrentText(fullText, midLoc);
    textNode.textContent = currentText; // console.log('calculating....', currentText);

    if (startLoc >= endLoc - 1 && endLoc > 0) {
      // Loop when step is small
      for (let step = endLoc; step >= startLoc; step -= 1) {
        const currentStepText = getCurrentText(fullText, step);
        textNode.textContent = currentStepText;

        if (inRange() || !currentStepText) {
          return step === fullText.length ? fullText : currentStepText;
        }
      }
    } else if (endLoc === 0) {
      return ellipsisStr;
    }

    if (inRange()) {
      return measureText(textNode, fullText, midLoc, endLoc, midLoc);
    }

    return measureText(textNode, fullText, startLoc, midLoc, lastSuccessLoc);
  }

  const textNode = document.createTextNode(content);
  appendChildNode(textNode);
  const resText = measureText(textNode, content);
  ellipsisContainer.innerHTML = '';
  return resText;
};

/* harmony default export */ var util = (getRenderText);
// CONCATENATED MODULE: ./typography/base.tsx












var base_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};















const base_prefixCls = constants_cssClasses.PREFIX;
const ELLIPSIS_STR = '...';

const wrapperDecorations = (props, content) => {
  const {
    mark,
    code,
    underline,
    strong,
    link,
    disabled
  } = props;
  let wrapped = content;

  const wrap = (isNeeded, tag) => {
    let wrapProps = {};

    if (!isNeeded) {
      return;
    }

    if (typeof isNeeded === 'object') {
      wrapProps = assign_default()({}, isNeeded);
    }

    wrapped = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tag, wrapProps, wrapped);
  };

  wrap(mark, 'mark');
  wrap(code, 'code');
  wrap(underline && !link, 'u');
  wrap(strong, 'strong');
  wrap(props.delete, 'del');
  wrap(link, disabled ? 'span' : 'a');
  return wrapped;
};

class base_Base extends external_root_React_commonjs2_react_commonjs_react_amd_react_["Component"] {
  constructor(props) {
    super(props);

    this.onResize = () => {
      var _context;

      if (this.rafId) {
        window.cancelAnimationFrame(this.rafId);
      }

      this.rafId = window.requestAnimationFrame(bind_default()(_context = this.getEllipsisState).call(_context, this));
    }; // if need to use js overflowed:
    // 1. text is expandable 2. expandText need to be shown  3. has extra operation 4. text need to ellipse from mid


    this.canUseCSSEllipsis = () => {
      const {
        copyable
      } = this.props;
      const {
        expandable,
        expandText,
        pos,
        suffix
      } = this.getEllipsisOpt();
      return !expandable && isUndefined_default()(expandText) && !copyable && pos === 'end' && !suffix.length;
    };
    /**
     * whether truncated
     *  rows < = 1 if there is overflow content, return true
     *  rows > 1 if there is overflow height, return true
     * @param {Number} rows
     * @returns {Boolean}
     */


    this.shouldTruncated = rows => {
      if (!rows || rows < 1) {
        return false;
      }

      const updateOverflow = rows <= 1 ? this.wrapperRef.current.scrollWidth > this.wrapperRef.current.clientWidth : this.wrapperRef.current.scrollHeight > this.wrapperRef.current.offsetHeight;
      return updateOverflow;
    };

    this.showTooltip = () => {
      const {
        isOverflowed,
        isTruncated,
        expanded
      } = this.state;
      const {
        showTooltip,
        expandable,
        expandText
      } = this.getEllipsisOpt();
      const overflowed = !expanded && (isOverflowed || isTruncated);

      const noExpandText = !expandable && isUndefined_default()(expandText);

      const show = noExpandText && overflowed && showTooltip;

      if (!show) {
        return show;
      }

      const defaultOpts = {
        type: 'tooltip',
        opts: {}
      };

      if (typeof showTooltip === 'object') {
        if (showTooltip.type && showTooltip.type.toLowerCase() === 'popover') {
          return merge_default()({
            opts: {
              style: {
                width: '240px'
              },
              showArrow: true
            }
          }, showTooltip);
        }

        return assign_default()(assign_default()({}, defaultOpts), showTooltip);
      }

      return defaultOpts;
    };
    /**
     * Triggered when the fold button is clicked to save the latest expanded state
     * @param {Event} e
     */


    this.toggleOverflow = e => {
      const {
        onExpand,
        expandable,
        collapsible
      } = this.getEllipsisOpt();
      const {
        expanded
      } = this.state;
      onExpand && onExpand(!expanded, e);

      if (expandable && !expanded || collapsible && expanded) {
        this.setState({
          expanded: !expanded,
          first: false
        });
      }
    };

    this.getEllipsisOpt = () => {
      const {
        ellipsis
      } = this.props;

      if (!ellipsis) {
        return {};
      }

      const opt = assign_default()({
        rows: 1,
        expandable: false,
        pos: 'end',
        suffix: '',
        showTooltip: false,
        collapsible: false,
        expandText: ellipsis.expandable ? this.expandStr : undefined,
        collapseText: ellipsis.collapsible ? this.collapseStr : undefined
      }, typeof ellipsis === 'object' ? ellipsis : null);

      return opt;
    };

    this.renderExpandable = () => {
      const {
        expandText,
        expandable,
        collapseText,
        collapsible
      } = this.getEllipsisOpt();
      const {
        expanded,
        first
      } = this.state;

      const noExpandText = !expandable && isUndefined_default()(expandText);

      const noCollapseText = !collapsible && isUndefined_default()(collapseText);

      let text;

      if (!expanded && !noExpandText) {
        text = expandText;
      } else if (expanded && !first && !noCollapseText) {
        // if expanded is true but the text is initally mounted, we dont show collapseText
        text = collapseText;
      }

      if (!noExpandText || !noCollapseText) {
        return (
          /*#__PURE__*/
          // TODO: replace `a` tag with `span` in next major version
          // NOTE: may have effect on style
          // eslint-disable-next-line jsx-a11y/anchor-is-valid
          external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("a", {
            role: "button",
            tabIndex: 0,
            className: "".concat(base_prefixCls, "-ellipsis-expand"),
            key: "expand",
            ref: this.expandRef,
            "aria-label": text,
            onClick: this.toggleOverflow,
            onKeyPress: e => utils_isEnterPress(e) && this.toggleOverflow(e)
          }, text)
        );
      }

      return null;
    };
    /**
     * 获取文本的缩略class和style
     *
     * 截断类型：
     *  - CSS 截断，仅在 rows=1 且没有 expandable、pos、suffix 时生效
     *  - JS 截断，应对 CSS 无法阶段的场景
     * 相关变量
     *  props:
     *      - ellipsis:
     *          - rows
     *          - expandable
     *          - pos
     *          - suffix
     *  state:
     *      - isOverflowed，文本是否处于overflow状态
     *      - expanded，文本是否处于折叠状态
     *      - isTruncated，文本是否被js截断
     *
     * Get the abbreviated class and style of the text
     *
     * Truncation type:
     *  -CSS truncation, which only takes effect when rows = 1 and there is no expandable, pos, suffix
     *  -JS truncation, dealing with scenarios where CSS cannot stage
     * related variables
     *  props:
     *      -ellipsis:
     *          -rows
     *          -expandable
     *          -pos
     *          -suffix
     *  state:
     *      -isOverflowed, whether the text is in an overflow state
     *      -expanded, whether the text is in a collapsed state
     *      -isTruncated, whether the text is truncated by js
     * @returns {Object}
     */


    this.getEllipsisStyle = () => {
      const {
        ellipsis
      } = this.props;
      const {
        expandable
      } = this.getEllipsisOpt();

      if (!ellipsis) {
        return {
          ellipsisCls: '',
          ellipsisStyle: {} // ellipsisAttr: {}

        };
      }

      const {
        rows
      } = this.getEllipsisOpt();
      const {
        isOverflowed,
        expanded,
        isTruncated
      } = this.state;
      const useCSS = !expanded && this.canUseCSSEllipsis();
      const ellipsisCls = classnames_default()({
        ["".concat(base_prefixCls, "-ellipsis")]: true,
        ["".concat(base_prefixCls, "-ellipsis-single-line")]: rows === 1,
        ["".concat(base_prefixCls, "-ellipsis-multiple-line")]: rows > 1,
        ["".concat(base_prefixCls, "-ellipsis-overflow-ellipsis")]: rows === 1 && useCSS
      });
      const ellipsisStyle = useCSS && rows > 1 ? {
        WebkitLineClamp: rows
      } : {};
      return {
        ellipsisCls,
        ellipsisStyle: isOverflowed ? ellipsisStyle : {}
      };
    };

    this.renderEllipsisText = opt => {
      const {
        suffix
      } = opt;
      const {
        children
      } = this.props;
      const {
        isTruncated,
        expanded,
        isOverflowed,
        ellipsisContent
      } = this.state;

      if (expanded || !isTruncated) {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, children, suffix && suffix.length ? suffix : null);
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, ellipsisContent, suffix);
    };

    this.state = {
      editable: false,
      copied: false,
      // ellipsis
      // if text is overflow in container
      isOverflowed: true,
      ellipsisContent: null,
      expanded: false,
      // if text is truncated with js
      isTruncated: false,
      // record if has click expanded
      first: true,
      prevChildren: null
    };
    this.wrapperRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.expandRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.copyRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
  }

  componentDidMount() {
    if (this.props.ellipsis) {
      this.getEllipsisState();
      window.addEventListener('resize', this.onResize);
    }
  }

  static getDerivedStateFromProps(props, prevState) {
    const {
      prevChildren
    } = prevState;
    const newState = {};
    newState.prevChildren = props.children;

    if (props.ellipsis && prevChildren !== props.children) {
      // reset ellipsis state if children update
      newState.isOverflowed = true;
      newState.ellipsisContent = null;
      newState.expanded = false;
      newState.isTruncated = false;
      newState.first = true;
    }

    return newState;
  }

  componentDidUpdate(prevProps) {
    // Render was based on outdated refs and needs to be rerun
    if (this.props.children !== prevProps.children) {
      this.forceUpdate();

      if (this.props.ellipsis) {
        this.getEllipsisState();
      }
    }
  }

  componentWillUnmount() {
    if (this.props.ellipsis) {
      window.removeEventListener('resize', this.onResize);
    }

    if (this.rafId) {
      window.cancelAnimationFrame(this.rafId);
    }
  }

  getEllipsisState() {
    const {
      rows,
      suffix,
      pos
    } = this.getEllipsisOpt();
    const {
      children
    } = this.props; // wait until element mounted

    if (!this.wrapperRef || !this.wrapperRef.current) {
      this.onResize();
      return false;
    }

    const {
      ellipsisContent,
      isOverflowed,
      isTruncated,
      expanded
    } = this.state;
    const updateOverflow = this.shouldTruncated(rows);
    const canUseCSSEllipsis = this.canUseCSSEllipsis();
    const needUpdate = updateOverflow !== isOverflowed;

    if (!rows || rows < 0 || expanded) {
      return undefined;
    }

    if (canUseCSSEllipsis) {
      if (needUpdate) {
        this.setState({
          expanded: !updateOverflow
        });
      }

      return undefined;
    }

    const extraNode = [this.expandRef.current, this.copyRef && this.copyRef.current];
    Object(warning["a" /* default */])('children' in this.props && typeof children !== 'string', "[Semi Typography] 'Only children with pure text could be used with ellipsis at this moment.");
    const content = util(external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default.a.findDOMNode(this.wrapperRef.current), rows, children, extraNode, ELLIPSIS_STR, suffix, pos);

    if (children === content) {
      this.setState({
        expanded: true
      });
    } else if (ellipsisContent !== content || isOverflowed !== updateOverflow) {
      this.setState({
        ellipsisContent: content,
        isOverflowed: updateOverflow,
        isTruncated: children !== content
      });
    }

    return undefined;
  }

  renderOperations() {
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, this.renderExpandable(), this.renderCopy());
  }

  renderCopy() {
    const {
      copyable,
      children
    } = this.props;

    if (!copyable) {
      return null;
    }

    let copyContent;
    let hasObject = false;

    if (is_array_default()(children)) {
      copyContent = '';

      for_each_default()(children).call(children, value => {
        if (typeof value === 'object') {
          hasObject = true;
        }

        copyContent += String(value);
      });
    } else if (typeof children !== 'object') {
      copyContent = String(children);
    } else {
      hasObject = true;
      copyContent = String(children);
    }

    Object(warning["a" /* default */])(hasObject, 'Children in Typography is a object, it will case a [object Object] mistake when copy to clipboard.');

    const copyConfig = assign_default()({
      content: copyContent,
      duration: 3
    }, typeof copyable === 'object' ? copyable : null);

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(typography_copyable, assign_default()({}, copyConfig, {
      forwardRef: this.copyRef
    }));
  }

  renderIcon() {
    const {
      icon,
      size
    } = this.props;

    if (!icon) {
      return null;
    }

    const iconSize = size === 'small' ? 'small' : 'default';
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(base_prefixCls, "-icon"),
      "x-semi-prop": "icon"
    }, Object(_utils["e" /* isSemiIcon */])(icon) ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(icon, {
      size: iconSize
    }) : icon);
  }

  renderContent() {
    var _context2, _context3, _context4, _context5;

    const _a = this.props,
          {
      component,
      children,
      className,
      type,
      spacing,
      disabled,
      style,
      ellipsis,
      icon,
      size,
      link,
      heading
    } = _a,
          rest = base_rest(_a, ["component", "children", "className", "type", "spacing", "disabled", "style", "ellipsis", "icon", "size", "link", "heading"]);

    const textProps = omit_default()(rest, ['strong', 'editable', 'mark', 'copyable', 'underline', 'code', // 'link',
    'delete']);

    const iconNode = this.renderIcon();
    const ellipsisOpt = this.getEllipsisOpt();
    const {
      ellipsisCls,
      ellipsisStyle
    } = this.getEllipsisStyle();
    let textNode = ellipsis ? this.renderEllipsisText(ellipsisOpt) : children;
    const linkCls = classnames_default()({
      ["".concat(base_prefixCls, "-link-text")]: link,
      ["".concat(base_prefixCls, "-link-underline")]: this.props.underline && link
    });
    textNode = wrapperDecorations(this.props, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, iconNode, this.props.link ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: linkCls
    }, textNode) : textNode));
    const hTagReg = /^h[1-6]$/;
    const wrapperCls = classnames_default()(className, ellipsisCls, {
      // [`${prefixCls}-primary`]: !type || type === 'primary',
      [concat_default()(_context2 = "".concat(base_prefixCls, "-")).call(_context2, type)]: type && !link,
      [concat_default()(_context3 = "".concat(base_prefixCls, "-")).call(_context3, size)]: size,
      ["".concat(base_prefixCls, "-link")]: link,
      ["".concat(base_prefixCls, "-disabled")]: disabled,
      [concat_default()(_context4 = "".concat(base_prefixCls, "-")).call(_context4, spacing)]: spacing,
      [concat_default()(_context5 = "".concat(base_prefixCls, "-")).call(_context5, heading)]: isString_default()(heading) && hTagReg.test(heading)
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(typography_typography, assign_default()({
      className: wrapperCls,
      style: assign_default()(assign_default()({}, style), ellipsisStyle),
      component: component,
      forwardRef: this.wrapperRef
    }, textProps), textNode, this.renderOperations());
  }

  renderTipWrapper() {
    const {
      children
    } = this.props;
    const showTooltip = this.showTooltip();
    const content = this.renderContent();

    if (showTooltip) {
      const {
        type,
        opts
      } = showTooltip;

      if (type.toLowerCase() === 'popover') {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(popover_0, assign_default()({
          content: children,
          position: "top"
        }, opts), content);
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tooltip_Tooltip, assign_default()({
        content: children,
        position: "top"
      }, opts), content);
    } else {
      return content;
    }
  }

  render() {
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
      componentName: "Typography"
    }, locale => {
      this.expandStr = locale.expand;
      this.collapseStr = locale.collapse;
      return this.renderTipWrapper();
    });
  }

}
base_Base.propTypes = {
  children: prop_types_default.a.node,
  copyable: prop_types_default.a.oneOfType([prop_types_default.a.shape({
    text: prop_types_default.a.string,
    onCopy: prop_types_default.a.func,
    successTip: prop_types_default.a.node,
    copyTip: prop_types_default.a.node
  }), prop_types_default.a.bool]),
  delete: prop_types_default.a.bool,
  disabled: prop_types_default.a.bool,
  // editable: PropTypes.bool,
  ellipsis: prop_types_default.a.oneOfType([prop_types_default.a.shape({
    rows: prop_types_default.a.number,
    expandable: prop_types_default.a.bool,
    expandText: prop_types_default.a.string,
    onExpand: prop_types_default.a.func,
    suffix: prop_types_default.a.string,
    showTooltip: prop_types_default.a.oneOfType([prop_types_default.a.shape({
      type: prop_types_default.a.string,
      opts: prop_types_default.a.object
    }), prop_types_default.a.bool]),
    collapsible: prop_types_default.a.bool,
    collapseText: prop_types_default.a.string,
    pos: prop_types_default.a.oneOf(['end', 'middle'])
  }), prop_types_default.a.bool]),
  mark: prop_types_default.a.bool,
  underline: prop_types_default.a.bool,
  link: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.bool]),
  spacing: prop_types_default.a.oneOf(constants_strings.SPACING),
  strong: prop_types_default.a.bool,
  size: prop_types_default.a.oneOf(constants_strings.SIZE),
  type: prop_types_default.a.oneOf(constants_strings.TYPE),
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  icon: prop_types_default.a.oneOfType([prop_types_default.a.node, prop_types_default.a.string]),
  heading: prop_types_default.a.string,
  component: prop_types_default.a.string
};
base_Base.defaultProps = {
  children: null,
  copyable: false,
  delete: false,
  disabled: false,
  // editable: false,
  ellipsis: false,
  icon: '',
  mark: false,
  underline: false,
  strong: false,
  link: false,
  type: 'primary',
  spacing: 'normal',
  size: 'normal',
  style: {},
  className: ''
};
// CONCATENATED MODULE: ./typography/text.tsx





class text_Text extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(base_Base, assign_default()({
      component: 'span'
    }, this.props));
  }

}
text_Text.propTypes = {
  copyable: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.bool]),
  delete: prop_types_default.a.bool,
  disabled: prop_types_default.a.bool,
  icon: prop_types_default.a.oneOfType([prop_types_default.a.node, prop_types_default.a.string]),
  ellipsis: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.bool]),
  mark: prop_types_default.a.bool,
  underline: prop_types_default.a.bool,
  link: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.bool]),
  strong: prop_types_default.a.bool,
  type: prop_types_default.a.oneOf(constants_strings.TYPE),
  size: prop_types_default.a.oneOf(constants_strings.SIZE),
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  code: prop_types_default.a.bool,
  component: prop_types_default.a.string
};
text_Text.defaultProps = {
  copyable: false,
  delete: false,
  disabled: false,
  icon: '',
  // editable: false,
  ellipsis: false,
  mark: false,
  underline: false,
  strong: false,
  link: false,
  type: 'primary',
  style: {},
  size: 'normal',
  className: ''
};
// CONCATENATED MODULE: ./typography/title.tsx




var title_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};





class title_Title extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    var _context;

    const _a = this.props,
          {
      heading
    } = _a,
          rest = title_rest(_a, ["heading"]);

    const component = index_of_default()(_context = constants_strings.HEADING).call(_context, heading) !== -1 ? "h".concat(heading) : 'h1'; // Passing headings to support custom components

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(base_Base, assign_default()({
      component: component,
      heading: component
    }, rest));
  }

}
title_Title.propTypes = {
  copyable: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.bool]),
  delete: prop_types_default.a.bool,
  disabled: prop_types_default.a.bool,
  // editable: PropTypes.bool,
  ellipsis: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.bool]),
  mark: prop_types_default.a.bool,
  link: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.bool]),
  underline: prop_types_default.a.bool,
  strong: prop_types_default.a.bool,
  type: prop_types_default.a.oneOf(constants_strings.TYPE),
  heading: prop_types_default.a.oneOf(constants_strings.HEADING),
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  component: prop_types_default.a.string
};
title_Title.defaultProps = {
  copyable: false,
  delete: false,
  disabled: false,
  // editable: false,
  ellipsis: false,
  mark: false,
  underline: false,
  strong: false,
  link: false,
  type: 'primary',
  heading: 1,
  style: {},
  className: ''
};
// CONCATENATED MODULE: ./typography/paragraph.tsx






const paragraph_prefixCls = constants_cssClasses.PREFIX;
class paragraph_Paragraph extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    const {
      className
    } = this.props;
    const paragraphCls = classnames_default()(className, "".concat(paragraph_prefixCls, "-paragraph"));
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(base_Base, assign_default()({
      component: 'p'
    }, this.props, {
      className: paragraphCls
    }));
  }

}
paragraph_Paragraph.propTypes = {
  copyable: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.bool]),
  delete: prop_types_default.a.bool,
  disabled: prop_types_default.a.bool,
  // editable: PropTypes.bool,
  ellipsis: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.bool]),
  mark: prop_types_default.a.bool,
  link: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.bool]),
  underline: prop_types_default.a.bool,
  strong: prop_types_default.a.bool,
  type: prop_types_default.a.oneOf(constants_strings.TYPE),
  size: prop_types_default.a.oneOf(constants_strings.SIZE),
  spacing: prop_types_default.a.oneOf(constants_strings.SPACING),
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  component: prop_types_default.a.string
};
paragraph_Paragraph.defaultProps = {
  copyable: false,
  delete: false,
  disabled: false,
  // editable: false,
  ellipsis: false,
  mark: false,
  underline: false,
  strong: false,
  link: false,
  type: 'primary',
  size: 'normal',
  spacing: 'normal',
  style: {},
  className: ''
};
// CONCATENATED MODULE: ./typography/index.tsx




const typography_Typography_0 = typography_typography;
typography_Typography_0.Text = text_Text;
typography_Typography_0.Title = title_Title;
typography_Typography_0.Paragraph = paragraph_Paragraph;






/* harmony default export */ var typography_0 = (typography_Typography_0);
// CONCATENATED MODULE: ./anchor/link.tsx










const link_prefixCls = cssClasses.PREFIX; // eslint-disable-next-line @typescript-eslint/ban-types

class link_Link extends baseComponent_BaseComponent {
  constructor(props) {
    var _context;

    super(props);

    this.renderTitle = () => {
      const {
        href,
        title,
        disabled = false
      } = this.props;
      const {
        activeLink,
        showTooltip,
        position,
        size
      } = this.context;
      const active = activeLink === href;
      const linkTitleCls = classnames_default()("".concat(link_prefixCls, "-link-tooltip"), {
        ["".concat(link_prefixCls, "-link-tooltip-small")]: size === 'small',
        ["".concat(link_prefixCls, "-link-tooltip-active")]: active,
        ["".concat(link_prefixCls, "-link-tooltip-disabled")]: disabled
      });
      const toolTipOpt = position ? {
        position
      } : {};

      if (showTooltip) {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(typography_0.Text, {
          size: size === 'default' ? 'normal' : 'small',
          ellipsis: {
            showTooltip: {
              opts: assign_default()({}, toolTipOpt)
            }
          },
          type: 'tertiary',
          className: linkTitleCls
        }, title);
      } else {
        return title;
      }
    };

    this.renderChildren = () => {
      const {
        activeLink,
        childMap
      } = this.context;
      const {
        href,
        children
      } = this.props;

      if (!this.context.autoCollapse) {
        return this.props.children;
      }

      return activeLink === href || childMap[href] && childMap[href].has(activeLink) ? children : null;
    };

    this.foundation = new linkFoundation_LinkFoundation(this.adapter);
    this.handleClick = bind_default()(_context = this.handleClick).call(_context, this);
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      addLink: href => {
        this.context.addLink(href);
      },
      removeLink: href => {
        this.context.removeLink(href);
      }
    });
  }

  handleAddLink() {
    this.foundation.handleAddLink();
  }

  handleRemoveLink() {
    this.foundation.handleRemoveLink();
  }

  handleUpdateLink(href, prevHref) {
    this.foundation.handleUpdateLink(href, prevHref);
  }

  handleClick(e) {
    const {
      disabled,
      href
    } = this.props;
    const {
      onClick
    } = this.context;
    !disabled && onClick(e, href);
  }

  componentDidMount() {
    this.handleAddLink();
  }

  componentDidUpdate(prevProps) {
    const prevHref = prevProps.href;
    const {
      href
    } = this.props;
    this.handleUpdateLink(href, prevHref);
  }

  componentWillUnmount() {
    this.handleRemoveLink();
  }

  render() {
    const {
      href,
      className,
      style,
      disabled = false,
      title
    } = this.props;
    const {
      activeLink,
      showTooltip
    } = this.context;
    const active = activeLink === href;
    const linkCls = classnames_default()("".concat(link_prefixCls, "-link"), className);
    const linkTitleCls = classnames_default()("".concat(link_prefixCls, "-link-title"), {
      ["".concat(link_prefixCls, "-link-title-active")]: active,
      ["".concat(link_prefixCls, "-link-title-disabled")]: disabled
    });
    const ariaProps = {
      'aria-disabled': disabled,
      'aria-label': href
    };

    if (active) {
      ariaProps['aria-details'] = 'active';
    }

    if (!showTooltip && typeof title === 'string') {
      ariaProps['title'] = title;
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: linkCls,
      style: style
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
      role: "link",
      tabIndex: 0
    }, ariaProps, {
      className: linkTitleCls,
      onClick: e => this.handleClick(e),
      onKeyPress: e => this.handleClick(e)
    }), this.renderTitle()), this.renderChildren());
  }

}
link_Link.propTypes = {
  href: prop_types_default.a.string,
  title: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node]),
  className: prop_types_default.a.string,
  style: prop_types_default.a.object
};
link_Link.defaultProps = {
  href: '#',
  title: '',
  className: ''
};
link_Link.contextType = anchor_context;
// EXTERNAL MODULE: ../semi-foundation/anchor/anchor.scss
var anchor_anchor = __webpack_require__("5YqL");

// CONCATENATED MODULE: ./anchor/index.tsx



















const anchor_prefixCls = cssClasses.PREFIX;


class anchor_Anchor extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.addLink = link => {
      this.foundation.addLink(link);
    };

    this.removeLink = link => {
      this.foundation.removeLink(link);
    };

    this.handleScroll = () => {
      this.foundation.handleScroll();
    };

    this.handleClick = (e, link) => {
      this.foundation.handleClick(e, link);
    }; // Set click to false after scrolling


    this.handleClickLink = () => {
      this.foundation.handleClickLink();
    };

    this.setChildMap = () => {
      this.foundation.setChildMap();
    };

    this.setScrollHeight = () => {
      this.foundation.setScrollHeight();
    };

    this.updateScrollHeight = (prevState, state) => {
      this.foundation.updateScrollHeight(prevState, state);
    };

    this.updateChildMap = (prevState, state) => {
      this.foundation.updateChildMap(prevState, state);
    };

    this.state = {
      activeLink: '',
      links: [],
      clickLink: false,
      scrollHeight: '100%',
      slideBarTop: '0'
    };
    this.foundation = new foundation_AnchorFoundation(this.adapter);
    this.childMap = {};
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      addLink: value => {
        this.setState(prevState => ({
          links: [...prevState.links, value]
        }));
      },
      removeLink: link => {
        this.setState(prevState => {
          var _context;

          const links = slice_default()(_context = prevState.links).call(_context);

          const index = index_of_default()(links).call(links, link);

          if (index !== -1) {
            splice_default()(links).call(links, index, 1);

            return {
              links
            };
          }

          return undefined;
        });
      },
      setChildMap: value => {
        this.childMap = value;
      },
      setScrollHeight: height => {
        this.setState({
          scrollHeight: height
        });
      },
      setSlideBarTop: height => {
        this.setState({
          slideBarTop: "".concat(height, "px")
        });
      },
      setClickLink: value => {
        this.setState({
          clickLink: value
        });
      },
      setActiveLink: (link, cb) => {
        this.setState({
          activeLink: link
        }, () => {
          cb();
        });
      },
      setClickLinkWithCallBack: (value, link, cb) => {
        this.setState({
          clickLink: value
        }, () => {
          cb(link);
        });
      },
      getContainer: () => {
        const {
          getContainer
        } = this.props;
        const container = getContainer();
        return container ? container : window;
      },
      getContainerBoundingTop: () => {
        const container = this.adapter.getContainer();

        if ('getBoundingClientRect' in container) {
          return container.getBoundingClientRect().top;
        }

        return 0;
      },
      getLinksBoundingTop: () => {
        const {
          links
        } = this.state;
        const {
          offsetTop
        } = this.props;
        const containerTop = this.adapter.getContainerBoundingTop();

        const elTop = map_default()(links).call(links, link => {
          let node = null;

          try {
            // Get links from containers
            node = document.querySelector(link);
          } catch (e) {}

          return node && node.getBoundingClientRect().top - containerTop - offsetTop || -Infinity;
        });

        return elTop;
      },
      getAnchorNode: selector => {
        var _context2;

        const selectors = concat_default()(_context2 = "#".concat(this.anchorID, " ")).call(_context2, selector);

        return document.querySelector(selectors);
      },
      getContentNode: selector => document.querySelector(selector),
      notifyChange: (currentLink, previousLink) => this.props.onChange(currentLink, previousLink),
      notifyClick: (e, link) => this.props.onClick(e, link),
      canSmoothScroll: () => 'scrollBehavior' in document.body.style
    });
  }

  componentDidMount() {
    const {
      defaultAnchor = ''
    } = this.props;
    this.anchorID = getUuid('semi-anchor').replace('.', '');
    this.scrollContainer = this.adapter.getContainer();
    this.handler = throttle_default()(this.handleScroll, 100);
    this.clickHandler = debounce_default()(this.handleClickLink, 100);
    this.scrollContainer.addEventListener('scroll', this.handler);
    this.scrollContainer.addEventListener('scroll', this.clickHandler);
    this.setScrollHeight();
    this.setChildMap();
    Boolean(defaultAnchor) && this.foundation.handleClick(null, defaultAnchor, false);
  }

  componentDidUpdate(prevProps, prevState) {
    this.updateScrollHeight(prevState, this.state);
    this.updateChildMap(prevState, this.state);
  }

  componentWillUnmount() {
    this.scrollContainer.removeEventListener('scroll', this.handler);
    this.scrollContainer.removeEventListener('scroll', this.clickHandler);
  }

  render() {
    var _context3, _context4, _context5, _context6;

    const {
      size,
      railTheme,
      style,
      className,
      children,
      maxWidth,
      maxHeight,
      showTooltip,
      position,
      autoCollapse
    } = this.props;
    const ariaLabel = this.props['aria-label'];
    const {
      activeLink,
      scrollHeight,
      slideBarTop
    } = this.state;
    const wrapperCls = classnames_default()(anchor_prefixCls, className, {
      [concat_default()(_context3 = "".concat(anchor_prefixCls, "-size-")).call(_context3, size)]: size
    });
    const slideCls = classnames_default()("".concat(anchor_prefixCls, "-slide"), concat_default()(_context4 = "".concat(anchor_prefixCls, "-slide-")).call(_context4, railTheme));
    const slideBarCls = classnames_default()("".concat(anchor_prefixCls, "-slide-bar"), {
      [concat_default()(_context5 = "".concat(anchor_prefixCls, "-slide-bar-")).call(_context5, size)]: size,
      [concat_default()(_context6 = "".concat(anchor_prefixCls, "-slide-bar-")).call(_context6, railTheme)]: railTheme,
      ["".concat(anchor_prefixCls, "-slide-bar-active")]: activeLink
    });
    const anchorWrapper = "".concat(anchor_prefixCls, "-link-wrapper");

    const wrapperStyle = assign_default()(assign_default()({}, style), {
      maxWidth,
      maxHeight
    });

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(anchor_context.Provider, {
      value: {
        activeLink,
        showTooltip,
        position,
        childMap: this.childMap,
        autoCollapse,
        size,
        onClick: (e, link) => this.handleClick(e, link),
        addLink: this.addLink,
        removeLink: this.removeLink
      }
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "navigation",
      "aria-label": ariaLabel || 'Side navigation',
      className: wrapperCls,
      style: wrapperStyle,
      id: this.anchorID
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      "aria-hidden": true,
      className: slideCls,
      style: {
        height: scrollHeight
      }
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: slideBarCls,
      style: {
        top: slideBarTop
      }
    })), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: anchorWrapper
    }, children)));
  }

}

anchor_Anchor.Link = link_Link;
anchor_Anchor.PropTypes = {
  size: prop_types_default.a.oneOf(strings.SIZE),
  railTheme: prop_types_default.a.oneOf(strings.SLIDE_COLOR),
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  scrollMotion: prop_types_default.a.bool,
  autoCollapse: prop_types_default.a.bool,
  offsetTop: prop_types_default.a.number,
  targetOffset: prop_types_default.a.number,
  showTooltip: prop_types_default.a.bool,
  position: prop_types_default.a.oneOf(strings.POSITION_SET),
  maxWidth: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  maxHeight: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  getContainer: prop_types_default.a.func,
  onChange: prop_types_default.a.func,
  onClick: prop_types_default.a.func,
  defaultAnchor: prop_types_default.a.string,
  'aria-label': prop_types_default.a.string
};
anchor_Anchor.defaultProps = {
  size: 'default',
  railTheme: 'primary',
  className: '',
  scrollMotion: false,
  autoCollapse: false,
  offsetTop: 0,
  targetOffset: 0,
  showTooltip: false,
  maxWidth: strings.MAX_WIDTH,
  maxHeight: strings.MAX_HEIGHT,
  getContainer: noop_default.a,
  onChange: noop_default.a,
  onClick: noop_default.a,
  defaultAnchor: ''
};
/* harmony default export */ var anchor_0 = (anchor_Anchor);
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/isEqual.js
var isEqual = __webpack_require__("nnRT");
var isEqual_default = /*#__PURE__*/__webpack_require__.n(isEqual);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/array/from.js
var array_from = __webpack_require__("Dc5z");
var from_default = /*#__PURE__*/__webpack_require__.n(array_from);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/values.js
var instance_values = __webpack_require__("nNpY");
var instance_values_default = /*#__PURE__*/__webpack_require__.n(instance_values);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/filter.js
var instance_filter = __webpack_require__("Dl6t");
var filter_default = /*#__PURE__*/__webpack_require__.n(instance_filter);

// CONCATENATED MODULE: ../semi-foundation/base/constants.ts

const VALIDATE_STATUS = ['default', 'error', 'warning', 'success']; // const VALIDATE_STATUS = ['default', 'error', 'warning', 'success', 'validating'] as const;


// CONCATENATED MODULE: ../semi-foundation/autoComplete/constants.ts


const autoComplete_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-autocomplete")
};
const autoComplete_constants_strings = {
  SIZE: ['small', 'large', 'default'],
  POSITION: tooltip_constants_strings.POSITION_SET,
  OPTIONS: ['children', 'value'],
  STATUS: VALIDATE_STATUS
};

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/isNumber.js
var isNumber = __webpack_require__("mGvo");
var isNumber_default = /*#__PURE__*/__webpack_require__.n(isNumber);

// CONCATENATED MODULE: ../semi-foundation/autoComplete/foundation.ts












/* eslint-disable prefer-const, max-len */




class foundation_AutoCompleteFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
    this.isPanelOpen = false;
  }

  init() {
    this._setDropdownWidth();

    const {
      defaultOpen,
      data,
      defaultValue,
      value
    } = this.getProps();

    if (data && data.length) {
      const initOptions = this._generateList(data);

      this._adapter.updateOptionList(initOptions);
    }

    if (defaultOpen) {
      this.openDropdown();
    } // When both defaultValue and value exist, finally the value of value will be taken as initValue


    let initValue;

    if (typeof defaultValue !== 'undefined') {
      initValue = defaultValue;
    }

    if (typeof value !== 'undefined') {
      initValue = value;
    }

    if (typeof initValue !== 'undefined') {
      this.handleValueChange(initValue);
    }
  }

  destroy() {// this._adapter.unregisterClickOutsideHandler();
    // this.unBindKeyBoardEvent();
  }

  _setDropdownWidth() {
    const {
      style,
      dropdownMatchSelectWidth
    } = this.getProps();
    let width;

    if (dropdownMatchSelectWidth) {
      var _context;

      if (style && isNumber_default()(style.width)) {
        width = style.width;
      } else if (style && isString_default()(style.width) && !includes_default()(_context = style.width).call(_context, '%')) {
        width = style.width;
      } else {
        width = this._adapter.getTriggerWidth();
      }

      this._adapter.setOptionWrapperWidth(width);
    }
  }

  handleInputClick(e) {
    const {
      options
    } = this.getStates();
    const {
      disabled
    } = this.getProps();

    if (!disabled) {
      if (this.isPanelOpen) {
        this.closeDropdown();
      } else {
        this.openDropdown();
      }
    }
  }

  openDropdown() {
    this.isPanelOpen = true;

    this._adapter.toggleListVisible(true);

    this._setDropdownWidth(); // this._adapter.registerClickOutsideHandler(e => this.closeDropdown(e));


    this._adapter.notifyDropdownVisibleChange(true);

    this._modifyFocusIndexOnPanelOpen();
  }

  closeDropdown(e) {
    this.isPanelOpen = false;

    this._adapter.toggleListVisible(false); // this._adapter.unregisterClickOutsideHandler();


    this._adapter.notifyDropdownVisibleChange(false); // After closing the panel, you can still open the panel by pressing the enter key
    // this.unBindKeyBoardEvent();

  } // props.data => optionList


  _generateList(data) {
    const {
      renderItem
    } = this.getProps();
    const options = [];

    if (data && data.length) {
      for_each_default()(data).call(data, (item, i) => {
        const key = String(new Date().getTime()) + i;
        let option = {};

        if (isString_default()(item) || isNumber_default()(item)) {
          option = {
            value: item,
            key,
            label: item,
            show: true
          };
        } else if (isObject_default()(item) && !isUndefined_default()(item.value)) {
          option = assign_default()({
            show: true
          }, item);
        }

        if (renderItem && typeof renderItem === 'function') {
          option.label = renderItem(item);
        }

        options.push(option);
      });
    }

    return options;
  }

  handleSearch(inputValue) {
    this._adapter.updateInputValue(inputValue);

    this._adapter.notifySearch(inputValue);

    this._adapter.notifyChange(inputValue);

    this._modifyFocusIndex(inputValue);
  }

  handleSelect(option, optionIndex) {
    const {
      renderSelectedItem
    } = this.getProps();
    let newInputValue = '';

    if (renderSelectedItem && typeof renderSelectedItem === 'function') {
      newInputValue = renderSelectedItem(option);
      Object(warning["a" /* default */])(typeof newInputValue !== 'string', 'Warning: [Semi AutoComplete] renderSelectedItem must return string, please check your function return');
    } else {
      newInputValue = option.value;
    } // 1. trigger onSelect
    // 2. close Dropdown


    if (this._isControlledComponent()) {
      this.closeDropdown();
      this.notifySelect(option);
    } else {
      // 1. update Input
      // 2. update Selection
      // 3. trigger onSelect
      // 4. close Dropdown
      this._adapter.updateInputValue(newInputValue);

      this.updateSelection(option);
      this.notifySelect(option);
      this.closeDropdown();
    }

    this._adapter.notifyChange(newInputValue);

    this._adapter.updateFocusIndex(optionIndex);
  }

  updateSelection(option) {
    const selection = new core_js_stable_map_default.a();

    if (option) {
      selection.set(option.label, option);
    }

    this._adapter.updateSelection(selection);
  }

  notifySelect(option) {
    if (this._backwardLabelInValue()) {
      this._adapter.notifySelect(option);
    } else {
      this._adapter.notifySelect(option.value);
    }
  }

  _backwardLabelInValue() {
    const props = this.getProps();
    let {
      onSelectWithObject
    } = props;
    return onSelectWithObject;
  }

  handleDataChange(newData) {
    const options = this._generateList(newData);

    this._adapter.updateOptionList(options);

    this._adapter.rePositionDropdown();
  }

  handleValueChange(propValue) {
    let {
      data,
      defaultActiveFirstOption
    } = this.getProps();
    let selectedValue = '';

    if (this._backwardLabelInValue() && Object.prototype.toString.call(propValue) === '[object Object]') {
      selectedValue = propValue.value;
    } else {
      selectedValue = propValue;
    }

    let renderSelectedItem = this._getRenderSelectedItem();

    const options = this._generateList(data); // Get the option whose value match from options


    let selectedOption = filter_default()(options).call(options, option => renderSelectedItem(option) === selectedValue);

    const canMatchInData = selectedOption.length;

    const selectedOptionIndex = find_index_default()(options).call(options, option => renderSelectedItem(option) === selectedValue);

    let inputValue = '';

    if (canMatchInData) {
      selectedOption = selectedOption[0];
      inputValue = renderSelectedItem(selectedOption);
    } else {
      const cbItem = this._backwardLabelInValue() ? propValue : {
        label: selectedValue,
        value: selectedValue
      };
      inputValue = renderSelectedItem(cbItem);
    }

    this._adapter.updateInputValue(inputValue);

    this.updateSelection(canMatchInData ? selectedOption : null);

    if (selectedOptionIndex === -1 && defaultActiveFirstOption) {
      this._adapter.updateFocusIndex(0);
    } else {
      this._adapter.updateFocusIndex(selectedOptionIndex);
    }
  }

  _modifyFocusIndex(searchValue) {
    let {
      focusIndex
    } = this.getStates();
    let {
      data,
      defaultActiveFirstOption
    } = this.getProps();

    let renderSelectedItem = this._getRenderSelectedItem();

    const options = this._generateList(data);

    const selectedOptionIndex = find_index_default()(options).call(options, option => renderSelectedItem(option) === searchValue);

    if (selectedOptionIndex === -1 && defaultActiveFirstOption) {
      if (focusIndex !== 0) {
        this._adapter.updateFocusIndex(0);
      }
    } else {
      if (selectedOptionIndex !== focusIndex) {
        this._adapter.updateFocusIndex(selectedOptionIndex);
      }
    }
  }

  _modifyFocusIndexOnPanelOpen() {
    let {
      inputValue
    } = this.getStates();

    this._modifyFocusIndex(inputValue);
  }

  _getRenderSelectedItem() {
    let {
      renderSelectedItem
    } = this.getProps();

    if (typeof renderSelectedItem === 'undefined') {
      renderSelectedItem = option => option.value;
    } else if (renderSelectedItem && typeof renderSelectedItem === 'function') {// do nothing
    }

    return renderSelectedItem;
  }

  handleClear() {
    this._adapter.notifyClear();
  }

  bindKeyBoardEvent() {
    this._keydownHandler = event => {
      this._handleKeyDown(event);
    };

    this._adapter.registerKeyDown(this._keydownHandler);
  } // unBindKeyBoardEvent() {
  //     if (this._keydownHandler) {
  //         this._adapter.unregisterKeyDown(this._keydownHandler);
  //     }
  // }


  _handleKeyDown(event) {
    const key = event.keyCode;
    const {
      visible
    } = this.getStates();

    switch (key) {
      case utils_keyCode.UP:
        // Prevent Input's cursor from following the movement
        event.preventDefault();

        this._handleArrowKeyDown(-1);

        break;

      case utils_keyCode.DOWN:
        // Prevent Input's cursor from following the movement
        event.preventDefault();

        this._handleArrowKeyDown(1);

        break;

      case utils_keyCode.ENTER:
        // when custom trigger, prevent outer open panel again
        event.preventDefault();

        this._handleEnterKeyDown();

        break;

      case utils_keyCode.ESC:
        this.closeDropdown();
        break;

      default:
        break;
    }
  }

  _getEnableFocusIndex(offset) {
    const {
      focusIndex,
      options
    } = this.getStates();

    const visibleOptions = filter_default()(options).call(options, item => item.show);

    const optionsLength = visibleOptions.length;
    let index = focusIndex + offset;

    if (index < 0) {
      index = optionsLength - 1;
    }

    if (index >= optionsLength) {
      index = 0;
    } // avoid newIndex option is disabled


    if (offset > 0) {
      let nearestActiveOption = -1;

      for (let i = 0; i < visibleOptions.length; i++) {
        const optionIsActive = !visibleOptions[i].disabled;

        if (optionIsActive) {
          nearestActiveOption = i;
        }

        if (nearestActiveOption >= index) {
          break;
        }
      }

      index = nearestActiveOption;
    } else {
      let nearestActiveOption = visibleOptions.length;

      for (let i = optionsLength - 1; i >= 0; i--) {
        const optionIsActive = !visibleOptions[i].disabled;

        if (optionIsActive) {
          nearestActiveOption = i;
        }

        if (nearestActiveOption <= index) {
          break;
        }
      }

      index = nearestActiveOption;
    }

    this._adapter.updateFocusIndex(index);
  }

  _handleArrowKeyDown(offset) {
    const {
      visible
    } = this.getStates();

    if (!visible) {
      this.openDropdown();
    } else {
      this._getEnableFocusIndex(offset);
    }
  }

  _handleEnterKeyDown() {
    const {
      visible,
      options,
      focusIndex
    } = this.getStates();

    if (!visible) {
      this.openDropdown();
    } else {
      if (focusIndex !== undefined && focusIndex !== -1 && options.length !== 0) {
        const visibleOptions = filter_default()(options).call(options, item => item.show);

        const selectedOption = visibleOptions[focusIndex];
        this.handleSelect(selectedOption, focusIndex);
      } else {
        this.closeDropdown();
      }
    }
  }

  handleOptionMouseEnter(optionIndex) {
    this._adapter.updateFocusIndex(optionIndex);
  }

  handleFocus(e) {
    // If you get the focus through the tab key, you need to manually bind keyboard events
    // Then you can open the panel by pressing the enter key
    this.bindKeyBoardEvent();

    this._adapter.notifyFocus(e);
  }

  handleBlur(e) {
    // In order to handle the problem of losing onClick binding when clicking on the padding area, the onBlur event is triggered first to cause the react view to be updated
    // internal-issues:1231
    set_timeout_default()(() => {
      this._adapter.notifyBlur(e);

      this.closeDropdown();
    }, 100);
  }

}

/* harmony default export */ var autoComplete_foundation = (foundation_AutoCompleteFoundation);
// CONCATENATED MODULE: ../semi-foundation/spin/constants.ts

const PREFIX = "".concat(BASE_CLASS_PREFIX, "-spin");
const spin_constants_cssClasses = {
  PREFIX
};
const spin_constants_strings = {
  SIZE: ['small', 'middle', 'large']
};
const spin_constants_numbers = {};

// CONCATENATED MODULE: ../semi-foundation/spin/foundation.ts




class foundation_SpinFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()(assign_default()({}, foundation_SpinFoundation.spinDefaultAdapter), adapter));
  }

  static get spinDefaultAdapter() {
    return {
      getProp: () => undefined,
      setLoading: val => undefined
    };
  }

  updateLoadingIfNeedDelay() {
    const {
      spinning: propsSpinning,
      delay: propsDelay
    } = this._adapter.getProps();

    const {
      delay
    } = this._adapter.getStates();

    if (delay) {
      const self = this;
      this._timer = set_timeout_default()(() => {
        self._adapter.setState({
          loading: propsSpinning,
          delay: 0
        });
      }, propsDelay);
    }
  }

  destroy() {
    if (this._timer) {
      clearTimeout(this._timer);
      this._timer = null;
    }
  }

}

/* harmony default export */ var spin_foundation = (foundation_SpinFoundation);
// CONCATENATED MODULE: ./spin/icon.tsx




var icon_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable no-unused-vars */





let _id = -1;

function icon_Icon() {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  const {
    id: propsId,
    className
  } = props,
        rest = icon_rest(props, ["id", "className"]);

  let _propsId = propsId;

  if (isNullOrUndefined(_propsId)) {
    _id++;
    _propsId = _id;
  }

  const id = "linearGradient-".concat(_propsId);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("svg", assign_default()({}, rest, {
    className: className,
    width: "48",
    height: "48",
    viewBox: "0 0 36 36",
    version: "1.1",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-hidden": true,
    "data-icon": "spin"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("defs", null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("linearGradient", {
    x1: "0%",
    y1: "100%",
    x2: "100%",
    y2: "100%",
    id: id
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("stop", {
    stopColor: "currentColor",
    stopOpacity: "0",
    offset: "0%"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("stop", {
    stopColor: "currentColor",
    stopOpacity: "0.50",
    offset: "39.9430698%"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("stop", {
    stopColor: "currentColor",
    offset: "100%"
  }))), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("g", {
    stroke: "none",
    strokeWidth: "1",
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("rect", {
    fillOpacity: "0.01",
    fill: "none",
    x: "0",
    y: "0",
    width: "36",
    height: "36"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("path", {
    d: "M34,18 C34,9.163444 26.836556,2 18,2 C11.6597233,2 6.18078805,5.68784135 3.59122325,11.0354951",
    stroke: "url(#".concat(id, ")"),
    strokeWidth: "4",
    strokeLinecap: "round"
  })));
}

/* harmony default export */ var spin_icon = (icon_Icon);
// EXTERNAL MODULE: ../semi-foundation/spin/spin.scss
var spin_spin = __webpack_require__("si4l");

// CONCATENATED MODULE: ./spin/index.tsx










const spin_prefixCls = spin_constants_cssClasses.PREFIX;

class spin_Spin extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);
    this.foundation = new spin_foundation(this.adapter);
    this.state = {
      delay: props.delay,
      loading: true
    };
  }

  static getDerivedStateFromProps(props) {
    if (!props.delay) {
      return {
        loading: props.spinning
      };
    }

    if (props.spinning === false) {
      return {
        delay: 0,
        loading: false
      };
    }

    return {
      delay: props.delay
    };
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      setLoading: value => {
        this.setState({
          loading: value
        });
      }
    });
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  renderSpin() {
    const {
      indicator,
      tip
    } = this.props;
    const {
      loading
    } = this.state;
    const spinIconCls = classnames_default()({
      ["".concat(spin_prefixCls, "-animate")]: loading
    });
    return loading ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(spin_prefixCls, "-wrapper")
    }, indicator ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: spinIconCls,
      "x-semi-prop": "indicator"
    }, indicator) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(spin_icon, null), tip ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      "x-semi-prop": "tip"
    }, tip) : null) : null;
  }

  render() {
    var _context;

    this.foundation.updateLoadingIfNeedDelay();
    const {
      children,
      style,
      wrapperClassName,
      childStyle,
      size
    } = this.props;
    const {
      loading
    } = this.state;
    const spinCls = classnames_default()(spin_prefixCls, wrapperClassName, {
      [concat_default()(_context = "".concat(spin_prefixCls, "-")).call(_context, size)]: size,
      ["".concat(spin_prefixCls, "-block")]: children,
      ["".concat(spin_prefixCls, "-hidden")]: !loading
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: spinCls,
      style: style
    }, this.renderSpin(), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(spin_prefixCls, "-children"),
      style: childStyle,
      "x-semi-prop": "children"
    }, children));
  }

}

spin_Spin.propTypes = {
  size: prop_types_default.a.oneOf(spin_constants_strings.SIZE),
  spinning: prop_types_default.a.bool,
  children: prop_types_default.a.node,
  indicator: prop_types_default.a.node,
  delay: prop_types_default.a.number,
  tip: prop_types_default.a.node,
  wrapperClassName: prop_types_default.a.string,
  childStyle: prop_types_default.a.object,
  style: prop_types_default.a.object
};
spin_Spin.defaultProps = {
  size: 'middle',
  spinning: true,
  children: null,
  indicator: null,
  delay: 0
};
/* harmony default export */ var spin_0 = (spin_Spin);
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/set.js
var lodash_set = __webpack_require__("DL3M");
var lodash_set_default = /*#__PURE__*/__webpack_require__.n(lodash_set);

// CONCATENATED MODULE: ../semi-foundation/input/constants.ts

const input_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-input")
};
const input_constants_strings = {
  SIZE: ['small', 'large', 'default'],
  DEFAULT_SIZE: 'default',
  STATUS: ['default', 'error', 'warning', 'success'],
  CLEARBTN_CLICKED_EVENT_FLAG: '__fromClearBtn',
  MODE: ['password']
};
const input_constants_numbers = {};

// CONCATENATED MODULE: ../semi-foundation/input/foundation.ts












class foundation_InputFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()(assign_default()({}, foundation_InputFoundation.inputDefaultAdapter), adapter));
  }

  static get inputDefaultAdapter() {
    return {
      notifyChange: noop_default.a,
      setValue: noop_default.a // toggleAllowClear: noop,

    };
  }

  init() {
    this._setInitValue();
  }

  destroy() {
    if (this._timer) {
      clearTimeout(this._timer);
      this._timer = null;
    }
  } // eslint-disable-next-line


  setDisable() {}

  _setInitValue() {
    const {
      defaultValue,
      value
    } = this.getProps();
    let v = defaultValue;

    if (this._isControlledComponent()) {
      v = value;
    }

    this._adapter.setValue(v); // this.checkAllowClear(v);

  }

  setValue(value) {
    this._adapter.setValue(value);
  }

  handleChange(value, e) {
    const {
      maxLength,
      minLength,
      getValueLength
    } = this._adapter.getProps();

    let nextValue = value;

    if (maxLength && isFunction_default()(getValueLength)) {
      nextValue = this.handleVisibleMaxLength(value);
    }

    if (minLength && isFunction_default()(getValueLength)) {
      this.handleVisibleMinLength(nextValue);
    }

    if (this._isControlledComponent()) {
      /**
       * If it is a controlled component, directly notify the caller of the modified value.
       * Truncate the input value from the input box if the input value exceeds the maximum length limit.
       *  Even in controlled components, characters that exceed the length limit cannot be entered through the input box.
       */
      this._adapter.notifyChange(nextValue, e);
    } else {
      this._adapter.setValue(nextValue);

      this._adapter.notifyChange(nextValue, e); // this.checkAllowClear(value);

    }
  }
  /**
   * Modify minLength to trigger browser check for minimum length
   * Controlled mode is not checked
   * @param {String} value
   */


  handleVisibleMinLength(value) {
    const {
      minLength,
      getValueLength
    } = this._adapter.getProps();

    const {
      minLength: stateMinLength
    } = this._adapter.getStates();

    if (isNumber_default()(minLength) && minLength >= 0 && isFunction_default()(getValueLength) && isString_default()(value)) {
      const valueLength = getValueLength(value);

      if (valueLength < minLength) {
        const newMinLength = value.length + (minLength - valueLength);
        newMinLength !== stateMinLength && this._adapter.setMinLength(newMinLength);
      } else {
        stateMinLength !== minLength && this._adapter.setMinLength(minLength);
      }
    }
  }
  /**
   * Handle input emoji characters beyond maxLength
   * Controlled mode is not checked
   * @param {String} value
   */


  handleVisibleMaxLength(value) {
    const {
      maxLength,
      getValueLength
    } = this._adapter.getProps();

    if (isNumber_default()(maxLength) && maxLength >= 0 && isFunction_default()(getValueLength) && isString_default()(value)) {
      const valueLength = getValueLength(value);

      if (valueLength > maxLength) {
        // eslint-disable-next-line max-len
        console.warn('[Semi Input] The input character is truncated because the input length exceeds the maximum length limit');
        const truncatedValue = this.handleTruncateValue(value, maxLength);
        return truncatedValue;
      } else {
        return value;
      }
    }
  }
  /**
   * Truncate input values based on maximum length
   * @param {String} value
   * @param {Number} maxLength
   * @returns {String}
   */


  handleTruncateValue(value, maxLength) {
    const {
      getValueLength
    } = this._adapter.getProps();

    if (isFunction_default()(getValueLength)) {
      let truncatedValue = '';

      for (let i = 1, len = value.length; i <= len; i++) {
        const currentValue = slice_default()(value).call(value, 0, i);

        if (getValueLength(currentValue) > maxLength) {
          return truncatedValue;
        } else {
          truncatedValue = currentValue;
        }
      }

      return truncatedValue;
    } else {
      return slice_default()(value).call(value, 0, maxLength);
    }
  }

  handleClear(e) {
    let eventObj = e;
    const value = ''; // let input = this._adapter.getInput();

    if (this._isControlledComponent('value')) {
      this._adapter.setState({
        isFocus: false
      });
    } else {
      this._adapter.setState({
        value: '',
        isFocus: false
      });
    }

    if (!eventObj || typeof eventObj !== 'object') {
      eventObj = {};
    }

    lodash_set_default()(eventObj, input_constants_strings.CLEARBTN_CLICKED_EVENT_FLAG, true); // this is useful for DateInput


    this._adapter.notifyChange(value, eventObj);

    this._adapter.notifyClear(eventObj);

    if (eventObj) {
      // When input is in popover and popover needs to judge clickOutSide, such as TreeSelect
      // If the click event bubbles up, it will mistakenly trigger clickOutSide's judgment.
      // At the same time, because the clear icon is not in the dom tree after clicking, and clickOutSide uses dom.contain (e.target), it will be considered as clicking on the outside, which will cause the floating layer to fold
      // So we need to stop the incident from bubbling up
      this.stopPropagation(eventObj);
    }
  }
  /**
   * trigger when click input wrapper
   * @param {Event} e
   */


  handleClick(e) {
    const {
      disabled
    } = this._adapter.getProps();

    const {
      isFocus
    } = this._adapter.getStates();

    if (disabled || isFocus) {
      return;
    } // do not handle bubbling up events


    if (this._adapter.isEventTarget(e)) {
      this._adapter.toggleFocusing(true);
    }
  }

  handleModeChange(mode) {
    if (mode === 'password') {
      this._adapter.setEyeClosed(true);
    } else {
      this._adapter.setEyeClosed(false);
    }
  }

  handleClickEye(e) {
    const eyeClosed = this._adapter.getState('eyeClosed');

    this._adapter.toggleFocusing(true);

    this._adapter.setEyeClosed(!eyeClosed);
  }

  handleInputType(type) {
    const mode = this._adapter.getProp('mode');

    const eyeClosed = this._adapter.getState('eyeClosed');

    if (mode === 'password') {
      return eyeClosed ? 'password' : 'text';
    }

    return type;
  }

  handleMouseDown(e) {
    e.preventDefault();
  }

  handleMouseUp(e) {
    e.preventDefault();
  }

  handleBlur(e) {
    const {
      value
    } = this.getStates();

    this._adapter.toggleFocusing(false);

    this._adapter.notifyBlur(value, e);
  }

  handleFocus(e) {
    const {
      value
    } = this.getStates();

    this._adapter.toggleFocusing(true); // this.checkAllowClear(this.getState('value'), true);


    this._adapter.notifyFocus(value, e);
  }

  handleInput(e) {
    this._adapter.notifyInput(e);
  }

  handleKeyDown(e) {
    this._adapter.notifyKeyDown(e);
  }

  handleKeyUp(e) {
    this._adapter.notifyKeyUp(e);
  }

  handleKeyPress(e) {
    this._adapter.notifyKeyPress(e);

    if (e.key === ENTER_KEY) {
      this._adapter.notifyEnterPress(e);
    }
  }

  setPaddingLeft(paddingLeft) {
    this._adapter.setPaddingLeft(paddingLeft);
  }

  isAllowClear() {
    const {
      value,
      isFocus,
      isHovering
    } = this._adapter.getStates();

    const {
      showClear,
      disabled
    } = this._adapter.getProps();

    const allowClear = value && showClear && !disabled && (isFocus || isHovering);
    return allowClear;
  }

  handleClickPrefixOrSuffix(e) {
    const {
      disabled
    } = this._adapter.getProps();

    const {
      isFocus
    } = this._adapter.getStates();

    if (!disabled && !isFocus) {
      this._adapter.toggleFocusing(true);
    }
  }
  /**
   * Blocking mousedown events prevents input from losing focus
   * @param {Event} e
   */


  handlePreventMouseDown(e) {
    if (e && isFunction_default()(e.preventDefault)) {
      e.preventDefault();
    }
  }
  /**
   * A11y: simulate password button click
   */


  handleModeEnterPress(e) {
    var _context;

    // trigger by Enter or Space key
    if (includes_default()(_context = ['Enter', ' ']).call(_context, e === null || e === void 0 ? void 0 : e.key)) {
      this.handlePreventMouseDown(e);
      this.handleClickEye(e);
    }
  }

}

/* harmony default export */ var input_foundation = (foundation_InputFoundation);
// EXTERNAL MODULE: ../semi-foundation/input/input.scss
var input_input = __webpack_require__("RHNq");

// CONCATENATED MODULE: ./input/index.tsx








var input_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable no-unused-vars, max-len, @typescript-eslint/no-unused-vars */











const input_prefixCls = input_constants_cssClasses.PREFIX;
const sizeSet = input_constants_strings.SIZE;
const statusSet = input_constants_strings.STATUS;
const modeSet = input_constants_strings.MODE;



class input_Input extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.handleClear = e => {
      this.foundation.handleClear(e);
    };

    this.handleClick = e => {
      this.foundation.handleClick(e);
    };

    this.handleMouseOver = e => {
      this.setState({
        isHovering: true
      });
    };

    this.handleMouseLeave = e => {
      this.setState({
        isHovering: false
      });
    };

    this.handleModeChange = mode => {
      this.foundation.handleModeChange(mode);
    };

    this.handleClickEye = e => {
      this.foundation.handleClickEye(e);
    };

    this.handleMouseDown = e => {
      this.foundation.handleMouseDown(e);
    };

    this.handleMouseUp = e => {
      this.foundation.handleMouseUp(e);
    };

    this.handleModeEnterPress = e => {
      this.foundation.handleModeEnterPress(e);
    };

    this.handleClickPrefixOrSuffix = e => {
      this.foundation.handleClickPrefixOrSuffix(e);
    };

    this.handlePreventMouseDown = e => {
      this.foundation.handlePreventMouseDown(e);
    };

    this.state = {
      value: '',
      cachedValue: null,
      disabled: false,
      props: {},
      paddingLeft: '',
      isFocus: false,
      isHovering: false,
      eyeClosed: props.mode === 'password',
      minLength: props.minLength
    };
    this.inputRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.prefixRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.suffixRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.foundation = new input_foundation(this.adapter);
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      setValue: value => this.setState({
        value
      }),
      setEyeClosed: value => this.setState({
        eyeClosed: value
      }),
      toggleFocusing: isFocus => {
        const {
          preventScroll
        } = this.props;
        const input = this.inputRef && this.inputRef.current;

        if (isFocus) {
          input && input.focus({
            preventScroll
          });
        } else {
          input && input.blur();
        }

        this.setState({
          isFocus
        });
      },
      toggleHovering: isHovering => this.setState({
        isHovering
      }),
      getIfFocusing: () => this.state.isFocus,
      notifyChange: (cbValue, e) => this.props.onChange(cbValue, e),
      notifyBlur: (val, e) => this.props.onBlur(e),
      notifyFocus: (val, e) => this.props.onFocus(e),
      notifyInput: e => this.props.onInput(e),
      notifyKeyPress: e => this.props.onKeyPress(e),
      notifyKeyDown: e => this.props.onKeyDown(e),
      notifyKeyUp: e => this.props.onKeyUp(e),
      notifyEnterPress: e => this.props.onEnterPress(e),
      notifyClear: e => this.props.onClear(e),
      setPaddingLeft: paddingLeft => this.setState({
        paddingLeft
      }),
      setMinLength: minLength => this.setState({
        minLength
      }),
      isEventTarget: e => e && e.target === e.currentTarget
    });
  }

  static getDerivedStateFromProps(props, state) {
    const willUpdateStates = {};

    if (props.value !== state.cachedValue) {
      willUpdateStates.value = props.value;
      willUpdateStates.cachedValue = props.value;
    }

    return willUpdateStates;
  }

  componentDidUpdate(prevProps) {
    const {
      mode
    } = this.props;

    if (prevProps.mode !== mode) {
      this.handleModeChange(mode);
    }
  }

  renderPrepend() {
    const {
      addonBefore
    } = this.props;

    if (addonBefore) {
      const prefixWrapperCls = classnames_default()({
        ["".concat(input_prefixCls, "-prepend")]: true,
        ["".concat(input_prefixCls, "-prepend-text")]: addonBefore && isString_default()(addonBefore),
        ["".concat(input_prefixCls, "-prepend-icon")]: Object(_utils["e" /* isSemiIcon */])(addonBefore)
      });
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: prefixWrapperCls,
        "x-semi-prop": "addonBefore"
      }, addonBefore);
    }

    return null;
  }

  renderAppend() {
    const {
      addonAfter
    } = this.props;

    if (addonAfter) {
      const prefixWrapperCls = classnames_default()({
        ["".concat(input_prefixCls, "-append")]: true,
        ["".concat(input_prefixCls, "-append-text")]: addonAfter && isString_default()(addonAfter),
        ["".concat(input_prefixCls, "-append-icon")]: Object(_utils["e" /* isSemiIcon */])(addonAfter)
      });
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: prefixWrapperCls,
        "x-semi-prop": "addonAfter"
      }, addonAfter);
    }

    return null;
  }

  renderClearBtn() {
    const clearCls = classnames_default()("".concat(input_prefixCls, "-clearbtn"));
    const allowClear = this.foundation.isAllowClear(); // use onMouseDown to fix issue 1203

    if (allowClear) {
      return (
        /*#__PURE__*/
        // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
        external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          className: clearCls,
          onMouseDown: this.handleClear
        }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClear, null))
      );
    }

    return null;
  }

  renderModeBtn() {
    const {
      eyeClosed
    } = this.state;
    const {
      mode,
      disabled
    } = this.props;
    const modeCls = classnames_default()("".concat(input_prefixCls, "-modebtn"));
    const modeIcon = eyeClosed ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconEyeClosedSolid, null) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconEyeOpened, null); // alway show password button for a11y

    const showModeBtn = mode === 'password' && !disabled;
    const ariaLabel = eyeClosed ? 'Show password' : 'Hidden password';

    if (showModeBtn) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "button",
        tabIndex: 0,
        "aria-label": ariaLabel,
        className: modeCls,
        onClick: this.handleClickEye,
        onMouseDown: this.handleMouseDown,
        onMouseUp: this.handleMouseUp,
        onKeyPress: this.handleModeEnterPress
      }, modeIcon);
    }

    return null;
  }

  renderPrefix() {
    const {
      prefix,
      insetLabel,
      insetLabelId
    } = this.props;
    const labelNode = prefix || insetLabel;

    if (!labelNode) {
      return null;
    }

    const prefixWrapperCls = classnames_default()({
      ["".concat(input_prefixCls, "-prefix")]: true,
      ["".concat(input_prefixCls, "-inset-label")]: insetLabel,
      ["".concat(input_prefixCls, "-prefix-text")]: labelNode && isString_default()(labelNode),
      ["".concat(input_prefixCls, "-prefix-icon")]: Object(_utils["e" /* isSemiIcon */])(labelNode)
    });
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: prefixWrapperCls,
        onMouseDown: this.handlePreventMouseDown,
        onClick: this.handleClickPrefixOrSuffix,
        id: insetLabelId,
        "x-semi-prop": "prefix,insetLabel"
      }, labelNode)
    );
  }

  showClearBtn() {
    const {
      value,
      isFocus,
      isHovering
    } = this.state;
    const {
      disabled,
      showClear
    } = this.props;
    return Boolean(value) && showClear && !disabled && (isFocus || isHovering);
  }

  renderSuffix(suffixAllowClear) {
    const {
      suffix,
      hideSuffix
    } = this.props;

    if (!suffix) {
      return null;
    }

    const suffixWrapperCls = classnames_default()({
      ["".concat(input_prefixCls, "-suffix")]: true,
      ["".concat(input_prefixCls, "-suffix-text")]: suffix && isString_default()(suffix),
      ["".concat(input_prefixCls, "-suffix-icon")]: Object(_utils["e" /* isSemiIcon */])(suffix),
      ["".concat(input_prefixCls, "-suffix-hidden")]: suffixAllowClear && Boolean(hideSuffix)
    });
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: suffixWrapperCls,
        onMouseDown: this.handlePreventMouseDown,
        onClick: this.handleClickPrefixOrSuffix,
        "x-semi-prop": "suffix"
      }, suffix)
    );
  }

  render() {
    var _context, _context2;

    const _a = this.props,
          {
      addonAfter,
      addonBefore,
      autofocus,
      className,
      disabled,
      defaultValue,
      placeholder,
      prefix,
      mode,
      insetLabel,
      insetLabelId,
      validateStatus,
      type,
      readonly,
      size,
      suffix,
      style,
      showClear,
      onEnterPress,
      onClear,
      hideSuffix,
      inputStyle,
      forwardRef,
      maxLength,
      getValueLength,
      preventScroll
    } = _a,
          rest = input_rest(_a, ["addonAfter", "addonBefore", "autofocus", "className", "disabled", "defaultValue", "placeholder", "prefix", "mode", "insetLabel", "insetLabelId", "validateStatus", "type", "readonly", "size", "suffix", "style", "showClear", "onEnterPress", "onClear", "hideSuffix", "inputStyle", "forwardRef", "maxLength", "getValueLength", "preventScroll"]);

    const {
      value,
      paddingLeft,
      isFocus,
      minLength: stateMinLength
    } = this.state;
    const suffixAllowClear = this.showClearBtn();
    const suffixIsIcon = Object(_utils["e" /* isSemiIcon */])(suffix);
    const ref = forwardRef || this.inputRef;
    const wrapperPrefix = "".concat(input_prefixCls, "-wrapper");
    const wrapperCls = classnames_default()(wrapperPrefix, className, {
      ["".concat(input_prefixCls, "-wrapper__with-prefix")]: prefix || insetLabel,
      ["".concat(input_prefixCls, "-wrapper__with-suffix")]: suffix,
      ["".concat(input_prefixCls, "-wrapper__with-suffix-hidden")]: suffixAllowClear && Boolean(hideSuffix),
      ["".concat(input_prefixCls, "-wrapper__with-suffix-icon")]: suffixIsIcon,
      ["".concat(input_prefixCls, "-wrapper__with-append")]: addonBefore,
      ["".concat(input_prefixCls, "-wrapper__with-prepend")]: addonAfter,
      ["".concat(input_prefixCls, "-wrapper__with-append-only")]: addonBefore && !addonAfter,
      ["".concat(input_prefixCls, "-wrapper__with-prepend-only")]: !addonBefore && addonAfter,
      ["".concat(wrapperPrefix, "-readonly")]: readonly,
      ["".concat(wrapperPrefix, "-disabled")]: disabled,
      ["".concat(wrapperPrefix, "-warning")]: validateStatus === 'warning',
      ["".concat(wrapperPrefix, "-error")]: validateStatus === 'error',
      ["".concat(wrapperPrefix, "-focus")]: isFocus,
      ["".concat(wrapperPrefix, "-clearable")]: showClear,
      ["".concat(wrapperPrefix, "-modebtn")]: mode === 'password',
      ["".concat(wrapperPrefix, "-hidden")]: type === 'hidden',
      [concat_default()(_context = "".concat(wrapperPrefix, "-")).call(_context, size)]: size
    });
    const inputCls = classnames_default()(input_prefixCls, {
      [concat_default()(_context2 = "".concat(input_prefixCls, "-")).call(_context2, size)]: size,
      ["".concat(input_prefixCls, "-disabled")]: disabled,
      ["".concat(input_prefixCls, "-sibling-clearbtn")]: this.foundation.isAllowClear(),
      ["".concat(input_prefixCls, "-sibling-modebtn")]: mode === 'password'
    });
    const inputValue = value === null || value === undefined ? '' : value;

    const inputProps = assign_default()(assign_default()({}, rest), {
      style: assign_default()({
        paddingLeft
      }, inputStyle),
      autoFocus: autofocus,
      className: inputCls,
      disabled,
      readOnly: readonly,
      type: this.foundation.handleInputType(type),
      placeholder: placeholder,
      onInput: e => this.foundation.handleInput(e),
      onChange: e => this.foundation.handleChange(e.target.value, e),
      onFocus: e => this.foundation.handleFocus(e),
      onBlur: e => this.foundation.handleBlur(e),
      onKeyUp: e => this.foundation.handleKeyUp(e),
      onKeyDown: e => this.foundation.handleKeyDown(e),
      onKeyPress: e => this.foundation.handleKeyPress(e),
      value: inputValue
    });

    if (!isFunction_default()(getValueLength)) {
      inputProps.maxLength = maxLength;
    }

    if (stateMinLength) {
      inputProps.minLength = stateMinLength;
    }

    if (validateStatus === 'error') {
      inputProps['aria-invalid'] = 'true';
    }

    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: wrapperCls,
        style: style,
        onMouseEnter: e => this.handleMouseOver(e),
        onMouseLeave: e => this.handleMouseLeave(e),
        onClick: e => this.handleClick(e)
      }, this.renderPrepend(), this.renderPrefix(), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("input", assign_default()({}, inputProps, {
        ref: ref
      })), this.renderClearBtn(), this.renderSuffix(suffixAllowClear), this.renderModeBtn(), this.renderAppend())
    );
  }

}

input_Input.propTypes = {
  'aria-label': prop_types_default.a.string,
  'aria-labelledby': prop_types_default.a.string,
  'aria-invalid': prop_types_default.a.bool,
  'aria-errormessage': prop_types_default.a.string,
  'aria-describedby': prop_types_default.a.string,
  'aria-required': prop_types_default.a.bool,
  addonBefore: prop_types_default.a.node,
  addonAfter: prop_types_default.a.node,
  prefix: prop_types_default.a.node,
  suffix: prop_types_default.a.node,
  mode: prop_types_default.a.oneOf(modeSet),
  value: prop_types_default.a.any,
  defaultValue: prop_types_default.a.any,
  disabled: prop_types_default.a.bool,
  readonly: prop_types_default.a.bool,
  autofocus: prop_types_default.a.bool,
  type: prop_types_default.a.string,
  showClear: prop_types_default.a.bool,
  hideSuffix: prop_types_default.a.bool,
  placeholder: prop_types_default.a.any,
  size: prop_types_default.a.oneOf(sizeSet),
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  validateStatus: prop_types_default.a.oneOf(statusSet),
  onClear: prop_types_default.a.func,
  onChange: prop_types_default.a.func,
  onBlur: prop_types_default.a.func,
  onFocus: prop_types_default.a.func,
  onInput: prop_types_default.a.func,
  onKeyDown: prop_types_default.a.func,
  onKeyUp: prop_types_default.a.func,
  onKeyPress: prop_types_default.a.func,
  onEnterPress: prop_types_default.a.func,
  insetLabel: prop_types_default.a.node,
  insetLabelId: prop_types_default.a.string,
  inputStyle: prop_types_default.a.object,
  getValueLength: prop_types_default.a.func,
  preventScroll: prop_types_default.a.bool
};
input_Input.defaultProps = {
  addonBefore: '',
  addonAfter: '',
  prefix: '',
  suffix: '',
  readonly: false,
  type: 'text',
  showClear: false,
  hideSuffix: false,
  placeholder: '',
  size: 'default',
  className: '',
  onClear: noop_default.a,
  onChange: noop_default.a,
  onBlur: noop_default.a,
  onFocus: noop_default.a,
  onInput: noop_default.a,
  onKeyDown: noop_default.a,
  onKeyUp: noop_default.a,
  onKeyPress: noop_default.a,
  onEnterPress: noop_default.a,
  validateStatus: 'default'
};
const ForwardInput = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.forwardRef((props, ref) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(input_Input, assign_default()({}, props, {
  forwardRef: ref
})));
/* harmony default export */ var input_0 = (ForwardInput);

// CONCATENATED MODULE: ./trigger/index.tsx




/* eslint-disable @typescript-eslint/ban-types */
var trigger_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};



/**
 * `Trigger` is a HOC that will cover the inner of components which have popups
 */

class trigger_Trigger extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
  render() {
    // eslint-disable-next-line no-unused-vars
    const _a = this.props,
          {
      triggerRender,
      componentName
    } = _a,
          rest = trigger_rest(_a, ["triggerRender", "componentName"]);

    return triggerRender(assign_default()({}, rest));
  }

}

trigger_Trigger.propTypes = {
  /**
   * ({ value?: any, className?: string, style?: React.CSSProperties, ... }) => React.ReactNode
   */
  triggerRender: prop_types_default.a.func.isRequired,

  /**
   * e.g. "AutoComplete", "DatePicker", ...
   */
  componentName: prop_types_default.a.string,
  componentProps: prop_types_default.a.object,
  value: prop_types_default.a.any,
  inputValue: prop_types_default.a.string,
  placeholder: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.array]),
  className: prop_types_default.a.string,
  style: prop_types_default.a.object
};
/* harmony default export */ var trigger_0 = (trigger_Trigger);
// CONCATENATED MODULE: ../semi-foundation/select/constants.ts


const select_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-select"),
  PREFIX_OPTION: "".concat(BASE_CLASS_PREFIX, "-select-option"),
  PREFIX_GROUP: "".concat(BASE_CLASS_PREFIX, "-select-group")
};
const select_constants_strings = {
  SIZE_SET: ['small', 'large', 'default'],
  POSITION_SET: tooltip_constants_strings.POSITION_SET,
  MODE_SELECT: 'select',
  MODE_AUTOCOMPLETE: 'autoComplete',
  // MODE_TAGS: 'tags',
  STATUS: VALIDATE_STATUS
};
const select_constants_numbers = {
  LIST_HEIGHT: 300
};

// CONCATENATED MODULE: ./select/option.tsx





var option_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable max-len */










class option_Option extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  onClick(_a, event) {
    var {
      value,
      label,
      children
    } = _a,
        rest = option_rest(_a, ["value", "label", "children"]);

    const {
      props
    } = this;
    const isDisabled = props.disabled;

    if (!isDisabled) {
      props.onSelect(assign_default()(assign_default()({}, rest), {
        value,
        label: label || children
      }), event);
    }
  }

  renderOptionContent(_ref) {
    let {
      config,
      children,
      inputValue,
      prefixCls
    } = _ref;

    if (isString_default()(children) && inputValue) {
      return Object(_utils["d" /* getHighLightTextHTML */])(config);
    }

    return children;
  }

  render() {
    const _a = this.props,
          {
      children,
      disabled,
      value,
      selected,
      label,
      empty,
      emptyContent,
      onSelect,
      focused,
      showTick,
      className,
      style,
      onMouseEnter,
      prefixCls,
      renderOptionItem,
      inputValue,
      id
    } = _a,
          rest = option_rest(_a, ["children", "disabled", "value", "selected", "label", "empty", "emptyContent", "onSelect", "focused", "showTick", "className", "style", "onMouseEnter", "prefixCls", "renderOptionItem", "inputValue", "id"]);

    const optionClassName = classnames_default()(prefixCls, {
      ["".concat(prefixCls, "-disabled")]: disabled,
      ["".concat(prefixCls, "-selected")]: selected,
      ["".concat(prefixCls, "-focused")]: focused,
      ["".concat(prefixCls, "-empty")]: empty,
      [className]: className
    });
    const selectedIconClassName = classnames_default()(["".concat(prefixCls, "-icon")]);

    if (empty) {
      if (emptyContent === null) {
        return null;
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
        componentName: "Select"
      }, locale => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: optionClassName,
        "x-semi-prop": "emptyContent"
      }, emptyContent || locale.emptyText));
    } // Since there are empty, locale and other logic, the custom renderOptionItem is directly converged to the internal option instead of being placed in Select/index


    if (typeof renderOptionItem === 'function') {
      return renderOptionItem(assign_default()({
        disabled,
        focused,
        selected,
        style,
        label,
        value,
        inputValue,
        onMouseEnter: e => onMouseEnter(e),
        onClick: e => this.onClick(assign_default()({
          value,
          label,
          children
        }, rest), e)
      }, rest));
    }

    const config = {
      searchWords: inputValue,
      sourceString: children,
      option: {
        highlightClassName: "".concat(prefixCls, "-keyword")
      }
    };
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/interactive-supports-focus,jsx-a11y/click-events-have-key-events
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: optionClassName,
        onClick: e => {
          this.onClick(assign_default()({
            value,
            label,
            children
          }, rest), e);
        },
        onMouseEnter: e => onMouseEnter && onMouseEnter(e),
        role: "option",
        id: id,
        "aria-selected": selected ? "true" : "false",
        "aria-disabled": disabled ? "true" : "false",
        style: style
      }, showTick ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: selectedIconClassName
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconTick, null)) : null, isString_default()(children) ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(prefixCls, "-text")
      }, this.renderOptionContent({
        children,
        config,
        inputValue,
        prefixCls
      })) : children)
    );
  }

}

option_Option.isSelectOption = true;
option_Option.propTypes = {
  children: prop_types_default.a.node,
  disabled: prop_types_default.a.bool,
  value: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  selected: prop_types_default.a.bool,
  label: prop_types_default.a.node,
  empty: prop_types_default.a.bool,
  emptyContent: prop_types_default.a.node,
  onSelect: prop_types_default.a.func,
  focused: prop_types_default.a.bool,
  showTick: prop_types_default.a.bool,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  onMouseEnter: prop_types_default.a.func,
  prefixCls: prop_types_default.a.string,
  renderOptionItem: prop_types_default.a.func,
  inputValue: prop_types_default.a.string
};
option_Option.defaultProps = {
  prefixCls: select_constants_cssClasses.PREFIX_OPTION
};
/* harmony default export */ var select_option = (option_Option);
// EXTERNAL MODULE: ../semi-foundation/autoComplete/autoComplete.scss
var autoComplete = __webpack_require__("t64S");

// CONCATENATED MODULE: ./autoComplete/index.tsx









/* eslint-disable @typescript-eslint/ban-types, max-len */














const autoComplete_prefixCls = autoComplete_constants_cssClasses.PREFIX;
const autoComplete_sizeSet = autoComplete_constants_strings.SIZE;
const autoComplete_positionSet = autoComplete_constants_strings.POSITION;
const autoComplete_statusSet = autoComplete_constants_strings.STATUS;

class autoComplete_AutoComplete extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.onSelect = (option, optionIndex, e) => {
      this.foundation.handleSelect(option, optionIndex);
    };

    this.onSearch = value => {
      this.foundation.handleSearch(value);
    };

    this.onBlur = e => this.foundation.handleBlur(e);

    this.onFocus = e => this.foundation.handleFocus(e);

    this.onInputClear = () => this.foundation.handleClear();

    this.handleInputClick = e => this.foundation.handleInputClick(e);

    this.foundation = new autoComplete_foundation(this.adapter);
    const initRePosKey = 1;
    this.state = {
      dropdownMinWidth: null,
      inputValue: '',
      // option list
      options: [],
      // popover visible
      visible: false,
      // current focus option index
      focusIndex: props.defaultActiveFirstOption ? 0 : -1,
      // current selected options
      selection: new core_js_stable_map_default.a(),
      rePosKey: initRePosKey
    };
    this.triggerRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.optionsRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.clickOutsideHandler = null;
    Object(warning["a" /* default */])('triggerRender' in this.props && typeof this.props.triggerRender === 'function', "[Semi AutoComplete]\n            - If you are using the following props: 'suffix', 'prefix', 'showClear', 'validateStatus', and 'size',\n            please notice that they will be removed in the next major version.\n            Please use 'componentProps' to retrieve these props instead.\n            - If you are using 'onBlur', 'onFocus', please try to avoid using them and look for changes in the future.");
  }

  get adapter() {
    const keyboardAdapter = {
      registerKeyDown: cb => {
        const keyboardEventSet = {
          onKeyDown: cb
        };
        this.setState({
          keyboardEventSet
        });
      },
      unregisterKeyDown: cb => {
        this.setState({
          keyboardEventSet: {}
        });
      },
      updateFocusIndex: focusIndex => {
        this.setState({
          focusIndex
        });
      }
    };
    return assign_default()(assign_default()(assign_default()({}, super.adapter), keyboardAdapter), {
      getTriggerWidth: () => {
        const el = this.triggerRef.current;
        return el && el.getBoundingClientRect().width;
      },
      setOptionWrapperWidth: width => {
        this.setState({
          dropdownMinWidth: width
        });
      },
      updateInputValue: inputValue => {
        this.setState({
          inputValue
        });
      },
      toggleListVisible: isShow => {
        this.setState({
          visible: isShow
        });
      },
      updateOptionList: optionList => {
        this.setState({
          options: optionList
        });
      },
      updateSelection: selection => {
        this.setState({
          selection
        });
      },
      notifySearch: inputValue => {
        this.props.onSearch(inputValue);
      },
      notifyChange: value => {
        this.props.onChange(value);
      },
      notifySelect: option => {
        this.props.onSelect(option);
      },
      notifyDropdownVisibleChange: isVisible => {
        this.props.onDropdownVisibleChange(isVisible);
      },
      notifyClear: () => {
        this.props.onClear();
      },
      notifyFocus: event => {
        this.props.onFocus(event);
      },
      notifyBlur: event => {
        this.props.onBlur(event);
      },
      rePositionDropdown: () => {
        let {
          rePosKey
        } = this.state;
        rePosKey = rePosKey + 1;
        this.setState({
          rePosKey
        });
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  componentDidUpdate(prevProps, prevState) {
    if (!isEqual_default()(this.props.data, prevProps.data)) {
      this.foundation.handleDataChange(this.props.data);
    }

    if (this.props.value !== prevProps.value) {
      this.foundation.handleValueChange(this.props.value);
    }
  }

  renderInput() {
    const {
      size,
      prefix,
      insetLabel,
      insetLabelId,
      suffix,
      placeholder,
      style,
      className,
      showClear,
      disabled,
      triggerRender,
      validateStatus,
      autoFocus,
      value,
      id
    } = this.props;
    const {
      inputValue,
      keyboardEventSet,
      selection
    } = this.state;
    const useCustomTrigger = typeof triggerRender === 'function';

    const outerProps = assign_default()({
      style,
      className: useCustomTrigger ? classnames_default()(className) : classnames_default()({
        [autoComplete_prefixCls]: true,
        ["".concat(autoComplete_prefixCls, "-disabled")]: disabled
      }, className),
      onClick: this.handleInputClick,
      ref: this.triggerRef,
      id
    }, keyboardEventSet);

    const innerProps = {
      disabled,
      placeholder,
      autofocus: autoFocus,
      onChange: this.onSearch,
      onClear: this.onInputClear,
      'aria-label': this.props['aria-label'],
      'aria-labelledby': this.props['aria-labelledby'],
      'aria-invalid': this.props['aria-invalid'],
      'aria-errormessage': this.props['aria-errormessage'],
      'aria-describedby': this.props['aria-describedby'],
      'aria-required': this.props['aria-required'],
      // TODO: remove in next major version
      suffix,
      prefix: prefix || insetLabel,
      insetLabelId,
      showClear,
      validateStatus,
      size,
      onBlur: this.onBlur,
      onFocus: this.onFocus
    };
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({}, outerProps), typeof triggerRender === 'function' ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(trigger_0, assign_default()({}, innerProps, {
      inputValue: typeof value !== 'undefined' ? value : inputValue,
      value: from_default()(instance_values_default()(selection).call(selection)),
      triggerRender: triggerRender,
      componentName: "AutoComplete",
      componentProps: assign_default()({}, this.props)
    })) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(input_0, assign_default()({}, innerProps, {
      value: typeof value !== 'undefined' ? value : inputValue
    })));
  }

  renderLoading() {
    const loadingWrapperCls = "".concat(autoComplete_prefixCls, "-loading-wrapper");
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: loadingWrapperCls
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(spin_0, null));
  }

  renderOption(option, optionIndex) {
    const {
      focusIndex
    } = this.state;
    const isFocused = optionIndex === focusIndex;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(select_option, assign_default()({
      showTick: false,
      onSelect: (v, e) => this.onSelect(v, optionIndex, e),
      // selected={selection.has(option.label)}
      focused: isFocused,
      onMouseEnter: () => this.foundation.handleOptionMouseEnter(optionIndex),
      key: option.key || option.label + option.value + optionIndex
    }, option), option.label);
  }

  renderOptionList() {
    const {
      maxHeight,
      dropdownStyle,
      dropdownClassName,
      loading,
      emptyContent
    } = this.props;
    const {
      options,
      dropdownMinWidth
    } = this.state;
    const listCls = classnames_default()({
      ["".concat(autoComplete_prefixCls, "-option-list")]: true
    }, dropdownClassName);
    let optionsNode;

    if (options.length === 0) {
      optionsNode = emptyContent;
    } else {
      var _context;

      optionsNode = map_default()(_context = filter_default()(options).call(options, option => option.show)).call(_context, (option, i) => this.renderOption(option, i));
    }

    const style = assign_default()({
      maxHeight: maxHeight,
      minWidth: dropdownMinWidth
    }, dropdownStyle);

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: listCls,
      role: "listbox",
      style: style
    }, !loading ? optionsNode : this.renderLoading());
  }

  render() {
    const {
      position,
      motion,
      zIndex,
      mouseEnterDelay,
      mouseLeaveDelay,
      autoAdjustOverflow,
      stopPropagation,
      getPopupContainer
    } = this.props;
    const {
      visible,
      rePosKey
    } = this.state;
    const input = this.renderInput();
    const optionList = this.renderOptionList();
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(popover_0, {
      mouseEnterDelay: mouseEnterDelay,
      mouseLeaveDelay: mouseLeaveDelay,
      autoAdjustOverflow: autoAdjustOverflow,
      trigger: "custom",
      motion: motion,
      visible: visible,
      content: optionList,
      position: position,
      ref: this.optionsRef,
      // TransformFromCenter TODO: need to confirm
      zIndex: zIndex,
      stopPropagation: stopPropagation,
      getPopupContainer: getPopupContainer,
      rePosKey: rePosKey
    }, input);
  }

}

autoComplete_AutoComplete.propTypes = {
  'aria-label': prop_types_default.a.string,
  'aria-labelledby': prop_types_default.a.string,
  'aria-invalid': prop_types_default.a.bool,
  'aria-errormessage': prop_types_default.a.string,
  'aria-describedby': prop_types_default.a.string,
  'aria-required': prop_types_default.a.bool,
  autoFocus: prop_types_default.a.bool,
  autoAdjustOverflow: prop_types_default.a.bool,
  className: prop_types_default.a.string,
  children: prop_types_default.a.node,
  data: prop_types_default.a.array,
  defaultOpen: prop_types_default.a.bool,
  defaultValue: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  defaultActiveFirstOption: prop_types_default.a.bool,
  disabled: prop_types_default.a.bool,
  dropdownMatchSelectWidth: prop_types_default.a.bool,
  dropdownClassName: prop_types_default.a.string,
  dropdownStyle: prop_types_default.a.object,
  emptyContent: prop_types_default.a.node,
  id: prop_types_default.a.string,
  insetLabel: prop_types_default.a.node,
  insetLabelId: prop_types_default.a.string,
  onSearch: prop_types_default.a.func,
  onSelect: prop_types_default.a.func,
  onClear: prop_types_default.a.func,
  onBlur: prop_types_default.a.func,
  onFocus: prop_types_default.a.func,
  onChange: prop_types_default.a.func,
  position: prop_types_default.a.oneOf(autoComplete_positionSet),
  placeholder: prop_types_default.a.string,
  prefix: prop_types_default.a.node,
  onChangeWithObject: prop_types_default.a.bool,
  onSelectWithObject: prop_types_default.a.bool,
  renderItem: prop_types_default.a.func,
  renderSelectedItem: prop_types_default.a.func,
  suffix: prop_types_default.a.node,
  showClear: prop_types_default.a.bool,
  size: prop_types_default.a.oneOf(autoComplete_sizeSet),
  style: prop_types_default.a.object,
  stopPropagation: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.string]),
  maxHeight: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  mouseEnterDelay: prop_types_default.a.number,
  mouseLeaveDelay: prop_types_default.a.number,
  motion: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.func, prop_types_default.a.object]),
  getPopupContainer: prop_types_default.a.func,
  triggerRender: prop_types_default.a.func,
  value: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  validateStatus: prop_types_default.a.oneOf(autoComplete_statusSet),
  zIndex: prop_types_default.a.number
};
autoComplete_AutoComplete.Option = select_option;
autoComplete_AutoComplete.defaultProps = {
  stopPropagation: true,
  motion: true,
  zIndex: constants_numbers.DEFAULT_Z_INDEX,
  position: 'bottomLeft',
  data: [],
  showClear: false,
  size: 'default',
  onFocus: noop_default.a,
  onSearch: noop_default.a,
  onClear: noop_default.a,
  onBlur: noop_default.a,
  onSelect: noop_default.a,
  onChange: noop_default.a,
  onSelectWithObject: false,
  onDropdownVisibleChange: noop_default.a,
  defaultActiveFirstOption: false,
  dropdownMatchSelectWidth: true,
  loading: false,
  maxHeight: 300,
  validateStatus: 'default',
  autoFocus: false,
  emptyContent: null // onPressEnter: () => undefined,
  // defaultOpen: false,

};
/* harmony default export */ var autoComplete_0 = (autoComplete_AutoComplete);
// CONCATENATED MODULE: ../semi-foundation/avatar/constants.ts

const avatar_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-avatar")
};
const avatar_constants_strings = {
  SHAPE: ['circle', 'square'],
  SIZE: ['extra-extra-small', 'extra-small', 'small', 'default', 'medium', 'large', 'extra-large'],
  // eslint-disable-next-line max-len
  COLOR: ['grey', 'red', 'pink', 'purple', 'violet', 'indigo', 'blue', 'light-blue', 'cyan', 'teal', 'green', 'light-green', 'lime', 'yellow', 'amber', 'orange', 'white'],
  OVERLAP_FROM: ['start', 'end']
};

// CONCATENATED MODULE: ../semi-foundation/avatar/foundation.ts



class foundation_AvatarFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));

    this.handleFocusVisible = event => {
      const {
        target
      } = event;

      try {
        if (target.matches(':focus-visible')) {
          this._adapter.setFocusVisible(true);
        }
      } catch (error) {
        Object(warning["a" /* default */])(true, 'Warning: [Semi Avatar] The current browser does not support the focus-visible');
      }
    };

    this.handleBlur = () => {
      this._adapter.setFocusVisible(false);
    };
  }

  init() {} // eslint-disable-line


  destroy() {} // eslint-disable-line


  handleImgLoadError() {
    const {
      onError
    } = this.getProps();
    const errorFlag = onError ? onError() : undefined;

    if (errorFlag !== false) {
      this._adapter.notifyImgState(false);
    }
  }

  handleEnter(e) {
    this._adapter.notifyEnter(e);
  }

  handleLeave(e) {
    this._adapter.notifyLeave(e);
  }

}
// EXTERNAL MODULE: ../semi-foundation/avatar/avatar.scss
var avatar_avatar = __webpack_require__("R8rS");

// CONCATENATED MODULE: ./avatar/index.tsx






var avatar_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};










const avatar_sizeSet = avatar_constants_strings.SIZE;
const shapeSet = avatar_constants_strings.SHAPE;
const colorSet = avatar_constants_strings.COLOR;
const avatar_prefixCls = avatar_constants_cssClasses.PREFIX;

class avatar_Avatar extends baseComponent_BaseComponent {
  constructor(props) {
    var _context, _context2, _context3, _context4, _context5;

    super(props);

    this.handleFocusVisible = event => {
      this.foundation.handleFocusVisible(event);
    };

    this.handleBlur = event => {
      this.foundation.handleBlur();
    };

    this.getContent = () => {
      const {
        children,
        onClick,
        imgAttr,
        src,
        srcSet,
        alt
      } = this.props;
      const {
        isImgExist
      } = this.state;
      let content = children;
      const clickable = onClick !== function_noop;
      const isImg = src && isImgExist;
      const a11yFocusProps = {
        tabIndex: 0,
        onKeyDown: this.handleKeyDown,
        onFocus: this.handleFocusVisible,
        onBlur: this.handleBlur
      };

      if (isImg) {
        const finalAlt = clickable ? "clickable Avatar: ".concat(alt) : alt;

        const imgBasicProps = assign_default()(assign_default()({
          src,
          srcSet,
          onError: this.handleError
        }, imgAttr), {
          className: classnames_default()({
            ["".concat(avatar_prefixCls, "-no-focus-visible")]: clickable
          })
        });

        const imgProps = clickable ? assign_default()(assign_default()({}, imgBasicProps), a11yFocusProps) : imgBasicProps;
        content = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("img", assign_default()({
          alt: finalAlt
        }, imgProps));
      } else if (typeof children === 'string') {
        const tempAlt = alt !== null && alt !== void 0 ? alt : children;
        const finalAlt = clickable ? "clickable Avatar: ".concat(tempAlt) : tempAlt;
        const props = {
          role: 'img',
          'aria-label': finalAlt,
          className: classnames_default()("".concat(avatar_prefixCls, "-label"), {
            ["".concat(avatar_prefixCls, "-no-focus-visible")]: clickable
          })
        };
        const finalProps = clickable ? assign_default()(assign_default()({}, props), a11yFocusProps) : props;
        content = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
          className: "".concat(avatar_prefixCls, "-content")
        }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", assign_default()({}, finalProps, {
          "x-semi-prop": "children"
        }), children));
      }

      return content;
    };

    this.state = {
      isImgExist: true,
      hoverContent: '',
      focusVisible: false
    };
    this.onEnter = bind_default()(_context = this.onEnter).call(_context, this);
    this.onLeave = bind_default()(_context2 = this.onLeave).call(_context2, this);
    this.handleError = bind_default()(_context3 = this.handleError).call(_context3, this);
    this.handleKeyDown = bind_default()(_context4 = this.handleKeyDown).call(_context4, this);
    this.getContent = bind_default()(_context5 = this.getContent).call(_context5, this);
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      notifyImgState: isImgExist => {
        this.setState({
          isImgExist
        });
      },
      notifyEnter: e => {
        const {
          hoverMask
        } = this.props;
        const hoverContent = hoverMask;
        this.setState({
          hoverContent
        }, () => {
          const {
            onMouseEnter
          } = this.props;
          onMouseEnter && onMouseEnter(e);
        });
      },
      notifyLeave: e => {
        this.setState({
          hoverContent: ''
        }, () => {
          const {
            onMouseLeave
          } = this.props;
          onMouseLeave && onMouseLeave(e);
        });
      },
      setFocusVisible: focusVisible => {
        this.setState({
          focusVisible
        });
      }
    });
  }

  componentDidMount() {
    this.foundation = new foundation_AvatarFoundation(this.adapter);
    this.foundation.init();
  }

  componentDidUpdate(prevProps) {
    if (this.props.src && this.props.src !== prevProps.src) {
      const image = new Image(0, 0);
      image.src = this.props.src;

      image.onload = () => {
        this.setState({
          isImgExist: true
        });
      };

      image.onerror = () => {
        this.setState({
          isImgExist: false
        });
      };

      image.onabort = () => {
        this.setState({
          isImgExist: false
        });
      };
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  onEnter(e) {
    this.foundation.handleEnter(e);
  }

  onLeave(e) {
    this.foundation.handleLeave(e);
  }

  handleError() {
    this.foundation.handleImgLoadError();
  }

  handleKeyDown(event) {
    const {
      onClick
    } = this.props;

    switch (event.key) {
      case "Enter":
        onClick(event);
        handlePrevent(event);
        break;

      case 'Escape':
        event.target.blur();
        break;

      default:
        break;
    }
  }

  render() {
    var _context6, _context7, _context8;

    // eslint-disable-next-line max-len, no-unused-vars
    const _a = this.props,
          {
      shape,
      children,
      size,
      color,
      className,
      hoverMask,
      onClick,
      imgAttr,
      src,
      srcSet,
      style,
      alt
    } = _a,
          others = avatar_rest(_a, ["shape", "children", "size", "color", "className", "hoverMask", "onClick", "imgAttr", "src", "srcSet", "style", "alt"]);

    const {
      isImgExist,
      hoverContent,
      focusVisible
    } = this.state;
    const isImg = src && isImgExist;
    const avatarCls = classnames_default()(avatar_prefixCls, {
      [concat_default()(_context6 = "".concat(avatar_prefixCls, "-")).call(_context6, shape)]: shape,
      [concat_default()(_context7 = "".concat(avatar_prefixCls, "-")).call(_context7, size)]: size,
      [concat_default()(_context8 = "".concat(avatar_prefixCls, "-")).call(_context8, color)]: color && !isImg,
      ["".concat(avatar_prefixCls, "-img")]: isImg,
      ["".concat(avatar_prefixCls, "-focus")]: focusVisible
    }, className);
    const hoverRender = hoverContent ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(avatar_prefixCls, "-hover"),
      "x-semi-prop": "hoverContent"
    }, hoverContent) : null;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", assign_default()({}, others, {
      style: style,
      className: avatarCls,
      onClick: onClick,
      onMouseEnter: this.onEnter,
      onMouseLeave: this.onLeave,
      role: 'listitem'
    }), this.getContent(), hoverRender);
  }

}
avatar_Avatar.defaultProps = {
  size: 'medium',
  color: 'grey',
  shape: 'circle',
  onClick: function_noop,
  onMouseEnter: function_noop,
  onMouseLeave: function_noop
};
avatar_Avatar.propTypes = {
  children: prop_types_default.a.node,
  color: prop_types_default.a.oneOf(colorSet),
  shape: prop_types_default.a.oneOf(shapeSet),
  size: prop_types_default.a.oneOf(avatar_sizeSet),
  hoverMask: prop_types_default.a.node,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  imgAttr: prop_types_default.a.object,
  src: prop_types_default.a.string,
  srcSet: prop_types_default.a.string,
  alt: prop_types_default.a.string,
  onError: prop_types_default.a.func,
  onClick: prop_types_default.a.func,
  onMouseEnter: prop_types_default.a.func,
  onMouseLeave: prop_types_default.a.func
};
// CONCATENATED MODULE: ./avatar/avatarGroup.tsx












var avatarGroup_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};






const avatarGroup_sizeSet = avatar_constants_strings.SIZE;
const avatarGroup_shapeSet = avatar_constants_strings.SHAPE;
const overlapFromSet = avatar_constants_strings.OVERLAP_FROM;
const avatarGroup_prefixCls = avatar_constants_cssClasses.PREFIX;
class avatarGroup_AvatarGroup extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  getAllAvatars() {
    const {
      children
    } = this.props;

    if (children) {
      return is_array_default()(children) ? external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children.toArray(children) : [children];
    }

    return [];
  }

  getMergeAvatars(avatars) {
    const {
      maxCount
    } = this.props;
    let renderAvatars = avatars;
    const restNumber = avatars.length - maxCount;

    const normalAvatars = slice_default()(avatars).call(avatars, 0, maxCount);

    const restAvatars = slice_default()(avatars).call(avatars, maxCount);

    if (restNumber > 0) {
      const more = this.renderMoreAvatar(restNumber, restAvatars);
      normalAvatars.push(more);
      renderAvatars = normalAvatars;
    }

    return renderAvatars;
  }

  renderMoreAvatar(restNumber, restAvatars) {
    var _context2;

    const {
      renderMore
    } = this.props;
    const moreCls = classnames_default()("".concat(avatarGroup_prefixCls, "-item-more"));
    const restAvatarAlt = restAvatars === null || restAvatars === void 0 ? void 0 : reduce_default()(restAvatars).call(restAvatars, (pre, cur) => {
      var _context;

      const {
        children,
        alt
      } = cur.props;
      const avatarInfo = alt !== null && alt !== void 0 ? alt : typeof children === 'string' ? children : '';

      if (avatarInfo.length === 0) {
        return pre;
      }

      return pre.length > 0 ? concat_default()(_context = "".concat(pre, ",")).call(_context, avatarInfo) : avatarInfo;
    }, '');

    const finalAlt = concat_default()(_context2 = " Number of remaining Avatars\uFF1A".concat(restNumber, ",")).call(_context2, restAvatarAlt);

    let moreAvatar = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(avatar_Avatar, {
      className: moreCls,
      key: "_+n",
      alt: finalAlt
    }, "+".concat(restNumber));

    if (isFunction_default()(renderMore)) {
      moreAvatar = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
        key: "_+n"
      }, renderMore(restNumber, restAvatars));
    }

    return moreAvatar;
  }

  render() {
    // eslint-disable-next-line no-unused-vars
    const _a = this.props,
          {
      children,
      maxCount,
      overlapFrom,
      size,
      shape,
      renderMore
    } = _a,
          rest = avatarGroup_rest(_a, ["children", "maxCount", "overlapFrom", "size", "shape", "renderMore"]);

    let inner;
    const groupCls = classnames_default()({
      ["".concat(avatarGroup_prefixCls, "-group")]: true
    });

    if (children) {
      var _context3;

      const avatars = this.getAllAvatars();
      inner = map_default()(_context3 = isNumber_default()(maxCount) ? this.getMergeAvatars(avatars) : avatars).call(_context3, (itm, index) => {
        var _context4, _context5;

        const className = classnames_default()(get_default()(itm.props, 'className'), {
          [concat_default()(_context4 = "".concat(avatarGroup_prefixCls, "-item-start-")).call(_context4, index)]: overlapFrom === 'start',
          [concat_default()(_context5 = "".concat(avatarGroup_prefixCls, "-item-end-")).call(_context5, index)]: overlapFrom === 'end'
        });
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(itm, assign_default()(assign_default()({}, rest), {
          className,
          size,
          shape,
          key: index
        }));
      });
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: groupCls,
      role: 'list'
    }, inner);
  }

}
avatarGroup_AvatarGroup.defaultProps = {
  size: 'medium',
  shape: 'circle',
  overlapFrom: 'start'
};
avatarGroup_AvatarGroup.propTypes = {
  children: prop_types_default.a.node,
  shape: prop_types_default.a.oneOf(avatarGroup_shapeSet),
  size: prop_types_default.a.oneOf(avatarGroup_sizeSet),
  maxCount: prop_types_default.a.number,
  renderMore: prop_types_default.a.func,
  overlapFrom: prop_types_default.a.oneOf(overlapFromSet)
};
// CONCATENATED MODULE: ../semi-foundation/backtop/constants.ts

const backtop_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-backtop")
};
const backtop_constants_strings = {};

// CONCATENATED MODULE: ../semi-foundation/node_modules/@douyinfe/semi-animation/lib/es/src/getEasing.js







function getEasing_minMax(val, min, max) {
  return Math.min(Math.max(val, min), max);
}

function getEasing_parseEasingParameters(string) {
  var _context;

  const match = /\(([^)]+)\)/.exec(string);
  return match ? map_default()(_context = match[1].split(',')).call(_context, p => parse_float_default()(p)) : [];
} // Elastic easing adapted from jQueryUI http://api.jqueryui.com/easings/


function getEasing_elastic() {
  let amplitude = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  let period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
  const a = getEasing_minMax(amplitude, 1, 10);
  const p = getEasing_minMax(period, 0.1, 2);
  return t => t === 0 || t === 1 ? t : -a * Math.pow(2, 10 * (t - 1)) * Math.sin((t - 1 - p / (Math.PI * 2) * Math.asin(1 / a)) * (Math.PI * 2) / p);
} // anime.js/src/index.js


const getEasing_easingMap = (() => {
  const names = ['Quad', 'Cubic', 'Quart', 'Quint', 'Sine', 'Expo', 'Circ', 'Back', 'Elastic']; // Approximated Penner equations http://matthewlein.com/ceaser/

  const curves = {
    In: [[0.55, 0.085, 0.68, 0.53]
    /* inQuad */
    , [0.55, 0.055, 0.675, 0.19]
    /* inCubic */
    , [0.895, 0.03, 0.685, 0.22]
    /* inQuart */
    , [0.755, 0.05, 0.855, 0.06]
    /* inQuint */
    , [0.47, 0.0, 0.745, 0.715]
    /* inSine */
    , [0.95, 0.05, 0.795, 0.035]
    /* inExpo */
    , [0.6, 0.04, 0.98, 0.335]
    /* inCirc */
    , [0.6, -0.28, 0.735, 0.045]
    /* inBack */
    , getEasing_elastic
    /* inElastic */
    ],
    Out: [[0.25, 0.46, 0.45, 0.94]
    /* outQuad */
    , [0.215, 0.61, 0.355, 1.0]
    /* outCubic */
    , [0.165, 0.84, 0.44, 1.0]
    /* outQuart */
    , [0.23, 1.0, 0.32, 1.0]
    /* outQuint */
    , [0.39, 0.575, 0.565, 1.0]
    /* outSine */
    , [0.19, 1.0, 0.22, 1.0]
    /* outExpo */
    , [0.075, 0.82, 0.165, 1.0]
    /* outCirc */
    , [0.175, 0.885, 0.32, 1.275]
    /* outBack */
    , (a, p) => t => 1 - getEasing_elastic(a, p)(1 - t)
    /* outElastic */
    ],
    InOut: [[0.455, 0.03, 0.515, 0.955]
    /* inOutQuad */
    , [0.645, 0.045, 0.355, 1.0]
    /* inOutCubic */
    , [0.77, 0.0, 0.175, 1.0]
    /* inOutQuart */
    , [0.86, 0.0, 0.07, 1.0]
    /* inOutQuint */
    , [0.445, 0.05, 0.55, 0.95]
    /* inOutSine */
    , [1.0, 0.0, 0.0, 1.0]
    /* inOutExpo */
    , [0.785, 0.135, 0.15, 0.86]
    /* inOutCirc */
    , [0.68, -0.55, 0.265, 1.55]
    /* inOutBack */
    , (a, p) => t => t < 0.5 ? getEasing_elastic(a, p)(t * 2) / 2 : 1 - getEasing_elastic(a, p)(t * -2 + 2) / 2
    /* inOutElastic */
    ]
  };
  const eases = {
    linear: [0.25, 0.25, 0.75, 0.75]
  };

  for (const coords of keys_default()(curves)) {
    var _context2;

    for_each_default()(_context2 = curves[coords]).call(_context2, (ease, i) => {
      eases['ease' + coords + names[i]] = ease;
    });
  }

  return eases;
})();
/**
 * get easing function
 * @param {string|Function} easing
 * @returns {Function}
 */

function getEasing_getEasing(easing) {
  if (typeof easing === 'function') {
    return easing;
  }

  if (!easing || typeof easing !== 'string') {
    easing = 'linear';
  } else {
    easing = trim_default()(easing).call(easing);
  }

  let name = easing.split('(')[0];
  const args = getEasing_parseEasingParameters(easing);
  let ease;

  if (name === 'cubic-bezier' || name === 'cubicBezier') {
    return src_default()(...(args.length ? args : getEasing_easingMap.linear));
  } else {
    // eslint-disable-next-line eqeqeq
    if (!name || typeof name !== 'string' || typeof name === 'string' && getEasing_easingMap[name] == null) {
      name = 'linear';
    }

    ease = getEasing_easingMap[name];

    if (typeof ease === 'function') {
      return ease(...args);
    } else if (args.length) {
      return src_default()(...args);
    } else {
      return src_default()(...ease);
    }
  }
}
// CONCATENATED MODULE: ../semi-foundation/node_modules/@douyinfe/semi-animation/lib/es/src/constants.js
const src_constants_events = ['start', 'frame', 'pause', 'resume', 'stop', 'rest'];
// CONCATENATED MODULE: ../semi-foundation/node_modules/@douyinfe/semi-animation/lib/es/src/utils/Event.js





class src_utils_Event_Event {
  constructor() {
    this._eventMap = new core_js_stable_map_default.a();
  }

  on(event, callback) {
    if (event && typeof callback === 'function') {
      this._eventMap.has(event) || this._eventMap.set(event, []);

      this._eventMap.get(event).push(callback);
    }

    return this;
  }

  once(event, callback) {
    var _this = this;

    if (event && typeof callback === 'function') {
      const fn = function () {
        callback(...arguments);

        _this.off(event, fn);
      };

      this.on(event, fn);
    }
  }

  off(event, callback) {
    if (event) {
      if (typeof callback === 'function') {
        const callbacks = this._eventMap.get(event);

        if (is_array_default()(callbacks) && callbacks.length) {
          let index = -1; // eslint-disable-next-line max-depth

          while ((index = find_index_default()(callbacks).call(callbacks, cb => cb === callback)) > -1) {
            splice_default()(callbacks).call(callbacks, index, 1);
          }
        } // eslint-disable-next-line eqeqeq

      } else if (callback == null) {
        this._eventMap.delete(event);
      }
    }

    return this;
  }

  emit(event) {
    var _context;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (!this._eventMap.has(event)) {
      return false;
    }

    for_each_default()(_context = this._eventMap.get(event)).call(_context, callback => callback(...args));

    return true;
  }

}
// CONCATENATED MODULE: ../semi-foundation/node_modules/@douyinfe/semi-animation/lib/es/src/shouldUseBezier.js
function shouldUseBezier_shouldUseBezier(config) {
  return Boolean(config && typeof config === 'object' && (config.duration > 0 || typeof config.easing === 'string' || typeof config.easing === 'function'));
}
// CONCATENATED MODULE: ../semi-foundation/node_modules/@douyinfe/semi-animation/lib/es/src/shouldStopAnimation.js


/**
 * usage assumption: currentStyle values have already been rendered but it says
 * nothing of whether currentStyle is stale (see unreadPropStyle)
 *
 * @param {object} currentStyle
 * @param {object} style
 * @param {object} currentVelocity
 * @param {number} startTime
 * @param {number} nowTime
 *
 * @returns {boolean}
 */
// eslint-disable-next-line max-len

function shouldStopAnimation_shouldStopAnimation(currentStyle, style, currentVelocity, startTime, nowTime) {
  for (const key of keys_default()(style)) {
    const styleValue = style[key];
    const value = typeof styleValue === 'number' ? styleValue : styleValue.val;

    if (typeof styleValue === 'object' && styleValue.done) {
      continue;
    }

    if (shouldUseBezier_shouldUseBezier(styleValue) && startTime && nowTime && styleValue.duration) {
      if (styleValue.duration + startTime <= nowTime || value !== currentStyle[key]) {
        return false;
      }
    } else if (typeof currentVelocity[key] === 'number' && currentVelocity[key] !== 0) {
      return false;
    } // stepper will have already taken care of rounding precision errors, so
    // won't have such thing as 0.9999 !=== 1


    if (currentStyle[key] !== value) {
      return false;
    }
  }

  return true;
}
// CONCATENATED MODULE: ../semi-foundation/node_modules/@douyinfe/semi-animation/lib/es/src/stripStyle.js
/* eslint-disable no-restricted-syntax */
function stripStyle_stripStyle(style) {
  const ret = {};

  for (const key in style) {
    if (!Object.prototype.hasOwnProperty.call(style, key)) {
      continue;
    }

    ret[key] = typeof style[key] === 'number' ? style[key] : style[key].val;
  }

  return ret;
}
// CONCATENATED MODULE: ../semi-foundation/node_modules/@douyinfe/semi-animation/lib/es/src/stepper.js
/**
 * @file
 *
 * react-motion/src/stepper.js
 */
// stepper is used a lot. Saves allocation to return the same array wrapper.
// This is fine and danger-free against mutations because the callsite
// immediately destructures it and gets the numbers inside without passing the
// array reference around.
const stepper_reusedTuple = [0, 0];
/**
 *
 * @param {number} secondPerFrame
 * @param {number} x
 * @param {number} v
 * @param {number} destX
 * @param {number} k
 * @param {number} b
 * @param {number} precision
 */
// eslint-disable-next-line max-len

function stepper_stepper(secondPerFrame, x, v, destX, k, b, precision) {
  // Spring stiffness, in kg / s^2
  // for animations, destX is really spring length (spring at rest). initial
  // position is considered as the stretched/compressed position of a spring
  const Fspring = -k * (x - destX); // Damping, in kg / s

  const Fdamper = -b * v; // usually we put mass here, but for animation purposes, specifying mass is a
  // bit redundant. you could simply adjust k and b accordingly
  // let a = (Fspring + Fdamper) / mass;

  const a = Fspring + Fdamper;
  const newV = v + a * secondPerFrame;
  const newX = x + newV * secondPerFrame;

  if (Math.abs(newV) < precision && Math.abs(newX - destX) < precision) {
    stepper_reusedTuple[0] = destX;
    stepper_reusedTuple[1] = 0;
    return stepper_reusedTuple;
  }

  stepper_reusedTuple[0] = newX;
  stepper_reusedTuple[1] = newV;
  return stepper_reusedTuple;
}
// CONCATENATED MODULE: ../semi-foundation/node_modules/@douyinfe/semi-animation/lib/es/src/mapToZero.js

// currently used to initiate the velocity style object to 0
function mapToZero_mapToZero(obj) {
  const ret = {};
  const objKeys = obj && keys_default()(obj) || [];

  for (const key of objKeys) {
    ret[key] = 0;
  }

  return ret;
}
// CONCATENATED MODULE: ../semi-foundation/node_modules/@douyinfe/semi-animation/lib/es/src/presets.js
/**
 * stiffness is like tension
 * damping is like friction
 */
/* harmony default export */ var es_src_presets = ({
  default: {
    tension: 170,
    friction: 26
  },
  gentle: {
    tension: 120,
    friction: 14
  },
  wobbly: {
    tension: 180,
    friction: 12
  },
  stiff: {
    tension: 210,
    friction: 20
  },
  slow: {
    tension: 280,
    friction: 60
  },
  molasses: {
    tension: 280,
    friction: 120
  }
});
// CONCATENATED MODULE: ../semi-foundation/node_modules/@douyinfe/semi-animation/lib/es/src/wrapValue.js






const src_wrapValue_defaultConfig = assign_default()(assign_default()({}, es_src_presets.default), {
  precision: 0.01
});

function wrapValue_wrapValue(val) {
  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (shouldUseBezier_shouldUseBezier(config)) {
    const easing = getEasing_getEasing(config.easing);
    const duration = typeof config.duration === 'number' && config.duration > 0 ? config.duration : 1000;
    config = assign_default()(assign_default()({}, config), {
      easing,
      duration
    });
  }

  let wrapped = assign_default()(assign_default()(assign_default()({}, src_wrapValue_defaultConfig), config), {
    done: false
  });

  if (val && typeof val === 'object' && 'val' in val) {
    if (shouldUseBezier_shouldUseBezier(val)) {
      const easing = getEasing_getEasing(val.easing);
      const duration = typeof val.duration === 'number' && val.duration > 0 ? val.duration : parse_int_default()(config.duration) || 1000;
      val = assign_default()(assign_default()({}, val), {
        easing,
        duration
      });
    }

    wrapped = assign_default()(assign_default()({}, wrapped), val);
  } else {
    wrapped = assign_default()(assign_default()({}, wrapped), {
      val
    });
  }

  return wrapped;
}
// CONCATENATED MODULE: ../semi-foundation/node_modules/@douyinfe/semi-animation/lib/es/src/Animation.js






/* eslint-disable max-depth */

/* eslint-disable eqeqeq */

/* eslint-disable max-lines-per-function */








const src_Animation_now = () => now_default()();

const Animation_msPerFrame = 1000 / 60;
/**
 * @summary
 *
 * Lifecycle hook:
 * start, pause, resume, stop, frame, rest
 *
 * Binding method:
 * const animation = new Animation (); animation.on ('start | frame | rest ', () => {});
 */

class es_src_Animation_Animation extends src_utils_Event_Event {
  constructor() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super();
    this._props = assign_default()({}, props);
    this._config = assign_default()({}, config);
    this.initStates();
  }

  _wrapConfig(object, config) {
    config = config && typeof config === 'object' ? config : this._config;
    const ret = {};

    for (const key of keys_default()(object)) {
      ret[key] = wrapValue_wrapValue(object[key], config);
    }

    return ret;
  }

  initStates(props, config) {
    props = props && typeof props === 'object' ? props : this._props;
    config = config && typeof config === 'object' ? config : this._config;
    const {
      from,
      to
    } = props;
    this._from = {};

    if (from && typeof from) {
      for (const key of keys_default()(from)) {
        this._from[key] = typeof from[key] === 'object' && from[key].val ? from[key].val : from[key];
      }
    }

    this._to = this._wrapConfig(to, config);
    this._delay = parse_int_default()(config.delay) || 0;
    const currentStyle = this._from && stripStyle_stripStyle(this._from) || stripStyle_stripStyle(this._to);
    const currentVelocity = mapToZero_mapToZero(currentStyle);
    this._currentStyle = assign_default()({}, currentStyle);
    this._currentVelocity = assign_default()({}, currentVelocity);
    this._lastIdealStyle = assign_default()({}, currentStyle);
    this._lastIdealVelocity = assign_default()({}, currentVelocity);
    this.resetPlayStates();
    this._frameCount = 0;
    this._prevTime = 0;
  }

  animate() {
    if (this._timer != null) {
      return;
    }

    this._timer = requestAnimationFrame(timestamp => {
      const nowTime = src_Animation_now(); // stop animation and emit onRest event

      if (shouldStopAnimation_shouldStopAnimation(this._currentStyle, this._to, this._currentVelocity, this._startedTime || nowTime, nowTime) || this._ended || this._stopped) {
        if (this._wasAnimating && !this._ended && !this._stopped) {
          // should emit reset in settimeout for delay msPerframe
          this._timer = set_timeout_default()(() => {
            clearTimeout(this._timer);
            this._timer = null;
            this._ended = true;
            this.emit('rest', this.getCurrentStates());
          }, Animation_msPerFrame);
        }

        this.resetPlayStates();
        return;
      }

      if (!this._started) {
        this._started = true;
        this.emit('start', this.getCurrentStates());
      }

      this._stopped = false;
      this._paused = false;
      this._wasAnimating = true;

      if (this._startedTime === 0) {
        this._startedTime = nowTime;
      }

      const currentTime = nowTime;
      const timeDelta = currentTime - this._prevTime;
      this._prevTime = currentTime;

      if (currentTime - this._startedTime < this._delay) {
        this._timer = null;
        this.animate();
      }

      const newLastIdealStyle = {};
      const newLastIdealVelocity = {};
      const newCurrentStyle = {};
      const newCurrentVelocity = {};
      const toKeys = this._to && keys_default()(this._to) || [];

      for (const key of toKeys) {
        const styleValue = this._to[key];
        this._accumulatedTime[key] = typeof this._accumulatedTime[key] !== 'number' ? timeDelta : this._accumulatedTime[key] + timeDelta;
        const from = this._from[key] != null && typeof this._from[key] === 'object' ? this._from[key].val : this._from[key];
        const to = styleValue.val;

        if (typeof styleValue === 'number') {
          newCurrentStyle[key] = styleValue;
          newCurrentVelocity[key] = 0;
          newLastIdealStyle[key] = styleValue;
          newLastIdealVelocity[key] = 0;
        } else {
          let newLastIdealStyleValue = this._lastIdealStyle[key];
          let newLastIdealVelocityValue = this._lastIdealVelocity[key];

          if (shouldUseBezier_shouldUseBezier(this._config) || shouldUseBezier_shouldUseBezier(styleValue)) {
            // easing
            const {
              easing,
              duration
            } = styleValue;
            newLastIdealStyleValue = from + easing((currentTime - this._startedTime) / duration) * (to - from);

            if (currentTime >= this._startedTime + duration) {
              newLastIdealStyleValue = to;
              styleValue.done = true;
            }

            newLastIdealStyle[key] = newLastIdealStyleValue;
            newCurrentStyle[key] = newLastIdealStyleValue;
          } else if (to != null && to === this._currentStyle[key]) {
            newCurrentStyle[key] = to;
            newCurrentVelocity[key] = 0;
            newLastIdealStyle[key] = to;
            newLastIdealVelocity[key] = 0;
          } else {
            // spring
            const currentFrameCompletion = (this._accumulatedTime[key] - Math.floor(this._accumulatedTime[key] / Animation_msPerFrame) * Animation_msPerFrame) / Animation_msPerFrame;
            const framesToCatchUp = Math.floor(this._accumulatedTime[key] / Animation_msPerFrame);

            for (let i = 0; i < framesToCatchUp; i++) {
              [newLastIdealStyleValue, newLastIdealVelocityValue] = stepper_stepper(Animation_msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.tension, styleValue.friction, styleValue.precision);
            }

            const [nextIdealX, nextIdealV] = stepper_stepper(Animation_msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.tension, styleValue.friction, styleValue.precision);
            newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
            newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
            newLastIdealStyle[key] = newLastIdealStyleValue;
            newLastIdealVelocity[key] = newLastIdealVelocityValue;
            this._accumulatedTime[key] -= framesToCatchUp * Animation_msPerFrame;
          }
        }
      }

      this._timer = null;
      this._currentStyle = assign_default()({}, newCurrentStyle);
      this._currentVelocity = assign_default()({}, newCurrentVelocity);
      this._lastIdealStyle = assign_default()({}, newLastIdealStyle);
      this._lastIdealVelocity = assign_default()({}, newLastIdealVelocity); // console.log(newCurrentStyle);

      if (!this._destroyed) {
        this.emit('frame', this.getCurrentStates());
        this.animate();
      }
    });
  }

  start() {
    this._prevTime = src_Animation_now();
    this._startedTime = src_Animation_now();
    this.animate();
  }

  end() {
    if (!this._ended) {
      this._ended = true;
      this._currentStyle = this.getFinalStates();
      this.emit('frame', this.getFinalStates());
      this.emit('rest', this.getFinalStates());
    }

    this.destroy();
  }

  pause() {
    if (!this._paused) {
      this._pausedTime = src_Animation_now();
      this._paused = true;
      this.emit('pause', this.getCurrentStates());
      this.destroy();
      this._destroyed = false;
    }
  }

  resume() {
    if (this._started && this._paused) {
      const nowTime = src_Animation_now();
      const pausedDuration = nowTime - this._pausedTime;
      this._paused = false; // should add with pausedDuration

      this._startedTime += pausedDuration;
      this._prevTime += pausedDuration;
      this._pausedTime = 0;
      this.emit('resume', this.getCurrentStates());
      this.animate();
    }
  }

  stop() {
    this.destroy();

    if (!this._stopped) {
      this._stopped = true; // this.emit('frame', this.getInitialStates());

      this.emit('stop', this.getInitialStates());
      this.initStates();
    }
  }

  destroy() {
    cancelAnimationFrame(this._timer);
    clearTimeout(this._timer);
    this._timer = null;
    this._destroyed = true;
  }

  resetPlayStates() {
    this._started = false;
    this._stopped = false;
    this._ended = false;
    this._paused = false;
    this._destroyed = false;
    this._timer = null;
    this._wasAnimating = false;
    this._accumulatedTime = {};
    this._startedTime = 0;
    this._pausedTime = 0;
  }

  reset() {
    this.destroy();
    this.initStates();
  }

  reverse() {
    this.destroy();

    const props = assign_default()({}, this._props);

    const [from, to] = [props.to, props.from];
    props.from = from;
    props.to = to;
    this._props = assign_default()({}, props);
    this.initStates();
  }

  getCurrentStates() {
    return assign_default()({}, this._currentStyle);
  }

  getInitialStates() {
    return assign_default()({}, stripStyle_stripStyle(this._props.from));
  }

  getFinalStates() {
    return assign_default()({}, stripStyle_stripStyle(this._props.to));
  }

}
// CONCATENATED MODULE: ../semi-foundation/node_modules/@douyinfe/semi-animation/lib/es/src/interpolate.js




/**
 *
 * @param {number|number[]|string|string[]} from
 * @param {number|number[]|string|string[]} to
 * @param {number} ratio
 * @param {Function} [parser]
 * @param {Function} [formatter]
 * @returns {any}
*/
// eslint-disable-next-line max-len
function interpolate_interpolate(from, to) {
  let ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  let parser = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  let formatter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

  if (typeof parser === 'function') {
    from = parser(from);
    to = parser(to);
  }

  if (typeof from === 'string' || typeof from === 'number') {
    from = [parse_float_default()(from)];
  }

  if (typeof to === 'string' || typeof to === 'number') {
    to = [parse_float_default()(to)];
  }

  const result = [];

  if (is_array_default()(from) && is_array_default()(to)) {
    for_each_default()(from).call(from, (fromVal, idx) => {
      fromVal = parse_float_default()(fromVal);

      const toVal = parse_float_default()(to[idx]);

      result.push((toVal - fromVal) * ratio + fromVal);
    });
  }

  if (typeof formatter === 'function') {
    return formatter(result);
  } else {
    return result;
  }
}
// CONCATENATED MODULE: ../semi-foundation/node_modules/@douyinfe/semi-animation/lib/es/index.js






// CONCATENATED MODULE: ../semi-foundation/backtop/foundation.ts



class foundation_BackTopFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));

    this.scrollTo = (targetNode, from, to) => {
      const {
        duration
      } = this.getProps();
      this.animation = new es_src_Animation_Animation({
        from: {
          scrollTop: from
        },
        to: {
          scrollTop: to
        }
      }, {
        duration,
        easing: 'easeInOutCubic'
      });
      this.animation.on('frame', _ref => {
        let {
          scrollTop
        } = _ref;

        this._adapter.targetScrollToTop(targetNode, scrollTop);
      });
      this.animation.start();
    };

    this.handleScroll = () => {
      const {
        target,
        visibilityHeight
      } = this.getProps();
      const targetNode = target();

      const update = () => {
        const scrollTop = this.getScroll(targetNode);

        this._adapter.updateVisible(scrollTop > visibilityHeight);
      };

      requestAnimationFrame(update);
    };
  }

  init() {
    const {
      target
    } = this.getProps();
    const targetNode = target();
    targetNode.addEventListener('scroll', this.handleScroll);
    this.handleScroll();
  }

  destroy() {
    const {
      target
    } = this.getProps();
    const targetNode = target();
    targetNode && targetNode.removeEventListener('scroll', this.handleScroll);
    this.animation && this.animation.destroy();
  }

  getScroll(target) {
    if (this._adapter.isWindowUndefined()) {
      return 0;
    }

    const prop = 'pageYOffset';
    const method = 'scrollTop';

    const isWindow = this._adapter.targetIsWindow(target);

    const scroll = isWindow ? target[prop] : target[method];
    return scroll;
  }

  setScrollTop(to) {
    const {
      target
    } = this.getProps();
    const targetNode = target();
    const from = this.getScroll(targetNode);
    this.scrollTo(targetNode, from, to);
  }

  onClick(e) {
    this.setScrollTop(0);

    this._adapter.notifyClick(e);
  }

}
// EXTERNAL MODULE: ../semi-foundation/backtop/backtop.scss
var backtop = __webpack_require__("vSOm");

// CONCATENATED MODULE: ../semi-foundation/button/constants.ts

const button_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-button")
};
const button_constants_strings = {
  sizes: ['default', 'small', 'large'],
  iconPositions: ['left', 'right'],
  htmlTypes: ['button', 'reset', 'submit'],
  btnTypes: ['primary', 'secondary', 'tertiary', 'warning', 'danger'],
  themes: ['solid', 'borderless', 'light'],
  DEFAULT_ICON_SIZE: 'default',
  DEFAULT_ICON_POSITION: 'left'
};
const button_constants_numbers = {};

// CONCATENATED MODULE: ../semi-foundation/icons/constants.ts

const icons_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-icon")
};
const icons_constants_strings = {
  SIZE: ['extra-small', 'small', 'default', 'large', 'extra-large', 'custom'],
  // use in svg xhref. No need to respond to the change of prefixCls, always constant
  ICON_PREFIX: 'semi-icon-'
};
const icons_constants_numbers = {};

// EXTERNAL MODULE: ../semi-foundation/button/button.scss
var button_button = __webpack_require__("223E");

// CONCATENATED MODULE: ./button/Button.tsx







var Button_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable react/destructuring-assignment */








const btnSizes = button_constants_strings.sizes;
const {
  htmlTypes,
  btnTypes
} = button_constants_strings; // TODO: icon configuration

class Button_Button extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    var _context;

    const _a = this.props,
          {
      children,
      block,
      htmlType,
      loading,
      circle,
      className,
      style,
      disabled,
      size,
      theme,
      type,
      prefixCls,
      iconPosition
    } = _a,
          attr = Button_rest(_a, ["children", "block", "htmlType", "loading", "circle", "className", "style", "disabled", "size", "theme", "type", "prefixCls", "iconPosition"]);

    const baseProps = assign_default()(assign_default()({
      disabled
    }, omit_default()(attr, ['x-semi-children-alias'])), {
      className: classnames_default()(prefixCls, {
        [concat_default()(_context = "".concat(prefixCls, "-")).call(_context, type)]: !disabled && type,
        ["".concat(prefixCls, "-disabled")]: disabled,
        ["".concat(prefixCls, "-size-large")]: size === 'large',
        ["".concat(prefixCls, "-size-small")]: size === 'small',
        // [`${prefixCls}-loading`]: loading,
        ["".concat(prefixCls, "-light")]: theme === 'light',
        ["".concat(prefixCls, "-block")]: block,
        ["".concat(prefixCls, "-circle")]: circle,
        ["".concat(prefixCls, "-borderless")]: theme === 'borderless'
      }, className),
      type: htmlType,
      'aria-disabled': disabled
    });

    const xSemiProps = {};

    if (!(className && includes_default()(className).call(className, '-with-icon'))) {
      xSemiProps['x-semi-prop'] = this.props['x-semi-children-alias'] || 'children';
    }

    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/button-has-type
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("button", assign_default()({}, baseProps, {
        onClick: this.props.onClick,
        onMouseDown: this.props.onMouseDown,
        style: style
      }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", assign_default()({
        className: "".concat(prefixCls, "-content"),
        onClick: e => disabled && e.stopPropagation()
      }, xSemiProps), children))
    );
  }

}
Button_Button.defaultProps = {
  disabled: false,
  size: 'default',
  type: 'primary',
  theme: 'light',
  block: false,
  htmlType: 'button',
  onMouseDown: function_noop,
  onClick: function_noop,
  onMouseEnter: function_noop,
  onMouseLeave: function_noop,
  prefixCls: button_constants_cssClasses.PREFIX
};
Button_Button.propTypes = {
  children: prop_types_default.a.node,
  disabled: prop_types_default.a.bool,
  prefixCls: prop_types_default.a.string,
  style: prop_types_default.a.object,
  size: prop_types_default.a.oneOf(btnSizes),
  type: prop_types_default.a.oneOf(btnTypes),
  block: prop_types_default.a.bool,
  onClick: prop_types_default.a.func,
  onMouseDown: prop_types_default.a.func,
  circle: prop_types_default.a.bool,
  loading: prop_types_default.a.bool,
  htmlType: prop_types_default.a.oneOf(htmlTypes),
  theme: prop_types_default.a.oneOf(button_constants_strings.themes),
  className: prop_types_default.a.string,
  onMouseEnter: prop_types_default.a.func,
  onMouseLeave: prop_types_default.a.func,
  'aria-label': prop_types_default.a.string
};
// EXTERNAL MODULE: ../semi-foundation/button/iconButton.scss
var iconButton = __webpack_require__("u12T");

// CONCATENATED MODULE: ./iconButton/index.tsx







var iconButton_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable eqeqeq */










const iconSizes = icons_constants_strings.SIZE; // TODO: add a buttonGroup component
// TODO: icon configuration

class iconButton_IconButton extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    const _a = this.props,
          {
      children: originChildren,
      iconPosition,
      iconSize,
      iconStyle,
      style: originStyle,
      icon,
      noHorizontalPadding,
      theme,
      className,
      prefixCls,
      loading
    } = _a,
          otherProps = iconButton_rest(_a, ["children", "iconPosition", "iconSize", "iconStyle", "style", "icon", "noHorizontalPadding", "theme", "className", "prefixCls", "loading"]);

    const style = assign_default()({}, originStyle); // TODO: review check


    if (is_array_default()(noHorizontalPadding)) {
      includes_default()(noHorizontalPadding).call(noHorizontalPadding, 'left') && (style.paddingLeft = 0);
      includes_default()(noHorizontalPadding).call(noHorizontalPadding, 'right') && (style.paddingRight = 0);
    } else if (noHorizontalPadding === true) {
      style.paddingLeft = 0;
      style.paddingRight = 0;
    } else if (typeof noHorizontalPadding === 'string') {
      noHorizontalPadding === 'left' && (style.paddingLeft = 0);
      noHorizontalPadding === 'right' && (style.paddingRight = 0);
    }

    let finalChildren = null;
    let IconElem = null;

    if (loading && !otherProps.disabled) {
      IconElem = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(spin_icon, null);
    } else if ( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(icon)) {
      IconElem = icon;
    }

    const btnTextCls = classnames_default()({
      ["".concat(prefixCls, "-content-left")]: iconPosition === 'right',
      ["".concat(prefixCls, "-content-right")]: iconPosition === 'left'
    });
    const xSemiProp = this.props['x-semi-children-alias'] || 'children';
    const children = originChildren != null ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: btnTextCls,
      "x-semi-prop": xSemiProp
    }, originChildren) : null;

    if (iconPosition === 'left') {
      finalChildren = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, IconElem, children);
    } else {
      finalChildren = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, children, IconElem);
    }

    const iconBtnCls = classnames_default()(className, "".concat(prefixCls, "-with-icon"), {
      ["".concat(prefixCls, "-with-icon-only")]: children == null || children === '',
      ["".concat(prefixCls, "-loading")]: loading
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Button_Button, assign_default()({}, otherProps, {
      className: iconBtnCls,
      theme: theme,
      style: style
    }), finalChildren);
  }

}

iconButton_IconButton.defaultProps = {
  iconPosition: button_constants_strings.DEFAULT_ICON_POSITION,
  prefixCls: button_constants_cssClasses.PREFIX,
  loading: false,
  noHorizontalPadding: false,
  onMouseEnter: noop_default.a,
  onMouseLeave: noop_default.a
};
iconButton_IconButton.propTypes = {
  iconStyle: prop_types_default.a.object,
  style: prop_types_default.a.object,
  loading: prop_types_default.a.bool,
  prefixCls: prop_types_default.a.string,
  icon: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.string, prop_types_default.a.node]),
  iconSize: prop_types_default.a.oneOf(iconSizes),
  noHorizontalPadding: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.string, prop_types_default.a.array]),
  children: prop_types_default.a.node,
  theme: prop_types_default.a.string,
  iconPosition: prop_types_default.a.oneOf(button_constants_strings.iconPositions),
  className: prop_types_default.a.string,
  onMouseEnter: prop_types_default.a.func,
  onMouseLeave: prop_types_default.a.func
};
/* harmony default export */ var iconButton_0 = (iconButton_IconButton);
// CONCATENATED MODULE: ./backtop/index.tsx




var backtop_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};










const backtop_prefixCls = backtop_constants_cssClasses.PREFIX;

const getDefaultTarget = () => window;

class backtop_BackTop extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);
    this.state = {
      visible: false
    };
    this.foundation = new foundation_BackTopFoundation(this.adapter);
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      updateVisible: visible => {
        this.setState({
          visible
        });
      },
      notifyClick: e => {
        this.props.onClick && this.props.onClick(e);
      },
      targetIsWindow: target => target === window,
      isWindowUndefined: () => window === undefined,
      targetScrollToTop: (targetNode, scrollTop) => {
        if (targetNode === window) {
          document.body.scrollTop = scrollTop;
          document.documentElement.scrollTop = scrollTop;
        } else {
          targetNode.scrollTop = scrollTop;
        }
      }
    });
  }

  handleClick(e) {
    this.foundation.onClick(e);
  }

  renderDefault() {
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(iconButton_0, {
      theme: "light",
      icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronUp, null)
    });
  }

  render() {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const _a = this.props,
          {
      children,
      className,
      style,
      onClick,
      visibilityHeight,
      target
    } = _a,
          others = backtop_rest(_a, ["children", "className", "style", "onClick", "visibilityHeight", "target"]);

    const {
      visible
    } = this.state;
    const preCls = classnames_default()(backtop_prefixCls, className);
    const backtopBtn = children ? children : this.renderDefault();
    const content = visible ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({}, others, {
      className: preCls,
      style: style,
      onClick: e => this.handleClick(e),
      "x-semi-prop": "children"
    }), backtopBtn) : null;
    return content;
  }

}
backtop_BackTop.defaultProps = {
  visibilityHeight: 400,
  target: getDefaultTarget,
  duration: 450
};
backtop_BackTop.propTypes = {
  target: prop_types_default.a.func,
  visibilityHeight: prop_types_default.a.number,
  duration: prop_types_default.a.number,
  onClick: prop_types_default.a.func,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string
};
// CONCATENATED MODULE: ../semi-foundation/badge/constants.ts

const badge_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-badge")
};
const badge_constants_strings = {
  TYPE_SET: ['primary', 'secondary', 'tertiary', 'warning', 'danger'],
  THEME_SET: ['solid', 'light', 'inverted'],
  POS_SET: ['leftTop', 'leftBottom', 'rightTop', 'rightBottom']
};
const badge_constants_numbers = {};

// EXTERNAL MODULE: ../semi-foundation/badge/badge.scss
var badge = __webpack_require__("rU3k");

// CONCATENATED MODULE: ./badge/index.tsx








var badge_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};







const badge_prefixCls = badge_constants_cssClasses.PREFIX;
class badge_Badge extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    var _context, _context2, _context3;

    const {
      direction
    } = this.context; // DefaultPosition here, static can't get this

    const defaultPosition = direction === 'rtl' ? 'leftTop' : 'rightTop'; // eslint-disable-next-line max-len

    const _a = this.props,
          {
      count,
      dot,
      type,
      theme,
      position = defaultPosition,
      overflowCount,
      style,
      children,
      className
    } = _a,
          rest = badge_rest(_a, ["count", "dot", "type", "theme", "position", "overflowCount", "style", "children", "className"]);

    const custom = count && !(isNumber_default()(count) || isString_default()(count));
    const showBadge = count !== null && typeof count !== 'undefined';
    const wrapper = classnames_default()(className, {
      [concat_default()(_context = "".concat(badge_prefixCls, "-")).call(_context, type)]: !custom,
      [concat_default()(_context2 = "".concat(badge_prefixCls, "-")).call(_context2, theme)]: !custom,
      [concat_default()(_context3 = "".concat(badge_prefixCls, "-")).call(_context3, position)]: Boolean(position) && Boolean(children),
      ["".concat(badge_prefixCls, "-block")]: !children,
      ["".concat(badge_prefixCls, "-dot")]: dot,
      ["".concat(badge_prefixCls, "-count")]: !dot && !custom && showBadge,
      ["".concat(badge_prefixCls, "-custom")]: custom
    });
    let content;

    if (isNumber_default()(count)) {
      content = overflowCount && overflowCount < count ? "".concat(overflowCount, "+") : "".concat(count);
    } else {
      content = count;
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", assign_default()({
      className: badge_prefixCls
    }, rest), children, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: wrapper,
      style: style,
      "x-semi-prop": "count"
    }, dot ? null : content));
  }

}
badge_Badge.contextType = configProvider_context;
badge_Badge.propTypes = {
  count: prop_types_default.a.node,
  dot: prop_types_default.a.bool,
  type: prop_types_default.a.oneOf(badge_constants_strings.TYPE_SET),
  theme: prop_types_default.a.oneOf(badge_constants_strings.THEME_SET),
  position: prop_types_default.a.oneOf(badge_constants_strings.POS_SET),
  overflowCount: prop_types_default.a.number,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  children: prop_types_default.a.node,
  onClick: prop_types_default.a.func,
  onMouseEnter: prop_types_default.a.func,
  onMouseLeave: prop_types_default.a.func
};
badge_Badge.defaultProps = {
  dot: false,
  type: 'primary',
  theme: 'solid',
  className: '',
  onClick: () => noop_default.a,
  onMouseEnter: () => noop_default.a,
  onMouseLeave: () => noop_default.a
};
// CONCATENATED MODULE: ../semi-foundation/banner/constants.ts

const banner_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-banner")
};
const banner_constants_strings = {
  TYPE: ['info', 'success', 'danger', 'warning']
};

// CONCATENATED MODULE: ../semi-foundation/banner/foundation.ts


class foundation_BannerFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()(assign_default()({}, foundation_BannerFoundation.defaultAdapter), adapter));
  }

  removeBanner(e) {
    this._adapter.notifyClose(e);

    this._adapter.setVisible();
  }

}
// EXTERNAL MODULE: ../semi-foundation/banner/banner.scss
var banner_banner = __webpack_require__("nX4I");

// CONCATENATED MODULE: ./banner/index.tsx



/* eslint-disable max-len */











const banner_prefixCls = banner_constants_cssClasses.PREFIX;
const banner_types = banner_constants_strings.TYPE;
class banner_Banner extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.remove = e => {
      e && e.stopPropagation();
      this.foundation.removeBanner(e);
    };

    this.state = {
      visible: true
    };
    Object(warning["a" /* default */])('target' in this.props, '[Semi Banner] \'target\' has been deprecated, please write JSX directly instead.');
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      setVisible: () => {
        this.setState({
          visible: false
        });
      },
      notifyClose: e => {
        const {
          onClose
        } = this.props;
        onClose(e);
      }
    });
  }

  componentDidMount() {
    this.foundation = new foundation_BannerFoundation(this.adapter);
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  renderCloser() {
    const {
      closeIcon
    } = this.props;

    if (closeIcon === null) {
      return closeIcon;
    }

    const closer = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(iconButton_0, {
      className: "".concat(banner_prefixCls, "-close"),
      onClick: this.remove,
      icon: closeIcon || /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClose, {
        "x-semi-prop": "closeIcon",
        "aria-hidden": true
      }),
      theme: "borderless",
      size: "small",
      type: "tertiary",
      "aria-label": 'Close'
    });
    return closer;
  }

  renderIcon() {
    const {
      type,
      icon
    } = this.props;
    const iconMap = {
      warning: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconAlertTriangle, {
        size: "large",
        "aria-label": 'warning'
      }),
      success: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconTickCircle, {
        size: "large",
        "aria-label": 'success'
      }),
      info: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconInfoCircle, {
        size: "large",
        "aria-label": 'info'
      }),
      danger: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconAlertCircle, {
        size: "large",
        "aria-label": 'danger'
      })
    };
    let iconType = iconMap[type];
    const iconCls = classnames_default()({
      ["".concat(banner_prefixCls, "-icon")]: true // [prefixCls + '-' + type]: true,

    });

    if (typeof icon !== 'undefined') {
      iconType = icon;
    }

    if (iconType) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: iconCls,
        "x-semi-prop": "icon"
      }, iconType);
    }

    return null;
  }

  render() {
    var _context;

    const {
      children,
      type,
      className,
      style,
      bordered,
      title,
      description,
      fullMode
    } = this.props;
    const {
      visible
    } = this.state;
    const wrapper = classnames_default()(banner_prefixCls, className, {
      [concat_default()(_context = "".concat(banner_prefixCls, "-")).call(_context, type)]: type,
      ["".concat(banner_prefixCls, "-full")]: fullMode,
      ["".concat(banner_prefixCls, "-in-container")]: !fullMode,
      ["".concat(banner_prefixCls, "-bordered")]: !fullMode && bordered
    });
    const banner = visible ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: wrapper,
      style: style,
      role: "alert"
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(banner_prefixCls, "-content-wrapper")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(banner_prefixCls, "-content")
    }, this.renderIcon(), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(banner_prefixCls, "-content-body")
    }, title ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(typography_0.Title, {
      heading: 5,
      className: "".concat(banner_prefixCls, "-title"),
      component: "div",
      "x-semi-prop": "title"
    }, title) : null, description ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(typography_0.Paragraph, {
      className: "".concat(banner_prefixCls, "-description"),
      component: "div",
      "x-semi-prop": "description"
    }, description) : null)), this.renderCloser()), children ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(banner_prefixCls, "-extra"),
      "x-semi-prop": "children"
    }, children) : null) : null;
    return banner;
  }

}
banner_Banner.propTypes = {
  // target: PropTypes.func,
  fullMode: prop_types_default.a.bool,
  // insertAfter: PropTypes.func,
  type: prop_types_default.a.oneOf(banner_types),
  title: prop_types_default.a.node,
  description: prop_types_default.a.node,
  icon: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node]),
  closeIcon: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node]),
  children: prop_types_default.a.node,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  onClose: prop_types_default.a.func,
  bordered: prop_types_default.a.bool
};
banner_Banner.defaultProps = {
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  onClose: () => {},
  type: 'info',
  fullMode: true
};
// CONCATENATED MODULE: ../semi-foundation/breadcrumb/constants.ts

const breadcrumb_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-breadcrumb")
};
const breadcrumb_constants_strings = {
  MORE_TYPE: ['default', 'popover']
};

// CONCATENATED MODULE: ../semi-foundation/breadcrumb/foundation.ts



/* eslint-disable prefer-const */


class foundation_BreadcrumbFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  }

  handleClick(info, event) {
    this._adapter.notifyClick(info, event);
  }

  handleExpand(clickEvent) {
    this._adapter.expandCollapsed(clickEvent);
  }
  /**
   * A11y: simulate clear button click
   */


  handleExpandEnterPress(keyboardEvent) {
    if (utils_isEnterPress(keyboardEvent)) {
      this.handleExpand(keyboardEvent);
    }
  }

  genRoutes(routes) {
    return map_default()(routes).call(routes, route => {
      if (typeof route !== 'object') {
        return {
          name: route,
          _origin: {
            name: route
          }
        };
      }

      let config = {};
      config._origin = route;
      return assign_default()(assign_default()({}, config), route);
    });
  }

}
// EXTERNAL MODULE: ../semi-foundation/breadcrumb/breadcrumb.scss
var breadcrumb = __webpack_require__("5nGS");

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/isNull.js
var isNull = __webpack_require__("R7V3");
var isNull_default = /*#__PURE__*/__webpack_require__.n(isNull);

// CONCATENATED MODULE: ../semi-foundation/breadcrumb/itemFoundation.ts


class itemFoundation_BreadcrumbItemFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  }

  handleClick(item, e) {
    // Trigger its own onClick first, then trigger the parent
    this._adapter.notifyClick(item, e);

    this._adapter.notifyParent(item, e);
  }

}
// CONCATENATED MODULE: ./breadcrumb/bread-context.tsx

const BreadContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext({});
/* harmony default export */ var bread_context = (BreadContext);
// CONCATENATED MODULE: ./breadcrumb/item.tsx














const item_clsPrefix = breadcrumb_constants_cssClasses.PREFIX;

class item_BreadcrumbItem extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.renderIcon = () => {
      const iconType = this.props.icon;
      const {
        compact
      } = this.context;
      const iconSize = compact ? 'small' : 'default';
      const className = "".concat(item_clsPrefix, "-item-icon");

      if ( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(iconType)) {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(iconType, {
          className,
          size: iconSize
        });
      }

      return iconType;
    };

    this.getTooltipOpt = () => {
      const {
        showTooltip
      } = this.context;

      if (!showTooltip) {
        return {
          width: 150,
          ellipsisPos: 'end'
        };
      }

      const defaultOpts = {
        width: 150,
        ellipsisPos: 'end',
        opts: {
          autoAdjustOverflow: true,
          position: 'top'
        }
      };

      if (typeof showTooltip === 'object') {
        return merge_default()(defaultOpts, showTooltip);
      }

      return defaultOpts;
    };

    this.getItemInfo = () => {
      let itemInfo = {};
      const {
        route,
        children,
        href
      } = this.props;
      const hasHref = !isUndefined_default()(href) && !isNull_default()(href);

      if (route) {
        itemInfo = route;
      } else {
        itemInfo.name = children;

        if (hasHref) {
          itemInfo.href = href;
        }
      }

      return itemInfo;
    };

    this.renderBreadItem = () => {
      var _context;

      const {
        children
      } = this.props;
      const {
        compact
      } = this.context;
      const showTooltip = this.getTooltipOpt();
      const icon = this.renderIcon();

      if (Boolean(children) && typeof children === 'string') {
        const {
          opts,
          ellipsisPos,
          width
        } = showTooltip;
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], null, icon, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
          className: "".concat(item_clsPrefix, "-item-title")
        }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(typography_0.Text, {
          ellipsis: {
            showTooltip: opts ? {
              opts
            } : false,
            pos: ellipsisPos
          },
          // icon={this.renderIcon(icon)}
          style: {
            width
          },
          size: compact ? 'small' : 'normal'
        }, children)));
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], null, icon, children ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: concat_default()(_context = "".concat(item_clsPrefix, "-item-title ")).call(_context, item_clsPrefix, "-item-title-inline")
      }, children) : null);
    };

    this.renderItem = () => {
      const {
        href,
        active,
        noLink
      } = this.props;
      const hasHref = href !== null && typeof href !== 'undefined';
      const itemCls = classnames_default()({
        ["".concat(item_clsPrefix, "-item")]: true,
        ["".concat(item_clsPrefix, "-item-active")]: active,
        ["".concat(item_clsPrefix, "-item-link")]: !noLink
      });
      const itemInner = this.renderBreadItem();
      const tag = active || !hasHref ? 'span' : 'a';
      const itemInfo = this.getItemInfo();
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tag, {
        className: itemCls,
        onClick: e => this.foundation.handleClick(itemInfo, e),
        href
      }, itemInner);
    };

    this.foundation = new itemFoundation_BreadcrumbItemFoundation(this.adapter);
  }

  get adapter() {
    var _this = this;

    return assign_default()(assign_default()({}, super.adapter), {
      notifyClick: function () {
        _this.props.onClick(...arguments);
      },
      notifyParent: function () {
        _this.context.onClick(...arguments);
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  render() {
    const {
      active,
      shouldRenderSeparator // children,

    } = this.props;
    const pageLabel = active ? {
      'aria-current': 'page'
    } : {};
    const item = this.renderItem();
    const separator = !active ? this.props.separator || /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(item_clsPrefix, "-separator")
    }, this.context.separator) : null;
    const wrapperCLs = classnames_default()({
      ["".concat(item_clsPrefix, "-item-wrap")]: true // [`${clsPrefix}-item-wrap-iconOnly`]: !!children && this.props.icon,

    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", assign_default()({
      className: wrapperCLs
    }, pageLabel), item, shouldRenderSeparator && separator);
  }

}
item_BreadcrumbItem.isBreadcrumbItem = true;
item_BreadcrumbItem.contextType = bread_context;
item_BreadcrumbItem.propTypes = {
  onClick: prop_types_default.a.func,
  route: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.string]),
  name: prop_types_default.a.string,
  children: prop_types_default.a.node,
  active: prop_types_default.a.bool,
  shouldRenderSeparator: prop_types_default.a.bool,
  icon: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node]),
  separator: prop_types_default.a.node,
  noLink: prop_types_default.a.bool
};
item_BreadcrumbItem.defaultProps = {
  onClick: function_noop,
  shouldRenderSeparator: true
};
// CONCATENATED MODULE: ./breadcrumb/index.tsx








/* eslint-disable max-len */













const breadcrumb_clsPrefix = breadcrumb_constants_cssClasses.PREFIX;


class breadcrumb_Breadcrumb extends baseComponent_BaseComponent {
  constructor(props) {
    var _context3;

    super(props);

    this.handleCollapse = (template, itemsLen) => {
      var _context;

      const {
        maxItemCount,
        renderMore,
        moreType
      } = this.props;

      const hasRenderMore = isFunction_default()(renderMore);

      const restItem = slice_default()(template).call(template, 1, itemsLen - 3);

      const spread = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: "".concat(breadcrumb_clsPrefix, "-collapse"),
        key: "more-".concat(itemsLen)
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: "".concat(breadcrumb_clsPrefix, "-item-wrap")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        role: "button",
        tabIndex: 0,
        "aria-label": "Expand breadcrumb items",
        className: concat_default()(_context = "".concat(breadcrumb_clsPrefix, "-item ")).call(_context, breadcrumb_clsPrefix, "-item-more"),
        onClick: item => this.foundation.handleExpand(item),
        onKeyPress: e => this.foundation.handleExpandEnterPress(e)
      }, hasRenderMore && renderMore(restItem), !hasRenderMore && moreType === 'default' && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconMore, null), !hasRenderMore && moreType === 'popover' && this.renderPopoverMore(restItem)), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: "".concat(breadcrumb_clsPrefix, "-separator"),
        "x-semi-prop": "separator"
      }, this.props.separator)));

      splice_default()(template).call(template, 1, itemsLen - maxItemCount, spread);

      return template;
    };

    this.renderRouteItems = (items, shouldCollapse, moreTypeIsPopover) => {
      const {
        renderItem,
        renderMore,
        maxItemCount
      } = this.props;
      const restItemLength = items.length - maxItemCount;

      const hasRenderMore = isFunction_default()(renderMore);

      const template = map_default()(items).call(items, (route, idx) => {
        var _context2;

        const key = route._origin.key || concat_default()(_context2 = "item-".concat(route.name || route.path, "-")).call(_context2, idx);

        const inCollapseArea = idx > 0 && idx <= restItemLength;
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(item_BreadcrumbItem, assign_default()({}, route, {
          key: key,
          active: idx === items.length - 1,
          route: route._origin,
          // eslint-disable-next-line max-len
          shouldRenderSeparator: !(shouldCollapse && (hasRenderMore || moreTypeIsPopover) && inCollapseArea)
        }), renderItem ? renderItem(route._origin) : route.name);
      });

      return template;
    };

    this.renderList = () => {
      const {
        routes,
        children,
        autoCollapse,
        maxItemCount,
        renderMore,
        moreType
      } = this.props;
      const {
        isCollapsed
      } = this.state;
      const hasRoutes = routes && routes.length > 0;
      const items = hasRoutes ? this.foundation.genRoutes(routes) : external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children.toArray(children);
      let template;
      const itemLength = items.length; // children length

      const restItemLength = itemLength - maxItemCount; // Omitted children items

      const shouldCollapse = items && autoCollapse && itemLength > maxItemCount && isCollapsed; // Whether the number of children exceeds, need to collapse

      const hasRenderMore = isFunction_default()(renderMore); // Whether the user passes in the renderMore method


      const moreTypeIsPopover = moreType === 'popover';

      if (hasRoutes) {
        template = this.renderRouteItems(items, shouldCollapse, moreTypeIsPopover);
      } else {
        template = map_default()(items).call(items, (item, idx) => {
          const inCollapseArea = idx > 0 && idx <= restItemLength;

          if (!item) {
            return item;
          }

          Object(warning["a" /* default */])(item.type && !item.type.isBreadcrumbItem, '[Semi Breadcrumb]: Only accepts Breadcrumb.Item as its children');
          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(item, {
            key: "".concat(idx, "-item"),
            active: idx === items.length - 1,
            shouldRenderSeparator: !(shouldCollapse && (hasRenderMore || moreTypeIsPopover) && inCollapseArea)
          });
        });
      }

      if (shouldCollapse) {
        return this.handleCollapse(template, items.length);
      }

      return template;
    };

    this.onClick = (info, event) => {
      this.foundation.handleClick(info, event);
    };

    this.foundation = new foundation_BreadcrumbFoundation(this.adapter);
    this.state = {
      isCollapsed: true
    };
    this.onClick = bind_default()(_context3 = this.onClick).call(_context3, this);
  }

  get adapter() {
    var _this = this;

    return assign_default()(assign_default()({}, super.adapter), {
      notifyClick: function () {
        _this.props.onClick(...arguments);
      },
      expandCollapsed: () => this.setState({
        isCollapsed: false
      })
    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  renderPopoverMore(restItem) {
    const {
      separator
    } = this.props;
    const content = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, map_default()(restItem).call(restItem, (item, idx) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, {
      key: "restItem-".concat(idx)
    }, item, idx !== restItem.length - 1 && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(breadcrumb_clsPrefix, "-restItem")
    }, separator))));
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(popover_0, {
      content: content,
      style: {
        padding: 12
      },
      showArrow: true
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconMore, null));
  }

  render() {
    const breadcrumbs = this.renderList();
    const {
      compact,
      className,
      style,
      separator,
      showTooltip
    } = this.props;
    const sizeCls = classnames_default()(className, {
      ["".concat(breadcrumb_clsPrefix, "-wrapper")]: true,
      ["".concat(breadcrumb_clsPrefix, "-wrapper-compact")]: compact,
      ["".concat(breadcrumb_clsPrefix, "-wrapper-loose")]: !compact
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(bread_context.Provider, {
      value: {
        onClick: this.onClick,
        showTooltip,
        compact,
        separator
      }
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("nav", {
      "aria-label": this.props['aria-label'],
      className: sizeCls,
      style: style
    }, breadcrumbs));
  }

}

breadcrumb_Breadcrumb.contextType = bread_context;
breadcrumb_Breadcrumb.Item = item_BreadcrumbItem;
breadcrumb_Breadcrumb.propTypes = {
  routes: prop_types_default.a.array,
  onClick: prop_types_default.a.func,
  separator: prop_types_default.a.node,
  compact: prop_types_default.a.bool,
  children: prop_types_default.a.node,
  style: prop_types_default.a.object,
  renderItem: prop_types_default.a.func,
  showTooltip: prop_types_default.a.oneOfType([prop_types_default.a.shape({
    width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
    ellipsisPos: prop_types_default.a.oneOf(['end', 'middle']),
    opts: prop_types_default.a.object
  }), prop_types_default.a.bool]),
  className: prop_types_default.a.string,
  autoCollapse: prop_types_default.a.bool,
  maxItemCount: prop_types_default.a.number,

  /* Customize the contents of the ellipsis area */
  renderMore: prop_types_default.a.func,

  /* Type of ellipsis area */
  moreType: prop_types_default.a.oneOf(breadcrumb_constants_strings.MORE_TYPE),
  'aria-label': prop_types_default.a.string
};
breadcrumb_Breadcrumb.defaultProps = {
  routes: [],
  onClick: function_noop,
  renderItem: undefined,
  separator: '/',
  compact: true,
  showTooltip: {
    width: 150,
    ellipsisPos: 'end'
  },
  autoCollapse: true,
  moreType: 'default',
  maxItemCount: 4,
  'aria-label': 'Breadcrumb'
};
/* harmony default export */ var breadcrumb_0 = (breadcrumb_Breadcrumb);
// CONCATENATED MODULE: ./button/index.tsx









class button_Button extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
  constructor() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super(props);
  }

  render() {
    const props = assign_default()({}, this.props);

    const hasIcon = Boolean(props.icon);
    const isLoading = Boolean(props.loading);
    const isDisabled = Boolean(props.disabled);

    if (hasIcon || isLoading && !isDisabled) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(iconButton_0, assign_default()({}, props));
    } else {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Button_Button, assign_default()({}, props));
    }
  }

}

button_Button.propTypes = assign_default()(assign_default()({}, Button_Button.propTypes), iconButton_0.propTypes);
/* harmony default export */ var button_0 = (button_Button);
// CONCATENATED MODULE: ./button/buttonGroup.tsx






var buttonGroup_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};







const buttonGroup_prefixCls = button_constants_cssClasses.PREFIX;
const buttonGroup_btnSizes = button_constants_strings.sizes;
class buttonGroup_ButtonGroup extends baseComponent_BaseComponent {
  render() {
    const _a = this.props,
          {
      children,
      disabled,
      size,
      type,
      className,
      'aria-label': ariaLabel
    } = _a,
          rest = buttonGroup_rest(_a, ["children", "disabled", "size", "type", "className", 'aria-label']);

    let inner;
    const cls = classnames_default()("".concat(buttonGroup_prefixCls, "-group"), className);

    if (children) {
      var _context;

      inner = map_default()(_context = is_array_default()(children) ? children : [children]).call(_context, (itm, index) => /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(itm) ? /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["cloneElement"])(itm, assign_default()(assign_default()(assign_default()({
        disabled,
        size,
        type
      }, itm.props), rest), {
        key: index
      })) : itm);
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: cls,
      role: "group",
      "aria-label": ariaLabel
    }, inner);
  }

}
buttonGroup_ButtonGroup.propTypes = {
  children: prop_types_default.a.node,
  disabled: prop_types_default.a.bool,
  type: prop_types_default.a.string,
  size: prop_types_default.a.oneOf(buttonGroup_btnSizes),
  theme: prop_types_default.a.oneOf(button_constants_strings.themes),
  'aria-label': prop_types_default.a.string
};
buttonGroup_ButtonGroup.defaultProps = {
  // There are default values ​​for type and theme in Button. 
  // In order to allow users to individually customize the type and theme of the Button through the parameters of the Button in the ButtonGroup,
  // the default value of type and theme is not given in the ButtonGroup。
  size: 'default'
};
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/keys.js
var instance_keys = __webpack_require__("BoX2");
var instance_keys_default = /*#__PURE__*/__webpack_require__.n(instance_keys);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/sort.js
var sort = __webpack_require__("/3sO");
var sort_default = /*#__PURE__*/__webpack_require__.n(sort);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/entries.js
var instance_entries = __webpack_require__("48fh");
var entries_default = /*#__PURE__*/__webpack_require__.n(instance_entries);

// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/startOfDay/index.js


/**
 * @name startOfDay
 * @category Day Helpers
 * @summary Return the start of a day for the given date.
 *
 * @description
 * Return the start of a day for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a day
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a day for 2 September 2014 11:55:00:
 * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 00:00:00
 */

function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/isSameDay/index.js


/**
 * @name isSameDay
 * @category Day Helpers
 * @summary Are the given dates in the same day (and year and month)?
 *
 * @description
 * Are the given dates in the same day (and year and month)?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same day (and year and month)
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?
 * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))
 * //=> true
 * 
 * @example
 * // Are 4 September and 4 October in the same day?
 * var result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))
 * //=> false
 * 
 * @example
 * // Are 4 September, 2014 and 4 September, 2015 in the same day?
 * var result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))
 * //=> false
 */

function isSameDay(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
  var dateRightStartOfDay = startOfDay(dirtyDateRight);
  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/isDate/index.js

/**
 * @name isDate
 * @category Common Helpers
 * @summary Is the given value a date?
 *
 * @description
 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {*} value - the value to check
 * @returns {boolean} true if the given value is a date
 * @throws {TypeError} 1 arguments required
 *
 * @example
 * // For a valid date:
 * const result = isDate(new Date())
 * //=> true
 *
 * @example
 * // For an invalid date:
 * const result = isDate(new Date(NaN))
 * //=> true
 *
 * @example
 * // For some value:
 * const result = isDate('2014-02-31')
 * //=> false
 *
 * @example
 * // For an object:
 * const result = isDate({})
 * //=> false
 */

function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/isValid/index.js



/**
 * @name isValid
 * @category Common Helpers
 * @summary Is the given date valid?
 *
 * @description
 * Returns false if argument is Invalid Date and true otherwise.
 * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * Invalid Date is a Date, whose time value is NaN.
 *
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - Now `isValid` doesn't throw an exception
 *   if the first argument is not an instance of Date.
 *   Instead, argument is converted beforehand using `toDate`.
 *
 *   Examples:
 *
 *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |
 *   |---------------------------|---------------|---------------|
 *   | `new Date()`              | `true`        | `true`        |
 *   | `new Date('2016-01-01')`  | `true`        | `true`        |
 *   | `new Date('')`            | `false`       | `false`       |
 *   | `new Date(1488370835081)` | `true`        | `true`        |
 *   | `new Date(NaN)`           | `false`       | `false`       |
 *   | `'2016-01-01'`            | `TypeError`   | `false`       |
 *   | `''`                      | `TypeError`   | `false`       |
 *   | `1488370835081`           | `TypeError`   | `true`        |
 *   | `NaN`                     | `TypeError`   | `false`       |
 *
 *   We introduce this change to make *date-fns* consistent with ECMAScript behavior
 *   that try to coerce arguments to the expected type
 *   (which is also the case with other *date-fns* functions).
 *
 * @param {*} date - the date to check
 * @returns {Boolean} the date is valid
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // For the valid date:
 * const result = isValid(new Date(2014, 1, 31))
 * //=> true
 *
 * @example
 * // For the value, convertable into a date:
 * const result = isValid(1393804800000)
 * //=> true
 *
 * @example
 * // For the invalid date:
 * const result = isValid(new Date(''))
 * //=> false
 */

function isValid(dirtyDate) {
  requiredArgs(1, arguments);

  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
    return false;
  }

  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: '1 hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: '1 day',
    other: '{{count}} days'
  },
  aboutXWeeks: {
    one: 'about 1 week',
    other: 'about {{count}} weeks'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weeks'
  },
  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: '1 month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: '1 year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years'
  }
};

var formatDistance_formatDistance = function (token, count, options) {
  var result;
  var tokenValue = formatDistance_formatDistanceLocale[token];

  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }

  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }

  return result;
};

/* harmony default export */ var _lib_formatDistance = (formatDistance_formatDistance);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js

var formatLong_dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var formatLong_dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong_formatLong = {
  date: buildFormatLongFn({
    formats: formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ var en_US_lib_formatLong = (formatLong_formatLong);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelative_formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};

var formatRelative_formatRelative = function (token, _date, _baseDate, _options) {
  return formatRelative_formatRelativeLocale[token];
};

/* harmony default export */ var _lib_formatRelative = (formatRelative_formatRelative);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js

var localize_eraValues = {
  narrow: ['B', 'A'],
  abbreviated: ['BC', 'AD'],
  wide: ['Before Christ', 'Anno Domini']
};
var localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
}; // Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.

var localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};
var localize_dayValues = {
  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};
var localize_dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  }
};
var localize_formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  }
};

var localize_ordinalNumber = function (dirtyNumber, _options) {
  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`.
  //
  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'.

  var rem100 = number % 100;

  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st';

      case 2:
        return number + 'nd';

      case 3:
        return number + 'rd';
    }
  }

  return number + 'th';
};

var _lib_localize_localize = {
  ordinalNumber: localize_ordinalNumber,
  era: buildLocalizeFn({
    values: localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function (quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ var en_US_lib_localize = (_lib_localize_localize);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/locale/en-US/_lib/match/index.js


var match_matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var match_parseOrdinalNumberPattern = /\d+/i;
var match_matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var match_parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var match_matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var match_parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var _lib_match_match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: match_matchOrdinalNumberPattern,
    parsePattern: match_parseOrdinalNumberPattern,
    valueCallback: function (value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function (index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ var en_US_lib_match = (_lib_match_match);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/locale/en-US/index.js






/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */
var en_US_locale = {
  code: 'en-US',
  formatDistance: _lib_formatDistance,
  formatLong: en_US_lib_formatLong,
  formatRelative: _lib_formatRelative,
  localize: en_US_lib_localize,
  match: en_US_lib_match,
  options: {
    weekStartsOn: 0
    /* Sunday */
    ,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ var en_US = (en_US_locale);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/addMilliseconds/index.js



/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */

function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/subMilliseconds/index.js



/**
 * @name subMilliseconds
 * @category Millisecond Helpers
 * @summary Subtract the specified number of milliseconds from the given date.
 *
 * @description
 * Subtract the specified number of milliseconds from the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
 * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:29.250
 */

function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js


var MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js

 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js


 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js


 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js




var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)

  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js



 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }

  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js



 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
  var year = getUTCWeekYear(dirtyDate, dirtyOptions);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, dirtyOptions);
  return date;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/getUTCWeek/index.js




var getUTCWeek_MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)

  return Math.round(diff / getUTCWeek_MILLISECONDS_IN_WEEK) + 1;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? '-' : '';
  var output = Math.abs(number).toString();

  while (output.length < targetLength) {
    output = '0' + output;
  }

  return sign + output;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/format/lightFormatters/index.js

/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* |                                |
 * |  d  | Day of month                   |  D  |                                |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  m  | Minute                         |  M  | Month                          |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  y  | Year (abs)                     |  Y  |                                |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 */

var formatters = {
  // Year
  y: function (date, token) {
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
  },
  // Month
  M: function (date, token) {
    var month = date.getUTCMonth();
    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function (date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function (date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';

    switch (token) {
      case 'a':
      case 'aa':
        return dayPeriodEnumValue.toUpperCase();

      case 'aaa':
        return dayPeriodEnumValue;

      case 'aaaaa':
        return dayPeriodEnumValue[0];

      case 'aaaa':
      default:
        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
    }
  },
  // Hour [1-12]
  h: function (date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function (date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  // Minute
  m: function (date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function (date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function (date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
/* harmony default export */ var lightFormatters = (formatters);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/format/formatters/index.js







var dayPeriodEnum = {
  am: 'am',
  pm: 'pm',
  midnight: 'midnight',
  noon: 'noon',
  morning: 'morning',
  afternoon: 'afternoon',
  evening: 'evening',
  night: 'night'
};
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
 * |  p! | Long localized time            |  P! | Long localized date            |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 * - `P` is long localized date format
 * - `p` is long localized time format
 */

var formatters_formatters = {
  // Era
  G: function (date, token, localize) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;

    switch (token) {
      // AD, BC
      case 'G':
      case 'GG':
      case 'GGG':
        return localize.era(era, {
          width: 'abbreviated'
        });
      // A, B

      case 'GGGGG':
        return localize.era(era, {
          width: 'narrow'
        });
      // Anno Domini, Before Christ

      case 'GGGG':
      default:
        return localize.era(era, {
          width: 'wide'
        });
    }
  },
  // Year
  y: function (date, token, localize) {
    // Ordinal number
    if (token === 'yo') {
      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize.ordinalNumber(year, {
        unit: 'year'
      });
    }

    return lightFormatters.y(date, token);
  },
  // Local week-numbering year
  Y: function (date, token, localize, options) {
    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)

    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year

    if (token === 'YY') {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    } // Ordinal number


    if (token === 'Yo') {
      return localize.ordinalNumber(weekYear, {
        unit: 'year'
      });
    } // Padding


    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function (date, token) {
    var isoWeekYear = getUTCISOWeekYear(date); // Padding

    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function (date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function (date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

    switch (token) {
      // 1, 2, 3, 4
      case 'Q':
        return String(quarter);
      // 01, 02, 03, 04

      case 'QQ':
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th

      case 'Qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });
      // Q1, Q2, Q3, Q4

      case 'QQQ':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)

      case 'QQQQQ':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'formatting'
        });
      // 1st quarter, 2nd quarter, ...

      case 'QQQQ':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone quarter
  q: function (date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

    switch (token) {
      // 1, 2, 3, 4
      case 'q':
        return String(quarter);
      // 01, 02, 03, 04

      case 'qq':
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th

      case 'qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });
      // Q1, Q2, Q3, Q4

      case 'qqq':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)

      case 'qqqqq':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'standalone'
        });
      // 1st quarter, 2nd quarter, ...

      case 'qqqq':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // Month
  M: function (date, token, localize) {
    var month = date.getUTCMonth();

    switch (token) {
      case 'M':
      case 'MM':
        return lightFormatters.M(date, token);
      // 1st, 2nd, ..., 12th

      case 'Mo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });
      // Jan, Feb, ..., Dec

      case 'MMM':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // J, F, ..., D

      case 'MMMMM':
        return localize.month(month, {
          width: 'narrow',
          context: 'formatting'
        });
      // January, February, ..., December

      case 'MMMM':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone month
  L: function (date, token, localize) {
    var month = date.getUTCMonth();

    switch (token) {
      // 1, 2, ..., 12
      case 'L':
        return String(month + 1);
      // 01, 02, ..., 12

      case 'LL':
        return addLeadingZeros(month + 1, 2);
      // 1st, 2nd, ..., 12th

      case 'Lo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });
      // Jan, Feb, ..., Dec

      case 'LLL':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // J, F, ..., D

      case 'LLLLL':
        return localize.month(month, {
          width: 'narrow',
          context: 'standalone'
        });
      // January, February, ..., December

      case 'LLLL':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // Local week of year
  w: function (date, token, localize, options) {
    var week = getUTCWeek(date, options);

    if (token === 'wo') {
      return localize.ordinalNumber(week, {
        unit: 'week'
      });
    }

    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function (date, token, localize) {
    var isoWeek = getUTCISOWeek(date);

    if (token === 'Io') {
      return localize.ordinalNumber(isoWeek, {
        unit: 'week'
      });
    }

    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function (date, token, localize) {
    if (token === 'do') {
      return localize.ordinalNumber(date.getUTCDate(), {
        unit: 'date'
      });
    }

    return lightFormatters.d(date, token);
  },
  // Day of year
  D: function (date, token, localize) {
    var dayOfYear = getUTCDayOfYear(date);

    if (token === 'Do') {
      return localize.ordinalNumber(dayOfYear, {
        unit: 'dayOfYear'
      });
    }

    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function (date, token, localize) {
    var dayOfWeek = date.getUTCDay();

    switch (token) {
      // Tue
      case 'E':
      case 'EE':
      case 'EEE':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'EEEEE':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'EEEEEE':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'EEEE':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Local day of week
  e: function (date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

    switch (token) {
      // Numerical value (Nth day of week with current locale or weekStartsOn)
      case 'e':
        return String(localDayOfWeek);
      // Padded numerical value

      case 'ee':
        return addLeadingZeros(localDayOfWeek, 2);
      // 1st, 2nd, ..., 7th

      case 'eo':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });

      case 'eee':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'eeeee':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'eeeeee':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'eeee':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone local day of week
  c: function (date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

    switch (token) {
      // Numerical value (same as in `e`)
      case 'c':
        return String(localDayOfWeek);
      // Padded numerical value

      case 'cc':
        return addLeadingZeros(localDayOfWeek, token.length);
      // 1st, 2nd, ..., 7th

      case 'co':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });

      case 'ccc':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // T

      case 'ccccc':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'standalone'
        });
      // Tu

      case 'cccccc':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'standalone'
        });
      // Tuesday

      case 'cccc':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // ISO day of week
  i: function (date, token, localize) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;

    switch (token) {
      // 2
      case 'i':
        return String(isoDayOfWeek);
      // 02

      case 'ii':
        return addLeadingZeros(isoDayOfWeek, token.length);
      // 2nd

      case 'io':
        return localize.ordinalNumber(isoDayOfWeek, {
          unit: 'day'
        });
      // Tue

      case 'iii':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'iiiii':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'iiiiii':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'iiii':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // AM or PM
  a: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';

    switch (token) {
      case 'a':
      case 'aa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'aaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        }).toLowerCase();

      case 'aaaaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'aaaa':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // AM, PM, midnight, noon
  b: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;

    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
    }

    switch (token) {
      case 'b':
      case 'bb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'bbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        }).toLowerCase();

      case 'bbbbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'bbbb':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;

    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }

    switch (token) {
      case 'B':
      case 'BB':
      case 'BBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'BBBBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'BBBB':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Hour [1-12]
  h: function (date, token, localize) {
    if (token === 'ho') {
      var hours = date.getUTCHours() % 12;
      if (hours === 0) hours = 12;
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return lightFormatters.h(date, token);
  },
  // Hour [0-23]
  H: function (date, token, localize) {
    if (token === 'Ho') {
      return localize.ordinalNumber(date.getUTCHours(), {
        unit: 'hour'
      });
    }

    return lightFormatters.H(date, token);
  },
  // Hour [0-11]
  K: function (date, token, localize) {
    var hours = date.getUTCHours() % 12;

    if (token === 'Ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function (date, token, localize) {
    var hours = date.getUTCHours();
    if (hours === 0) hours = 24;

    if (token === 'ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function (date, token, localize) {
    if (token === 'mo') {
      return localize.ordinalNumber(date.getUTCMinutes(), {
        unit: 'minute'
      });
    }

    return lightFormatters.m(date, token);
  },
  // Second
  s: function (date, token, localize) {
    if (token === 'so') {
      return localize.ordinalNumber(date.getUTCSeconds(), {
        unit: 'second'
      });
    }

    return lightFormatters.s(date, token);
  },
  // Fraction of second
  S: function (date, token) {
    return lightFormatters.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    if (timezoneOffset === 0) {
      return 'Z';
    }

    switch (token) {
      // Hours and optional minutes
      case 'X':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XX`

      case 'XXXX':
      case 'XX':
        // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XXX`

      case 'XXXXX':
      case 'XXX': // Hours and minutes with `:` delimiter

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Hours and optional minutes
      case 'x':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xx`

      case 'xxxx':
      case 'xx':
        // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xxx`

      case 'xxxxx':
      case 'xxx': // Hours and minutes with `:` delimiter

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (GMT)
  O: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Short
      case 'O':
      case 'OO':
      case 'OOO':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
      // Long

      case 'OOOO':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (specific non-location)
  z: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Short
      case 'z':
      case 'zz':
      case 'zzz':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
      // Long

      case 'zzzz':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  // Seconds timestamp
  t: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1000);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};

function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;

  if (minutes === 0) {
    return sign + String(hours);
  }

  var delimiter = dirtyDelimiter || '';
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}

function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? '-' : '+';
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }

  return formatTimezone(offset, dirtyDelimiter);
}

function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || '';
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}

/* harmony default export */ var format_formatters = (formatters_formatters);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/format/longFormatters/index.js
function dateLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'P':
      return formatLong.date({
        width: 'short'
      });

    case 'PP':
      return formatLong.date({
        width: 'medium'
      });

    case 'PPP':
      return formatLong.date({
        width: 'long'
      });

    case 'PPPP':
    default:
      return formatLong.date({
        width: 'full'
      });
  }
}

function timeLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'p':
      return formatLong.time({
        width: 'short'
      });

    case 'pp':
      return formatLong.time({
        width: 'medium'
      });

    case 'ppp':
      return formatLong.time({
        width: 'long'
      });

    case 'pppp':
    default:
      return formatLong.time({
        width: 'full'
      });
  }
}

function dateTimeLongFormatter(pattern, formatLong) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];

  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong);
  }

  var dateTimeFormat;

  switch (datePattern) {
    case 'P':
      dateTimeFormat = formatLong.dateTime({
        width: 'short'
      });
      break;

    case 'PP':
      dateTimeFormat = formatLong.dateTime({
        width: 'medium'
      });
      break;

    case 'PPP':
      dateTimeFormat = formatLong.dateTime({
        width: 'long'
      });
      break;

    case 'PPPP':
    default:
      dateTimeFormat = formatLong.dateTime({
        width: 'full'
      });
      break;
  }

  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
}

var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
/* harmony default export */ var format_longFormatters = (longFormatters);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/protectedTokens/index.js
var protectedDayOfYearTokens = ['D', 'DD'];
var protectedWeekYearTokens = ['YY', 'YYYY'];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format, input) {
  if (token === 'YYYY') {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'YY') {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'D') {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'DD') {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  }
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/format/index.js









 // This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps

var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
/**
 * @name format
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://git.io/fxCyr
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          | a..aa   | AM, PM                            |       |
 * |                                 | aaa     | am, pm                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
 * |                                 | bbb     | am, pm, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 001, ..., 999                |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 04/29/1453                        | 7     |
 * |                                 | PP      | Apr 29, 1453                      | 7     |
 * |                                 | PPP     | April 29th, 1453                  | 7     |
 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
 *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
 *
 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
 *    so right now these tokens fall back to GMT timezones.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
 *
 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - The second argument is now required for the sake of explicitness.
 *
 *   ```javascript
 *   // Before v2.0.0
 *   format(new Date(2016, 0, 1))
 *
 *   // v2.0.0 onward
 *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
 *   ```
 *
 * - New format string API for `format` function
 *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).
 *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
 *
 * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
 *
 * @param {Date|Number} date - the original date
 * @param {String} format - the string of tokens
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://git.io/fxCyr
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://git.io/fxCyr
 * @returns {String} the formatted date string
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `date` must not be Invalid Date
 * @throws {RangeError} `options.locale` must contain `localize` property
 * @throws {RangeError} `options.locale` must contain `formatLong` property
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
 *   locale: eoLocale
 * })
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
 * //=> "3 o'clock"
 */

function format_format(dirtyDate, dirtyFormatStr, dirtyOptions) {
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var options = dirtyOptions || {};
  var locale = options.locale || en_US;
  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }

  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  if (!locale.localize) {
    throw new RangeError('locale must contain localize property');
  }

  if (!locale.formatLong) {
    throw new RangeError('locale must contain formatLong property');
  }

  var originalDate = toDate(dirtyDate);

  if (!isValid(originalDate)) {
    throw new RangeError('Invalid time value');
  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376


  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
    var firstCharacter = substring[0];

    if (firstCharacter === 'p' || firstCharacter === 'P') {
      var longFormatter = format_longFormatters[firstCharacter];
      return longFormatter(substring, locale.formatLong, formatterOptions);
    }

    return substring;
  }).join('').match(formattingTokensRegExp).map(function (substring) {
    // Replace two single quote characters with one single quote character
    if (substring === "''") {
      return "'";
    }

    var firstCharacter = substring[0];

    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }

    var formatter = format_formatters[firstCharacter];

    if (formatter) {
      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
      }

      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
      }

      return formatter(utcDate, substring, locale.localize, formatterOptions);
    }

    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
    }

    return substring;
  }).join('');
  return result;
}

function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/differenceInCalendarDays/index.js



var differenceInCalendarDays_MILLISECONDS_IN_DAY = 86400000;
/**
 * @name differenceInCalendarDays
 * @category Day Helpers
 * @summary Get the number of calendar days between the given dates.
 *
 * @description
 * Get the number of calendar days between the given dates. This means that the times are removed
 * from the dates and then the difference in days is calculated.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar days
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many calendar days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInCalendarDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 366
 * // How many calendar days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInCalendarDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 1
 */

function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer
  // because the number of milliseconds in a day is not constant
  // (e.g. it's different in the day of the daylight saving time clock shift)

  return Math.round((timestampLeft - timestampRight) / differenceInCalendarDays_MILLISECONDS_IN_DAY);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/startOfMonth/index.js


/**
 * @name startOfMonth
 * @category Month Helpers
 * @summary Return the start of a month for the given date.
 *
 * @description
 * Return the start of a month for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a month for 2 September 2014 11:55:00:
 * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */

function startOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
  return date;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/startOfWeek/index.js



/**
 * @name startOfWeek
 * @category Week Helpers
 * @summary Return the start of a week for the given date.
 *
 * @description
 * Return the start of a week for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the start of a week
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // The start of a week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Mon Sep 01 2014 00:00:00
 */

function startOfWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/differenceInCalendarWeeks/index.js



var differenceInCalendarWeeks_MILLISECONDS_IN_WEEK = 604800000;
/**
 * @name differenceInCalendarWeeks
 * @category Week Helpers
 * @summary Get the number of calendar weeks between the given dates.
 *
 * @description
 * Get the number of calendar weeks between the given dates.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Number} the number of calendar weeks
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // How many calendar weeks are between 5 July 2014 and 20 July 2014?
 * const result = differenceInCalendarWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5)
 * )
 * //=> 3
 *
 * @example
 * // If the week starts on Monday,
 * // how many calendar weeks are between 5 July 2014 and 20 July 2014?
 * const result = differenceInCalendarWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5),
 *   { weekStartsOn: 1 }
 * )
 * //=> 2
 */

function differenceInCalendarWeeks(dirtyDateLeft, dirtyDateRight, dirtyOptions) {
  requiredArgs(2, arguments);
  var startOfWeekLeft = startOfWeek(dirtyDateLeft, dirtyOptions);
  var startOfWeekRight = startOfWeek(dirtyDateRight, dirtyOptions);
  var timestampLeft = startOfWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekLeft);
  var timestampRight = startOfWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekRight); // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)

  return Math.round((timestampLeft - timestampRight) / differenceInCalendarWeeks_MILLISECONDS_IN_WEEK);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/lastDayOfMonth/index.js


/**
 * @name lastDayOfMonth
 * @category Month Helpers
 * @summary Return the last day of a month for the given date.
 *
 * @description
 * Return the last day of a month for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the last day of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The last day of a month for 2 September 2014 11:55:00:
 * var result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 00:00:00
 */

function lastDayOfMonth_lastDayOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(0, 0, 0, 0);
  return date;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/getWeeksInMonth/index.js





/**
 * @name getWeeksInMonth
 * @category Week Helpers
 * @summary Get the number of calendar weeks a month spans.
 *
 * @description
 * Get the number of calendar weeks the month in the given date spans.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the given date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Number} the number of calendar weeks
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // How many calendar weeks does February 2015 span?
 * const result = getWeeksInMonth(new Date(2015, 1, 8))
 * //=> 4
 *
 * @example
 * // If the week starts on Monday,
 * // how many calendar weeks does July 2017 span?
 * const result = getWeeksInMonth(new Date(2017, 6, 5), { weekStartsOn: 1 })
 * //=> 6
 */
function getWeeksInMonth(date, options) {
  requiredArgs(1, arguments);
  return differenceInCalendarWeeks(lastDayOfMonth_lastDayOfMonth(date), startOfMonth(date), options) + 1;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/addDays/index.js



/**
 * @name addDays
 * @category Day Helpers
 * @summary Add the specified number of days to the given date.
 *
 * @description
 * Add the specified number of days to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} - the new date with the days added
 * @throws {TypeError} - 2 arguments required
 *
 * @example
 * // Add 10 days to 1 September 2014:
 * const result = addDays(new Date(2014, 8, 1), 10)
 * //=> Thu Sep 11 2014 00:00:00
 */

function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);

  if (isNaN(amount)) {
    return new Date(NaN);
  }

  if (!amount) {
    // If 0 days, no-op to avoid changing times in the hour before end of DST
    return date;
  }

  date.setDate(date.getDate() + amount);
  return date;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/endOfMonth/index.js


/**
 * @name endOfMonth
 * @category Month Helpers
 * @summary Return the end of a month for the given date.
 *
 * @description
 * Return the end of a month for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a month for 2 September 2014 11:55:00:
 * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */

function endOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/isBefore/index.js


/**
 * @name isBefore
 * @category Common Helpers
 * @summary Is the first date before the second one?
 *
 * @description
 * Is the first date before the second one?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date that should be before the other one to return true
 * @param {Date|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is before the second date
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Is 10 July 1989 before 11 February 1987?
 * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> false
 */

function isBefore(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() < dateToCompare.getTime();
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/isAfter/index.js


/**
 * @name isAfter
 * @category Common Helpers
 * @summary Is the first date after the second one?
 *
 * @description
 * Is the first date after the second one?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date that should be after the other one to return true
 * @param {Date|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is after the second date
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Is 10 July 1989 after 11 February 1987?
 * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> true
 */

function isAfter(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() > dateToCompare.getTime();
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/isSameMonth/index.js


/**
 * @name isSameMonth
 * @category Month Helpers
 * @summary Are the given dates in the same month (and year)?
 *
 * @description
 * Are the given dates in the same month (and year)?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same month (and year)
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same month?
 * var result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))
 * //=> true
 *
 * @example
 * // Are 2 September 2014 and 25 September 2015 in the same month?
 * var result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))
 * //=> false
 */

function isSameMonth_isSameMonth(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/getDate/index.js


/**
 * @name getDate
 * @category Day Helpers
 * @summary Get the day of the month of the given date.
 *
 * @description
 * Get the day of the month of the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the day of month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which day of the month is 29 February 2012?
 * const result = getDate(new Date(2012, 1, 29))
 * //=> 29
 */

function getDate_getDate(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var dayOfMonth = date.getDate();
  return dayOfMonth;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/getDay/index.js


/**
 * @name getDay
 * @category Weekday Helpers
 * @summary Get the day of the week of the given date.
 *
 * @description
 * Get the day of the week of the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the given date
 * @returns {0|1|2|3|4|5|6} the day of week, 0 represents Sunday
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which day of the week is 29 February 2012?
 * const result = getDay(new Date(2012, 1, 29))
 * //=> 3
 */

function getDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var day = date.getDay();
  return day;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/getWeekOfMonth/index.js





/**
 * @name getWeekOfMonth
 * @category Week Helpers
 * @summary Get the week of the month of the given date.
 *
 * @description
 * Get the week of the month of the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the given date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Number} the week of month
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6 inclusively
 *
 * @example
 * // Which week of the month is 9 November 2017?
 * const result = getWeekOfMonth(new Date(2017, 10, 9))
 * //=> 2
 */

function getWeekOfMonth(date, options) {
  var _options$locale, _options$locale$optio;

  requiredArgs(1, arguments);
  var defaultWeekStartsOn = (options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) || 0;
  var weekStartsOn = (options === null || options === void 0 ? void 0 : options.weekStartsOn) == null ? toInteger(defaultWeekStartsOn) : toInteger(options.weekStartsOn);

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var currentDayOfMonth = getDate_getDate(date);
  if (isNaN(currentDayOfMonth)) return NaN;
  var startWeekDay = getDay(startOfMonth(date));
  var lastDayOfFirstWeek = weekStartsOn - startWeekDay;
  if (lastDayOfFirstWeek <= 0) lastDayOfFirstWeek += 7;
  var remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;
  return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/isSameWeek/index.js



/**
 * @name isSameWeek
 * @category Week Helpers
 * @summary Are the given dates in the same week (and month and year)?
 *
 * @description
 * Are the given dates in the same week (and month and year)?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Boolean} the dates are in the same week (and month and year)
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // Are 31 August 2014 and 4 September 2014 in the same week?
 * var result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))
 * //=> true
 *
 * @example
 * // If week starts with Monday,
 * // are 31 August 2014 and 4 September 2014 in the same week?
 * var result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {
 *   weekStartsOn: 1
 * })
 * //=> false
 * 
 * @example
 * // Are 1 January 2014 and 1 January 2015 in the same week?
 * var result = isSameWeek(new Date(2014, 0, 1), new Date(2015, 0, 1))
 * //=> false
 */
function isSameWeek(dirtyDateLeft, dirtyDateRight, dirtyOptions) {
  requiredArgs(2, arguments);
  var dateLeftStartOfWeek = startOfWeek(dirtyDateLeft, dirtyOptions);
  var dateRightStartOfWeek = startOfWeek(dirtyDateRight, dirtyOptions);
  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/isWeekend/index.js


/**
 * @name isWeekend
 * @category Weekday Helpers
 * @summary Does the given date fall on a weekend?
 *
 * @description
 * Does the given date fall on a weekend?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to check
 * @returns {Boolean} the date falls on a weekend
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Does 5 October 2014 fall on a weekend?
 * const result = isWeekend(new Date(2014, 9, 5))
 * //=> true
 */

function isWeekend_isWeekend(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var day = date.getDay();
  return day === 0 || day === 6;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/getHours/index.js


/**
 * @name getHours
 * @category Hour Helpers
 * @summary Get the hours of the given date.
 *
 * @description
 * Get the hours of the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the hours
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Get the hours of 29 February 2012 11:45:00:
 * const result = getHours(new Date(2012, 1, 29, 11, 45))
 * //=> 11
 */

function getHours(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var hours = date.getHours();
  return hours;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/getMinutes/index.js


/**
 * @name getMinutes
 * @category Minute Helpers
 * @summary Get the minutes of the given date.
 *
 * @description
 * Get the minutes of the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the minutes
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Get the minutes of 29 February 2012 11:45:05:
 * const result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))
 * //=> 45
 */

function getMinutes(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var minutes = date.getMinutes();
  return minutes;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/getSeconds/index.js


/**
 * @name getSeconds
 * @category Second Helpers
 * @summary Get the seconds of the given date.
 *
 * @description
 * Get the seconds of the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the seconds
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Get the seconds of 29 February 2012 11:45:05.123:
 * const result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 5
 */

function getSeconds(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var seconds = date.getSeconds();
  return seconds;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/addHours/index.js



var MILLISECONDS_IN_HOUR = 3600000;
/**
 * @name addHours
 * @category Hour Helpers
 * @summary Add the specified number of hours to the given date.
 *
 * @description
 * Add the specified number of hours to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the hours added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 2 hours to 10 July 2014 23:00:00:
 * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)
 * //=> Fri Jul 11 2014 01:00:00
 */

function addHours(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/endOfDay/index.js


/**
 * @name endOfDay
 * @category Day Helpers
 * @summary Return the end of a day for the given date.
 *
 * @description
 * Return the end of a day for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a day
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a day for 2 September 2014 11:55:00:
 * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 23:59:59.999
 */

function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(23, 59, 59, 999);
  return date;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/constants/index.js
/**
 * Days in 1 week.
 *
 * @name daysInWeek
 * @constant
 * @type {number}
 * @default
 */
var daysInWeek = 7;
/**
 * Maximum allowed time.
 *
 * @name maxTime
 * @constant
 * @type {number}
 * @default
 */

var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;
/**
 * Milliseconds in 1 minute
 *
 * @name millisecondsInMinute
 * @constant
 * @type {number}
 * @default
 */

var millisecondsInMinute = 60000;
/**
 * Milliseconds in 1 hour
 *
 * @name millisecondsInHour
 * @constant
 * @type {number}
 * @default
 */

var millisecondsInHour = 3600000;
/**
 * Milliseconds in 1 second
 *
 * @name millisecondsInSecond
 * @constant
 * @type {number}
 * @default
 */

var millisecondsInSecond = 1000;
/**
 * Minimum allowed time.
 *
 * @name minTime
 * @constant
 * @type {number}
 * @default
 */

var minTime = -maxTime;
/**
 * Minutes in 1 hour
 *
 * @name minutesInHour
 * @constant
 * @type {number}
 * @default
 */

var minutesInHour = 60;
/**
 * Months in 1 quarter
 *
 * @name monthsInQuarter
 * @constant
 * @type {number}
 * @default
 */

var monthsInQuarter = 3;
/**
 * Months in 1 year
 *
 * @name monthsInYear
 * @constant
 * @type {number}
 * @default
 */

var monthsInYear = 12;
/**
 * Quarters in 1 year
 *
 * @name quartersInYear
 * @constant
 * @type {number}
 * @default
 */

var quartersInYear = 4;
/**
 * Seconds in 1 hour
 *
 * @name secondsInHour
 * @constant
 * @type {number}
 * @default
 */

var secondsInHour = 3600;
/**
 * Seconds in 1 minute
 *
 * @name secondsInMinute
 * @constant
 * @type {number}
 * @default
 */

var secondsInMinute = 60;
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/differenceInMilliseconds/index.js


/**
 * @name differenceInMilliseconds
 * @category Millisecond Helpers
 * @summary Get the number of milliseconds between the given dates.
 *
 * @description
 * Get the number of milliseconds between the given dates.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of milliseconds
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many milliseconds are between
 * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
 * const result = differenceInMilliseconds(
 *   new Date(2014, 6, 2, 12, 30, 21, 700),
 *   new Date(2014, 6, 2, 12, 30, 20, 600)
 * )
 * //=> 1100
 */

function differenceInMilliseconds(dateLeft, dateRight) {
  requiredArgs(2, arguments);
  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/roundingMethods/index.js
var roundingMap = {
  ceil: Math.ceil,
  round: Math.round,
  floor: Math.floor,
  trunc: function (value) {
    return value < 0 ? Math.ceil(value) : Math.floor(value);
  } // Math.trunc is not supported by IE

};
var defaultRoundingMethod = 'trunc';
function getRoundingMethod(method) {
  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/differenceInHours/index.js




/**
 * @name differenceInHours
 * @category Hour Helpers
 * @summary Get the number of hours between the given dates.
 *
 * @description
 * Get the number of hours between the given dates.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @param {Object} [options] - an object with options.
 * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)
 * @returns {Number} the number of hours
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?
 * const result = differenceInHours(
 *   new Date(2014, 6, 2, 19, 0),
 *   new Date(2014, 6, 2, 6, 50)
 * )
 * //=> 12
 */

function differenceInHours(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/endOfWeek/index.js




/**
 * @name endOfWeek
 * @category Week Helpers
 * @summary Return the end of a week for the given date.
 *
 * @description
 * Return the end of a week for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the end of a week
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // The end of a week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sat Sep 06 2014 23:59:59.999
 *
 * @example
 * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Sun Sep 07 2014 23:59:59.999
 */
function endOfWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
  date.setDate(date.getDate() + diff);
  date.setHours(23, 59, 59, 999);
  return date;
}
// CONCATENATED MODULE: ../semi-foundation/calendar/eventUtil.ts










const copyEvent = function (event, date, start, end) {
  let allDay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  const copied = assign_default()({}, event);

  copied.date = date;
  start ? copied.start = start : null;
  end ? copied.end = end : null;
  copied.allDay = allDay;
  return copied;
};

const isDateInRange = (dirtyDate, dirtyStart, dirtyEnd) => {
  const date = toDate(dirtyDate);
  const start = toDate(dirtyStart);
  const end = toDate(dirtyEnd);
  return date.getTime() < end.getTime() && date.getTime() >= start.getTime();
};

const sortDate = (a, b) => {
  const res = isBefore(new Date(a), new Date(b)) ? -1 : 1;
  return res;
};
const checkWeekend = val => isWeekend_isWeekend(val);
const getCurrDate = () => new Date();
const round = value => Math.round(value * 1000) / 1000;
const getPos = value => {
  const currSec = (getHours(value) * 60 + getMinutes(value)) * 60 + getSeconds(value);
  const totalSec = 24 * 60 * 60;
  return currSec / totalSec;
};
const isAllDayEvent = event => 'allDay' in event && event.allDay;
/**
 *
 * @param {object} event
 * normalize event object:
 * if event object does not have start time, add start time = end time - 1h; if not same day, then startday of the end
 * if event object does not have end time, add end time = start time + 1h; if not same day, then endday of the start
 */

const amendEvent = event => {
  const {
    start,
    end
  } = event;

  if (!start && !end) {
    return undefined;
  } else if (!start) {
    event.start = isSameDay(end, addHours(end, -1)) ? addHours(end, -1) : startOfDay(end);
  } else {
    event.end = isSameDay(start, addHours(start, 1)) ? addHours(start, 1) : endOfDay(start);
  }

  return event;
};
/**
 *
 * @param {arr} events
 * find the max topInd and used as row height
 */

const calcRowHeight = events => {
  const topIndArr = map_default()(events).call(events, item => item.topInd);

  return topIndArr.length ? Math.max(...topIndArr) + 1 : 1;
};
const calcRangeData = (value, start, rangeLen, mode, locale) => {
  var _context, _context2;

  const today = getCurrDate();
  const arr = [];

  map_default()(_context = [...instance_keys_default()(_context2 = Array(rangeLen)).call(_context2)]).call(_context, ind => {
    const dateObj = {};
    const date = addDays(start, ind);
    dateObj.ind = ind;
    dateObj.date = date;
    dateObj.dayString = format_format(date, 'd', {
      locale
    });
    dateObj.weekday = format_format(date, 'EEE', {
      locale
    });
    dateObj.isToday = isSameDay(date, today);
    dateObj.isWeekend = checkWeekend(date);

    if (mode === 'month') {
      dateObj.isSameMonth = isSameMonth_isSameMonth(value, date);
      dateObj.month = format_format(date, 'LLL', {
        locale
      });
    }

    arr.push(dateObj);
  });

  return arr;
};
/**
 *
 * @param {value} date
 * @param {string} mode
 * @param {string} locale
 * @returns {object[]} { date: Date, dayString: string, ind: number, isToday: boolean, isWeekend: boolean, weekday: string }
 * create weekly object array
 */

const calcWeekData = function (value) {
  let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'week';
  let locale = arguments.length > 2 ? arguments[2] : undefined;
  const start = startOfWeek(value);
  return calcRangeData(value, start, 7, mode, locale);
};
/**
 *
 * @param {object} event
 * @param {boolean} allDay
 * @returns {object[]} { allDay: boolean, data: Date, start: Date, end: Date, children: ReactNode }
 * parsed a spanned all-day event into multiple dates
 */

const parseAllDayEvent = function (event) {
  let allDay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  let currDate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
  const res = [];
  const {
    start,
    end
  } = event;

  if (start && end) {
    var _context3, _context4;

    const diff = differenceInCalendarDays(end, start);

    map_default()(_context3 = [...instance_keys_default()(_context4 = Array(diff + 1)).call(_context4)]).call(_context3, day => {
      res.push(copyEvent(event, addDays(start, day), null, null, allDay));
    });
  } else {
    const date = start || end || currDate;
    res.push(copyEvent(event, startOfDay(date), null, null, allDay));
  }

  return res;
};
/**
 *
 * @param {object} event
 * @returns {object[]} { allDay: boolean, data: Date, start: Date, end: Date, children: ReactNode }
 * parsed events
 */

const parseEvent = event => {
  const {
    start,
    end
  } = event;
  let res = [];

  if (isAllDayEvent(event)) {
    return parseAllDayEvent(event);
  }

  if (start && end) {
    if (!isBefore(start, end)) {
      [event.start, event.end] = [event.end, event.start];
    }

    if (isSameDay(start, end)) {
      res.push(copyEvent(event, startOfDay(start)));
    } else if (Math.abs(differenceInHours(start, end)) < 24) {
      res.push(copyEvent(event, startOfDay(start), null, endOfDay(start)));
      res.push(copyEvent(event, startOfDay(end), startOfDay(end)));
    } else {
      res = concat_default()(res).call(res, parseAllDayEvent(event));
    }
  } else {
    const amend = amendEvent(event);
    res.push(copyEvent(amend, startOfDay(amend.start)));
  }

  return res;
};
/**
 *
 * @param {arr} arr
 * @param  {key}
 * @param {function} func callback function
 * @returns {map}
 * convert events array to may, use datestring as key
 */

const convertEventsArrToMap = (arr, key, func, displayValue) => {
  const res = new core_js_stable_map_default.a();

  for_each_default()(arr).call(arr, item => {
    let val;

    if (key in item) {
      val = item[key];
    } else {
      val = startOfDay(displayValue);
    }

    const k = func ? func(val).toString() : val.toString();

    if (res.has(k)) {
      res.get(k).push(item);
    } else {
      res.set(k, [item]);
    }
  });

  return res;
};
/**
 * @returns {arr}
 * filter out event that is not in the date range
 */

const filterEvents = (events, start, end) => {
  var _context5;

  const res = new core_js_stable_map_default.a();

  map_default()(_context5 = [...instance_keys_default()(events).call(events)]).call(_context5, day => {
    const item = events.get(day);
    const date = new Date(day);

    if (isDateInRange(date, start, end)) {
      res.set(day, item);
    } else if (isBefore(end, date)) {// do nothing
    } else {
      const filtered = filter_default()(item).call(item, i => !i.end || !isBefore(i.end, start));

      const key = start.toString();

      if (res.has(key)) {
        res.set(key, [...res.get(key), ...filtered]);
      } else {
        res.set(key, item);
      }
    }
  });

  return res;
};
/**
 * @returns {arr}
 * filter out event that is not in the week range
 */
// eslint-disable-next-line max-len

const filterWeeklyEvents = (events, weekStart) => filterEvents(events, weekStart, addDays(endOfWeek(weekStart), 1));
/**
 * @returns {arr}
 * arrange and sort all day event for a range
 */

const parseRangeAllDayEvent = (event, startDate, rangeStart, rangeEnd, parsed) => {
  var _context6;

  const dateRangeLen = differenceInCalendarDays(rangeEnd, rangeStart);

  for_each_default()(_context6 = sort_default()(event).call(event, (a, b) => sortDate(a.start, b.start))).call(_context6, item => {
    var _context7, _context8;

    const itemInfo = assign_default()({}, item);

    const {
      end
    } = item;
    let dateLength;
    const j = differenceInCalendarDays(startDate, rangeStart);
    let i = 0;

    while (Boolean(parsed[i]) && Boolean(parsed[i][j])) {
      i++;
    }

    if (!end) {
      dateLength = 0;
    } else {
      dateLength = isDateInRange(end, rangeStart, rangeEnd) ? differenceInCalendarDays(end, startDate) : differenceInCalendarDays(rangeEnd, startDate);
    }

    itemInfo.leftPos = round(Number(j) / dateRangeLen);
    itemInfo.width = Math.min(1 - round(Number(j) / dateRangeLen), round((dateLength + 1) * 1 / dateRangeLen));
    itemInfo.topInd = i;

    for_each_default()(_context7 = [...instance_keys_default()(_context8 = Array(dateLength + 1)).call(_context8)]).call(_context7, dist => {
      if (!parsed[i]) {
        parsed[i] = [];
      }

      if (dist > 0) {
        parsed[i][j + dist] = item;
      } else {
        parsed[i][j + dist] = itemInfo;
      }
    });
  });

  return parsed;
};
/**
 * @returns {arr}
 * arrange and sort weekly all day event
 */

const parseWeeklyAllDayEvent = (event, startDate, weekStart, parsed) => parseRangeAllDayEvent(event, startDate, weekStart, addDays(endOfWeek(startDate), 1), parsed);
const collectDailyEvents = events => {
  const collections = {};

  for_each_default()(events).call(events, (row, rowInd) => {
    for_each_default()(row).call(row, (event, ind) => {
      if (collections[ind]) {
        collections[ind][rowInd] = event;
      } else {
        collections[ind] = [];
        collections[ind][rowInd] = event;
      }
    });
  });

  return collections;
};
const renderDailyEvent = event => {
  // eslint-disable-next-line prefer-const
  let {
    start,
    end,
    allDay,
    children
  } = event;
  let startPos, endPos;

  if (isAllDayEvent(event)) {
    startPos = 0;
    endPos = 0;
  } else if (!start || !end) {
    const amend = amendEvent(event);
    endPos = getPos(amend.end);
    startPos = getPos(amend.start);
  } else {
    if (!isBefore(start, end)) {
      [start, end] = [end, start];
    }

    startPos = getPos(start);
    endPos = getPos(end);
  }

  const parsed = {
    startPos: round(startPos),
    endPos: round(endPos),
    children,
    allDay: Boolean(allDay)
  };
  return parsed;
};
// CONCATENATED MODULE: ../semi-foundation/calendar/foundation.ts














class foundation_CalendarFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  init() {}

  destroy() {
    this.raf && cancelAnimationFrame(this.raf);
  }

  initCurrTime() {
    const {
      showCurrTime,
      displayValue
    } = this.getProps();

    if (showCurrTime && isSameDay(displayValue, getCurrDate())) {
      this._adapter.updateShowCurrTime();

      this.getCurrLocation();
    }
  }

  notifyScrollHeight(height) {
    this._adapter.updateScrollHeight(height);
  }

  closeCard(e, key) {
    this._adapter.unregisterClickOutsideHandler();

    this._adapter.notifyClose(e, key);
  }

  _getDate() {
    const {
      displayValue
    } = this.getProps();
    return displayValue || getCurrDate();
  }

  showCard(e, key) {
    this._adapter.unregisterClickOutsideHandler();

    const bodyWidth = document.querySelector('body').clientWidth;
    const popoverWidth = 110;
    const spacing = bodyWidth - e.target.getBoundingClientRect().right - popoverWidth;

    this._adapter.openCard(key, spacing > 0);

    this._adapter.registerClickOutsideHandler(key, () => {
      this.closeCard(null, key);
    });
  }

  formatCbValue(val) {
    const date = val.shift();
    const dateArr = [date.getFullYear(), date.getMonth(), date.getDate(), ...val]; // @ts-ignore skip

    return new Date(...dateArr);
  }
  /**
   *
   * find the location of showCurrTime red line
   */


  getCurrLocation() {
    let startTime = null;
    let pos = getPos(getCurrDate());

    this._adapter.updateCurrPos(round(pos));

    const frameFunc = () => {
      const timestamp = now_default()();

      if (!startTime) {
        startTime = timestamp;
      }

      const time = timestamp - startTime;

      if (time > 30000) {
        pos = getPos(getCurrDate());

        this._adapter.updateCurrPos(round(pos));

        startTime = timestamp;
      }

      this.raf = requestAnimationFrame(frameFunc);
    };

    this.raf = requestAnimationFrame(frameFunc);
  }

  getWeeklyData(value, dateFnsLocale) {
    const data = {};
    data.month = format_format(value, 'LLL', {
      locale: dateFnsLocale
    });
    data.week = calcWeekData(value, 'week', dateFnsLocale);

    this._adapter.setWeeklyData(data);

    return data;
  }

  getRangeData(value, dateFnsLocale) {
    const data = {};
    const {
      range
    } = this.getProps();
    const len = differenceInCalendarDays(range[1], range[0]);
    data.month = format_format(value, 'LLL', {
      locale: dateFnsLocale
    });
    data.week = calcRangeData(value, range[0], len, 'week', dateFnsLocale);

    this._adapter.setRangeData(data);

    return data;
  }

  getMonthlyData(value, dateFnsLocale) {
    var _context, _context2;

    const monthStart = startOfMonth(value);
    const data = {};
    const numberOfWeek = getWeeksInMonth(value);

    map_default()(_context = [...instance_keys_default()(_context2 = Array(numberOfWeek)).call(_context2)]).call(_context, ind => {
      data[ind] = calcWeekData(addDays(monthStart, ind * 7), 'month', dateFnsLocale);
    });

    this._adapter.setMonthlyData(data);

    return data;
  } // ================== Daily Event ==================


  _parseEvents(events) {
    var _context3;

    const parsed = {
      allDay: [],
      day: []
    };

    for_each_default()(_context3 = map_default()(events).call(events, event => parseEvent(event))).call(_context3, item => {
      for_each_default()(item).call(item, i => {
        i.allDay ? parsed.allDay.push(i) : parsed.day.push(i);
      });
    });

    return parsed;
  }

  getParseDailyEvents(events, date) {
    var _context4;

    if (!date) {
      date = this._getDate();
    }

    const parsed = this._parseEvents(events);

    const {
      displayValue
    } = this.getProps();
    const key = startOfDay(date).toString();
    parsed.allDay = convertEventsArrToMap(parsed.allDay, 'date', startOfDay, displayValue).get(key);
    parsed.day = convertEventsArrToMap(parsed.day, 'date', null, displayValue).get(key);

    if (!parsed.allDay) {
      parsed.allDay = [];
    }

    if (!parsed.day) {
      parsed.day = [];
    }

    parsed.day = map_default()(_context4 = parsed.day).call(_context4, item => renderDailyEvent(item));
    return parsed;
  }

  parseDailyEvents() {
    const {
      events,
      displayValue
    } = this.getProps();
    const parsed = this.getParseDailyEvents(events, displayValue);

    this._adapter.setParsedEvents(parsed);

    this._adapter.cacheEventKeys(map_default()(events).call(events, i => i.key));
  } // ================== Weekly Event ==================


  _parseWeeklyEvents(events, weekStart) {
    var _context5, _context6;

    let parsed = [[]];
    const filtered = filterWeeklyEvents(events, weekStart);

    for_each_default()(_context5 = sort_default()(_context6 = [...instance_keys_default()(filtered).call(filtered)]).call(_context6, (a, b) => sortDate(a, b))).call(_context5, item => {
      var _context7;

      const startDate = new Date(item);

      const curr = filter_default()(_context7 = filtered.get(item)).call(_context7, event => isSameDay(event.date, startDate));

      parsed = parseWeeklyAllDayEvent(curr, startDate, weekStart, parsed);
    });

    return parsed;
  }

  _renderWeeklyAllDayEvent(events) {
    const res = [];

    for_each_default()(events).call(events, row => {
      const event = filter_default()(row).call(row, item => 'leftPos' in item);

      res.push(...event);
    });

    return res;
  } // return parsed weekly allday events


  parseWeeklyAllDayEvents(events) {
    const {
      week
    } = this._adapter.getWeeklyData();

    const weekStart = week[0].date;

    const parsed = this._parseWeeklyEvents(events, weekStart);

    const res = this._renderWeeklyAllDayEvent(parsed);

    return res;
  }

  getParsedWeeklyEvents(events) {
    const parsed = this._parseEvents(events);

    const {
      displayValue
    } = this.getProps();
    const result = {};
    result.allDay = convertEventsArrToMap(parsed.allDay, 'start', startOfDay, displayValue);
    result.day = convertEventsArrToMap(parsed.day, 'date', null, displayValue);
    return result;
  } // return parsed weekly allday events


  parseWeeklyEvents() {
    const {
      events
    } = this.getProps();
    const parsed = this.getParsedWeeklyEvents(events);

    this._adapter.setParsedEvents(parsed);

    this._adapter.cacheEventKeys(map_default()(events).call(events, i => i.key));
  } // ================== Monthly Event ==================


  pushDayEventIntoWeekMap(item, index, map) {
    if (index in map) {
      map[index].push(item);
    } else {
      map[index] = [item];
    }
  }

  convertMapToArray(weekMap, weekStart) {
    const eventArray = [];

    for (const entry of entries_default()(weekMap).call(weekMap)) {
      const [key, value] = entry;
      const map = new core_js_stable_map_default.a();
      map.set(key, value);

      const weekEvents = this._parseWeeklyEvents(map, weekStart);

      eventArray.push(...weekEvents);
    }

    return eventArray;
  }

  getParseMonthlyEvents(itemLimit) {
    var _context8, _context9;

    const parsed = {};
    const {
      displayValue,
      events
    } = this.getProps();

    const currDate = this._getDate();

    const firstDayOfMonth = startOfMonth(displayValue);
    const lastDayOfMonth = endOfMonth(displayValue);
    const res = [];

    for_each_default()(_context8 = sort_default()(events).call(events, (prev, next) => {
      if (isBefore(prev.start, next.start)) {
        return -1;
      }

      if (isAfter(prev.start, next.start)) {
        return 1;
      }

      return 0;
    })).call(_context8, event => {
      const parsedEvent = parseAllDayEvent(event, event.allDay, currDate);
      res.push(...parsedEvent);
    });

    filter_default()(res).call(res, item => isSameMonth_isSameMonth(item.date, displayValue));

    for_each_default()(res).call(res, item => {
      // WeekInd calculation error, need to consider the boundary situation at the beginning/end of the month
      // When the date falls within the month
      if (isSameMonth_isSameMonth(item.date, displayValue)) {
        const weekInd = getWeekOfMonth(item.date) - 1;
        this.pushDayEventIntoWeekMap(item, weekInd, parsed);
        return;
      } // When the date is within the previous month


      if (isBefore(item.date, firstDayOfMonth)) {
        if (isSameWeek(item.date, firstDayOfMonth)) {
          this.pushDayEventIntoWeekMap(item, 0, parsed);
        }

        return;
      } // When the date is within the next month


      if (isAfter(item.date, lastDayOfMonth)) {
        if (isSameWeek(item.date, lastDayOfMonth)) {
          const weekInd = getWeekOfMonth(lastDayOfMonth) - 1;
          this.pushDayEventIntoWeekMap(item, weekInd, parsed);
        }

        return;
      }
    });

    for_each_default()(_context9 = keys_default()(parsed)).call(_context9, key => {
      const week = parsed[key];
      parsed[key] = {};
      const weekStart = startOfWeek(week[0].date);
      const weekMap = convertEventsArrToMap(week, 'start', startOfDay); // When there are multiple events in a week, multiple events should be parsed
      // const oldParsedWeeklyEvent = this._parseWeeklyEvents(weekMap, weekStart);

      const parsedWeeklyEvent = this.convertMapToArray(weekMap, weekStart);
      parsed[key].day = collectDailyEvents(parsedWeeklyEvent);
      parsed[key].display = this._renderDisplayEvents(parsedWeeklyEvent);
    });

    return parsed;
  }

  parseMonthlyEvents(itemLimit) {
    const {
      events
    } = this.getProps();
    const parsed = this.getParseMonthlyEvents(itemLimit);

    this._adapter.setParsedEvents(parsed);

    this._adapter.setItemLimit(itemLimit);

    this._adapter.cacheEventKeys(map_default()(events).call(events, i => i.key));
  }

  _renderDisplayEvents(events) {
    // Limits should not be added when calculating the relative position of each event, because there will be calculations that separate two events in the middle of the week
    let displayEvents = slice_default()(events).call(events);

    if (displayEvents.length) {
      displayEvents = this._renderWeeklyAllDayEvent(displayEvents);
    }

    return displayEvents;
  } // ================== Range Event ==================


  _parseRangeEvents(events) {
    var _context10, _context11;

    let parsed = [[]];
    const [start, end] = this.getProp('range');
    const filtered = filterEvents(events, start, end);

    for_each_default()(_context10 = sort_default()(_context11 = [...instance_keys_default()(filtered).call(filtered)]).call(_context11, (a, b) => sortDate(a, b))).call(_context10, item => {
      var _context12;

      const startDate = new Date(item);

      const curr = filter_default()(_context12 = filtered.get(item)).call(_context12, event => isSameDay(event.date, startDate));

      parsed = parseRangeAllDayEvent(curr, startDate, start, end, parsed);
    });

    return parsed;
  }

  _renderRangeAllDayEvent(events) {
    let res = [];

    for_each_default()(events).call(events, row => {
      const event = filter_default()(row).call(row, item => 'leftPos' in item);

      res = [...res, ...event];
    });

    return res;
  } // return parsed weekly allday events


  parseRangeAllDayEvents(events) {
    const parsed = this._parseRangeEvents(events);

    const res = this._renderRangeAllDayEvent(parsed);

    return res;
  }

  getParsedRangeEvents(events) {
    const parsed = this._parseEvents(events);

    const [start] = this.getProp('range');
    parsed.allDay = convertEventsArrToMap(parsed.allDay, 'start', startOfDay, start);
    parsed.day = convertEventsArrToMap(parsed.day, 'date', null, start);
    return parsed;
  } // return parsed weekly allday events


  parseRangeEvents() {
    const {
      events
    } = this.getProps();
    const parsed = this.getParsedRangeEvents(events);

    this._adapter.setParsedEvents(parsed);

    this._adapter.cacheEventKeys(map_default()(events).call(events, i => i.key));
  }

  checkWeekend(val) {
    return checkWeekend(val);
  }

}
// CONCATENATED MODULE: ../semi-foundation/calendar/constants.ts

const calendar_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-calendar")
};
const calendar_constants_strings = {
  MODE: ['day', 'week', 'month', 'range']
};

// EXTERNAL MODULE: ../semi-foundation/calendar/calendar.scss
var calendar = __webpack_require__("rIXb");

// CONCATENATED MODULE: ./calendar/dayCol.tsx





/* eslint-disable max-len */








const dayCol_prefixCls = "".concat(calendar_constants_cssClasses.PREFIX, "-grid");

function pad(d) {
  return d < 10 ? "0".concat(d.toString()) : d.toString();
}

class dayCol_DayCol extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.renderEvents = () => {
      const {
        events,
        scrollHeight
      } = this.props;

      const list = map_default()(events).call(events, (event, ind) => {
        var _context, _context2;

        const {
          startPos,
          endPos,
          children,
          key
        } = event;
        const top = startPos * scrollHeight;
        const height = (endPos - startPos) * scrollHeight;

        if (!height) {
          return undefined;
        }

        const style = {
          top: "".concat(top, "px"),
          height: "".concat(height, "px")
        };
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
          className: concat_default()(_context = "".concat(calendar_constants_cssClasses.PREFIX, "-event-item ")).call(_context, calendar_constants_cssClasses.PREFIX, "-event-day"),
          style: style,
          key: key || concat_default()(_context2 = "".concat(top, "-")).call(_context2, ind)
        }, children);
      });

      return list;
    };

    this.renderCurrTime = () => {
      const {
        currPos
      } = this.state;
      const {
        scrollHeight
      } = this.props;
      const key = currPos;
      const top = currPos * scrollHeight;
      const style = {
        top
      };
      const circle = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(dayCol_prefixCls, "-curr-circle"),
        style: style
      });
      const line = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(dayCol_prefixCls, "-curr-line"),
        style: style
      });
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, {
        key: key
      }, circle, line);
    };

    this.handleClick = (e, val) => {
      this.props.handleClick(e, val);
    };

    this.renderGrid = () => {
      var _context3, _context4;

      const showCurrTime = this.props.showCurrTime ? this.state.showCurrTime : false;
      const {
        displayValue,
        isWeekend,
        dateGridRender
      } = this.props;
      const skCls = classnames_default()("".concat(dayCol_prefixCls, "-skeleton"), {
        ["".concat(calendar_constants_cssClasses.PREFIX, "-weekend")]: isWeekend
      });
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(dayCol_prefixCls),
        role: "presentation"
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "gridcell",
        className: "".concat(dayCol_prefixCls, "-content")
      }, showCurrTime ? this.renderCurrTime() : null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        role: "row",
        className: skCls
      }, map_default()(_context3 = [...instance_keys_default()(_context4 = Array(25)).call(_context4)]).call(_context3, item => {
        const line = classnames_default()({
          ["".concat(dayCol_prefixCls, "-skeleton-row-line")]: true
        });
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, {
          key: "".concat(item, "-daycol")
        }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
          "data-time": "".concat(pad(item), ":00:00"),
          className: line,
          onClick: e => this.handleClick(e, [displayValue, item, 0, 0])
        }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
          "data-time": "".concat(pad(item), ":30:00"),
          onClick: e => this.handleClick(e, [displayValue, item, 30, 0])
        }));
      })), dateGridRender && dateGridRender(displayValue.toString(), displayValue), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        className: "".concat(calendar_constants_cssClasses.PREFIX, "-event-items")
      }, this.renderEvents())));
    };

    this.state = {
      currPos: 0,
      showCurrTime: false
    };
    this.foundation = new foundation_CalendarFoundation(this.adapter);
  }

  componentDidMount() {
    this.foundation.init();
    this.foundation.initCurrTime();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      updateCurrPos: currPos => {
        this.setState({
          currPos
        });
      },
      updateShowCurrTime: () => {
        this.setState({
          showCurrTime: true
        });
      }
    });
  }

  render() {
    const grid = this.renderGrid();
    return grid;
  }

}
dayCol_DayCol.propTypes = {
  events: prop_types_default.a.array,
  displayValue: prop_types_default.a.instanceOf(Date),
  showCurrTime: prop_types_default.a.bool,
  scrollHeight: prop_types_default.a.number,
  currPos: prop_types_default.a.number,
  handleClick: prop_types_default.a.func,
  mode: prop_types_default.a.string,
  isWeekend: prop_types_default.a.bool,
  dateGridRender: prop_types_default.a.func
};
dayCol_DayCol.defaultProps = {
  events: [],
  showCurrTime: true,
  scrollHeight: 0,
  currPos: 0,
  mode: 'dayCol'
};
dayCol_DayCol.contextType = locale_context;
// CONCATENATED MODULE: ./calendar/timeCol.tsx










const timeCol_prefixCls = "".concat(calendar_constants_cssClasses.PREFIX, "-time");
class timeCol_timeCol extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  formatTime(item) {
    const {
      renderTimeDisplay
    } = this.props;

    if (typeof renderTimeDisplay === 'function') {
      return renderTimeDisplay(item);
    } else {
      const replaceTime = (template, time) => template.replace('${time}', String(time));

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
        componentName: "Calendar",
        key: "locale-".concat(item)
      }, locale => {
        let time = item < 12 ? replaceTime(locale.AM, item) : replaceTime(locale.PM, item - 12);

        if (item === 12) {
          time = replaceTime(locale.PM, item);
        }

        return time;
      });
    }
  }

  renderTime() {
    var _context, _context2;

    const {
      className
    } = this.props;
    const wrapperCls = classnames_default()(className, "".concat(timeCol_prefixCls));

    const list = map_default()(_context = [...instance_keys_default()(_context2 = Array(24)).call(_context2)]).call(_context, item => this.formatTime(item));

    splice_default()(list).call(list, 0, 1, '');

    const inner = map_default()(list).call(list, (item, index) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
      key: "time-".concat(index),
      className: "".concat(timeCol_prefixCls, "-item")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, item)));

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: wrapperCls
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
      className: "".concat(timeCol_prefixCls, "-items")
    }, inner));
  }

  render() {
    const time = this.renderTime();
    return time;
  }

}
timeCol_timeCol.propTypes = {
  className: prop_types_default.a.string,
  renderTimeDisplay: prop_types_default.a.func
};
timeCol_timeCol.contextType = locale_context;
// CONCATENATED MODULE: ./calendar/dayCalendar.tsx















const dayCalendar_prefixCls = "".concat(calendar_constants_cssClasses.PREFIX, "-day");
class dayCalendar_DayCalendar extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.checkWeekend = val => this.foundation.checkWeekend(val);

    this.renderAllDayEvents = events => {
      const list = map_default()(events).call(events, (event, ind) => {
        var _context;

        const {
          children,
          key
        } = event;
        return (
          /*#__PURE__*/
          // eslint-disable-next-line max-len
          external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
            className: concat_default()(_context = "".concat(calendar_constants_cssClasses.PREFIX, "-event-item ")).call(_context, calendar_constants_cssClasses.PREFIX, "-event-allday"),
            key: key || "allDay-".concat(ind)
          }, children)
        );
      });

      return list;
    };

    this.handleClick = (e, val) => {
      const {
        onClick
      } = this.props;
      const value = this.foundation.formatCbValue(val);
      onClick && onClick(e, value);
    };

    this.renderAllDay = events => {
      const allDayCls = "".concat(calendar_constants_cssClasses.PREFIX, "-all-day");
      const contentCls = classnames_default()("".concat(allDayCls, "-content"), {
        ["".concat(calendar_constants_cssClasses.PREFIX, "-weekend")]: this.isWeekend
      });
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
        componentName: "Calendar"
      }, locale => {
        var _context2, _context3;

        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          className: "".concat(allDayCls)
        }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
          className: concat_default()(_context2 = concat_default()(_context3 = "".concat(calendar_constants_cssClasses.PREFIX, "-tag ")).call(_context3, allDayCls, "-tag ")).call(_context2, dayCalendar_prefixCls, "-sticky-left")
        }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, locale.allDay)), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          role: "gridcell",
          className: contentCls
        }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
          className: "".concat(calendar_constants_cssClasses.PREFIX, "-event-items")
        }, this.renderAllDayEvents(events))));
      });
    };

    this.foundation = new foundation_CalendarFoundation(this.adapter);
    this.state = {
      scrollHeight: 0,
      parsedEvents: {
        day: [],
        allDay: []
      },
      cachedKeys: []
    };
    this.dom = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.scrollDom = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.isWeekend = false;
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      updateScrollHeight: scrollHeight => {
        this.setState({
          scrollHeight
        });
      },
      setParsedEvents: parsedEvents => {
        this.setState({
          parsedEvents: parsedEvents
        });
      },
      cacheEventKeys: cachedKeys => {
        this.setState({
          cachedKeys
        });
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
    const {
      scrollHeight
    } = this.scrollDom.current;
    this.dom.current.scrollTop = this.props.scrollTop;
    this.foundation.notifyScrollHeight(scrollHeight);
    this.foundation.parseDailyEvents();
  }

  componentDidUpdate(prevProps, prevState) {
    var _context4;

    const prevEventKeys = prevState.cachedKeys;

    const nowEventKeys = map_default()(_context4 = this.props.events).call(_context4, event => event.key);

    if (!isEqual_default()(prevEventKeys, nowEventKeys)) {
      this.foundation.parseDailyEvents();
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  render() {
    // eslint-disable-next-line max-len
    const {
      dateGridRender,
      displayValue,
      showCurrTime,
      renderTimeDisplay,
      markWeekend,
      className,
      height,
      width,
      style,
      header
    } = this.props;
    const dayCls = classnames_default()(dayCalendar_prefixCls, className);

    const dayStyle = assign_default()({
      height,
      width
    }, style);

    const {
      parsedEvents,
      scrollHeight
    } = this.state;
    this.isWeekend = markWeekend && this.checkWeekend(displayValue);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: dayCls,
      style: dayStyle,
      ref: this.dom
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(dayCalendar_prefixCls, "-sticky-top")
    }, header, this.renderAllDay(parsedEvents.allDay)), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(dayCalendar_prefixCls, "-scroll-wrapper")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(dayCalendar_prefixCls, "-scroll"),
      ref: this.scrollDom
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(timeCol_timeCol, {
      className: "".concat(dayCalendar_prefixCls, "-sticky-left"),
      renderTimeDisplay: renderTimeDisplay
    }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dayCol_DayCol, {
      events: parsedEvents.day,
      displayValue: displayValue,
      scrollHeight: scrollHeight,
      handleClick: this.handleClick,
      showCurrTime: showCurrTime,
      isWeekend: this.isWeekend,
      dateGridRender: dateGridRender
    }))));
  }

}
dayCalendar_DayCalendar.propTypes = {
  displayValue: prop_types_default.a.instanceOf(Date),
  events: prop_types_default.a.array,
  header: prop_types_default.a.node,
  showCurrTime: prop_types_default.a.bool,
  onClick: prop_types_default.a.func,
  mode: prop_types_default.a.string,
  renderTimeDisplay: prop_types_default.a.func,
  markWeekend: prop_types_default.a.bool,
  scrollTop: prop_types_default.a.number,
  width: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  height: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  dateGridRender: prop_types_default.a.func
};
dayCalendar_DayCalendar.defaultProps = {
  events: [],
  displayValue: new Date(),
  mode: 'day'
};
dayCalendar_DayCalendar.contextType = locale_context;
// CONCATENATED MODULE: ./calendar/weekCalendar.tsx




















const toPercent = num => {
  const res = num < 1 ? num * 100 : 100;
  return "".concat(res, "%");
};

const weekCalendar_prefixCls = "".concat(calendar_constants_cssClasses.PREFIX, "-week");
const weekCalendar_allDayCls = "".concat(calendar_constants_cssClasses.PREFIX, "-all-day");
class weekCalendar_WeekCalendar extends baseComponent_BaseComponent {
  constructor(props) {
    var _context8;

    super(props);

    this.checkWeekend = val => this.foundation.checkWeekend(val);

    this.handleClick = (e, val) => {
      const {
        onClick
      } = this.props;
      const value = this.foundation.formatCbValue(val);
      onClick && onClick(e, value);
    };

    this.renderDayGrid = () => {
      const {
        parsedEvents
      } = this.state;
      const events = parsedEvents.day;
      const {
        week
      } = this.weeklyData;
      const {
        markWeekend,
        dateGridRender
      } = this.props;

      const inner = map_default()(week).call(week, day => {
        const dateString = day.date.toString();
        const dayEvents = events.has(dateString) ? events.get(dateString) : [];
        const parsed = this.foundation.getParseDailyEvents(dayEvents, day.date);
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dayCol_DayCol, {
          key: "".concat(dateString, "-weekday"),
          displayValue: day.date,
          scrollHeight: this.state.scrollHeight,
          handleClick: this.handleClick,
          events: parsed.day,
          showCurrTime: this.props.showCurrTime,
          isWeekend: markWeekend && day.isWeekend,
          dateGridRender: dateGridRender
        });
      });

      return inner;
    };

    this.renderHeader = dateFnsLocale => {
      var _context, _context2;

      const {
        markWeekend,
        displayValue
      } = this.props;
      const {
        month,
        week
      } = this.foundation.getWeeklyData(displayValue, dateFnsLocale);
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(weekCalendar_prefixCls, "-header")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        className: concat_default()(_context = concat_default()(_context2 = "".concat(calendar_constants_cssClasses.PREFIX, "-tag ")).call(_context2, weekCalendar_prefixCls, "-tag ")).call(_context, weekCalendar_prefixCls, "-sticky-left")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, month)), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "gridcell",
        className: "".concat(weekCalendar_prefixCls, "-grid")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        className: "".concat(weekCalendar_prefixCls, "-grid-row")
      }, map_default()(week).call(week, day => {
        const {
          date,
          dayString,
          weekday,
          isToday
        } = day;
        const listCls = classnames_default()({
          ["".concat(calendar_constants_cssClasses.PREFIX, "-today")]: isToday,
          ["".concat(calendar_constants_cssClasses.PREFIX, "-weekend")]: markWeekend && day.isWeekend
        });
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
          key: "".concat(date.toString(), "-weekheader"),
          className: listCls
        }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
          className: "".concat(calendar_constants_cssClasses.PREFIX, "-today-date")
        }, dayString), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, weekday));
      }))));
    };

    this.renderAllDayEvents = events => {
      const list = map_default()(events).call(events, (event, ind) => {
        var _context3;

        const {
          leftPos,
          width,
          topInd,
          children,
          key
        } = event;
        const top = "".concat(topInd, "em");
        const style = {
          left: toPercent(leftPos),
          width: toPercent(width),
          top
        };
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
          className: concat_default()(_context3 = "".concat(calendar_constants_cssClasses.PREFIX, "-event-item ")).call(_context3, calendar_constants_cssClasses.PREFIX, "-event-allday"),
          key: "allDay-".concat(ind),
          style: style
        }, children);
      });

      return list;
    };

    this.renderAllDay = locale => {
      var _context4, _context5, _context6, _context7;

      const {
        allDay
      } = this.state.parsedEvents;
      const parsed = this.foundation.parseWeeklyAllDayEvents(allDay);
      const maxRowHeight = calcRowHeight(parsed);
      const style = {
        height: "".concat(maxRowHeight, "em")
      };
      const {
        markWeekend
      } = this.props;
      const {
        week
      } = this.weeklyData;
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(weekCalendar_allDayCls),
        style: style
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        className: concat_default()(_context4 = concat_default()(_context5 = "".concat(calendar_constants_cssClasses.PREFIX, "-tag ")).call(_context5, weekCalendar_allDayCls, "-tag ")).call(_context4, weekCalendar_prefixCls, "-sticky-left")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, locale.allDay)), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "gridcell",
        className: concat_default()(_context6 = "".concat(calendar_constants_cssClasses.PREFIX, "-content ")).call(_context6, weekCalendar_allDayCls, "-content")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        className: "".concat(weekCalendar_allDayCls, "-skeleton")
      }, map_default()(_context7 = keys_default()(week)).call(_context7, (date, ind) => {
        const listCls = classnames_default()({
          ["".concat(calendar_constants_cssClasses.PREFIX, "-weekend")]: markWeekend && week[date].isWeekend
        });
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
          key: "".concat(date, "-weekgrid"),
          className: listCls
        });
      })), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        className: "".concat(calendar_constants_cssClasses.PREFIX, "-event-items")
      }, this.renderAllDayEvents(parsed))));
    };

    this.state = {
      scrollHeight: 0,
      parsedEvents: {
        day: new core_js_stable_map_default.a(),
        allDay: new core_js_stable_map_default.a()
      },
      cachedKeys: []
    };
    this.foundation = new foundation_CalendarFoundation(this.adapter);
    this.dom = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.scrollDom = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.handleClick = bind_default()(_context8 = this.handleClick).call(_context8, this);
    this.allDayRowHeight = 1;
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      setWeeklyData: data => {
        this.weeklyData = data;
      },
      getWeeklyData: () => this.weeklyData,
      updateScrollHeight: scrollHeight => {
        this.setState({
          scrollHeight
        });
      },
      setParsedEvents: parsedEvents => {
        this.setState({
          parsedEvents: parsedEvents
        });
      },
      cacheEventKeys: cachedKeys => {
        this.setState({
          cachedKeys
        });
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
    const {
      scrollHeight
    } = this.scrollDom.current;
    this.dom.current.scrollTop = this.props.scrollTop;
    this.foundation.notifyScrollHeight(scrollHeight);
    this.foundation.parseWeeklyEvents();
  }

  componentDidUpdate(prevProps, prevState) {
    var _context9;

    const prevEventKeys = prevState.cachedKeys;

    const nowEventKeys = map_default()(_context9 = this.props.events).call(_context9, event => event.key);

    if (!isEqual_default()(prevEventKeys, nowEventKeys)) {
      this.foundation.parseWeeklyEvents();
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  render() {
    const {
      renderTimeDisplay,
      className,
      height,
      width,
      style,
      header
    } = this.props;
    const weekCls = classnames_default()(weekCalendar_prefixCls, className);

    const weekStyle = assign_default()({
      height,
      width
    }, style);

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
      componentName: "Calendar"
    }, (locale, localeCode, dateFnsLocale) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: weekCls,
      style: weekStyle,
      ref: this.dom
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(weekCalendar_prefixCls, "-sticky-top")
    }, header, this.renderHeader(dateFnsLocale), this.renderAllDay(locale)), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(weekCalendar_prefixCls, "-scroll-wrapper")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(weekCalendar_prefixCls, "-scroll"),
      ref: this.scrollDom
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(timeCol_timeCol, {
      className: "".concat(weekCalendar_prefixCls, "-sticky-left"),
      renderTimeDisplay: renderTimeDisplay
    }), this.renderDayGrid()))));
  }

}
weekCalendar_WeekCalendar.propTypes = {
  displayValue: prop_types_default.a.instanceOf(Date),
  header: prop_types_default.a.node,
  events: prop_types_default.a.array,
  mode: prop_types_default.a.string,
  showCurrTime: prop_types_default.a.bool,
  markWeekend: prop_types_default.a.bool,
  scrollTop: prop_types_default.a.number,
  renderTimeDisplay: prop_types_default.a.func,
  dateGridRender: prop_types_default.a.func,
  width: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  height: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  style: prop_types_default.a.object,
  className: prop_types_default.a.string
};
weekCalendar_WeekCalendar.defaultProps = {
  displayValue: new Date(),
  events: [],
  mode: 'week'
};
weekCalendar_WeekCalendar.contextType = locale_context;
// CONCATENATED MODULE: ./calendar/monthCalendar.tsx









/* eslint-disable jsx-a11y/no-noninteractive-element-to-interactive-role */




 // eslint-disable-next-line max-len










const monthCalendar_toPercent = num => {
  const res = num < 1 ? num * 100 : 100;
  return "".concat(res, "%");
};

const monthCalendar_prefixCls = "".concat(calendar_constants_cssClasses.PREFIX, "-month");
const contentPadding = 60;
const contentHeight = 24;
class monthCalendar_monthCalendar extends baseComponent_BaseComponent {
  constructor(props) {
    var _this, _context4;

    super(props);
    _this = this;

    this.calcItemLimit = () => {
      this.contentCellHeight = this.cellDom.current.getBoundingClientRect().height;
      return Math.max(0, Math.ceil((this.contentCellHeight - contentPadding) / contentHeight));
    };

    this.handleClick = (e, val) => {
      const {
        onClick
      } = this.props;
      const value = this.foundation.formatCbValue(val);
      onClick && onClick(e, value);
    };

    this.showCard = (e, key) => {
      this.foundation.showCard(e, key);
    };

    this.renderHeader = dateFnsLocale => {
      var _context;

      const {
        markWeekend,
        displayValue
      } = this.props;
      this.monthlyData = this.foundation.getMonthlyData(displayValue, dateFnsLocale);
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(monthCalendar_prefixCls, "-header"),
        role: "presentation"
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "presentation",
        className: "".concat(monthCalendar_prefixCls, "-grid")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        role: "row",
        className: "".concat(monthCalendar_prefixCls, "-grid-row")
      }, map_default()(_context = this.monthlyData[0]).call(_context, day => {
        const {
          weekday
        } = day;
        const listCls = classnames_default()({
          ["".concat(calendar_constants_cssClasses.PREFIX, "-weekend")]: markWeekend && day.isWeekend
        });
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
          role: "columnheader",
          "aria-label": weekday,
          key: "".concat(weekday, "-monthheader"),
          className: listCls
        }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, weekday));
      }))));
    };

    this.renderEvents = events => {
      if (!events) {
        return undefined;
      }

      const list = map_default()(events).call(events, (event, ind) => {
        var _context2;

        const {
          leftPos,
          width,
          topInd,
          key,
          children
        } = event;
        const style = {
          left: monthCalendar_toPercent(leftPos),
          width: monthCalendar_toPercent(width),
          top: "".concat(topInd, "em")
        };
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
          className: concat_default()(_context2 = "".concat(calendar_constants_cssClasses.PREFIX, "-event-item ")).call(_context2, calendar_constants_cssClasses.PREFIX, "-event-month"),
          key: key || "".concat(ind, "-monthevent"),
          style: style
        }, children);
      });

      return list;
    };

    this.renderCollapsed = (events, itemInfo, listCls, month) => {
      const {
        itemLimit,
        showCard
      } = this.state;
      const {
        weekday,
        dayString,
        date
      } = itemInfo;
      const key = date.toString();
      const remained = filter_default()(events).call(events, i => Boolean(i)).length - itemLimit;
      const cardCls = "".concat(monthCalendar_prefixCls, "-event-card"); // const top = contentPadding / 2 + this.state.itemLimit * contentHeight;

      const shouldRenderCard = remained > 0;
      const closer = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(iconButton_0, {
        className: "".concat(cardCls, "-close"),
        onClick: e => this.closeCard(e, key),
        type: "tertiary",
        icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClose, null),
        theme: "borderless",
        size: "small"
      });
      const header = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(cardCls, "-header-info")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(cardCls, "-header-info-weekday")
      }, weekday), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(cardCls, "-header-info-date")
      }, dayString));
      const content = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: cardCls
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(cardCls, "-content")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(cardCls, "-header")
      }, header, closer), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(cardCls, "-body")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        className: "".concat(cardCls, "-list")
      }, map_default()(events).call(events, item => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
        key: item.key || "".concat(item.start.toString(), "-event")
      }, item.children))))));
      const pos = showCard && showCard[key] ? showCard[key][1] : 'leftTopOver';
      const text = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
        componentName: "Calendar"
      }, locale =>
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/no-static-element-interactions
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(cardCls, "-wrapper"),
        style: {
          bottom: 0
        },
        onClick: e => this.showCard(e, key)
      }, locale.remaining.replace('${remained}', String(remained))));
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(popover_0, {
        key: "".concat(date.valueOf()),
        content: content,
        position: pos,
        trigger: "custom",
        visible: showCard && showCard[key] && showCard[key][0],
        ref: ref => this.cardRef.set(key, ref)
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
        key: date,
        className: listCls,
        onClick: e => this.handleClick(e, [date])
      }, this.formatDayString(month, dayString), shouldRenderCard ? text : null, this.renderCusDateGrid(date)));
    };

    this.formatDayString = (month, date) => {
      if (date === '1') {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
          componentName: "Calendar"
        }, (locale, localeCode) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
          className: "".concat(monthCalendar_prefixCls, "-date")
        }, month, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
          className: "".concat(calendar_constants_cssClasses.PREFIX, "-today-date")
        }, "\u00A0", date), locale.datestring));
      }

      return (
        /*#__PURE__*/
        // eslint-disable-next-line max-len
        external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
          className: "".concat(monthCalendar_prefixCls, "-date")
        }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
          className: "".concat(calendar_constants_cssClasses.PREFIX, "-today-date")
        }, date))
      );
    };

    this.renderCusDateGrid = date => {
      const {
        dateGridRender
      } = this.props;

      if (!dateGridRender) {
        return null;
      }

      return dateGridRender(date.toString(), date);
    };

    this.renderWeekRow = function (index, weekDay) {
      let events = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      const {
        markWeekend
      } = _this.props;
      const {
        itemLimit
      } = _this.state;
      const {
        display,
        day
      } = events;
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "presentation",
        className: "".concat(monthCalendar_prefixCls, "-weekrow"),
        ref: _this.cellDom,
        key: "".concat(index, "-weekrow")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        role: "row",
        className: "".concat(monthCalendar_prefixCls, "-skeleton")
      }, map_default()(weekDay).call(weekDay, each => {
        const {
          date,
          dayString,
          isToday,
          isSameMonth,
          isWeekend,
          month,
          ind
        } = each;
        const listCls = classnames_default()({
          ["".concat(calendar_constants_cssClasses.PREFIX, "-today")]: isToday,
          ["".concat(calendar_constants_cssClasses.PREFIX, "-weekend")]: markWeekend && isWeekend,
          ["".concat(monthCalendar_prefixCls, "-same")]: isSameMonth
        });
        const shouldRenderCollapsed = Boolean(day && day[ind] && day[ind].length > itemLimit);
        const inner = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
          role: "gridcell",
          "aria-label": date.toLocaleDateString(),
          "aria-current": isToday ? "date" : false,
          key: "".concat(date, "-weeksk"),
          className: listCls,
          onClick: e => _this.handleClick(e, [date])
        }, _this.formatDayString(month, dayString), _this.renderCusDateGrid(date));

        if (!shouldRenderCollapsed) {
          return inner;
        }

        return _this.renderCollapsed(day[ind], each, listCls, month);
      })), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        className: "".concat(calendar_constants_cssClasses.PREFIX, "-event-items")
      }, display ? _this.renderEvents(display) : null));
    };

    this.renderMonthGrid = () => {
      var _context3;

      const {
        parsedEvents
      } = this.state;
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "presentation",
        className: "".concat(monthCalendar_prefixCls, "-week")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        role: "presentation",
        className: "".concat(monthCalendar_prefixCls, "-grid-col")
      }, map_default()(_context3 = keys_default()(this.monthlyData)).call(_context3, weekInd => this.renderWeekRow(weekInd, this.monthlyData[weekInd], parsedEvents[weekInd]))));
    };

    this.state = {
      itemLimit: 0,
      showCard: {},
      parsedEvents: {},
      cachedKeys: []
    };
    this.cellDom = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.foundation = new foundation_CalendarFoundation(this.adapter);
    this.handleClick = bind_default()(_context4 = this.handleClick).call(_context4, this);
    this.cardRef = new core_js_stable_map_default.a();
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      registerClickOutsideHandler: (key, cb) => {
        const clickOutsideHandler = e => {
          const cardInstance = this.cardRef && this.cardRef.get(key); // eslint-disable-next-line react/no-find-dom-node

          const cardDom = external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default.a.findDOMNode(cardInstance);

          if (cardDom && !cardDom.contains(e.target)) {
            cb();
          }
        };

        this.clickOutsideHandler = clickOutsideHandler;
        document.addEventListener('mousedown', clickOutsideHandler, false);
      },
      unregisterClickOutsideHandler: () => {
        document.removeEventListener('mousedown', this.clickOutsideHandler, false);
      },
      setMonthlyData: data => {
        this.monthlyData = data;
      },
      getMonthlyData: () => this.monthlyData,
      notifyClose: (e, key) => {
        const updates = {};
        updates[key] = [false];
        this.setState(prevState => ({
          showCard: assign_default()(assign_default()({}, prevState.showCard), updates)
        }));
        this.props.onClose && this.props.onClose(e);
      },
      openCard: (key, spacing) => {
        const updates = {};
        const pos = spacing ? 'leftTopOver' : 'rightTopOver';
        updates[key] = [true, pos];
        this.setState(prevState => ({
          showCard: assign_default()({}, updates)
        }));
      },
      setParsedEvents: parsedEvents => {
        this.setState({
          parsedEvents: parsedEvents
        });
      },
      setItemLimit: itemLimit => {
        this.setState({
          itemLimit
        });
      },
      cacheEventKeys: cachedKeys => {
        this.setState({
          cachedKeys
        });
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
    const itemLimit = this.calcItemLimit();
    this.foundation.parseMonthlyEvents(itemLimit);
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  componentDidUpdate(prevProps, prevState) {
    var _context5;

    const prevEventKeys = prevState.cachedKeys;

    const nowEventKeys = map_default()(_context5 = this.props.events).call(_context5, event => event.key);

    let itemLimitUpdate = false;
    let {
      itemLimit
    } = this.state;

    if (prevProps.height !== this.props.height) {
      itemLimit = this.calcItemLimit();

      if (prevState.itemLimit !== itemLimit) {
        itemLimitUpdate = true;
      }
    }

    if (!isEqual_default()(prevEventKeys, nowEventKeys) || itemLimitUpdate) {
      this.foundation.parseMonthlyEvents(itemLimit || this.props.events);
    }
  }

  closeCard(e, key) {
    this.foundation.closeCard(e, key);
  }

  render() {
    const {
      className,
      height,
      width,
      style,
      header
    } = this.props;
    const monthCls = classnames_default()(monthCalendar_prefixCls, className);

    const monthStyle = assign_default()({
      height,
      width
    }, style);

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
      componentName: "Calendar"
    }, (locale, localeCode, dateFnsLocale) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "grid",
      className: monthCls,
      key: this.state.itemLimit,
      style: monthStyle
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "presentation",
      className: "".concat(monthCalendar_prefixCls, "-sticky-top")
    }, header, this.renderHeader(dateFnsLocale)), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "presentation",
      className: "".concat(monthCalendar_prefixCls, "-grid-wrapper")
    }, this.renderMonthGrid())));
  }

}
monthCalendar_monthCalendar.propTypes = {
  displayValue: prop_types_default.a.instanceOf(Date),
  header: prop_types_default.a.node,
  events: prop_types_default.a.array,
  mode: prop_types_default.a.string,
  markWeekend: prop_types_default.a.bool,
  width: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  height: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  dateGridRender: prop_types_default.a.func,
  onClick: prop_types_default.a.func,
  onClose: prop_types_default.a.func
};
monthCalendar_monthCalendar.defaultProps = {
  displayValue: new Date(),
  events: [],
  mode: 'month'
};
monthCalendar_monthCalendar.contextType = locale_context;
// CONCATENATED MODULE: ./calendar/rangeCalendar.tsx









 // eslint-disable-next-line max-len











const rangeCalendar_toPercent = num => {
  const res = num < 1 ? num * 100 : 100;
  return "".concat(res, "%");
};

const rangeCalendar_prefixCls = "".concat(calendar_constants_cssClasses.PREFIX, "-week");
const rangeCalendar_allDayCls = "".concat(calendar_constants_cssClasses.PREFIX, "-all-day");
class rangeCalendar_RangeCalendar extends baseComponent_BaseComponent {
  constructor(props) {
    var _context8;

    super(props);

    this.handleClick = (e, val) => {
      const {
        onClick
      } = this.props;
      const value = this.foundation.formatCbValue(val);
      onClick && onClick(e, value);
    };

    this.renderDayGrid = () => {
      const {
        parsedEvents
      } = this.state;
      const events = parsedEvents.day;
      const {
        week
      } = this.RangeData;
      const {
        markWeekend,
        dateGridRender
      } = this.props;

      const inner = map_default()(week).call(week, day => {
        const dateString = day.date.toString();
        const dayEvents = events.has(dateString) ? events.get(dateString) : [];
        const parsed = this.foundation.getParseDailyEvents(dayEvents, day.date);
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dayCol_DayCol, {
          key: "".concat(dateString, "-weekday"),
          displayValue: day.date,
          scrollHeight: this.state.scrollHeight,
          handleClick: this.handleClick,
          events: parsed.day,
          showCurrTime: this.props.showCurrTime,
          isWeekend: markWeekend && day.isWeekend,
          dateGridRender: dateGridRender
        });
      });

      return inner;
    };

    this.renderHeader = dateFnsLocale => {
      var _context, _context2;

      const {
        markWeekend,
        range
      } = this.props;
      const {
        month,
        week
      } = this.foundation.getRangeData(range[0], dateFnsLocale);
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(rangeCalendar_prefixCls, "-header")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        className: concat_default()(_context = concat_default()(_context2 = "".concat(calendar_constants_cssClasses.PREFIX, "-tag ")).call(_context2, rangeCalendar_prefixCls, "-tag ")).call(_context, rangeCalendar_prefixCls, "-sticky-left")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, month)), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "gridcell",
        className: "".concat(rangeCalendar_prefixCls, "-grid")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        className: "".concat(rangeCalendar_prefixCls, "-grid-row")
      }, map_default()(week).call(week, day => {
        const {
          date,
          dayString,
          weekday,
          isToday
        } = day;
        const listCls = classnames_default()({
          ["".concat(calendar_constants_cssClasses.PREFIX, "-today")]: isToday,
          ["".concat(calendar_constants_cssClasses.PREFIX, "-weekend")]: markWeekend && day.isWeekend
        });
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
          key: "".concat(date.toString(), "-weekheader"),
          className: listCls
        }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
          className: "".concat(calendar_constants_cssClasses.PREFIX, "-today-date")
        }, dayString), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, weekday));
      }))));
    };

    this.renderAllDayEvents = events => {
      const list = map_default()(events).call(events, (event, ind) => {
        var _context3;

        const {
          leftPos,
          width,
          topInd,
          children
        } = event;
        const top = "".concat(topInd, "em");
        const style = {
          left: rangeCalendar_toPercent(leftPos),
          width: rangeCalendar_toPercent(width),
          top
        };
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
          className: concat_default()(_context3 = "".concat(calendar_constants_cssClasses.PREFIX, "-event-item ")).call(_context3, calendar_constants_cssClasses.PREFIX, "-event-allday"),
          key: "allDay-".concat(ind),
          style: style
        }, children);
      });

      return list;
    };

    this.renderAllDay = locale => {
      var _context4, _context5, _context6, _context7;

      const {
        allDay
      } = this.state.parsedEvents;
      const parsed = this.foundation.parseRangeAllDayEvents(allDay);
      const maxRowHeight = calcRowHeight(parsed);
      const style = {
        height: "".concat(maxRowHeight, "em")
      };
      const {
        markWeekend
      } = this.props;
      const {
        week
      } = this.RangeData;
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(rangeCalendar_allDayCls),
        style: style
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        className: concat_default()(_context4 = concat_default()(_context5 = "".concat(calendar_constants_cssClasses.PREFIX, "-tag ")).call(_context5, rangeCalendar_allDayCls, "-tag ")).call(_context4, rangeCalendar_prefixCls, "-sticky-left")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, locale.allDay)), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "gridcell",
        className: concat_default()(_context6 = "".concat(calendar_constants_cssClasses.PREFIX, "-content ")).call(_context6, rangeCalendar_allDayCls, "-content")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        className: "".concat(rangeCalendar_allDayCls, "-skeleton")
      }, map_default()(_context7 = keys_default()(week)).call(_context7, (date, ind) => {
        const listCls = classnames_default()({
          ["".concat(calendar_constants_cssClasses.PREFIX, "-weekend")]: markWeekend && week[date].isWeekend
        });
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
          key: "".concat(date, "-weekgrid"),
          className: listCls
        });
      })), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        className: "".concat(calendar_constants_cssClasses.PREFIX, "-event-items")
      }, this.renderAllDayEvents(parsed))));
    };

    this.state = {
      scrollHeight: 0,
      parsedEvents: {
        day: new core_js_stable_map_default.a(),
        allDay: new core_js_stable_map_default.a()
      },
      cachedKeys: []
    };
    this.foundation = new foundation_CalendarFoundation(this.adapter);
    this.dom = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.scrollDom = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.handleClick = bind_default()(_context8 = this.handleClick).call(_context8, this);
    this.allDayRowHeight = 1;
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      setRangeData: data => {
        this.RangeData = data;
      },
      getRangeData: () => this.RangeData,
      updateScrollHeight: scrollHeight => {
        this.setState({
          scrollHeight
        });
      },
      setParsedEvents: parsedEvents => {
        this.setState({
          parsedEvents: parsedEvents
        });
      },
      cacheEventKeys: cachedKeys => {
        this.setState({
          cachedKeys
        });
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
    const {
      scrollHeight
    } = this.scrollDom.current;
    this.dom.current.scrollTop = this.props.scrollTop;
    this.foundation.notifyScrollHeight(scrollHeight);
    this.foundation.parseRangeEvents();
  }

  componentDidUpdate(prevProps, prevState) {
    var _context9;

    const prevEventKeys = prevState.cachedKeys;

    const nowEventKeys = map_default()(_context9 = this.props.events).call(_context9, event => event.key);

    if (!isEqual_default()(prevEventKeys, nowEventKeys)) {
      this.foundation.parseRangeEvents();
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  render() {
    const {
      renderTimeDisplay,
      className,
      height,
      width,
      style,
      header
    } = this.props;
    const weekCls = classnames_default()(rangeCalendar_prefixCls, className);

    const weekStyle = assign_default()({
      height,
      width
    }, style);

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
      componentName: "Calendar"
    }, (locale, localeCode, dateFnsLocale) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: weekCls,
      style: weekStyle,
      ref: this.dom
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(rangeCalendar_prefixCls, "-sticky-top")
    }, header, this.renderHeader(dateFnsLocale), this.renderAllDay(locale)), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(rangeCalendar_prefixCls, "-scroll-wrapper")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(rangeCalendar_prefixCls, "-scroll"),
      ref: this.scrollDom
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(timeCol_timeCol, {
      className: "".concat(rangeCalendar_prefixCls, "-sticky-left"),
      renderTimeDisplay: renderTimeDisplay
    }), this.renderDayGrid()))));
  }

}
rangeCalendar_RangeCalendar.propTypes = {
  // displayValue: PropTypes.instanceOf(Date),
  range: prop_types_default.a.array,
  header: prop_types_default.a.node,
  events: prop_types_default.a.array,
  mode: prop_types_default.a.string,
  showCurrTime: prop_types_default.a.bool,
  markWeekend: prop_types_default.a.bool,
  scrollTop: prop_types_default.a.number,
  renderTimeDisplay: prop_types_default.a.func,
  dateGridRender: prop_types_default.a.func,
  width: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  height: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  style: prop_types_default.a.object,
  className: prop_types_default.a.string
};
rangeCalendar_RangeCalendar.defaultProps = {
  events: [],
  mode: 'range'
};
rangeCalendar_RangeCalendar.contextType = locale_context;
// CONCATENATED MODULE: ./calendar/index.tsx




var calendar_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};










 // eslint-disable-next-line @typescript-eslint/ban-types

class calendar_Calendar extends baseComponent_BaseComponent {
  render() {
    const _a = this.props,
          {
      mode
    } = _a,
          rest = calendar_rest(_a, ["mode"]);

    const component = {
      month: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(monthCalendar_monthCalendar, null),
      week: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(weekCalendar_WeekCalendar, null),
      day: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dayCalendar_DayCalendar, null),
      range: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(rangeCalendar_RangeCalendar, null)
    };
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(component[mode], assign_default()({}, rest));
  }

}

calendar_Calendar.propTypes = {
  displayValue: prop_types_default.a.instanceOf(Date),
  header: prop_types_default.a.node,
  events: prop_types_default.a.arrayOf(prop_types_default.a.shape({
    allDay: prop_types_default.a.bool,
    start: prop_types_default.a.instanceOf(Date),
    end: prop_types_default.a.instanceOf(Date),
    key: prop_types_default.a.string.isRequired,
    children: prop_types_default.a.node
  })),
  mode: prop_types_default.a.string,
  showCurrTime: prop_types_default.a.bool,
  scrollTop: prop_types_default.a.number,
  onClick: prop_types_default.a.func,
  renderTimeDisplay: prop_types_default.a.func,
  markWeekend: prop_types_default.a.bool,
  width: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  height: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  style: prop_types_default.a.object,
  className: prop_types_default.a.string
};
calendar_Calendar.defaultProps = {
  events: [],
  displayValue: new Date(),
  showCurrTime: true,
  mode: 'week',
  markWeekend: false,
  height: 600,
  scrollTop: 400
};

/* harmony default export */ var calendar_0 = (calendar_Calendar);
// CONCATENATED MODULE: ../semi-foundation/card/constants.ts

const card_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-card")
};
const card_constants_strings = {
  SHADOWS: ['hover', 'always'],
  TYPE: ['grid']
};

// EXTERNAL MODULE: ../semi-foundation/card/card.scss
var card = __webpack_require__("yUwd");

// CONCATENATED MODULE: ./card/meta.tsx




var meta_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};





const prefixcls = card_constants_cssClasses.PREFIX;

class meta_Meta extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    const _a = this.props,
          {
      avatar,
      className,
      description,
      style,
      title
    } = _a,
          others = meta_rest(_a, ["avatar", "className", "description", "style", "title"]);

    const metaCls = classnames_default()("".concat(prefixcls, "-meta"), className);
    const avatarNode = avatar && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixcls, "-meta-avatar")
    }, avatar);
    const titleNode = title && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixcls, "-meta-wrapper-title")
    }, title);
    const descriptionNode = description && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixcls, "-meta-wrapper-description")
    }, description);
    const wrapper = title || description ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixcls, "-meta-wrapper")
    }, titleNode, descriptionNode) : null;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({}, others, {
      className: metaCls,
      style: style
    }), avatarNode, wrapper);
  }

}

meta_Meta.propTypes = {
  avatar: prop_types_default.a.node,
  className: prop_types_default.a.string,
  description: prop_types_default.a.node,
  style: prop_types_default.a.object,
  title: prop_types_default.a.node
};
/* harmony default export */ var meta = (meta_Meta);
// CONCATENATED MODULE: ../semi-foundation/skeleton/constants.ts

const skeleton_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-skeleton")
};
const skeleton_constants_strings = {};

// EXTERNAL MODULE: ../semi-foundation/skeleton/skeleton.scss
var skeleton = __webpack_require__("aidk");

// CONCATENATED MODULE: ./skeleton/item.tsx






var item_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};







const item_sizeSet = avatar_constants_strings.SIZE;

const item_generator = type => BasicComponent => props => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(BasicComponent, assign_default()({
  type: type
}, props));

class item_Generic extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    var _context, _context2, _context3;

    const _a = this.props,
          {
      prefixCls,
      className,
      type,
      size
    } = _a,
          others = item_rest(_a, ["prefixCls", "className", "type", "size"]);

    const classString = classnames_default()(className, concat_default()(_context = "".concat(prefixCls, "-")).call(_context, type), {
      [concat_default()(_context2 = concat_default()(_context3 = "".concat(prefixCls, "-")).call(_context3, type, "-")).call(_context2, size)]: type.toUpperCase() === 'AVATAR'
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement('div', assign_default()({
      className: classString
    }, others));
  }

}

item_Generic.propTypes = {
  type: prop_types_default.a.string,
  prefixCls: prop_types_default.a.string,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  size: prop_types_default.a.oneOf(item_sizeSet)
};
item_Generic.defaultProps = {
  prefixCls: skeleton_constants_cssClasses.PREFIX,
  size: 'medium'
};
const item_Avatar = item_generator('avatar')(item_Generic);
const item_Image = item_generator('image')(item_Generic);
const item_Title = item_generator('title')(item_Generic);
const item_Button = item_generator('button')(item_Generic);
class item_Paragraph extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    var _context4;

    const {
      prefixCls,
      className,
      style,
      rows
    } = this.props;
    const classString = classnames_default()(className, "".concat(prefixCls, "-paragraph"));
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
      className: classString,
      style: style
    }, map_default()(_context4 = [...Array(rows)]).call(_context4, (e, i) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
      key: i
    })));
  }

}
item_Paragraph.propTypes = {
  rows: prop_types_default.a.number,
  prefixCls: prop_types_default.a.string,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string
};
item_Paragraph.defaultProps = {
  prefixCls: skeleton_constants_cssClasses.PREFIX,
  rows: 4
};
// CONCATENATED MODULE: ./skeleton/index.tsx




var skeleton_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};








const skeleton_prefixCls = skeleton_constants_cssClasses.PREFIX;

class skeleton_Skeleton extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    const _a = this.props,
          {
      placeholder,
      active,
      children,
      className,
      loading,
      style
    } = _a,
          others = skeleton_rest(_a, ["placeholder", "active", "children", "className", "loading", "style"]);

    const skCls = classnames_default()(skeleton_prefixCls, {
      ["".concat(skeleton_prefixCls, "-active")]: Boolean(active)
    }, className);
    let content;

    if (loading) {
      content = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
        className: skCls,
        style: style
      }, others, {
        "x-semi-prop": "placeholder"
      }), placeholder);
    } else {
      content = children;
    }

    return content;
  }

}

skeleton_Skeleton.Avatar = item_Avatar;
skeleton_Skeleton.Title = item_Title;
skeleton_Skeleton.Button = item_Button;
skeleton_Skeleton.Paragraph = item_Paragraph;
skeleton_Skeleton.Image = item_Image;
skeleton_Skeleton.defaultProps = {
  loading: true
};
skeleton_Skeleton.propTypes = {
  active: prop_types_default.a.bool,
  placeholder: prop_types_default.a.node,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  loading: prop_types_default.a.bool,
  children: prop_types_default.a.node
};
/* harmony default export */ var skeleton_0 = (skeleton_Skeleton);
// CONCATENATED MODULE: ../semi-foundation/space/constants.ts

const space_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-space")
};
const space_constants_strings = {
  ALIGN_SET: ['start', 'end', 'center', 'baseline'],
  SPACING_LOOSE: 'loose',
  SPACING_MEDIUM: 'medium',
  SPACING_TIGHT: 'tight'
};

// EXTERNAL MODULE: ../semi-foundation/space/space.scss
var space = __webpack_require__("nlsB");

// CONCATENATED MODULE: ./space/utils.ts




const REACT_FRAGMENT_TYPE = 'Symbol(react.fragment)';
/**
 * Flatten the children and return the processed data
 */

const utils_flatten = children => {
  var _context;

  let res = [];

  for_each_default()(_context = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children).call(_context, children, child => {
    if (child === undefined || child === null) {
      return;
    }

    if (is_array_default()(child)) {
      res = concat_default()(res).call(res, utils_flatten(child));
    } else if ( /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(child) && child.type && child.type.toString() === REACT_FRAGMENT_TYPE && child.props) {
      res = concat_default()(res).call(res, utils_flatten(child.props.children));
    } else {
      res.push(child);
    }
  });

  return res;
};
// CONCATENATED MODULE: ./space/index.tsx











const space_prefixCls = space_constants_cssClasses.PREFIX;

class space_Space extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    var _context;

    const {
      children = null,
      style,
      className,
      spacing,
      wrap,
      align,
      vertical
    } = this.props;
    const isWrap = wrap && vertical ? false : wrap;

    const realStyle = assign_default()({}, style);

    let spacingHorizontalType = '';
    let spacingVerticalType = '';

    if (isString_default()(spacing)) {
      spacingHorizontalType = spacing;
      spacingVerticalType = spacing;
    } else if (isNumber_default()(spacing)) {
      realStyle.rowGap = spacing;
      realStyle.columnGap = spacing;
    } else if (isArray_default()(spacing)) {
      if (isString_default()(spacing[0])) {
        spacingHorizontalType = spacing[0];
      } else if (isNumber_default()(spacing[0])) {
        realStyle.columnGap = "".concat(spacing[0], "px");
      }

      if (isString_default()(spacing[1])) {
        spacingVerticalType = spacing[1];
      } else if (isNumber_default()(spacing[1])) {
        realStyle.rowGap = "".concat(spacing[1], "px");
      }
    }

    const classNames = classnames_default()(space_prefixCls, className, {
      [concat_default()(_context = "".concat(space_prefixCls, "-align-")).call(_context, align)]: align,
      ["".concat(space_prefixCls, "-vertical")]: vertical,
      ["".concat(space_prefixCls, "-horizontal")]: !vertical,
      ["".concat(space_prefixCls, "-wrap")]: isWrap,
      ["".concat(space_prefixCls, "-tight-horizontal")]: spacingHorizontalType === space_constants_strings.SPACING_TIGHT,
      ["".concat(space_prefixCls, "-tight-vertical")]: spacingVerticalType === space_constants_strings.SPACING_TIGHT,
      ["".concat(space_prefixCls, "-medium-horizontal")]: spacingHorizontalType === space_constants_strings.SPACING_MEDIUM,
      ["".concat(space_prefixCls, "-medium-vertical")]: spacingVerticalType === space_constants_strings.SPACING_MEDIUM,
      ["".concat(space_prefixCls, "-loose-horizontal")]: spacingHorizontalType === space_constants_strings.SPACING_LOOSE,
      ["".concat(space_prefixCls, "-loose-vertical")]: spacingVerticalType === space_constants_strings.SPACING_LOOSE
    });
    const childrenNodes = utils_flatten(children);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: classNames,
      style: realStyle,
      "x-semi-prop": "children"
    }, childrenNodes);
  }

}

space_Space.propTypes = {
  wrap: prop_types_default.a.bool,
  align: prop_types_default.a.oneOf(space_constants_strings.ALIGN_SET),
  vertical: prop_types_default.a.bool,
  spacing: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number, prop_types_default.a.array]),
  children: prop_types_default.a.node,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string
};
space_Space.defaultProps = {
  vertical: false,
  wrap: false,
  spacing: 'tight',
  align: 'center'
};
/* harmony default export */ var space_0 = (space_Space);
// CONCATENATED MODULE: ./card/index.tsx









var card_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};










const card_prefixcls = card_constants_cssClasses.PREFIX;



class card_Card extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  constructor() {
    super(...arguments);

    this.renderHeader = () => {
      const {
        title,
        headerExtraContent,
        header,
        headerLine,
        headerStyle
      } = this.props;
      const headerCls = classnames_default()("".concat(card_prefixcls, "-header"), {
        ["".concat(card_prefixcls, "-header-bordered")]: Boolean(headerLine)
      });
      const headerWrapperCls = classnames_default()("".concat(card_prefixcls, "-header-wrapper"));
      const titleCls = classnames_default()("".concat(card_prefixcls, "-header-wrapper-title"), {
        ["".concat(card_prefixcls, "-header-wrapper-spacing")]: Boolean(headerExtraContent)
      });

      if (header || headerExtraContent || title) {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          style: headerStyle,
          className: headerCls
        }, header ||
        /*#__PURE__*/
        // Priority of header over title and headerExtraContent
        external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          className: headerWrapperCls
        }, headerExtraContent && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          className: "".concat(card_prefixcls, "-header-wrapper-extra"),
          "x-semi-prop": "headerExtraContent"
        }, headerExtraContent), title && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          className: titleCls
        }, isString_default()(title) ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(typography_0.Title, {
          heading: 6,
          ellipsis: {
            showTooltip: true,
            rows: 1
          },
          "x-semi-prop": "title"
        }, title) : title)));
      }

      return null;
    };

    this.renderCover = () => {
      const {
        cover
      } = this.props;
      const coverCls = classnames_default()("".concat(card_prefixcls, "-cover"));
      return cover && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: coverCls,
        "x-semi-prop": "cover"
      }, cover);
    };

    this.renderBody = () => {
      const {
        bodyStyle,
        children,
        actions,
        loading
      } = this.props;
      const bodyCls = classnames_default()("".concat(card_prefixcls, "-body"));
      const actionsCls = classnames_default()("".concat(card_prefixcls, "-body-actions"));
      const actionsItemCls = classnames_default()("".concat(card_prefixcls, "-body-actions-item"));
      const placeholder = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(skeleton_0.Title, null), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("br", null), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(skeleton_0.Paragraph, {
        rows: 3
      }));
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        style: bodyStyle,
        className: bodyCls
      }, children && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(skeleton_0, {
        placeholder: placeholder,
        loading: loading,
        active: true
      }, children), is_array_default()(actions) && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: actionsCls
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(space_0, {
        spacing: 12
      }, map_default()(actions).call(actions, (item, idx) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        key: idx,
        className: actionsItemCls,
        "x-semi-prop": "actions.".concat(idx)
      }, item)))));
    };

    this.renderFooter = () => {
      const {
        footer,
        footerLine,
        footerStyle
      } = this.props;
      const footerCls = classnames_default()("".concat(card_prefixcls, "-footer"), {
        ["".concat(card_prefixcls, "-footer-bordered")]: footerLine
      });
      return footer && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        style: footerStyle,
        className: footerCls,
        "x-semi-prop": "footer"
      }, footer);
    };
  }

  render() {
    var _context;

    const _a = this.props,
          {
      bordered,
      shadows,
      style,
      className
    } = _a,
          otherProps = card_rest(_a, ["bordered", "shadows", "style", "className"]);

    const others = omit_default()(otherProps, ['actions', 'bodyStyle', 'cover', 'headerExtraContent', 'footer', 'footerLine', 'footerStyle', 'header', 'headerLine', 'headerStyle', 'loading', 'title']);

    const cardCls = classnames_default()(card_prefixcls, className, {
      ["".concat(card_prefixcls, "-bordered")]: bordered,
      ["".concat(card_prefixcls, "-shadows")]: shadows,
      [concat_default()(_context = "".concat(card_prefixcls, "-shadows-")).call(_context, shadows)]: shadows
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({}, others, {
      "aria-busy": this.props.loading,
      className: cardCls,
      style: style
    }), this.renderHeader(), this.renderCover(), this.renderBody(), this.renderFooter());
  }

}

card_Card.Meta = meta;
card_Card.propTypes = {
  actions: prop_types_default.a.array,
  bodyStyle: prop_types_default.a.object,
  bordered: prop_types_default.a.bool,
  children: prop_types_default.a.node,
  className: prop_types_default.a.string,
  cover: prop_types_default.a.node,
  footer: prop_types_default.a.node,
  footerLine: prop_types_default.a.bool,
  footerStyle: prop_types_default.a.object,
  header: prop_types_default.a.node,
  headerExtraContent: prop_types_default.a.node,
  headerLine: prop_types_default.a.bool,
  headerStyle: prop_types_default.a.object,
  loading: prop_types_default.a.bool,
  shadows: prop_types_default.a.oneOf(card_constants_strings.SHADOWS),
  style: prop_types_default.a.object,
  title: prop_types_default.a.node,
  'aria-label': prop_types_default.a.string
};
card_Card.defaultProps = {
  bordered: true,
  footerLine: false,
  headerLine: true,
  loading: false
};
/* harmony default export */ var card_0 = (card_Card);
// CONCATENATED MODULE: ./card/cardGroup.tsx




var cardGroup_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};






const cardGroup_prefixcls = card_constants_cssClasses.PREFIX;

class cardGroup_CardGroup extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    const _a = this.props,
          {
      children,
      className,
      spacing,
      style,
      type
    } = _a,
          others = cardGroup_rest(_a, ["children", "className", "spacing", "style", "type"]);

    const isGrid = type === 'grid';
    const cardGroupCls = classnames_default()("".concat(cardGroup_prefixcls, "-group"), className, {
      ["".concat(cardGroup_prefixcls, "-group-grid")]: isGrid
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(space_0, assign_default()({
      spacing: isGrid ? 0 : spacing,
      wrap: true,
      className: cardGroupCls,
      style: style
    }, others), children);
  }

}

cardGroup_CardGroup.propTypes = {
  children: prop_types_default.a.node,
  className: prop_types_default.a.string,
  spacing: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.array]),
  style: prop_types_default.a.object,
  type: prop_types_default.a.oneOf(card_constants_strings.TYPE)
};
cardGroup_CardGroup.defaultProps = {
  spacing: 16
};
/* harmony default export */ var cardGroup = (cardGroup_CardGroup);
// CONCATENATED MODULE: ../semi-foundation/carousel/constants.ts

const carousel_constants_cssClasses = {
  CAROUSEL: "".concat(BASE_CLASS_PREFIX, "-carousel"),
  CAROUSEL_INDICATOR: "".concat(BASE_CLASS_PREFIX, "-carousel-indicator"),
  CAROUSEL_INDICATOR_LINE: "".concat(BASE_CLASS_PREFIX, "-carousel-indicator-line"),
  CAROUSEL_INDICATOR_DOT: "".concat(BASE_CLASS_PREFIX, "-carousel-indicator-dot"),
  CAROUSEL_INDICATOR_COLUMNAR: "".concat(BASE_CLASS_PREFIX, "-carousel-indicator-columnar"),
  CAROUSEL_INDICATOR_INACTIVE: "".concat(BASE_CLASS_PREFIX, "-carousel-indicator-inactive"),
  CAROUSEL_INDICATOR_ACTIVE: "".concat(BASE_CLASS_PREFIX, "-carousel-indicator-active"),
  CAROUSEL_CONTENT: "".concat(BASE_CLASS_PREFIX, "-carousel-content"),
  CAROUSEL_ARROW: "".concat(BASE_CLASS_PREFIX, "-carousel-arrow")
};
const carousel_constants_numbers = {
  DEFAULT_ACTIVE_INDEX: 0,
  DEFAULT_INTERVAL: 2000,
  DEFAULT_SPEED: 300
};
const carousel_constants_strings = {
  ANIMATION_MAP: ['slide', 'fade'],
  DIRECTION: ['left', 'right'],
  TYPE_MAP: ['columnar', 'line', 'dot'],
  THEME_MAP: ['dark', 'primary', 'light'],
  POSITION_MAP: ['left', 'center', 'right'],
  ARROW_MAP: ['always', 'hover'],
  SIZE: ['small', 'medium'],
  TRIGGER: ['click', 'hover']
};

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/set-interval.js
var set_interval = __webpack_require__("1l5A");
var set_interval_default = /*#__PURE__*/__webpack_require__.n(set_interval);

// CONCATENATED MODULE: ../semi-foundation/carousel/foundation.ts







class foundation_CarouselFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
    this._interval = null;
  }

  play(interval) {
    if (this._interval) {
      clearInterval(this._interval);
    }

    this._interval = set_interval_default()(() => {
      this.next();
    }, interval);
  }

  stop() {
    if (this._interval) {
      clearInterval(this._interval);
    }
  }

  goTo(activeIndex) {
    const {
      activeIndex: stateActiveIndex
    } = this.getStates();
    const targetIndex = this.getValidIndex(activeIndex);

    this._adapter.setIsReverse(stateActiveIndex > targetIndex);

    if (this.getIsControledComponent()) {
      this._notifyChange(targetIndex);
    } else {
      this._notifyChange(targetIndex);

      this.handleNewActiveIndex(targetIndex);
    }
  }

  next() {
    const {
      activeIndex: stateActiveIndex
    } = this.getStates();
    const targetIndex = this.getValidIndex(stateActiveIndex + 1);

    this._adapter.setIsReverse(false);

    if (this.getIsControledComponent()) {
      this._notifyChange(targetIndex);
    } else {
      this._notifyChange(targetIndex);

      this.handleNewActiveIndex(targetIndex);
    }
  }

  prev() {
    const {
      activeIndex: stateActiveIndex
    } = this.getStates();
    const targetIndex = this.getValidIndex(stateActiveIndex - 1);

    this._adapter.setIsReverse(true);

    if (this.getIsControledComponent()) {
      this._notifyChange(targetIndex);
    } else {
      this._notifyChange(targetIndex);

      this.handleNewActiveIndex(targetIndex);
    }
  }

  destroy() {
    this._unregisterInterval();
  }

  _unregisterInterval() {
    if (this._interval) {
      clearInterval(this._interval);
      this._interval = null;
    }
  }

  _notifyChange(activeIndex) {
    const {
      activeIndex: stateActiveIndex,
      isInit
    } = this.getStates();

    if (isInit) {
      this._adapter.setIsInit(false);
    }

    if (stateActiveIndex !== activeIndex) {
      this._adapter.setPreActiveIndex(stateActiveIndex);

      this._adapter.notifyChange(activeIndex, stateActiveIndex);
    }
  }

  getValidIndex(index) {
    const {
      children
    } = this.getStates();
    return (index + children.length) % children.length;
  }

  getSwitchingTime() {
    const {
      autoPlay,
      speed
    } = this.getProps();
    const autoPlayType = typeof autoPlay;

    if (autoPlayType === 'boolean' && autoPlay) {
      return carousel_constants_numbers.DEFAULT_INTERVAL + speed;
    }

    if (isObject_default()(autoPlay)) {
      return get_default()(autoPlay, 'interval', carousel_constants_numbers.DEFAULT_INTERVAL) + speed;
    }

    return speed;
  }

  getIsControledComponent() {
    return this._isInProps('activeIndex');
  }

  handleAutoPlay() {
    const {
      autoPlay
    } = this.getProps();
    const autoPlayType = typeof autoPlay;

    if (autoPlayType === 'boolean' && autoPlay || isObject_default()(autoPlay)) {
      this.play(this.getSwitchingTime());
    }
  }

  handleKeyDown(event) {
    if (event.key === 'ArrowLeft') {
      this.prev();
    }

    if (event.key === 'ArrowRight') {
      this.next();
    }
  }

  onIndicatorChange(activeIndex) {
    const {
      activeIndex: stateActiveIndex
    } = this.getStates();

    this._adapter.setIsReverse(stateActiveIndex > activeIndex);

    this._notifyChange(activeIndex);

    if (!this.getIsControledComponent()) {
      this.handleNewActiveIndex(activeIndex);
    }
  }

  handleNewActiveIndex(activeIndex) {
    const {
      activeIndex: stateActiveIndex
    } = this.getStates();

    if (stateActiveIndex !== activeIndex) {
      this._adapter.setNewActiveIndex(activeIndex);
    }
  }

  getDefaultActiveIndex() {
    let activeIndex;
    const props = this.getProps();

    if ('activeIndex' in props) {
      activeIndex = props.activeIndex;
    } else if ('defaultActiveIndex' in props) {
      activeIndex = props.defaultActiveIndex;
    }

    return activeIndex;
  }

}

/* harmony default export */ var carousel_foundation = (foundation_CarouselFoundation);
// CONCATENATED MODULE: ../semi-foundation/utils/getDataAttr.ts


function getDataAttr(props) {
  var _context;

  return reduce_default()(_context = keys_default()(props)).call(_context, (prev, key) => {
    if (key.substr(0, 5) === 'aria-' || key.substr(0, 5) === 'data-' || key === 'role') {
      prev[key] = props[key];
    }

    return prev;
  }, {});
}
// CONCATENATED MODULE: ./carousel/CarouselIndicator.tsx





var CarouselIndicator_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable jsx-a11y/no-static-element-interactions */

/* eslint-disable jsx-a11y/click-events-have-key-events */








class CarouselIndicator_CarouselIndicator extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
  constructor() {
    super(...arguments);

    this.onIndicatorChange = activeIndex => {
      this.props.onIndicatorChange(activeIndex);
    };

    this.handleIndicatorClick = activeIndex => {
      const {
        trigger
      } = this.props;

      if (trigger === 'click') {
        this.onIndicatorChange(activeIndex);
      }
    };

    this.handleIndicatorHover = activeIndex => {
      const {
        trigger
      } = this.props;

      if (trigger === 'hover') {
        this.onIndicatorChange(activeIndex);
      }
    };
  }

  renderIndicatorContent() {
    const {
      total,
      theme,
      size,
      activeIndex
    } = this.props;
    const indicatorContent = [];

    for (let i = 0; i < total; i++) {
      var _context, _context2;

      indicatorContent.push( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        // role='none' 
        key: i,
        "data-index": i,
        className: classnames_default()(["".concat(carousel_constants_cssClasses.CAROUSEL_INDICATOR, "-item")], {
          ["".concat(carousel_constants_cssClasses.CAROUSEL_INDICATOR, "-item-active")]: i === activeIndex,
          [concat_default()(_context = "".concat(carousel_constants_cssClasses.CAROUSEL_INDICATOR, "-item-")).call(_context, theme)]: theme,
          [concat_default()(_context2 = "".concat(carousel_constants_cssClasses.CAROUSEL_INDICATOR, "-item-")).call(_context2, size)]: size
        }),
        onClick: () => this.handleIndicatorClick(i),
        onMouseEnter: () => this.handleIndicatorHover(i)
      }));
    }

    return indicatorContent;
  }

  render() {
    var _context3, _context4;

    const _a = this.props,
          {
      type,
      size,
      theme,
      style,
      className,
      position
    } = _a,
          restProps = CarouselIndicator_rest(_a, ["type", "size", "theme", "style", "className", "position"]);

    const classNames = classnames_default()(className, {
      [carousel_constants_cssClasses.CAROUSEL_INDICATOR]: true,
      [concat_default()(_context3 = "".concat(carousel_constants_cssClasses.CAROUSEL_INDICATOR, "-")).call(_context3, type)]: type,
      [concat_default()(_context4 = "".concat(carousel_constants_cssClasses.CAROUSEL_INDICATOR, "-")).call(_context4, position)]: position
    });
    const indicatorContent = this.renderIndicatorContent();
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
      className: classNames,
      style: style
    }, getDataAttr(restProps)), indicatorContent);
  }

}

CarouselIndicator_CarouselIndicator.propTypes = {
  activeKey: prop_types_default.a.number,
  className: prop_types_default.a.string,
  position: prop_types_default.a.oneOf(carousel_constants_strings.POSITION_MAP),
  size: prop_types_default.a.oneOf(carousel_constants_strings.SIZE),
  style: prop_types_default.a.object,
  theme: prop_types_default.a.oneOf(carousel_constants_strings.THEME_MAP),
  total: prop_types_default.a.number,
  onIndicatorChange: prop_types_default.a.func,
  type: prop_types_default.a.oneOf(carousel_constants_strings.TYPE_MAP),
  trigger: prop_types_default.a.oneOf(carousel_constants_strings.TRIGGER)
};
/* harmony default export */ var carousel_CarouselIndicator = (CarouselIndicator_CarouselIndicator);
// CONCATENATED MODULE: ./carousel/CarouselArrow.tsx




/* eslint-disable jsx-a11y/click-events-have-key-events */

/* eslint-disable jsx-a11y/no-static-element-interactions */





class CarouselArrow_CarouselArrow extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
  constructor() {
    super(...arguments);

    this.renderLeftIcon = () => {
      return get_default()(this.props, 'arrowProps.leftArrow.children', /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronLeft, {
        "aria-label": "Previous index",
        size: "inherit"
      }));
    };

    this.renderRightIcon = () => {
      return get_default()(this.props, 'arrowProps.rightArrow.children', /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronRight, {
        "aria-label": "Next index",
        size: "inherit"
      }));
    };
  }

  render() {
    var _context, _context2, _context3;

    const {
      type,
      theme,
      prev,
      next
    } = this.props;
    const classNames = classnames_default()({
      [carousel_constants_cssClasses.CAROUSEL_ARROW]: true,
      [concat_default()(_context = "".concat(carousel_constants_cssClasses.CAROUSEL_ARROW, "-")).call(_context, theme)]: theme,
      ["".concat(carousel_constants_cssClasses.CAROUSEL_ARROW, "-hover")]: type === 'hover'
    });
    const leftClassNames = classnames_default()({
      ["".concat(carousel_constants_cssClasses.CAROUSEL_ARROW, "-prev")]: true,
      [concat_default()(_context2 = "".concat(carousel_constants_cssClasses.CAROUSEL_ARROW, "-")).call(_context2, theme)]: theme
    });
    const rightClassNames = classnames_default()({
      ["".concat(carousel_constants_cssClasses.CAROUSEL_ARROW, "-next")]: true,
      [concat_default()(_context3 = "".concat(carousel_constants_cssClasses.CAROUSEL_ARROW, "-")).call(_context3, theme)]: theme
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: classNames
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
      // role='button'
      className: leftClassNames,
      onClick: prev
    }, get_default()(this.props, 'arrowProps.leftArrow.props'), {
      "x-semi-prop": "arrowProps.leftArrow.children"
    }), this.renderLeftIcon()), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
      // role='button'
      // tabIndex={0} 
      className: rightClassNames,
      onClick: next
    }, get_default()(this.props, 'arrowProps.rightArrow.props'), {
      "x-semi-prop": "arrowProps.rightArrow.children"
    }), this.renderRightIcon()));
  }

}

/* harmony default export */ var carousel_CarouselArrow = (CarouselArrow_CarouselArrow);
// EXTERNAL MODULE: ../semi-foundation/carousel/carousel.scss
var carousel = __webpack_require__("HzcD");

// CONCATENATED MODULE: ./carousel/index.tsx






/* eslint-disable jsx-a11y/no-static-element-interactions */











class carousel_Carousel extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.play = () => {
      return this.foundation.handleAutoPlay();
    };

    this.stop = () => {
      return this.foundation.stop();
    };

    this.goTo = targetIndex => {
      return this.foundation.goTo(targetIndex);
    };

    this.prev = () => {
      return this.foundation.prev();
    };

    this.next = () => {
      return this.foundation.next();
    };

    this.handleAutoPlay = () => {
      if (!this.foundation.getIsControledComponent()) {
        this.foundation.handleAutoPlay();
      }
    };

    this.handleMouseEnter = () => {
      const {
        autoPlay
      } = this.props;

      if (typeof autoPlay !== 'object' || autoPlay.hoverToPause) {
        this.foundation.stop();
      }
    };

    this.handleMouseLeave = () => {
      const {
        autoPlay
      } = this.props;

      if ((typeof autoPlay !== 'object' || autoPlay.hoverToPause) && !this.foundation.getIsControledComponent()) {
        this.foundation.handleAutoPlay();
      }
    };

    this.onIndicatorChange = activeIndex => {
      return this.foundation.onIndicatorChange(activeIndex);
    };

    this.getChildren = () => {
      var _context;

      const {
        children: originChildren
      } = this.props;
      return filter_default()(_context = external_root_React_commonjs2_react_commonjs_react_amd_react_["Children"].toArray(originChildren)).call(_context, child => {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(child);
      });
    };

    this.getValidIndex = activeIndex => {
      return this.foundation.getValidIndex(activeIndex);
    };

    this.renderChildren = () => {
      const {
        speed,
        animation
      } = this.props;
      const {
        activeIndex,
        children,
        preIndex,
        isInit
      } = this.state;
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, map_default()(children).call(children, (child, index) => {
        const isCurrent = index === activeIndex;
        const isPrev = index === this.getValidIndex(activeIndex - 1);
        const isNext = index === this.getValidIndex(activeIndex + 1);
        const animateStyle = {
          transitionTimingFunction: 'ease',
          transitionDuration: "".concat(speed, "ms"),
          animationTimingFunction: 'ease',
          animationDuration: "".concat(speed, "ms")
        };
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(child, {
          style: assign_default()(assign_default()({}, child.props.style), animateStyle),
          className: classnames_default()(child.props.className, {
            ["".concat(carousel_constants_cssClasses.CAROUSEL_CONTENT, "-item-prev")]: isPrev,
            ["".concat(carousel_constants_cssClasses.CAROUSEL_CONTENT, "-item-next")]: isNext,
            ["".concat(carousel_constants_cssClasses.CAROUSEL_CONTENT, "-item-current")]: isCurrent,
            ["".concat(carousel_constants_cssClasses.CAROUSEL_CONTENT, "-item")]: true,
            ["".concat(carousel_constants_cssClasses.CAROUSEL_CONTENT, "-item-active")]: isCurrent,
            ["".concat(carousel_constants_cssClasses.CAROUSEL_CONTENT, "-item-slide-in")]: animation === 'slide' && !isInit && isCurrent,
            ["".concat(carousel_constants_cssClasses.CAROUSEL_CONTENT, "-item-slide-out")]: animation === 'slide' && !isInit && index === preIndex
          })
        });
      }));
    };

    this.renderIndicator = () => {
      const {
        children,
        activeIndex
      } = this.state;
      const {
        showIndicator,
        indicatorType,
        theme,
        indicatorPosition,
        indicatorSize,
        trigger
      } = this.props;
      const carouselIndicatorCls = classnames_default()({
        [carousel_constants_cssClasses.CAROUSEL_INDICATOR]: true
      });

      if (showIndicator && children.length > 1) {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          className: carouselIndicatorCls
        }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(carousel_CarouselIndicator, {
          type: indicatorType,
          total: children.length,
          activeIndex: activeIndex,
          position: indicatorPosition,
          trigger: trigger,
          size: indicatorSize,
          theme: theme,
          onIndicatorChange: this.onIndicatorChange
        }));
      }

      return null;
    };

    this.renderArrow = () => {
      const {
        children
      } = this.state;
      const {
        showArrow,
        arrowType,
        theme,
        arrowProps
      } = this.props;

      if (showArrow && children.length > 1) {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(carousel_CarouselArrow, {
          type: arrowType,
          theme: theme,
          prev: this.prev,
          next: this.next,
          arrowProps: arrowProps
        });
      }

      return null;
    };

    this.foundation = new carousel_foundation(this.adapter);
    const defaultActiveIndex = this.foundation.getDefaultActiveIndex();
    this.state = {
      activeIndex: defaultActiveIndex,
      children: this.getChildren(),
      preIndex: defaultActiveIndex,
      isReverse: false,
      isInit: true
    };
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      notifyChange: (activeIndex, preIndex) => {
        this.props.onChange(activeIndex, preIndex);
      },
      setNewActiveIndex: activeIndex => {
        this.setState({
          activeIndex
        });
      },
      setPreActiveIndex: preIndex => {
        this.setState({
          preIndex
        });
      },
      setIsReverse: isReverse => {
        this.setState({
          isReverse
        });
      },
      setIsInit: isInit => {
        this.setState({
          isInit
        });
      }
    });
  }

  static getDerivedStateFromProps(props, state) {
    const states = {};

    if (!isNullOrUndefined(props.activeIndex) && props.activeIndex !== state.activeIndex) {
      states.activeIndex = props.activeIndex;
    }

    return states;
  }

  componentDidMount() {
    this.handleAutoPlay();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  render() {
    var _context2;

    const {
      animation,
      className,
      style,
      slideDirection
    } = this.props;
    const {
      isReverse
    } = this.state;
    const carouselWrapperCls = classnames_default()(className, {
      [carousel_constants_cssClasses.CAROUSEL]: true
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      // role='listbox'
      // tabIndex={0}
      className: carouselWrapperCls,
      style: style,
      onMouseEnter: debounce_default()(this.handleMouseEnter, 400),
      onMouseLeave: debounce_default()(this.handleMouseLeave, 400)
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: classnames_default()([concat_default()(_context2 = "".concat(carousel_constants_cssClasses.CAROUSEL_CONTENT, "-")).call(_context2, animation)], {
        ["".concat(carousel_constants_cssClasses.CAROUSEL_CONTENT)]: true,
        ["".concat(carousel_constants_cssClasses.CAROUSEL_CONTENT, "-reverse")]: slideDirection === 'left' ? isReverse : !isReverse
      }),
      "x-semi-prop": "children"
    }, this.renderChildren()), this.renderIndicator(), this.renderArrow());
  }

}

carousel_Carousel.propTypes = {
  activeIndex: prop_types_default.a.number,
  animation: prop_types_default.a.oneOf(carousel_constants_strings.ANIMATION_MAP),
  arrowProps: prop_types_default.a.object,
  autoPlay: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.object]),
  className: prop_types_default.a.string,
  defaultActiveIndex: prop_types_default.a.number,
  indicatorPosition: prop_types_default.a.oneOf(carousel_constants_strings.POSITION_MAP),
  indicatorSize: prop_types_default.a.oneOf(carousel_constants_strings.SIZE),
  indicatorType: prop_types_default.a.oneOf(carousel_constants_strings.TYPE_MAP),
  theme: prop_types_default.a.oneOf(carousel_constants_strings.THEME_MAP),
  onChange: prop_types_default.a.func,
  arrowType: prop_types_default.a.oneOf(carousel_constants_strings.ARROW_MAP),
  showArrow: prop_types_default.a.bool,
  showIndicator: prop_types_default.a.bool,
  slideDirection: prop_types_default.a.oneOf(carousel_constants_strings.DIRECTION),
  speed: prop_types_default.a.number,
  style: prop_types_default.a.object,
  trigger: prop_types_default.a.oneOf(carousel_constants_strings.TRIGGER)
};
carousel_Carousel.defaultProps = {
  children: [],
  animation: 'slide',
  autoPlay: true,
  arrowType: 'always',
  defaultActiveIndex: carousel_constants_numbers.DEFAULT_ACTIVE_INDEX,
  indicatorPosition: 'center',
  indicatorSize: 'small',
  indicatorType: 'dot',
  theme: 'light',
  onChange: () => undefined,
  showArrow: true,
  showIndicator: true,
  slideDirection: 'left',
  speed: carousel_constants_numbers.DEFAULT_SPEED,
  trigger: 'click'
};
/* harmony default export */ var carousel_0 = (carousel_Carousel);
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/flatten.js
var lodash_flatten = __webpack_require__("1xil");
var flatten_default = /*#__PURE__*/__webpack_require__.n(lodash_flatten);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/isSet.js
var isSet = __webpack_require__("/iLo");
var isSet_default = /*#__PURE__*/__webpack_require__.n(isSet);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/promise.js
var promise = __webpack_require__("kNzS");
var promise_default = /*#__PURE__*/__webpack_require__.n(promise);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/includes.js
var lodash_includes = __webpack_require__("qYhz");
var lodash_includes_default = /*#__PURE__*/__webpack_require__.n(lodash_includes);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/assign.js
var lodash_assign = __webpack_require__("whR3");
var lodash_assign_default = /*#__PURE__*/__webpack_require__.n(lodash_assign);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/difference.js
var lodash_difference = __webpack_require__("lKOy");
var difference_default = /*#__PURE__*/__webpack_require__.n(lodash_difference);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/some.js
var some = __webpack_require__("q6Y3");
var some_default = /*#__PURE__*/__webpack_require__.n(some);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/every.js
var every = __webpack_require__("sDE4");
var every_default = /*#__PURE__*/__webpack_require__.n(every);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/pick.js
var pick = __webpack_require__("//nZ");
var pick_default = /*#__PURE__*/__webpack_require__.n(pick);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/max.js
var lodash_max = __webpack_require__("LPC+");
var max_default = /*#__PURE__*/__webpack_require__.n(lodash_max);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/uniq.js
var uniq = __webpack_require__("jLkM");
var uniq_default = /*#__PURE__*/__webpack_require__.n(uniq);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/object/entries.js
var object_entries = __webpack_require__("Qn2d");
var object_entries_default = /*#__PURE__*/__webpack_require__.n(object_entries);

// CONCATENATED MODULE: ../semi-foundation/tree/treeUtil.ts






















const DRAG_OFFSET = 0.45;

function getPosition(level, index) {
  var _context;

  return concat_default()(_context = "".concat(level, "-")).call(_context, index);
}

function treeUtil_isValid(val) {
  return !isNull_default()(val) && !isUndefined_default()(val);
}
/**
 * Flat nest tree data into flatten list. This is used for virtual list render.
 * @param treeNodeList Origin data node list
 * @param expandedKeys
 * @param filteredShownKeys
 * need expanded keys, provides `true` means all expanded
 */
// eslint-disable-next-line max-len


function flattenTreeData(treeNodeList, expandedKeys) {
  let filteredShownKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  const flattenList = [];
  const filterSearch = Boolean(filteredShownKeys);

  function flatten(list) {
    let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return map_default()(list).call(list, (treeNode, index) => {
      const pos = getPosition(parent ? parent.pos : '0', index);
      const mergedKey = treeNode.key; // Add FlattenDataNode into list

      const flattenNode = assign_default()(assign_default()({}, pick_default()(treeNode, ['key', 'label', 'value', 'icon', 'disabled', 'isLeaf'])), {
        parent,
        pos,
        children: null,
        data: treeNode,
        _innerDataTag: true
      });

      const isBooleanFilteredShownKeys = typeof filteredShownKeys === 'boolean';

      if (!filterSearch || !isBooleanFilteredShownKeys && filteredShownKeys.has(mergedKey)) {
        flattenList.push(flattenNode);
      } // Loop treeNode children
      // eslint-disable-next-line max-len


      if (expandedKeys.has(mergedKey) && (!filterSearch || !isBooleanFilteredShownKeys && filteredShownKeys.has(mergedKey))) {
        flattenNode.children = flatten(treeNode.children || [], flattenNode);
      } else {
        flattenNode.children = [];
      }

      return flattenNode;
    });
  }

  flatten(treeNodeList);
  return flattenList;
}
function convertJsonToData(treeJson) {
  var _context3;

  const treeData = [];

  const traverseNode = (key, children, path, res) => {
    const currPath = [...path, key];
    const itemKey = currPath.join('-');
    const newNode = {
      key: itemKey,
      label: key,
      value: children
    };

    if (isObject_default()(children)) {
      var _context2;

      const newChildren = [];

      for_each_default()(_context2 = object_entries_default()(children)).call(_context2, c => {
        traverseNode(c[0], c[1], currPath, newChildren);
      });

      newNode.children = newChildren;
    }

    res.push(newNode);
  };

  for_each_default()(_context3 = object_entries_default()(treeJson)).call(_context3, item => traverseNode(item[0], item[1], [], treeData));

  return treeData;
}
/**
 * Traverse all the data by `treeData`.
 */

function traverseDataNodes(treeNodes, callback) {
  const processNode = (node, ind, parent) => {
    const children = node ? node.children : treeNodes;
    const pos = node ? getPosition(parent.pos, ind) : '0'; // Process node if is not root

    if (node) {
      const data = {
        data: assign_default()({}, node),
        ind,
        pos,
        key: node.key !== null ? node.key : pos,
        parentPos: parent.node ? parent.pos : null,
        level: Number(parent.level) + 1
      };
      callback(data);
    } // Process children node


    if (children) {
      for_each_default()(children).call(children, (subNode, subIndex) => {
        processNode(subNode, subIndex, {
          node,
          pos,
          level: parent ? Number(parent.level) + 1 : -1
        });
      });
    }
  };

  processNode(null);
}
/* Convert data to entities map */

function convertDataToEntities(dataNodes) {
  const posEntities = {};
  const keyEntities = {};
  const valueEntities = {};
  const wrapper = {
    posEntities,
    keyEntities,
    valueEntities
  };
  traverseDataNodes(dataNodes, data => {
    const {
      pos,
      key,
      parentPos
    } = data;

    const entity = assign_default()({}, data);

    const value = get_default()(entity, 'data.value', null);

    if (value !== null) {
      valueEntities[value] = key;
    }

    posEntities[pos] = entity;
    keyEntities[key] = entity; // Fill children

    entity.parent = posEntities[parentPos];

    if (entity.parent) {
      entity.parent.children = entity.parent.children || [];
      entity.parent.children.push(entity);
    }
  });
  return wrapper;
}
/* Get key by value */

function findKeysForValues(valueList, valueEntities) {
  let isMultiple = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (!treeUtil_isValid(valueList)) {
    return [];
  }

  if (!isMultiple && is_array_default()(valueList)) {
    valueList = valueList.length ? [valueList[0]] : [];
  } else if (!is_array_default()(valueList)) {
    valueList = [valueList];
  }

  if (isEmpty_default()(valueEntities)) {
    return valueList;
  }

  const res = [];

  for_each_default()(valueList).call(valueList, val => {
    if (val in valueEntities) {
      res.push(valueEntities[val]);
    }
  });

  return res;
}
function findDescendantKeys(selectedKeys, options) {
  let self = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  const res = [];

  const findChild = item => {
    if (!item) {
      return;
    }

    const {
      children
    } = item;
    const hasChildren = treeUtil_isValid(children);

    if (hasChildren) {
      for_each_default()(children).call(children, child => {
        res.push(child.key);
        findChild(options[child.key]);
      });
    }
  };

  for_each_default()(selectedKeys).call(selectedKeys, item => {
    if (self) {
      res.push(item);
    }

    findChild(options[item]);
  });

  return res;
}
function findChildKeys(keys, options) {
  let omitKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  const res = [];
  keys && for_each_default()(keys).call(keys, key => {
    var _context4;

    const opts = options[key];
    opts && opts.children && for_each_default()(_context4 = opts.children).call(_context4, child => {
      if (!omitKeys.length || !includes_default()(omitKeys).call(omitKeys, child.key)) {
        res.push(child.key);
      }
    });
  });
  return res;
}
/* istanbul ignore next */

function findLeafKeys(keys, options) {
  const res = [];

  const findChild = item => {
    if (!item) {
      return;
    }

    const {
      children
    } = item;
    const isLeaf = !treeUtil_isValid(children);

    if (isLeaf) {
      res.push(item.key);
    } else {
      for_each_default()(children).call(children, child => {
        findChild(options[child.key]);
      });
    }
  };

  for_each_default()(keys).call(keys, item => {
    findChild(options[item]);
  });

  return res;
}
function findSiblingKeys(selectedKeys, options) {
  let self = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  const par = [];

  for_each_default()(selectedKeys).call(selectedKeys, item => {
    if (options[item] && options[item].parent) {
      par.push(options[item].parent.key);
    }
  });

  const res = findChildKeys(uniq_default()(par), options, self ? [] : selectedKeys);
  return res;
}
function findAncestorKeys(selectedKeys, options) {
  let self = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  const res = []; // Recursively find the parent element

  const findPar = item => {
    if (item.parent) {
      res.push(item.parent.key);
      findPar(item.parent);
    }
  };

  for_each_default()(selectedKeys).call(selectedKeys, item => {
    options[item] && findPar(options[item]);

    if (self) {
      res.push(item);
    }
  });

  return res;
}

function getSortedKeyList(keyList, keyEntities) {
  const levelMap = {};

  for_each_default()(keyList).call(keyList, key => {
    if (!keyEntities[key]) {
      return;
    }

    const {
      level
    } = keyEntities[key];

    if (levelMap[level]) {
      levelMap[level].push(key);
    } else {
      levelMap[level] = [key];
    }
  });

  return levelMap;
}

function calcCheckedKeys(values, keyEntities) {
  const keyList = is_array_default()(values) ? values : [values];
  const descendantKeys = findDescendantKeys(keyList, keyEntities, true);
  /**
   * Recursively find the parent element. Because the incoming nodes are all checked,
   * their descendants must be checked. That is to say, if the descendant nodes have
   *  disabled+unchecked nodes, their ancestor nodes will definitely not be checked
   */

  const checkedKeys = new set_default.a([...descendantKeys]);
  let halfCheckedKeys = new set_default.a([]);
  let visited = [];
  const levelMap = getSortedKeyList(keyList, keyEntities);

  const calcCurrLevel = node => {
    const {
      key,
      parent,
      level
    } = node; // If the node does not have a parent node, or the node has been processed just now, no processing is done

    if (!parent || includes_default()(visited).call(visited, key)) {
      return;
    }

    const siblingKeys = findSiblingKeys([key], keyEntities); // visited for caching to avoid double counting

    visited = [...visited, ...siblingKeys];

    const allChecked = every_default()(siblingKeys).call(siblingKeys, siblingKey => checkedKeys.has(siblingKey));

    if (!allChecked) {
      const ancestorKeys = findAncestorKeys([key], keyEntities, false);
      halfCheckedKeys = new set_default.a([...halfCheckedKeys, ...ancestorKeys]);
    } else {
      checkedKeys.add(parent.key); // IMPORTANT! parent level may not exist in original level map; if add to the end directly may destroy the hierarchical order

      if (level - 1 in levelMap && level) {
        levelMap[level - 1].push(parent.key);
      } else {
        levelMap[level - 1] = [parent.key];
      }
    }
  }; // Loop keyList from deepest Level to topLevel, bottom up


  while (!isEmpty_default()(levelMap)) {
    var _context5, _context6;

    const maxLevel = max_default()(map_default()(_context5 = keys_default()(levelMap)).call(_context5, key => Number(key)));

    for_each_default()(_context6 = levelMap[maxLevel]).call(_context6, key => calcCurrLevel(keyEntities[key]));

    delete levelMap[maxLevel];
  }

  return {
    checkedKeys,
    halfCheckedKeys
  };
}
/* Calculate the expanded node by key */

function calcExpandedKeys() {
  let keyList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let keyEntities = arguments.length > 1 ? arguments[1] : undefined;
  let autoExpandParent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  if (!is_array_default()(keyList)) {
    keyList = [keyList];
  }

  if (autoExpandParent) {
    const ancestorKeys = findAncestorKeys(keyList, keyEntities, true);
    return new set_default.a(ancestorKeys);
  }

  return new set_default.a(keyList);
}
/* Calculate the expanded node by value */
// eslint-disable-next-line max-len

function calcExpandedKeysForValues(value, keyEntities, isMultiple, valueEntities) {
  const keys = findKeysForValues(value, valueEntities, isMultiple);
  return new set_default.a(findAncestorKeys(keys, keyEntities, false));
}
function calcMotionKeys(oldKeySet, newKeySet, keyEntities) {
  let motionType = 'show';
  const oldKeys = [...oldKeySet];
  const newKeys = [...newKeySet];

  if (Math.abs(oldKeys.length - newKeys.length) !== 1) {
    return {
      motionType,
      motionKeys: []
    };
  }

  let diffKeys = [];

  if (oldKeys.length > newKeys.length) {
    motionType = 'hide';
    diffKeys = difference_default()(oldKeys, newKeys);
  } else {
    diffKeys = difference_default()(newKeys, oldKeys);
  }

  return {
    motionType: diffKeys.length === 1 ? motionType : 'show',
    motionKeys: diffKeys.length === 1 ? findDescendantKeys(diffKeys, keyEntities, false) : []
  };
}
/**
 * @returns whether option includes sugInput.
 * When filterTreeNode is a function,returns the result of filterTreeNode which called with (sugInput, option).
 */

function treeUtil_filter(sugInput, option, filterTreeNode, filterProps) {
  if (!filterTreeNode) {
    return true;
  }

  let filterFn = filterTreeNode;
  let target = option;

  if (typeof filterTreeNode === 'boolean') {
    filterFn = (targetVal, val) => {
      var _context7;

      const input = targetVal.toLowerCase();
      return includes_default()(_context7 = val.toString().toLowerCase()).call(_context7, input);
    };
  }

  if (filterProps) {
    target = option[filterProps];
  }

  return filterFn(sugInput, target);
}
function normalizedArr(val) {
  if (!is_array_default()(val)) {
    return [val];
  } else {
    return val;
  }
}
function normalizeKeyList(keyList, keyEntities) {
  let leafOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  const res = [];
  const keyListSet = new set_default.a(keyList);

  if (!leafOnly) {
    for_each_default()(keyList).call(keyList, key => {
      if (!keyEntities[key]) {
        return;
      }

      const {
        parent
      } = keyEntities[key];

      if (parent && keyListSet.has(parent.key)) {
        return;
      }

      res.push(key);
    });
  } else {
    for_each_default()(keyList).call(keyList, key => {
      if (keyEntities[key] && !treeUtil_isValid(keyEntities[key].children)) {
        res.push(key);
      }
    });
  }

  return res;
}
function getMotionKeys(eventKey, expandedKeys, keyEntities) {
  const res = [];

  const getChild = itemKey => {
    var _context8;

    keyEntities[itemKey].children && for_each_default()(_context8 = keyEntities[itemKey].children).call(_context8, item => {
      const {
        key
      } = item;
      res.push(key);

      if (expandedKeys.has(key)) {
        getChild(key);
      }
    });
  };

  getChild(eventKey);
  return res;
} // eslint-disable-next-line max-len

function calcCheckedKeysForChecked(key, keyEntities, checkedKeys, halfCheckedKeys) {
  const descendantKeys = findDescendantKeys([key], keyEntities, true);
  const nodeItem = keyEntities[key];
  checkedKeys = new set_default.a([...checkedKeys, key]);

  const calcCurrLevel = node => {
    if (!node.parent) {
      return;
    } // eslint-disable-next-line @typescript-eslint/no-shadow


    const {
      key
    } = node;
    const siblingKeys = findSiblingKeys([key], keyEntities); // eslint-disable-next-line @typescript-eslint/no-shadow

    const allChecked = every_default()(siblingKeys).call(siblingKeys, key => checkedKeys.has(key));

    if (!allChecked) {
      const ancestorKeys = findAncestorKeys([key], keyEntities, false);
      halfCheckedKeys = new set_default.a([...halfCheckedKeys, ...ancestorKeys]);
    } else {
      const par = node.parent;
      checkedKeys.add(par.key);
      calcCurrLevel(par);
    }
  };

  calcCurrLevel(nodeItem);
  return {
    checkedKeys: new set_default.a([...checkedKeys, ...descendantKeys]),
    halfCheckedKeys
  };
} // eslint-disable-next-line max-len

function calcCheckedKeysForUnchecked(key, keyEntities, checkedKeys, halfCheckedKeys) {
  const descendantKeys = findDescendantKeys([key], keyEntities, true);
  const nodeItem = keyEntities[key];

  for_each_default()(descendantKeys).call(descendantKeys, descendantKey => {
    if (checkedKeys.has(descendantKey)) {
      checkedKeys.delete(descendantKey);
    }

    if (halfCheckedKeys.has(descendantKey)) {
      halfCheckedKeys.delete(descendantKey);
    }
  });

  const calcCurrLevel = node => {
    const par = node.parent; // no parent

    if (!par) {
      return;
    } // Has a parent node, and the parent node is not checked or halfChecked


    if (!checkedKeys.has(par.key) && !halfCheckedKeys.has(par.key)) {
      return;
    } // Has a parent node, and the parent node is checked or halfChecked
    // eslint-disable-next-line @typescript-eslint/no-shadow


    const {
      key
    } = node;
    const siblingKeys = findSiblingKeys([key], keyEntities); // eslint-disable-next-line @typescript-eslint/no-shadow

    const anyChecked = some_default()(siblingKeys).call(siblingKeys, key => checkedKeys.has(key) || halfCheckedKeys.has(key));

    const ancestorKeys = findAncestorKeys([key], keyEntities, false); // If there is checked or halfChecked in the sibling node, you need to change the parent node to halfChecked

    if (anyChecked) {
      for_each_default()(ancestorKeys).call(ancestorKeys, itemKey => {
        if (checkedKeys.has(itemKey)) {
          checkedKeys.delete(itemKey);
          halfCheckedKeys.add(itemKey);
        }
      }); // If there is no checked or halfChecked in the sibling node, you need to change the parent node to unchecked

    } else {
      if (checkedKeys.has(par.key)) {
        checkedKeys.delete(par.key);
      }

      if (halfCheckedKeys.has(par.key)) {
        halfCheckedKeys.delete(par.key);
      }

      calcCurrLevel(par);
    }
  };

  calcCurrLevel(nodeItem);
  return {
    checkedKeys,
    halfCheckedKeys
  };
}
function filterTreeData(info) {
  var _context9, _context10;

  const {
    showFilteredOnly,
    keyEntities,
    inputValue,
    treeData,
    filterTreeNode,
    filterProps,
    prevExpandedKeys
  } = info;
  let filteredOptsKeys = [];
  filteredOptsKeys = map_default()(_context9 = filter_default()(_context10 = values_default()(keyEntities)).call(_context10, item => treeUtil_filter(inputValue, item.data, filterTreeNode, filterProps))).call(_context9, item => item.key);
  let expandedOptsKeys = findAncestorKeys(filteredOptsKeys, keyEntities, false);

  if (prevExpandedKeys.length) {
    const prevExpandedValidKeys = filter_default()(prevExpandedKeys).call(prevExpandedKeys, key => Boolean(keyEntities[key]));

    expandedOptsKeys = concat_default()(expandedOptsKeys).call(expandedOptsKeys, prevExpandedValidKeys);
  }

  const shownChildKeys = findDescendantKeys(filteredOptsKeys, keyEntities, true);
  const filteredShownKeys = new set_default.a([...shownChildKeys, ...expandedOptsKeys]);
  const flattenNodes = flattenTreeData(treeData, new set_default.a(expandedOptsKeys), showFilteredOnly && filteredShownKeys);
  return {
    flattenNodes,
    filteredKeys: new set_default.a(filteredOptsKeys),
    filteredExpandedKeys: new set_default.a(expandedOptsKeys),
    filteredShownKeys
  };
} // return data.value if data.value exist else fall back to key

function getValueOrKey(data) {
  if (is_array_default()(data)) {
    return map_default()(data).call(data, item => get_default()(item, 'value', item.key));
  }

  return get_default()(data, 'value', data.key);
}
/* Convert value to string */

function normalizeValue(value, withObject) {
  if (withObject && treeUtil_isValid(value)) {
    return getValueOrKey(value);
  } else {
    return value;
  }
}
function updateKeys(keySet, keyEntities) {
  const keyArr = [...keySet];
  return filter_default()(keyArr).call(keyArr, key => key in keyEntities);
}
function calcDisabledKeys(keyEntities) {
  var _context11;

  const disabledKeys = filter_default()(_context11 = keys_default()(keyEntities)).call(_context11, key => keyEntities[key].data.disabled);

  const {
    checkedKeys
  } = calcCheckedKeys(disabledKeys, keyEntities);
  return checkedKeys;
}
function calcDropRelativePosition(event, treeNode) {
  const {
    clientY
  } = event;
  const {
    top,
    bottom,
    height
  } = treeNode.nodeInstance.getBoundingClientRect(); // eslint-disable-next-line @typescript-eslint/restrict-plus-operands

  if (clientY <= top + height * DRAG_OFFSET) {
    return -1;
  }

  if (clientY >= bottom - height * DRAG_OFFSET) {
    return 1;
  }

  return 0;
}
function getDragNodesKeys(key, keyEntities) {
  return findDescendantKeys([key], keyEntities, true);
}
function calcDropActualPosition(pos, relativeDropPos) {
  const posArr = pos.split('-'); // eslint-disable-next-line @typescript-eslint/restrict-plus-operands

  return relativeDropPos + Number(posArr[posArr.length - 1]);
}
// CONCATENATED MODULE: ../semi-foundation/cascader/constants.ts

const cascader_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-cascader"),
  PREFIX_OPTION: "".concat(BASE_CLASS_PREFIX, "-cascader-option")
};
const cascader_constants_strings = {
  SIZE_SET: ['small', 'large', 'default'],
  VALIDATE_STATUS: ['success', 'default', 'error', 'warning'],
  IS_KEY: 'isKey',
  IS_VALUE: 'isValue',
  SHOW_NEXT_BY_CLICK: 'click',
  SHOW_NEXT_BY_HOVER: 'hover',

  /* Merge Type */
  LEAF_ONLY_MERGE_TYPE: 'leafOnly',
  AUTO_MERGE_VALUE_MERGE_TYPE: 'autoMergeValue',
  NONE_MERGE_TYPE: 'none'
};
const cascader_constants_numbers = {};

// CONCATENATED MODULE: ../semi-foundation/cascader/util.ts












function util_getPosition(level, index) {
  var _context;

  return concat_default()(_context = "".concat(level, "-")).call(_context, index);
}

function util_isValid(val) {
  return !isNull_default()(val) && !isUndefined_default()(val);
}
function util_normalizedArr(val) {
  if (!is_array_default()(val)) {
    return [val];
  } else {
    return val;
  }
}
/**
 * Traverse all the data by `treeData`.
 */

function util_traverseDataNodes(treeNodes, callback) {
  const processNode = (node, ind, parent) => {
    const children = node ? node.children : treeNodes;
    let item = null; // Process node if is not root

    if (node) {
      const key = parent ? util_getPosition(parent.key, ind) : "".concat(ind);
      item = {
        data: assign_default()({}, node),
        ind,
        key,
        level: parent ? parent.level + 1 : 0,
        parentKey: parent ? parent.key : null,
        path: parent ? [...parent.path, key] : [key],
        valuePath: parent ? [...parent.valuePath, node.value] : [node.value]
      };
      callback(item);
    } // Process children node


    if (children) {
      for_each_default()(children).call(children, (subNode, subIndex) => {
        processNode(subNode, subIndex, item);
      });
    }
  };

  processNode(null);
}

function util_convertDataToEntities(dataNodes) {
  const keyEntities = {};
  util_traverseDataNodes(dataNodes, data => {
    const {
      key,
      parentKey
    } = data;

    const entity = assign_default()({}, data);

    keyEntities[key] = entity; // Fill children

    entity.parent = keyEntities[parentKey];

    if (entity.parent) {
      entity.parent.children = entity.parent.children || [];
      entity.parent.children.push(entity);
    }
  });
  return keyEntities;
}
function util_findKeysForValues(value, keyEntities) {
  var _context2, _context3;

  const valuePath = util_normalizedArr(value);

  const res = map_default()(_context2 = filter_default()(_context3 = values_default()(keyEntities)).call(_context3, item => isEqual_default()(item.valuePath, valuePath))).call(_context2, item => item.key);

  return res;
}
function calcMergeType(autoMergeValue, leafOnly) {
  let mergeType;

  if (leafOnly) {
    mergeType = cascader_constants_strings.LEAF_ONLY_MERGE_TYPE;
  } else if (autoMergeValue) {
    mergeType = cascader_constants_strings.AUTO_MERGE_VALUE_MERGE_TYPE;
  } else {
    mergeType = cascader_constants_strings.NONE_MERGE_TYPE;
  }

  return mergeType;
}
// CONCATENATED MODULE: ../semi-foundation/cascader/foundation.ts


























 // eslint-disable-next-line max-len

class foundation_CascaderFoundation extends foundation {
  constructor(adapter) {
    var _this;

    super(assign_default()({}, adapter));
    _this = this;

    this.getMergedMotion = () => {
      const {
        motion
      } = this.getProps();
      const {
        isSearching
      } = this.getStates();

      if (isSearching) {
        const mergedMotion = typeof motion === 'undefined' || motion ? assign_default()(assign_default()({}, motion), {
          didLeave: function () {
            const didLeave = get_default()(motion, 'didLeave');

            if (typeof didLeave === 'function') {
              didLeave(...arguments);
            }

            _this._adapter.updateStates({
              isSearching: false
            });
          }
        }) : false;
        return mergedMotion;
      }

      return motion;
    };
  }

  init() {
    const isOpen = this.getProp('open') || this.getProp('defaultOpen');
    this.collectOptions(true);

    if (isOpen && !this._isDisabled()) {
      this.open();
    }
  }

  destroy() {
    this._adapter.unregisterClickOutsideHandler();
  }

  _isDisabled() {
    return this.getProp('disabled');
  }

  _isFilterable() {
    return Boolean(this.getProp('filterTreeNode')); // filter can be boolean or function
  }

  _notifyChange(item) {
    const {
      onChangeWithObject,
      multiple
    } = this.getProps();
    const valueProp = onChangeWithObject ? [] : 'value';

    if (multiple) {
      const valuePath = []; // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore 

      for_each_default()(item).call(item, checkedKey => {
        const valuePathItem = this.getItemPropPath(checkedKey, valueProp);
        valuePath.push(valuePathItem);
      });

      this._adapter.notifyChange(valuePath);
    } else {
      const valuePath = isUndefined_default()(item) || !('key' in item) ? [] : this.getItemPropPath(item.key, valueProp);

      this._adapter.notifyChange(valuePath);
    }
  }

  _isLeaf(item) {
    if (this.getProp('loadData')) {
      return Boolean(item.isLeaf);
    }

    return !item.children || !item.children.length;
  }

  _clearInput() {
    this._adapter.updateInputValue('');
  } // Scenes that may trigger blur:
  //  1、clickOutSide


  _notifyBlur(e) {
    this._adapter.notifyBlur(e);
  } // Scenes that may trigger focus:
  //  1、click selection


  _notifyFocus(e) {
    this._adapter.notifyFocus(e);
  }

  _isOptionDisabled(key, keyEntities) {
    var _context;

    const isDisabled = some_default()(_context = findAncestorKeys([key], keyEntities, true)).call(_context, item => keyEntities[item].data.disabled);

    return isDisabled;
  }

  getCopyFromState(items) {
    var _context2;

    const res = {};

    for_each_default()(_context2 = util_normalizedArr(items)).call(_context2, key => {
      res[key] = cloneDeep_default()(this.getState(key));
    });

    return res;
  } // prop: is array, return all data


  getItemPropPath(selectedKey, prop, keyEntities) {
    const searchMap = keyEntities || this.getState('keyEntities');
    const selectedItem = searchMap[selectedKey];
    let path = [];

    if (!selectedItem) {// do nothing
    } else if (selectedItem._notExist) {
      path = selectedItem.path;
    } else {
      const keyPath = selectedItem.path;
      path = is_array_default()(prop) ? map_default()(keyPath).call(keyPath, key => searchMap[key].data) : map_default()(keyPath).call(keyPath, key => searchMap[key].data[prop]);
    }

    return path;
  }

  _getCacheValue(keyEntities) {
    const {
      selectedKeys
    } = this.getStates();

    const selectedKey = from_default()(selectedKeys)[0];

    let cacheValue;
    /* selectedKeys does not match keyEntities */

    if (isEmpty_default()(keyEntities[selectedKey])) {
      if (lodash_includes_default()(selectedKey, 'not-exist-')) {
        /* Get the value behind not-exist- */
        // eslint-disable-next-line prefer-destructuring
        const targetValue = selectedKey.match(/not-exist-(\S*)/)[1]; // eslint-disable-next-line max-depth

        if (isEmpty_default()(keyEntities[targetValue])) {
          cacheValue = targetValue;
        } else {
          /**
           * 典型的场景是: 假设我们选中了 0-0 这个节点，此时 selectedKeys=Set('0-0')，
           * 输入框会显示 0-0 的 label。当 treeData 发生更新，假设此时 0-0 在 treeData
           * 中不存在，则 selectedKeys=Set('not-exist-0-0')，此时输入框显示的是 0-0，
           * 也就是显示 not-exist- 后的内容。当treeData再次更新，假设此时 0-0 在 treeData
           * 中存在，则 selectedKeys=Set('0-0')，此时输入框显示 0-0 的 label。 这个地
           * 方做的操作就是，为了例子中第二次更新后 0-0 label 能够正常显示。
           */

          /**
           * The typical scenario is: suppose we select the 0-0 node, at this time
           *  selectedKeys=Set('0-0'), the input box will display a 0-0 label. When
           *  treeData is updated, assuming 0-0 does not exist in treeData at this
           *  time, then selectedKeys=Set('not-exist-0-0'), at this time the input
           *  box displays 0-0, which means not-exist -After the content. When treeData
           *  is updated again, assuming that 0-0 exists in treeData at this time,
           *  then selectedKeys=Set('0-0'), and the input box displays a label of
           *  0-0 at this time. The operation done here is for the 0-0 label to be
           *  displayed normally after the second update in the example.
           */
          cacheValue = keyEntities[targetValue].valuePath;
        }
      } else {
        cacheValue = selectedKey;
      }
      /* selectedKeys match keyEntities */

    } else {
      /* selectedKeys match keyEntities */
      cacheValue = keyEntities[selectedKey].valuePath;
    }

    return cacheValue;
  }

  collectOptions() {
    let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    const {
      treeData,
      value,
      defaultValue
    } = this.getProps();
    const keyEntities = util_convertDataToEntities(treeData);

    this._adapter.rePositionDropdown();

    let cacheValue;
    /* when mount */

    if (init) {
      cacheValue = defaultValue;
    } else if (!isEmpty_default()(keyEntities)) {
      cacheValue = this._getCacheValue(keyEntities);
    }

    const selectedValue = !this._isControlledComponent() ? cacheValue : value;

    if (util_isValid(selectedValue)) {
      this.updateSelectedKey(selectedValue, keyEntities);
    } else {
      this._adapter.updateStates({
        keyEntities
      });
    }
  } // call when props.value change


  handleValueChange(value) {
    const {
      keyEntities
    } = this.getStates();
    const {
      multiple
    } = this.getProps();
    !multiple && this.updateSelectedKey(value, keyEntities);
  }
  /**
   * When single selection, the clear objects of
   * selectedKeys, activeKeys, filteredKeys, input, etc.
   */


  _getClearSelectedKey(filterable) {
    const updateStates = {};
    const {
      searchPlaceholder,
      placeholder,
      multiple
    } = this.getProps();
    updateStates.selectedKeys = new set_default.a([]);
    updateStates.activeKeys = new set_default.a([]);
    updateStates.filteredKeys = new set_default.a([]);

    if (filterable && !multiple) {
      updateStates.inputPlaceHolder = searchPlaceholder || placeholder || '';
      updateStates.inputValue = '';
    }

    return updateStates;
  }

  updateSelectedKey(value, keyEntities) {
    var _context3, _context4;

    const {
      changeOnSelect,
      onChangeWithObject,
      multiple
    } = this.getProps();
    const {
      activeKeys,
      loadingKeys,
      loading,
      keyEntities: keyEntityState,
      selectedKeys: selectedKeysState
    } = this.getStates();

    const filterable = this._isFilterable();

    const loadingActive = filter_default()(_context3 = [...activeKeys]).call(_context3, i => loadingKeys.has(i));

    const valuePath = onChangeWithObject ? map_default()(_context4 = util_normalizedArr(value)).call(_context4, i => i.value) : util_normalizedArr(value);
    const selectedKeys = util_findKeysForValues(valuePath, keyEntities);
    let updateStates = {};

    if (selectedKeys.length) {
      const selectedKey = selectedKeys[0];
      const selectedItem = keyEntities[selectedKey];
      /**
       * When changeOnSelect is turned on, or the target option is a leaf option,
       * the option is considered to be selected, even if the option is disabled
       */

      if (changeOnSelect || this._isLeaf(selectedItem.data)) {
        updateStates.selectedKeys = new set_default.a([selectedKey]);

        if (!loadingActive.length) {
          updateStates.activeKeys = new set_default.a(selectedItem.path);
        }

        if (filterable && !multiple) {
          const displayText = this.renderDisplayText(selectedKey, keyEntities);
          updateStates.inputPlaceHolder = displayText;
          updateStates.inputValue = displayText;
        }
        /**
         * If selectedKeys does not meet the update conditions,
         * and state.selectedKeys is the same as selectedKeys
         * at this time, state.selectedKeys should be cleared.
         * A typical scenario is:
         * The originally selected node is the leaf node, but
         * after props.treeData is dynamically updated, the node
         * is a non-leaf node. At this point, selectedKeys should
         * be cleared.
         */

      } else if (isEqual_default()(selectedKeys, from_default()(selectedKeysState))) {
        updateStates = this._getClearSelectedKey(filterable);
      }
    } else if (value && value.length) {
      const val = valuePath[valuePath.length - 1];
      const key = "not-exist-".concat(val);
      const optionNotExist = {
        data: {
          label: val,
          value: val
        },
        key,
        path: valuePath,
        _notExist: true
      };
      updateStates.selectedKeys = new set_default.a([key]);

      if (filterable && !multiple) {
        const displayText = this._defaultRenderText(valuePath);

        updateStates.inputPlaceHolder = displayText;
        updateStates.inputValue = displayText;
      }

      keyEntities[key] = optionNotExist; // Fix: 1155, if the data is loaded asynchronously to update treeData, the emptying operation should not be done when entering the updateSelectedKey method
    } else if (loading) {
      // Use assign to avoid overwriting the'not-exist- * 'property of keyEntities after asynchronous loading
      // Overwriting'not-exist- * 'will cause selectionContent to be emptied unexpectedly when clicking on a dropDown item
      updateStates.keyEntities = lodash_assign_default()(keyEntityState, keyEntities);

      this._adapter.updateStates(updateStates);

      return;
    } else {
      updateStates = this._getClearSelectedKey(filterable);
    }

    updateStates.keyEntities = keyEntities;

    this._adapter.updateStates(updateStates);
  }

  open() {
    const filterable = this._isFilterable();

    const {
      multiple
    } = this.getProps();

    this._adapter.openMenu();

    if (filterable) {
      this._clearInput();

      !multiple && this.toggle2SearchInput(true);
    }

    if (this._isControlledComponent()) {
      this.reCalcActiveKeys();
    }

    this._adapter.notifyDropdownVisibleChange(true);

    this._adapter.registerClickOutsideHandler(e => this.close(e));
  }

  reCalcActiveKeys() {
    const {
      selectedKeys,
      activeKeys,
      keyEntities
    } = this.getStates();
    const selectedKey = [...selectedKeys][0];
    const selectedItem = keyEntities[selectedKey];

    if (!selectedItem) {
      return;
    }

    const newActiveKeys = new set_default.a(selectedItem.path);

    if (!isEqual_default()(newActiveKeys, activeKeys)) {
      this._adapter.updateStates({
        activeKeys: newActiveKeys
      });
    }
  }

  close(e, key) {
    const {
      multiple
    } = this.getProps();

    this._adapter.closeMenu();

    this._adapter.notifyDropdownVisibleChange(false);

    this._adapter.unregisterClickOutsideHandler();

    if (this._isFilterable()) {
      const {
        selectedKeys
      } = this.getStates();
      let inputValue = '';

      if (key && !multiple) {
        inputValue = this.renderDisplayText(key);
      } else if (selectedKeys.size && !multiple) {
        inputValue = this.renderDisplayText([...selectedKeys][0]);
      }

      this._adapter.updateStates({
        inputValue
      });

      !multiple && this.toggle2SearchInput(false);
      !multiple && this._adapter.updateFocusState(false);
    }

    this._notifyBlur(e);
  }

  toggle2SearchInput(isShow) {
    if (isShow) {
      this._adapter.toggleInputShow(isShow, () => this.focusInput());
    } else {
      this._adapter.toggleInputShow(isShow, () => undefined);
    }
  }

  focusInput() {
    this._adapter.focusInput();

    this._adapter.updateFocusState(true);
  }

  handleItemClick(e, item) {
    const isDisabled = this._isDisabled();

    if (isDisabled) {
      return;
    }

    this.handleSingleSelect(e, item);

    this._adapter.rePositionDropdown();
  }

  handleItemHover(e, item) {
    const isDisabled = this._isDisabled();

    if (isDisabled) {
      return;
    }

    this.handleShowNextByHover(item);
  }

  handleShowNextByHover(item) {
    const {
      keyEntities
    } = this.getStates();
    const {
      data,
      key
    } = item;

    const isLeaf = this._isLeaf(data);

    const activeKeys = keyEntities[key].path;

    this._adapter.updateStates({
      activeKeys: new set_default.a(activeKeys)
    });

    if (!isLeaf) {
      this.notifyIfLoadData(item);
    }
  }

  onItemCheckboxClick(item) {
    const isDisabled = this._isDisabled();

    if (isDisabled) {
      return;
    }

    this._handleMultipleSelect(item);

    this._adapter.rePositionDropdown();
  }

  handleClick(e) {
    const isDisabled = this._isDisabled();

    const isFilterable = this._isFilterable();

    const {
      isOpen
    } = this.getStates();

    if (isDisabled) {
      return;
    } else if (!isOpen) {
      this.open();

      this._notifyFocus(e);
    } else if (isOpen && !isFilterable) {
      this.close(e);
    }
  }
  /**
   * A11y: simulate selection click
   */

  /* istanbul ignore next */


  handleSelectionEnterPress(keyboardEvent) {
    if (utils_isEnterPress(keyboardEvent)) {
      this.handleClick(keyboardEvent);
    }
  }

  toggleHoverState(bool) {
    this._adapter.toggleHovering(bool);
  }

  _defaultRenderText(path, displayRender) {
    const separator = this.getProp('separator');

    if (displayRender && typeof displayRender === 'function') {
      return displayRender(path);
    } else {
      return path.join(separator);
    }
  }

  renderDisplayText(targetKey, keyEntities) {
    const renderFunc = this.getProp('displayRender');
    const displayProp = this.getProp('displayProp');
    const displayPath = this.getItemPropPath(targetKey, displayProp, keyEntities);
    return this._defaultRenderText(displayPath, renderFunc);
  }

  handleNodeLoad(item) {
    const {
      data,
      key
    } = item;
    const {
      loadedKeys: prevLoadedKeys,
      loadingKeys: prevLoadingKeys
    } = this.getCopyFromState(['loadedKeys', 'loadingKeys']);
    const newLoadedKeys = prevLoadedKeys.add(key);
    const newLoadingKeys = new set_default.a([...prevLoadingKeys]);
    newLoadingKeys.delete(key); // onLoad should trigger before internal setState to avoid `loadData` trigger twice.

    this._adapter.notifyOnLoad(newLoadedKeys, data);

    this._adapter.updateStates({
      loadingKeys: newLoadingKeys
    });
  }

  notifyIfLoadData(item) {
    const {
      data,
      key
    } = item;

    this._adapter.updateStates({
      loading: false
    });

    if (!data.isLeaf && !data.children && this.getProp('loadData')) {
      var _context5;

      const {
        loadedKeys,
        loadingKeys
      } = this.getCopyFromState(['loadedKeys', 'loadingKeys']);

      if (loadedKeys.has(key) || loadingKeys.has(key)) {
        return;
      }

      this._adapter.updateStates({
        loading: true
      });

      const {
        keyEntities
      } = this.getStates();
      const optionPath = this.getItemPropPath(key, [], keyEntities);

      this._adapter.updateStates({
        loadingKeys: loadingKeys.add(key)
      });

      this._adapter.notifyLoadData(optionPath, bind_default()(_context5 = this.handleNodeLoad).call(_context5, this, item));
    }
  }

  handleSingleSelect(e, item) {
    const {
      changeOnSelect: allowChange,
      filterLeafOnly,
      multiple,
      enableLeafClick
    } = this.getProps();
    const {
      keyEntities,
      selectedKeys,
      isSearching
    } = this.getStates();

    const filterable = this._isFilterable();

    const {
      data,
      key
    } = item;

    const isLeaf = this._isLeaf(data);

    const activeKeys = keyEntities[key].path;
    const selectedKey = [key];
    const hasChanged = key !== [...selectedKeys][0];

    if (!isLeaf && !allowChange && !isSearching) {
      this._adapter.updateStates({
        activeKeys: new set_default.a(activeKeys)
      });

      this.notifyIfLoadData(item);
      return;
    }

    if (multiple) {
      this._adapter.updateStates({
        activeKeys: new set_default.a(activeKeys)
      });

      if (isLeaf && enableLeafClick) {
        this.onItemCheckboxClick(item);
      }
    } else {
      this._adapter.notifySelect(data.value);

      if (hasChanged) {
        this._notifyChange(item);

        this.notifyIfLoadData(item);

        if (this._isControlledComponent()) {
          this._adapter.updateStates({
            activeKeys: new set_default.a(activeKeys)
          });

          if (isLeaf) {
            this.close(e);
          }

          return;
        }

        this._adapter.updateStates({
          activeKeys: new set_default.a(activeKeys),
          selectedKeys: new set_default.a(selectedKey)
        });

        const displayText = this.renderDisplayText(key);

        if (filterable) {
          this._adapter.updateInputPlaceHolder(displayText);
        }

        if (isLeaf) {
          this.close(e, key);
        } else if (!filterLeafOnly && isSearching) {
          this.close(e, key);
        }
      } else {
        this.close(e);
      }
    }
  }

  _handleMultipleSelect(item) {
    const {
      key
    } = item;
    const {
      checkedKeys,
      keyEntities,
      resolvedCheckedKeys
    } = this.getStates();
    const {
      autoMergeValue,
      max,
      disableStrictly,
      leafOnly
    } = this.getProps(); // prev checked status

    const prevCheckedStatus = checkedKeys.has(key); // next checked status

    const curCheckedStatus = disableStrictly ? this.calcCheckedStatus(!prevCheckedStatus, key) : !prevCheckedStatus; // calculate all key of nodes that are checked or half checked

    const {
      checkedKeys: curCheckedKeys,
      halfCheckedKeys: curHalfCheckedKeys
    } = disableStrictly ? this.calcNonDisabledCheckedKeys(key, curCheckedStatus) : this.calcCheckedKeys(key, curCheckedStatus);
    const mergeType = calcMergeType(autoMergeValue, leafOnly);
    const isLeafOnlyMerge = mergeType === cascader_constants_strings.LEAF_ONLY_MERGE_TYPE;
    const isNoneMerge = mergeType === cascader_constants_strings.NONE_MERGE_TYPE;
    const curResolvedCheckedKeys = new set_default.a(normalizeKeyList(curCheckedKeys, keyEntities, isLeafOnlyMerge));
    const curRealCheckedKeys = isNoneMerge ? curCheckedKeys : curResolvedCheckedKeys;

    if (isNumber_default()(max)) {
      if (!isNoneMerge) {
        // When it exceeds max, the quantity is allowed to be reduced, and no further increase is allowed
        if (resolvedCheckedKeys.size < curResolvedCheckedKeys.size && curResolvedCheckedKeys.size > max) {
          const checkedEntities = [];

          for_each_default()(curResolvedCheckedKeys).call(curResolvedCheckedKeys, itemKey => {
            checkedEntities.push(keyEntities[itemKey]);
          });

          this._adapter.notifyOnExceed(checkedEntities);

          return;
        }
      } else {
        // When it exceeds max, the quantity is allowed to be reduced, and no further increase is allowed
        if (checkedKeys.size < curCheckedKeys.size && curCheckedKeys.size > max) {
          const checkedEntities = [];

          for_each_default()(curCheckedKeys).call(curCheckedKeys, itemKey => {
            checkedEntities.push(keyEntities[itemKey]);
          });

          this._adapter.notifyOnExceed(checkedEntities);

          return;
        }
      }
    }

    if (!this._isControlledComponent()) {
      this._adapter.updateStates({
        checkedKeys: curCheckedKeys,
        halfCheckedKeys: curHalfCheckedKeys,
        resolvedCheckedKeys: curResolvedCheckedKeys
      });
    } // The click event during multiple selection will definitely cause the checked state of node to change,
    // so there is no need to judge the value to change.


    this._notifyChange(curRealCheckedKeys);

    if (curCheckedStatus) {
      this._notifySelect(curRealCheckedKeys);
    }

    this._adapter.updateStates({
      inputValue: ''
    });
  }

  calcNonDisabledCheckedKeys(eventKey, targetStatus) {
    const {
      keyEntities,
      disabledKeys
    } = this.getStates();
    const {
      checkedKeys
    } = this.getCopyFromState(['checkedKeys']);
    const descendantKeys = normalizeKeyList(findDescendantKeys([eventKey], keyEntities, false), keyEntities, true);

    const hasDisabled = some_default()(descendantKeys).call(descendantKeys, key => disabledKeys.has(key));

    if (!hasDisabled) {
      return this.calcCheckedKeys(eventKey, targetStatus);
    }

    const nonDisabled = filter_default()(descendantKeys).call(descendantKeys, key => !disabledKeys.has(key));

    const newCheckedKeys = targetStatus ? [...nonDisabled, ...checkedKeys] : difference_default()(normalizeKeyList([...checkedKeys], keyEntities, true), nonDisabled);
    return calcCheckedKeys(newCheckedKeys, keyEntities);
  }

  calcCheckedStatus(targetStatus, eventKey) {
    if (!targetStatus) {
      return targetStatus;
    }

    const {
      checkedKeys,
      keyEntities,
      disabledKeys
    } = this.getStates();
    const descendantKeys = normalizeKeyList(findDescendantKeys([eventKey], keyEntities, false), keyEntities, true);

    const hasDisabled = some_default()(descendantKeys).call(descendantKeys, key => disabledKeys.has(key));

    if (!hasDisabled) {
      return targetStatus;
    }

    const nonDisabledKeys = filter_default()(descendantKeys).call(descendantKeys, key => !disabledKeys.has(key));

    const allChecked = every_default()(nonDisabledKeys).call(nonDisabledKeys, key => checkedKeys.has(key));

    return !allChecked;
  }

  _notifySelect(keys) {
    const {
      keyEntities
    } = this.getStates();
    const values = [];

    for_each_default()(keys).call(keys, key => {
      if (!isEmpty_default()(keyEntities) && !isEmpty_default()(keyEntities[key])) {
        const valueItem = keyEntities[key].data.value;
        values.push(valueItem);
      }
    });

    const formatValue = values.length === 1 ? values[0] : values;

    this._adapter.notifySelect(formatValue);
  }
  /**
   * calculate all key of nodes that are checked or half checked
   * @param {string} key key of node
   * @param {boolean} curCheckedStatus checked status of node
   */


  calcCheckedKeys(key, curCheckedStatus) {
    const {
      keyEntities
    } = this.getStates();
    const {
      checkedKeys,
      halfCheckedKeys
    } = this.getCopyFromState(['checkedKeys', 'halfCheckedKeys']);
    return curCheckedStatus ? calcCheckedKeysForChecked(key, keyEntities, checkedKeys, halfCheckedKeys) : calcCheckedKeysForUnchecked(key, keyEntities, checkedKeys, halfCheckedKeys);
  }

  handleInputChange(sugInput) {
    this._adapter.updateInputValue(sugInput);

    const {
      keyEntities
    } = this.getStates();
    const {
      treeNodeFilterProp,
      filterTreeNode,
      filterLeafOnly
    } = this.getProps();
    let filteredKeys = [];

    if (sugInput) {
      var _context6, _context7, _context8;

      filteredKeys = map_default()(_context6 = filter_default()(_context7 = filter_default()(_context8 = values_default()(keyEntities)).call(_context8, item => {
        const {
          key,
          _notExist
        } = item;

        if (_notExist) {
          return false;
        }

        const filteredPath = this.getItemPropPath(key, treeNodeFilterProp).join();
        return treeUtil_filter(sugInput, filteredPath, filterTreeNode, false);
      })).call(_context7, item => filterTreeNode && !filterLeafOnly || this._isLeaf(item))).call(_context6, item => item.key);
    }

    this._adapter.updateStates({
      isSearching: Boolean(sugInput),
      filteredKeys: new set_default.a(filteredKeys)
    });

    this._adapter.notifyOnSearch(sugInput);
  }

  handleClear() {
    const {
      isSearching
    } = this.getStates();
    const {
      searchPlaceholder,
      placeholder,
      multiple
    } = this.getProps();

    const isFilterable = this._isFilterable();

    const isControlled = this._isControlledComponent();

    const newState = {};

    if (multiple) {
      this._adapter.updateInputValue('');

      this._adapter.notifyOnSearch('');

      newState.checkedKeys = new set_default.a([]);
      newState.halfCheckedKeys = new set_default.a([]);
      newState.selectedKeys = new set_default.a([]);
      newState.activeKeys = new set_default.a([]);
      newState.resolvedCheckedKeys = new set_default.a([]);

      this._adapter.notifyChange([]);
    } else {
      // if click clearBtn when not searching, clear selected and active values as well
      if (isFilterable && isSearching) {
        newState.isSearching = false;

        this._adapter.updateInputValue('');

        this._adapter.notifyOnSearch('');
      } else {
        if (isFilterable) {
          newState.inputValue = '';
          newState.inputPlaceHolder = searchPlaceholder || placeholder || '';

          this._adapter.updateInputValue('');

          this._adapter.notifyOnSearch('');
        }

        if (!isControlled) {
          newState.selectedKeys = new set_default.a([]);
        }

        newState.activeKeys = new set_default.a([]);
        newState.filteredKeys = new set_default.a([]);

        this._adapter.notifyChange([]);
      }
    }

    this._adapter.updateStates(newState);

    this._adapter.notifyClear();

    this._adapter.rePositionDropdown();
  }
  /**
   * A11y: simulate clear button click
   */

  /* istanbul ignore next */


  handleClearEnterPress(keyboardEvent) {
    if (utils_isEnterPress(keyboardEvent)) {
      this.handleClear();
    }
  }

  getRenderData() {
    var _context9, _context10;

    const {
      keyEntities,
      isSearching
    } = this.getStates();

    const isFilterable = this._isFilterable();

    if (isSearching && isFilterable) {
      return this.getFilteredData();
    }

    return sort_default()(_context9 = filter_default()(_context10 = values_default()(keyEntities)).call(_context10, item => item.parentKey === null && !item._notExist) // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    ).call(_context9, (a, b) => parse_int_default()(a.ind, 10) - parse_int_default()(b.ind, 10));
  }

  getFilteredData() {
    const {
      treeNodeFilterProp
    } = this.getProps();
    const {
      filteredKeys,
      keyEntities
    } = this.getStates();
    const filteredList = [];
    const filteredKeyArr = [...filteredKeys];

    for_each_default()(filteredKeyArr).call(filteredKeyArr, key => {
      const item = keyEntities[key];

      if (!item) {
        return;
      }

      const itemSearchPath = this.getItemPropPath(key, treeNodeFilterProp);

      const isDisabled = this._isOptionDisabled(key, keyEntities);

      filteredList.push({
        data: item.data,
        key,
        disabled: isDisabled,
        searchText: itemSearchPath
      });
    });

    return filteredList;
  }

  handleListScroll(e, ind) {
    const {
      activeKeys,
      keyEntities
    } = this.getStates();
    const lastActiveKey = [...activeKeys][activeKeys.size - 1];
    const data = lastActiveKey ? get_default()(keyEntities, [lastActiveKey, 'data'], null) : null;

    this._adapter.notifyListScroll(e, {
      panelIndex: ind,
      activeNode: data
    });
  }

  handleTagRemove(e, tagValuePath) {
    var _context11;

    const {
      keyEntities
    } = this.getStates();
    const {
      disabled
    } = this.getProps();

    if (disabled) {
      /* istanbul ignore next */
      return;
    }

    const removedItem = filter_default()(_context11 = values_default()(keyEntities)).call(_context11, item => isEqual_default()(item.valuePath, tagValuePath))[0];

    !isEmpty_default()(removedItem) && !removedItem.data.disabled && this._handleMultipleSelect(removedItem);
  }

}
// EXTERNAL MODULE: ../semi-foundation/cascader/cascader.scss
var cascader = __webpack_require__("7u0x");

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/isBoolean.js
var isBoolean = __webpack_require__("p6M4");
var isBoolean_default = /*#__PURE__*/__webpack_require__.n(isBoolean);

// CONCATENATED MODULE: ../semi-foundation/checkbox/constants.ts

const checkboxClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-checkbox"),
  INNER: "".concat(BASE_CLASS_PREFIX, "-checkbox-inner"),
  TEXT: "".concat(BASE_CLASS_PREFIX, "-checkbox-text"),
  INPUT: "".concat(BASE_CLASS_PREFIX, "-checkbox-input"),
  CHECKED: "".concat(BASE_CLASS_PREFIX, "-checkbox-checked"),
  DISABLED: "".concat(BASE_CLASS_PREFIX, "-checkbox-disabled"),
  BUTTON: "".concat(BASE_CLASS_PREFIX, "-checkbox-button"),
  WRAPPER: ''
};
const checkboxGroupClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-checkboxGroup"),
  INNER: "".concat(BASE_CLASS_PREFIX, "-checkboxGroup-inner"),
  TEXT: "".concat(BASE_CLASS_PREFIX, "-checkboxGroup-text"),
  INPUT: "".concat(BASE_CLASS_PREFIX, "-checkboxGroup-input"),
  CHECKED: "".concat(BASE_CLASS_PREFIX, "-checkboxGroup-checked"),
  DISABLED: "".concat(BASE_CLASS_PREFIX, "-checkboxGroup-disabled")
};
const checkbox_constants_strings = {
  DIRECTION_SET: ['horizontal', 'vertical'],
  TYPE_DEFAULT: 'default',
  TYPE_CARD: 'card',
  TYPE_PURECARD: 'pureCard',
  DEFAULT_DIRECTION: 'vertical'
};
const checkbox_constants_numbers = {};

// CONCATENATED MODULE: ../semi-foundation/checkbox/checkboxFoundation.ts






class checkboxFoundation_CheckboxFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
    this.clickState = false;

    this.handleFocusVisible = event => {
      const {
        target
      } = event;

      try {
        if (this.clickState) {
          this.clickState = false;
          return;
        }

        if (target.matches(':focus-visible')) {
          this._adapter.setFocusVisible(true);
        }
      } catch (error) {
        Object(warning["a" /* default */])(true, 'Warning: [Semi Checkbox] The current browser does not support the focus-visible');
      }
    };

    this.handleBlur = () => {
      this.clickState = false;

      this._adapter.setFocusVisible(false);
    };
  }

  init() {
    const {
      children,
      extra,
      extraId,
      addonId
    } = this.getProps();

    if (children && !addonId) {
      this._adapter.setAddonId();
    }

    if (extra && !extraId) {
      this._adapter.setExtraId();
    }
  }

  getEvent(checked, e) {
    const props = this.getProps();
    const cbValue = {
      target: assign_default()(assign_default()({}, props), {
        checked
      }),
      stopPropagation: () => {
        e.stopPropagation();
      },
      preventDefault: () => {
        e.preventDefault();
      },
      nativeEvent: {
        stopImmediatePropagation: () => {
          if (e.nativeEvent && typeof e.nativeEvent.stopImmediatePropagation === 'function') {
            e.nativeEvent.stopImmediatePropagation();
          }
        }
      }
    };
    return cbValue;
  }

  notifyChange(checked, e) {
    const cbValue = this.getEvent(checked, e);

    this._adapter.notifyChange(cbValue);
  }

  handleChange(e) {
    const disabled = this.getProp('disabled');

    if (disabled) {
      return;
    }

    if ((e === null || e === void 0 ? void 0 : e.type) === 'click') {
      this.clickState = true;
    }

    this._adapter.focusCheckboxEntity();

    const isInGroup = this._adapter.getIsInGroup();

    if (isInGroup) {
      const groupDisabled = this._adapter.getGroupDisabled();

      if (!groupDisabled) {
        this.handleChangeInGroup(e);
      }

      return;
    }

    const checked = this.getState('checked');
    const newChecked = !checked;

    if (this._isControlledComponent('checked')) {
      this.notifyChange(newChecked, e);
    } else {
      this.setChecked(newChecked);
      this.notifyChange(newChecked, e);
    }
  }

  handleChangeInGroup(e) {
    const {
      value
    } = this.getProps();

    const groupValue = this._adapter.getGroupValue();

    const checked = includes_default()(groupValue).call(groupValue, value);

    const newChecked = !checked;
    const event = this.getEvent(newChecked, e);

    this._adapter.notifyChange(event);

    this._adapter.notifyGroupChange(event);
  }

  handleEnterPress(e) {
    if (utils_isEnterPress(e)) {
      this.handleChange(e);
    }
  }

  setChecked(checked) {
    this._adapter.setNativeControlChecked(checked);
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  destroy() {}

}

/* harmony default export */ var checkboxFoundation = (checkboxFoundation_CheckboxFoundation);
// CONCATENATED MODULE: ./checkbox/context.ts

const Context = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext({});

// CONCATENATED MODULE: ./checkbox/checkboxInner.tsx



/* eslint-disable no-nested-ternary */







class checkboxInner_CheckboxInner extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  blur() {
    this.inputEntity.blur();
  }

  focus() {
    const {
      preventScroll
    } = this.props;
    this.inputEntity.focus({
      preventScroll
    });
  }

  render() {
    const {
      indeterminate,
      checked,
      disabled,
      prefixCls,
      name,
      isPureCardType,
      addonId,
      extraId,
      focusInner,
      onInputFocus,
      onInputBlur
    } = this.props;
    const prefix = prefixCls || checkboxClasses.PREFIX;
    const wrapper = classnames_default()({
      ["".concat(prefix, "-inner")]: true,
      ["".concat(prefix, "-inner-checked")]: Boolean(checked),
      ["".concat(prefix, "-inner-pureCardType")]: isPureCardType
    }, checkboxClasses.WRAPPER);
    const inner = classnames_default()({
      ["".concat(prefix, "-inner-display")]: true,
      ["".concat(prefix, "-focus")]: focusInner,
      ["".concat(prefix, "-focus-border")]: focusInner && !checked
    });
    const icon = checked ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconCheckboxTick, null) : indeterminate ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconCheckboxIndeterminate, null) : null;
    const inputProps = {
      type: "checkbox",
      'aria-label': this.props['aria-label'],
      'aria-disabled': disabled,
      'aria-checked': checked,
      'aria-labelledby': addonId,
      'aria-describedby': extraId || this.props['aria-describedby'],
      'aria-invalid': this.props['aria-invalid'],
      'aria-errormessage': this.props['aria-errormessage'],
      'aria-required': this.props['aria-required'],
      className: checkboxClasses.INPUT,
      onChange: noop_default.a,
      checked: checked,
      disabled: disabled,
      onFocus: onInputFocus,
      onBlur: onInputBlur
    };
    name && (inputProps['name'] = name);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: wrapper
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("input", assign_default()({}, inputProps, {
      ref: ref => {
        this.inputEntity = ref;
      }
    })), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: inner
    }, icon));
  }

}

checkboxInner_CheckboxInner.contextType = Context;
checkboxInner_CheckboxInner.propTypes = {
  'aria-describedby': prop_types_default.a.string,
  'aria-errormessage': prop_types_default.a.string,
  'aria-invalid': prop_types_default.a.bool,
  'aria-labelledby': prop_types_default.a.string,
  'aria-required': prop_types_default.a.bool,
  checked: prop_types_default.a.bool,
  disabled: prop_types_default.a.bool,
  onChange: prop_types_default.a.func,
  children: prop_types_default.a.node,
  grouped: prop_types_default.a.bool,
  value: prop_types_default.a.any,
  isPureCardType: prop_types_default.a.bool,
  addonId: prop_types_default.a.string,
  extraId: prop_types_default.a.string,
  focusInner: prop_types_default.a.bool,
  onInputFocus: prop_types_default.a.func,
  onInputBlur: prop_types_default.a.func,
  preventScroll: prop_types_default.a.bool
};
checkboxInner_CheckboxInner.defaultProps = {
  onChange: noop_default.a
};
/* harmony default export */ var checkboxInner = (checkboxInner_CheckboxInner);
// EXTERNAL MODULE: ../semi-foundation/checkbox/checkbox.scss
var checkbox_checkbox = __webpack_require__("RIzX");

// CONCATENATED MODULE: ./checkbox/checkbox.tsx






/* eslint-disable max-len */











class checkbox_Checkbox extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.handleChange = e => this.foundation.handleChange(e);

    this.handleEnterPress = e => this.foundation.handleEnterPress(e);

    this.handleFocusVisible = event => {
      this.foundation.handleFocusVisible(event);
    };

    this.handleBlur = event => {
      this.foundation.handleBlur();
    };

    const checked = false;
    this.state = {
      checked: props.checked || props.defaultChecked || checked,
      addonId: props.addonId,
      extraId: props.extraId,
      focusVisible: false
    };
    this.checkboxEntity = null;
    this.foundation = new checkboxFoundation(this.adapter);
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      setNativeControlChecked: checked => {
        this.setState({
          checked
        });
      },
      notifyChange: cbContent => {
        const {
          onChange
        } = this.props;
        onChange && onChange(cbContent);
      },
      getIsInGroup: () => this.isInGroup(),
      getGroupValue: () => this.context && this.context.checkboxGroup.value || [],
      notifyGroupChange: cbContent => {
        this.context.checkboxGroup.onChange(cbContent);
      },
      getGroupDisabled: () => this.context && this.context.checkboxGroup.disabled,
      setAddonId: () => {
        this.setState({
          addonId: getUuidShort({
            prefix: 'addon'
          })
        });
      },
      setExtraId: () => {
        this.setState({
          extraId: getUuidShort({
            prefix: 'extra'
          })
        });
      },
      setFocusVisible: focusVisible => {
        this.setState({
          focusVisible
        });
      },
      focusCheckboxEntity: () => {
        this.focus();
      }
    });
  }

  componentDidUpdate(prevProps) {
    if (this.props.checked !== prevProps.checked) {
      if (isUndefined_default()(this.props.checked)) {
        this.foundation.setChecked(false);
      } else if (isBoolean_default()(this.props.checked)) {
        this.foundation.setChecked(this.props.checked);
      }
    }
  }

  isInGroup() {
    // Why do we need to determine whether there is a value in props?
    // If there is no value in the props of the checkbox in the context of the checkboxGroup, 
    // it will be considered not to belong to the checkboxGroup。
    return Boolean(this.context && this.context.checkboxGroup && 'value' in this.props);
  }

  focus() {
    this.checkboxEntity && this.checkboxEntity.focus();
  }

  blur() {
    this.checkboxEntity && this.checkboxEntity.blur();
  }

  render() {
    const {
      disabled,
      style,
      prefixCls,
      className,
      indeterminate,
      children,
      onMouseEnter,
      onMouseLeave,
      extra,
      value,
      role,
      tabIndex,
      id
    } = this.props;
    const {
      checked,
      addonId,
      extraId,
      focusVisible
    } = this.state;
    const props = {
      checked,
      disabled
    };
    const inGroup = this.isInGroup();

    if (inGroup) {
      if (this.context.checkboxGroup.value) {
        var _context;

        const realChecked = includes_default()(_context = this.context.checkboxGroup.value || []).call(_context, value);

        props.checked = realChecked;
      }

      if (this.context.checkboxGroup.disabled) {
        props.disabled = this.context.checkboxGroup.disabled || this.props.disabled;
      }

      const {
        isCardType,
        isPureCardType
      } = this.context.checkboxGroup;
      props.isCardType = isCardType;
      props.isPureCardType = isPureCardType;
      props['name'] = this.context.checkboxGroup.name;
    }

    const prefix = prefixCls || checkboxClasses.PREFIX;
    const focusOuter = props.isCardType || props.isPureCardType;
    const wrapper = classnames_default()(prefix, {
      ["".concat(prefix, "-disabled")]: props.disabled,
      ["".concat(prefix, "-indeterminate")]: indeterminate,
      ["".concat(prefix, "-checked")]: props.checked,
      ["".concat(prefix, "-unChecked")]: !props.checked,
      ["".concat(prefix, "-cardType")]: props.isCardType,
      ["".concat(prefix, "-cardType_disabled")]: props.disabled && props.isCardType,
      ["".concat(prefix, "-cardType_unDisabled")]: !(props.disabled && props.isCardType),
      ["".concat(prefix, "-cardType_checked")]: props.isCardType && props.checked && !props.disabled,
      ["".concat(prefix, "-cardType_checked_disabled")]: props.isCardType && props.checked && props.disabled,
      [className]: Boolean(className),
      ["".concat(prefix, "-focus")]: focusVisible && focusOuter
    });
    const extraCls = classnames_default()("".concat(prefix, "-extra"), {
      ["".concat(prefix, "-cardType_extra_noChildren")]: props.isCardType && !children
    });
    const name = inGroup && this.context.checkboxGroup.name;
    const xSemiPropChildren = this.props['x-semi-children-alias'] || 'children';

    const renderContent = () => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, children ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      id: addonId,
      className: "".concat(prefix, "-addon"),
      "x-semi-prop": xSemiPropChildren
    }, children) : null, extra ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      id: extraId,
      className: extraCls,
      "x-semi-prop": "extra"
    }, extra) : null);

    return (
      /*#__PURE__*/
      // label is better than span, however span is here which is to solve gitlab issue #364
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        role: role,
        tabIndex: tabIndex,
        style: style,
        className: wrapper,
        id: id,
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onClick: this.handleChange,
        onKeyPress: this.handleEnterPress,
        "aria-labelledby": this.props['aria-labelledby']
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(checkboxInner, assign_default()({}, this.props, props, {
        addonId: children && addonId,
        extraId: extra && extraId,
        isPureCardType: props.isPureCardType,
        ref: ref => {
          this.checkboxEntity = ref;
        },
        focusInner: focusVisible && !focusOuter,
        onInputFocus: this.handleFocusVisible,
        onInputBlur: this.handleBlur
      })), props.isCardType ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", null, renderContent()) : renderContent())
    );
  }

}

checkbox_Checkbox.contextType = Context;
checkbox_Checkbox.propTypes = {
  'aria-describedby': prop_types_default.a.string,
  'aria-errormessage': prop_types_default.a.string,
  'aria-invalid': prop_types_default.a.bool,
  'aria-labelledby': prop_types_default.a.string,
  'aria-required': prop_types_default.a.bool,
  // Specifies whether it is currently selected
  checked: prop_types_default.a.bool,
  // Initial check
  defaultChecked: prop_types_default.a.bool,
  // Failure state
  disabled: prop_types_default.a.bool,
  // Set indeterminate state, only responsible for style control
  indeterminate: prop_types_default.a.bool,
  // Callback function when changing
  onChange: prop_types_default.a.func,
  value: prop_types_default.a.any,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  prefixCls: prop_types_default.a.string,
  onMouseEnter: prop_types_default.a.func,
  onMouseLeave: prop_types_default.a.func,
  extra: prop_types_default.a.node,
  index: prop_types_default.a.number,
  'aria-label': prop_types_default.a.string,
  tabIndex: prop_types_default.a.number,
  preventScroll: prop_types_default.a.bool
};
checkbox_Checkbox.defaultProps = {
  defaultChecked: false,
  indeterminate: false,
  onChange: noop_default.a,
  onMouseEnter: noop_default.a,
  onMouseLeave: noop_default.a
};
/* harmony default export */ var checkbox_checkbox_0 = (checkbox_Checkbox);
// CONCATENATED MODULE: ../semi-foundation/checkbox/checkboxGroupFoundation.ts






class checkboxGroupFoundation_CheckboxGroupFoundation extends foundation {
  static get checkboxGroupDefaultAdapter() {
    return {};
  }

  constructor(adapter) {
    super(assign_default()(assign_default()({}, checkboxGroupFoundation_CheckboxGroupFoundation.checkboxGroupDefaultAdapter), adapter));
  }

  init() {
    const {
      defaultValue,
      value
    } = this.getProps();

    if (typeof defaultValue !== 'undefined' && !is_array_default()(defaultValue)) {
      Object(warning["a" /* default */])(true, 'Warning: [Semi CheckboxGroup] defaultValue should be an Array');
    }

    if (typeof value !== 'undefined' && !is_array_default()(value)) {
      Object(warning["a" /* default */])(true, 'Warning: [Semi CheckboxGroup] value should be an Array');
    }
  }

  notifyChange(value) {
    this._adapter.notifyChange(value);
  }

  handleChange(evt) {
    const prevValue = this.getState('value');
    let newValue = [];

    if (!is_array_default()(prevValue)) {
      newValue = [prevValue];
    }

    if (evt.target.checked) {
      newValue = [...prevValue, evt.target.value];
    } else {
      newValue = filter_default()(prevValue).call(prevValue, (itm, idx) => itm !== evt.target.value);
    }

    const isControlledMode = ('value' in this.getProps());

    if (isControlledMode) {
      // Controlled mode only needs to notify
      this.notifyChange(newValue);
    } else {
      // In uncontrolled mode, update the value in the state, and then notify
      this._adapter.updateGroupValue(newValue);

      this.notifyChange(newValue);
    }
  }

  getFormatName() {
    const propName = this.getProp('name');
    const defaultName = 'default';
    return propName || defaultName;
  }

  handlePropValueChange(newPropValue) {
    if (is_array_default()(newPropValue)) {
      this._adapter.updateGroupValue(newPropValue);
    } else {
      // to adjust reset in Form.CheckboxGroup
      if (typeof newPropValue === 'undefined') {
        this._adapter.updateGroupValue([]);
      }

      Object(warning["a" /* default */])(true, 'Warning: [Semi CheckboxGroup] value should be an Array');
    }
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  destroy() {}

}

/* harmony default export */ var checkboxGroupFoundation = (checkboxGroupFoundation_CheckboxGroupFoundation);
// CONCATENATED MODULE: ./checkbox/checkboxGroup.tsx







/* eslint-disable max-len */









class checkboxGroup_CheckboxGroup extends baseComponent_BaseComponent {
  constructor(props) {
    var _context;

    super(props);
    this.state = {
      value: props.value || props.defaultValue
    };
    this.foundation = new checkboxGroupFoundation(this.adapter);
    this.onChange = bind_default()(_context = this.onChange).call(_context, this);
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      updateGroupValue: value => {
        this.setState({
          value
        });
      },
      notifyChange: evt => {
        this.props.onChange && this.props.onChange(evt);
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentDidUpdate(prevProps) {
    if (!isEqual_default()(prevProps.value, this.props.value)) {
      this.foundation.handlePropValueChange(this.props.value);
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  onChange(evt) {
    this.foundation.handleChange(evt);
  }

  render() {
    var _context2, _context3, _context4;

    const {
      children,
      options,
      prefixCls,
      direction,
      className,
      id,
      style,
      type,
      disabled
    } = this.props;
    const isPureCardType = type === checkbox_constants_strings.TYPE_PURECARD;
    const isCardType = type === checkbox_constants_strings.TYPE_CARD || isPureCardType;
    const prefix = prefixCls || checkboxGroupClasses.PREFIX;
    const prefixClsDisplay = classnames_default()({
      [prefix]: true,
      ["".concat(prefix, "-wrapper")]: true,
      [concat_default()(_context2 = "".concat(prefix, "-")).call(_context2, direction)]: direction,
      [concat_default()(_context3 = "".concat(prefix, "-")).call(_context3, direction, "-cardType")]: direction && isCardType
    }, className);

    const realValue = slice_default()(_context4 = this.state.value).call(_context4);

    let inner;

    if (options) {
      var _context5;

      inner = map_default()(_context5 = options || []).call(_context5, (option, index) => {
        if (typeof option === 'string') {
          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(checkbox_checkbox_0, {
            role: "listitem",
            key: index,
            disabled: this.props.disabled,
            value: option,
            prefixCls: prefixCls
          }, option);
        } else {
          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(checkbox_checkbox_0, {
            role: "listitem",
            key: index,
            disabled: option.disabled || this.props.disabled,
            value: option.value,
            prefixCls: prefixCls,
            extra: option.extra,
            className: option.className,
            style: option.style,
            onChange: option.onChange
          }, option.label);
        }
      });
    } else if (children) {
      var _context6;

      inner = map_default()(_context6 = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children.toArray(children)).call(_context6, (itm, index) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(itm, {
        key: index,
        role: 'listitem'
      }));
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      id: id,
      role: "list",
      "aria-label": this.props['aria-label'],
      className: prefixClsDisplay,
      style: style,
      "aria-labelledby": this.props['aria-labelledby'],
      "aria-describedby": this.props['aria-describedby']
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Context.Provider, {
      value: {
        checkboxGroup: {
          onChange: this.onChange,
          value: realValue,
          disabled: this.props.disabled,
          name: this.foundation.getFormatName(),
          isCardType,
          isPureCardType
        }
      }
    }, inner));
  }

}

checkboxGroup_CheckboxGroup.propTypes = {
  'aria-describedby': prop_types_default.a.string,
  'aria-errormessage': prop_types_default.a.string,
  'aria-invalid': prop_types_default.a.bool,
  'aria-labelledby': prop_types_default.a.string,
  'aria-required': prop_types_default.a.bool,
  defaultValue: prop_types_default.a.array,
  disabled: prop_types_default.a.bool,
  name: prop_types_default.a.string,
  options: prop_types_default.a.array,
  value: prop_types_default.a.array,
  onChange: prop_types_default.a.func,
  children: prop_types_default.a.node,
  prefixCls: prop_types_default.a.string,
  direction: prop_types_default.a.oneOf(checkbox_constants_strings.DIRECTION_SET),
  className: prop_types_default.a.string,
  type: prop_types_default.a.oneOf([checkbox_constants_strings.TYPE_DEFAULT, checkbox_constants_strings.TYPE_CARD, checkbox_constants_strings.TYPE_PURECARD]),
  style: prop_types_default.a.object
};
checkboxGroup_CheckboxGroup.defaultProps = {
  disabled: false,
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  onChange: () => {},
  type: checkbox_constants_strings.TYPE_DEFAULT,
  defaultValue: [],
  direction: checkbox_constants_strings.DEFAULT_DIRECTION
};
/* harmony default export */ var checkboxGroup = (checkboxGroup_CheckboxGroup);
// CONCATENATED MODULE: ./checkbox/index.tsx




class checkbox_CheckboxWithGroup extends checkbox_checkbox_0 {}

checkbox_CheckboxWithGroup.Group = checkboxGroup;

/* harmony default export */ var checkbox_0 = (checkbox_CheckboxWithGroup);
// CONCATENATED MODULE: ./cascader/item.tsx















const item_prefixcls = cascader_constants_cssClasses.PREFIX_OPTION;
class item_Item extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  constructor() {
    super(...arguments);

    this.onClick = (e, item) => {
      const {
        onItemClick
      } = this.props;

      if (item.data.disabled || 'disabled' in item && item.disabled) {
        return;
      }

      onItemClick(e, item);
    };
    /**
     * A11y: simulate item click
     */


    this.handleItemEnterPress = (keyboardEvent, item) => {
      if (utils_isEnterPress(keyboardEvent)) {
        this.onClick(keyboardEvent, item);
      }
    };

    this.onHover = (e, item) => {
      const {
        showNext,
        onItemHover
      } = this.props;

      if (item.data.disabled) {
        return;
      }

      if (showNext === cascader_constants_strings.SHOW_NEXT_BY_HOVER) {
        onItemHover(e, item);
      }
    };

    this.onCheckboxChange = (e, item) => {
      const {
        onItemCheckboxClick
      } = this.props; // Prevent Checkbox's click event bubbling to trigger the li click event

      e.stopPropagation();

      if (e.nativeEvent && typeof e.nativeEvent.stopImmediatePropagation === 'function') {
        e.nativeEvent.stopImmediatePropagation();
      }

      onItemCheckboxClick(item);
    };

    this.getItemStatus = key => {
      const {
        activeKeys,
        selectedKeys,
        loadedKeys,
        loadingKeys
      } = this.props;
      const state = {
        active: false,
        selected: false,
        loading: false
      };

      if (activeKeys.has(key)) {
        state.active = true;
      }

      if (selectedKeys.has(key)) {
        state.selected = true;
      }

      if (loadingKeys.has(key) && !loadedKeys.has(key)) {
        state.loading = true;
      }

      return state;
    };

    this.renderIcon = type => {
      var _context, _context2, _context3;

      switch (type) {
        case 'child':
          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronRight, {
            className: concat_default()(_context = "".concat(item_prefixcls, "-icon ")).call(_context, item_prefixcls, "-icon-expand")
          });

        case 'tick':
          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconTick, {
            className: concat_default()(_context2 = "".concat(item_prefixcls, "-icon ")).call(_context2, item_prefixcls, "-icon-active")
          });

        case 'loading':
          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(spin_0, {
            wrapperClassName: "".concat(item_prefixcls, "-spin-icon")
          });

        case 'empty':
          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
            "aria-hidden": true,
            className: concat_default()(_context3 = "".concat(item_prefixcls, "-icon ")).call(_context3, item_prefixcls, "-icon-empty")
          });

        default:
          return null;
      }
    };

    this.highlight = searchText => {
      const content = [];
      const {
        keyword,
        separator
      } = this.props;

      for_each_default()(searchText).call(searchText, (item, idx) => {
        if (typeof item === 'string' && lodash_includes_default()(item, keyword)) {
          var _context4;

          for_each_default()(_context4 = item.split(keyword)).call(_context4, (node, index) => {
            if (index > 0) {
              var _context5;

              content.push( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
                className: "".concat(item_prefixcls, "-label-highlight"),
                key: concat_default()(_context5 = "".concat(index, "-")).call(_context5, idx)
              }, keyword));
            }

            content.push(node);
          });
        } else {
          content.push(item);
        }

        if (idx !== searchText.length - 1) {
          content.push(separator);
        }
      });

      return content;
    };

    this.renderFlattenOption = data => {
      const {
        multiple,
        checkedKeys,
        halfCheckedKeys
      } = this.props;
      const content = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        className: "".concat(item_prefixcls, "-list"),
        key: 'flatten-list'
      }, map_default()(data).call(data, item => {
        const {
          searchText,
          key,
          disabled
        } = item;
        const className = classnames_default()(item_prefixcls, {
          ["".concat(item_prefixcls, "-flatten")]: true,
          ["".concat(item_prefixcls, "-disabled")]: disabled
        });
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
          role: 'menuitem',
          className: className,
          key: key,
          onClick: e => {
            this.onClick(e, item);
          },
          onKeyPress: e => this.handleItemEnterPress(e, item)
        }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
          className: "".concat(item_prefixcls, "-label")
        }, !multiple && this.renderIcon('empty'), multiple && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(checkbox_0, {
          onChange: e => this.onCheckboxChange(e, item),
          disabled: disabled,
          indeterminate: halfCheckedKeys.has(item.key),
          checked: checkedKeys.has(item.key),
          className: "".concat(item_prefixcls, "-label-checkbox")
        }), this.highlight(searchText)));
      }));
      return content;
    };
  }

  renderItem(renderData) {
    let content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    const {
      multiple,
      checkedKeys,
      halfCheckedKeys
    } = this.props;
    let showChildItem;
    const ind = content.length;
    content.push( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
      role: 'menu',
      className: "".concat(item_prefixcls, "-list"),
      key: renderData[0].key,
      onScroll: e => this.props.onListScroll(e, ind)
    }, map_default()(renderData).call(renderData, item => {
      const {
        data,
        key,
        parentKey
      } = item;
      const {
        children,
        label,
        disabled,
        isLeaf
      } = data;
      const {
        active,
        selected,
        loading
      } = this.getItemStatus(key);
      const hasChild = Boolean(children) && children.length;
      const showExpand = hasChild || this.props.loadData && !isLeaf;

      if (active && hasChild) {
        showChildItem = item;
      }

      const className = classnames_default()(item_prefixcls, {
        ["".concat(item_prefixcls, "-active")]: active && !selected,
        ["".concat(item_prefixcls, "-select")]: selected && !multiple,
        ["".concat(item_prefixcls, "-disabled")]: disabled
      });
      const otherAriaProps = parentKey ? {
        ['aria-owns']: "cascaderItem-".concat(parentKey)
      } : {};
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", assign_default()({
        role: 'menuitem',
        id: "cascaderItem-".concat(key),
        "aria-expanded": active,
        "aria-haspopup": Boolean(showExpand),
        "aria-disabled": disabled
      }, otherAriaProps, {
        className: className,
        key: key,
        onClick: e => {
          this.onClick(e, item);
        },
        onKeyPress: e => this.handleItemEnterPress(e, item),
        onMouseEnter: e => {
          this.onHover(e, item);
        }
      }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: "".concat(item_prefixcls, "-label")
      }, selected && !multiple && this.renderIcon('tick'), !selected && !multiple && this.renderIcon('empty'), multiple && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(checkbox_0, {
        onChange: e => this.onCheckboxChange(e, item),
        disabled: disabled,
        indeterminate: halfCheckedKeys.has(item.key),
        checked: checkedKeys.has(item.key),
        className: "".concat(item_prefixcls, "-label-checkbox")
      }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, label)), showExpand ? this.renderIcon(loading ? 'loading' : 'child') : null);
    })));

    if (showChildItem) {
      concat_default()(content).call(content, this.renderItem(showChildItem.children, content));
    }

    return content;
  }

  renderEmpty() {
    const {
      emptyContent
    } = this.props;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
      componentName: "Cascader"
    }, locale => {
      var _context6;

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        className: concat_default()(_context6 = "".concat(item_prefixcls, " ")).call(_context6, item_prefixcls, "-empty"),
        key: 'empty-list'
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: "".concat(item_prefixcls, "-label"),
        "x-semi-prop": "emptyContent"
      }, emptyContent || locale.emptyText));
    });
  }

  render() {
    const {
      data,
      searchable
    } = this.props;
    const {
      direction
    } = this.context;
    const isEmpty = !data || !data.length;
    let content;
    const listsCls = classnames_default()({
      ["".concat(item_prefixcls, "-lists")]: true,
      ["".concat(item_prefixcls, "-lists-rtl")]: direction === 'rtl',
      ["".concat(item_prefixcls, "-lists-empty")]: isEmpty
    });

    if (isEmpty) {
      content = this.renderEmpty();
    } else {
      content = searchable ? this.renderFlattenOption(data) : this.renderItem(data);
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: listsCls
    }, content);
  }

}
item_Item.contextType = configProvider_context;
item_Item.propTypes = {
  data: prop_types_default.a.array,
  emptyContent: prop_types_default.a.node,
  searchable: prop_types_default.a.bool,
  onItemClick: prop_types_default.a.func,
  onItemHover: prop_types_default.a.func,
  multiple: prop_types_default.a.bool,
  showNext: prop_types_default.a.oneOf([cascader_constants_strings.SHOW_NEXT_BY_CLICK, cascader_constants_strings.SHOW_NEXT_BY_HOVER]),
  checkedKeys: prop_types_default.a.object,
  halfCheckedKeys: prop_types_default.a.object,
  onItemCheckboxClick: prop_types_default.a.func,
  separator: prop_types_default.a.string,
  keyword: prop_types_default.a.string
};
item_Item.defaultProps = {
  empty: false
};
// CONCATENATED MODULE: ../semi-foundation/tag/constants.ts
/* eslint-disable max-len */

const tag_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-tag")
};
const tag_constants_strings = {
  TAG_SIZE: ['default', 'small', 'large'],
  TAG_COLOR: ['grey', 'red', 'pink', 'purple', 'violet', 'indigo', 'blue', 'light-blue', 'cyan', 'teal', 'green', 'light-green', 'lime', 'yellow', 'amber', 'orange', 'white'],
  TAG_TYPE: ['light', 'solid', 'ghost'],
  AVATAR_SHAPE: ['square', 'circle']
};

// EXTERNAL MODULE: ../semi-foundation/tag/tag.scss
var tag_tag = __webpack_require__("ktkQ");

// CONCATENATED MODULE: ./tag/index.tsx







var tag_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable jsx-a11y/no-static-element-interactions */











const tag_prefixCls = tag_constants_cssClasses.PREFIX;
const tagColors = tag_constants_strings.TAG_COLOR;
const tagSize = tag_constants_strings.TAG_SIZE;
const tagType = tag_constants_strings.TAG_TYPE;
const avatarShapeSet = tag_constants_strings.AVATAR_SHAPE;
class tag_Tag extends external_root_React_commonjs2_react_commonjs_react_amd_react_["Component"] {
  constructor(props) {
    var _context, _context2;

    super(props);
    this.state = {
      visible: true
    };
    this.close = bind_default()(_context = this.close).call(_context, this);
    this.handleKeyDown = bind_default()(_context2 = this.handleKeyDown).call(_context2, this);
  } // any other way to achieve this?


  static getDerivedStateFromProps(nextProps) {
    if ('visible' in nextProps) {
      return {
        visible: nextProps.visible
      };
    }

    return null;
  }

  setVisible(visible) {
    if (!('visible' in this.props)) {
      this.setState({
        visible
      });
    }
  }

  close(e, value) {
    const {
      onClose
    } = this.props;
    e.stopPropagation();
    e.nativeEvent.stopImmediatePropagation();
    onClose && onClose(value, e); // when user call e.preventDefault() in onClick callback, tag will not hidden

    if (e.defaultPrevented) {
      return;
    }

    this.setVisible(false);
  }

  handleKeyDown(event) {
    const {
      closable,
      onClick,
      onKeyDown
    } = this.props;

    switch (event.key) {
      case "Backspace":
      case "Delete":
        closable && this.close(event, this.props.children);
        handlePrevent(event);
        break;

      case "Enter":
        onClick(event);
        handlePrevent(event);
        break;

      case 'Escape':
        event.target.blur();
        break;

      default:
        break;
    }

    onKeyDown && onKeyDown(event);
  }

  renderAvatar() {
    const {
      avatarShape,
      avatarSrc
    } = this.props;
    const avatar = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(avatar_Avatar, {
      src: avatarSrc,
      shape: avatarShape
    });
    return avatar;
  }

  render() {
    var _context3, _context4, _context5, _context6, _context7;

    const _a = this.props,
          {
      children,
      size,
      color,
      closable,
      visible,
      onClose,
      onClick,
      className,
      type,
      avatarSrc,
      avatarShape,
      tabIndex
    } = _a,
          attr = tag_rest(_a, ["children", "size", "color", "closable", "visible", "onClose", "onClick", "className", "type", "avatarSrc", "avatarShape", "tabIndex"]);

    const {
      visible: isVisible
    } = this.state;
    const clickable = onClick !== tag_Tag.defaultProps.onClick || closable; // only when the Tag is clickable or closable, the value of tabIndex is allowed to be passed in. 

    const a11yProps = {
      role: 'button',
      tabIndex: tabIndex | 0,
      onKeyDown: this.handleKeyDown
    };

    const baseProps = assign_default()(assign_default()({}, attr), {
      onClick,
      className: classnames_default()(tag_prefixCls, {
        ["".concat(tag_prefixCls, "-default")]: size === 'default',
        ["".concat(tag_prefixCls, "-small")]: size === 'small',
        ["".concat(tag_prefixCls, "-large")]: size === 'large',
        [concat_default()(_context3 = "".concat(tag_prefixCls, "-")).call(_context3, type)]: type,
        [concat_default()(_context4 = concat_default()(_context5 = "".concat(tag_prefixCls, "-")).call(_context5, color, "-")).call(_context4, type)]: color && type,
        ["".concat(tag_prefixCls, "-closable")]: closable,
        ["".concat(tag_prefixCls, "-invisible")]: !isVisible,
        [concat_default()(_context6 = "".concat(tag_prefixCls, "-avatar-")).call(_context6, avatarShape)]: avatarSrc
      }, className)
    });

    const wrapProps = clickable ? assign_default()(assign_default()({}, baseProps), a11yProps) : baseProps;
    const closeIcon = closable ?
    /*#__PURE__*/
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events
    external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(tag_prefixCls, "-close"),
      onClick: e => this.close(e, children)
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClose, {
      size: "small"
    })) : null;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
      "aria-label": this.props['aria-label'] || isString_default()(children) ? concat_default()(_context7 = "".concat(closable ? 'Closable ' : '', "Tag: ")).call(_context7, children) : ''
    }, wrapProps), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(tag_prefixCls, "-content")
    }, avatarSrc ? this.renderAvatar() : null, children, closeIcon));
  }

}
tag_Tag.defaultProps = {
  size: tagSize[0],
  color: tagColors[0],
  closable: false,
  // visible: true,
  type: tagType[0],
  onClose: () => undefined,
  onClick: () => undefined,
  style: {},
  className: '',
  avatarShape: 'square'
};
tag_Tag.propTypes = {
  children: prop_types_default.a.node,
  size: prop_types_default.a.oneOf(tagSize),
  color: prop_types_default.a.oneOf(tagColors),
  type: prop_types_default.a.oneOf(tagType),
  closable: prop_types_default.a.bool,
  visible: prop_types_default.a.bool,
  onClose: prop_types_default.a.func,
  onClick: prop_types_default.a.func,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  avatarSrc: prop_types_default.a.string,
  avatarShape: prop_types_default.a.oneOf(avatarShapeSet),
  'aria-label': prop_types_default.a.string
};
// CONCATENATED MODULE: ../semi-foundation/tagInput/constants.ts

const tagInput_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-tagInput")
};
const tagInput_constants_strings = {
  SIZE_SET: ['large', 'default', 'small'],
  STATUS: ["success", "default", "error", "warning"]
};

// EXTERNAL MODULE: ../semi-foundation/tagInput/tagInput.scss
var tagInput = __webpack_require__("GX8i");

// CONCATENATED MODULE: ../semi-foundation/tagInput/utils/getSplitedArray.ts




/**
 * Get the splited array.
 * We expect separators to be string | string[] | null, but users
 * are also allowed to pass in other types.
 */
const getSplitedArray = (originString, separators) => {
  let splitedValue = [];

  if (isString_default()(separators) || isNumber_default()(separators)) {
    splitedValue = originString.split(separators);
  } else if (isArray_default()(separators)) {
    const tempChar = separators[0]; // temporary splitter

    splitedValue = originString;

    for (let i = 1; i < separators.length; i++) {
      splitedValue = splitedValue.split(separators[i]).join(tempChar);
    }

    splitedValue = splitedValue.split(tempChar);
  } else {
    splitedValue.push(originString);
  }

  return splitedValue;
};

/* harmony default export */ var utils_getSplitedArray = (getSplitedArray);
// CONCATENATED MODULE: ../semi-foundation/utils/arrayMove.ts


function arrayMove(array, from, to) {
  const newArray = slice_default()(array).call(array);

  splice_default()(newArray).call(newArray, to < 0 ? newArray.length + to : to, 0, splice_default()(newArray).call(newArray, from, 1)[0]);

  return newArray;
}
// CONCATENATED MODULE: ../semi-foundation/tagInput/foundation.ts


















class foundation_TagInputFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
    /**
     * handler of input change
     */

    this.handleInputChange = e => {
      const {
        value
      } = e.target;
      this._checkInputChangeValid(value) && this._onInputChange(value, e);
    };
    /**
     * check whether the input change is legal
     */


    this._checkInputChangeValid = value => {
      // e.target.value legitimacy judgment needs to be based on this.state.input Value
      const {
        maxLength,
        onInputExceed,
        separator
      } = this._adapter.getProps();

      const {
        inputValue
      } = this._adapter.getStates();

      let allowChange = true;

      if (isNumber_default()(maxLength)) {
        const valueArr = utils_getSplitedArray(value, separator);
        const inputArr = utils_getSplitedArray(inputValue, separator);
        const maxLen = Math.max(valueArr.length, inputArr.length);

        for (let i = 0; i < maxLen; i++) {
          // When the input length is increasing
          // eslint-disable-next-line max-len
          if (!isUndefined_default()(valueArr[i]) && (isUndefined_default()(inputArr[i]) || valueArr[i].length > inputArr[i].length)) {
            // When the input length exceeds maxLength
            // eslint-disable-next-line max-depth
            if (valueArr[i].length > maxLength) {
              allowChange = false;
              isFunction_default()(onInputExceed) && onInputExceed(value);
              break;
            }
          }
        }
      }

      return allowChange;
    };
    /**
     * Input event handler when onKeyDown is triggered
     */


    this.handleKeyDown = e => {
      const {
        inputValue,
        tagsArray
      } = this._adapter.getStates();

      const code = e.keyCode;

      if (code === utils_keyCode.ENTER) {
        e.preventDefault(); // prevent trigger submit when using in form

        if (inputValue !== '') {
          this._handleAddTags(e);
        }
      }

      const {
        length
      } = tagsArray;

      if (code === utils_keyCode.BACKSPACE && inputValue === '' && length > 0) {
        const newTagList = slice_default()(tagsArray).call(tagsArray, 0, length - 1);

        const removedTag = tagsArray[length - 1];

        this._onRemove(newTagList, removedTag, length - 1);
      }

      this._adapter.notifyKeyDown(e);
    };
  }

  _handleAddTags(e) {
    const {
      separator,
      max,
      onExceed,
      allowDuplicates
    } = this._adapter.getProps();

    const {
      inputValue,
      tagsArray
    } = this._adapter.getStates();

    let addTags = utils_getSplitedArray(inputValue, separator);
    addTags = filter_default()(addTags).call(addTags, (item, idx) => {
      // If allowDuplicates is false, then filter duplicates
      if (!allowDuplicates) {
        if (includes_default()(tagsArray).call(tagsArray, item) || index_of_default()(addTags).call(addTags, item) !== idx) {
          return false;
        }
      } // Filter empty strings and pure space strings in new items


      return isString_default()(item) && trim_default()(item).call(item) !== '';
    });

    let newTagList = concat_default()(tagsArray).call(tagsArray, addTags);

    if (isNumber_default()(max) && newTagList.length > max) {
      isFunction_default()(onExceed) && onExceed(newTagList);
      newTagList = slice_default()(newTagList).call(newTagList, 0, max);
      addTags = slice_default()(addTags).call(addTags, 0, max - tagsArray.length);
    }

    if (addTags.length > 0) {
      this._onAdd(newTagList, addTags);
    }

    this._onInputChange('', e);
  }

  handleInputBlur(e) {
    const {
      addOnBlur
    } = this._adapter.getProps();

    if (addOnBlur === true) {
      this._handleAddTags(e);
    }

    this._adapter.setFocusing(false);

    this._adapter.notifyBlur(e);
  }

  handleInputFocus(e) {
    this._adapter.setFocusing(true);

    this._adapter.notifyFocus(e);
  }
  /**
   * A11y: simulate clear button click
   */

  /* istanbul ignore next */


  handleClearEnterPress(e) {
    if (utils_isEnterPress(e)) {
      this.handleClearBtn(e);
    }
  }

  handleClearBtn(e) {
    const {
      inputValue,
      tagsArray
    } = this._adapter.getStates();

    if (tagsArray.length > 0) {
      this._adapter.setTagsArray([]);

      this._adapter.notifyTagChange([]);
    }

    if (inputValue.length > 0) {
      this._onInputChange('', e);
    } // Prevent event propagate to TagInput outermost div


    e.stopPropagation();
  }

  handleTagClose(index) {
    const {
      tagsArray
    } = this._adapter.getStates();

    const newTagList = [...tagsArray];

    splice_default()(newTagList).call(newTagList, index, 1);

    const removedTag = tagsArray[index];

    this._onRemove(newTagList, removedTag, index);
  }

  handleInputMouseEnter() {
    this._adapter.setHovering(true);
  }

  handleInputMouseLeave() {
    this._adapter.setHovering(false);
  }

  handleClick(e) {
    const {
      disabled
    } = this.getProps();

    if (disabled) {
      return;
    }

    const clickOutsideHandler = this._adapter.getClickOutsideHandler();

    if (!clickOutsideHandler) {
      this._adapter.setActive(true);

      this._adapter.registerClickOutsideHandler(e => this.clickOutsideCallBack());
    }
  }

  clickOutsideCallBack() {
    this._adapter.unregisterClickOutsideHandler();

    this._adapter.setActive(false);
  }

  handleClickPrefixOrSuffix(e) {
    const {
      disabled
    } = this._adapter.getProps();

    const {
      isFocus
    } = this._adapter.getStates();

    if (!disabled && !isFocus) {
      this._adapter.toggleFocusing(true);
    }
  }

  handlePreventMouseDown(e) {
    if (e && isFunction_default()(e.preventDefault)) {
      e.preventDefault();
    }
  }
  /**
   * handler of delete tag
   */


  _onRemove(newTagList, removedTags, index) {
    if (!this._isControlledComponent()) {
      this._adapter.setTagsArray(newTagList);
    }

    this._adapter.notifyTagChange(newTagList);

    this._adapter.notifyTagRemove(removedTags, index);
  }
  /**
   * handler of add tag
   */


  _onAdd(newTagList, addTags) {
    if (!this._isControlledComponent()) {
      this._adapter.setTagsArray(newTagList);
    }

    this._adapter.notifyTagChange(newTagList);

    this._adapter.notifyTagAdd(addTags);
  }
  /**
   * handler of input change
   */


  _onInputChange(value, e) {
    this._adapter.setInputValue(value);

    this._adapter.notifyInputChange(value, e);
  }

  handleSortEnd(callbackProps) {
    const {
      oldIndex,
      newIndex
    } = callbackProps;
    const {
      tagsArray
    } = this.getStates();
    const newTagsArray = arrayMove(tagsArray, oldIndex, newIndex);

    if (!this._isControlledComponent()) {
      this._adapter.setTagsArray(newTagsArray);
    }

    this._adapter.notifyTagChange(newTagsArray);
  }

}

/* harmony default export */ var tagInput_foundation = (foundation_TagInputFoundation);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/slicedToArray.js




function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/objectSpread.js

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? Object(arguments[i]) : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js


function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/inherits.js

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/invariant/browser.js
var browser = __webpack_require__("I9iR");
var browser_default = /*#__PURE__*/__webpack_require__.n(browser);

// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js




function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/react-sortable-hoc/dist/react-sortable-hoc.esm.js
















var react_sortable_hoc_esm_Manager = function () {
  function Manager() {
    _classCallCheck(this, Manager);

    _defineProperty(this, "refs", {});
  }

  _createClass(Manager, [{
    key: "add",
    value: function add(collection, ref) {
      if (!this.refs[collection]) {
        this.refs[collection] = [];
      }

      this.refs[collection].push(ref);
    }
  }, {
    key: "remove",
    value: function remove(collection, ref) {
      var index = this.getIndex(collection, ref);

      if (index !== -1) {
        this.refs[collection].splice(index, 1);
      }
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return this.active;
    }
  }, {
    key: "getActive",
    value: function getActive() {
      var _this = this;

      return this.refs[this.active.collection].find(function (_ref) {
        var node = _ref.node;
        return node.sortableInfo.index == _this.active.index;
      });
    }
  }, {
    key: "getIndex",
    value: function getIndex(collection, ref) {
      return this.refs[collection].indexOf(ref);
    }
  }, {
    key: "getOrderedRefs",
    value: function getOrderedRefs() {
      var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active.collection;
      return this.refs[collection].sort(sortByIndex);
    }
  }]);

  return Manager;
}();

function sortByIndex(_ref2, _ref3) {
  var index1 = _ref2.node.sortableInfo.index;
  var index2 = _ref3.node.sortableInfo.index;
  return index1 - index2;
}

function react_sortable_hoc_esm_arrayMove(array, from, to) {
  if (false) {}

  array = array.slice();
  array.splice(to < 0 ? array.length + to : to, 0, array.splice(from, 1)[0]);
  return array;
}
function react_sortable_hoc_esm_omit(obj, keysToOmit) {
  return Object.keys(obj).reduce(function (acc, key) {
    if (keysToOmit.indexOf(key) === -1) {
      acc[key] = obj[key];
    }

    return acc;
  }, {});
}
var react_sortable_hoc_esm_events = {
  end: ['touchend', 'touchcancel', 'mouseup'],
  move: ['touchmove', 'mousemove'],
  start: ['touchstart', 'mousedown']
};
var vendorPrefix = function () {
  if (typeof window === 'undefined' || typeof document === 'undefined') {
    return '';
  }

  var styles = window.getComputedStyle(document.documentElement, '') || ['-moz-hidden-iframe'];
  var pre = (Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/) || styles.OLink === '' && ['', 'o'])[1];

  switch (pre) {
    case 'ms':
      return 'ms';

    default:
      return pre && pre.length ? pre[0].toUpperCase() + pre.substr(1) : '';
  }
}();
function setInlineStyles(node, styles) {
  Object.keys(styles).forEach(function (key) {
    node.style[key] = styles[key];
  });
}
function setTranslate3d(node, translate) {
  node.style["".concat(vendorPrefix, "Transform")] = translate == null ? '' : "translate3d(".concat(translate.x, "px,").concat(translate.y, "px,0)");
}
function setTransitionDuration(node, duration) {
  node.style["".concat(vendorPrefix, "TransitionDuration")] = duration == null ? '' : "".concat(duration, "ms");
}
function closest(el, fn) {
  while (el) {
    if (fn(el)) {
      return el;
    }

    el = el.parentNode;
  }

  return null;
}
function react_sortable_hoc_esm_limit(min, max, value) {
  return Math.max(min, Math.min(value, max));
}

function getPixelValue(stringValue) {
  if (stringValue.substr(-2) === 'px') {
    return parseFloat(stringValue);
  }

  return 0;
}

function getElementMargin(element) {
  var style = window.getComputedStyle(element);
  return {
    bottom: getPixelValue(style.marginBottom),
    left: getPixelValue(style.marginLeft),
    right: getPixelValue(style.marginRight),
    top: getPixelValue(style.marginTop)
  };
}
function provideDisplayName(prefix, Component$$1) {
  var componentName = Component$$1.displayName || Component$$1.name;
  return componentName ? "".concat(prefix, "(").concat(componentName, ")") : prefix;
}
function getScrollAdjustedBoundingClientRect(node, scrollDelta) {
  var boundingClientRect = node.getBoundingClientRect();
  return {
    top: boundingClientRect.top + scrollDelta.top,
    left: boundingClientRect.left + scrollDelta.left
  };
}
function react_sortable_hoc_esm_getPosition(event) {
  if (event.touches && event.touches.length) {
    return {
      x: event.touches[0].pageX,
      y: event.touches[0].pageY
    };
  } else if (event.changedTouches && event.changedTouches.length) {
    return {
      x: event.changedTouches[0].pageX,
      y: event.changedTouches[0].pageY
    };
  } else {
    return {
      x: event.pageX,
      y: event.pageY
    };
  }
}
function isTouchEvent(event) {
  return event.touches && event.touches.length || event.changedTouches && event.changedTouches.length;
}
function getEdgeOffset(node, parent) {
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    left: 0,
    top: 0
  };

  if (!node) {
    return undefined;
  }

  var nodeOffset = {
    left: offset.left + node.offsetLeft,
    top: offset.top + node.offsetTop
  };

  if (node.parentNode === parent) {
    return nodeOffset;
  }

  return getEdgeOffset(node.parentNode, parent, nodeOffset);
}
function getTargetIndex(newIndex, prevIndex, oldIndex) {
  if (newIndex < oldIndex && newIndex > prevIndex) {
    return newIndex - 1;
  } else if (newIndex > oldIndex && newIndex < prevIndex) {
    return newIndex + 1;
  } else {
    return newIndex;
  }
}
function getLockPixelOffset(_ref) {
  var lockOffset = _ref.lockOffset,
      width = _ref.width,
      height = _ref.height;
  var offsetX = lockOffset;
  var offsetY = lockOffset;
  var unit = 'px';

  if (typeof lockOffset === 'string') {
    var match = /^[+-]?\d*(?:\.\d*)?(px|%)$/.exec(lockOffset);
    browser_default()(match !== null, 'lockOffset value should be a number or a string of a ' + 'number followed by "px" or "%". Given %s', lockOffset);
    offsetX = parseFloat(lockOffset);
    offsetY = parseFloat(lockOffset);
    unit = match[1];
  }

  browser_default()(isFinite(offsetX) && isFinite(offsetY), 'lockOffset value should be a finite. Given %s', lockOffset);

  if (unit === '%') {
    offsetX = offsetX * width / 100;
    offsetY = offsetY * height / 100;
  }

  return {
    x: offsetX,
    y: offsetY
  };
}
function getLockPixelOffsets(_ref2) {
  var height = _ref2.height,
      width = _ref2.width,
      lockOffset = _ref2.lockOffset;
  var offsets = Array.isArray(lockOffset) ? lockOffset : [lockOffset, lockOffset];
  browser_default()(offsets.length === 2, 'lockOffset prop of SortableContainer should be a single ' + 'value or an array of exactly two values. Given %s', lockOffset);

  var _offsets = _slicedToArray(offsets, 2),
      minLockOffset = _offsets[0],
      maxLockOffset = _offsets[1];

  return [getLockPixelOffset({
    height: height,
    lockOffset: minLockOffset,
    width: width
  }), getLockPixelOffset({
    height: height,
    lockOffset: maxLockOffset,
    width: width
  })];
}

function isScrollable(el) {
  var computedStyle = window.getComputedStyle(el);
  var overflowRegex = /(auto|scroll)/;
  var properties = ['overflow', 'overflowX', 'overflowY'];
  return properties.find(function (property) {
    return overflowRegex.test(computedStyle[property]);
  });
}

function getScrollingParent(el) {
  if (!(el instanceof HTMLElement)) {
    return null;
  } else if (isScrollable(el)) {
    return el;
  } else {
    return getScrollingParent(el.parentNode);
  }
}
function getContainerGridGap(element) {
  var style = window.getComputedStyle(element);

  if (style.display === 'grid') {
    return {
      x: getPixelValue(style.gridColumnGap),
      y: getPixelValue(style.gridRowGap)
    };
  }

  return {
    x: 0,
    y: 0
  };
}
var KEYCODE = {
  TAB: 9,
  ESC: 27,
  SPACE: 32,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40
};
var NodeType = {
  Anchor: 'A',
  Button: 'BUTTON',
  Canvas: 'CANVAS',
  Input: 'INPUT',
  Option: 'OPTION',
  Textarea: 'TEXTAREA',
  Select: 'SELECT'
};
function cloneNode(node) {
  var selector = 'input, textarea, select, canvas, [contenteditable]';
  var fields = node.querySelectorAll(selector);
  var clonedNode = node.cloneNode(true);

  var clonedFields = _toConsumableArray(clonedNode.querySelectorAll(selector));

  clonedFields.forEach(function (field, i) {
    if (field.type !== 'file') {
      field.value = fields[i].value;
    }

    if (field.type === 'radio' && field.name) {
      field.name = "__sortableClone__".concat(field.name);
    }

    if (field.tagName === NodeType.Canvas && fields[i].width > 0 && fields[i].height > 0) {
      var destCtx = field.getContext('2d');
      destCtx.drawImage(fields[i], 0, 0);
    }
  });
  return clonedNode;
}

function sortableHandle(WrappedComponent) {
  var _class, _temp;

  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    withRef: false
  };
  return _temp = _class = function (_React$Component) {
    _inherits(WithSortableHandle, _React$Component);

    function WithSortableHandle() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, WithSortableHandle);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WithSortableHandle)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "wrappedInstance", Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createRef"])());

      return _this;
    }

    _createClass(WithSortableHandle, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var node = Object(external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_["findDOMNode"])(this);
        node.sortableHandle = true;
      }
    }, {
      key: "getWrappedInstance",
      value: function getWrappedInstance() {
        browser_default()(config.withRef, 'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableHandle() call');
        return this.wrappedInstance.current;
      }
    }, {
      key: "render",
      value: function render() {
        var ref = config.withRef ? this.wrappedInstance : null;
        return Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"])(WrappedComponent, _extends({
          ref: ref
        }, this.props));
      }
    }]);

    return WithSortableHandle;
  }(external_root_React_commonjs2_react_commonjs_react_amd_react_["Component"]), _defineProperty(_class, "displayName", provideDisplayName('sortableHandle', WrappedComponent)), _temp;
}
function isSortableHandle(node) {
  return node.sortableHandle != null;
}

var react_sortable_hoc_esm_AutoScroller = function () {
  function AutoScroller(container, onScrollCallback) {
    _classCallCheck(this, AutoScroller);

    this.container = container;
    this.onScrollCallback = onScrollCallback;
  }

  _createClass(AutoScroller, [{
    key: "clear",
    value: function clear() {
      if (this.interval == null) {
        return;
      }

      clearInterval(this.interval);
      this.interval = null;
    }
  }, {
    key: "update",
    value: function update(_ref) {
      var _this = this;

      var translate = _ref.translate,
          minTranslate = _ref.minTranslate,
          maxTranslate = _ref.maxTranslate,
          width = _ref.width,
          height = _ref.height;
      var direction = {
        x: 0,
        y: 0
      };
      var speed = {
        x: 1,
        y: 1
      };
      var acceleration = {
        x: 10,
        y: 10
      };
      var _this$container = this.container,
          scrollTop = _this$container.scrollTop,
          scrollLeft = _this$container.scrollLeft,
          scrollHeight = _this$container.scrollHeight,
          scrollWidth = _this$container.scrollWidth,
          clientHeight = _this$container.clientHeight,
          clientWidth = _this$container.clientWidth;
      var isTop = scrollTop === 0;
      var isBottom = scrollHeight - scrollTop - clientHeight === 0;
      var isLeft = scrollLeft === 0;
      var isRight = scrollWidth - scrollLeft - clientWidth === 0;

      if (translate.y >= maxTranslate.y - height / 2 && !isBottom) {
        direction.y = 1;
        speed.y = acceleration.y * Math.abs((maxTranslate.y - height / 2 - translate.y) / height);
      } else if (translate.x >= maxTranslate.x - width / 2 && !isRight) {
        direction.x = 1;
        speed.x = acceleration.x * Math.abs((maxTranslate.x - width / 2 - translate.x) / width);
      } else if (translate.y <= minTranslate.y + height / 2 && !isTop) {
        direction.y = -1;
        speed.y = acceleration.y * Math.abs((translate.y - height / 2 - minTranslate.y) / height);
      } else if (translate.x <= minTranslate.x + width / 2 && !isLeft) {
        direction.x = -1;
        speed.x = acceleration.x * Math.abs((translate.x - width / 2 - minTranslate.x) / width);
      }

      if (this.interval) {
        this.clear();
        this.isAutoScrolling = false;
      }

      if (direction.x !== 0 || direction.y !== 0) {
        this.interval = setInterval(function () {
          _this.isAutoScrolling = true;
          var offset = {
            left: speed.x * direction.x,
            top: speed.y * direction.y
          };
          _this.container.scrollTop += offset.top;
          _this.container.scrollLeft += offset.left;

          _this.onScrollCallback(offset);
        }, 5);
      }
    }
  }]);

  return AutoScroller;
}();

function defaultGetHelperDimensions(_ref) {
  var node = _ref.node;
  return {
    height: node.offsetHeight,
    width: node.offsetWidth
  };
}

function defaultShouldCancelStart(event) {
  var interactiveElements = [NodeType.Input, NodeType.Textarea, NodeType.Select, NodeType.Option, NodeType.Button];

  if (interactiveElements.indexOf(event.target.tagName) !== -1) {
    return true;
  }

  if (closest(event.target, function (el) {
    return el.contentEditable === 'true';
  })) {
    return true;
  }

  return false;
}

var propTypes = {
  axis: prop_types_default.a.oneOf(['x', 'y', 'xy']),
  contentWindow: prop_types_default.a.any,
  disableAutoscroll: prop_types_default.a.bool,
  distance: prop_types_default.a.number,
  getContainer: prop_types_default.a.func,
  getHelperDimensions: prop_types_default.a.func,
  helperClass: prop_types_default.a.string,
  helperContainer: prop_types_default.a.oneOfType([prop_types_default.a.func, typeof HTMLElement === 'undefined' ? prop_types_default.a.any : prop_types_default.a.instanceOf(HTMLElement)]),
  hideSortableGhost: prop_types_default.a.bool,
  keyboardSortingTransitionDuration: prop_types_default.a.number,
  lockAxis: prop_types_default.a.string,
  lockOffset: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string, prop_types_default.a.arrayOf(prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]))]),
  lockToContainerEdges: prop_types_default.a.bool,
  onSortEnd: prop_types_default.a.func,
  onSortMove: prop_types_default.a.func,
  onSortOver: prop_types_default.a.func,
  onSortStart: prop_types_default.a.func,
  pressDelay: prop_types_default.a.number,
  pressThreshold: prop_types_default.a.number,
  keyCodes: prop_types_default.a.shape({
    lift: prop_types_default.a.arrayOf(prop_types_default.a.number),
    drop: prop_types_default.a.arrayOf(prop_types_default.a.number),
    cancel: prop_types_default.a.arrayOf(prop_types_default.a.number),
    up: prop_types_default.a.arrayOf(prop_types_default.a.number),
    down: prop_types_default.a.arrayOf(prop_types_default.a.number)
  }),
  shouldCancelStart: prop_types_default.a.func,
  transitionDuration: prop_types_default.a.number,
  updateBeforeSortStart: prop_types_default.a.func,
  useDragHandle: prop_types_default.a.bool,
  useWindowAsScrollContainer: prop_types_default.a.bool
};
var defaultKeyCodes = {
  lift: [KEYCODE.SPACE],
  drop: [KEYCODE.SPACE],
  cancel: [KEYCODE.ESC],
  up: [KEYCODE.UP, KEYCODE.LEFT],
  down: [KEYCODE.DOWN, KEYCODE.RIGHT]
};
var react_sortable_hoc_esm_defaultProps = {
  axis: 'y',
  disableAutoscroll: false,
  distance: 0,
  getHelperDimensions: defaultGetHelperDimensions,
  hideSortableGhost: true,
  lockOffset: '50%',
  lockToContainerEdges: false,
  pressDelay: 0,
  pressThreshold: 5,
  keyCodes: defaultKeyCodes,
  shouldCancelStart: defaultShouldCancelStart,
  transitionDuration: 300,
  useWindowAsScrollContainer: false
};
var omittedProps = Object.keys(propTypes);
function react_sortable_hoc_esm_validateProps(props) {
  browser_default()(!(props.distance && props.pressDelay), 'Attempted to set both `pressDelay` and `distance` on SortableContainer, you may only use one or the other, not both at the same time.');
}

function _finallyRethrows(body, finalizer) {
  try {
    var result = body();
  } catch (e) {
    return finalizer(true, e);
  }

  if (result && result.then) {
    return result.then(finalizer.bind(null, false), finalizer.bind(null, true));
  }

  return finalizer(false, value);
}
var SortableContext = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createContext"])({
  manager: {}
});
function sortableContainer(WrappedComponent) {
  var _class, _temp;

  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    withRef: false
  };
  return _temp = _class = function (_React$Component) {
    _inherits(WithSortableContainer, _React$Component);

    function WithSortableContainer(props) {
      var _this;

      _classCallCheck(this, WithSortableContainer);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithSortableContainer).call(this, props));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {});

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleStart", function (event) {
        var _this$props = _this.props,
            distance = _this$props.distance,
            shouldCancelStart = _this$props.shouldCancelStart;

        if (event.button === 2 || shouldCancelStart(event)) {
          return;
        }

        _this.touched = true;
        _this.position = react_sortable_hoc_esm_getPosition(event);
        var node = closest(event.target, function (el) {
          return el.sortableInfo != null;
        });

        if (node && node.sortableInfo && _this.nodeIsChild(node) && !_this.state.sorting) {
          var useDragHandle = _this.props.useDragHandle;
          var _node$sortableInfo = node.sortableInfo,
              index = _node$sortableInfo.index,
              collection = _node$sortableInfo.collection,
              disabled = _node$sortableInfo.disabled;

          if (disabled) {
            return;
          }

          if (useDragHandle && !closest(event.target, isSortableHandle)) {
            return;
          }

          _this.manager.active = {
            collection: collection,
            index: index
          };

          if (!isTouchEvent(event) && event.target.tagName === NodeType.Anchor) {
            event.preventDefault();
          }

          if (!distance) {
            if (_this.props.pressDelay === 0) {
              _this.handlePress(event);
            } else {
              _this.pressTimer = setTimeout(function () {
                return _this.handlePress(event);
              }, _this.props.pressDelay);
            }
          }
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "nodeIsChild", function (node) {
        return node.sortableInfo.manager === _this.manager;
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleMove", function (event) {
        var _this$props2 = _this.props,
            distance = _this$props2.distance,
            pressThreshold = _this$props2.pressThreshold;

        if (!_this.state.sorting && _this.touched && !_this._awaitingUpdateBeforeSortStart) {
          var position = react_sortable_hoc_esm_getPosition(event);
          var delta = {
            x: _this.position.x - position.x,
            y: _this.position.y - position.y
          };
          var combinedDelta = Math.abs(delta.x) + Math.abs(delta.y);
          _this.delta = delta;

          if (!distance && (!pressThreshold || combinedDelta >= pressThreshold)) {
            clearTimeout(_this.cancelTimer);
            _this.cancelTimer = setTimeout(_this.cancel, 0);
          } else if (distance && combinedDelta >= distance && _this.manager.isActive()) {
            _this.handlePress(event);
          }
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleEnd", function () {
        _this.touched = false;

        _this.cancel();
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "cancel", function () {
        var distance = _this.props.distance;
        var sorting = _this.state.sorting;

        if (!sorting) {
          if (!distance) {
            clearTimeout(_this.pressTimer);
          }

          _this.manager.active = null;
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handlePress", function (event) {
        try {
          var active = _this.manager.getActive();

          var _temp6 = function () {
            if (active) {
              var _temp7 = function _temp7() {
                var index = _node.sortableInfo.index;
                var margin = getElementMargin(_node);
                var gridGap = getContainerGridGap(_this.container);

                var containerBoundingRect = _this.scrollContainer.getBoundingClientRect();

                var dimensions = _getHelperDimensions({
                  index: index,
                  node: _node,
                  collection: _collection
                });

                _this.node = _node;
                _this.margin = margin;
                _this.gridGap = gridGap;
                _this.width = dimensions.width;
                _this.height = dimensions.height;
                _this.marginOffset = {
                  x: _this.margin.left + _this.margin.right + _this.gridGap.x,
                  y: Math.max(_this.margin.top, _this.margin.bottom, _this.gridGap.y)
                };
                _this.boundingClientRect = _node.getBoundingClientRect();
                _this.containerBoundingRect = containerBoundingRect;
                _this.index = index;
                _this.newIndex = index;
                _this.axis = {
                  x: _axis.indexOf('x') >= 0,
                  y: _axis.indexOf('y') >= 0
                };
                _this.offsetEdge = getEdgeOffset(_node, _this.container);

                if (_isKeySorting) {
                  _this.initialOffset = react_sortable_hoc_esm_getPosition(_objectSpread({}, event, {
                    pageX: _this.boundingClientRect.left,
                    pageY: _this.boundingClientRect.top
                  }));
                } else {
                  _this.initialOffset = react_sortable_hoc_esm_getPosition(event);
                }

                _this.initialScroll = {
                  left: _this.scrollContainer.scrollLeft,
                  top: _this.scrollContainer.scrollTop
                };
                _this.initialWindowScroll = {
                  left: window.pageXOffset,
                  top: window.pageYOffset
                };
                _this.helper = _this.helperContainer.appendChild(cloneNode(_node));
                setInlineStyles(_this.helper, {
                  boxSizing: 'border-box',
                  height: "".concat(_this.height, "px"),
                  left: "".concat(_this.boundingClientRect.left - margin.left, "px"),
                  pointerEvents: 'none',
                  position: 'fixed',
                  top: "".concat(_this.boundingClientRect.top - margin.top, "px"),
                  width: "".concat(_this.width, "px")
                });

                if (_isKeySorting) {
                  _this.helper.focus();
                }

                if (_hideSortableGhost) {
                  _this.sortableGhost = _node;
                  setInlineStyles(_node, {
                    opacity: 0,
                    visibility: 'hidden'
                  });
                }

                _this.minTranslate = {};
                _this.maxTranslate = {};

                if (_isKeySorting) {
                  var _ref = _useWindowAsScrollContainer ? {
                    top: 0,
                    left: 0,
                    width: _this.contentWindow.innerWidth,
                    height: _this.contentWindow.innerHeight
                  } : _this.containerBoundingRect,
                      containerTop = _ref.top,
                      containerLeft = _ref.left,
                      containerWidth = _ref.width,
                      containerHeight = _ref.height;

                  var containerBottom = containerTop + containerHeight;
                  var containerRight = containerLeft + containerWidth;

                  if (_this.axis.x) {
                    _this.minTranslate.x = containerLeft - _this.boundingClientRect.left;
                    _this.maxTranslate.x = containerRight - (_this.boundingClientRect.left + _this.width);
                  }

                  if (_this.axis.y) {
                    _this.minTranslate.y = containerTop - _this.boundingClientRect.top;
                    _this.maxTranslate.y = containerBottom - (_this.boundingClientRect.top + _this.height);
                  }
                } else {
                  if (_this.axis.x) {
                    _this.minTranslate.x = (_useWindowAsScrollContainer ? 0 : containerBoundingRect.left) - _this.boundingClientRect.left - _this.width / 2;
                    _this.maxTranslate.x = (_useWindowAsScrollContainer ? _this.contentWindow.innerWidth : containerBoundingRect.left + containerBoundingRect.width) - _this.boundingClientRect.left - _this.width / 2;
                  }

                  if (_this.axis.y) {
                    _this.minTranslate.y = (_useWindowAsScrollContainer ? 0 : containerBoundingRect.top) - _this.boundingClientRect.top - _this.height / 2;
                    _this.maxTranslate.y = (_useWindowAsScrollContainer ? _this.contentWindow.innerHeight : containerBoundingRect.top + containerBoundingRect.height) - _this.boundingClientRect.top - _this.height / 2;
                  }
                }

                if (_helperClass) {
                  _helperClass.split(' ').forEach(function (className) {
                    return _this.helper.classList.add(className);
                  });
                }

                _this.listenerNode = event.touches ? event.target : _this.contentWindow;

                if (_isKeySorting) {
                  _this.listenerNode.addEventListener('wheel', _this.handleKeyEnd, true);

                  _this.listenerNode.addEventListener('mousedown', _this.handleKeyEnd, true);

                  _this.listenerNode.addEventListener('keydown', _this.handleKeyDown);
                } else {
                  react_sortable_hoc_esm_events.move.forEach(function (eventName) {
                    return _this.listenerNode.addEventListener(eventName, _this.handleSortMove, false);
                  });
                  react_sortable_hoc_esm_events.end.forEach(function (eventName) {
                    return _this.listenerNode.addEventListener(eventName, _this.handleSortEnd, false);
                  });
                }

                _this.setState({
                  sorting: true,
                  sortingIndex: index
                });

                if (_onSortStart) {
                  _onSortStart({
                    node: _node,
                    index: index,
                    collection: _collection,
                    isKeySorting: _isKeySorting,
                    nodes: _this.manager.getOrderedRefs(),
                    helper: _this.helper
                  }, event);
                }

                if (_isKeySorting) {
                  _this.keyMove(0);
                }
              };

              var _this$props3 = _this.props,
                  _axis = _this$props3.axis,
                  _getHelperDimensions = _this$props3.getHelperDimensions,
                  _helperClass = _this$props3.helperClass,
                  _hideSortableGhost = _this$props3.hideSortableGhost,
                  updateBeforeSortStart = _this$props3.updateBeforeSortStart,
                  _onSortStart = _this$props3.onSortStart,
                  _useWindowAsScrollContainer = _this$props3.useWindowAsScrollContainer;
              var _node = active.node,
                  _collection = active.collection;
              var _isKeySorting = _this.manager.isKeySorting;

              var _temp8 = function () {
                if (typeof updateBeforeSortStart === 'function') {
                  _this._awaitingUpdateBeforeSortStart = true;

                  var _temp9 = _finallyRethrows(function () {
                    var index = _node.sortableInfo.index;
                    return Promise.resolve(updateBeforeSortStart({
                      collection: _collection,
                      index: index,
                      node: _node,
                      isKeySorting: _isKeySorting
                    }, event)).then(function () {});
                  }, function (_wasThrown, _result) {
                    _this._awaitingUpdateBeforeSortStart = false;
                    if (_wasThrown) throw _result;
                    return _result;
                  });

                  if (_temp9 && _temp9.then) return _temp9.then(function () {});
                }
              }();

              return _temp8 && _temp8.then ? _temp8.then(_temp7) : _temp7(_temp8);
            }
          }();

          return Promise.resolve(_temp6 && _temp6.then ? _temp6.then(function () {}) : void 0);
        } catch (e) {
          return Promise.reject(e);
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleSortMove", function (event) {
        var onSortMove = _this.props.onSortMove;

        if (typeof event.preventDefault === 'function' && event.cancelable) {
          event.preventDefault();
        }

        _this.updateHelperPosition(event);

        _this.animateNodes();

        _this.autoscroll();

        if (onSortMove) {
          onSortMove(event);
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleSortEnd", function (event) {
        var _this$props4 = _this.props,
            hideSortableGhost = _this$props4.hideSortableGhost,
            onSortEnd = _this$props4.onSortEnd;
        var _this$manager = _this.manager,
            collection = _this$manager.active.collection,
            isKeySorting = _this$manager.isKeySorting;

        var nodes = _this.manager.getOrderedRefs();

        if (_this.listenerNode) {
          if (isKeySorting) {
            _this.listenerNode.removeEventListener('wheel', _this.handleKeyEnd, true);

            _this.listenerNode.removeEventListener('mousedown', _this.handleKeyEnd, true);

            _this.listenerNode.removeEventListener('keydown', _this.handleKeyDown);
          } else {
            react_sortable_hoc_esm_events.move.forEach(function (eventName) {
              return _this.listenerNode.removeEventListener(eventName, _this.handleSortMove);
            });
            react_sortable_hoc_esm_events.end.forEach(function (eventName) {
              return _this.listenerNode.removeEventListener(eventName, _this.handleSortEnd);
            });
          }
        }

        _this.helper.parentNode.removeChild(_this.helper);

        if (hideSortableGhost && _this.sortableGhost) {
          setInlineStyles(_this.sortableGhost, {
            opacity: '',
            visibility: ''
          });
        }

        for (var i = 0, len = nodes.length; i < len; i++) {
          var _node2 = nodes[i];
          var el = _node2.node;
          _node2.edgeOffset = null;
          _node2.boundingClientRect = null;
          setTranslate3d(el, null);
          setTransitionDuration(el, null);
          _node2.translate = null;
        }

        _this.autoScroller.clear();

        _this.manager.active = null;
        _this.manager.isKeySorting = false;

        _this.setState({
          sorting: false,
          sortingIndex: null
        });

        if (typeof onSortEnd === 'function') {
          onSortEnd({
            collection: collection,
            newIndex: _this.newIndex,
            oldIndex: _this.index,
            isKeySorting: isKeySorting,
            nodes: nodes
          }, event);
        }

        _this.touched = false;
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "autoscroll", function () {
        var disableAutoscroll = _this.props.disableAutoscroll;
        var isKeySorting = _this.manager.isKeySorting;

        if (disableAutoscroll) {
          _this.autoScroller.clear();

          return;
        }

        if (isKeySorting) {
          var translate = _objectSpread({}, _this.translate);

          var scrollX = 0;
          var scrollY = 0;

          if (_this.axis.x) {
            translate.x = Math.min(_this.maxTranslate.x, Math.max(_this.minTranslate.x, _this.translate.x));
            scrollX = _this.translate.x - translate.x;
          }

          if (_this.axis.y) {
            translate.y = Math.min(_this.maxTranslate.y, Math.max(_this.minTranslate.y, _this.translate.y));
            scrollY = _this.translate.y - translate.y;
          }

          _this.translate = translate;
          setTranslate3d(_this.helper, _this.translate);
          _this.scrollContainer.scrollLeft += scrollX;
          _this.scrollContainer.scrollTop += scrollY;
          return;
        }

        _this.autoScroller.update({
          height: _this.height,
          maxTranslate: _this.maxTranslate,
          minTranslate: _this.minTranslate,
          translate: _this.translate,
          width: _this.width
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onAutoScroll", function (offset) {
        _this.translate.x += offset.left;
        _this.translate.y += offset.top;

        _this.animateNodes();
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleKeyDown", function (event) {
        var keyCode = event.keyCode;
        var _this$props5 = _this.props,
            shouldCancelStart = _this$props5.shouldCancelStart,
            _this$props5$keyCodes = _this$props5.keyCodes,
            customKeyCodes = _this$props5$keyCodes === void 0 ? {} : _this$props5$keyCodes;

        var keyCodes = _objectSpread({}, defaultKeyCodes, customKeyCodes);

        if (_this.manager.active && !_this.manager.isKeySorting || !_this.manager.active && (!keyCodes.lift.includes(keyCode) || shouldCancelStart(event) || !_this.isValidSortingTarget(event))) {
          return;
        }

        event.stopPropagation();
        event.preventDefault();

        if (keyCodes.lift.includes(keyCode) && !_this.manager.active) {
          _this.keyLift(event);
        } else if (keyCodes.drop.includes(keyCode) && _this.manager.active) {
          _this.keyDrop(event);
        } else if (keyCodes.cancel.includes(keyCode)) {
          _this.newIndex = _this.manager.active.index;

          _this.keyDrop(event);
        } else if (keyCodes.up.includes(keyCode)) {
          _this.keyMove(-1);
        } else if (keyCodes.down.includes(keyCode)) {
          _this.keyMove(1);
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "keyLift", function (event) {
        var target = event.target;
        var node = closest(target, function (el) {
          return el.sortableInfo != null;
        });
        var _node$sortableInfo2 = node.sortableInfo,
            index = _node$sortableInfo2.index,
            collection = _node$sortableInfo2.collection;
        _this.initialFocusedNode = target;
        _this.manager.isKeySorting = true;
        _this.manager.active = {
          index: index,
          collection: collection
        };

        _this.handlePress(event);
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "keyMove", function (shift) {
        var nodes = _this.manager.getOrderedRefs();

        var lastIndex = nodes[nodes.length - 1].node.sortableInfo.index;
        var newIndex = _this.newIndex + shift;
        var prevIndex = _this.newIndex;

        if (newIndex < 0 || newIndex > lastIndex) {
          return;
        }

        _this.prevIndex = prevIndex;
        _this.newIndex = newIndex;
        var targetIndex = getTargetIndex(_this.newIndex, _this.prevIndex, _this.index);
        var target = nodes.find(function (_ref2) {
          var node = _ref2.node;
          return node.sortableInfo.index === targetIndex;
        });
        var targetNode = target.node;
        var scrollDelta = _this.containerScrollDelta;
        var targetBoundingClientRect = target.boundingClientRect || getScrollAdjustedBoundingClientRect(targetNode, scrollDelta);
        var targetTranslate = target.translate || {
          x: 0,
          y: 0
        };
        var targetPosition = {
          top: targetBoundingClientRect.top + targetTranslate.y - scrollDelta.top,
          left: targetBoundingClientRect.left + targetTranslate.x - scrollDelta.left
        };
        var shouldAdjustForSize = prevIndex < newIndex;
        var sizeAdjustment = {
          x: shouldAdjustForSize && _this.axis.x ? targetNode.offsetWidth - _this.width : 0,
          y: shouldAdjustForSize && _this.axis.y ? targetNode.offsetHeight - _this.height : 0
        };

        _this.handleSortMove({
          pageX: targetPosition.left + sizeAdjustment.x,
          pageY: targetPosition.top + sizeAdjustment.y,
          ignoreTransition: shift === 0
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "keyDrop", function (event) {
        _this.handleSortEnd(event);

        if (_this.initialFocusedNode) {
          _this.initialFocusedNode.focus();
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleKeyEnd", function (event) {
        if (_this.manager.active) {
          _this.keyDrop(event);
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "isValidSortingTarget", function (event) {
        var useDragHandle = _this.props.useDragHandle;
        var target = event.target;
        var node = closest(target, function (el) {
          return el.sortableInfo != null;
        });
        return node && node.sortableInfo && !node.sortableInfo.disabled && (useDragHandle ? isSortableHandle(target) : target.sortableInfo);
      });

      var manager = new react_sortable_hoc_esm_Manager();
      react_sortable_hoc_esm_validateProps(props);
      _this.manager = manager;
      _this.wrappedInstance = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createRef"])();
      _this.sortableContextValue = {
        manager: manager
      };
      _this.events = {
        end: _this.handleEnd,
        move: _this.handleMove,
        start: _this.handleStart
      };
      return _this;
    }

    _createClass(WithSortableContainer, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var useWindowAsScrollContainer = this.props.useWindowAsScrollContainer;
        var container = this.getContainer();
        Promise.resolve(container).then(function (containerNode) {
          _this2.container = containerNode;
          _this2.document = _this2.container.ownerDocument || document;
          var contentWindow = _this2.props.contentWindow || _this2.document.defaultView || window;
          _this2.contentWindow = typeof contentWindow === 'function' ? contentWindow() : contentWindow;
          _this2.scrollContainer = useWindowAsScrollContainer ? _this2.document.scrollingElement || _this2.document.documentElement : getScrollingParent(_this2.container) || _this2.container;
          _this2.autoScroller = new react_sortable_hoc_esm_AutoScroller(_this2.scrollContainer, _this2.onAutoScroll);
          Object.keys(_this2.events).forEach(function (key) {
            return react_sortable_hoc_esm_events[key].forEach(function (eventName) {
              return _this2.container.addEventListener(eventName, _this2.events[key], false);
            });
          });

          _this2.container.addEventListener('keydown', _this2.handleKeyDown);
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var _this3 = this;

        if (this.helper && this.helper.parentNode) {
          this.helper.parentNode.removeChild(this.helper);
        }

        if (!this.container) {
          return;
        }

        Object.keys(this.events).forEach(function (key) {
          return react_sortable_hoc_esm_events[key].forEach(function (eventName) {
            return _this3.container.removeEventListener(eventName, _this3.events[key]);
          });
        });
        this.container.removeEventListener('keydown', this.handleKeyDown);
      }
    }, {
      key: "updateHelperPosition",
      value: function updateHelperPosition(event) {
        var _this$props6 = this.props,
            lockAxis = _this$props6.lockAxis,
            lockOffset = _this$props6.lockOffset,
            lockToContainerEdges = _this$props6.lockToContainerEdges,
            transitionDuration = _this$props6.transitionDuration,
            _this$props6$keyboard = _this$props6.keyboardSortingTransitionDuration,
            keyboardSortingTransitionDuration = _this$props6$keyboard === void 0 ? transitionDuration : _this$props6$keyboard;
        var isKeySorting = this.manager.isKeySorting;
        var ignoreTransition = event.ignoreTransition;
        var offset = react_sortable_hoc_esm_getPosition(event);
        var translate = {
          x: offset.x - this.initialOffset.x,
          y: offset.y - this.initialOffset.y
        };
        translate.y -= window.pageYOffset - this.initialWindowScroll.top;
        translate.x -= window.pageXOffset - this.initialWindowScroll.left;
        this.translate = translate;

        if (lockToContainerEdges) {
          var _getLockPixelOffsets = getLockPixelOffsets({
            height: this.height,
            lockOffset: lockOffset,
            width: this.width
          }),
              _getLockPixelOffsets2 = _slicedToArray(_getLockPixelOffsets, 2),
              minLockOffset = _getLockPixelOffsets2[0],
              maxLockOffset = _getLockPixelOffsets2[1];

          var minOffset = {
            x: this.width / 2 - minLockOffset.x,
            y: this.height / 2 - minLockOffset.y
          };
          var maxOffset = {
            x: this.width / 2 - maxLockOffset.x,
            y: this.height / 2 - maxLockOffset.y
          };
          translate.x = react_sortable_hoc_esm_limit(this.minTranslate.x + minOffset.x, this.maxTranslate.x - maxOffset.x, translate.x);
          translate.y = react_sortable_hoc_esm_limit(this.minTranslate.y + minOffset.y, this.maxTranslate.y - maxOffset.y, translate.y);
        }

        if (lockAxis === 'x') {
          translate.y = 0;
        } else if (lockAxis === 'y') {
          translate.x = 0;
        }

        if (isKeySorting && keyboardSortingTransitionDuration && !ignoreTransition) {
          setTransitionDuration(this.helper, keyboardSortingTransitionDuration);
        }

        setTranslate3d(this.helper, translate);
      }
    }, {
      key: "animateNodes",
      value: function animateNodes() {
        var _this$props7 = this.props,
            transitionDuration = _this$props7.transitionDuration,
            hideSortableGhost = _this$props7.hideSortableGhost,
            onSortOver = _this$props7.onSortOver;
        var containerScrollDelta = this.containerScrollDelta,
            windowScrollDelta = this.windowScrollDelta;
        var nodes = this.manager.getOrderedRefs();
        var sortingOffset = {
          left: this.offsetEdge.left + this.translate.x + containerScrollDelta.left,
          top: this.offsetEdge.top + this.translate.y + containerScrollDelta.top
        };
        var isKeySorting = this.manager.isKeySorting;
        var prevIndex = this.newIndex;
        this.newIndex = null;

        for (var i = 0, len = nodes.length; i < len; i++) {
          var _node3 = nodes[i].node;
          var index = _node3.sortableInfo.index;
          var width = _node3.offsetWidth;
          var height = _node3.offsetHeight;
          var offset = {
            height: this.height > height ? height / 2 : this.height / 2,
            width: this.width > width ? width / 2 : this.width / 2
          };
          var mustShiftBackward = isKeySorting && index > this.index && index <= prevIndex;
          var mustShiftForward = isKeySorting && index < this.index && index >= prevIndex;
          var translate = {
            x: 0,
            y: 0
          };
          var edgeOffset = nodes[i].edgeOffset;

          if (!edgeOffset) {
            edgeOffset = getEdgeOffset(_node3, this.container);
            nodes[i].edgeOffset = edgeOffset;

            if (isKeySorting) {
              nodes[i].boundingClientRect = getScrollAdjustedBoundingClientRect(_node3, containerScrollDelta);
            }
          }

          var nextNode = i < nodes.length - 1 && nodes[i + 1];
          var prevNode = i > 0 && nodes[i - 1];

          if (nextNode && !nextNode.edgeOffset) {
            nextNode.edgeOffset = getEdgeOffset(nextNode.node, this.container);

            if (isKeySorting) {
              nextNode.boundingClientRect = getScrollAdjustedBoundingClientRect(nextNode.node, containerScrollDelta);
            }
          }

          if (index === this.index) {
            if (hideSortableGhost) {
              this.sortableGhost = _node3;
              setInlineStyles(_node3, {
                opacity: 0,
                visibility: 'hidden'
              });
            }

            continue;
          }

          if (transitionDuration) {
            setTransitionDuration(_node3, transitionDuration);
          }

          if (this.axis.x) {
            if (this.axis.y) {
              if (mustShiftForward || index < this.index && (sortingOffset.left + windowScrollDelta.left - offset.width <= edgeOffset.left && sortingOffset.top + windowScrollDelta.top <= edgeOffset.top + offset.height || sortingOffset.top + windowScrollDelta.top + offset.height <= edgeOffset.top)) {
                translate.x = this.width + this.marginOffset.x;

                if (edgeOffset.left + translate.x > this.containerBoundingRect.width - offset.width) {
                  if (nextNode) {
                    translate.x = nextNode.edgeOffset.left - edgeOffset.left;
                    translate.y = nextNode.edgeOffset.top - edgeOffset.top;
                  }
                }

                if (this.newIndex === null) {
                  this.newIndex = index;
                }
              } else if (mustShiftBackward || index > this.index && (sortingOffset.left + windowScrollDelta.left + offset.width >= edgeOffset.left && sortingOffset.top + windowScrollDelta.top + offset.height >= edgeOffset.top || sortingOffset.top + windowScrollDelta.top + offset.height >= edgeOffset.top + height)) {
                translate.x = -(this.width + this.marginOffset.x);

                if (edgeOffset.left + translate.x < this.containerBoundingRect.left + offset.width) {
                  if (prevNode) {
                    translate.x = prevNode.edgeOffset.left - edgeOffset.left;
                    translate.y = prevNode.edgeOffset.top - edgeOffset.top;
                  }
                }

                this.newIndex = index;
              }
            } else {
              if (mustShiftBackward || index > this.index && sortingOffset.left + windowScrollDelta.left + offset.width >= edgeOffset.left) {
                translate.x = -(this.width + this.marginOffset.x);
                this.newIndex = index;
              } else if (mustShiftForward || index < this.index && sortingOffset.left + windowScrollDelta.left <= edgeOffset.left + offset.width) {
                translate.x = this.width + this.marginOffset.x;

                if (this.newIndex == null) {
                  this.newIndex = index;
                }
              }
            }
          } else if (this.axis.y) {
            if (mustShiftBackward || index > this.index && sortingOffset.top + windowScrollDelta.top + offset.height >= edgeOffset.top) {
              translate.y = -(this.height + this.marginOffset.y);
              this.newIndex = index;
            } else if (mustShiftForward || index < this.index && sortingOffset.top + windowScrollDelta.top <= edgeOffset.top + offset.height) {
              translate.y = this.height + this.marginOffset.y;

              if (this.newIndex == null) {
                this.newIndex = index;
              }
            }
          }

          setTranslate3d(_node3, translate);
          nodes[i].translate = translate;
        }

        if (this.newIndex == null) {
          this.newIndex = this.index;
        }

        if (isKeySorting) {
          this.newIndex = prevIndex;
        }

        var oldIndex = isKeySorting ? this.prevIndex : prevIndex;

        if (onSortOver && this.newIndex !== oldIndex) {
          onSortOver({
            collection: this.manager.active.collection,
            index: this.index,
            newIndex: this.newIndex,
            oldIndex: oldIndex,
            isKeySorting: isKeySorting,
            nodes: nodes,
            helper: this.helper
          });
        }
      }
    }, {
      key: "getWrappedInstance",
      value: function getWrappedInstance() {
        browser_default()(config.withRef, 'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableContainer() call');
        return this.wrappedInstance.current;
      }
    }, {
      key: "getContainer",
      value: function getContainer() {
        var getContainer = this.props.getContainer;

        if (typeof getContainer !== 'function') {
          return Object(external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_["findDOMNode"])(this);
        }

        return getContainer(config.withRef ? this.getWrappedInstance() : undefined);
      }
    }, {
      key: "render",
      value: function render() {
        var ref = config.withRef ? this.wrappedInstance : null;
        return Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"])(SortableContext.Provider, {
          value: this.sortableContextValue
        }, Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"])(WrappedComponent, _extends({
          ref: ref
        }, react_sortable_hoc_esm_omit(this.props, omittedProps))));
      }
    }, {
      key: "helperContainer",
      get: function get() {
        var helperContainer = this.props.helperContainer;

        if (typeof helperContainer === 'function') {
          return helperContainer();
        }

        return this.props.helperContainer || this.document.body;
      }
    }, {
      key: "containerScrollDelta",
      get: function get() {
        var useWindowAsScrollContainer = this.props.useWindowAsScrollContainer;

        if (useWindowAsScrollContainer) {
          return {
            left: 0,
            top: 0
          };
        }

        return {
          left: this.scrollContainer.scrollLeft - this.initialScroll.left,
          top: this.scrollContainer.scrollTop - this.initialScroll.top
        };
      }
    }, {
      key: "windowScrollDelta",
      get: function get() {
        return {
          left: this.contentWindow.pageXOffset - this.initialWindowScroll.left,
          top: this.contentWindow.pageYOffset - this.initialWindowScroll.top
        };
      }
    }]);

    return WithSortableContainer;
  }(external_root_React_commonjs2_react_commonjs_react_amd_react_["Component"]), _defineProperty(_class, "displayName", provideDisplayName('sortableList', WrappedComponent)), _defineProperty(_class, "defaultProps", react_sortable_hoc_esm_defaultProps), _defineProperty(_class, "propTypes", propTypes), _temp;
}

var propTypes$1 = {
  index: prop_types_default.a.number.isRequired,
  collection: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  disabled: prop_types_default.a.bool
};
var omittedProps$1 = Object.keys(propTypes$1);
function sortableElement(WrappedComponent) {
  var _class, _temp;

  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    withRef: false
  };
  return _temp = _class = function (_React$Component) {
    _inherits(WithSortableElement, _React$Component);

    function WithSortableElement() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, WithSortableElement);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WithSortableElement)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "wrappedInstance", Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createRef"])());

      return _this;
    }

    _createClass(WithSortableElement, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.register();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.node) {
          if (prevProps.index !== this.props.index) {
            this.node.sortableInfo.index = this.props.index;
          }

          if (prevProps.disabled !== this.props.disabled) {
            this.node.sortableInfo.disabled = this.props.disabled;
          }
        }

        if (prevProps.collection !== this.props.collection) {
          this.unregister(prevProps.collection);
          this.register();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.unregister();
      }
    }, {
      key: "register",
      value: function register() {
        var _this$props = this.props,
            collection = _this$props.collection,
            disabled = _this$props.disabled,
            index = _this$props.index;
        var node = Object(external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_["findDOMNode"])(this);
        node.sortableInfo = {
          collection: collection,
          disabled: disabled,
          index: index,
          manager: this.context.manager
        };
        this.node = node;
        this.ref = {
          node: node
        };
        this.context.manager.add(collection, this.ref);
      }
    }, {
      key: "unregister",
      value: function unregister() {
        var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.collection;
        this.context.manager.remove(collection, this.ref);
      }
    }, {
      key: "getWrappedInstance",
      value: function getWrappedInstance() {
        browser_default()(config.withRef, 'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableElement() call');
        return this.wrappedInstance.current;
      }
    }, {
      key: "render",
      value: function render() {
        var ref = config.withRef ? this.wrappedInstance : null;
        return Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"])(WrappedComponent, _extends({
          ref: ref
        }, react_sortable_hoc_esm_omit(this.props, omittedProps$1)));
      }
    }]);

    return WithSortableElement;
  }(external_root_React_commonjs2_react_commonjs_react_amd_react_["Component"]), _defineProperty(_class, "displayName", provideDisplayName('sortableElement', WrappedComponent)), _defineProperty(_class, "contextType", SortableContext), _defineProperty(_class, "propTypes", propTypes$1), _defineProperty(_class, "defaultProps", {
    collection: 0
  }), _temp;
}



// CONCATENATED MODULE: ./tagInput/index.tsx
























const tagInput_SortableItem = sortableElement(props => props.item);
const tagInput_SortableList = sortableContainer(_ref => {
  let {
    items
  } = _ref;
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    style: {
      display: 'flex',
      flexFlow: 'row wrap'
    }
  }, map_default()(items).call(items, (item, index) =>
  /*#__PURE__*/
  // @ts-ignore skip SortableItem type check
  external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tagInput_SortableItem, {
    key: item.key,
    index: index,
    item: item.item
  })));
});
const tagInput_prefixCls = tagInput_constants_cssClasses.PREFIX;

class tagInput_TagInput extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.handleInputChange = e => {
      this.foundation.handleInputChange(e);
    };

    this.handleKeyDown = e => {
      this.foundation.handleKeyDown(e);
    };

    this.handleInputFocus = e => {
      this.foundation.handleInputFocus(e);
    };

    this.handleInputBlur = e => {
      this.foundation.handleInputBlur(e);
    };

    this.handleClearBtn = e => {
      this.foundation.handleClearBtn(e);
    };
    /* istanbul ignore next */


    this.handleClearEnterPress = e => {
      this.foundation.handleClearEnterPress(e);
    };

    this.handleTagClose = idx => {
      this.foundation.handleTagClose(idx);
    };

    this.handleInputMouseLeave = e => {
      this.foundation.handleInputMouseLeave();
    };

    this.handleClick = e => {
      this.foundation.handleClick(e);
    };

    this.handleInputMouseEnter = e => {
      this.foundation.handleInputMouseEnter();
    };

    this.handleClickPrefixOrSuffix = e => {
      this.foundation.handleClickPrefixOrSuffix(e);
    };

    this.handlePreventMouseDown = e => {
      this.foundation.handlePreventMouseDown(e);
    };

    this.getAllTags = () => {
      var _context;

      const {
        size,
        disabled,
        renderTagItem,
        showContentTooltip,
        draggable
      } = this.props;
      const {
        tagsArray,
        active
      } = this.state;
      const showIconHandler = active && draggable;
      const tagCls = classnames_default()("".concat(tagInput_prefixCls, "-wrapper-tag"), {
        [concat_default()(_context = "".concat(tagInput_prefixCls, "-wrapper-tag-size-")).call(_context, size)]: size,
        ["".concat(tagInput_prefixCls, "-wrapper-tag-icon")]: showIconHandler
      });
      const typoCls = classnames_default()("".concat(tagInput_prefixCls, "-wrapper-typo"), {
        ["".concat(tagInput_prefixCls, "-wrapper-typo-disabled")]: disabled
      });
      const itemWrapperCls = classnames_default()({
        ["".concat(tagInput_prefixCls, "-drag-item")]: showIconHandler,
        ["".concat(tagInput_prefixCls, "-wrapper-tag-icon")]: showIconHandler
      });
      const DragHandle = sortableHandle(() => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconHandle, {
        className: "".concat(tagInput_prefixCls, "-drag-handler")
      }));
      return map_default()(tagsArray).call(tagsArray, (value, index) => {
        var _context2;

        const elementKey = showIconHandler ? value : concat_default()(_context2 = "".concat(index)).call(_context2, value);

        if (isFunction_default()(renderTagItem)) {
          return showIconHandler ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
            className: itemWrapperCls,
            key: elementKey
          }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(DragHandle, null), renderTagItem(value, index)) : renderTagItem(value, index);
        } else {
          var _context3;

          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tag_Tag, {
            className: tagCls,
            color: "white",
            size: size === 'small' ? 'small' : 'large',
            type: "light",
            onClose: () => {
              !disabled && this.handleTagClose(index);
            },
            closable: !disabled,
            key: elementKey,
            visible: true,
            "aria-label": concat_default()(_context3 = "".concat(!disabled ? 'Closable ' : '', "Tag: ")).call(_context3, value)
          }, showIconHandler && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(DragHandle, null), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(paragraph_Paragraph, {
            className: typoCls,
            ellipsis: {
              showTooltip: showContentTooltip,
              rows: 1
            }
          }, value));
        }
      });
    };

    this.onSortEnd = callbackProps => {
      this.foundation.handleSortEnd(callbackProps);
    };

    this.foundation = new tagInput_foundation(this.adapter);
    this.state = {
      tagsArray: props.defaultValue || [],
      inputValue: '',
      focusing: false,
      hovering: false,
      active: false
    };
    this.inputRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.tagInputRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.clickOutsideHandler = null;
  }

  static getDerivedStateFromProps(nextProps, prevState) {
    const {
      value,
      inputValue
    } = nextProps;
    const {
      tagsArray: prevTagsArray
    } = prevState;
    let tagsArray;

    if (isArray_default()(value)) {
      tagsArray = value;
    } else if ('value' in nextProps && !value) {
      tagsArray = [];
    } else {
      tagsArray = prevTagsArray;
    }

    return {
      tagsArray,
      inputValue: isString_default()(inputValue) ? inputValue : prevState.inputValue
    };
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      setInputValue: inputValue => {
        this.setState({
          inputValue
        });
      },
      setTagsArray: tagsArray => {
        this.setState({
          tagsArray
        });
      },
      setFocusing: focusing => {
        this.setState({
          focusing
        });
      },
      toggleFocusing: isFocus => {
        const {
          preventScroll
        } = this.props;
        const input = this.inputRef && this.inputRef.current;

        if (isFocus) {
          input && input.focus({
            preventScroll
          });
        } else {
          input && input.blur();
        }

        this.setState({
          focusing: isFocus
        });
      },
      setHovering: hovering => {
        this.setState({
          hovering
        });
      },
      setActive: active => {
        this.setState({
          active
        });
      },
      getClickOutsideHandler: () => {
        return this.clickOutsideHandler;
      },
      notifyBlur: e => {
        this.props.onBlur(e);
      },
      notifyFocus: e => {
        this.props.onFocus(e);
      },
      notifyInputChange: (v, e) => {
        this.props.onInputChange(v, e);
      },
      notifyTagChange: v => {
        this.props.onChange(v);
      },
      notifyTagAdd: v => {
        this.props.onAdd(v);
      },
      notifyTagRemove: (v, idx) => {
        this.props.onRemove(v, idx);
      },
      notifyKeyDown: e => {
        this.props.onKeyDown(e);
      },
      registerClickOutsideHandler: cb => {
        const clickOutsideHandler = e => {
          const tagInputDom = this.tagInputRef && this.tagInputRef.current;
          const target = e.target;

          if (tagInputDom && !tagInputDom.contains(target)) {
            cb(e);
          }
        };

        this.clickOutsideHandler = clickOutsideHandler;
        document.addEventListener('click', clickOutsideHandler, false);
      },
      unregisterClickOutsideHandler: () => {
        document.removeEventListener('click', this.clickOutsideHandler, false);
        this.clickOutsideHandler = null;
      }
    });
  }

  componentDidMount() {
    const {
      disabled,
      autoFocus,
      preventScroll
    } = this.props;

    if (!disabled && autoFocus) {
      this.inputRef.current.focus({
        preventScroll
      });
      this.foundation.handleClick();
    }

    this.foundation.init();
  }

  renderClearBtn() {
    const {
      hovering,
      tagsArray,
      inputValue
    } = this.state;
    const {
      showClear,
      disabled
    } = this.props;
    const clearCls = classnames_default()("".concat(tagInput_prefixCls, "-clearBtn"), {
      ["".concat(tagInput_prefixCls, "-clearBtn-invisible")]: !hovering || inputValue === '' && tagsArray.length === 0 || disabled
    });

    if (showClear) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "button",
        tabIndex: 0,
        "aria-label": "Clear TagInput value",
        className: clearCls,
        onClick: e => this.handleClearBtn(e),
        onKeyPress: e => this.handleClearEnterPress(e)
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClear, null));
    }

    return null;
  }

  renderPrefix() {
    const {
      prefix,
      insetLabel,
      insetLabelId
    } = this.props;
    const labelNode = prefix || insetLabel;

    if (isNull_default()(labelNode) || isUndefined_default()(labelNode)) {
      return null;
    }

    const prefixWrapperCls = classnames_default()("".concat(tagInput_prefixCls, "-prefix"), {
      ["".concat(tagInput_prefixCls, "-inset-label")]: insetLabel,
      ["".concat(tagInput_prefixCls, "-prefix-text")]: labelNode && isString_default()(labelNode),
      // eslint-disable-next-line max-len
      ["".concat(tagInput_prefixCls, "-prefix-icon")]: Object(_utils["e" /* isSemiIcon */])(labelNode)
    });
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/no-static-element-interactions,jsx-a11y/click-events-have-key-events
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: prefixWrapperCls,
        onMouseDown: this.handlePreventMouseDown,
        onClick: this.handleClickPrefixOrSuffix,
        id: insetLabelId,
        "x-semi-prop": "prefix"
      }, labelNode)
    );
  }

  renderSuffix() {
    const {
      suffix
    } = this.props;

    if (isNull_default()(suffix) || isUndefined_default()(suffix)) {
      return null;
    }

    const suffixWrapperCls = classnames_default()("".concat(tagInput_prefixCls, "-suffix"), {
      ["".concat(tagInput_prefixCls, "-suffix-text")]: suffix && isString_default()(suffix),
      // eslint-disable-next-line max-len
      ["".concat(tagInput_prefixCls, "-suffix-icon")]: Object(_utils["e" /* isSemiIcon */])(suffix)
    });
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: suffixWrapperCls,
        onMouseDown: this.handlePreventMouseDown,
        onClick: this.handleClickPrefixOrSuffix,
        "x-semi-prop": "suffix"
      }, suffix)
    );
  }

  renderTags() {
    const {
      disabled,
      maxTagCount,
      showRestTagsPopover,
      restTagsPopoverProps = {},
      draggable,
      expandRestTagsOnClick
    } = this.props;
    const {
      tagsArray,
      active
    } = this.state;
    const restTagsCls = classnames_default()("".concat(tagInput_prefixCls, "-wrapper-n"), {
      ["".concat(tagInput_prefixCls, "-wrapper-n-disabled")]: disabled
    });
    const allTags = this.getAllTags();
    let restTags = [];
    let tags = [...allTags];

    if ((!active || !expandRestTagsOnClick) && maxTagCount && maxTagCount < allTags.length) {
      tags = slice_default()(allTags).call(allTags, 0, maxTagCount);
      restTags = slice_default()(allTags).call(allTags, maxTagCount);
    }

    const restTagsContent = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: restTagsCls
    }, "+", tagsArray.length - maxTagCount);

    const sortableListItems = map_default()(allTags).call(allTags, (item, index) => ({
      item: item,
      key: tagsArray[index]
    }));

    if (active && draggable && sortableListItems.length > 0) {
      // @ts-ignore skip SortableItem type check
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tagInput_SortableList, {
        useDragHandle: true,
        items: sortableListItems,
        onSortEnd: this.onSortEnd,
        axis: "xy"
      });
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, tags, restTags.length > 0 && (showRestTagsPopover ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(popover_0, assign_default()({
      content: restTags,
      showArrow: true,
      trigger: "hover",
      position: "top",
      autoAdjustOverflow: true
    }, restTagsPopoverProps), restTagsContent) : restTagsContent));
  }

  blur() {
    this.inputRef.current.blur(); // unregister clickOutside event 

    this.foundation.clickOutsideCallBack();
  }

  focus() {
    const {
      preventScroll,
      disabled
    } = this.props;
    this.inputRef.current.focus({
      preventScroll
    });

    if (!disabled) {
      // register clickOutside event 
      this.foundation.handleClick();
    }
  }

  render() {
    const {
      size,
      style,
      className,
      disabled,
      placeholder,
      validateStatus
    } = this.props;
    const {
      focusing,
      hovering,
      tagsArray,
      inputValue,
      active
    } = this.state;
    const tagInputCls = classnames_default()(tagInput_prefixCls, className, {
      ["".concat(tagInput_prefixCls, "-focus")]: focusing || active,
      ["".concat(tagInput_prefixCls, "-disabled")]: disabled,
      ["".concat(tagInput_prefixCls, "-hover")]: hovering && !disabled,
      ["".concat(tagInput_prefixCls, "-error")]: validateStatus === 'error',
      ["".concat(tagInput_prefixCls, "-warning")]: validateStatus === 'warning'
    });
    const inputCls = classnames_default()("".concat(tagInput_prefixCls, "-wrapper-input"));
    const wrapperCls = classnames_default()("".concat(tagInput_prefixCls, "-wrapper"));
    return (
      /*#__PURE__*/
      // eslint-disable-next-line 
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        ref: this.tagInputRef,
        style: style,
        className: tagInputCls,
        "aria-disabled": disabled,
        "aria-label": this.props['aria-label'],
        "aria-invalid": validateStatus === 'error',
        onMouseEnter: e => {
          this.handleInputMouseEnter(e);
        },
        onMouseLeave: e => {
          this.handleInputMouseLeave(e);
        },
        onClick: e => {
          this.handleClick(e);
        }
      }, this.renderPrefix(), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: wrapperCls
      }, this.renderTags(), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(input_0, {
        "aria-label": 'input value',
        ref: this.inputRef,
        className: inputCls,
        disabled: disabled,
        value: inputValue,
        size: size,
        placeholder: tagsArray.length === 0 ? placeholder : '',
        onKeyDown: e => {
          this.handleKeyDown(e);
        },
        onChange: (v, e) => {
          this.handleInputChange(e);
        },
        onBlur: e => {
          this.handleInputBlur(e);
        },
        onFocus: e => {
          this.handleInputFocus(e);
        }
      })), this.renderClearBtn(), this.renderSuffix())
    );
  }

}

tagInput_TagInput.propTypes = {
  children: prop_types_default.a.node,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  disabled: prop_types_default.a.bool,
  allowDuplicates: prop_types_default.a.bool,
  max: prop_types_default.a.number,
  maxTagCount: prop_types_default.a.number,
  maxLength: prop_types_default.a.number,
  showRestTagsPopover: prop_types_default.a.bool,
  restTagsPopoverProps: prop_types_default.a.object,
  showContentTooltip: prop_types_default.a.bool,
  defaultValue: prop_types_default.a.array,
  value: prop_types_default.a.array,
  inputValue: prop_types_default.a.string,
  placeholder: prop_types_default.a.string,
  separator: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.array]),
  showClear: prop_types_default.a.bool,
  addOnBlur: prop_types_default.a.bool,
  draggable: prop_types_default.a.bool,
  expandRestTagsOnClick: prop_types_default.a.bool,
  autoFocus: prop_types_default.a.bool,
  renderTagItem: prop_types_default.a.func,
  onBlur: prop_types_default.a.func,
  onFocus: prop_types_default.a.func,
  onChange: prop_types_default.a.func,
  onInputChange: prop_types_default.a.func,
  onExceed: prop_types_default.a.func,
  onInputExceed: prop_types_default.a.func,
  onAdd: prop_types_default.a.func,
  onRemove: prop_types_default.a.func,
  onKeyDown: prop_types_default.a.func,
  size: prop_types_default.a.oneOf(tagInput_constants_strings.SIZE_SET),
  validateStatus: prop_types_default.a.oneOf(tagInput_constants_strings.STATUS),
  prefix: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node]),
  suffix: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node]),
  'aria-label': prop_types_default.a.string,
  preventScroll: prop_types_default.a.bool
};
tagInput_TagInput.defaultProps = {
  showClear: false,
  addOnBlur: false,
  allowDuplicates: true,
  showRestTagsPopover: true,
  autoFocus: false,
  draggable: false,
  expandRestTagsOnClick: true,
  showContentTooltip: true,
  separator: ',',
  size: 'default',
  validateStatus: 'default',
  onBlur: noop_default.a,
  onFocus: noop_default.a,
  onChange: noop_default.a,
  onInputChange: noop_default.a,
  onExceed: noop_default.a,
  onInputExceed: noop_default.a,
  onAdd: noop_default.a,
  onRemove: noop_default.a,
  onKeyDown: noop_default.a
};
/* harmony default export */ var tagInput_0 = (tagInput_TagInput);
// CONCATENATED MODULE: ./cascader/index.tsx





































const cascader_prefixcls = cascader_constants_cssClasses.PREFIX;
const resetkey = 0;

class cascader_Cascader extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.handleInputChange = value => {
      this.foundation.handleInputChange(value);
    };

    this.handleTagRemove = (e, tagValuePath) => {
      this.foundation.handleTagRemove(e, tagValuePath);
    };

    this.renderTagItem = (value, idx, type) => {
      const {
        keyEntities,
        disabledKeys
      } = this.state;
      const {
        size,
        disabled,
        displayProp,
        displayRender,
        disableStrictly
      } = this.props;
      const nodeKey = type === cascader_constants_strings.IS_VALUE ? util_findKeysForValues(value, keyEntities)[0] : value;
      const isDsiabled = disabled || keyEntities[nodeKey].data.disabled || disableStrictly && disabledKeys.has(nodeKey);

      if (!isEmpty_default()(keyEntities) && !isEmpty_default()(keyEntities[nodeKey])) {
        const tagCls = classnames_default()("".concat(cascader_prefixcls, "-selection-tag"), {
          ["".concat(cascader_prefixcls, "-selection-tag-disabled")]: isDsiabled
        }); // custom render tags

        if (isFunction_default()(displayRender)) {
          return displayRender(keyEntities[nodeKey], idx); // default render tags
        } else {
          var _context;

          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tag_Tag, {
            size: size === 'default' ? 'large' : size,
            key: concat_default()(_context = "tag-".concat(nodeKey, "-")).call(_context, idx),
            color: "white",
            className: tagCls,
            closable: true,
            onClose: (tagChildren, e) => {
              // When value has not changed, prevent clicking tag closeBtn to close tag
              e.preventDefault();
              this.handleTagRemove(e, keyEntities[nodeKey].valuePath);
            }
          }, keyEntities[nodeKey].data[displayProp]);
        }
      }

      return null;
    };

    this.handleItemClick = (e, item) => {
      this.foundation.handleItemClick(e, item);
    };

    this.handleItemHover = (e, item) => {
      this.foundation.handleItemHover(e, item);
    };

    this.onItemCheckboxClick = item => {
      this.foundation.onItemCheckboxClick(item);
    };

    this.handleListScroll = (e, ind) => {
      this.foundation.handleListScroll(e, ind);
    };

    this.renderContent = () => {
      const {
        inputValue,
        isSearching,
        activeKeys,
        selectedKeys,
        checkedKeys,
        halfCheckedKeys,
        loadedKeys,
        loadingKeys
      } = this.state;
      const {
        filterTreeNode,
        dropdownClassName,
        dropdownStyle,
        loadData,
        emptyContent,
        separator,
        topSlot,
        bottomSlot,
        showNext,
        multiple
      } = this.props;
      const searchable = Boolean(filterTreeNode) && isSearching;
      const popoverCls = classnames_default()(dropdownClassName, "".concat(cascader_prefixcls, "-popover"));
      const renderData = this.foundation.getRenderData();
      const content = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: popoverCls,
        role: "listbox",
        style: dropdownStyle
      }, topSlot, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(item_Item, {
        activeKeys: activeKeys,
        selectedKeys: selectedKeys,
        separator: separator,
        loadedKeys: loadedKeys,
        loadingKeys: loadingKeys,
        onItemClick: this.handleItemClick,
        onItemHover: this.handleItemHover,
        showNext: showNext,
        onItemCheckboxClick: this.onItemCheckboxClick,
        onListScroll: this.handleListScroll,
        searchable: searchable,
        keyword: inputValue,
        emptyContent: emptyContent,
        loadData: loadData,
        data: renderData,
        multiple: multiple,
        checkedKeys: checkedKeys,
        halfCheckedKeys: halfCheckedKeys
      }), bottomSlot);
      return content;
    };

    this.renderPlusN = hiddenTag => {
      const {
        disabled,
        showRestTagsPopover,
        restTagsPopoverProps
      } = this.props;
      const plusNCls = classnames_default()("".concat(cascader_prefixcls, "-selection-n"), {
        ["".concat(cascader_prefixcls, "-selection-n-disabled")]: disabled
      });
      const renderPlusNChildren = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: plusNCls
      }, "+", hiddenTag.length);
      return showRestTagsPopover && !disabled ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(popover_0, assign_default()({
        content: hiddenTag,
        showArrow: true,
        trigger: "hover",
        position: "top",
        autoAdjustOverflow: true
      }, restTagsPopoverProps), renderPlusNChildren) : renderPlusNChildren;
    };

    this.renderMultipleTags = () => {
      var _context2;

      const {
        autoMergeValue,
        maxTagCount
      } = this.props;
      const {
        checkedKeys,
        resolvedCheckedKeys
      } = this.state;
      const realKeys = this.mergeType === cascader_constants_strings.NONE_MERGE_TYPE ? checkedKeys : resolvedCheckedKeys;
      const displayTag = [];
      const hiddenTag = [];

      for_each_default()(_context2 = [...realKeys]).call(_context2, (checkedKey, idx) => {
        const notExceedMaxTagCount = !isNumber_default()(maxTagCount) || maxTagCount >= idx + 1;
        const item = this.renderTagItem(checkedKey, idx, cascader_constants_strings.IS_KEY);

        if (notExceedMaxTagCount) {
          displayTag.push(item);
        } else {
          hiddenTag.push(item);
        }
      });

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, displayTag, !isEmpty_default()(hiddenTag) && this.renderPlusN(hiddenTag));
    };

    this.renderDisplayText = () => {
      const {
        displayProp,
        separator,
        displayRender
      } = this.props;
      const {
        selectedKeys
      } = this.state;
      let displayText = '';

      if (selectedKeys.size) {
        const displayPath = this.foundation.getItemPropPath([...selectedKeys][0], displayProp);

        if (displayRender && typeof displayRender === 'function') {
          displayText = displayRender(displayPath);
        } else {
          displayText = map_default()(displayPath).call(displayPath, (path, index) => {
            var _context3;

            return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
              key: concat_default()(_context3 = "".concat(path, "-")).call(_context3, index)
            }, index < displayPath.length - 1 ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, path, separator) : path);
          });
        }
      }

      return displayText;
    };

    this.renderSelectContent = () => {
      const {
        placeholder,
        filterTreeNode,
        multiple
      } = this.props;
      const {
        checkedKeys
      } = this.state;
      const searchable = Boolean(filterTreeNode);

      if (!searchable) {
        if (multiple) {
          if (isEmpty_default()(checkedKeys)) {
            return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
              className: "".concat(cascader_prefixcls, "-selection-placeholder")
            }, placeholder);
          }

          return this.renderMultipleTags();
        } else {
          const displayText = this.renderDisplayText();
          const spanCls = classnames_default()({
            ["".concat(cascader_prefixcls, "-selection-placeholder")]: !displayText
          });
          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
            className: spanCls
          }, displayText ? displayText : placeholder);
        }
      }

      const input = multiple ? this.renderTagInput() : this.renderInput();
      return input;
    };

    this.renderSuffix = () => {
      const {
        suffix
      } = this.props;
      const suffixWrapperCls = classnames_default()({
        ["".concat(cascader_prefixcls, "-suffix")]: true,
        ["".concat(cascader_prefixcls, "-suffix-text")]: suffix && isString_default()(suffix),
        ["".concat(cascader_prefixcls, "-suffix-icon")]: Object(_utils["e" /* isSemiIcon */])(suffix)
      });
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: suffixWrapperCls,
        "x-semi-prop": "suffix"
      }, suffix);
    };

    this.renderPrefix = () => {
      const {
        prefix,
        insetLabel,
        insetLabelId
      } = this.props;
      const labelNode = prefix || insetLabel;
      const prefixWrapperCls = classnames_default()({
        ["".concat(cascader_prefixcls, "-prefix")]: true,
        // to be doublechecked
        ["".concat(cascader_prefixcls, "-inset-label")]: insetLabel,
        ["".concat(cascader_prefixcls, "-prefix-text")]: labelNode && isString_default()(labelNode),
        ["".concat(cascader_prefixcls, "-prefix-icon")]: Object(_utils["e" /* isSemiIcon */])(labelNode)
      });
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: prefixWrapperCls,
        id: insetLabelId,
        "x-semi-prop": "prefix,insetLabel"
      }, labelNode);
    };

    this.renderCustomTrigger = () => {
      const {
        disabled,
        triggerRender,
        multiple
      } = this.props;
      const {
        selectedKeys,
        inputValue,
        inputPlaceHolder,
        resolvedCheckedKeys,
        checkedKeys
      } = this.state;
      let realValue;

      if (multiple) {
        if (this.mergeType === cascader_constants_strings.NONE_MERGE_TYPE) {
          realValue = checkedKeys;
        } else {
          realValue = resolvedCheckedKeys;
        }
      } else {
        realValue = [...selectedKeys][0];
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(trigger_0, {
        value: realValue,
        inputValue: inputValue,
        onChange: this.handleInputChange,
        onClear: this.handleClear,
        placeholder: inputPlaceHolder,
        disabled: disabled,
        triggerRender: triggerRender,
        componentName: 'Cascader',
        componentProps: assign_default()({}, this.props)
      });
    };

    this.handleMouseOver = () => {
      this.foundation.toggleHoverState(true);
    };

    this.handleMouseLeave = () => {
      this.foundation.toggleHoverState(false);
    };

    this.handleClear = e => {
      e && e.stopPropagation();
      this.foundation.handleClear();
    };
    /**
     * A11y: simulate clear button click
     */

    /* istanbul ignore next */


    this.handleClearEnterPress = e => {
      e && e.stopPropagation();
      this.foundation.handleClearEnterPress(e);
    };

    this.showClearBtn = () => {
      const {
        showClear,
        disabled,
        multiple
      } = this.props;
      const {
        selectedKeys,
        isOpen,
        isHovering,
        checkedKeys
      } = this.state;
      const hasValue = selectedKeys.size;
      const multipleWithHaveValue = multiple && checkedKeys.size;
      return showClear && (hasValue || multipleWithHaveValue) && !disabled && (isOpen || isHovering);
    };

    this.renderClearBtn = () => {
      const clearCls = classnames_default()("".concat(cascader_prefixcls, "-clearbtn"));
      const allowClear = this.showClearBtn();

      if (allowClear) {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          className: clearCls,
          onClick: this.handleClear,
          onKeyPress: this.handleClearEnterPress,
          role: "button",
          tabIndex: 0
        }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClear, null));
      }

      return null;
    };

    this.renderArrow = () => {
      const {
        arrowIcon
      } = this.props;
      const showClearBtn = this.showClearBtn();

      if (showClearBtn) {
        return null;
      }

      return arrowIcon ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: classnames_default()("".concat(cascader_prefixcls, "-arrow")),
        "x-semi-prop": "arrowIcon"
      }, arrowIcon) : null;
    };

    this.renderSelection = () => {
      const {
        disabled,
        multiple,
        filterTreeNode,
        style,
        size,
        className,
        validateStatus,
        prefix,
        suffix,
        insetLabel,
        triggerRender,
        showClear,
        id
      } = this.props;
      const {
        isOpen,
        isFocus,
        isInput,
        checkedKeys
      } = this.state;
      const filterable = Boolean(filterTreeNode);
      const useCustomTrigger = typeof triggerRender === 'function';
      const classNames = useCustomTrigger ? classnames_default()(className) : classnames_default()(cascader_prefixcls, className, {
        ["".concat(cascader_prefixcls, "-focus")]: isFocus || isOpen && !isInput,
        ["".concat(cascader_prefixcls, "-disabled")]: disabled,
        ["".concat(cascader_prefixcls, "-single")]: true,
        ["".concat(cascader_prefixcls, "-filterable")]: filterable,
        ["".concat(cascader_prefixcls, "-error")]: validateStatus === 'error',
        ["".concat(cascader_prefixcls, "-warning")]: validateStatus === 'warning',
        ["".concat(cascader_prefixcls, "-small")]: size === 'small',
        ["".concat(cascader_prefixcls, "-large")]: size === 'large',
        ["".concat(cascader_prefixcls, "-with-prefix")]: prefix || insetLabel,
        ["".concat(cascader_prefixcls, "-with-suffix")]: suffix
      });
      const mouseEvent = showClear ? {
        onMouseEnter: () => this.handleMouseOver(),
        onMouseLeave: () => this.handleMouseLeave()
      } : {};
      const sectionCls = classnames_default()("".concat(cascader_prefixcls, "-selection"), {
        ["".concat(cascader_prefixcls, "-selection-multiple")]: multiple && !isEmpty_default()(checkedKeys)
      });
      const inner = useCustomTrigger ? this.renderCustomTrigger() : [/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
        key: 'prefix'
      }, prefix || insetLabel ? this.renderPrefix() : null), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
        key: 'selection'
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: sectionCls
      }, this.renderSelectContent())), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
        key: 'clearbtn'
      }, this.renderClearBtn()), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
        key: 'suffix'
      }, suffix ? this.renderSuffix() : null), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
        key: 'arrow'
      }, this.renderArrow())];
      /**
       * Reasons for disabling the a11y eslint rule:
       * The following attributes(aria-controls,aria-expanded) will be automatically added by Tooltip, no need to declare here
       */

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
        className: classNames,
        style: style,
        ref: this.triggerRef,
        onClick: e => this.foundation.handleClick(e),
        onKeyPress: e => this.foundation.handleSelectionEnterPress(e),
        "aria-invalid": this.props['aria-invalid'],
        "aria-errormessage": this.props['aria-errormessage'],
        "aria-label": this.props['aria-label'],
        "aria-labelledby": this.props['aria-labelledby'],
        "aria-describedby": this.props['aria-describedby'],
        "aria-required": this.props['aria-required'],
        id: id
      }, mouseEvent, {
        // eslint-disable-next-line jsx-a11y/role-has-required-aria-props
        role: "combobox",
        tabIndex: 0
      }), inner);
    };

    this.state = {
      disabledKeys: new set_default.a(),
      isOpen: props.defaultOpen,

      /* By changing rePosKey, the dropdown position can be refreshed */
      rePosKey: resetkey,

      /* A data structure for storing cascader data items */
      keyEntities: {},

      /* Selected and show tick icon */
      selectedKeys: new set_default.a([]),

      /* The key of the activated node */
      activeKeys: new set_default.a([]),

      /* The key of the filtered node */
      filteredKeys: new set_default.a([]),

      /* Value of input box */
      inputValue: '',

      /* Is searching */
      isSearching: false,

      /* The placeholder of input box */
      inputPlaceHolder: props.searchPlaceholder || props.placeholder,

      /* Cache props */
      prevProps: {},

      /* Is hovering */
      isHovering: false,

      /* Key of checked node, when multiple */
      checkedKeys: new set_default.a([]),

      /* Key of half checked node, when multiple */
      halfCheckedKeys: new set_default.a([]),

      /* Auto merged checkedKeys or leaf checkedKeys, when multiple */
      resolvedCheckedKeys: new set_default.a([]),

      /* Keys of loaded item */
      loadedKeys: new set_default.a(),

      /* Keys of loading item */
      loadingKeys: new set_default.a(),

      /* Mark whether this rendering has triggered asynchronous loading of data */
      loading: false,
      showInput: false
    };
    this.options = {};
    this.isEmpty = false;
    this.mergeType = calcMergeType(props.autoMergeValue, props.leafOnly);
    this.inputRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.triggerRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.optionsRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.clickOutsideHandler = null;
    this.foundation = new foundation_CascaderFoundation(this.adapter);
  }

  get adapter() {
    var _this = this;

    const filterAdapter = {
      updateInputValue: value => {
        this.setState({
          inputValue: value
        });
      },
      updateInputPlaceHolder: value => {
        this.setState({
          inputPlaceHolder: value
        });
      },
      focusInput: () => {
        const {
          preventScroll
        } = this.props;

        if (this.inputRef && this.inputRef.current) {
          // TODO: check the reason
          this.inputRef.current.focus({
            preventScroll
          });
        }
      }
    };
    const cascaderAdapter = {
      registerClickOutsideHandler: cb => {
        const clickOutsideHandler = e => {
          const optionInstance = this.optionsRef && this.optionsRef.current;
          const triggerDom = this.triggerRef && this.triggerRef.current;
          const optionsDom = external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default.a.findDOMNode(optionInstance);
          const target = e.target;

          if (optionsDom && (!optionsDom.contains(target) || !optionsDom.contains(target.parentNode)) && triggerDom && !triggerDom.contains(target)) {
            cb(e);
          }
        };

        this.clickOutsideHandler = clickOutsideHandler;
        document.addEventListener('mousedown', clickOutsideHandler, false);
      },
      unregisterClickOutsideHandler: () => {
        document.removeEventListener('mousedown', this.clickOutsideHandler, false);
      },
      rePositionDropdown: () => {
        let {
          rePosKey
        } = this.state;
        rePosKey = rePosKey + 1;
        this.setState({
          rePosKey
        });
      }
    };
    return assign_default()(assign_default()(assign_default()(assign_default()({}, super.adapter), filterAdapter), cascaderAdapter), {
      updateStates: states => {
        this.setState(assign_default()({}, states));
      },
      openMenu: () => {
        this.setState({
          isOpen: true
        });
      },
      closeMenu: cb => {
        this.setState({
          isOpen: false
        }, () => {
          cb && cb();
        });
      },
      updateSelection: selectedKeys => this.setState({
        selectedKeys
      }),
      notifyChange: value => {
        this.props.onChange && this.props.onChange(value);
      },
      notifySelect: selected => {
        this.props.onSelect && this.props.onSelect(selected);
      },
      notifyOnSearch: input => {
        this.props.onSearch && this.props.onSearch(input);
      },
      notifyFocus: function () {
        _this.props.onFocus && _this.props.onFocus(...arguments);
      },
      notifyBlur: function () {
        _this.props.onBlur && _this.props.onBlur(...arguments);
      },
      notifyDropdownVisibleChange: visible => {
        this.props.onDropdownVisibleChange(visible);
      },
      toggleHovering: bool => {
        this.setState({
          isHovering: bool
        });
      },
      notifyLoadData: (selectedOpt, callback) => {
        const {
          loadData
        } = this.props;

        if (loadData) {
          new promise_default.a(resolve => {
            loadData(selectedOpt).then(() => {
              callback();
              this.setState({
                loading: false
              });
              resolve();
            });
          });
        }
      },
      notifyOnLoad: (newLoadedKeys, data) => {
        const {
          onLoad
        } = this.props;
        onLoad && onLoad(newLoadedKeys, data);
      },
      notifyListScroll: (e, _ref) => {
        let {
          panelIndex,
          activeNode
        } = _ref;
        this.props.onListScroll(e, {
          panelIndex,
          activeNode
        });
      },
      notifyOnExceed: data => this.props.onExceed(data),
      notifyClear: () => this.props.onClear(),
      toggleInputShow: (showInput, cb) => {
        this.setState({
          showInput
        }, () => {
          cb();
        });
      },
      updateFocusState: isFocus => {
        this.setState({
          isFocus
        });
      }
    });
  }

  static getDerivedStateFromProps(props, prevState) {
    const {
      multiple,
      value,
      defaultValue,
      onChangeWithObject,
      leafOnly,
      autoMergeValue
    } = props;
    const {
      prevProps
    } = prevState;
    let keyEntities = prevState.keyEntities || {};
    const newState = {};

    const needUpdate = name => {
      const firstInProps = isEmpty_default()(prevProps) && name in props;
      const nameHasChange = prevProps && !isEqual_default()(prevProps[name], props[name]);
      return firstInProps || nameHasChange;
    };

    const needUpdateData = () => {
      const firstInProps = !prevProps && 'treeData' in props;
      const treeDataHasChange = prevProps && prevProps.treeData !== props.treeData;
      return firstInProps || treeDataHasChange;
    };

    const getRealKeys = (realValue, keyEntities) => {
      // normallizedValue is used to save the value in two-dimensional array format
      let normallizedValue = [];

      if (is_array_default()(realValue)) {
        normallizedValue = is_array_default()(realValue[0]) ? realValue : [realValue];
      } else {
        if (realValue !== undefined) {
          normallizedValue = [[realValue]];
        }
      } // formatValuePath is used to save value of valuePath


      const formatValuePath = [];

      for_each_default()(normallizedValue).call(normallizedValue, valueItem => {
        const formatItem = onChangeWithObject ? map_default()(valueItem).call(valueItem, i => i === null || i === void 0 ? void 0 : i.value) : valueItem;
        formatValuePath.push(formatItem);
      }); // formatKeys is used to save key of value


      const formatKeys = [];

      for_each_default()(formatValuePath).call(formatValuePath, v => {
        const formatKeyItem = util_findKeysForValues(v, keyEntities);
        !isEmpty_default()(formatKeyItem) && formatKeys.push(formatKeyItem);
      });

      return formatKeys;
    };

    const needUpdateTreeData = needUpdate('treeData') || needUpdateData();
    const needUpdateValue = needUpdate('value') || isEmpty_default()(prevProps) && defaultValue;

    if (multiple) {
      // when value and treedata need updated
      if (needUpdateTreeData || needUpdateValue) {
        // update state.keyEntities
        if (needUpdateTreeData) {
          newState.treeData = props.treeData;
          keyEntities = util_convertDataToEntities(props.treeData);
          newState.keyEntities = keyEntities;
        }

        let realKeys = prevState.checkedKeys; // when data was updated

        if (needUpdateValue) {
          const realValue = needUpdate('value') ? value : defaultValue;
          realKeys = getRealKeys(realValue, keyEntities);
        } else {
          // needUpdateValue is false
          // if treeData is updated & Cascader is controlled, realKeys should be recalculated
          if (needUpdateTreeData && 'value' in props) {
            const realValue = value;
            realKeys = getRealKeys(realValue, keyEntities);
          }
        }

        if (isSet_default()(realKeys)) {
          realKeys = [...realKeys];
        }

        const calRes = calcCheckedKeys(flatten_default()(realKeys), keyEntities);
        const checkedKeys = new set_default.a(calRes.checkedKeys);
        const halfCheckedKeys = new set_default.a(calRes.halfCheckedKeys); // disableStrictly

        if (props.disableStrictly) {
          newState.disabledKeys = calcDisabledKeys(keyEntities);
        }

        const isLeafOnlyMerge = calcMergeType(autoMergeValue, leafOnly) === cascader_constants_strings.LEAF_ONLY_MERGE_TYPE;
        newState.prevProps = props;
        newState.checkedKeys = checkedKeys;
        newState.halfCheckedKeys = halfCheckedKeys;
        newState.resolvedCheckedKeys = new set_default.a(normalizeKeyList(checkedKeys, keyEntities, isLeafOnlyMerge));
      }
    }

    return newState;
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  componentDidUpdate(prevProps) {
    let isOptionsChanged = false;

    if (!isEqual_default()(prevProps.treeData, this.props.treeData)) {
      isOptionsChanged = true;
      this.foundation.collectOptions();
    }

    if (prevProps.value !== this.props.value && !isOptionsChanged) {
      this.foundation.handleValueChange(this.props.value);
    }
  }

  renderTagInput() {
    var _context4;

    const {
      size,
      disabled,
      placeholder,
      maxTagCount,
      showRestTagsPopover,
      restTagsPopoverProps
    } = this.props;
    const {
      inputValue,
      checkedKeys,
      keyEntities,
      resolvedCheckedKeys
    } = this.state;
    const tagInputcls = classnames_default()("".concat(cascader_prefixcls, "-tagInput-wrapper"));
    const tagValue = [];
    const realKeys = this.mergeType === cascader_constants_strings.NONE_MERGE_TYPE ? checkedKeys : resolvedCheckedKeys;

    for_each_default()(_context4 = [...realKeys]).call(_context4, checkedKey => {
      if (!isEmpty_default()(keyEntities[checkedKey])) {
        tagValue.push(keyEntities[checkedKey].valuePath);
      }
    });

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tagInput_0, {
      className: tagInputcls,
      ref: this.inputRef,
      disabled: disabled,
      size: size,
      // TODO Modify logic, not modify type
      value: tagValue,
      showRestTagsPopover: showRestTagsPopover,
      restTagsPopoverProps: restTagsPopoverProps,
      maxTagCount: maxTagCount,
      renderTagItem: (value, index) => this.renderTagItem(value, index, cascader_constants_strings.IS_VALUE),
      inputValue: inputValue,
      onInputChange: this.handleInputChange,
      // TODO Modify logic, not modify type
      onRemove: v => this.handleTagRemove(null, v),
      placeholder: placeholder
    });
  }

  renderInput() {
    const {
      size,
      disabled
    } = this.props;
    const inputcls = classnames_default()("".concat(cascader_prefixcls, "-input"));
    const {
      inputValue,
      inputPlaceHolder,
      showInput
    } = this.state;
    const inputProps = {
      disabled,
      value: inputValue,
      className: inputcls,
      onChange: this.handleInputChange
    };
    const wrappercls = classnames_default()({
      ["".concat(cascader_prefixcls, "-search-wrapper")]: true
    });
    const displayText = this.renderDisplayText();
    const spanCls = classnames_default()({
      ["".concat(cascader_prefixcls, "-selection-placeholder")]: !displayText,
      ["".concat(cascader_prefixcls, "-selection-text-hide")]: showInput && inputValue,
      ["".concat(cascader_prefixcls, "-selection-text-inactive")]: showInput && !inputValue
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: wrappercls
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: spanCls
    }, displayText ? displayText : inputPlaceHolder), showInput && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(input_0, assign_default()({
      ref: this.inputRef,
      size: size
    }, inputProps)));
  }

  render() {
    const {
      zIndex,
      getPopupContainer,
      autoAdjustOverflow,
      stopPropagation,
      mouseLeaveDelay,
      mouseEnterDelay,
      position
    } = this.props;
    const {
      isOpen,
      rePosKey
    } = this.state;
    const {
      direction
    } = this.context;
    const content = this.renderContent();
    const selection = this.renderSelection();
    const pos = position !== null && position !== void 0 ? position : direction === 'rtl' ? 'bottomRight' : 'bottomLeft';
    const mergedMotion = this.foundation.getMergedMotion();
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(popover_0, {
      getPopupContainer: getPopupContainer,
      zIndex: zIndex,
      motion: mergedMotion,
      ref: this.optionsRef,
      content: content,
      visible: isOpen,
      trigger: "custom",
      rePosKey: rePosKey,
      position: pos,
      autoAdjustOverflow: autoAdjustOverflow,
      stopPropagation: stopPropagation,
      mouseLeaveDelay: mouseLeaveDelay,
      mouseEnterDelay: mouseEnterDelay
    }, selection);
  }

}

cascader_Cascader.contextType = configProvider_context;
cascader_Cascader.propTypes = {
  'aria-labelledby': prop_types_default.a.string,
  'aria-invalid': prop_types_default.a.bool,
  'aria-errormessage': prop_types_default.a.string,
  'aria-describedby': prop_types_default.a.string,
  'aria-required': prop_types_default.a.bool,
  'aria-label': prop_types_default.a.string,
  arrowIcon: prop_types_default.a.node,
  changeOnSelect: prop_types_default.a.bool,
  defaultValue: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.array]),
  disabled: prop_types_default.a.bool,
  dropdownClassName: prop_types_default.a.string,
  dropdownStyle: prop_types_default.a.object,
  emptyContent: prop_types_default.a.node,
  motion: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.func, prop_types_default.a.object]),

  /* show search input, if passed in a function, used as custom filter */
  filterTreeNode: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.bool]),
  filterLeafOnly: prop_types_default.a.bool,
  placeholder: prop_types_default.a.string,
  searchPlaceholder: prop_types_default.a.string,
  size: prop_types_default.a.oneOf(cascader_constants_strings.SIZE_SET),
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  treeData: prop_types_default.a.arrayOf(prop_types_default.a.shape({
    value: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
    label: prop_types_default.a.any
  })),
  treeNodeFilterProp: prop_types_default.a.string,
  suffix: prop_types_default.a.node,
  prefix: prop_types_default.a.node,
  insetLabel: prop_types_default.a.node,
  insetLabelId: prop_types_default.a.string,
  id: prop_types_default.a.string,
  displayProp: prop_types_default.a.string,
  displayRender: prop_types_default.a.func,
  onChange: prop_types_default.a.func,
  onSearch: prop_types_default.a.func,
  onSelect: prop_types_default.a.func,
  onBlur: prop_types_default.a.func,
  onFocus: prop_types_default.a.func,
  children: prop_types_default.a.node,
  getPopupContainer: prop_types_default.a.func,
  zIndex: prop_types_default.a.number,
  value: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number, prop_types_default.a.array]),
  validateStatus: prop_types_default.a.oneOf(cascader_constants_strings.VALIDATE_STATUS),
  showNext: prop_types_default.a.oneOf([cascader_constants_strings.SHOW_NEXT_BY_CLICK, cascader_constants_strings.SHOW_NEXT_BY_HOVER]),
  stopPropagation: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.string]),
  showClear: prop_types_default.a.bool,
  defaultOpen: prop_types_default.a.bool,
  autoAdjustOverflow: prop_types_default.a.bool,
  onDropdownVisibleChange: prop_types_default.a.func,
  triggerRender: prop_types_default.a.func,
  onListScroll: prop_types_default.a.func,
  onChangeWithObject: prop_types_default.a.bool,
  bottomSlot: prop_types_default.a.node,
  topSlot: prop_types_default.a.node,
  multiple: prop_types_default.a.bool,
  autoMergeValue: prop_types_default.a.bool,
  maxTagCount: prop_types_default.a.number,
  showRestTagsPopover: prop_types_default.a.bool,
  restTagsPopoverProps: prop_types_default.a.object,
  max: prop_types_default.a.number,
  separator: prop_types_default.a.string,
  onExceed: prop_types_default.a.func,
  onClear: prop_types_default.a.func,
  loadData: prop_types_default.a.func,
  onLoad: prop_types_default.a.func,
  loadedKeys: prop_types_default.a.array,
  disableStrictly: prop_types_default.a.bool,
  leafOnly: prop_types_default.a.bool,
  enableLeafClick: prop_types_default.a.bool,
  preventScroll: prop_types_default.a.bool,
  position: prop_types_default.a.string
};
cascader_Cascader.defaultProps = {
  leafOnly: false,
  arrowIcon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronDown, null),
  stopPropagation: true,
  motion: true,
  defaultOpen: false,
  zIndex: constants_numbers.DEFAULT_Z_INDEX,
  showClear: false,
  autoClearSearchValue: true,
  changeOnSelect: false,
  disableStrictly: false,
  autoMergeValue: true,
  multiple: false,
  filterTreeNode: false,
  filterLeafOnly: true,
  showRestTagsPopover: false,
  restTagsPopoverProps: {},
  separator: ' / ',
  size: 'default',
  treeNodeFilterProp: 'label',
  displayProp: 'label',
  treeData: [],
  showNext: cascader_constants_strings.SHOW_NEXT_BY_CLICK,
  onExceed: noop_default.a,
  onClear: noop_default.a,
  onDropdownVisibleChange: noop_default.a,
  onListScroll: noop_default.a,
  enableLeafClick: false,
  'aria-label': 'Cascader'
};
/* harmony default export */ var cascader_0 = (cascader_Cascader);
// CONCATENATED MODULE: ../semi-foundation/collapse/constants.ts

const collapse_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-collapse")
};
const collapse_constants_strings = {
  iconPosition: ['left', 'right']
};

// CONCATENATED MODULE: ../semi-foundation/collapse/foundation.ts





class foundation_CollapseFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  }

  initActiveKey() {
    const {
      defaultActiveKey,
      activeKey,
      accordion
    } = this.getProps();
    let activeKeyList = activeKey ? activeKey : defaultActiveKey;

    if (accordion) {
      activeKeyList = is_array_default()(activeKeyList) ? activeKeyList[0] : activeKeyList;
    }

    if (activeKeyList && activeKeyList.length) {
      activeKeyList = is_array_default()(activeKeyList) ? activeKeyList : [activeKeyList];
      return activeKeyList;
    }

    return []; // this._adapter.initActiveSet(activeKeyList);
  }

  handleChange(newKey, e) {
    const {
      activeKey,
      accordion
    } = this.getProps();
    const {
      activeSet
    } = this.getStates();
    let newSet = new set_default.a(activeSet);

    if (newSet.has(newKey)) {
      newSet.delete(newKey);
    } else {
      if (accordion) {
        newSet = new set_default.a([newKey]);
      } else {
        newSet.add(newKey);
      }
    }

    this._adapter.handleChange([...instance_values_default()(newSet).call(newSet)], e);

    if (typeof activeKey === 'undefined') {
      this._adapter.addActiveKey(newSet);
    }
  }

}
// CONCATENATED MODULE: ../semi-foundation/collapsible/constants.ts

const collapsible_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-collapsible")
};

// CONCATENATED MODULE: ./collapsible/index.tsx

// @ts-ignore  currently no type definition for @douyinfe/semi-animation-react






const collapsible_ease = 'cubicBezier(.25,.1,.25,1)';

const Collapsible = props => {
  const {
    motion,
    children,
    isOpen,
    duration,
    keepDOM,
    collapseHeight,
    style,
    className,
    reCalcKey,
    id
  } = props;
  const ref = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useRef"])(null);
  const [maxHeight, setMaxHeight] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(0);
  const [open, setOpen] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(props.isOpen);
  const [isFirst, setIsFirst] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(true);
  const [transitionImmediate, setTransitionImmediate] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(open && isFirst);
  const [left, setLeft] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(!props.isOpen);

  if (isOpen !== open) {
    setOpen(isOpen);

    if (isFirst) {
      setIsFirst(false);
      setTransitionImmediate(false);
    }

    isOpen && setLeft(!isOpen);
  }

  const setHeight = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useCallback"])(node => {
    const currHeight = node && node.scrollHeight;

    if (currHeight && maxHeight !== currHeight) {
      setMaxHeight(currHeight);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [left, reCalcKey, maxHeight]);

  const resetHeight = () => {
    ref.current.style.maxHeight = 'none';
  };

  const formatStyle = _ref => {
    let {
      maxHeight: maxHeightInTransitionStyle
    } = _ref;
    return {
      maxHeight: maxHeightInTransitionStyle
    };
  };

  const shouldKeepDOM = () => keepDOM || collapseHeight !== 0;

  const defaultMaxHeight = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useMemo"])(() => {
    return isOpen || !shouldKeepDOM() && !motion ? 'none' : collapseHeight;
  }, [collapseHeight, motion, isOpen, shouldKeepDOM]);

  const renderChildren = transitionStyle => {
    const transition = transitionStyle && typeof transitionStyle === 'object' ? formatStyle(transitionStyle) : {};

    const wrapperstyle = assign_default()(assign_default()({
      overflow: 'hidden',
      maxHeight: defaultMaxHeight
    }, style), transition);

    if (isFirst) {
      wrapperstyle.maxHeight = defaultMaxHeight;
    }

    const wrapperCls = classnames_default()("".concat(collapsible_constants_cssClasses.PREFIX, "-wrapper"), className);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      style: wrapperstyle,
      className: wrapperCls,
      ref: ref
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      ref: setHeight,
      style: {
        overflow: 'hidden'
      },
      id: id,
      "x-semi-prop": "children"
    }, children));
  };

  const didLeave = () => {
    setLeft(true);
    !shouldKeepDOM() && setMaxHeight(collapseHeight);
  };

  const renderContent = () => {
    if (left && !shouldKeepDOM()) {
      return null;
    }

    const mergedMotion = getMotionObjFromProps({
      didEnter: resetHeight,
      didLeave,
      motion
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Transition_Transition, assign_default()({
      state: isOpen ? 'enter' : 'leave',
      immediate: transitionImmediate,
      from: {
        maxHeight: 0
      },
      enter: {
        maxHeight: {
          val: maxHeight,
          easing: collapsible_ease,
          duration
        }
      },
      leave: {
        maxHeight: {
          val: collapseHeight,
          easing: collapsible_ease,
          duration
        }
      }
    }, mergedMotion), transitionStyle => renderChildren(motion ? transitionStyle : null));
  };

  return renderContent();
};

Collapsible.propType = {
  motion: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.func, prop_types_default.a.object]),
  children: prop_types_default.a.node,
  isOpen: prop_types_default.a.bool,
  duration: prop_types_default.a.number,
  keepDOM: prop_types_default.a.bool,
  collapseHeight: prop_types_default.a.number,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  reCalcKey: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number])
};
Collapsible.defaultProps = {
  isOpen: false,
  duration: 250,
  motion: true,
  keepDOM: false,
  collapseHeight: 0
};
/* harmony default export */ var collapsible_0 = (Collapsible);
// CONCATENATED MODULE: ./collapse/collapse-context.tsx

const CollapseContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext({});
/* harmony default export */ var collapse_context = (CollapseContext);
// CONCATENATED MODULE: ./collapse/item.tsx




var collapse_item_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};









class item_CollapsePanel extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  constructor() {
    super(...arguments);
    this.ariaID = getUuidShort({});
  }

  renderHeader(active) {
    let expandIconEnable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    const {
      showArrow,
      header,
      extra
    } = this.props;
    let {
      expandIcon,
      collapseIcon
    } = this.context;
    const {
      expandIconPosition
    } = this.context;

    if (typeof expandIcon === 'undefined') {
      expandIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronDown, null);
    }

    if (typeof collapseIcon === 'undefined') {
      collapseIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronUp, null);
    }

    const icon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      "aria-hidden": 'true',
      className: classnames_default()(["".concat(collapse_constants_cssClasses.PREFIX, "-header-icon"), {
        ["".concat(collapse_constants_cssClasses.PREFIX, "-header-iconDisabled")]: !expandIconEnable
      }])
    }, expandIconEnable ? active ? collapseIcon : expandIcon : expandIcon);
    const iconPosLeft = expandIconPosition === 'left';

    if (typeof header === 'string') {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, showArrow && (iconPosLeft ? icon : null), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, header), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: "".concat(collapse_constants_cssClasses.PREFIX, "-header-right")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, extra), showArrow && (iconPosLeft ? null : icon)));
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, showArrow && (iconPosLeft ? icon : null), header, showArrow && (iconPosLeft ? null : icon));
  }

  render() {
    const _a = this.props,
          {
      className,
      children,
      itemKey,
      reCalcKey,
      header,
      extra,
      showArrow,
      disabled
    } = _a,
          restProps = collapse_item_rest(_a, ["className", "children", "itemKey", "reCalcKey", "header", "extra", "showArrow", "disabled"]);

    const {
      keepDOM,
      expandIconPosition,
      activeSet,
      onClick,
      motion
    } = this.context;
    const active = activeSet.has(itemKey);
    const itemCls = classnames_default()(className, {
      ["".concat(collapse_constants_cssClasses.PREFIX, "-item")]: true
    });
    const headerCls = classnames_default()({
      ["".concat(collapse_constants_cssClasses.PREFIX, "-header")]: true,
      ["".concat(collapse_constants_cssClasses.PREFIX, "-header-disabled")]: disabled,
      ["".concat(collapse_constants_cssClasses.PREFIX, "-header-iconLeft")]: expandIconPosition === 'left'
    });
    const contentCls = classnames_default()({
      ["".concat(collapse_constants_cssClasses.PREFIX, "-content")]: true
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
      className: itemCls
    }, restProps), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "button",
      tabIndex: 0,
      className: headerCls,
      "aria-disabled": disabled,
      "aria-expanded": active ? 'true' : 'false',
      "aria-owns": this.ariaID,
      onClick: e => !disabled && onClick(itemKey, e)
    }, this.renderHeader(active, children !== undefined && !disabled)), children && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(collapsible_0, {
      isOpen: active,
      keepDOM: keepDOM,
      motion: motion,
      reCalcKey: reCalcKey
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: contentCls,
      "aria-hidden": !active,
      id: this.ariaID
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(collapse_constants_cssClasses.PREFIX, "-content-wrapper")
    }, children))));
  }

}
item_CollapsePanel.contextType = collapse_context;
item_CollapsePanel.propTypes = {
  itemKey: prop_types_default.a.string,
  extra: prop_types_default.a.node,
  header: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node]),
  className: prop_types_default.a.string,
  reCalcKey: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  showArrow: prop_types_default.a.bool,
  disabled: prop_types_default.a.bool
};
item_CollapsePanel.defaultProps = {
  showArrow: true,
  disabled: false
};
// EXTERNAL MODULE: ../semi-foundation/collapse/collapse.scss
var collapse = __webpack_require__("/rC8");

// CONCATENATED MODULE: ./collapse/index.tsx








var collapse_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};














class collapse_Collapse extends baseComponent_BaseComponent {
  constructor(props) {
    var _context;

    super(props);

    this.onChange = (activeKey, e) => {
      this.foundation.handleChange(activeKey, e);
    };

    this.foundation = new foundation_CollapseFoundation(this.adapter);
    const initKeys = this.foundation.initActiveKey();
    this.state = {
      activeSet: new set_default.a(initKeys)
    };
    this.onChange = bind_default()(_context = this.onChange).call(_context, this);
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      handleChange: (activeKey, e) => this.props.onChange(activeKey, e),
      addActiveKey: activeSet => this.setState({
        activeSet
      })
    });
  }

  static getDerivedStateFromProps(props, state) {
    if (props.activeKey) {
      const keys = is_array_default()(props.activeKey) ? props.activeKey : [props.activeKey];
      const newSet = new set_default.a(keys);

      if (!isEqual_default()(newSet, state.activeSet)) {
        return assign_default()(assign_default()({}, state), {
          activeSet: newSet
        });
      }

      return state;
    }

    return state;
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  render() {
    // eslint-disable-next-line max-len
    const _a = this.props,
          {
      defaultActiveKey,
      accordion,
      style,
      motion,
      className,
      keepDOM,
      expandIconPosition,
      expandIcon,
      collapseIcon,
      children
    } = _a,
          rest = collapse_rest(_a, ["defaultActiveKey", "accordion", "style", "motion", "className", "keepDOM", "expandIconPosition", "expandIcon", "collapseIcon", "children"]);

    const clsPrefix = classnames_default()(collapse_constants_cssClasses.PREFIX, className);
    const {
      activeSet
    } = this.state;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: clsPrefix,
      style: style
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(collapse_context.Provider, {
      value: {
        activeSet,
        expandIcon,
        collapseIcon,
        keepDOM,
        expandIconPosition,
        onClick: this.onChange,
        motion
      }
    }, children));
  }

}

collapse_Collapse.Panel = item_CollapsePanel;
collapse_Collapse.propTypes = {
  activeKey: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.array]),
  defaultActiveKey: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.array]),
  accordion: prop_types_default.a.bool,
  onChange: prop_types_default.a.func,
  expandIcon: prop_types_default.a.node,
  collapseIcon: prop_types_default.a.node,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  keepDOM: prop_types_default.a.bool,
  motion: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.func, prop_types_default.a.object]),
  expandIconPosition: prop_types_default.a.oneOf(collapse_constants_strings.iconPosition)
};
collapse_Collapse.defaultProps = {
  defaultActiveKey: '',
  onChange: function_noop,
  expandIconPosition: 'right'
};
/* harmony default export */ var collapse_0 = (collapse_Collapse);
// CONCATENATED MODULE: ./configProvider/index.tsx




var configProvider_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};






class configProvider_ConfigProvider extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Component {
  renderChilren() {
    const {
      direction,
      children
    } = this.props;

    if (direction === 'rtl') {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(BASE_CLASS_PREFIX, "-rtl")
      }, children);
    }

    return children;
  }

  render() {
    const _a = this.props,
          {
      children,
      direction
    } = _a,
          rest = configProvider_rest(_a, ["children", "direction"]);

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(configProvider_context.Provider, {
      value: assign_default()({
        direction
      }, rest)
    }, this.renderChilren());
  }

}
configProvider_ConfigProvider.propTypes = {
  locale: prop_types_default.a.object,
  timeZone: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  getPopupContainer: prop_types_default.a.func,
  direction: prop_types_default.a.oneOf(['ltr', 'rtl'])
};
configProvider_ConfigProvider.defaultProps = {
  locale: source_zh_CN,
  direction: 'ltr'
};
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/values.js
var lodash_values = __webpack_require__("0iyY");
var lodash_values_default = /*#__PURE__*/__webpack_require__.n(lodash_values);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/unset.js
var unset = __webpack_require__("eGeI");
var unset_default = /*#__PURE__*/__webpack_require__.n(unset);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/toPath.js
var toPath = __webpack_require__("ND9x");
var toPath_default = /*#__PURE__*/__webpack_require__.n(toPath);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/has.js
var has = __webpack_require__("1mr4");
var has_default = /*#__PURE__*/__webpack_require__.n(has);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/number/is-integer.js
var is_integer = __webpack_require__("P2TP");
var is_integer_default = /*#__PURE__*/__webpack_require__.n(is_integer);

// CONCATENATED MODULE: ../semi-foundation/utils/object.ts















const pathToArrayElem = path => {
  const pathArray = toPath_default()(path); // internal-issues:673


  const justNumber = isNumber_default()(path) && pathArray.length === 1;
  return justNumber ? false : is_integer_default()(+pathArray[pathArray.length - 1]);
};

function isEmptyObject(target) {
  /**
   *  var a = {};
   *  var b = { c: undefined }
   *  var d = {
   *      e: function(){},
   *      f: Symbol(''),
   *  }
   *  the result of JSON.stringify(a/b/d) are same: '{}'
   *  We can use the above features to remove keys with empty values in Form
   *  But we cannot use JSON.stringify() directly, because if the input parameter of JSON.stringify includes fiberNode, it will cause an TypeError: 'Converting circular structure to JSON'
   *  So we have to mock it's behavior, also, the form value cannot have Symbol or function type, it can be ignored
   */
  if (!isObject_default()(target)) {
    return false;
  } else {
    const valuesOfTarget = lodash_values_default()(target); // values(a)  ->   []
    // values(b)  ->   [undefined]


    if (!valuesOfTarget.length) {
      return true; // like target: {}
    } else {
      return every_default()(valuesOfTarget).call(valuesOfTarget, item => typeof item === 'undefined');
    }
  }
}

function cleanup(obj, path) {
  let pull = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  if (path.length === 0) {
    return;
  }

  const target = get_default()(obj, path); // remove undefined from array
  // if (Array.isArray(target) && pull) {
  //     // only remove undefined form array from right to left
  //     // Remove undefined from right to left
  //     let lastIndex = findLastIndex(target, item => !isUndefined(item));
  //     lodashRemove(target, (value, index, array) => index > lastIndex);
  // }
  // Delete object if its empty
  // eslint-disable-next-line


  if (is_array_default()(target) && every_default()(target).call(target, e => e == null)) {
    unset_default()(obj, path);
  } else if (isEmptyObject(target)) {
    unset_default()(obj, path);
  } // Recur


  cleanup(obj, slice_default()(path).call(path, 0, path.length - 1), pull);
}

function object_empty(object) {
  return lodash_values_default()(object).length === 0;
}
function object_get(object, path) {
  return get_default()(object, path);
}
function remove(object, path) {
  unset_default()(object, path); // a.b => [a, b]
  // arr[11].a => [arr, 11, a]


  let pathArray = toPath_default()(path);

  pathArray = slice_default()(pathArray).call(pathArray, 0, pathArray.length - 1);
  cleanup(object, pathArray, false);
}
function object_set(object, path, value, allowEmpty) {
  if (allowEmpty) {
    return lodash_set_default()(object, path, value);
  }

  if (value !== undefined) {
    return lodash_set_default()(object, path, value);
  } else {
    // If the path is to an array leaf then we want to set to undefined
    // 将数组的叶子节点置为undefined时，例如 a.b[0]  a.b[1]  a.b[99]
    if (pathToArrayElem(path) && object_get(object, path) !== undefined) {
      lodash_set_default()(object, path, undefined);

      let pathArray = toPath_default()(path);

      pathArray = slice_default()(pathArray).call(pathArray, 0, pathArray.length - 1);
      cleanup(object, pathArray, false);
    } else if (!pathToArrayElem(path) && object_get(object, path) !== undefined) {
      // Only delete the field if it needs to be deleted and its not a path to an array ( array leaf )
      // eg:

      /*
          When the non-array leaf node is set to undefined
          for example: a.b.c
      */
      remove(object, path);
    }
  }
}
function object_has(object, path) {
  return has_default()(object, path);
}
/**
 * set static properties from `srcObj` to `obj`
 * @param {object|Function} obj
 * @param {object|Function} srcObj
 * @returns {object|Function}
 */

function forwardStatics(obj, srcObj) {
  if (obj && (typeof obj === 'function' || typeof obj === 'object') && srcObj && (typeof srcObj === 'function' || typeof srcObj === 'object')) {
    var _context;

    for_each_default()(_context = object_entries_default()(srcObj)).call(_context, _ref => {
      let [key, value] = _ref;
      obj[key] = value;
    });
  }

  return obj;
}
// CONCATENATED MODULE: ../semi-foundation/datePicker/constants.ts



const dayItemClasses = {
  DAY_TODAY: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-today"),
  DAY_IN_RANGE: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-inrange"),
  DAY_HOVER: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-inhover"),
  DAY_SELECTED: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-selected"),
  DAY_SELECTED_START: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-selected-start"),
  DAY_SELECTED_END: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-selected-end"),
  DAY_DISABLED: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-disabled"),
  DAY_HOVER_DAY: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-hoverday"),
  DAY_HOVER_DAY_OFFSET: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-hoverday-offset"),
  DAY_IN_OFFSET_RANGE: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-inoffsetrange"),
  DAY_SELECTED_RANGE_HOVER: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-selectedrange-hover"),
  DAY_OFFSET_RANGE_START: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-offsetrange-start"),
  DAY_OFFSET_RANGE_END: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-offsetrange-end"),
  DAY_SELECTED_START_AFTER_HOVER: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-selected-start-afterhover"),
  DAY_SELECTED_END_BEFORE_HOVER: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-selected-end-beforehover"),
  DAY_HOVER_DAY_BEFORE_RANGE: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-hoverday-beforerange"),
  DAY_HOVER_DAY_AFTER_RANGE: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-hoverday-afterrange"),
  DAY_HOVER_DAY_IN_RANGE: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-hoverday-inrange"),
  DAY_HOVER_DAY_AROUND_SINGLE_SELECTED: "".concat(BASE_CLASS_PREFIX, "-datepicker-day-hoverday-around-singleselected")
};

const datePicker_constants_cssClasses = assign_default()({
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-datepicker"),
  NAVIGATION: "".concat(BASE_CLASS_PREFIX, "-datepicker-navigation"),
  PANEL_YAM: "".concat(BASE_CLASS_PREFIX, "-datepicker-panel-yam"),
  MONTH: "".concat(BASE_CLASS_PREFIX, "-datepicker-month"),
  WEEKDAY: "".concat(BASE_CLASS_PREFIX, "-datepicker-weekday"),
  WEEKS: "".concat(BASE_CLASS_PREFIX, "-datepicker-weeks"),
  WEEK: "".concat(BASE_CLASS_PREFIX, "-datepicker-week"),
  DAY: "".concat(BASE_CLASS_PREFIX, "-datepicker-day")
}, dayItemClasses);

const constants_formatToken = {
  FORMAT_FULL_DATE: 'yyyy-MM-dd',
  FORMAT_TIME_PICKER: 'HH:mm:ss',
  FORMAT_DATE_TIME: 'yyyy-MM-dd HH:mm:ss',
  FORMAT_YEAR_MONTH: 'yyyy-MM'
};

const datePicker_constants_strings = assign_default()({
  DEFAULT_SEPARATOR_MULTIPLE: ',',
  DEFAULT_SEPARATOR_RANGE: ' ~ ',
  SIZE_SET: ['small', 'default', 'large'],
  TYPE_SET: ['date', 'dateRange', 'year', 'month', 'dateTime', 'dateTimeRange'],
  PRESET_POSITION_SET: ['left', 'right', 'top', 'bottom'],
  DENSITY_SET: ['default', 'compact'],
  PANEL_TYPE_LEFT: 'left',
  PANEL_TYPE_RIGHT: 'right',
  STATUS: VALIDATE_STATUS,
  POSITION_SET: popover_constants_strings.POSITION_SET,
  POSITION_INLINE_INPUT: 'leftTopOver'
}, constants_formatToken);

const datePicker_constants_numbers = {
  WEEK_START_ON: 0,
  WEEK_HEIGHT: 36,
  SPACING: constants_numbers.SPACING,
  SPACING_INSET_INPUT: 1
};

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/isDate.js
var lodash_isDate = __webpack_require__("+f76");
var isDate_default = /*#__PURE__*/__webpack_require__.n(lodash_isDate);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/stubFalse.js
var stubFalse = __webpack_require__("DjCF");
var stubFalse_default = /*#__PURE__*/__webpack_require__.n(stubFalse);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/find.js
var find = __webpack_require__("fzZl");
var find_default = /*#__PURE__*/__webpack_require__.n(find);

// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/startOfSecond/index.js


/**
 * @name startOfSecond
 * @category Second Helpers
 * @summary Return the start of a second for the given date.
 *
 * @description
 * Return the start of a second for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a second
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a second for 1 December 2014 22:15:45.400:
 * const result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:45.000
 */

function startOfSecond(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setMilliseconds(0);
  return date;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/isSameSecond/index.js


/**
 * @name isSameSecond
 * @category Second Helpers
 * @summary Are the given dates in the same second (and hour and day)?
 *
 * @description
 * Are the given dates in the same second (and hour and day)?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same second (and hour and day)
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 4 September 2014 06:30:15.000 and 4 September 2014 06:30.15.500 in the same second?
 * var result = isSameSecond(
 *   new Date(2014, 8, 4, 6, 30, 15),
 *   new Date(2014, 8, 4, 6, 30, 15, 500)
 * )
 * //=> true
 * 
 * @example
 * // Are 4 September 2014 06:00:15.000 and 4 September 2014 06:01.15.000 in the same second?
 * var result = isSameSecond(
 *   new Date(2014, 8, 4, 6, 0, 15),
 *   new Date(2014, 8, 4, 6, 1, 15)
 * )
 * //=> false
 * 
 * @example
 * // Are 4 September 2014 06:00:15.000 and 5 September 2014 06:00.15.000 in the same second?
 * var result = isSameSecond(
 *   new Date(2014, 8, 4, 6, 0, 15),
 *   new Date(2014, 8, 5, 6, 0, 15)
 * )
 * //=> false
 */

function isSameSecond(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfSecond = startOfSecond(dirtyDateLeft);
  var dateRightStartOfSecond = startOfSecond(dirtyDateRight);
  return dateLeftStartOfSecond.getTime() === dateRightStartOfSecond.getTime();
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/isEqual/index.js


/**
 * @name isEqual
 * @category Common Helpers
 * @summary Are the given dates equal?
 *
 * @description
 * Are the given dates equal?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to compare
 * @param {Date|Number} dateRight - the second date to compare
 * @returns {Boolean} the dates are equal
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?
 * var result = isEqual(
 *   new Date(2014, 6, 2, 6, 30, 45, 0),
 *   new Date(2014, 6, 2, 6, 30, 45, 500)
 * )
 * //=> false
 */

function isEqual_isEqual(dirtyLeftDate, dirtyRightDate) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyLeftDate);
  var dateRight = toDate(dirtyRightDate);
  return dateLeft.getTime() === dateRight.getTime();
}
// CONCATENATED MODULE: ../semi-foundation/datePicker/_utils/isValidDate.ts
function isValidDate(date) {
  return date && Object.prototype.toString.call(date) === '[object Date]' && !isNaN(date);
}
// CONCATENATED MODULE: ../semi-foundation/utils/isNumber.ts
function isNumber_isNumber(value) {
  return typeof value === 'number' || Object.prototype.toString.call(value) === '[object Number]';
}
// CONCATENATED MODULE: ../semi-foundation/datePicker/_utils/isTimestamp.ts


function isTimestamp(ts) {
  return isNumber_isNumber(ts) && isValidDate(new Date(ts));
}
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/format/index.js
var date_fns_format = __webpack_require__("RTm1");
var format_default = /*#__PURE__*/__webpack_require__.n(date_fns_format);

// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns-tz/esm/_lib/tzIntlTimeZoneName/index.js
/**
 * Returns the formatted time zone name of the provided `timeZone` or the current
 * system time zone if omitted, accounting for DST according to the UTC value of
 * the date.
 */
function tzIntlTimeZoneName(length, date, options) {
  var dtf = getDTF(length, options.timeZone, options.locale)
  return dtf.formatToParts ? partsTimeZone(dtf, date) : hackyTimeZone(dtf, date)
}

function partsTimeZone(dtf, date) {
  var formatted = dtf.formatToParts(date)
  return formatted[formatted.length - 1].value
}

function hackyTimeZone(dtf, date) {
  var formatted = dtf.format(date).replace(/\u200E/g, '')
  var tzNameMatch = / [\w-+ ]+$/.exec(formatted)
  return tzNameMatch ? tzNameMatch[0].substr(1) : ''
}

// If a locale has been provided `en-US` is used as a fallback in case it is an
// invalid locale, otherwise the locale is left undefined to use the system locale.
function getDTF(length, timeZone, locale) {
  if (locale && !locale.code) {
    throw new Error(
      "date-fns-tz error: Please set a language code on the locale object imported from date-fns, e.g. `locale.code = 'en-US'`"
    )
  }
  return new Intl.DateTimeFormat(locale ? [locale.code, 'en-US'] : undefined, {
    timeZone: timeZone,
    timeZoneName: length,
  })
}

// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns-tz/esm/_lib/tzTokenizeDate/index.js
/**
 * Returns the [year, month, day, hour, minute, seconds] tokens of the provided
 * `date` as it will be rendered in the `timeZone`.
 */
function tzTokenizeDate(date, timeZone) {
  var dtf = getDateTimeFormat(timeZone)
  return dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date)
}

var typeToPos = {
  year: 0,
  month: 1,
  day: 2,
  hour: 3,
  minute: 4,
  second: 5,
}

function partsOffset(dtf, date) {
  try {
    var formatted = dtf.formatToParts(date)
    var filled = []
    for (var i = 0; i < formatted.length; i++) {
      var pos = typeToPos[formatted[i].type]

      if (pos >= 0) {
        filled[pos] = parseInt(formatted[i].value, 10)
      }
    }
    return filled
  } catch (error) {
    if (error instanceof RangeError) {
      return [NaN]
    }
    throw error
  }
}

function hackyOffset(dtf, date) {
  var formatted = dtf.format(date).replace(/\u200E/g, '')
  var parsed = /(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(formatted)
  // var [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed
  // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]
  return [parsed[3], parsed[1], parsed[2], parsed[4], parsed[5], parsed[6]]
}

// Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used
// to get deterministic local date/time output according to the `en-US` locale which
// can be used to extract local time parts as necessary.
var dtfCache = {}
function getDateTimeFormat(timeZone) {
  if (!dtfCache[timeZone]) {
    // New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`
    var testDateFormatted = new Intl.DateTimeFormat('en-US', {
      hour12: false,
      timeZone: 'America/New_York',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    }).format(new Date('2014-06-25T04:00:00.123Z'))
    var hourCycleSupported =
      testDateFormatted === '06/25/2014, 00:00:00' ||
      testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00'

    dtfCache[timeZone] = hourCycleSupported
      ? new Intl.DateTimeFormat('en-US', {
          hour12: false,
          timeZone: timeZone,
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
        })
      : new Intl.DateTimeFormat('en-US', {
          hourCycle: 'h23',
          timeZone: timeZone,
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
        })
  }
  return dtfCache[timeZone]
}

// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns-tz/esm/_lib/newDateUTC/index.js
/**
 * Use instead of `new Date(Date.UTC(...))` to support years below 100 which doesn't work
 * otherwise due to the nature of the
 * [`Date` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#interpretation_of_two-digit_years.
 *
 * For `Date.UTC(...)`, use `newDateUTC(...).getTime()`.
 */
function newDateUTC(fullYear, month, day, hour, minute, second, millisecond) {
  var utcDate = new Date(0)
  utcDate.setUTCFullYear(fullYear, month, day)
  utcDate.setUTCHours(hour, minute, second, millisecond)
  return utcDate
}

// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns-tz/esm/_lib/tzParseTimezone/index.js



var tzParseTimezone_MILLISECONDS_IN_HOUR = 3600000
var MILLISECONDS_IN_MINUTE = 60000

var patterns = {
  timezone: /([Z+-].*)$/,
  timezoneZ: /^(Z)$/,
  timezoneHH: /^([+-]\d{2})$/,
  timezoneHHMM: /^([+-]\d{2}):?(\d{2})$/,
}

// Parse various time zone offset formats to an offset in milliseconds
function tzParseTimezone(timezoneString, date, isUtcDate) {
  var token
  var absoluteOffset

  // Empty string
  if (timezoneString === '') {
    return 0
  }

  // Z
  token = patterns.timezoneZ.exec(timezoneString)
  if (token) {
    return 0
  }

  var hours

  // ±hh
  token = patterns.timezoneHH.exec(timezoneString)
  if (token) {
    hours = parseInt(token[1], 10)

    if (!validateTimezone(hours)) {
      return NaN
    }

    return -(hours * tzParseTimezone_MILLISECONDS_IN_HOUR)
  }

  // ±hh:mm or ±hhmm
  token = patterns.timezoneHHMM.exec(timezoneString)
  if (token) {
    hours = parseInt(token[1], 10)
    var minutes = parseInt(token[2], 10)

    if (!validateTimezone(hours, minutes)) {
      return NaN
    }

    absoluteOffset = Math.abs(hours) * tzParseTimezone_MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE
    return hours > 0 ? -absoluteOffset : absoluteOffset
  }

  // IANA time zone
  if (isValidTimezoneIANAString(timezoneString)) {
    date = new Date(date || Date.now())
    var utcDate = isUtcDate ? date : toUtcDate(date)

    var offset = calcOffset(utcDate, timezoneString)

    var fixedOffset = isUtcDate ? offset : fixOffset(date, offset, timezoneString)

    return -fixedOffset
  }

  return NaN
}

function toUtcDate(date) {
  return newDateUTC(
    date.getFullYear(),
    date.getMonth(),
    date.getDate(),
    date.getHours(),
    date.getMinutes(),
    date.getSeconds(),
    date.getMilliseconds()
  )
}

function calcOffset(date, timezoneString) {
  var tokens = tzTokenizeDate(date, timezoneString)

  // ms dropped because it's not provided by tzTokenizeDate
  var asUTC = newDateUTC(
    tokens[0],
    tokens[1] - 1,
    tokens[2],
    tokens[3] % 24,
    tokens[4],
    tokens[5],
    0
  ).getTime()

  var asTS = date.getTime()
  var over = asTS % 1000
  asTS -= over >= 0 ? over : 1000 + over
  return asUTC - asTS
}

function fixOffset(date, offset, timezoneString) {
  var localTS = date.getTime()

  // Our UTC time is just a guess because our offset is just a guess
  var utcGuess = localTS - offset

  // Test whether the zone matches the offset for this ts
  var o2 = calcOffset(new Date(utcGuess), timezoneString)

  // If so, offset didn't change, and we're done
  if (offset === o2) {
    return offset
  }

  // If not, change the ts by the difference in the offset
  utcGuess -= o2 - offset

  // If that gives us the local time we want, we're done
  var o3 = calcOffset(new Date(utcGuess), timezoneString)
  if (o2 === o3) {
    return o2
  }

  // If it's different, we're in a hole time. The offset has changed, but we don't adjust the time
  return Math.max(o2, o3)
}

function validateTimezone(hours, minutes) {
  return -23 <= hours && hours <= 23 && (minutes == null || (0 <= minutes && minutes <= 59))
}

var validIANATimezoneCache = {}
function isValidTimezoneIANAString(timeZoneString) {
  if (validIANATimezoneCache[timeZoneString]) return true
  try {
    new Intl.DateTimeFormat(undefined, { timeZone: timeZoneString })
    validIANATimezoneCache[timeZoneString] = true
    return true
  } catch (error) {
    return false
  }
}

// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns-tz/esm/format/formatters/index.js



var formatters_MILLISECONDS_IN_MINUTE = 60 * 1000

var format_formatters_formatters = {
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function (date, token, localize, options) {
    var timezoneOffset = getTimeZoneOffset(options.timeZone, options._originalDate || date)

    if (timezoneOffset === 0) {
      return 'Z'
    }

    switch (token) {
      // Hours and optional minutes
      case 'X':
        return formatters_formatTimezoneWithOptionalMinutes(timezoneOffset)

      // Hours, minutes and optional seconds without `:` delimeter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XX`
      case 'XXXX':
      case 'XX': // Hours and minutes without `:` delimeter
        return formatters_formatTimezone(timezoneOffset)

      // Hours, minutes and optional seconds with `:` delimeter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XXX`
      case 'XXXXX':
      case 'XXX': // Hours and minutes with `:` delimeter
      default:
        return formatters_formatTimezone(timezoneOffset, ':')
    }
  },

  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function (date, token, localize, options) {
    var timezoneOffset = getTimeZoneOffset(options.timeZone, options._originalDate || date)

    switch (token) {
      // Hours and optional minutes
      case 'x':
        return formatters_formatTimezoneWithOptionalMinutes(timezoneOffset)

      // Hours, minutes and optional seconds without `:` delimeter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xx`
      case 'xxxx':
      case 'xx': // Hours and minutes without `:` delimeter
        return formatters_formatTimezone(timezoneOffset)

      // Hours, minutes and optional seconds with `:` delimeter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xxx`
      case 'xxxxx':
      case 'xxx': // Hours and minutes with `:` delimeter
      default:
        return formatters_formatTimezone(timezoneOffset, ':')
    }
  },

  // Timezone (GMT)
  O: function (date, token, localize, options) {
    var timezoneOffset = getTimeZoneOffset(options.timeZone, options._originalDate || date)

    switch (token) {
      // Short
      case 'O':
      case 'OO':
      case 'OOO':
        return 'GMT' + formatters_formatTimezoneShort(timezoneOffset, ':')
      // Long
      case 'OOOO':
      default:
        return 'GMT' + formatters_formatTimezone(timezoneOffset, ':')
    }
  },

  // Timezone (specific non-location)
  z: function (date, token, localize, options) {
    var originalDate = options._originalDate || date

    switch (token) {
      // Short
      case 'z':
      case 'zz':
      case 'zzz':
        return tzIntlTimeZoneName('short', originalDate, options)
      // Long
      case 'zzzz':
      default:
        return tzIntlTimeZoneName('long', originalDate, options)
    }
  },
}

function getTimeZoneOffset(timeZone, originalDate) {
  var timeZoneOffset = timeZone
    ? tzParseTimezone(timeZone, originalDate, true) / formatters_MILLISECONDS_IN_MINUTE
    : originalDate.getTimezoneOffset()
  if (Number.isNaN(timeZoneOffset)) {
    throw new RangeError('Invalid time zone specified: ' + timeZone)
  }
  return timeZoneOffset
}

function formatters_addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? '-' : ''
  var output = Math.abs(number).toString()
  while (output.length < targetLength) {
    output = '0' + output
  }
  return sign + output
}

function formatters_formatTimezone(offset, dirtyDelimeter) {
  var delimeter = dirtyDelimeter || ''
  var sign = offset > 0 ? '-' : '+'
  var absOffset = Math.abs(offset)
  var hours = formatters_addLeadingZeros(Math.floor(absOffset / 60), 2)
  var minutes = formatters_addLeadingZeros(Math.floor(absOffset % 60), 2)
  return sign + hours + delimeter + minutes
}

function formatters_formatTimezoneWithOptionalMinutes(offset, dirtyDelimeter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? '-' : '+'
    return sign + formatters_addLeadingZeros(Math.abs(offset) / 60, 2)
  }
  return formatters_formatTimezone(offset, dirtyDelimeter)
}

function formatters_formatTimezoneShort(offset, dirtyDelimeter) {
  var sign = offset > 0 ? '-' : '+'
  var absOffset = Math.abs(offset)
  var hours = Math.floor(absOffset / 60)
  var minutes = absOffset % 60
  if (minutes === 0) {
    return sign + String(hours)
  }
  var delimeter = dirtyDelimeter || ''
  return sign + String(hours) + delimeter + formatters_addLeadingZeros(minutes, 2)
}

/* harmony default export */ var esm_format_formatters = (format_formatters_formatters);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/_lib/toInteger/index.js
var _lib_toInteger = __webpack_require__("yuhP");
var toInteger_default = /*#__PURE__*/__webpack_require__.n(_lib_toInteger);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds/index.js
var _lib_getTimezoneOffsetInMilliseconds = __webpack_require__("l/Ck");
var getTimezoneOffsetInMilliseconds_default = /*#__PURE__*/__webpack_require__.n(_lib_getTimezoneOffsetInMilliseconds);

// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns-tz/esm/_lib/tzPattern/index.js
/** Regex to identify the presence of a time zone specifier in a date string */
var tzPattern = /(Z|[+-]\d{2}(?::?\d{2})?| UTC| [a-zA-Z]+\/[a-zA-Z_]+(?:\/[a-zA-Z_]+)?)$/

/* harmony default export */ var _lib_tzPattern = (tzPattern);

// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns-tz/esm/toDate/index.js





var toDate_MILLISECONDS_IN_HOUR = 3600000
var toDate_MILLISECONDS_IN_MINUTE = 60000
var DEFAULT_ADDITIONAL_DIGITS = 2

var toDate_patterns = {
  dateTimePattern: /^([0-9W+-]+)(T| )(.*)/,
  datePattern: /^([0-9W+-]+)(.*)/,
  plainTime: /:/,

  // year tokens
  YY: /^(\d{2})$/,
  YYY: [
    /^([+-]\d{2})$/, // 0 additional digits
    /^([+-]\d{3})$/, // 1 additional digit
    /^([+-]\d{4})$/, // 2 additional digits
  ],
  YYYY: /^(\d{4})/,
  YYYYY: [
    /^([+-]\d{4})/, // 0 additional digits
    /^([+-]\d{5})/, // 1 additional digit
    /^([+-]\d{6})/, // 2 additional digits
  ],

  // date tokens
  MM: /^-(\d{2})$/,
  DDD: /^-?(\d{3})$/,
  MMDD: /^-?(\d{2})-?(\d{2})$/,
  Www: /^-?W(\d{2})$/,
  WwwD: /^-?W(\d{2})-?(\d{1})$/,

  HH: /^(\d{2}([.,]\d*)?)$/,
  HHMM: /^(\d{2}):?(\d{2}([.,]\d*)?)$/,
  HHMMSS: /^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,

  // time zone tokens (to identify the presence of a tz)
  timeZone: _lib_tzPattern,
}

/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If an argument is a string, the function tries to parse it.
 * Function accepts complete ISO 8601 formats as well as partial implementations.
 * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
 * If the function cannot parse the string or the values are invalid, it returns Invalid Date.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.
 *
 * @param {Date|String|Number} argument - the value to convert
 * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
 * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format
 * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
 *
 * @example
 * // Convert string '2014-02-11T11:30:30' to date:
 * var result = toDate('2014-02-11T11:30:30')
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert string '+02014101' to date,
 * // if the additional number of digits in the extended year format is 1:
 * var result = toDate('+02014101', {additionalDigits: 1})
 * //=> Fri Apr 11 2014 00:00:00
 */
function toDate_toDate(argument, dirtyOptions) {
  if (arguments.length < 1) {
    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')
  }

  if (argument === null) {
    return new Date(NaN)
  }

  var options = dirtyOptions || {}

  var additionalDigits =
    options.additionalDigits == null
      ? DEFAULT_ADDITIONAL_DIGITS
      : toInteger_default()(options.additionalDigits)
  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
    throw new RangeError('additionalDigits must be 0, 1 or 2')
  }

  // Clone the date
  if (
    argument instanceof Date ||
    (typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]')
  ) {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new Date(argument.getTime())
  } else if (
    typeof argument === 'number' ||
    Object.prototype.toString.call(argument) === '[object Number]'
  ) {
    return new Date(argument)
  } else if (
    !(
      typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]'
    )
  ) {
    return new Date(NaN)
  }

  var dateStrings = splitDateString(argument)

  var parseYearResult = parseYear(dateStrings.date, additionalDigits)
  var year = parseYearResult.year
  var restDateString = parseYearResult.restDateString

  var date = parseDate(restDateString, year)

  if (isNaN(date)) {
    return new Date(NaN)
  }

  if (date) {
    var timestamp = date.getTime()
    var time = 0
    var offset

    if (dateStrings.time) {
      time = parseTime(dateStrings.time)

      if (isNaN(time)) {
        return new Date(NaN)
      }
    }

    if (dateStrings.timeZone || options.timeZone) {
      offset = tzParseTimezone(dateStrings.timeZone || options.timeZone, new Date(timestamp + time))
      if (isNaN(offset)) {
        return new Date(NaN)
      }
    } else {
      // get offset accurate to hour in time zones that change offset
      offset = getTimezoneOffsetInMilliseconds_default()(new Date(timestamp + time))
      offset = getTimezoneOffsetInMilliseconds_default()(new Date(timestamp + time + offset))
    }

    return new Date(timestamp + time + offset)
  } else {
    return new Date(NaN)
  }
}

function splitDateString(dateString) {
  var dateStrings = {}
  var parts = toDate_patterns.dateTimePattern.exec(dateString)
  var timeString

  if (!parts) {
    parts = toDate_patterns.datePattern.exec(dateString)
    if (parts) {
      dateStrings.date = parts[1]
      timeString = parts[2]
    } else {
      dateStrings.date = null
      timeString = dateString
    }
  } else {
    dateStrings.date = parts[1]
    timeString = parts[3]
  }

  if (timeString) {
    var token = toDate_patterns.timeZone.exec(timeString)
    if (token) {
      dateStrings.time = timeString.replace(token[1], '')
      dateStrings.timeZone = token[1].trim()
    } else {
      dateStrings.time = timeString
    }
  }

  return dateStrings
}

function parseYear(dateString, additionalDigits) {
  var patternYYY = toDate_patterns.YYY[additionalDigits]
  var patternYYYYY = toDate_patterns.YYYYY[additionalDigits]

  var token

  // YYYY or ±YYYYY
  token = toDate_patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString)
  if (token) {
    var yearString = token[1]
    return {
      year: parseInt(yearString, 10),
      restDateString: dateString.slice(yearString.length),
    }
  }

  // YY or ±YYY
  token = toDate_patterns.YY.exec(dateString) || patternYYY.exec(dateString)
  if (token) {
    var centuryString = token[1]
    return {
      year: parseInt(centuryString, 10) * 100,
      restDateString: dateString.slice(centuryString.length),
    }
  }

  // Invalid ISO-formatted year
  return {
    year: null,
  }
}

function parseDate(dateString, year) {
  // Invalid ISO-formatted year
  if (year === null) {
    return null
  }

  var token
  var date
  var month
  var week

  // YYYY
  if (dateString.length === 0) {
    date = new Date(0)
    date.setUTCFullYear(year)
    return date
  }

  // YYYY-MM
  token = toDate_patterns.MM.exec(dateString)
  if (token) {
    date = new Date(0)
    month = parseInt(token[1], 10) - 1

    if (!validateDate(year, month)) {
      return new Date(NaN)
    }

    date.setUTCFullYear(year, month)
    return date
  }

  // YYYY-DDD or YYYYDDD
  token = toDate_patterns.DDD.exec(dateString)
  if (token) {
    date = new Date(0)
    var dayOfYear = parseInt(token[1], 10)

    if (!validateDayOfYearDate(year, dayOfYear)) {
      return new Date(NaN)
    }

    date.setUTCFullYear(year, 0, dayOfYear)
    return date
  }

  // yyyy-MM-dd or YYYYMMDD
  token = toDate_patterns.MMDD.exec(dateString)
  if (token) {
    date = new Date(0)
    month = parseInt(token[1], 10) - 1
    var day = parseInt(token[2], 10)

    if (!validateDate(year, month, day)) {
      return new Date(NaN)
    }

    date.setUTCFullYear(year, month, day)
    return date
  }

  // YYYY-Www or YYYYWww
  token = toDate_patterns.Www.exec(dateString)
  if (token) {
    week = parseInt(token[1], 10) - 1

    if (!validateWeekDate(year, week)) {
      return new Date(NaN)
    }

    return dayOfISOWeekYear(year, week)
  }

  // YYYY-Www-D or YYYYWwwD
  token = toDate_patterns.WwwD.exec(dateString)
  if (token) {
    week = parseInt(token[1], 10) - 1
    var dayOfWeek = parseInt(token[2], 10) - 1

    if (!validateWeekDate(year, week, dayOfWeek)) {
      return new Date(NaN)
    }

    return dayOfISOWeekYear(year, week, dayOfWeek)
  }

  // Invalid ISO-formatted date
  return null
}

function parseTime(timeString) {
  var token
  var hours
  var minutes

  // hh
  token = toDate_patterns.HH.exec(timeString)
  if (token) {
    hours = parseFloat(token[1].replace(',', '.'))

    if (!validateTime(hours)) {
      return NaN
    }

    return (hours % 24) * toDate_MILLISECONDS_IN_HOUR
  }

  // hh:mm or hhmm
  token = toDate_patterns.HHMM.exec(timeString)
  if (token) {
    hours = parseInt(token[1], 10)
    minutes = parseFloat(token[2].replace(',', '.'))

    if (!validateTime(hours, minutes)) {
      return NaN
    }

    return (hours % 24) * toDate_MILLISECONDS_IN_HOUR + minutes * toDate_MILLISECONDS_IN_MINUTE
  }

  // hh:mm:ss or hhmmss
  token = toDate_patterns.HHMMSS.exec(timeString)
  if (token) {
    hours = parseInt(token[1], 10)
    minutes = parseInt(token[2], 10)
    var seconds = parseFloat(token[3].replace(',', '.'))

    if (!validateTime(hours, minutes, seconds)) {
      return NaN
    }

    return (hours % 24) * toDate_MILLISECONDS_IN_HOUR + minutes * toDate_MILLISECONDS_IN_MINUTE + seconds * 1000
  }

  // Invalid ISO-formatted time
  return null
}

function dayOfISOWeekYear(isoWeekYear, week, day) {
  week = week || 0
  day = day || 0
  var date = new Date(0)
  date.setUTCFullYear(isoWeekYear, 0, 4)
  var fourthOfJanuaryDay = date.getUTCDay() || 7
  var diff = week * 7 + day + 1 - fourthOfJanuaryDay
  date.setUTCDate(date.getUTCDate() + diff)
  return date
}

// Validation functions

var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

function isLeapYearIndex(year) {
  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)
}

function validateDate(year, month, date) {
  if (month < 0 || month > 11) {
    return false
  }

  if (date != null) {
    if (date < 1) {
      return false
    }

    var isLeapYear = isLeapYearIndex(year)
    if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {
      return false
    }
    if (!isLeapYear && date > DAYS_IN_MONTH[month]) {
      return false
    }
  }

  return true
}

function validateDayOfYearDate(year, dayOfYear) {
  if (dayOfYear < 1) {
    return false
  }

  var isLeapYear = isLeapYearIndex(year)
  if (isLeapYear && dayOfYear > 366) {
    return false
  }
  if (!isLeapYear && dayOfYear > 365) {
    return false
  }

  return true
}

function validateWeekDate(year, week, day) {
  if (week < 0 || week > 52) {
    return false
  }

  if (day != null && (day < 0 || day > 6)) {
    return false
  }

  return true
}

function validateTime(hours, minutes, seconds) {
  if (hours != null && (hours < 0 || hours >= 25)) {
    return false
  }

  if (minutes != null && (minutes < 0 || minutes >= 60)) {
    return false
  }

  if (seconds != null && (seconds < 0 || seconds >= 60)) {
    return false
  }

  return true
}

// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns-tz/esm/format/index.js




var tzFormattingTokensRegExp = /([xXOz]+)|''|'(''|[^'])+('|$)/g

/**
 * @name format
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://git.io/fxCyr
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 8     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 8     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | AM, PM                          | a..aaa  | AM, PM                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 1, 2, ..., 11, 0                  |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 0001, ..., 999               |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | PDT, EST, CEST                    | 6     |
 * |                                 | zzzz    | Pacific Daylight Time             | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 05/29/1453                        | 7     |
 * |                                 | PP      | May 29, 1453                      | 7     |
 * |                                 | PPP     | May 29th, 1453                    | 7     |
 * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |
 * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
 *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
 *
 * 6. Specific non-location timezones are created using the Intl browser API. The output is determined by the
 *    preferred standard of the current locale (en-US by default) which may not always give the expected result.
 *    For this reason it is recommended to supply a `locale` in the format options when formatting a time zone name.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. These tokens are often confused with others. See: https://git.io/fxCyr
 *
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole
 *   library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - The second argument is now required for the sake of explicitness.
 *
 *   ```javascript
 *   // Before v2.0.0
 *   format(new Date(2016, 0, 1))
 *
 *   // v2.0.0 onward
 *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
 *   ```
 *
 * - New format string API for `format` function
 *   which is based on [Unicode Technical Standard
 *   #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table). See [this
 *   post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
 *
 * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
 *
 * @param {Date|String|Number} date - the original date
 * @param {String} format - the string of tokens
 * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
 * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link
 *   https://date-fns.org/docs/toDate}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See
 *   [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {Boolean} [options.awareOfUnicodeTokens=false] - if true, allows usage of Unicode tokens causes confusion:
 *   - Some of the day of year tokens (`D`, `DD`) that are confused with the day of month tokens (`d`, `dd`).
 *   - Some of the local week-numbering year tokens (`YY`, `YYYY`) that are confused with the calendar year tokens
 *   (`yy`, `yyyy`). See: https://git.io/fxCyr
 * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.
 * @returns {String} the formatted date string
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
 * @throws {RangeError} `options.locale` must contain `localize` property
 * @throws {RangeError} `options.locale` must contain `formatLong` property
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} `options.awareOfUnicodeTokens` must be set to `true` to use `XX` token; see:
 *   https://git.io/fxCyr
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
 *   locale: eoLocale
 * })
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
 * //=> "3 o'clock"
 */
function esm_format_format(dirtyDate, dirtyFormatStr, dirtyOptions) {
  var formatStr = String(dirtyFormatStr)
  var options = dirtyOptions || {}

  var matches = formatStr.match(tzFormattingTokensRegExp)
  if (matches) {
    var date = toDate_toDate(dirtyDate, options)
    // Work through each match and replace the tz token in the format string with the quoted
    // formatted time zone so the remaining tokens can be filled in by date-fns#format.
    formatStr = matches.reduce(function (result, token) {
      if (token[0] === "'") {
        return result // This is a quoted portion, matched only to ensure we don't match inside it
      }
      var pos = result.indexOf(token)
      var precededByQuotedSection = result[pos - 1] === "'"
      var replaced = result.replace(
        token,
        "'" + esm_format_formatters[token[0]](date, token, null, options) + "'"
      )
      // If the replacement results in two adjoining quoted strings, the back to back quotes
      // are removed so it doesn't look like an escaped quote.
      return precededByQuotedSection
        ? replaced.substring(0, pos - 1) + replaced.substring(pos + 1)
        : replaced
    }, formatStr)
  }

  return format_default()(dirtyDate, formatStr, options)
}

// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns-tz/esm/utcToZonedTime/index.js



/**
 * @name utcToZonedTime
 * @category Time Zone Helpers
 * @summary Get a date/time representing local time in a given time zone from the UTC date
 *
 * @description
 * Returns a date instance with values representing the local time in the time zone
 * specified of the UTC time from the date provided. In other words, when the new date
 * is formatted it will show the equivalent hours in the target time zone regardless
 * of the current system time zone.
 *
 * @param {Date|String|Number} date - the date with the relevant UTC time
 * @param {String} timeZone - the time zone to get local time for, can be an offset or IANA time zone
 * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
 * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * @returns {Date} the new date with the equivalent time in the time zone
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
 *
 * @example
 * // In June 10am UTC is 6am in New York (-04:00)
 * const result = utcToZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')
 * //=> Jun 25 2014 06:00:00
 */
function utcToZonedTime(dirtyDate, timeZone, options) {
  var date = toDate_toDate(dirtyDate, options)

  var offsetMilliseconds = tzParseTimezone(timeZone, date, true)

  var d = new Date(date.getTime() - offsetMilliseconds)

  return new Date(
    d.getUTCFullYear(),
    d.getUTCMonth(),
    d.getUTCDate(),
    d.getUTCHours(),
    d.getUTCMinutes(),
    d.getUTCSeconds(),
    d.getUTCMilliseconds()
  )
}

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/_lib/cloneObject/index.js
var cloneObject = __webpack_require__("/urY");
var cloneObject_default = /*#__PURE__*/__webpack_require__.n(cloneObject);

// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns-tz/esm/zonedTimeToUtc/index.js






/**
 * @name zonedTimeToUtc
 * @category Time Zone Helpers
 * @summary Get the UTC date/time from a date representing local time in a given time zone
 *
 * @description
 * Returns a date instance with the UTC time of the provided date of which the values
 * represented the local time in the time zone specified. In other words, if the input
 * date represented local time in time time zone, the timestamp of the output date will
 * give the equivalent UTC of that local time regardless of the current system time zone.
 *
 * @param {Date|String|Number} date - the date with values representing the local time
 * @param {String} timeZone - the time zone of this local time, can be an offset or IANA time zone
 * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
 * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * @returns {Date} the new date with the equivalent time in the time zone
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
 *
 * @example
 * // In June 10am in Los Angeles is 5pm UTC
 * const result = zonedTimeToUtc(new Date(2014, 5, 25, 10, 0, 0), 'America/Los_Angeles')
 * //=> 2014-06-25T17:00:00.000Z
 */
function zonedTimeToUtc(date, timeZone, options) {
  if (typeof date === 'string' && !date.match(_lib_tzPattern)) {
    var extendedOptions = cloneObject_default()(options)
    extendedOptions.timeZone = timeZone
    return toDate_toDate(date, extendedOptions)
  }

  var d = toDate_toDate(date, options)

  var utc = newDateUTC(
    d.getFullYear(),
    d.getMonth(),
    d.getDate(),
    d.getHours(),
    d.getMinutes(),
    d.getSeconds(),
    d.getMilliseconds()
  ).getTime()

  var offsetMilliseconds = tzParseTimezone(timeZone, new Date(utc))

  return new Date(utc + offsetMilliseconds)
}

// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns-tz/esm/index.js
// This file is generated automatically by `scripts/build/indices.js`. Please, don't change it.








// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/assign/index.js
function assign_assign(target, dirtyObject) {
  if (target == null) {
    throw new TypeError('assign requires that input parameter not be null or undefined');
  }

  dirtyObject = dirtyObject || {};

  for (var property in dirtyObject) {
    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {
      target[property] = dirtyObject[property];
    }
  }

  return target;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/setUTCDay/index.js


 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {
  requiredArgs(2, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/setUTCISODay/index.js


 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);

  if (day % 7 === 0) {
    day = day - 7;
  }

  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js



 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/_lib/setUTCWeek/index.js



 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/parse/_lib/parsers/index.js







var parsers_MILLISECONDS_IN_HOUR = 3600000;
var parsers_MILLISECONDS_IN_MINUTE = 60000;
var MILLISECONDS_IN_SECOND = 1000;
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/ // 0 to 9999, -0 to -9999

};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

function parseNumericPattern(pattern, string, valueCallback) {
  var matchResult = string.match(pattern);

  if (!matchResult) {
    return null;
  }

  var value = parseInt(matchResult[0], 10);
  return {
    value: valueCallback ? valueCallback(value) : value,
    rest: string.slice(matchResult[0].length)
  };
}

function parseTimezonePattern(pattern, string) {
  var matchResult = string.match(pattern);

  if (!matchResult) {
    return null;
  } // Input is 'Z'


  if (matchResult[0] === 'Z') {
    return {
      value: 0,
      rest: string.slice(1)
    };
  }

  var sign = matchResult[1] === '+' ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * parsers_MILLISECONDS_IN_HOUR + minutes * parsers_MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),
    rest: string.slice(matchResult[0].length)
  };
}

function parseAnyDigitsSigned(string, valueCallback) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);
}

function parseNDigits(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);

    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);

    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);

    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);

    default:
      return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), string, valueCallback);
  }
}

function parseNDigitsSigned(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);

    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);

    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);

    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);

    default:
      return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), string, valueCallback);
  }
}

function dayPeriodEnumToHours(enumValue) {
  switch (enumValue) {
    case 'morning':
      return 4;

    case 'evening':
      return 17;

    case 'pm':
    case 'noon':
    case 'afternoon':
      return 12;

    case 'am':
    case 'midnight':
    case 'night':
    default:
      return 0;
  }
}

function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0; // Absolute number of the current year:
  // 1 -> 1 AC
  // 0 -> 1 BC
  // -1 -> 2 BC

  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;

  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }

  return isCommonEra ? result : 1 - result;
}

var parsers_DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var parsers_DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation

function parsers_isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
 * |  p  |                                |  P  |                                |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 */


var parsers = {
  // Era
  G: {
    priority: 140,
    parse: function (string, token, match, _options) {
      switch (token) {
        // AD, BC
        case 'G':
        case 'GG':
        case 'GGG':
          return match.era(string, {
            width: 'abbreviated'
          }) || match.era(string, {
            width: 'narrow'
          });
        // A, B

        case 'GGGGG':
          return match.era(string, {
            width: 'narrow'
          });
        // Anno Domini, Before Christ

        case 'GGGG':
        default:
          return match.era(string, {
            width: 'wide'
          }) || match.era(string, {
            width: 'abbreviated'
          }) || match.era(string, {
            width: 'narrow'
          });
      }
    },
    set: function (date, flags, value, _options) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['R', 'u', 't', 'T']
  },
  // Year
  y: {
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
    priority: 130,
    parse: function (string, token, match, _options) {
      var valueCallback = function (year) {
        return {
          year: year,
          isTwoDigitYear: token === 'yy'
        };
      };

      switch (token) {
        case 'y':
          return parseNDigits(4, string, valueCallback);

        case 'yo':
          return match.ordinalNumber(string, {
            unit: 'year',
            valueCallback: valueCallback
          });

        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function (_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function (date, flags, value, _options) {
      var currentYear = date.getUTCFullYear();

      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }

      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']
  },
  // Local week-numbering year
  Y: {
    priority: 130,
    parse: function (string, token, match, _options) {
      var valueCallback = function (year) {
        return {
          year: year,
          isTwoDigitYear: token === 'YY'
        };
      };

      switch (token) {
        case 'Y':
          return parseNDigits(4, string, valueCallback);

        case 'Yo':
          return match.ordinalNumber(string, {
            unit: 'year',
            valueCallback: valueCallback
          });

        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function (_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function (date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);

      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }

      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    },
    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']
  },
  // ISO week-numbering year
  R: {
    priority: 130,
    parse: function (string, token, _match, _options) {
      if (token === 'R') {
        return parseNDigitsSigned(4, string);
      }

      return parseNDigitsSigned(token.length, string);
    },
    set: function (_date, _flags, value, _options) {
      var firstWeekOfYear = new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    },
    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']
  },
  // Extended year
  u: {
    priority: 130,
    parse: function (string, token, _match, _options) {
      if (token === 'u') {
        return parseNDigitsSigned(4, string);
      }

      return parseNDigitsSigned(token.length, string);
    },
    set: function (date, _flags, value, _options) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']
  },
  // Quarter
  Q: {
    priority: 120,
    parse: function (string, token, match, _options) {
      switch (token) {
        // 1, 2, 3, 4
        case 'Q':
        case 'QQ':
          // 01, 02, 03, 04
          return parseNDigits(token.length, string);
        // 1st, 2nd, 3rd, 4th

        case 'Qo':
          return match.ordinalNumber(string, {
            unit: 'quarter'
          });
        // Q1, Q2, Q3, Q4

        case 'QQQ':
          return match.quarter(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.quarter(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)

        case 'QQQQQ':
          return match.quarter(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // 1st quarter, 2nd quarter, ...

        case 'QQQQ':
        default:
          return match.quarter(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.quarter(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.quarter(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Stand-alone quarter
  q: {
    priority: 120,
    parse: function (string, token, match, _options) {
      switch (token) {
        // 1, 2, 3, 4
        case 'q':
        case 'qq':
          // 01, 02, 03, 04
          return parseNDigits(token.length, string);
        // 1st, 2nd, 3rd, 4th

        case 'qo':
          return match.ordinalNumber(string, {
            unit: 'quarter'
          });
        // Q1, Q2, Q3, Q4

        case 'qqq':
          return match.quarter(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.quarter(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)

        case 'qqqqq':
          return match.quarter(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // 1st quarter, 2nd quarter, ...

        case 'qqqq':
        default:
          return match.quarter(string, {
            width: 'wide',
            context: 'standalone'
          }) || match.quarter(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.quarter(string, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Month
  M: {
    priority: 110,
    parse: function (string, token, match, _options) {
      var valueCallback = function (value) {
        return value - 1;
      };

      switch (token) {
        // 1, 2, ..., 12
        case 'M':
          return parseNumericPattern(numericPatterns.month, string, valueCallback);
        // 01, 02, ..., 12

        case 'MM':
          return parseNDigits(2, string, valueCallback);
        // 1st, 2nd, ..., 12th

        case 'Mo':
          return match.ordinalNumber(string, {
            unit: 'month',
            valueCallback: valueCallback
          });
        // Jan, Feb, ..., Dec

        case 'MMM':
          return match.month(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.month(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // J, F, ..., D

        case 'MMMMM':
          return match.month(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // January, February, ..., December

        case 'MMMM':
        default:
          return match.month(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.month(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.month(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Stand-alone month
  L: {
    priority: 110,
    parse: function (string, token, match, _options) {
      var valueCallback = function (value) {
        return value - 1;
      };

      switch (token) {
        // 1, 2, ..., 12
        case 'L':
          return parseNumericPattern(numericPatterns.month, string, valueCallback);
        // 01, 02, ..., 12

        case 'LL':
          return parseNDigits(2, string, valueCallback);
        // 1st, 2nd, ..., 12th

        case 'Lo':
          return match.ordinalNumber(string, {
            unit: 'month',
            valueCallback: valueCallback
          });
        // Jan, Feb, ..., Dec

        case 'LLL':
          return match.month(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.month(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // J, F, ..., D

        case 'LLLLL':
          return match.month(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // January, February, ..., December

        case 'LLLL':
        default:
          return match.month(string, {
            width: 'wide',
            context: 'standalone'
          }) || match.month(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.month(string, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Local week of year
  w: {
    priority: 100,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'w':
          return parseNumericPattern(numericPatterns.week, string);

        case 'wo':
          return match.ordinalNumber(string, {
            unit: 'week'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function (date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    },
    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']
  },
  // ISO week of year
  I: {
    priority: 100,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'I':
          return parseNumericPattern(numericPatterns.week, string);

        case 'Io':
          return match.ordinalNumber(string, {
            unit: 'week'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function (date, _flags, value, options) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);
    },
    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']
  },
  // Day of the month
  d: {
    priority: 90,
    subPriority: 1,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'd':
          return parseNumericPattern(numericPatterns.date, string);

        case 'do':
          return match.ordinalNumber(string, {
            unit: 'date'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear = parsers_isLeapYearIndex(year);
      var month = date.getUTCMonth();

      if (isLeapYear) {
        return value >= 1 && value <= parsers_DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= parsers_DAYS_IN_MONTH[month];
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Day of year
  D: {
    priority: 90,
    subPriority: 1,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'D':
        case 'DD':
          return parseNumericPattern(numericPatterns.dayOfYear, string);

        case 'Do':
          return match.ordinalNumber(string, {
            unit: 'date'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear = parsers_isLeapYearIndex(year);

      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']
  },
  // Day of week
  E: {
    priority: 90,
    parse: function (string, token, match, _options) {
      switch (token) {
        // Tue
        case 'E':
        case 'EE':
        case 'EEE':
          return match.day(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // T

        case 'EEEEE':
          return match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu

        case 'EEEEEE':
          return match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tuesday

        case 'EEEE':
        default:
          return match.day(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.day(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function (date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']
  },
  // Local day of week
  e: {
    priority: 90,
    parse: function (string, token, match, options) {
      var valueCallback = function (value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };

      switch (token) {
        // 3
        case 'e':
        case 'ee':
          // 03
          return parseNDigits(token.length, string, valueCallback);
        // 3rd

        case 'eo':
          return match.ordinalNumber(string, {
            unit: 'day',
            valueCallback: valueCallback
          });
        // Tue

        case 'eee':
          return match.day(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // T

        case 'eeeee':
          return match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu

        case 'eeeeee':
          return match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tuesday

        case 'eeee':
        default:
          return match.day(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.day(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function (date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']
  },
  // Stand-alone local day of week
  c: {
    priority: 90,
    parse: function (string, token, match, options) {
      var valueCallback = function (value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };

      switch (token) {
        // 3
        case 'c':
        case 'cc':
          // 03
          return parseNDigits(token.length, string, valueCallback);
        // 3rd

        case 'co':
          return match.ordinalNumber(string, {
            unit: 'day',
            valueCallback: valueCallback
          });
        // Tue

        case 'ccc':
          return match.day(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.day(string, {
            width: 'short',
            context: 'standalone'
          }) || match.day(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // T

        case 'ccccc':
          return match.day(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // Tu

        case 'cccccc':
          return match.day(string, {
            width: 'short',
            context: 'standalone'
          }) || match.day(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // Tuesday

        case 'cccc':
        default:
          return match.day(string, {
            width: 'wide',
            context: 'standalone'
          }) || match.day(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.day(string, {
            width: 'short',
            context: 'standalone'
          }) || match.day(string, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function (date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']
  },
  // ISO day of week
  i: {
    priority: 90,
    parse: function (string, token, match, _options) {
      var valueCallback = function (value) {
        if (value === 0) {
          return 7;
        }

        return value;
      };

      switch (token) {
        // 2
        case 'i':
        case 'ii':
          // 02
          return parseNDigits(token.length, string);
        // 2nd

        case 'io':
          return match.ordinalNumber(string, {
            unit: 'day'
          });
        // Tue

        case 'iii':
          return match.day(string, {
            width: 'abbreviated',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'short',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting',
            valueCallback: valueCallback
          });
        // T

        case 'iiiii':
          return match.day(string, {
            width: 'narrow',
            context: 'formatting',
            valueCallback: valueCallback
          });
        // Tu

        case 'iiiiii':
          return match.day(string, {
            width: 'short',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting',
            valueCallback: valueCallback
          });
        // Tuesday

        case 'iiii':
        default:
          return match.day(string, {
            width: 'wide',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'abbreviated',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'short',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting',
            valueCallback: valueCallback
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 7;
    },
    set: function (date, _flags, value, options) {
      date = setUTCISODay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']
  },
  // AM or PM
  a: {
    priority: 80,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'a':
        case 'aa':
        case 'aaa':
          return match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'aaaaa':
          return match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'aaaa':
        default:
          return match.dayPeriod(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['b', 'B', 'H', 'k', 't', 'T']
  },
  // AM, PM, midnight
  b: {
    priority: 80,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'b':
        case 'bb':
        case 'bbb':
          return match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'bbbbb':
          return match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'bbbb':
        default:
          return match.dayPeriod(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'B', 'H', 'k', 't', 'T']
  },
  // in the morning, in the afternoon, in the evening, at night
  B: {
    priority: 80,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'B':
        case 'BB':
        case 'BBB':
          return match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'BBBBB':
          return match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'BBBB':
        default:
          return match.dayPeriod(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'b', 't', 'T']
  },
  // Hour [1-12]
  h: {
    priority: 70,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'h':
          return parseNumericPattern(numericPatterns.hour12h, string);

        case 'ho':
          return match.ordinalNumber(string, {
            unit: 'hour'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 12;
    },
    set: function (date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;

      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }

      return date;
    },
    incompatibleTokens: ['H', 'K', 'k', 't', 'T']
  },
  // Hour [0-23]
  H: {
    priority: 70,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'H':
          return parseNumericPattern(numericPatterns.hour23h, string);

        case 'Ho':
          return match.ordinalNumber(string, {
            unit: 'hour'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 23;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']
  },
  // Hour [0-11]
  K: {
    priority: 70,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'K':
          return parseNumericPattern(numericPatterns.hour11h, string);

        case 'Ko':
          return match.ordinalNumber(string, {
            unit: 'hour'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function (date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;

      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }

      return date;
    },
    incompatibleTokens: ['h', 'H', 'k', 't', 'T']
  },
  // Hour [1-24]
  k: {
    priority: 70,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'k':
          return parseNumericPattern(numericPatterns.hour24h, string);

        case 'ko':
          return match.ordinalNumber(string, {
            unit: 'hour'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 24;
    },
    set: function (date, _flags, value, _options) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']
  },
  // Minute
  m: {
    priority: 60,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'm':
          return parseNumericPattern(numericPatterns.minute, string);

        case 'mo':
          return match.ordinalNumber(string, {
            unit: 'minute'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    },
    incompatibleTokens: ['t', 'T']
  },
  // Second
  s: {
    priority: 50,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 's':
          return parseNumericPattern(numericPatterns.second, string);

        case 'so':
          return match.ordinalNumber(string, {
            unit: 'second'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCSeconds(value, 0);
      return date;
    },
    incompatibleTokens: ['t', 'T']
  },
  // Fraction of second
  S: {
    priority: 30,
    parse: function (string, token, _match, _options) {
      var valueCallback = function (value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };

      return parseNDigits(token.length, string, valueCallback);
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMilliseconds(value);
      return date;
    },
    incompatibleTokens: ['t', 'T']
  },
  // Timezone (ISO-8601. +00:00 is `'Z'`)
  X: {
    priority: 10,
    parse: function (string, token, _match, _options) {
      switch (token) {
        case 'X':
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);

        case 'XX':
          return parseTimezonePattern(timezonePatterns.basic, string);

        case 'XXXX':
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);

        case 'XXXXX':
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);

        case 'XXX':
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function (date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }

      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ['t', 'T', 'x']
  },
  // Timezone (ISO-8601)
  x: {
    priority: 10,
    parse: function (string, token, _match, _options) {
      switch (token) {
        case 'x':
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);

        case 'xx':
          return parseTimezonePattern(timezonePatterns.basic, string);

        case 'xxxx':
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);

        case 'xxxxx':
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);

        case 'xxx':
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function (date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }

      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ['t', 'T', 'X']
  },
  // Seconds timestamp
  t: {
    priority: 40,
    parse: function (string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function (_date, _flags, value, _options) {
      return [new Date(value * 1000), {
        timestampIsSet: true
      }];
    },
    incompatibleTokens: '*'
  },
  // Milliseconds timestamp
  T: {
    priority: 20,
    parse: function (string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function (_date, _flags, value, _options) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    },
    incompatibleTokens: '*'
  }
};
/* harmony default export */ var _lib_parsers = (parsers);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/parse/index.js










var TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps

var parse_formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

var parse_longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var parse_escapedStringRegExp = /^'([^]*?)'?$/;
var parse_doubleQuoteRegExp = /''/g;
var notWhitespaceRegExp = /\S/;
var parse_unescapedLatinCharacterRegExp = /[a-zA-Z]/;
/**
 * @name parse
 * @category Common Helpers
 * @summary Parse the date.
 *
 * @description
 * Return the date parsed from string using the given format string.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://git.io/fxCyr
 *
 * The characters in the format string wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 *
 * Format of the format string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 5 below the table).
 *
 * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited
 * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:
 *
 * ```javascript
 * parse('23 AM', 'HH a', new Date())
 * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time
 * ```
 *
 * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true
 *
 * Accepted format string patterns:
 * | Unit                            |Prior| Pattern | Result examples                   | Notes |
 * |---------------------------------|-----|---------|-----------------------------------|-------|
 * | Era                             | 140 | G..GGG  | AD, BC                            |       |
 * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 |     | GGGGG   | A, B                              |       |
 * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
 * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
 * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
 * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
 * |                                 |     | yyyyy   | ...                               | 2,4   |
 * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
 * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
 * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
 * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
 * |                                 |     | YYYYY   | ...                               | 2,4   |
 * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
 * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
 * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
 * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
 * |                                 |     | RRRRR   | ...                               | 2,4,5 |
 * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
 * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
 * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
 * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
 * |                                 |     | uuuuu   | ...                               | 2,4   |
 * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
 * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
 * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
 * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | qq      | 01, 02, 03, 04                    |       |
 * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
 * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
 * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | MM      | 01, 02, ..., 12                   |       |
 * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | MMMM    | January, February, ..., December  | 2     |
 * |                                 |     | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
 * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | LL      | 01, 02, ..., 12                   |       |
 * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | LLLL    | January, February, ..., December  | 2     |
 * |                                 |     | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
 * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
 * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
 * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
 * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
 * |                                 |     | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |
 * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
 * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |
 * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 |     | DDDD    | ...                               | 2     |
 * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
 * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
 * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
 * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |
 * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
 * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
 * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |
 * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | ee      | 02, 03, ..., 01                   |       |
 * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | cc      | 02, 03, ..., 01                   |       |
 * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
 * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
 * |                                 |     | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
 * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 |     | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
 * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
 * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
 * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
 * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
 * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
 * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | mm      | 00, 01, ..., 59                   |       |
 * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
 * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | ss      | 00, 01, ..., 59                   |       |
 * | Seconds timestamp               |  40 | t       | 512969520                         |       |
 * |                                 |     | tt      | ...                               | 2     |
 * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |
 * |                                 |     | SS      | 00, 01, ..., 99                   |       |
 * |                                 |     | SSS     | 000, 001, ..., 999                |       |
 * |                                 |     | SSSS    | ...                               | 2     |
 * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |
 * |                                 |     | TT      | ...                               | 2     |
 * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |
 * |                                 |     | XX      | -0800, +0530, Z                   |       |
 * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |
 * |                                 |     | xx      | -0800, +0530, +0000               |       |
 * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |
 * |                                 |     | PP      | May 29, 1453                      |       |
 * |                                 |     | PPP     | May 29th, 1453                    |       |
 * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |
 * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |
 * |                                 |     | pp      | 12:00:00 AM                       |       |
 * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |
 * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |
 * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |
 * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular.
 *    In `format` function, they will produce different result:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 *    `parse` will try to match both formatting and stand-alone units interchangably.
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table:
 *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number
 *      as wide as the sequence
 *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.
 *      These variations are marked with "2" in the last column of the table.
 *
 * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 4. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:
 *
 *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`
 *
 *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`
 *
 *    while `uu` will just assign the year as is:
 *
 *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`
 *
 *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}
 *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).
 *
 * 5. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
 *
 * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
 *
 * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
 *    on the given locale.
 *
 *    using `en-US` locale: `P` => `MM/dd/yyyy`
 *    using `en-US` locale: `p` => `hh:mm a`
 *    using `pt-BR` locale: `P` => `dd/MM/yyyy`
 *    using `pt-BR` locale: `p` => `HH:mm`
 *
 * Values will be assigned to the date in the descending order of its unit's priority.
 * Units of an equal priority overwrite each other in the order of appearance.
 *
 * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),
 * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.
 *
 * `referenceDate` must be passed for correct work of the function.
 * If you're not sure which `referenceDate` to supply, create a new instance of Date:
 * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`
 * In this case parsing will be done in the context of the current date.
 * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,
 * then `Invalid Date` will be returned.
 *
 * The result may vary by locale.
 *
 * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.
 *
 * If parsing failed, `Invalid Date` will be returned.
 * Invalid Date is a Date, whose time value is NaN.
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - Old `parse` was renamed to `toDate`.
 *   Now `parse` is a new function which parses a string using a provided format.
 *
 *   ```javascript
 *   // Before v2.0.0
 *   parse('2016-01-01')
 *
 *   // v2.0.0 onward (toDate no longer accepts a string)
 *   toDate(1392098430000) // Unix to timestamp
 *   toDate(new Date(2014, 1, 11, 11, 30, 30)) // Cloning the date
 *   parse('2016-01-01', 'yyyy-MM-dd', new Date())
 *   ```
 *
 * @param {String} dateString - the string to parse
 * @param {String} formatString - the string of tokens
 * @param {Date|Number} referenceDate - defines values missing from the parsed dateString
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://git.io/fxCyr
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://git.io/fxCyr
 * @returns {Date} the parsed date
 * @throws {TypeError} 3 arguments required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} `options.locale` must contain `match` property
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Parse 11 February 2014 from middle-endian format:
 * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())
 * //=> Tue Feb 11 2014 00:00:00
 *
 * @example
 * // Parse 28th of February in Esperanto locale in the context of 2010 year:
 * import eo from 'date-fns/locale/eo'
 * var result = parse('28-a de februaro', "do 'de' MMMM", new Date(2010, 0, 1), {
 *   locale: eo
 * })
 * //=> Sun Feb 28 2010 00:00:00
 */

function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var options = dirtyOptions || {};
  var locale = options.locale || en_US;

  if (!locale.match) {
    throw new RangeError('locale must contain match property');
  }

  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }

  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  if (formatString === '') {
    if (dateString === '') {
      return toDate(dirtyReferenceDate);
    } else {
      return new Date(NaN);
    }
  }

  var subFnOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale
  }; // If timezone isn't specified, it will be set to the system timezone

  var setters = [{
    priority: TIMEZONE_UNIT_PRIORITY,
    subPriority: -1,
    set: dateToSystemTimezone,
    index: 0
  }];
  var i;
  var tokens = formatString.match(parse_longFormattingTokensRegExp).map(function (substring) {
    var firstCharacter = substring[0];

    if (firstCharacter === 'p' || firstCharacter === 'P') {
      var longFormatter = format_longFormatters[firstCharacter];
      return longFormatter(substring, locale.formatLong, subFnOptions);
    }

    return substring;
  }).join('').match(parse_formattingTokensRegExp);
  var usedTokens = [];

  for (i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {
      throwProtectedError(token, formatString, dirtyDateString);
    }

    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {
      throwProtectedError(token, formatString, dirtyDateString);
    }

    var firstCharacter = token[0];
    var parser = _lib_parsers[firstCharacter];

    if (parser) {
      var incompatibleTokens = parser.incompatibleTokens;

      if (Array.isArray(incompatibleTokens)) {
        var incompatibleToken = void 0;

        for (var _i = 0; _i < usedTokens.length; _i++) {
          var usedToken = usedTokens[_i].token;

          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {
            incompatibleToken = usedTokens[_i];
            break;
          }
        }

        if (incompatibleToken) {
          throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
        }
      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {
        throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
      }

      usedTokens.push({
        token: firstCharacter,
        fullToken: token
      });
      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);

      if (!parseResult) {
        return new Date(NaN);
      }

      setters.push({
        priority: parser.priority,
        subPriority: parser.subPriority || 0,
        set: parser.set,
        validate: parser.validate,
        value: parseResult.value,
        index: setters.length
      });
      dateString = parseResult.rest;
    } else {
      if (firstCharacter.match(parse_unescapedLatinCharacterRegExp)) {
        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
      } // Replace two single quote characters with one single quote character


      if (token === "''") {
        token = "'";
      } else if (firstCharacter === "'") {
        token = parse_cleanEscapedString(token);
      } // Cut token from string, or, if string doesn't match the token, return Invalid Date


      if (dateString.indexOf(token) === 0) {
        dateString = dateString.slice(token.length);
      } else {
        return new Date(NaN);
      }
    }
  } // Check if the remaining input contains something other than whitespace


  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return new Date(NaN);
  }

  var uniquePrioritySetters = setters.map(function (setter) {
    return setter.priority;
  }).sort(function (a, b) {
    return b - a;
  }).filter(function (priority, index, array) {
    return array.indexOf(priority) === index;
  }).map(function (priority) {
    return setters.filter(function (setter) {
      return setter.priority === priority;
    }).sort(function (a, b) {
      return b.subPriority - a.subPriority;
    });
  }).map(function (setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);

  if (isNaN(date)) {
    return new Date(NaN);
  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37


  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};

  for (i = 0; i < uniquePrioritySetters.length; i++) {
    var setter = uniquePrioritySetters[i];

    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {
      return new Date(NaN);
    }

    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)

    if (result[0]) {
      utcDate = result[0];
      assign_assign(flags, result[1]); // Result is date
    } else {
      utcDate = result;
    }
  }

  return utcDate;
}

function dateToSystemTimezone(date, flags) {
  if (flags.timestampIsSet) {
    return date;
  }

  var convertedDate = new Date(0);
  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
  return convertedDate;
}

function parse_cleanEscapedString(input) {
  return input.match(parse_escapedStringRegExp)[1].replace(parse_doubleQuoteRegExp, "'");
}
// CONCATENATED MODULE: ../semi-foundation/utils/date-fns-extra.ts




/* eslint-disable max-len */

/* eslint-disable eqeqeq */


/**
 * Need to be IANA logo without daylight saving time
 */

const IANAOffsetMap = [[-11, ['Pacific/Midway']], [-10, ['Pacific/Honolulu']], [-9.5, ['Pacific/Marquesas']], [-9, ['Pacific/Gambier']], [-8, ['Pacific/Pitcairn']], [-7, ['America/Phoenix']], [-6, ['America/Tegucigalpa']], [-5, ['America/Bogota']], [-4, ['America/Puerto_Rico']], [-3.5, ['America/St_Johns']], [-3, ['America/Montevideo']], [-2, ['Atlantic/South_Georgia']], [-1, ['Atlantic/Cape_Verde']], [0, ['Africa/Accra']], [1, ['Africa/Bangui']], [2, ['Africa/Cairo']], [3, ['Asia/Bahrain', 'Indian/Antananarivo']], [3.5, ['Asia/Tehran']], [4, ['Asia/Dubai', 'Asia/Muscat']], [4.5, ['Asia/Kabul']], [5, ['Asia/Samarkand', 'Asia/Karachi']], [5.5, ['Asia/Kolkata']], [5.75, ['Asia/Kathmandu']], [6, ['Asia/Dhaka']], [6.5, ['Asia/Rangoon', 'Asia/Rangoon']], [7, ['Asia/Jakarta', 'Asia/Phnom_Penh', 'Asia/Bangkok']], [8, ['Asia/Shanghai', 'Asia/Singapore']], [8.75, ['Australia/Eucla']], [9, ['Asia/Tokyo', 'Asia/Seoul', 'Asia/Pyongyang']], [9.5, ['Australia/Darwin']], [10, ['Pacific/Guam']], [10.5, ['Australia/Adelaide']], [11, ['Pacific/Guadalcanal']], [12, ['Pacific/Funafuti']], [13, ['Pacific/Enderbury']], [13.75, ['Pacific/Chatham']], [14, ['Pacific/Kiritimati']]];
const GMTStringReg = /([\-\+]{1})(\d{2})\:(\d{2})/;
/**
 *
 * @param {string|number} tz
 * @returns {number|undefined}
 */

const toIANA = tz => {
  let matches = null;

  if (typeof tz === 'string') {
    matches = tz.match(GMTStringReg);

    if (!matches) {
      return tz;
    }

    const symbol = parse_int_default()(matches[1] + 1, 10); // => -1 or 1


    const hourOffset = parse_int_default()(matches[2], 10);

    const minuteOffset = parse_int_default()(matches[3], 10);

    tz = symbol * (hourOffset + minuteOffset / 60);
  }

  if (typeof tz === 'number') {
    const found = find_default()(IANAOffsetMap).call(IANAOffsetMap, item => item[0] === tz);

    return found && found[1][0];
  }
};
/**
 *
 * @param {string | number | Date} date
 * @param {string} formatToken
 * @param {object} [options]
 * @param {string} [options.timeZone]
 * @returns {Date}
 */

/* istanbul ignore next */

const date_fns_extra_parse = (date, formatToken, options) => {
  if (typeof date === 'string') {
    date = parse(date, formatToken, new Date(), options);
  }

  if (options && options.timeZone != null && options.timeZone !== '') {
    const timeZone = toIANA(options.timeZone);
    options = assign_default()(assign_default()({}, options), {
      timeZone
    });
  }

  return toDate_toDate(date, options);
};
/**
 *
 * @param {string | number | Date} date
 * @param {string} formatToken
 * @param {object} [options]
 * @param {string} [options.timeZone]
 */

/* istanbul ignore next */


const date_fns_extra_format = (date, formatToken, options) => {
  if (options && options.timeZone != null && options.timeZone !== '') {
    const timeZone = toIANA(options.timeZone);
    options = assign_default()(assign_default()({}, options), {
      timeZone
    });
    date = utcToZonedTime(date, timeZone, options);
  }

  return esm_format_format(date, formatToken, options);
};
/**
 *
 * @param {string | number | Date} date
 * @param {string} timeZone
 * @param {object} options
 * @returns {Date}
 */


const date_fns_extra_utcToZonedTime = (date, timeZone, options) => utcToZonedTime(date, toIANA(timeZone), options);
/**
 *
 * @param {string | number | Date} date
 * @param {string} timeZone
 * @param {object} options
 * @returns {Date}
 */


const date_fns_extra_zonedTimeToUtc = (date, timeZone, options) => zonedTimeToUtc(date, toIANA(timeZone), options);
/**
 * return current system hour offset based on utc:
 *
 * ```
 * 8 => "GMT+08:00"
 * -9.5 => "GMT-09:30"
 * -8 => "GMT-08:00"
 * ```
 */


const getCurrentTimeZone = () => new Date().getTimezoneOffset() / 60;


// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/parseISO/index.js



/**
 * @name parseISO
 * @category Common Helpers
 * @summary Parse ISO string
 *
 * @description
 * Parse the given string in ISO 8601 format and return an instance of Date.
 *
 * Function accepts complete ISO 8601 formats as well as partial implementations.
 * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
 *
 * If the argument isn't a string, the function cannot parse the string or
 * the values are invalid, it returns Invalid Date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - The previous `parse` implementation was renamed to `parseISO`.
 *
 *   ```javascript
 *   // Before v2.0.0
 *   parse('2016-01-01')
 *
 *   // v2.0.0 onward
 *   parseISO('2016-01-01')
 *   ```
 *
 * - `parseISO` now validates separate date and time values in ISO-8601 strings
 *   and returns `Invalid Date` if the date is invalid.
 *
 *   ```javascript
 *   parseISO('2018-13-32')
 *   //=> Invalid Date
 *   ```
 *
 * - `parseISO` now doesn't fall back to `new Date` constructor
 *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.
 *
 * @param {String} argument - the value to convert
 * @param {Object} [options] - an object with options.
 * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
 *
 * @example
 * // Convert string '2014-02-11T11:30:30' to date:
 * const result = parseISO('2014-02-11T11:30:30')
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert string '+02014101' to date,
 * // if the additional number of digits in the extended year format is 1:
 * const result = parseISO('+02014101', { additionalDigits: 1 })
 * //=> Fri Apr 11 2014 00:00:00
 */

function parseISO(argument, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var additionalDigits = options.additionalDigits == null ? 2 : toInteger(options.additionalDigits);

  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
    throw new RangeError('additionalDigits must be 0, 1 or 2');
  }

  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {
    return new Date(NaN);
  }

  var dateStrings = parseISO_splitDateString(argument);
  var date;

  if (dateStrings.date) {
    var parseYearResult = parseISO_parseYear(dateStrings.date, additionalDigits);
    date = parseISO_parseDate(parseYearResult.restDateString, parseYearResult.year);
  }

  if (!date || isNaN(date.getTime())) {
    return new Date(NaN);
  }

  var timestamp = date.getTime();
  var time = 0;
  var offset;

  if (dateStrings.time) {
    time = parseISO_parseTime(dateStrings.time);

    if (isNaN(time)) {
      return new Date(NaN);
    }
  }

  if (dateStrings.timezone) {
    offset = parseTimezone(dateStrings.timezone);

    if (isNaN(offset)) {
      return new Date(NaN);
    }
  } else {
    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone
    // but we need it to be parsed in our timezone
    // so we use utc values to build date in our timezone.
    // Year values from 0 to 99 map to the years 1900 to 1999
    // so set year explicitly with setFullYear.

    var result = new Date(0);
    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
    return result;
  }

  return new Date(timestamp + time + offset);
}
var parseISO_patterns = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/
};
var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;

function parseISO_splitDateString(dateString) {
  var dateStrings = {};
  var array = dateString.split(parseISO_patterns.dateTimeDelimiter);
  var timeString; // The regex match should only return at maximum two array elements.
  // [date], [time], or [date, time].

  if (array.length > 2) {
    return dateStrings;
  }

  if (/:/.test(array[0])) {
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];

    if (parseISO_patterns.timeZoneDelimiter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(parseISO_patterns.timeZoneDelimiter)[0];
      timeString = dateString.substr(dateStrings.date.length, dateString.length);
    }
  }

  if (timeString) {
    var token = parseISO_patterns.timezone.exec(timeString);

    if (token) {
      dateStrings.time = timeString.replace(token[1], '');
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }

  return dateStrings;
}

function parseISO_parseYear(dateString, additionalDigits) {
  var regex = new RegExp('^(?:(\\d{4}|[+-]\\d{' + (4 + additionalDigits) + '})|(\\d{2}|[+-]\\d{' + (2 + additionalDigits) + '})$)');
  var captures = dateString.match(regex); // Invalid ISO-formatted year

  if (!captures) return {
    year: NaN,
    restDateString: ''
  };
  var year = captures[1] ? parseInt(captures[1]) : null;
  var century = captures[2] ? parseInt(captures[2]) : null; // either year or century is null, not both

  return {
    year: century === null ? year : century * 100,
    restDateString: dateString.slice((captures[1] || captures[2]).length)
  };
}

function parseISO_parseDate(dateString, year) {
  // Invalid ISO-formatted year
  if (year === null) return new Date(NaN);
  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string

  if (!captures) return new Date(NaN);
  var isWeekDate = !!captures[4];
  var dayOfYear = parseDateUnit(captures[1]);
  var month = parseDateUnit(captures[2]) - 1;
  var day = parseDateUnit(captures[3]);
  var week = parseDateUnit(captures[4]);
  var dayOfWeek = parseDateUnit(captures[5]) - 1;

  if (isWeekDate) {
    if (!parseISO_validateWeekDate(year, week, dayOfWeek)) {
      return new Date(NaN);
    }

    return parseISO_dayOfISOWeekYear(year, week, dayOfWeek);
  } else {
    var date = new Date(0);

    if (!parseISO_validateDate(year, month, day) || !parseISO_validateDayOfYearDate(year, dayOfYear)) {
      return new Date(NaN);
    }

    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
    return date;
  }
}

function parseDateUnit(value) {
  return value ? parseInt(value) : 1;
}

function parseISO_parseTime(timeString) {
  var captures = timeString.match(timeRegex);
  if (!captures) return NaN; // Invalid ISO-formatted time

  var hours = parseTimeUnit(captures[1]);
  var minutes = parseTimeUnit(captures[2]);
  var seconds = parseTimeUnit(captures[3]);

  if (!parseISO_validateTime(hours, minutes, seconds)) {
    return NaN;
  }

  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000;
}

function parseTimeUnit(value) {
  return value && parseFloat(value.replace(',', '.')) || 0;
}

function parseTimezone(timezoneString) {
  if (timezoneString === 'Z') return 0;
  var captures = timezoneString.match(timezoneRegex);
  if (!captures) return 0;
  var sign = captures[1] === '+' ? -1 : 1;
  var hours = parseInt(captures[2]);
  var minutes = captures[3] && parseInt(captures[3]) || 0;

  if (!parseISO_validateTimezone(hours, minutes)) {
    return NaN;
  }

  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);
}

function parseISO_dayOfISOWeekYear(isoWeekYear, week, day) {
  var date = new Date(0);
  date.setUTCFullYear(isoWeekYear, 0, 4);
  var fourthOfJanuaryDay = date.getUTCDay() || 7;
  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
} // Validation functions
// February is null to handle the leap year (using ||)


var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

function parseISO_isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}

function parseISO_validateDate(year, month, date) {
  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (parseISO_isLeapYearIndex(year) ? 29 : 28));
}

function parseISO_validateDayOfYearDate(year, dayOfYear) {
  return dayOfYear >= 1 && dayOfYear <= (parseISO_isLeapYearIndex(year) ? 366 : 365);
}

function parseISO_validateWeekDate(_year, week, day) {
  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}

function parseISO_validateTime(hours, minutes, seconds) {
  if (hours === 24) {
    return minutes === 0 && seconds === 0;
  }

  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}

function parseISO_validateTimezone(_hours, minutes) {
  return minutes >= 0 && minutes <= 59;
}
// CONCATENATED MODULE: ../semi-foundation/datePicker/_utils/parser.ts
/**
 * @file
 * Various date-related analysis methods
 */

/**
 * Parsing value to Date object
 */

function compatibleParse(value, formatToken, baseDate, locale) {
  let result = null;

  if (value) {
    if (formatToken) {
      baseDate = baseDate || new Date();
      result = parse(value, formatToken, baseDate, {
        locale
      });
    }

    if (!isValid(result)) {
      result = parseISO(value);
    }

    if (!isValid(result)) {
      result = new Date(Date.parse(value));
    }

    const yearInvalid = isValid(result) && String(result.getFullYear()).length > 4;

    if (!isValid(result) || yearInvalid) {
      result = null;
    }
  }

  return result;
}
/**
 * whether value can be parsed with date-fns `parse`
 *
 * @example
 * isValueParseValid({ value: '2021-01-01', formatToken: 'yyyy-MM-dd' }); // true
 * isValueParseValid({ value: '2021-01-0', formatToken: 'yyyy-MM-dd' }); // false
 * isValueParseValid({ value: '2021-01', formatToken: 'yyyy-MM-dd' }); // false
 */

function isValueParseValid(options) {
  const {
    value,
    locale,
    formatToken
  } = options;
  const baseDate = options.baseDate || new Date();
  const result = parse(value, formatToken, baseDate, {
    locale
  });
  return isValid(result);
}
// CONCATENATED MODULE: ../semi-foundation/datePicker/_utils/getDefaultFormatToken.ts

const defaultFormatTokens = {
  date: datePicker_constants_strings.FORMAT_FULL_DATE,
  dateTime: datePicker_constants_strings.FORMAT_DATE_TIME,
  dateRange: datePicker_constants_strings.FORMAT_FULL_DATE,
  dateTimeRange: datePicker_constants_strings.FORMAT_DATE_TIME,
  month: datePicker_constants_strings.FORMAT_YEAR_MONTH
};

const getDefaultFormatToken = type => defaultFormatTokens;

function getDefaultFormatTokenByType(type) {
  return type && defaultFormatTokens[type];
}
/* harmony default export */ var _utils_getDefaultFormatToken = (getDefaultFormatToken);
// CONCATENATED MODULE: ../semi-foundation/datePicker/_utils/getInsetInputFormatToken.ts


/**
 * 获取 insetInput 输入框的 placeholder
 * Get the placeholder of the insetInput input
 *
 * If type is time related, we only recognize the format like `dateFormat timeFormat`
 *  - 'yyyy-MM-dd HH:mm:ss' // ok
 *  - 'yyyy-MM-dd  HH:mm:ss' // bad format
 *
 * @example
 * 'yyyy-MM-dd' => 'yyyy-MM-dd'
 * 'yyyy-MM' => 'yyyy-MM'
 * 'yyyy-MM-dd HH:mm:ss' => 'yyyy-MM-dd HH:mm:ss'
 * 'yyyy-MM-dd HH:mm' => 'yyyy-MM-dd HH:mm'
 * 'Pp' => 'yyyy-MM-dd'
 */

function getInsetInputFormatToken(options) {
  var _context;

  const {
    format,
    type
  } = options;
  const dateReg = /([yMd]{0,4}[^a-z\s]*[yMd]{0,4}[^a-z\s]*[yMd]{0,4})/i;
  const dateTimeReg = /([yMd]{0,4}[^a-z\s]*[yMd]{0,4}[^a-z\s]*[yMd]{0,4}) (H{0,2}[^a-z\s]*m{0,2}[^a-z\s]*s{0,2})/i;
  const defaultToken = getDefaultFormatTokenByType(type);
  let insetInputFormat;

  switch (type) {
    case 'dateTime':
    case 'dateTimeRange':
      const dateTimeResult = dateTimeReg.exec(format);
      insetInputFormat = dateTimeResult && dateTimeResult[1] && dateTimeResult[2] ? concat_default()(_context = "".concat(dateTimeResult[1], " ")).call(_context, dateTimeResult[2]) : defaultToken;
      break;

    case 'date':
    case 'month':
    case 'dateRange':
    default:
      const dateResult = dateReg.exec(format);
      insetInputFormat = dateResult && dateResult[1] || defaultToken;
      break;
  }

  return insetInputFormat;
}
// CONCATENATED MODULE: ../semi-foundation/datePicker/_utils/getInsetInputValueFromInsetInputStr.ts
/**
 * 从 insetInputStr 字符串解析出 insetInputValue 对象
 * Parse the insetInputValue object from the insetInputStr string
 *
 * @example
 * ```
 * '2022-02-01' => { monthLeft: { dateInput: '2022-02-01' } }
 * '2022-02-01 00:00:00' => { monthLeft: { dateInput: '2022-02-01', timeInput: '00:00:00' } }
 * '2022-02-01 00:00:00 ~ 2022-02-15 00:00:00' => { monthLeft: { dateInput: '2022-02-01', timeInput: '00:00:00'}, monthRight: { dateInput: '2022-02-15', timeInput: '00:00:00' } }
 *
 * '2022-0' => { monthLeft: { dateInput: '2022-0' } }
 * '2022-02-01 00:00:' => { monthLeft: { dateInput: '2022-02-01', timeInput: '00:00:' } }
 * '2022-02-01 00:00:00 ~ ' => { monthLeft: { dateInput: '2022-02-01', timeInput: '00:00:00'}, monthRight: { dateInput: '', timeInput: '' } }
 * ' ~ 2022-02-15 00:00:00' => { monthLeft: { dateInput: '', timeInput: '' }, monthRight: { dateInput: '2022-02-15', timeInput: '00:00:00' } }
 * ```
 */
function getInsetInputValueFromInsetInputStr(options) {
  const timeSeparator = ' ';
  const {
    inputValue = '',
    rangeSeparator,
    type
  } = options;
  let leftDateInput, leftTimeInput, rightDateInput, rightTimeInput;
  const insetInputValue = {
    monthLeft: {
      dateInput: '',
      timeInput: ''
    },
    monthRight: {
      dateInput: '',
      timeInput: ''
    }
  };

  switch (type) {
    case 'date':
    case 'month':
      insetInputValue.monthLeft.dateInput = inputValue;
      break;

    case 'dateRange':
      [leftDateInput = '', rightDateInput = ''] = inputValue.split(rangeSeparator);
      insetInputValue.monthLeft.dateInput = leftDateInput;
      insetInputValue.monthRight.dateInput = rightDateInput;
      break;

    case 'dateTime':
      [leftDateInput = '', leftTimeInput = ''] = inputValue.split(timeSeparator);
      insetInputValue.monthLeft.dateInput = leftDateInput;
      insetInputValue.monthLeft.timeInput = leftTimeInput;
      break;

    case 'dateTimeRange':
      const [leftInput = '', rightInput = ''] = inputValue.split(rangeSeparator);
      [leftDateInput = '', leftTimeInput = ''] = leftInput.split(timeSeparator);
      [rightDateInput = '', rightTimeInput = ''] = rightInput.split(timeSeparator);
      insetInputValue.monthLeft.dateInput = leftDateInput;
      insetInputValue.monthLeft.timeInput = leftTimeInput;
      insetInputValue.monthRight.dateInput = rightDateInput;
      insetInputValue.monthRight.timeInput = rightTimeInput;
      break;
  }

  return insetInputValue;
}
// CONCATENATED MODULE: ../semi-foundation/datePicker/foundation.ts





















/* eslint-disable no-nested-ternary */

/* eslint-disable max-len, max-depth,  */













/**
 * The datePicker foundation.js is responsible for maintaining the date value and the input box value, as well as the callback of both
 *  task 1. Accept the selected date change, update the date value, and update the input box value according to the date = > Notify the change
 *  task 2. When the input box changes, update the date value = > Notify the change
 */

class foundation_DatePickerFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
    /**
     * clear range input focus when open is controlled
     * fixed github 1375
     */

    this.clearRangeInputFocus = () => {
      const {
        type
      } = this._adapter.getProps();

      const {
        rangeInputFocus
      } = this._adapter.getStates();

      if (type === 'dateTimeRange' && rangeInputFocus) {
        this._adapter.setRangeInputFocus(false);
      }
    };

    this.getMergedMotion = motion => {
      const mergedMotion = typeof motion === 'undefined' || motion ? assign_default()(assign_default()({}, motion), {
        didEnter: () => {
          this._adapter.setMotionEnd(true);
        },
        didLeave: () => {
          this._adapter.setMotionEnd(false);
        }
      }) : false;
      return mergedMotion;
    };

    this._isRangeType = () => {
      const type = this._adapter.getProp('type');

      return /range/i.test(type);
    };

    this._isRangeValueComplete = value => {
      let result = false;

      if (is_array_default()(value)) {
        result = !some_default()(value).call(value, date => isNullOrUndefined(date));
      }

      return result;
    };
  }

  init() {
    const timeZone = this.getProp('timeZone');

    if (this._isControlledComponent()) {
      this.initFromProps({
        timeZone,
        value: this.getProp('value')
      });
    } else if (this._isInProps('defaultValue')) {
      this.initFromProps({
        timeZone,
        value: this.getProp('defaultValue')
      });
    }

    this.initPanelOpenStatus(this.getProp('defaultOpen'));
  }

  isValidTimeZone(timeZone) {
    var _context;

    const propTimeZone = this.getProp('timeZone');

    const _timeZone = isNullOrUndefined(timeZone) ? propTimeZone : timeZone;

    return includes_default()(_context = ['string', 'number']).call(_context, typeof _timeZone) && _timeZone !== '';
  }

  initFromProps(_ref) {
    let {
      value,
      timeZone,
      prevTimeZone
    } = _ref;

    const _value = (is_array_default()(value) ? [...value] : (value || value === 0) && [value]) || [];

    const result = this.parseWithTimezone(_value, timeZone, prevTimeZone);

    this._adapter.updatePrevTimezone(prevTimeZone);

    this._adapter.updateInputValue(null);

    this._adapter.updateValue(result);

    this.resetCachedSelectedValue(result);
    this.initRangeInputFocus(result);

    if (this._adapter.needConfirm()) {
      this._adapter.updateCachedSelectedValue(result);
    }
  }
  /**
   * 如果用户传了一个空的 value，需要把 range input focus 设置为 rangeStart，这样用户可以清除完之后继续从开始选择
   *
   * If the user passes an empty value, you need to set the range input focus to rangeStart, so that the user can continue to select from the beginning after clearing
   */


  initRangeInputFocus(result) {
    const {
      triggerRender
    } = this.getProps();

    if (this._isRangeType() && isFunction_default()(triggerRender) && result.length === 0) {
      this._adapter.setRangeInputFocus('rangeStart');
    }
  }

  parseWithTimezone(value, timeZone, prevTimeZone) {
    const result = [];

    if (is_array_default()(value) && value.length) {
      for (const v of value) {
        let parsedV = (v || v === 0) && this._parseValue(v);

        if (parsedV) {
          if (this.isValidTimeZone(prevTimeZone)) {
            parsedV = date_fns_extra_zonedTimeToUtc(parsedV, prevTimeZone);
          }

          result.push(this.isValidTimeZone(timeZone) ? date_fns_extra_utcToZonedTime(parsedV, timeZone) : parsedV);
        }
      }
    }

    return result;
  }

  _isMultiple() {
    return Boolean(this.getProp('multiple'));
  }
  /**
   *
   *  Verify and parse the following three format inputs
   *
      1. Date object
      2. ISO 9601-compliant string
      3. ts timestamp
       Unified here to format the incoming value and output it as a Date object
   *
   */


  _parseValue(value) {
    const dateFnsLocale = this._adapter.getProp('dateFnsLocale');

    let dateObj;

    if (!value && value !== 0) {
      return new Date();
    }

    if (isValidDate(value)) {
      dateObj = value;
    } else if (isString_default()(value)) {
      dateObj = compatibleParse(value, this.getProp('format'), undefined, dateFnsLocale);
    } else if (isTimestamp(value)) {
      dateObj = new Date(value);
    } else {
      throw new TypeError('defaultValue should be valid Date object/timestamp or string');
    }

    return dateObj;
  }

  destroy() {
    // Ensure that event listeners will be uninstalled and users may not trigger closePanel
    // this._adapter.togglePanel(false);
    this._adapter.unregisterClickOutSide();
  }

  initPanelOpenStatus(defaultOpen) {
    if ((this.getProp('open') || defaultOpen) && !this.getProp('disabled')) {
      this._adapter.togglePanel(true);

      this._adapter.registerClickOutSide();
    } else {
      this._adapter.togglePanel(false);

      this._adapter.unregisterClickOutSide();
    }
  }

  openPanel() {
    if (!this.getProp('disabled')) {
      if (!this._isControlledComponent('open')) {
        this._adapter.togglePanel(true);

        this._adapter.registerClickOutSide();
      }

      this._adapter.notifyOpenChange(true);
    }
  }
  /**
   * do these side effects when type is dateRange or dateTimeRange
   *   1. trigger input blur, if input value is invalid, set input value and state value to previous status
   *   2. set cachedSelectedValue using given dates(in needConfirm mode)
   *      - directly closePanel without click confirm will set cachedSelectedValue to state value
   *      - select one date(which means that the selection value is incomplete) and click confirm also set cachedSelectedValue to state value
   */


  rangeTypeSideEffectsWhenClosePanel(inputValue, willUpdateDates) {
    if (this._isRangeType()) {
      this._adapter.setRangeInputFocus(false);
      /**
       * inputValue is string when it is not disabled or can't parsed
       * when inputValue is null, picker value will back to last selected value
       */


      this.handleInputBlur(inputValue);
      this.resetCachedSelectedValue(willUpdateDates);
    }
  }
  /**
   * clear input value when selected date is not confirmed
   */


  needConfirmSideEffectsWhenClosePanel(willUpdateDates) {
    if (this._adapter.needConfirm() && !this._isRangeType()) {
      /**
       * if `null` input element will show `cachedSelectedValue` formatted value（format in DateInput render）
       * if `` input element will show `` directly
       */
      this._adapter.updateInputValue(null);

      this.resetCachedSelectedValue(willUpdateDates);
    }
  }
  /**
   * clear inset input value when close panel
   */


  clearInsetInputValue() {
    const {
      insetInput
    } = this._adapter.getProps();

    if (insetInput) {
      this._adapter.updateInsetInputValue(null);
    }
  }
  /**
   * call it when change state value or input value
   */


  resetCachedSelectedValue(willUpdateDates) {
    const {
      value,
      cachedSelectedValue
    } = this._adapter.getStates();

    const newCachedSelectedValue = is_array_default()(willUpdateDates) ? willUpdateDates : value;

    if (!isEqual_default()(newCachedSelectedValue, cachedSelectedValue)) {
      this._adapter.updateCachedSelectedValue(newCachedSelectedValue);
    }
  }
  /**
   * timing to call closePanel
   *  1. click confirm button
   *  2. click cancel button
   *  3. select date, time, year, month
   *    - date type and not multiple, close panel after select date
   *    - dateRange type, close panel after select rangeStart and rangeEnd
   *  4. click outside
   * @param {Event} e
   * @param {String} inputValue
   * @param {Date[]} dates
   */


  closePanel(e) {
    let inputValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let dates = arguments.length > 2 ? arguments[2] : undefined;

    const {
      value
    } = this._adapter.getStates();

    const willUpdateDates = isNullOrUndefined(dates) ? value : dates;

    if (!this._isControlledComponent('open')) {
      this._adapter.togglePanel(false);

      this._adapter.unregisterClickOutSide();
    } // range type picker, closing panel requires the following side effects


    this.rangeTypeSideEffectsWhenClosePanel(inputValue, willUpdateDates);
    this.needConfirmSideEffectsWhenClosePanel(willUpdateDates);
    this.clearInsetInputValue();

    this._adapter.notifyOpenChange(false);

    this._adapter.notifyBlur(e);
  }
  /**
   * Callback when the content of the input box changes
   * Update the date panel if the changed value is a legal date, otherwise only update the input box
   * @param {String} input The value of the input box after the change
   * @param {Event} e
   */


  handleInputChange(input, e) {
    const result = this._isMultiple() ? this.parseMultipleInput(input) : this.parseInput(input);
    const {
      value: stateValue
    } = this.getStates();

    this._updateCachedSelectedValueFromInput(input); // Enter a valid date or empty


    if (result && result.length || input === '') {
      // If you click the clear button
      if (get_default()(e, input_constants_strings.CLEARBTN_CLICKED_EVENT_FLAG) && this._isControlledComponent('value')) {
        this._notifyChange(result);

        return;
      }

      this._updateValueAndInput(result, input === '', input); // Updates the selected value when entering a valid date


      const changedDates = this._getChangedDates(result);

      if (!this._someDateDisabled(changedDates)) {
        if (!isEqual_default()(result, stateValue)) {
          this._notifyChange(result);
        }
      }
    } else {
      this._adapter.updateInputValue(input);
    }
  }
  /**
   * inset input 变化时需要更新以下 state 状态
   *  - insetInputValue（总是）
   *  - inputValue（可以解析为合法日期时）
   *  - value（可以解析为合法日期时）
   */


  handleInsetInputChange(options) {
    const {
      insetInputStr,
      format,
      insetInputValue
    } = options;

    const _isMultiple = this._isMultiple();

    const result = _isMultiple ? this.parseMultipleInput(insetInputStr, format) : this.parseInput(insetInputStr, format);
    const {
      value: stateValue
    } = this.getStates();

    this._updateCachedSelectedValueFromInput(insetInputStr);

    if (result && result.length) {
      const changedDates = this._getChangedDates(result);

      if (!this._someDateDisabled(changedDates)) {
        if (!isEqual_default()(result, stateValue)) {
          if (!this._isControlledComponent() && !this._adapter.needConfirm()) {
            this._adapter.updateValue(result);
          }

          this._notifyChange(result);
        }

        const triggerInput = _isMultiple ? this.formatMultipleDates(result) : this.formatDates(result);

        this._adapter.updateInputValue(triggerInput);
      }
    }

    this._adapter.updateInsetInputValue(insetInputValue);
  }
  /**
   * when input change we reset cached selected value
   */


  _updateCachedSelectedValueFromInput(input) {
    const looseResult = this.getLooseDateFromInput(input);

    const changedLooseResult = this._getChangedDates(looseResult);

    if (!this._someDateDisabled(changedLooseResult)) {
      this.resetCachedSelectedValue(looseResult);
    }
  }
  /**
   * Input box blur
   * @param {String} input
   * @param {Event} e
   */


  handleInputBlur() {
    let input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let e = arguments.length > 1 ? arguments[1] : undefined;
    const parsedResult = input ? this._isMultiple() ? this.parseMultipleInput(input, ',', true) : this.parseInput(input) : [];
    const stateValue = this.getState('value'); // console.log(input, parsedResult);

    if (parsedResult && parsedResult.length) {
      this._updateValueAndInput(parsedResult, input === '');
    } else if (input === '') {
      // if clear input, set input to `''`
      this._updateValueAndInput('', true, '');
    } else {
      this._updateValueAndInput(stateValue);
    }
    /**
     * 当不是范围类型且不需要确认时，使用 stateValue 重置 cachedSelectedValue
     * 这样做的目的是，在输入非法值时，使用上次选中的值作为已选值
     * needConfirm 或者 range type 时，我们在 close panel 时调用 resetCachedSelectedValue，这里不用重复调用
     *
     * Use stateValue to reset cachedSelectedValue when it is not a range type and does not require confirmation
     * The purpose of this is to use the last selected value as the selected value when an invalid value is entered
     * When needConfirm or range type, we call resetCachedSelectedValue when close panel, no need to call repeatedly here
     */


    if (!this._adapter.needConfirm() && !this._isRangeType()) {
      this.resetCachedSelectedValue(stateValue);
    }
  }
  /**
   * called when range type rangeEnd input tab press
   * @param {Event} e
   */


  handleRangeEndTabPress(e) {
    this._adapter.setRangeInputFocus(false);
  }
  /**
   * called when the input box is focused
   * @param {Event} e input focus event
   * @param {String} range 'rangeStart' or 'rangeEnd', use when type is range
   */


  handleInputFocus(e, range) {
    var _context2;

    const rangeInputFocus = this._adapter.getState('rangeInputFocus');

    range && this._adapter.setRangeInputFocus(range);
    /**
     * rangeType: only notify when range is false
     * not rangeType: notify when focus
     */

    if (!range || !includes_default()(_context2 = ['rangeStart', 'rangeEnd']).call(_context2, rangeInputFocus)) {
      this._adapter.notifyFocus(e, range);
    }
  }

  handleSetRangeFocus(rangeInputFocus) {
    this._adapter.setRangeInputFocus(rangeInputFocus);
  }

  handleInputClear(e) {
    this._adapter.notifyClear(e);
  }
  /**
   * 范围选择清除按钮回调
   * 因为清除按钮没有集成在Input内，因此需要手动清除 value、inputValue、cachedValue
   *
   * callback of range input clear button
   * Since the clear button is not integrated in Input, you need to manually clear value, inputValue, cachedValue
   */


  handleRangeInputClear(e) {
    const value = [];
    const inputValue = '';

    if (!this._isControlledComponent('value')) {
      this._updateValueAndInput(value, true, inputValue);

      this.resetCachedSelectedValue(value);
    }

    this._notifyChange(value);

    this._adapter.notifyClear(e);
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  handleRangeInputBlur(value, e) {} // Parses input only after user returns


  handleInputComplete() {
    let input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    // console.log(input);
    let parsedResult = input ? this._isMultiple() ? this.parseMultipleInput(input, ',', true) : this.parseInput(input) : [];
    parsedResult = parsedResult && parsedResult.length ? parsedResult : this.getState('value'); // Use the current date as the value when the current input is empty and the last input is also empty

    if (!parsedResult || !parsedResult.length) {
      const nowDate = new Date();

      if (this._isRangeType()) {
        parsedResult = [nowDate, nowDate];
      } else {
        parsedResult = [nowDate];
      }
    }

    this._updateValueAndInput(parsedResult);

    const {
      value: stateValue
    } = this.getStates();

    const changedDates = this._getChangedDates(parsedResult);

    if (!this._someDateDisabled(changedDates) && !isEqual_default()(parsedResult, stateValue)) {
      this._notifyChange(parsedResult);
    }
  }
  /**
   * Parse the input, return the time object if it is valid,
   *  otherwise return "
   *
   * @param {string} input
   * @returns  {Date [] | '}
   */


  parseInput() {
    let input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let format = arguments.length > 1 ? arguments[1] : undefined;
    let result = []; // console.log(input);

    const {
      dateFnsLocale,
      rangeSeparator
    } = this.getProps();

    if (input && input.length) {
      const type = this.getProp('type');
      const formatToken = format || this.getProp('format') || getDefaultFormatTokenByType(type);
      let parsedResult, formatedInput;
      const nowDate = new Date();

      switch (type) {
        case 'date':
        case 'dateTime':
        case 'month':
          parsedResult = input ? compatibleParse(input, formatToken, nowDate, dateFnsLocale) : '';
          formatedInput = parsedResult && isValid(parsedResult) && this.localeFormat(parsedResult, formatToken);

          if (parsedResult && formatedInput === input) {
            result = [parsedResult];
          }

          break;

        case 'dateRange':
        case 'dateTimeRange':
          const separator = rangeSeparator;
          const values = input.split(separator);
          parsedResult = values && reduce_default()(values).call(values, (arr, cur) => {
            const parsedVal = cur && compatibleParse(cur, formatToken, nowDate, dateFnsLocale);
            parsedVal && arr.push(parsedVal);
            return arr;
          }, []);
          formatedInput = parsedResult && map_default()(parsedResult).call(parsedResult, v => v && isValid(v) && this.localeFormat(v, formatToken)).join(separator);

          if (parsedResult && formatedInput === input) {
            sort_default()(parsedResult).call(parsedResult, (d1, d2) => d1.getTime() - d2.getTime());

            result = parsedResult;
          }

          break;

        default:
          break;
      }
    }

    return result;
  }
  /**
   * get date which may include null from input
   */


  getLooseDateFromInput(input) {
    const value = this._isMultiple() ? this.parseMultipleInputLoose(input) : this.parseInputLoose(input);
    return value;
  }
  /**
   * parse input into `Array<Date|null>`, loose means return value includes `null`
   *
   * @example
   * ```javascript
   * parseInputLoose('2022-03-15 ~ '); // [Date, null]
   * parseInputLoose(' ~ 2022-03-15 '); // [null, Date]
   * parseInputLoose(''); // []
   * parseInputLoose('2022-03- ~ 2022-0'); // [null, null]
   * ```
   */


  parseInputLoose() {
    let input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let result = [];
    const {
      dateFnsLocale,
      rangeSeparator,
      type,
      format
    } = this.getProps();

    if (input && input.length) {
      const formatToken = format || getDefaultFormatTokenByType(type);
      let parsedResult, formatedInput;
      const nowDate = new Date();

      switch (type) {
        case 'date':
        case 'dateTime':
        case 'month':
          const _parsedResult = compatibleParse(input, formatToken, nowDate, dateFnsLocale);

          if (isValidDate(_parsedResult)) {
            formatedInput = this.localeFormat(_parsedResult, formatToken);

            if (formatedInput === input) {
              parsedResult = _parsedResult;
            }
          } else {
            parsedResult = null;
          }

          result = [parsedResult];
          break;

        case 'dateRange':
        case 'dateTimeRange':
          const separator = rangeSeparator;
          const values = input.split(separator);
          parsedResult = values && reduce_default()(values).call(values, (arr, cur) => {
            let parsedVal = null;

            const _parsedResult = compatibleParse(cur, formatToken, nowDate, dateFnsLocale);

            if (isValidDate(_parsedResult)) {
              formatedInput = this.localeFormat(_parsedResult, formatToken);

              if (formatedInput === cur) {
                parsedVal = _parsedResult;
              }
            }

            arr.push(parsedVal);
            return arr;
          }, []);

          if (is_array_default()(parsedResult) && every_default()(parsedResult).call(parsedResult, item => isValid(item))) {
            sort_default()(parsedResult).call(parsedResult, (d1, d2) => d1.getTime() - d2.getTime());
          }

          result = parsedResult;
          break;

        default:
          break;
      }
    }

    return result;
  }
  /**
   * parse multiple into `Array<Date|null>`, loose means return value includes `null`
   *
   * @example
   * ```javascript
   * parseMultipleInputLoose('2021-01-01,2021-10-15'); // [Date, Date];
   * parseMultipleInputLoose('2021-01-01,2021-10-'); // [Date, null];
   * parseMultipleInputLoose(''); // [];
   * ```
   */


  parseMultipleInputLoose() {
    let input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : datePicker_constants_strings.DEFAULT_SEPARATOR_MULTIPLE;
    let needDedupe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    const max = this.getProp('max');
    const inputArr = input.split(separator);
    const result = [];

    for (const curInput of inputArr) {
      let tmpParsed = curInput && this.parseInputLoose(curInput);
      tmpParsed = is_array_default()(tmpParsed) ? tmpParsed : tmpParsed && [tmpParsed];

      if (tmpParsed && tmpParsed.length) {
        if (needDedupe) {
          !filter_default()(result).call(result, r => Boolean(find_default()(tmpParsed).call(tmpParsed, tp => isSameSecond(r, tp)))) && result.push(...tmpParsed);
        } else {
          result.push(...tmpParsed);
        }
      } else {
        return [];
      }

      if (max && max > 0 && result.length > max) {
        return [];
      }
    }

    return result;
  }
  /**
   * Parses the input when multiple is true, if valid,
   *  returns a list of time objects, otherwise returns an array
   *
   * @param {string} [input='']
   * @param {string} [separator=',']
   * @param {boolean} [needDedupe=false]
   * @returns {Date[]}
   */


  parseMultipleInput() {
    let input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : datePicker_constants_strings.DEFAULT_SEPARATOR_MULTIPLE;
    let needDedupe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    const max = this.getProp('max');
    const inputArr = input.split(separator);
    const result = [];

    for (const curInput of inputArr) {
      let tmpParsed = curInput && this.parseInput(curInput);
      tmpParsed = is_array_default()(tmpParsed) ? tmpParsed : tmpParsed && [tmpParsed];

      if (tmpParsed && tmpParsed.length) {
        if (needDedupe) {
          // 20190519 TODO: needs to determine the case where multiple is true and range
          !filter_default()(result).call(result, r => Boolean(find_default()(tmpParsed).call(tmpParsed, tp => isSameSecond(r, tp)))) && result.push(...tmpParsed);
        } else {
          result.push(...tmpParsed);
        }
      } else {
        return [];
      }

      if (max && max > 0 && result.length > max) {
        return [];
      }
    }

    return result;
  }
  /**
   * dates[] => string
   *
   * @param {Date[]} dates
   * @returns {string}
   */


  formatDates() {
    let dates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let customFormat = arguments.length > 1 ? arguments[1] : undefined;
    let str = '';
    const rangeSeparator = this.getProp('rangeSeparator');

    if (is_array_default()(dates) && dates.length) {
      const type = this.getProp('type');
      const formatToken = customFormat || this.getProp('format') || getDefaultFormatTokenByType(type);

      switch (type) {
        case 'date':
        case 'dateTime':
        case 'month':
          str = this.localeFormat(dates[0], formatToken);
          break;

        case 'dateRange':
        case 'dateTimeRange':
          const startIsTruthy = !isNullOrUndefined(dates[0]);
          const endIsTruthy = !isNullOrUndefined(dates[1]);

          if (startIsTruthy && endIsTruthy) {
            var _context3, _context4;

            str = concat_default()(_context3 = concat_default()(_context4 = "".concat(this.localeFormat(dates[0], formatToken))).call(_context4, rangeSeparator)).call(_context3, this.localeFormat(dates[1], formatToken));
          } else {
            if (startIsTruthy) {
              var _context5;

              str = concat_default()(_context5 = "".concat(this.localeFormat(dates[0], formatToken))).call(_context5, rangeSeparator);
            } else if (endIsTruthy) {
              var _context6;

              str = concat_default()(_context6 = "".concat(rangeSeparator)).call(_context6, this.localeFormat(dates[1], formatToken));
            }
          }

          break;

        default:
          break;
      }
    }

    return str;
  }
  /**
   * dates[] => string
   *
   * @param {Date[]} dates
   * @returns {string}
   */


  formatMultipleDates() {
    let dates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : datePicker_constants_strings.DEFAULT_SEPARATOR_MULTIPLE;
    let customFormat = arguments.length > 2 ? arguments[2] : undefined;
    const strs = [];

    if (is_array_default()(dates) && dates.length) {
      const type = this.getProp('type');

      switch (type) {
        case 'date':
        case 'dateTime':
        case 'month':
          for_each_default()(dates).call(dates, date => strs.push(this.formatDates([date], customFormat)));

          break;

        case 'dateRange':
        case 'dateTimeRange':
          for (let i = 0; i < dates.length; i += 2) {
            strs.push(this.formatDates(slice_default()(dates).call(dates, i, i + 2), customFormat));
          }

          break;

        default:
          break;
      }
    }

    return strs.join(separator);
  }
  /**
   * Update date value and the value of the input box
   * 1. Select Update
   * 2. Input Update
   * @param {Date|''} value
   * @param {Boolean} forceUpdateValue
   * @param {String} input
   */


  _updateValueAndInput(value, forceUpdateValue, input) {
    let _value;

    if (forceUpdateValue || value) {
      if (!is_array_default()(value)) {
        _value = value ? [value] : [];
      } else {
        _value = value;
      }

      const changedDates = this._getChangedDates(_value); // You cannot update the value directly when needConfirm, you can only change the value through handleConfirm


      if (!this._isControlledComponent() && !this._someDateDisabled(changedDates) && !this._adapter.needConfirm()) {
        this._adapter.updateValue(_value);
      }
    }

    this._adapter.updateInputValue(input);
  }
  /**
   * when changing the selected value through the date panel
   * @param {*} value
   * @param {*} options
   */


  handleSelectedChange(value, options) {
    const {
      type,
      format,
      rangeSeparator,
      insetInput
    } = this._adapter.getProps();

    const {
      value: stateValue
    } = this.getStates();

    const controlled = this._isControlledComponent();

    const fromPreset = isObject_default()(options) ? options.fromPreset : options;

    const closePanel = get_default()(options, 'closePanel', true);
    /**
     * It is used to determine whether the panel can be stowed. In a Range type component, it is necessary to select both starting Time and endTime before stowing.
     * To determine whether both starting Time and endTime have been selected, it is used to judge whether the two inputs have been Focused.
     * This variable is used to indicate whether such a judgment is required. In the scene with shortcut operations, it is not required.
     */


    const needCheckFocusRecord = get_default()(options, 'needCheckFocusRecord', true);

    const dates = is_array_default()(value) ? [...value] : value ? [value] : [];

    const changedDates = this._getChangedDates(dates);

    let inputValue, insetInputValue;

    if (!this._someDateDisabled(changedDates)) {
      this.resetCachedSelectedValue(dates);
      inputValue = this._isMultiple() ? this.formatMultipleDates(dates) : this.formatDates(dates);

      if (insetInput) {
        const insetInputFormatToken = getInsetInputFormatToken({
          format,
          type
        });
        const insetInputStr = this._isMultiple() ? this.formatMultipleDates(dates, undefined, insetInputFormatToken) : this.formatDates(dates, insetInputFormatToken);
        insetInputValue = getInsetInputValueFromInsetInputStr({
          inputValue: insetInputStr,
          type,
          rangeSeparator
        });
      }

      const isRangeTypeAndInputIncomplete = this._isRangeType() && !this._isRangeValueComplete(dates);
      /**
       * If the input is incomplete when under control, the notifyChange is not triggered because
       * You need to update the value of the input box, otherwise there will be a problem that a date is selected but the input box does not show the date #1357
       *
       * 受控时如果输入不完整，由于没有触发 notifyChange
       * 需要组件内更新一下输入框的值，否则会出现选了一个日期但是输入框没有回显日期的问题 #1357
       */

      if (!this._adapter.needConfirm() || fromPreset) {
        if (isRangeTypeAndInputIncomplete) {
          // do not change value when selected value is incomplete
          this._adapter.updateInputValue(inputValue);

          this._adapter.updateInsetInputValue(insetInputValue);

          return;
        } else {
          if (!controlled || fromPreset) {
            this._updateValueAndInput(dates, true, inputValue);

            this._adapter.updateInsetInputValue(insetInputValue);
          }
        }
      }

      if (!controlled && this._adapter.needConfirm()) {
        // select date only change inputValue when needConfirm is true
        this._adapter.updateInputValue(inputValue);

        this._adapter.updateInsetInputValue(insetInputValue); // if inputValue is not complete, don't notifyChange


        if (isRangeTypeAndInputIncomplete) {
          return;
        }
      }

      if (!isEqual_default()(value, stateValue)) {
        this._notifyChange(value);
      }
    }

    const focusRecordChecked = !needCheckFocusRecord || needCheckFocusRecord && this._adapter.couldPanelClosed();

    if (type === 'date' && !this._isMultiple() && closePanel || type === 'dateRange' && this._isRangeValueComplete(dates) && closePanel && focusRecordChecked) {
      this.closePanel(undefined, inputValue, dates);
    }
  }
  /**
   * when changing the year and month through the panel when the type is year or month
   * @param {*} item
   */


  handleYMSelectedChange() {
    let item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    // console.log(item);
    const {
      currentMonth,
      currentYear
    } = item;

    if (typeof currentMonth === 'number' && typeof currentYear === 'number') {
      // Strings with only dates (e.g. "1970-01-01") will be treated as UTC instead of local time #1460
      const date = new Date(currentYear, currentMonth - 1);
      this.handleSelectedChange([date]);
    }
  }

  handleConfirm() {
    const {
      cachedSelectedValue,
      value
    } = this._adapter.getStates();

    const isRangeValueComplete = this._isRangeValueComplete(cachedSelectedValue);

    const newValue = isRangeValueComplete ? cachedSelectedValue : value;

    if (this._adapter.needConfirm() && !this._isControlledComponent()) {
      this._adapter.updateValue(newValue);
    } // If the input is incomplete, the legal date of the last input is used


    this.closePanel(undefined, undefined, newValue);

    if (isRangeValueComplete) {
      const {
        notifyValue,
        notifyDate
      } = this.disposeCallbackArgs(cachedSelectedValue);

      this._adapter.notifyConfirm(notifyDate, notifyValue);
    }
  }

  handleCancel() {
    this.closePanel();
    const value = this.getState('value');
    const {
      notifyValue,
      notifyDate
    } = this.disposeCallbackArgs(value);

    this._adapter.notifyCancel(notifyDate, notifyValue);
  }

  handlePresetClick(item, e) {
    const {
      type,
      timeZone
    } = this.getProps();
    const prevTimeZone = this.getState('prevTimezone');
    let value;

    switch (type) {
      case 'month':
      case 'dateTime':
      case 'date':
        value = this.parseWithTimezone([item.start], timeZone, prevTimeZone);
        this.handleSelectedChange(value);
        break;

      case 'dateTimeRange':
      case 'dateRange':
        value = this.parseWithTimezone([item.start, item.end], timeZone, prevTimeZone);
        this.handleSelectedChange(value, {
          needCheckFocusRecord: false
        });
        break;

      default:
        break;
    }

    this._adapter.notifyPresetsClick(item, e);
  }
  /**
   * 根据 type 处理 onChange 返回的参数
   *
   *  - 返回的日期需要把用户时间转换为设置的时区时间
   *      - 用户时间：用户计算机系统时间
   *      - 时区时间：通过 ConfigProvider 设置的 timeZone
   *  - 例子：用户设置时区为+9，计算机所在时区为+8区，然后用户选择了22:00
   *      - DatePicker 内部保存日期 state 为 +8 的 22:00 => a = new Date("2021-05-25 22:00:00")
   *      - 传出去时，需要把 +8 的 22:00 => +9 的 22:00 => b = zonedTimeToUtc(a, "+09:00");
   *
   * According to the type processing onChange returned parameters
   *
   *   - the returned date needs to convert the user time to the set time zone time
   *       - user time: user computer system time
   *       - time zone time: timeZone set by ConfigProvider
   *   - example: the user sets the time zone to + 9, the computer's time zone is + 8 zone, and then the user selects 22:00
   *       - DatePicker internal save date state is + 8 22:00 = > a = new Date ("2021-05-25 22:00:00")
   *       - when passed out, you need to + 8 22:00 = > + 9 22:00 = > b = zonedTimeToUtc (a, "+ 09:00");
   *
   *  e.g.
   *  let a = new Date ("2021-05-25 22:00:00");
   *       = > Tue May 25 2021 22:00:00 GMT + 0800 (China Standard Time)
   *  let b = zonedTimeToUtc (a, "+ 09:00");
   *       = > Tue May 25 2021 21:00:00 GMT + 0800 (China Standard Time)
   *
   * @param {Date|Date[]} value
   * @return {{ notifyDate: Date|Date[], notifyValue: string|string[]}}
   */


  disposeCallbackArgs(value) {
    let _value = is_array_default()(value) ? value : value && [value] || [];

    if (this.isValidTimeZone()) {
      const timeZone = this.getProp('timeZone');
      _value = map_default()(_value).call(_value, date => date_fns_extra_zonedTimeToUtc(date, timeZone));
    }

    const type = this.getProp('type');
    const formatToken = this.getProp('format') || getDefaultFormatTokenByType(type);
    let notifyValue, notifyDate;

    switch (type) {
      case 'date':
      case 'dateTime':
      case 'month':
        if (!this._isMultiple()) {
          notifyValue = _value[0] && this.localeFormat(_value[0], formatToken);
          [notifyDate] = _value;
        } else {
          notifyValue = map_default()(_value).call(_value, v => v && this.localeFormat(v, formatToken));
          notifyDate = [..._value];
        }

        break;

      case 'dateRange':
      case 'dateTimeRange':
        notifyValue = map_default()(_value).call(_value, v => v && this.localeFormat(v, formatToken));
        notifyDate = [..._value];
        break;

      default:
        break;
    }

    return {
      notifyValue,
      notifyDate
    };
  }
  /**
   * Notice: Check whether the date is the same as the state value before calling
   * @param {Date[]} value
   */


  _notifyChange(value) {
    if (this._isRangeType() && !this._isRangeValueComplete(value)) {
      return;
    }

    const {
      onChangeWithDateFirst
    } = this.getProps();
    const {
      notifyValue,
      notifyDate
    } = this.disposeCallbackArgs(value);

    if (onChangeWithDateFirst) {
      this._adapter.notifyChange(notifyDate, notifyValue);
    } else {
      this._adapter.notifyChange(notifyValue, notifyDate);
    }
  }
  /**
   * Get the date changed through the date panel or enter
   * @param {Date[]} dates
   * @returns {Date[]}
   */


  _getChangedDates(dates) {
    const type = this._adapter.getProp('type');

    const stateValue = this._adapter.getState('value');

    const changedDates = [];

    switch (type) {
      case 'dateRange':
      case 'dateTimeRange':
        const [stateStart, stateEnd] = stateValue;
        const [start, end] = dates;

        if (!isEqual_isEqual(start, stateStart)) {
          changedDates.push(start);
        }

        if (!isEqual_isEqual(end, stateEnd)) {
          changedDates.push(end);
        }

        break;

      default:
        const stateValueSet = new set_default.a();

        for_each_default()(stateValue).call(stateValue, value => stateValueSet.add(isDate(value) && value.valueOf()));

        for (const date of dates) {
          if (!stateValueSet.has(isDate(date) && date.valueOf())) {
            changedDates.push(date);
          }
        }

    }

    return changedDates;
  }
  /**
   * Whether a date is disabled
   * @param {Array} value
   */


  _someDateDisabled(value) {
    const stateValue = this.getState('value');
    const disabledOptions = {
      rangeStart: '',
      rangeEnd: ''
    }; // DisabledDate needs to pass the second parameter

    if (this._isRangeType() && is_array_default()(stateValue)) {
      if (isValid(stateValue[0])) {
        const rangeStart = format_format(stateValue[0], 'yyyy-MM-dd');
        disabledOptions.rangeStart = rangeStart;
      }

      if (isValid(stateValue[1])) {
        const rangeEnd = format_format(stateValue[1], 'yyyy-MM-dd');
        disabledOptions.rangeEnd = rangeEnd;
      }
    }

    let isSomeDateDisabled = false;

    for (const date of value) {
      // skip check if date is null
      if (!isNullOrUndefined(date) && this.disabledDisposeDate(date, disabledOptions)) {
        isSomeDateDisabled = true;
        break;
      }
    }

    return isSomeDateDisabled;
  }
  /**
   * Format locale date
   * locale get from LocaleProvider
   * @param {Date} date
   * @param {String} token
   */


  localeFormat(date, token) {
    const dateFnsLocale = this._adapter.getProp('dateFnsLocale');

    return format_format(date, token, {
      locale: dateFnsLocale
    });
  }
  /**
   * Convert computer date to UTC date
   * Before passing the date to the user, you need to convert the date to UTC time
   * dispose date from computer date to utc date
   * When given timeZone prop, you should convert computer date to utc date before passing to user
   * @param {(date: Date) => Boolean} fn
   * @param {Date|Date[]} date
   * @returns {Boolean}
   */


  disposeDateFn(fn, date) {
    const {
      notifyDate
    } = this.disposeCallbackArgs(date);

    const dateIsArray = is_array_default()(date);

    const notifyDateIsArray = is_array_default()(notifyDate);

    let disposeDate;

    if (dateIsArray === notifyDateIsArray) {
      disposeDate = notifyDate;
    } else {
      disposeDate = dateIsArray ? [notifyDate] : notifyDate[0];
    }

    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      rest[_key - 2] = arguments[_key];
    }

    return fn(disposeDate, ...rest);
  }
  /**
   * Determine whether the date is disabled
   * Whether the date is disabled
   * @param {Date} date
   * @returns {Boolean}
   */


  disabledDisposeDate(date) {
    const {
      disabledDate
    } = this.getProps();

    for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      rest[_key2 - 1] = arguments[_key2];
    }

    return this.disposeDateFn(disabledDate, date, ...rest);
  }
  /**
   * Determine whether the date is disabled
   * Whether the date time is disabled
   * @param {Date|Date[]} date
   * @returns {Object}
   */


  disabledDisposeTime(date) {
    const {
      disabledTime
    } = this.getProps();

    for (var _len3 = arguments.length, rest = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      rest[_key3 - 1] = arguments[_key3];
    }

    return this.disposeDateFn(disabledTime, date, ...rest);
  }
  /**
   * Trigger wrapper needs to do two things:
   *  1. Open Panel when clicking trigger;
   *  2. When clicking on a child but the child does not listen to the focus event, manually trigger focus
   *
   * @param {Event} e
   * @returns
   */


  handleTriggerWrapperClick(e) {
    const {
      disabled,
      triggerRender
    } = this._adapter.getProps();

    const {
      rangeInputFocus
    } = this._adapter.getStates();

    if (disabled) {
      return;
    }
    /**
     * - 非范围选择时，trigger 为原生输入框，已在组件内处理了 focus 逻辑
     * - isEventTarget 函数用于判断触发事件的是否为 input wrapper。如果是冒泡上来的不用处理，因为在子级已经处理了 focus 逻辑。
     *
     * - When type is not range type, Input component will automatically focus in the same case
     * - isEventTarget is used to judge whether the event is a bubbling event
     */


    if (this._isRangeType() && !rangeInputFocus) {
      if (this._adapter.isEventTarget(e)) {
        set_timeout_default()(() => {
          // using setTimeout get correct state value 'rangeInputFocus'
          this.handleInputFocus(e, 'rangeStart');
        }, 0);
      } else if (isFunction_default()(triggerRender)) {
        // 如果是 triggerRender 场景，因为没有 input，因此打开面板时默认 focus 在 rangeStart
        // If it is a triggerRender scene, because there is no input, the default focus is rangeStart when the panel is opened
        this._adapter.setRangeInputFocus('rangeStart');
      }

      this.openPanel();
    } else {
      this.openPanel();
    }
  }

  handlePanelVisibleChange(visible) {
    if (visible) {
      this._adapter.setInsetInputFocus();
      /**
       * After the panel is closed, the trigger input is disabled
       * 面板关闭后，trigger input 禁用
       */


      set_timeout_default()(() => {
        this._adapter.setTriggerDisabled(true);
      }, 0);
    } else {
      this._adapter.setTriggerDisabled(false);
    }
  }

}
// CONCATENATED MODULE: ../semi-foundation/datePicker/_utils/formatter.ts



/**
 * @file
 * Date-related formatting display method
 */


/**
 * Formats the displayed date text
 * @param {string[]|Date[]} values
 * @param {string} formatToken
 * @param {Object} groupOptions
 * @param {Object} locale
 * @returns {string}
 */

function formatDateValues(values, formatToken) {
  let {
    groupInnerSeparator = datePicker_constants_strings.DEFAULT_SEPARATOR_RANGE,
    groupSize = 1,
    groupSeparator = datePicker_constants_strings.DEFAULT_SEPARATOR_MULTIPLE
  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  let locale = arguments.length > 3 ? arguments[3] : undefined;
  let text = '';
  (groupSize <= 0 || typeof groupSize !== 'number') && (groupSize = 1); // console.log(values, formatToken, groupInnerSeparator, groupSize, groupSeparator);

  if (is_array_default()(values) && values.length) {
    const groups = [];
    const {
      length
    } = values; // chunk

    for (let i = 0; i < length; i++) {
      if (i % groupSize === 0) {
        groups.push([]);
      }

      const curArrIdx = Math.floor(i / groupSize);
      groups[curArrIdx].push(values[i]);
    }

    text = map_default()(groups).call(groups, arr => map_default()(arr).call(arr, v => {
      if (v) {
        // console.log(`formatDateValues() -> formatDateValues: ${v}`);
        return format_format(v, formatToken, {
          locale
        });
      } else {
        return '';
      }
    }).join(groupInnerSeparator)).join(groupSeparator);
  }

  return text;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/addMonths/index.js



/**
 * @name addMonths
 * @category Month Helpers
 * @summary Add the specified number of months to the given date.
 *
 * @description
 * Add the specified number of months to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the months added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 5 months to 1 September 2014:
 * const result = addMonths(new Date(2014, 8, 1), 5)
 * //=> Sun Feb 01 2015 00:00:00
 */

function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);

  if (isNaN(amount)) {
    return new Date(NaN);
  }

  if (!amount) {
    // If 0 months, no-op to avoid changing times in the hour before end of DST
    return date;
  }

  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for
  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and
  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we
  // want except that dates will wrap around the end of a month, meaning that
  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So
  // we'll default to the end of the desired month by adding 1 to the desired
  // month and using a date of 0 to back up one day to the end of the desired
  // month.

  var endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();

  if (dayOfMonth >= daysInMonth) {
    // If we're already at the end of the month, then this is the correct date
    // and we're done.
    return endOfDesiredMonth;
  } else {
    // Otherwise, we now know that setting the original day-of-month value won't
    // cause an overflow, so set the desired day-of-month. Note that we can't
    // just set the date of `endOfDesiredMonth` because that object may have had
    // its time changed in the unusual case where where a DST transition was on
    // the last day of the month and its local time was in the hour skipped or
    // repeated next to a DST transition.  So we use `date` instead which is
    // guaranteed to still have the original time.
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
}
// CONCATENATED MODULE: ../semi-foundation/datePicker/_utils/getDefaultPickerDate.ts





/**
 * get left panel picker date and right panel picker date
 */

function getDefaultPickerDate(options) {
  const {
    defaultPickerValue,
    format,
    dateFnsLocale
  } = options;
  let nowDate = is_array_default()(defaultPickerValue) ? defaultPickerValue[0] : defaultPickerValue;
  let nextDate = is_array_default()(defaultPickerValue) ? defaultPickerValue[1] : undefined;

  switch (true) {
    case isValidDate(nowDate):
      break;

    case isTimestamp(nowDate):
      nowDate = new Date(nowDate);
      break;

    case typeof nowDate === 'string':
      nowDate = compatibleParse(nowDate, format, undefined, dateFnsLocale);
      break;

    default:
      nowDate = new Date();
      break;
  }

  switch (true) {
    case isValidDate(nextDate):
      break;

    case isTimestamp(nextDate):
      nextDate = new Date(nextDate);
      break;

    case typeof nextDate === 'string':
      nextDate = compatibleParse(nextDate, format, undefined, dateFnsLocale);
      break;

    default:
      nextDate = addMonths(nowDate, 1);
      break;
  }

  return {
    nowDate: nowDate,
    nextDate: nextDate
  };
}
// CONCATENATED MODULE: ../semi-foundation/datePicker/inputFoundation.ts

















const KEY_CODE_ENTER = 'Enter';
const KEY_CODE_TAB = 'Tab';
class inputFoundation_InputFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  init() {} // eslint-disable-next-line @typescript-eslint/no-empty-function


  destroy() {}

  handleClick(e) {
    this._adapter.notifyClick(e);
  }

  handleChange(value, e) {
    this._adapter.notifyChange(value, e);
  }

  handleInputComplete(e) {
    /**
     * onKeyPress, e.key Code gets a value of 0 instead of 13
     * Here key is used to judge the button
     */
    if (e.key === KEY_CODE_ENTER) {
      this._adapter.notifyEnter(e.target.value);
    }
  }

  handleInputClear(e) {
    this._adapter.notifyClear(e);
  }

  handleRangeInputClear(e) {
    // prevent trigger click outside
    this.stopPropagation(e);

    this._adapter.notifyRangeInputClear(e);
  }

  handleRangeInputEnterPress(e, rangeInputValue) {
    if (e.key === KEY_CODE_ENTER) {
      this._adapter.notifyEnter(rangeInputValue);
    }
  }

  handleRangeInputEndKeyPress(e) {
    if (e.key === KEY_CODE_TAB) {
      this._adapter.notifyTabPress(e);
    }
  }

  handleRangeInputFocus(e, rangeType) {
    this._adapter.notifyRangeInputFocus(e, rangeType);
  }

  formatShowText(value, customFormat) {
    const {
      type,
      dateFnsLocale,
      format,
      rangeSeparator
    } = this._adapter.getProps();

    const formatToken = customFormat || format || getDefaultFormatTokenByType(type);
    let text = '';

    switch (type) {
      case 'date':
        text = formatDateValues(value, formatToken, undefined, dateFnsLocale);
        break;

      case 'dateRange':
        text = formatDateValues(value, formatToken, {
          groupSize: 2,
          groupInnerSeparator: rangeSeparator
        }, dateFnsLocale);
        break;

      case 'dateTime':
        text = formatDateValues(value, formatToken, undefined, dateFnsLocale);
        break;

      case 'dateTimeRange':
        text = formatDateValues(value, formatToken, {
          groupSize: 2,
          groupInnerSeparator: rangeSeparator
        }, dateFnsLocale);
        break;

      case 'month':
        text = formatDateValues(value, formatToken, undefined, dateFnsLocale);
        break;

      default:
        break;
    }

    return text;
  }

  handleInsetInputChange(options) {
    const {
      value,
      valuePath,
      insetInputValue
    } = options;

    const {
      format,
      type
    } = this._adapter.getProps();

    const insetFormatToken = getInsetInputFormatToken({
      type,
      format
    });

    let newInsetInputValue = lodash_set_default()(cloneDeep_default()(insetInputValue), valuePath, value);

    newInsetInputValue = this._autoFillTimeToInsetInputValue({
      insetInputValue: newInsetInputValue,
      valuePath,
      format: insetFormatToken
    });
    const newInputValue = this.concatInsetInputValue({
      insetInputValue: newInsetInputValue
    });

    this._adapter.notifyInsetInputChange({
      insetInputValue: newInsetInputValue,
      format: insetFormatToken,
      insetInputStr: newInputValue
    });
  }

  _autoFillTimeToInsetInputValue(options) {
    const {
      valuePath,
      insetInputValue,
      format
    } = options;

    const {
      type,
      defaultPickerValue,
      dateFnsLocale
    } = this._adapter.getProps();

    const insetInputValueWithTime = cloneDeep_default()(insetInputValue);

    const {
      nowDate,
      nextDate
    } = getDefaultPickerDate({
      defaultPickerValue,
      format,
      dateFnsLocale
    });

    if (includes_default()(type).call(type, 'Time')) {
      let timeStr = '';

      const dateFormatToken = get_default()(format.split(' '), '0', datePicker_constants_strings.FORMAT_FULL_DATE);

      const timeFormatToken = get_default()(format.split(' '), '1', datePicker_constants_strings.FORMAT_TIME_PICKER);

      switch (valuePath) {
        case 'monthLeft.dateInput':
          const dateLeftStr = insetInputValueWithTime.monthLeft.dateInput;

          if (!insetInputValueWithTime.monthLeft.timeInput && dateLeftStr.length === dateFormatToken.length) {
            const dateLeftParsed = compatibleParse(insetInputValueWithTime.monthLeft.dateInput, dateFormatToken);

            if (isValidDate(dateLeftParsed)) {
              timeStr = format_format(nowDate, timeFormatToken);
              insetInputValueWithTime.monthLeft.timeInput = timeStr;
            }
          }

          break;

        case 'monthRight.dateInput':
          const dateRightStr = insetInputValueWithTime.monthRight.dateInput;

          if (!insetInputValueWithTime.monthRight.timeInput && dateRightStr.length === dateFormatToken.length) {
            const dateRightParsed = compatibleParse(dateRightStr, dateFormatToken);

            if (isValidDate(dateRightParsed)) {
              timeStr = format_format(nextDate, timeFormatToken);
              insetInputValueWithTime.monthRight.timeInput = timeStr;
            }
          }

          break;

        default:
          break;
      }
    }

    return insetInputValueWithTime;
  }
  /**
   * 只有传入的 format 符合 formatReg 时，才会使用用户传入的 format
   * 否则会使用默认的 format 作为 placeholder
   *
   * The format passed in by the user will be used only if the incoming format conforms to formatReg
   * Otherwise the default format will be used as placeholder
   */


  getInsetInputPlaceholder() {
    const {
      type,
      format
    } = this._adapter.getProps();

    const insetInputFormat = getInsetInputFormatToken({
      type,
      format
    });
    let datePlaceholder, timePlaceholder;

    switch (type) {
      case 'date':
      case 'month':
      case 'dateRange':
        datePlaceholder = insetInputFormat;
        break;

      case 'dateTime':
      case 'dateTimeRange':
        [datePlaceholder, timePlaceholder] = insetInputFormat.split(' ');
        break;
    }

    return {
      datePlaceholder,
      timePlaceholder
    };
  }
  /**
   * 从当前日期值或 inputValue 中解析出 insetInputValue
   *
   * Parse out insetInputValue from current date value or inputValue
   */


  getInsetInputValue(_ref) {
    let {
      value,
      insetInputValue
    } = _ref;

    const {
      type,
      rangeSeparator,
      format
    } = this._adapter.getProps();

    let inputValueStr = '';

    if (isObject_default()(insetInputValue)) {
      inputValueStr = this.concatInsetInputValue({
        insetInputValue
      });
    } else {
      const insetInputFormat = getInsetInputFormatToken({
        format,
        type
      });
      inputValueStr = this.formatShowText(value, insetInputFormat);
    }

    const newInsetInputValue = getInsetInputValueFromInsetInputStr({
      inputValue: inputValueStr,
      type,
      rangeSeparator
    });
    return newInsetInputValue;
  }

  concatInsetDateAndTime(_ref2) {
    var _context;

    let {
      date,
      time
    } = _ref2;
    return concat_default()(_context = "".concat(date, " ")).call(_context, time);
  }

  concatInsetDateRange(_ref3) {
    var _context2, _context3;

    let {
      rangeStart,
      rangeEnd
    } = _ref3;

    const {
      rangeSeparator
    } = this._adapter.getProps();

    return concat_default()(_context2 = concat_default()(_context3 = "".concat(rangeStart)).call(_context3, rangeSeparator)).call(_context2, rangeEnd);
  }

  concatInsetInputValue(_ref4) {
    let {
      insetInputValue
    } = _ref4;

    const {
      type
    } = this._adapter.getProps();

    let inputValue = '';

    switch (type) {
      case 'date':
      case 'month':
        inputValue = insetInputValue.monthLeft.dateInput;
        break;

      case 'dateRange':
        inputValue = this.concatInsetDateRange({
          rangeStart: insetInputValue.monthLeft.dateInput,
          rangeEnd: insetInputValue.monthRight.dateInput
        });
        break;

      case 'dateTime':
        inputValue = this.concatInsetDateAndTime({
          date: insetInputValue.monthLeft.dateInput,
          time: insetInputValue.monthLeft.timeInput
        });
        break;

      case 'dateTimeRange':
        const rangeStart = this.concatInsetDateAndTime({
          date: insetInputValue.monthLeft.dateInput,
          time: insetInputValue.monthLeft.timeInput
        });
        const rangeEnd = this.concatInsetDateAndTime({
          date: insetInputValue.monthRight.dateInput,
          time: insetInputValue.monthRight.timeInput
        });
        inputValue = this.concatInsetDateRange({
          rangeStart,
          rangeEnd
        });
        break;
    }

    return inputValue;
  }

}
// CONCATENATED MODULE: ./datePicker/insetInput.tsx




function InsetDateInput(props) {
  const {
    insetInputValue,
    valuePath,
    onFocus,
    onChange,
    placeholder,
    forwardRef
  } = props;

  const value = get_default()(insetInputValue, valuePath);

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(input_0, {
    value: value,
    onChange: (value, event) => {
      onChange({
        value,
        event,
        insetInputValue,
        valuePath
      });
    },
    onFocus: onFocus,
    placeholder: placeholder,
    ref: forwardRef
  });
}
function InsetTimeInput(props) {
  const {
    insetInputValue,
    valuePath,
    type,
    onFocus,
    onChange,
    placeholder,
    disabled
  } = props;

  const _isTimeType = includes_default()(type).call(type, 'Time');

  if (!_isTimeType) {
    return null;
  }

  const value = get_default()(insetInputValue, valuePath);

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(input_0, {
    value: value,
    onChange: (value, event) => {
      onChange({
        value,
        event,
        insetInputValue,
        valuePath
      });
    },
    onFocus: onFocus,
    placeholder: placeholder,
    disabled: disabled
  });
}
// CONCATENATED MODULE: ./datePicker/dateInput.tsx







var dateInput_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable jsx-a11y/click-events-have-key-events */

/* eslint-disable jsx-a11y/no-static-element-interactions */

/* eslint-disable max-lines-per-function */

/* eslint-disable no-unused-vars */












 // eslint-disable-next-line @typescript-eslint/ban-types

class dateInput_DateInput extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.handleChange = (value, e) => this.foundation.handleChange(value, e);

    this.handleEnterPress = e => this.foundation.handleInputComplete(e);

    this.handleInputClear = e => this.foundation.handleInputClear(e);

    this.handleRangeInputChange = (rangeStart, rangeEnd, e) => {
      const rangeInputValue = this.getRangeInputValue(rangeStart, rangeEnd);
      this.foundation.handleChange(rangeInputValue, e);
    };

    this.handleRangeInputClear = e => {
      this.foundation.handleRangeInputClear(e);
    };

    this.handleRangeInputEnterPress = (e, rangeStart, rangeEnd) => {
      const rangeInputValue = this.getRangeInputValue(rangeStart, rangeEnd);
      this.foundation.handleRangeInputEnterPress(e, rangeInputValue);
    };

    this.handleRangeInputEndKeyPress = e => {
      this.foundation.handleRangeInputEndKeyPress(e);
    };

    this.handleRangeInputFocus = (e, rangeType) => {
      this.foundation.handleRangeInputFocus(e, rangeType);
    };

    this.handleRangeStartFocus = e => {
      this.handleRangeInputFocus(e, 'rangeStart');
    };

    this.handleInsetInputChange = options => {
      this.foundation.handleInsetInputChange(options);
    };

    this.getRangeInputValue = (rangeStart, rangeEnd) => {
      var _context, _context2;

      const {
        rangeSeparator
      } = this.props;

      const rangeInputValue = concat_default()(_context = concat_default()(_context2 = "".concat(rangeStart)).call(_context2, rangeSeparator)).call(_context, rangeEnd);

      return rangeInputValue;
    };

    this.foundation = new inputFoundation_InputFoundation(this.adapter);
  }

  get adapter() {
    var _this = this;

    return assign_default()(assign_default()({}, super.adapter), {
      updateIsFocusing: isFocusing => this.setState({
        isFocusing
      }),
      notifyClick: function () {
        return _this.props.onClick(...arguments);
      },
      notifyChange: function () {
        return _this.props.onChange(...arguments);
      },
      notifyEnter: function () {
        return _this.props.onEnterPress(...arguments);
      },
      notifyBlur: function () {
        return _this.props.onBlur(...arguments);
      },
      notifyClear: function () {
        return _this.props.onClear(...arguments);
      },
      notifyFocus: function () {
        return _this.props.onFocus(...arguments);
      },
      notifyRangeInputClear: function () {
        return _this.props.onRangeClear(...arguments);
      },
      notifyRangeInputFocus: function () {
        return _this.props.onFocus(...arguments);
      },
      notifyTabPress: function () {
        return _this.props.onRangeEndTabPress(...arguments);
      },
      notifyInsetInputChange: options => this.props.onInsetInputChange(options)
    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  formatText(value) {
    // eslint-disable-next-line max-len
    return value && value.length ? this.foundation.formatShowText(value) : '';
  }

  renderRangePrefix() {
    const {
      prefix,
      insetLabel,
      prefixCls,
      disabled,
      rangeInputFocus
    } = this.props;
    const labelNode = prefix || insetLabel;
    return labelNode ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-range-input-prefix"),
      onClick: e => !disabled && !rangeInputFocus && this.handleRangeStartFocus(e),
      "x-semi-prop": "prefix,insetLabel"
    }, labelNode) : null;
  }

  renderRangeSeparator(rangeStart, rangeEnd) {
    const {
      disabled,
      rangeSeparator
    } = this.props;
    const separatorCls = classnames_default()({
      ["".concat(datePicker_constants_cssClasses.PREFIX, "-range-input-separator")]: true,
      ["".concat(datePicker_constants_cssClasses.PREFIX, "-range-input-separator-active")]: (rangeStart || rangeEnd) && !disabled
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      onClick: e => !disabled && this.handleRangeStartFocus(e),
      className: separatorCls
    }, rangeSeparator);
  }

  renderRangeClearBtn(rangeStart, rangeEnd) {
    const {
      showClear,
      prefixCls,
      disabled
    } = this.props;
    const allowClear = (rangeStart || rangeEnd) && showClear;
    return allowClear && !disabled ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "button",
      tabIndex: 0,
      "aria-label": "Clear range input value",
      className: "".concat(prefixCls, "-range-input-clearbtn"),
      onMouseDown: e => !disabled && this.handleRangeInputClear(e)
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClear, {
      "aria-hidden": true
    })) : null;
  }

  renderRangeSuffix(suffix) {
    const {
      prefixCls,
      disabled,
      rangeInputFocus
    } = this.props;
    const rangeSuffix = suffix ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-range-input-suffix"),
      onClick: e => !disabled && !rangeInputFocus && this.handleRangeStartFocus(e)
    }, suffix) : null;
    return rangeSuffix;
  }

  renderRangeInput(rangeProps) {
    var _context3, _context4;

    const {
      // this.props
      placeholder,
      inputStyle,
      disabled,
      inputReadOnly,
      autofocus,
      size,
      // compute props
      text,
      suffix,
      inputCls,
      // range only props
      rangeInputStartRef,
      rangeInputEndRef,
      rangeInputFocus,
      prefixCls,
      rangeSeparator
    } = rangeProps;
    const [rangeStart, rangeEnd = ''] = text.split(rangeSeparator) || [];
    const rangeSize = size === 'large' ? 'default' : 'small';
    const rangePlaceholder = is_array_default()(placeholder) ? placeholder : [placeholder, placeholder];
    const [rangeStartPlaceholder, rangeEndPlaceholder] = rangePlaceholder;
    const inputLeftWrapperCls = classnames_default()("".concat(prefixCls, "-range-input-wrapper-start"), "".concat(prefixCls, "-range-input-wrapper"), {
      ["".concat(prefixCls, "-range-input-wrapper-active")]: rangeInputFocus === 'rangeStart' && !disabled,
      ["".concat(prefixCls, "-range-input-wrapper-start-with-prefix")]: this.props.prefix || this.props.insetLabel
    });
    const inputRightWrapperCls = classnames_default()("".concat(prefixCls, "-range-input-wrapper-end"), "".concat(prefixCls, "-range-input-wrapper"), {
      ["".concat(prefixCls, "-range-input-wrapper-active")]: rangeInputFocus === 'rangeEnd' && !disabled
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, this.renderRangePrefix(), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      onClick: e => !disabled && this.handleRangeInputFocus(e, 'rangeStart'),
      className: concat_default()(_context3 = "".concat(inputCls, " ")).call(_context3, inputLeftWrapperCls)
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(input_0, {
      size: rangeSize,
      style: inputStyle,
      disabled: disabled,
      readonly: inputReadOnly,
      placeholder: rangeStartPlaceholder,
      value: rangeStart,
      // range input onBlur function is called when panel is closed
      // onBlur={noop}
      onChange: (rangeStartValue, e) => this.handleRangeInputChange(rangeStartValue, rangeEnd, e),
      onEnterPress: e => this.handleRangeInputEnterPress(e, rangeStart, rangeEnd),
      onFocus: e => this.handleRangeInputFocus(e, 'rangeStart'),
      autofocus: autofocus,
      ref: rangeInputStartRef
    })), this.renderRangeSeparator(rangeStart, rangeEnd), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: concat_default()(_context4 = "".concat(inputCls, " ")).call(_context4, inputRightWrapperCls),
      onClick: e => !disabled && this.handleRangeInputFocus(e, 'rangeEnd')
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(input_0, {
      size: rangeSize,
      style: inputStyle,
      disabled: disabled,
      readonly: inputReadOnly,
      placeholder: rangeEndPlaceholder,
      value: rangeEnd,
      // range input onBlur function is called when panel is closed
      // onBlur={noop}
      onChange: (rangeEndValue, e) => this.handleRangeInputChange(rangeStart, rangeEndValue, e),
      onEnterPress: e => this.handleRangeInputEnterPress(e, rangeStart, rangeEnd),
      onFocus: e => this.handleRangeInputFocus(e, 'rangeEnd'),
      onKeyDown: this.handleRangeInputEndKeyPress,
      ref: rangeInputEndRef
    })), this.renderRangeClearBtn(rangeStart, rangeEnd), this.renderRangeSuffix(suffix));
  }

  renderInputInset() {
    const {
      type,
      handleInsetDateFocus,
      handleInsetTimeFocus,
      value,
      insetInputValue,
      prefixCls,
      rangeInputStartRef,
      rangeInputEndRef,
      density
    } = this.props;

    const _isRangeType = includes_default()(type).call(type, 'Range');

    const newInsetInputValue = this.foundation.getInsetInputValue({
      value,
      insetInputValue
    });
    const {
      datePlaceholder,
      timePlaceholder
    } = this.foundation.getInsetInputPlaceholder();
    const insetInputWrapperCls = "".concat(prefixCls, "-inset-input-wrapper");
    const separatorCls = "".concat(prefixCls, "-inset-input-separator");
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: insetInputWrapperCls,
      "x-type": type
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(InsetDateInput, {
      forwardRef: rangeInputStartRef,
      insetInputValue: newInsetInputValue,
      placeholder: datePlaceholder,
      valuePath: 'monthLeft.dateInput',
      onChange: this.handleInsetInputChange,
      onFocus: e => handleInsetDateFocus(e, 'rangeStart')
    }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(InsetTimeInput, {
      disabled: !newInsetInputValue.monthLeft.dateInput,
      insetInputValue: newInsetInputValue,
      placeholder: timePlaceholder,
      type: type,
      valuePath: 'monthLeft.timeInput',
      onChange: this.handleInsetInputChange,
      onFocus: handleInsetTimeFocus
    }), _isRangeType && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: separatorCls
    }, density === 'compact' ? null : '-'), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(InsetDateInput, {
      forwardRef: rangeInputEndRef,
      insetInputValue: newInsetInputValue,
      placeholder: datePlaceholder,
      valuePath: 'monthRight.dateInput',
      onChange: this.handleInsetInputChange,
      onFocus: e => handleInsetDateFocus(e, 'rangeEnd')
    }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(InsetTimeInput, {
      disabled: !newInsetInputValue.monthRight.dateInput,
      insetInputValue: newInsetInputValue,
      placeholder: timePlaceholder,
      type: type,
      valuePath: 'monthRight.timeInput',
      onChange: this.handleInsetInputChange,
      onFocus: handleInsetTimeFocus
    })));
  }

  renderTriggerInput() {
    const _a = this.props,
          {
      placeholder,
      type,
      value,
      inputValue,
      inputStyle,
      disabled,
      showClear,
      inputReadOnly,
      insetLabel,
      validateStatus,
      block,
      prefixCls,
      multiple,
      // Whether to allow multiple values for email and file types
      dateFnsLocale,
      // No need to pass to input
      onBlur,
      onClear,
      onFocus,
      prefix,
      autofocus,
      size,
      // range input support props, no need passing to not range type
      rangeInputStartRef,
      rangeInputEndRef,
      onRangeClear,
      onRangeBlur,
      onRangeEndTabPress,
      rangeInputFocus,
      rangeSeparator,
      insetInput,
      insetInputValue,
      defaultPickerValue
    } = _a,
          rest = dateInput_rest(_a, ["placeholder", "type", "value", "inputValue", "inputStyle", "disabled", "showClear", "inputReadOnly", "insetLabel", "validateStatus", "block", "prefixCls", "multiple", "dateFnsLocale", "onBlur", "onClear", "onFocus", "prefix", "autofocus", "size", "rangeInputStartRef", "rangeInputEndRef", "onRangeClear", "onRangeBlur", "onRangeEndTabPress", "rangeInputFocus", "rangeSeparator", "insetInput", "insetInputValue", "defaultPickerValue"]);

    const dateIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconCalendar, {
      "aria-hidden": true
    });
    const dateTimeIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconCalendarClock, {
      "aria-hidden": true
    });
    const suffix = includes_default()(type).call(type, 'Time') ? dateTimeIcon : dateIcon;
    let text = '';

    if (!isNullOrUndefined(inputValue)) {
      text = inputValue;
    } else if (value) {
      text = this.formatText(value);
    }

    const inputCls = classnames_default()({
      ["".concat(prefixCls, "-input-readonly")]: inputReadOnly
    });
    const isRangeType = /range/i.test(type);

    const rangeProps = assign_default()(assign_default()({}, this.props), {
      text,
      suffix,
      inputCls
    });

    return isRangeType ? this.renderRangeInput(rangeProps) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(input_0, assign_default()({}, rest, {
      insetLabel: insetLabel,
      disabled: disabled,
      readonly: inputReadOnly,
      className: inputCls,
      style: inputStyle,
      hideSuffix: showClear,
      placeholder: placeholder,
      onEnterPress: this.handleEnterPress,
      onChange: this.handleChange,
      onClear: this.handleInputClear,
      suffix: suffix,
      showClear: showClear,
      value: text,
      validateStatus: validateStatus,
      prefix: prefix,
      autofocus: autofocus,
      size: size,
      onBlur: onBlur,
      onFocus: onFocus
    }));
  }

  render() {
    const {
      insetInput
    } = this.props;
    return insetInput ? this.renderInputInset() : this.renderTriggerInput();
  }

}
dateInput_DateInput.propTypes = {
  onClick: prop_types_default.a.func,
  onChange: prop_types_default.a.func,
  onEnterPress: prop_types_default.a.func,
  onBlur: prop_types_default.a.func,
  onClear: prop_types_default.a.func,
  onFocus: prop_types_default.a.func,
  value: prop_types_default.a.array,
  disabled: prop_types_default.a.bool,
  type: prop_types_default.a.oneOf(datePicker_constants_strings.TYPE_SET),
  showClear: prop_types_default.a.bool,
  format: prop_types_default.a.string,
  inputStyle: prop_types_default.a.object,
  inputReadOnly: prop_types_default.a.bool,
  insetLabel: prop_types_default.a.node,
  validateStatus: prop_types_default.a.string,
  prefix: prop_types_default.a.node,
  prefixCls: prop_types_default.a.string,
  dateFnsLocale: prop_types_default.a.object.isRequired,
  placeholder: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.array]),
  rangeInputFocus: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.bool]),
  rangeInputStartRef: prop_types_default.a.object,
  rangeInputEndRef: prop_types_default.a.object,
  rangeSeparator: prop_types_default.a.string,
  insetInput: prop_types_default.a.bool,
  insetInputValue: prop_types_default.a.object,
  defaultPickerValue: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number, prop_types_default.a.object, prop_types_default.a.array])
};
dateInput_DateInput.defaultProps = {
  showClear: true,
  onClick: function_noop,
  onChange: function_noop,
  onEnterPress: function_noop,
  onBlur: function_noop,
  onClear: function_noop,
  onFocus: function_noop,
  type: 'date',
  inputStyle: {},
  inputReadOnly: false,
  prefixCls: datePicker_constants_cssClasses.PREFIX,
  rangeSeparator: datePicker_constants_strings.DEFAULT_SEPARATOR_RANGE
};
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/differenceInCalendarMonths/index.js


/**
 * @name differenceInCalendarMonths
 * @category Month Helpers
 * @summary Get the number of calendar months between the given dates.
 *
 * @description
 * Get the number of calendar months between the given dates.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar months
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many calendar months are between 31 January 2014 and 1 September 2014?
 * var result = differenceInCalendarMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 8
 */

function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
  return yearDiff * 12 + monthDiff;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/differenceInCalendarYears/index.js


/**
 * @name differenceInCalendarYears
 * @category Year Helpers
 * @summary Get the number of calendar years between the given dates.
 *
 * @description
 * Get the number of calendar years between the given dates.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar years
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many calendar years are between 31 December 2013 and 11 February 2015?
 * const result = differenceInCalendarYears(
 *   new Date(2015, 1, 11),
 *   new Date(2013, 11, 31)
 * )
 * //=> 2
 */

function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() - dateRight.getFullYear();
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/subMonths/index.js



/**
 * @name subMonths
 * @category Month Helpers
 * @summary Subtract the specified number of months from the given date.
 *
 * @description
 * Subtract the specified number of months from the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the months subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 5 months from 1 February 2015:
 * const result = subMonths(new Date(2015, 1, 1), 5)
 * //=> Mon Sep 01 2014 00:00:00
 */

function subMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, -amount);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/addYears/index.js



/**
 * @name addYears
 * @category Year Helpers
 * @summary Add the specified number of years to the given date.
 *
 * @description
 * Add the specified number of years to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the years added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 5 years to 1 September 2014:
 * const result = addYears(new Date(2014, 8, 1), 5)
 * //=> Sun Sep 01 2019 00:00:00
 */

function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/subYears/index.js



/**
 * @name subYears
 * @category Year Helpers
 * @summary Subtract the specified number of years from the given date.
 *
 * @description
 * Subtract the specified number of years from the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the years subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 5 years from 1 September 2014:
 * const result = subYears(new Date(2014, 8, 1), 5)
 * //=> Tue Sep 01 2009 00:00:00
 */

function subYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addYears(dirtyDate, -amount);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/getDaysInMonth/index.js


/**
 * @name getDaysInMonth
 * @category Month Helpers
 * @summary Get the number of days in a month of the given date.
 *
 * @description
 * Get the number of days in a month of the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the number of days in a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // How many days are in February 2000?
 * const result = getDaysInMonth(new Date(2000, 1))
 * //=> 29
 */

function getDaysInMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var monthIndex = date.getMonth();
  var lastDayOfMonth = new Date(0);
  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth.setHours(0, 0, 0, 0);
  return lastDayOfMonth.getDate();
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/setMonth/index.js




/**
 * @name setMonth
 * @category Month Helpers
 * @summary Set the month to the given date.
 *
 * @description
 * Set the month to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} month - the month of the new date
 * @returns {Date} the new date with the month set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set February to 1 September 2014:
 * const result = setMonth(new Date(2014, 8, 1), 1)
 * //=> Sat Feb 01 2014 00:00:00
 */

function setMonth(dirtyDate, dirtyMonth) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var month = toInteger(dirtyMonth);
  var year = date.getFullYear();
  var day = date.getDate();
  var dateWithDesiredMonth = new Date(0);
  dateWithDesiredMonth.setFullYear(year, month, 15);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month
  // if the original date was the last day of the longer month

  date.setMonth(month, Math.min(day, daysInMonth));
  return date;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/set/index.js





/**
 * @name set
 * @category Common Helpers
 * @summary Set date values to a given date.
 *
 * @description
 * Set date values to a given date.
 *
 * Sets time values to date from object `values`.
 * A value is not set if it is undefined or null or doesn't exist in `values`.
 *
 * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts
 * to use native `Date#setX` methods. If you use this function, you may not want to include the
 * other `setX` functions that date-fns provides if you are concerned about the bundle size.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Object} values - an object with options
 * @param {Number} [values.year] - the number of years to be set
 * @param {Number} [values.month] - the number of months to be set
 * @param {Number} [values.date] - the number of days to be set
 * @param {Number} [values.hours] - the number of hours to be set
 * @param {Number} [values.minutes] - the number of minutes to be set
 * @param {Number} [values.seconds] - the number of seconds to be set
 * @param {Number} [values.milliseconds] - the number of milliseconds to be set
 * @returns {Date} the new date with options set
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `values` must be an object
 *
 * @example
 * // Transform 1 September 2014 into 20 October 2015 in a single line:
 * var result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })
 * //=> Tue Oct 20 2015 00:00:00
 *
 * @example
 * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:
 * var result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })
 * //=> Mon Sep 01 2014 12:23:45
 */
function set_set(dirtyDate, values) {
  requiredArgs(2, arguments);

  if (typeof values !== 'object' || values === null) {
    throw new RangeError('values parameter must be an object');
  }

  var date = toDate(dirtyDate); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date

  if (isNaN(date.getTime())) {
    return new Date(NaN);
  }

  if (values.year != null) {
    date.setFullYear(values.year);
  }

  if (values.month != null) {
    date = setMonth(date, values.month);
  }

  if (values.date != null) {
    date.setDate(toInteger(values.date));
  }

  if (values.hours != null) {
    date.setHours(toInteger(values.hours));
  }

  if (values.minutes != null) {
    date.setMinutes(toInteger(values.minutes));
  }

  if (values.seconds != null) {
    date.setSeconds(toInteger(values.seconds));
  }

  if (values.milliseconds != null) {
    date.setMilliseconds(toInteger(values.milliseconds));
  }

  return date;
}
// CONCATENATED MODULE: ../semi-foundation/datePicker/_utils/getFullDateOffset.ts



/**
 * Calculate the date string offset from the date
 * @param {*} fn
 * @param {*} date
 */

const getFullDateOffset = (fn, date) => {
  if (!date) {
    return '';
  }

  const getDate = new Date(date);
  const offsetDate = isFunction_default()(fn) ? fn(getDate) : getDate;
  return format_format(new Date(offsetDate), datePicker_constants_strings.FORMAT_FULL_DATE);
};

/* harmony default export */ var _utils_getFullDateOffset = (getFullDateOffset);
// CONCATENATED MODULE: ../semi-foundation/utils/isString.ts
/* harmony default export */ var utils_isString = (function (str) {
  return typeof str === 'string';
});
// CONCATENATED MODULE: ../semi-foundation/datePicker/_utils/isBefore.ts


function isBefore_isBefore(date, dateToCompare) {
  const dayOne = utils_isString(date) ? parseISO(date) : date;
  const dayTwo = utils_isString(dateToCompare) ? parseISO(dateToCompare) : dateToCompare;
  return isBefore(dayOne, dayTwo);
}
// CONCATENATED MODULE: ../semi-foundation/datePicker/_utils/getMonthTable.ts


/**
 *
 * @param {string} month
 */


function formatFullDate() {
  var _context, _context2;

  let year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  let month = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  let day = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  let dateStr = '';
  const monthFull = typeof month === 'number' && month < 10 ? "0".concat(month) : month.toString();
  const dayNumberFull = typeof day === 'number' && day < 10 ? "0".concat(day) : day.toString();
  dateStr = concat_default()(_context = concat_default()(_context2 = "".concat(String(year), "-")).call(_context2, monthFull, "-")).call(_context, dayNumberFull);
  return dateStr;
}

function getWeeks(date) {
  let weekStartsOn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  const weekDayNotInMonth = {
    dayNumber: '',
    dateNumberFull: '',
    fullDate: ''
  }; // For the first or last week epmtyDays

  const daysInMonth = getDaysInMonth(date); // Get the total number of days in the month

  const year = format_format(date, 'yyyy');
  const month = format_format(date, 'MM');
  const lastday = lastDayOfMonth_lastDayOfMonth(date); // Get the last day of the month

  const firstDay = startOfMonth(date); // Get the first day of the month
  // Const firstDayInWeek = getDay (firstDay);//The first day belongs to the day of the week
  // What is the first day of the month in the first row?

  const firstDayInWeek = Number(format_format(firstDay, 'e', {
    weekStartsOn
  }));
  const weeks = [];
  let week = []; // add empty days to set first day in correct position

  for (let s = 1; s < firstDayInWeek; s++) {
    week.push(weekDayNotInMonth);
  }

  for (let d = 0; d < daysInMonth; d++) {
    const dayNumber = d + 1;
    const dayNumberFull = dayNumber < 10 ? "0".concat(dayNumber) : dayNumber.toString();
    const fullDate = formatFullDate(year, month, dayNumber);
    week.push({
      dayNumber,
      dayNumberFull,
      fullDate
    });

    if (week.length === 7) {
      weeks.push(week);
      week = [];
    } else if (fullDate === format_format(lastday, 'yyyy-MM-dd')) {
      // Last week alone
      weeks.push(week);
      week = [];
    }
  }

  return weeks;
}

const getMonthTable = (month, weekStartsOn) => {
  const weeks = getWeeks(month, weekStartsOn);
  const monthText = format_format(month, 'yyyy-MM');
  return {
    monthText,
    weeks,
    month
  };
};

/* harmony default export */ var _utils_getMonthTable = (getMonthTable);

// CONCATENATED MODULE: ../semi-foundation/datePicker/monthsGridFoundation.ts













/* eslint-disable max-len */









const dateDiffFns = {
  month: differenceInCalendarMonths,
  year: differenceInCalendarYears
};
const dateCalcFns = {
  prevMonth: subMonths,
  nextMonth: addMonths,
  prevYear: subYears,
  nextYear: addYears
};
class monthsGridFoundation_MonthsGridFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter)); // Date change data when double panels

    this.newBiMonthPanelDate = [this.getState('monthLeft').pickerDate, this.getState('monthRight').pickerDate];
  }

  init() {
    const defaultValue = this.getProp('defaultValue');
    this.initDefaultPickerValue();
    this.updateSelectedFromProps(defaultValue);
  }

  initDefaultPickerValue() {
    const defaultPickerValue = compatibleParse(this.getProp('defaultPickerValue'));

    if (defaultPickerValue && isValidDate(defaultPickerValue)) {
      this._updatePanelDetail(datePicker_constants_strings.PANEL_TYPE_LEFT, {
        pickerDate: defaultPickerValue
      });

      this._updatePanelDetail(datePicker_constants_strings.PANEL_TYPE_RIGHT, {
        pickerDate: addMonths(defaultPickerValue, 1)
      });
    }
  }

  updateSelectedFromProps(values) {
    let refreshPicker = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    const type = this.getProp('type');
    const {
      selected,
      rangeStart,
      rangeEnd
    } = this.getStates();

    if (values && values.length) {
      switch (type) {
        case 'date':
          this._initDatePickerFromValue(values, refreshPicker);

          break;

        case 'dateRange':
          this._initDateRangePickerFromValue(values);

          break;

        case 'dateTime':
          this._initDateTimePickerFromValue(values);

          break;

        case 'dateTimeRange':
          this._initDateTimeRangePickerFormValue(values);

          break;

        default:
          break;
      }
    } else if (is_array_default()(values) && !values.length || !values) {
      // Empty panel when value is empty Select date
      if (isSet_default()(selected) && selected.size) {
        this._adapter.updateDaySelected(new set_default.a());
      }

      if (rangeStart) {
        this._adapter.setRangeStart('');
      }

      if (rangeEnd) {
        this._adapter.setRangeEnd('');
      }
    }
  }

  calcDisabledTime(panelType) {
    var _context;

    const {
      disabledTime,
      type
    } = this.getProps();

    if (typeof disabledTime === 'function' && panelType && includes_default()(_context = ['dateTime', 'dateTimeRange']).call(_context, type)) {
      const {
        rangeStart,
        rangeEnd,
        monthLeft
      } = this.getStates();
      const selected = [];

      if (type === 'dateTimeRange') {
        if (rangeStart) {
          selected.push(rangeStart);
        }

        if (rangeStart && rangeEnd) {
          selected.push(rangeEnd);
        }
      } else if (monthLeft && monthLeft.showDate) {
        selected.push(monthLeft.showDate);
      }

      const selectedDates = map_default()(selected).call(selected, str => str instanceof Date ? str : parseISO(str));

      const cbDates = type === 'dateTimeRange' ? selectedDates : selectedDates[0];
      return disabledTime(cbDates, panelType);
    }
  }

  _initDatePickerFromValue(values) {
    let refreshPicker = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    const monthLeft = this.getState('monthLeft');

    const newMonthLeft = assign_default()({}, monthLeft); // REMOVE:


    this._adapter.updateMonthOnLeft(newMonthLeft);

    const newSelected = new set_default.a();

    if (!this._isMultiple()) {
      values[0] && newSelected.add(format_format(values[0], datePicker_constants_strings.FORMAT_FULL_DATE));
    } else {
      for_each_default()(values).call(values, date => {
        date && newSelected.add(format_format(date, datePicker_constants_strings.FORMAT_FULL_DATE));
      });
    }

    if (refreshPicker) {
      this.handleShowDateAndTime(datePicker_constants_strings.PANEL_TYPE_LEFT, values[0] || newMonthLeft.pickerDate);
    } else {
      // FIXME:
      this.handleShowDateAndTime(datePicker_constants_strings.PANEL_TYPE_LEFT, newMonthLeft.pickerDate);
    }

    this._adapter.updateDaySelected(newSelected);
  }

  _initDateRangePickerFromValue(values) {
    let withTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    // init month panel
    const monthLeft = this.getState('monthLeft');
    const monthRight = this.getState('monthRight');

    const adjustResult = this._autoAdjustMonth(assign_default()(assign_default()({}, monthLeft), {
      pickerDate: values[0] || monthLeft.pickerDate
    }), assign_default()(assign_default()({}, monthRight), {
      pickerDate: values[1] || monthRight.pickerDate
    }));

    this.handleShowDateAndTime(datePicker_constants_strings.PANEL_TYPE_LEFT, adjustResult.monthLeft.pickerDate);
    this.handleShowDateAndTime(datePicker_constants_strings.PANEL_TYPE_RIGHT, adjustResult.monthRight.pickerDate); // init range

    const formatToken = withTime ? datePicker_constants_strings.FORMAT_DATE_TIME : datePicker_constants_strings.FORMAT_FULL_DATE;
    let rangeStart = values[0] && format_format(values[0], formatToken);
    let rangeEnd = values[1] && format_format(values[1], formatToken);

    if (this._isNeedSwap(rangeStart, rangeEnd)) {
      [rangeStart, rangeEnd] = [rangeEnd, rangeStart];
    }

    this._adapter.setRangeStart(rangeStart);

    this._adapter.setRangeEnd(rangeEnd);

    this._adapter.setHoverDay(rangeEnd);
  }

  _initDateTimePickerFromValue(values) {
    this._initDatePickerFromValue(values);
  }

  _initDateTimeRangePickerFormValue(values) {
    this._initDateRangePickerFromValue(values, true);
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  destroy() {}
  /**
   * sync change another panel month when change months from the else yam panel
   * call it when
   *  - current change panel targe date month is same with another panel date
   *
   * @example
   *  - panelType=right, target=new Date('2022-09-01') and left panel is in '2022-09' => call it, left panel minus one month to '2022-08'
   *  - panelType=left, target=new Date('2021-12-01') and right panel is in '2021-12' => call it, right panel add one month to '2021-01'
   */


  handleSyncChangeMonths(options) {
    const {
      panelType,
      target
    } = options;

    const {
      type
    } = this._adapter.getProps();

    const {
      monthLeft,
      monthRight
    } = this._adapter.getStates();

    if (this.isRangeType(type)) {
      if (panelType === 'right' && differenceInCalendarMonths(target, monthLeft.pickerDate) === 0) {
        this.handleYearOrMonthChange('prevMonth', 'left', 1, true);
      } else if (panelType === 'left' && differenceInCalendarMonths(monthRight.pickerDate, target) === 0) {
        this.handleYearOrMonthChange('nextMonth', 'right', 1, true);
      }
    }
  }
  /**
   * Get the target date based on the panel type and switch type
   */


  getTargetChangeDate(options) {
    const {
      panelType,
      switchType
    } = options;

    const {
      monthRight,
      monthLeft
    } = this._adapter.getStates();

    const currentDate = panelType === 'left' ? monthLeft.pickerDate : monthRight.pickerDate;
    let target;

    switch (switchType) {
      case 'prevMonth':
        target = addMonths(currentDate, -1);
        break;

      case 'nextMonth':
        target = addMonths(currentDate, 1);
        break;

      case 'prevYear':
        target = addYears(currentDate, -1);
        break;

      case 'nextYear':
        target = addYears(currentDate, 1);
        break;
    }

    return target;
  }
  /**
   * Change month by yam panel
   */


  toMonth(panelType, target) {
    const {
      type
    } = this._adapter.getProps();

    const diff = this._getDiff('month', target, panelType);

    this.handleYearOrMonthChange(diff < 0 ? 'prevMonth' : 'nextMonth', panelType, Math.abs(diff), false);

    if (this.isRangeType(type)) {
      this.handleSyncChangeMonths({
        panelType,
        target
      });
    }
  }

  toYear(panelType, target) {
    const diff = this._getDiff('year', target, panelType);

    this.handleYearOrMonthChange(diff < 0 ? 'prevYear' : 'nextYear', panelType, Math.abs(diff), false);
  }

  toYearMonth(panelType, target) {
    this.toYear(panelType, target);
    this.toMonth(panelType, target);
  }

  isRangeType(type) {
    const {
      type: typeFromProp
    } = this.getProps();
    const realType = type ? type : typeFromProp;
    return typeof realType === 'string' && /range/i.test(realType);
  }

  handleSwitchMonthOrYear(switchType, panelType) {
    const {
      type,
      syncSwitchMonth
    } = this.getProps();
    const rangeType = this.isRangeType(type); // range type and syncSwitchMonth, we should change panels at same time

    if (rangeType && syncSwitchMonth) {
      this.handleYearOrMonthChange(switchType, 'left', 1, true);
      this.handleYearOrMonthChange(switchType, 'right', 1, true);
    } else {
      this.handleYearOrMonthChange(switchType, panelType);
      /**
       * default behavior (v2.2.0)
       * In order to prevent the two panels from being the same month, this will confuse the user when selecting the range
       * https://github.com/DouyinFE/semi-design/issues/260
       */

      if (rangeType) {
        const target = this.getTargetChangeDate({
          panelType,
          switchType
        });
        this.handleSyncChangeMonths({
          panelType,
          target
        });
      }
    }
  }

  prevMonth(panelType) {
    this.handleSwitchMonthOrYear('prevMonth', panelType);
  }

  nextMonth(panelType) {
    this.handleSwitchMonthOrYear('nextMonth', panelType);
  }

  prevYear(panelType) {
    this.handleSwitchMonthOrYear('prevYear', panelType);
  }

  nextYear(panelType) {
    this.handleSwitchMonthOrYear('nextYear', panelType);
  }
  /**
   * Calculate the year and month difference
   */


  _getDiff(type, target, panelType) {
    const panelDetail = this._getPanelDetail(panelType);

    const diff = dateDiffFns[type] && dateDiffFns[type](target, panelDetail.pickerDate);
    return diff;
  }

  _getPanelDetail(panelType) {
    return panelType === datePicker_constants_strings.PANEL_TYPE_RIGHT ? this.getState('monthRight') : this.getState('monthLeft');
  }
  /**
   * Format locale date
   * locale get from LocaleProvider
   * @param {Date} date
   * @param {String} token
   * @returns
   */


  localeFormat(date, token) {
    const dateFnsLocale = this._adapter.getProp('dateFnsLocale');

    return format_format(date, token, {
      locale: dateFnsLocale
    });
  }

  isValidTimeZone(timeZone) {
    var _context2;

    const propTimeZone = this.getProp('timeZone');

    const _timeZone = isNullOrUndefined(timeZone) ? propTimeZone : timeZone;

    return includes_default()(_context2 = ['string', 'number']).call(_context2, typeof _timeZone) && _timeZone !== '';
  }
  /**
   * 根据 type 处理 onChange 返回的参数
   *
   *  - 返回的日期需要把用户时间转换为设置的时区时间
   *      - 用户时间：用户计算机系统时间
   *      - 时区时间：通过 ConfigProvider 设置的 timeZone
   *  - 例子：用户设置时区为+9，计算机所在时区为+8区，然后用户选择了22:00
   *      - DatePicker 内部保存日期 state 为 +8 的 22:00 => a = new Date("2021-05-25 22:00:00")
   *      - 传出去时，需要把 +8 的 22:00 => +9 的 22:00 => b = zonedTimeToUtc(a, "+09:00");
   *
   * The parameters returned by onChange are processed according to type
   *
   *  -The returned date needs to convert the user time to the set time zone time
   *      -User time: user computer system time
   *      -Time zone: timeZone set by ConfigProvider
   *  -Example: The user sets the time zone to + 9, and the time zone where the computer is located is + 8, and then the user selects 22:00
   *      -DatePicker internal save date state is + 8 22:00 = > a = new Date ("2021-05-25 22:00:00")
   *      -When passing out, you need to put + 8's 22:00 = > + 9's 22:00 = > b = zonedTimeToUtc (a, "+ 09:00");
   *
   *  e.g.
   *  let a = new Date ("2021-05-25 22:00:00");
   *       = > Tue May 25 2021 22:00:00 GMT + 0800 (China Standard Time)
   *  let b = zonedTimeToUtc (a, "+ 09:00");
   *       = > Tue May 25 2021 21:00:00 GMT + 0800 (China Standard Time)
   *
   * @param {Date|Date[]} value
   */


  disposeCallbackArgs(value) {
    let _value = is_array_default()(value) ? value : value && [value] || [];

    if (this.isValidTimeZone()) {
      const timeZone = this.getProp('timeZone');
      _value = map_default()(_value).call(_value, date => date_fns_extra_zonedTimeToUtc(date, timeZone));
    }

    const type = this.getProp('type');
    const formatToken = this.getProp('format') || getDefaultFormatTokenByType(type);
    let notifyValue, notifyDate;

    switch (type) {
      case 'date':
      case 'dateTime':
      case 'month':
        if (!this._isMultiple()) {
          notifyValue = _value[0] && this.localeFormat(_value[0], formatToken);
          [notifyDate] = _value;
        } else {
          notifyValue = map_default()(_value).call(_value, v => v && this.localeFormat(v, formatToken));
          notifyDate = [..._value];
        }

        break;

      case 'dateRange':
      case 'dateTimeRange':
        notifyValue = map_default()(_value).call(_value, v => v && this.localeFormat(v, formatToken));
        notifyDate = [..._value];
        break;

      default:
        break;
    }

    return {
      notifyValue,
      notifyDate
    };
  }

  handleYearOrMonthChange(type) {
    let panelType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : datePicker_constants_strings.PANEL_TYPE_LEFT;
    let step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let notSeparateInRange = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    const {
      autoSwitchDate,
      type: datePanelType
    } = this.getProps();
    const {
      monthLeft,
      monthRight
    } = this.getStates();
    const isRangeType = this.isRangeType(datePanelType);
    const isLeftPanelInRange = isRangeType && panelType === datePicker_constants_strings.PANEL_TYPE_LEFT;

    const panelDetail = this._getPanelDetail(panelType);

    const {
      pickerDate
    } = panelDetail;
    const fn = dateCalcFns[type];
    const targetMonth = fn(pickerDate, step); // Determine if the date has changed

    const panelDateHasUpdate = panelType === datePicker_constants_strings.PANEL_TYPE_LEFT && !isEqual_default()(targetMonth, monthLeft.pickerDate) || panelType === datePicker_constants_strings.PANEL_TYPE_RIGHT && !isEqual_default()(targetMonth, monthRight.pickerDate);

    this._updatePanelDetail(panelType, {
      pickerDate: targetMonth
    });

    if (panelDateHasUpdate) {
      // When the date changes
      if (!isRangeType) {
        // Single Panel Type
        const {
          notifyValue,
          notifyDate
        } = this.disposeCallbackArgs(targetMonth);

        this._adapter.notifyPanelChange(notifyDate, notifyValue);
      } else {
        // Double Panel Type
        if (isLeftPanelInRange) {
          // Left panel
          this.newBiMonthPanelDate[0] = targetMonth;
        } else {
          // Right panel
          this.newBiMonthPanelDate[1] = targetMonth;
        }

        if (!(isLeftPanelInRange && notSeparateInRange)) {
          // Not synchronously switching the left panel in the scene
          const {
            notifyValue,
            notifyDate
          } = this.disposeCallbackArgs(this.newBiMonthPanelDate);

          this._adapter.notifyPanelChange(notifyDate, notifyValue);
        }
      }
    }

    if (autoSwitchDate) {
      this.updateDateAfterChangeYM(type, targetMonth);
    }
  }
  /**
   * You have chosen to switch the year and month in the future to directly update the Date without closing the date panel
   * @param {*} type
   * @param {*} targetDate
   */


  updateDateAfterChangeYM(type, targetDate) {
    var _context3;

    const {
      multiple,
      disabledDate
    } = this.getProps();
    const {
      selected: selectedSet,
      rangeStart,
      rangeEnd
    } = this.getStates(); // FIXME:

    const includeRange = includes_default()(_context3 = ['dateRange', 'dateTimeRange']).call(_context3, type);

    const options = {
      closePanel: false
    };

    if (!multiple && !includeRange && selectedSet.size) {
      const selectedStr = from_default()(selectedSet)[0];

      const selectedDate = new Date(selectedStr);
      const year = targetDate.getFullYear();
      const month = targetDate.getMonth();
      const fullDate = set_set(selectedDate, {
        year,
        month
      });

      if (disabledDate(fullDate, {
        rangeStart,
        rangeEnd
      })) {
        return;
      }

      this._adapter.notifySelectedChange([fullDate], options);
    }
  }

  _isMultiple() {
    return Boolean(this.getProp('multiple')) && this.getProp('type') === 'date';
  }

  _isRange() {// return this._adapter.getProp('type') === dateRangeTypeKey;
  }

  handleDayClick(day, panelType) {
    const type = this.getProp('type');

    switch (true) {
      case type === 'date' || type === 'dateTime':
        this.handleDateSelected(day, panelType);
        break;

      case type === 'dateRange' || type === 'dateTimeRange':
        this.handleRangeSelected(day);
        break;

      default:
        break;
    }
  }

  handleDateSelected(day, panelType) {
    var _context4;

    const {
      max,
      type,
      isControlledComponent,
      dateFnsLocale
    } = this.getProps();

    const multiple = this._isMultiple();

    const {
      selected
    } = this.getStates();

    const monthDetail = this._getPanelDetail(panelType);

    const newSelected = new set_default.a(multiple ? [...selected] : []);
    const {
      fullDate
    } = day;
    const time = monthDetail.pickerDate;
    const dateStr = type === 'dateTime' ? this._mergeDateAndTime(fullDate, time) : fullDate;

    if (!multiple) {
      newSelected.add(dateStr);
    } else {
      if (newSelected.has(dateStr)) {
        newSelected.delete(dateStr);
      } else if (max && newSelected.size === max) {
        this._adapter.notifyMaxLimit();
      } else {
        newSelected.add(dateStr);
      }
    }

    const dateFormat = this.getValidDateFormat(); // When passed to the upper layer, it is converted into a Date object to ensure that the input parameter format of initFormDefaultValue is consistent

    const newSelectedDates = map_default()(_context4 = [...newSelected]).call(_context4, _dateStr => compatibleParse(_dateStr, dateFormat, undefined, dateFnsLocale));

    this.handleShowDateAndTime(panelType, time);

    if (!isControlledComponent) {
      // Uncontrolled components, update internal values when operating, and notify external
      // MonthGrid internally uses string to represent fullDate for easy rendering
      this._adapter.updateDaySelected(newSelected);
    }

    this._adapter.notifySelectedChange(newSelectedDates);
  }

  handleShowDateAndTime(panelType, pickerDate, showDate) {
    const _showDate = showDate || pickerDate;

    this._updatePanelDetail(panelType, {
      showDate: _showDate,
      pickerDate
    });
  }
  /**
   * link date and time
   *
   * @param {Date|string} date
   * @param {Date|string} time
   * @returns {Date}
   */


  _mergeDateAndTime(date, time) {
    var _context5;

    const dateFnsLocale = this._adapter.getProp('dateFnsLocale');

    const dateStr = format_format(isValidDate(date) ? date : compatibleParse(date, datePicker_constants_strings.FORMAT_FULL_DATE, undefined, dateFnsLocale), datePicker_constants_strings.FORMAT_FULL_DATE);
    const timeStr = format_format(isValidDate(time) ? time : compatibleParse(time, datePicker_constants_strings.FORMAT_TIME_PICKER, undefined, dateFnsLocale), datePicker_constants_strings.FORMAT_TIME_PICKER);
    const timeFormat = this.getValidTimeFormat();
    return compatibleParse(concat_default()(_context5 = "".concat(dateStr, " ")).call(_context5, timeStr), timeFormat, undefined, dateFnsLocale);
  }

  handleRangeSelected(day) {
    let {
      rangeStart,
      rangeEnd
    } = this.getStates();

    const {
      startDateOffset,
      endDateOffset,
      type,
      dateFnsLocale,
      rangeInputFocus,
      triggerRender
    } = this._adapter.getProps();

    const {
      fullDate
    } = day;
    let rangeStartReset = false;
    let rangeEndReset = false;
    const isDateRangeAndHasOffset = (startDateOffset || endDateOffset) && type === 'dateRange';

    if (isDateRangeAndHasOffset) {
      rangeStart = _utils_getFullDateOffset(startDateOffset, fullDate);
      rangeEnd = _utils_getFullDateOffset(endDateOffset, fullDate);
    } else {
      if (rangeInputFocus === 'rangeEnd') {
        rangeEnd = fullDate; // rangStart Parten in dateTime: 'yyyy-MM-dd HH:MM:SS', rangeEnd parten: 'yyyy-MM-dd'

        if (rangeStart && rangeEnd && isBefore_isBefore(rangeEnd, trim_default()(rangeStart).call(rangeStart).split(/\s+/)[0])) {
          rangeStart = null;
          rangeStartReset = true;
        } // Compatible to select date after opening the panel without click input

      } else if (rangeInputFocus === 'rangeStart' || !rangeInputFocus) {
        rangeStart = fullDate; // rangEnd Parten in dateTime: 'yyyy-MM-dd HH:MM:SS', rangeStart parten: 'yyyy-MM-dd'

        if (rangeStart && rangeEnd && isBefore_isBefore(trim_default()(rangeEnd).call(rangeEnd).split(/\s+/)[0], rangeStart)) {
          rangeEnd = null;
          rangeEndReset = true;
        }
      }
    } // next focus logic


    const isRangeType = /range/i.test(type);

    if (isRangeType) {
      if (isDateRangeAndHasOffset) {
        this._adapter.setRangeStart(rangeStart);

        this._adapter.setRangeEnd(rangeEnd);
      } else {
        if (rangeInputFocus === 'rangeEnd') {
          this._adapter.setRangeEnd(rangeEnd);

          if (rangeStartReset) {
            this._adapter.setRangeStart(rangeStart);
          }

          if (!this._adapter.isAnotherPanelHasOpened('rangeEnd') || !rangeStart) {
            this._adapter.setRangeInputFocus('rangeStart');
          }
        } else if (rangeInputFocus === 'rangeStart' || !rangeInputFocus) {
          this._adapter.setRangeStart(rangeStart);

          if (rangeEndReset) {
            this._adapter.setRangeEnd(rangeEnd);
          }

          if (!this._adapter.isAnotherPanelHasOpened('rangeStart') || !rangeEnd) {
            this._adapter.setRangeInputFocus('rangeEnd');
          }
        }
      }
    }

    const dateFormat = this.getValidDateFormat(); // only notify when choose completed

    if (rangeStart || rangeEnd) {
      const [startDate, endDate] = [compatibleParse(rangeStart, dateFormat, undefined, dateFnsLocale), compatibleParse(rangeEnd, dateFormat, undefined, dateFnsLocale)];
      let date = [startDate, endDate]; // If the type is dateRangeTime, add the value of time

      if (type === 'dateTimeRange') {
        const startTime = this.getState('monthLeft').pickerDate;
        const endTime = this.getState('monthRight').pickerDate;
        const start = rangeStart ? this._mergeDateAndTime(rangeStart, startTime) : null;
        const end = rangeEnd ? this._mergeDateAndTime(rangeEnd, endTime) : null;

        if (isSameDay(startDate, endDate) && isBefore_isBefore(end, start)) {
          date = [start, start];
        } else {
          date = [start, end];
        }
      }
      /**
       * no need to check focus then
       *  - dateRange and isDateRangeAndHasOffset
       */


      const needCheckFocusRecord = !(type === 'dateRange' && isDateRangeAndHasOffset);

      this._adapter.notifySelectedChange(date, {
        needCheckFocusRecord
      });
    }
  }

  _isNeedSwap(rangeStart, rangeEnd) {
    // Check whether the start and end are reasonable and whether they need to be reversed
    return rangeStart && rangeEnd && isBefore_isBefore(rangeEnd, rangeStart);
  }
  /**
   * Day may be empty, this is unhover state
   * @param {*} day
   */


  handleDayHover() {
    let day = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      fullDate: ''
    };
    let panelType = arguments.length > 1 ? arguments[1] : undefined;
    const {
      fullDate
    } = day;
    const {
      startDateOffset,
      endDateOffset,
      type
    } = this.getProps();

    this._adapter.setHoverDay(fullDate);

    if ((startDateOffset || endDateOffset) && type === 'dateRange') {
      const offsetRangeStart = _utils_getFullDateOffset(startDateOffset, fullDate);
      const offsetRangeEnd = _utils_getFullDateOffset(endDateOffset, fullDate);

      this._adapter.setOffsetRangeStart(offsetRangeStart);

      this._adapter.setOffsetRangeEnd(offsetRangeEnd);
    }
  } // Guarantee that monthLeft, monthRight will not appear in the same month or monthLeft is greater than MonthRight


  _autoAdjustMonth(monthLeft, monthRight) {
    let newMonthLeft = monthLeft;
    let newMonthRight = monthRight;
    const difference = differenceInCalendarMonths(monthLeft.pickerDate, monthRight.pickerDate);

    if (difference > 0) {
      // The month on the left is larger than the month on the right, swap
      newMonthLeft = assign_default()({}, monthRight);
      newMonthRight = assign_default()({}, monthLeft);
    } else if (difference === 0) {
      // Around the same month, the number of months on the right + 1
      newMonthLeft = monthLeft;
      newMonthRight = assign_default()(assign_default()({}, monthRight), {
        pickerDate: addMonths(monthRight.pickerDate, 1)
      });
    }

    return {
      monthLeft: newMonthLeft,
      monthRight: newMonthRight
    };
  }

  getValidTimeFormat() {
    const formatProp = this.getProp('format') || datePicker_constants_strings.FORMAT_TIME_PICKER;
    const timeFormatTokens = [];

    if (lodash_includes_default()(formatProp, 'h') || lodash_includes_default()(formatProp, 'H')) {
      timeFormatTokens.push('HH');
    }

    if (lodash_includes_default()(formatProp, 'm')) {
      timeFormatTokens.push('mm');
    }

    if (lodash_includes_default()(formatProp, 's')) {
      timeFormatTokens.push('ss');
    }

    return timeFormatTokens.join(':');
  }

  getValidDateFormat() {
    return this.getProp('format') || _utils_getDefaultFormatToken(this.getProp('type'));
  }

  handleTimeChange(newTime, panelType) {
    const {
      rangeEnd,
      rangeStart
    } = this.getStates();
    const dateFnsLocale = this.getProp('dateFnsLocale');
    const ts = newTime.timeStampValue;
    const type = this.getProp('type');

    const panelDetail = this._getPanelDetail(panelType);

    const {
      showDate
    } = panelDetail;
    const timeDate = new Date(ts);
    const dateFormat = this.getValidDateFormat();
    const destRange = panelType === datePicker_constants_strings.PANEL_TYPE_RIGHT ? rangeEnd : rangeStart;
    let year, monthNo, date; // if (pickerDate && isValidDate(pickerDate)) {
    //     year = pickerDate.getFullYear();
    //     monthNo = pickerDate.getMonth();
    //     date = pickerDate.getDate();
    // } else

    if (type === 'dateTimeRange' && destRange) {
      const rangeDate = compatibleParse(destRange, dateFormat, undefined, dateFnsLocale);
      year = rangeDate.getFullYear();
      monthNo = rangeDate.getMonth();
      date = rangeDate.getDate();
    } else {
      year = showDate.getFullYear();
      monthNo = showDate.getMonth();
      date = showDate.getDate();
    }

    const hours = timeDate.getHours();
    const minutes = timeDate.getMinutes();
    const seconds = timeDate.getSeconds();
    const milSeconds = timeDate.getMilliseconds();
    const dateArgs = [year, monthNo, date, hours, minutes, seconds, milSeconds];
    const fullValidDate = new Date(...dateArgs);

    if (type === 'dateTimeRange') {
      this.handleShowDateAndTime(panelType, fullValidDate, showDate);

      this._updateTimeInDateRange(panelType, fullValidDate);
    } else {
      const fullDate = formatFullDate(year, monthNo + 1, date);
      this.handleDateSelected({
        fullDate,
        fullValidDate
      }, panelType);
      this.handleShowDateAndTime(panelType, fullValidDate);

      this._adapter.notifySelectedChange([fullValidDate]);
    }
  }
  /**
   * Update the time part in the range
   * @param {string} panelType
   * @param {Date} timeDate
   */


  _updateTimeInDateRange(panelType, timeDate) {
    const {
      isControlledComponent,
      dateFnsLocale
    } = this.getProps();
    let rangeStart = this.getState('rangeStart');
    let rangeEnd = this.getState('rangeEnd');
    const dateFormat = this.getValidDateFormat(); // TODO: Modify a time individually

    if (rangeStart && rangeEnd) {
      let startDate = compatibleParse(rangeStart, dateFormat, undefined, dateFnsLocale);
      let endDate = compatibleParse(rangeEnd, dateFormat, undefined, dateFnsLocale); // console.log('_updateTimeInDateRange()', rangeStart, rangeEnd, startDate, endDate);

      if (panelType === datePicker_constants_strings.PANEL_TYPE_RIGHT) {
        endDate = this._mergeDateAndTime(timeDate, timeDate);
        rangeEnd = format_format(endDate, datePicker_constants_strings.FORMAT_DATE_TIME);

        if (this._isNeedSwap(rangeStart, rangeEnd)) {
          [rangeStart, rangeEnd] = [rangeEnd, rangeStart];
          [startDate, endDate] = [endDate, startDate];
        }

        if (!isControlledComponent) {
          this._adapter.setRangeEnd(rangeEnd);
        }
      } else {
        startDate = this._mergeDateAndTime(timeDate, timeDate);
        rangeStart = format_format(startDate, datePicker_constants_strings.FORMAT_DATE_TIME);

        if (this._isNeedSwap(rangeStart, rangeEnd)) {
          [rangeStart, rangeEnd] = [rangeEnd, rangeStart];
          [startDate, endDate] = [endDate, startDate];
        }

        if (!isControlledComponent) {
          this._adapter.setRangeStart(rangeStart);
        }
      } // console.log('_updateTimeInDateRange()', rangeStart, rangeEnd, startDate, endDate);


      this._adapter.notifySelectedChange([startDate, endDate]);
    }
  }

  _updatePanelDetail(panelType, kvs) {
    const {
      monthLeft,
      monthRight
    } = this.getStates();

    if (panelType === datePicker_constants_strings.PANEL_TYPE_RIGHT) {
      this._adapter.updateMonthOnRight(assign_default()(assign_default()({}, monthRight), kvs));
    } else {
      this._adapter.updateMonthOnLeft(assign_default()(assign_default()({}, monthLeft), kvs));
    }
  }

  showYearPicker(panelType) {
    this._updatePanelDetail(panelType, {
      isTimePickerOpen: false,
      isYearPickerOpen: true
    });
  }

  showTimePicker(panelType, opt) {
    if (this.getProp('disabledTimePicker')) {
      return;
    }

    this._updatePanelDetail(panelType, {
      isTimePickerOpen: true,
      isYearPickerOpen: false
    });
  }

  showDatePanel(panelType) {
    this._updatePanelDetail(panelType, {
      isTimePickerOpen: false,
      isYearPickerOpen: false
    });
  }
  /**
   * Get year and month panel open type
   *
   * It is useful info to set minHeight of weeks.
   *  - When yam open type is 'left' or 'right', weeks minHeight should be set
   *    If the minHeight is not set, the change of the number of weeks will cause the scrollList to be unstable
   */


  getYAMOpenType() {
    const {
      monthLeft,
      monthRight
    } = this._adapter.getStates();

    const leftYearPickerOpen = monthLeft.isYearPickerOpen;
    const rightYearPickerOpen = monthRight.isYearPickerOpen;

    if (leftYearPickerOpen && rightYearPickerOpen) {
      return 'both';
    } else if (leftYearPickerOpen) {
      return 'left';
    } else if (rightYearPickerOpen) {
      return 'right';
    } else {
      return 'none';
    }
  }

}
// CONCATENATED MODULE: ./datePicker/navigation.tsx

 // import cls from 'classnames';






const navigation_prefixCls = datePicker_constants_cssClasses.NAVIGATION;
class navigation_Navigation extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  constructor(props) {
    super(props);
    this.navRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
  }

  render() {
    const {
      forwardRef,
      monthText,
      onMonthClick,
      onNextMonth,
      onPrevMonth,
      onPrevYear,
      onNextYear,
      density,
      shouldBimonthSwitch,
      panelType
    } = this.props;
    const btnTheme = 'borderless';
    const iconBtnSize = density === 'compact' ? 'default' : 'large';
    const btnNoHorizontalPadding = true;
    const buttonSize = density === 'compact' ? 'small' : 'default';
    const isLeftPanel = panelType === datePicker_constants_strings.PANEL_TYPE_LEFT;
    const isRightPanel = panelType === datePicker_constants_strings.PANEL_TYPE_RIGHT; // syncSwitchMonth and the current panel is the left

    const hiddenLeftPanelRightButtons = shouldBimonthSwitch && isLeftPanel; // syncSwitchMonth and the current panel is the right

    const hiddenRightPanelLeftButtons = shouldBimonthSwitch && isRightPanel; // `visibility: hidden` will keep the icon in position

    const leftButtonStyle = {};
    const rightButtonStyle = {};

    if (hiddenRightPanelLeftButtons) {
      leftButtonStyle.visibility = 'hidden';
    }

    if (hiddenLeftPanelRightButtons) {
      rightButtonStyle.visibility = 'hidden';
    }

    const ref = forwardRef || this.navRef;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: navigation_prefixCls,
      ref: ref
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(iconButton_0, {
      key: "double-chevron-left",
      "aria-label": "Previous year",
      icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconDoubleChevronLeft, {
        "aria-hidden": true,
        size: iconBtnSize
      }),
      size: buttonSize,
      theme: btnTheme,
      noHorizontalPadding: btnNoHorizontalPadding,
      onClick: onPrevYear,
      style: leftButtonStyle
    }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(iconButton_0, {
      key: "chevron-left",
      "aria-label": "Previous month",
      icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronLeft, {
        "aria-hidden": true,
        size: iconBtnSize
      }),
      size: buttonSize,
      onClick: onPrevMonth,
      theme: btnTheme,
      noHorizontalPadding: btnNoHorizontalPadding,
      style: leftButtonStyle
    }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(navigation_prefixCls, "-month")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(button_0, {
      onClick: onMonthClick,
      theme: btnTheme,
      size: buttonSize
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, monthText))), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(iconButton_0, {
      key: "chevron-right",
      "aria-label": "Next month",
      icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronRight, {
        "aria-hidden": true,
        size: iconBtnSize
      }),
      size: buttonSize,
      onClick: onNextMonth,
      theme: btnTheme,
      noHorizontalPadding: btnNoHorizontalPadding,
      style: rightButtonStyle
    }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(iconButton_0, {
      key: "double-chevron-right",
      "aria-label": "Next year",
      icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconDoubleChevronRight, {
        "aria-hidden": true,
        size: iconBtnSize
      }),
      size: buttonSize,
      theme: btnTheme,
      noHorizontalPadding: btnNoHorizontalPadding,
      onClick: onNextYear,
      style: rightButtonStyle
    }));
  }

}
navigation_Navigation.propTypes = {
  monthText: prop_types_default.a.string,
  density: prop_types_default.a.string,
  onMonthClick: prop_types_default.a.func,
  onNextMonth: prop_types_default.a.func,
  onPrevMonth: prop_types_default.a.func,
  onNextYear: prop_types_default.a.func,
  onPrevYear: prop_types_default.a.func,
  navPrev: prop_types_default.a.node,
  navNext: prop_types_default.a.node,
  // Whether to switch synchronously for two panels
  shouldBimonthSwitch: prop_types_default.a.bool,
  // Panel type, divided into left panel and right panel
  panelType: prop_types_default.a.oneOf([datePicker_constants_strings.PANEL_TYPE_LEFT, datePicker_constants_strings.PANEL_TYPE_RIGHT])
};
navigation_Navigation.defaultProps = {
  monthText: '',
  onMonthClick: noop_default.a,
  onNextMonth: noop_default.a,
  onPrevMonth: noop_default.a,
  onNextYear: noop_default.a,
  onPrevYear: noop_default.a
};
// CONCATENATED MODULE: ../semi-foundation/datePicker/_utils/getDayOfWeek.ts
/**
 *
 * @param {number} weekStartsOn
 * the index of the first day of the week （0-Sunday，1-Monday, etc）
 *
 */
const getDayofWeek = _ref => {
  let {
    weekStartsOn = 0
  } = _ref;
  const weekDay = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  for (let index = 0; index < weekStartsOn; index++) {
    weekDay.push(weekDay.shift());
  }

  return weekDay;
};

/* harmony default export */ var getDayOfWeek = (getDayofWeek);
// CONCATENATED MODULE: ../semi-foundation/datePicker/monthFoundation.ts


 // import { cssClasses, strings } from './constants';





class monthFoundation_CalendarMonthFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  }

  init() {
    this._getToday();

    this.getMonthTable();
  }

  _getToday() {
    const today = new Date();
    const todayText = format_format(today, 'yyyy-MM-dd');

    this._adapter.updateToday(todayText);
  }

  getMonthTable() {
    const month = this._adapter.getProp('month');

    const weeksRowNum = this.getState('weeksRowNum');

    if (month) {
      this.updateWeekDays();

      const weekStartsOn = this._adapter.getProp('weekStartsOn');

      const monthTable = _utils_getMonthTable(month, weekStartsOn);
      const {
        weeks
      } = monthTable;

      this._adapter.updateMonthTable(monthTable);

      if (isNullOrUndefined(weeksRowNum)) {
        this._adapter.setWeeksRowNum(weeks.length);
      } else if (is_array_default()(weeks) && weeks.length !== weeksRowNum) {
        this._adapter.setWeeksRowNum(weeks.length, () => {
          this._adapter.notifyWeeksRowNumChange(weeks.length);
        });
      }
    }
  }

  updateWeekDays() {
    const weekStartsOn = this._adapter.getProp('weekStartsOn');

    const weekdays = getDayOfWeek({
      weekStartsOn
    });

    this._adapter.setWeekDays(weekdays);
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  destroy() {}

  handleClick(day) {
    this._adapter.notifyDayClick(day);
  }

  handleHover(day) {
    this._adapter.notifyDayHover(day);
  }

}
// CONCATENATED MODULE: ../semi-foundation/datePicker/_utils/isAfter.ts


function isAfter_isAfter(date, dateToCompare) {
  const dayOne = utils_isString(date) ? parseISO(date) : date;
  const dayTwo = utils_isString(dateToCompare) ? parseISO(dateToCompare) : dateToCompare;
  return isAfter(dayOne, dayTwo);
}
// CONCATENATED MODULE: ../semi-foundation/datePicker/_utils/isSameDay.ts


function isSameDay_isSameDay(date, dateToCompare) {
  const dayOne = utils_isString(date) ? parseISO(date) : date;
  const dayTwo = utils_isString(dateToCompare) ? parseISO(dateToCompare) : dateToCompare;
  return isSameDay(dayOne, dayTwo);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/isWithinInterval/index.js



/**
 * @name isWithinInterval
 * @category Interval Helpers
 * @summary Is the given date within the interval?
 *
 * @description
 * Is the given date within the interval? (Including start and end.)
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - The function was renamed from `isWithinRange` to `isWithinInterval`.
 *   This change was made to mirror the use of the word "interval" in standard ISO 8601:2004 terminology:
 *
 *   ```
 *   2.1.3
 *   time interval
 *   part of the time axis limited by two instants
 *   ```
 *
 *   Also, this function now accepts an object with `start` and `end` properties
 *   instead of two arguments as an interval.
 *   This function now throws `RangeError` if the start of the interval is after its end
 *   or if any date in the interval is `Invalid Date`.
 *
 *   ```javascript
 *   // Before v2.0.0
 *
 *   isWithinRange(
 *     new Date(2014, 0, 3),
 *     new Date(2014, 0, 1), new Date(2014, 0, 7)
 *   )
 *
 *   // v2.0.0 onward
 *
 *   isWithinInterval(
 *     new Date(2014, 0, 3),
 *     { start: new Date(2014, 0, 1), end: new Date(2014, 0, 7) }
 *   )
 *   ```
 *
 * @param {Date|Number} date - the date to check
 * @param {Interval} interval - the interval to check
 * @returns {Boolean} the date is within the interval
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} The start of an interval cannot be after its end
 * @throws {RangeError} Date in interval cannot be `Invalid Date`
 *
 * @example
 * // For the date within the interval:
 * isWithinInterval(new Date(2014, 0, 3), {
 *   start: new Date(2014, 0, 1),
 *   end: new Date(2014, 0, 7)
 * })
 * //=> true
 *
 * @example
 * // For the date outside of the interval:
 * isWithinInterval(new Date(2014, 0, 10), {
 *   start: new Date(2014, 0, 1),
 *   end: new Date(2014, 0, 7)
 * })
 * //=> false
 *
 * @example
 * // For date equal to interval start:
 * isWithinInterval(date, { start, end: date }) // => true
 *
 * @example
 * // For date equal to interval end:
 * isWithinInterval(date, { start: date, end }) // => true
 */
function isWithinInterval(dirtyDate, interval) {
  requiredArgs(2, arguments);
  var time = toDate(dirtyDate).getTime();
  var startTime = toDate(interval.start).getTime();
  var endTime = toDate(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`

  if (!(startTime <= endTime)) {
    throw new RangeError('Invalid interval');
  }

  return time >= startTime && time <= endTime;
}
// CONCATENATED MODULE: ../semi-foundation/datePicker/_utils/isBetween.ts


/**
 * is the date between start and end?(not including start and end)
 *   - if start > end, return false
 * @param {String|Date} day
 * @param {Object} { start: string|Date, end: string|Date}
 * @returns {Boolean}
 */

function isBetween(day, _ref) {
  let {
    start,
    end
  } = _ref;
  const d = utils_isString(day) ? parseISO(day) : day;
  const s = utils_isString(start) ? parseISO(start) : start;
  const e = utils_isString(end) ? parseISO(end) : end;
  return isBefore(s, e) && isWithinInterval(d, {
    start: s,
    end: e
  }) && !isEqual_isEqual(d, s) && !isEqual_isEqual(d, e);
}
// CONCATENATED MODULE: ./datePicker/month.tsx








/* eslint-disable jsx-a11y/click-events-have-key-events,jsx-a11y/no-noninteractive-element-interactions */

/* eslint-disable max-len */








const month_prefixCls = datePicker_constants_cssClasses.PREFIX;
class month_Month extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);
    this.state = {
      weekdays: [],
      month: {
        weeks: [],
        monthText: ''
      },
      todayText: '',
      weeksRowNum: props.weeksRowNum
    };
    this.monthRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      updateToday: todayText => this.setState({
        todayText
      }),
      setWeekDays: weekdays => this.setState({
        weekdays
      }),
      setWeeksRowNum: (weeksRowNum, callback) => this.setState({
        weeksRowNum
      }, callback),
      updateMonthTable: month => this.setState({
        month
      }),
      notifyDayClick: day => this.props.onDayClick(day),
      notifyDayHover: day => this.props.onDayHover(day),
      notifyWeeksRowNumChange: weeksRowNum => this.props.onWeeksRowNumChange(weeksRowNum)
    });
  }

  componentDidMount() {
    this.foundation = new monthFoundation_CalendarMonthFoundation(this.adapter);
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevProps.month !== this.props.month) {
      this.foundation.getMonthTable();
    }
  }

  getSingleDayStatus(options) {
    const {
      fullDate,
      todayText,
      selected,
      disabledDate,
      rangeStart,
      rangeEnd
    } = options;
    const disabledOptions = {
      rangeStart,
      rangeEnd
    };
    const isToday = fullDate === todayText;
    const isSelected = selected.has(fullDate);
    let isDisabled = disabledDate && disabledDate(parseISO(fullDate), disabledOptions);

    if (!isDisabled && this.props.rangeInputFocus === 'rangeStart' && rangeEnd && this.props.focusRecordsRef && this.props.focusRecordsRef.current.rangeEnd) {
      // The reason for splitting is that the dateRangeTime format: 'yyyy-MM-dd HH:MM:SS'
      isDisabled = isAfter_isAfter(fullDate, trim_default()(rangeEnd).call(rangeEnd).split(/\s+/)[0]);
    }

    if (!isDisabled && this.props.rangeInputFocus === 'rangeEnd' && rangeStart && this.props.focusRecordsRef && this.props.focusRecordsRef.current.rangeStart) {
      // The reason for splitting is that the dateRangeTime format: 'yyyy-MM-dd HH:MM:SS'
      isDisabled = isBefore_isBefore(fullDate, trim_default()(rangeStart).call(rangeStart).split(/\s+/)[0]);
    }

    return {
      isToday,
      isSelected,
      isDisabled // Disabled

    };
  }

  getDateRangeStatus(options) {
    const {
      rangeStart,
      rangeEnd,
      fullDate,
      hoverDay,
      offsetRangeStart,
      offsetRangeEnd,
      rangeInputFocus
    } = options; // If no item is selected, return the empty object directly

    const _isDateRangeAnySelected = Boolean(rangeStart || rangeEnd);

    const _isDateRangeSelected = Boolean(rangeStart && rangeEnd);

    const _isOffsetDateRangeAnyExist = offsetRangeStart || offsetRangeEnd;

    if (!_isDateRangeAnySelected) {
      return {};
    } // The range selects the hover date, and the normal hover is .semi-datepicker-main: hover


    const _isHoverDay = isSameDay_isSameDay(hoverDay, fullDate); // When one is selected
    // eslint-disable-next-line one-var


    let _isHoverAfterStart, _isHoverBeforeEnd, isSelectedStart, isSelectedEnd, isHoverDayAroundOneSelected;

    if (rangeStart) {
      isSelectedStart = isSameDay_isSameDay(fullDate, rangeStart);

      if (rangeInputFocus === 'rangeEnd') {
        _isHoverAfterStart = isBetween(fullDate, {
          start: rangeStart,
          end: hoverDay
        });
      }
    }

    if (rangeEnd) {
      isSelectedEnd = isSameDay_isSameDay(fullDate, rangeEnd);

      if (rangeInputFocus === 'rangeStart') {
        _isHoverBeforeEnd = isBetween(fullDate, {
          start: hoverDay,
          end: rangeEnd
        });
      }
    }

    if (!_isDateRangeSelected && _isDateRangeAnySelected) {
      isHoverDayAroundOneSelected = _isHoverDay;
    } // eslint-disable-next-line one-var


    let isHover;

    if (!_isOffsetDateRangeAnyExist) {
      isHover = _isHoverAfterStart || _isHoverBeforeEnd || _isHoverDay;
    } // Select all
    // eslint-disable-next-line one-var


    let isInRange, isSelectedStartAfterHover, isSelectedEndBeforeHover, isHoverDayInStartSelection, isHoverDayInEndSelection, isHoverDayInRange;

    if (_isDateRangeSelected) {
      isInRange = isBetween(fullDate, {
        start: rangeStart,
        end: rangeEnd
      });

      if (!_isOffsetDateRangeAnyExist) {
        isSelectedStartAfterHover = isSelectedStart && isAfter_isAfter(rangeStart, hoverDay);
        isSelectedEndBeforeHover = isSelectedEnd && isBefore_isBefore(rangeEnd, hoverDay);
        isHoverDayInStartSelection = _isHoverDay && rangeInputFocus === 'rangeStart';
        isHoverDayInEndSelection = _isHoverDay && rangeInputFocus === 'rangeEnd';
        isHoverDayInRange = _isHoverDay && isBetween(hoverDay, {
          start: rangeStart,
          end: rangeEnd
        });
      }
    }

    return {
      isHoverDay: _isHoverDay,
      isSelectedStart,
      isSelectedEnd,
      isInRange,
      isHover,
      isSelectedStartAfterHover,
      isSelectedEndBeforeHover,
      isHoverDayInRange,
      isHoverDayInStartSelection,
      isHoverDayInEndSelection,
      isHoverDayAroundOneSelected // Hover date and select a date

    };
  }

  getOffsetDateStatus(options) {
    const {
      offsetRangeStart,
      offsetRangeEnd,
      rangeStart,
      rangeEnd,
      fullDate,
      hoverDay
    } = options; // When there is no offset, return the empty object directly

    const _isOffsetDateRangeNull = !(offsetRangeStart || offsetRangeEnd);

    if (_isOffsetDateRangeNull) {
      return {};
    } // Range Select base date


    const _isInRange = isBetween(fullDate, {
      start: rangeStart,
      end: rangeEnd
    });

    const _isHoverDay = isSameDay_isSameDay(hoverDay, fullDate);

    const _isSelectedStart = rangeStart && isSameDay_isSameDay(fullDate, rangeStart);

    const _isSelectedEnd = rangeEnd && isSameDay_isSameDay(fullDate, rangeEnd);

    const _isDateRangeSelected = Boolean(rangeStart && rangeEnd); // Determine whether it is offsetStart or offsetRangeEnd


    const isOffsetRangeStart = isSameDay_isSameDay(fullDate, offsetRangeStart);
    const isOffsetRangeEnd = isSameDay_isSameDay(fullDate, offsetRangeEnd);
    const isHoverDayOffset = _isHoverDay; // When selected

    let isHoverInOffsetRange, isInOffsetRange;

    if (_isDateRangeSelected) {
      isHoverInOffsetRange = _isInRange && _isHoverDay;
    } // When there is an offset area


    const _isOffsetDateRangeSelected = Boolean(offsetRangeStart && offsetRangeEnd);

    if (_isOffsetDateRangeSelected) {
      isInOffsetRange = _isSelectedStart || isBetween(fullDate, {
        start: offsetRangeStart,
        end: offsetRangeEnd
      }) || _isSelectedEnd;
    }

    return {
      isOffsetRangeStart,
      isOffsetRangeEnd,
      isHoverInOffsetRange,
      isHoverDayOffset,
      isInOffsetRange // Include start and end within the week selection (start and end styles are the same as other dates, so start and end are included)

    };
  }
  /**
   * get day current status
   * @param {Object} fullDate
   * @param {Object} options
   * @returns {Object}
   */


  getDayStatus(currentDay, options) {
    const {
      fullDate
    } = currentDay;
    const {
      hoverDay,
      rangeStart,
      rangeEnd,
      todayText,
      offsetRangeStart,
      offsetRangeEnd,
      disabledDate,
      selected,
      rangeInputFocus
    } = options;
    const singleDayStatus = this.getSingleDayStatus({
      fullDate,
      todayText,
      hoverDay,
      selected,
      disabledDate,
      rangeStart,
      rangeEnd
    });
    const dateRangeStatus = this.getDateRangeStatus(assign_default()({
      fullDate,
      rangeStart,
      rangeEnd,
      hoverDay,
      offsetRangeStart,
      offsetRangeEnd,
      rangeInputFocus
    }, singleDayStatus));
    const offsetDataStatus = this.getOffsetDateStatus(assign_default()(assign_default()({
      offsetRangeStart,
      offsetRangeEnd,
      rangeStart,
      rangeEnd,
      fullDate,
      hoverDay
    }, singleDayStatus), dateRangeStatus)); // this parameter will pass to the user when given renderFullDate function, do not delete or modify its key

    const dayStatus = assign_default()(assign_default()(assign_default()({}, singleDayStatus), dateRangeStatus), offsetDataStatus);

    return dayStatus;
  }

  renderDayOfWeek() {
    const {
      locale
    } = this.props;
    const weekdayCls = classnames_default()(datePicker_constants_cssClasses.WEEKDAY);
    const weekdayItemCls = classnames_default()("".concat(month_prefixCls, "-weekday-item"));
    const {
      weekdays
    } = this.state; // i18n

    const weekdaysText = map_default()(weekdays).call(weekdays, key => locale.weeks[key]);

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "row",
      className: weekdayCls
    }, map_default()(weekdaysText).call(weekdaysText, (E, i) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "columnheader",
      key: E + i,
      className: weekdayItemCls
    }, E)));
  }

  renderWeeks() {
    const {
      month
    } = this.state;
    const {
      weeks
    } = month;
    const {
      weeksRowNum
    } = this.props;
    let style = {};

    if (weeksRowNum) {
      const height = weeksRowNum * datePicker_constants_numbers.WEEK_HEIGHT;
      style = {
        height
      };
    }

    const weeksCls = classnames_default()(datePicker_constants_cssClasses.WEEKS);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: weeksCls,
      style: style
    }, map_default()(weeks).call(weeks, (week, weekIndex) => this.renderWeek(week, weekIndex)));
  }

  renderWeek(week, weekIndex) {
    const weekCls = datePicker_constants_cssClasses.WEEK;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "row",
      className: weekCls,
      key: weekIndex
    }, map_default()(week).call(week, (day, dayIndex) => this.renderDay(day, dayIndex)));
  }

  renderDay(day, dayIndex) {
    const {
      todayText
    } = this.state;
    const {
      renderFullDate,
      renderDate
    } = this.props;
    const {
      fullDate,
      dayNumber
    } = day;

    if (!fullDate) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "gridcell",
        tabIndex: -1,
        key: dayNumber + dayIndex,
        className: datePicker_constants_cssClasses.DAY
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null));
    }

    const dayStatus = this.getDayStatus(day, assign_default()({
      todayText
    }, this.props));
    const dayCls = classnames_default()(datePicker_constants_cssClasses.DAY, {
      [datePicker_constants_cssClasses.DAY_TODAY]: dayStatus.isToday,
      [datePicker_constants_cssClasses.DAY_IN_RANGE]: dayStatus.isInRange,
      [datePicker_constants_cssClasses.DAY_HOVER]: dayStatus.isHover,
      [datePicker_constants_cssClasses.DAY_SELECTED]: dayStatus.isSelected,
      [datePicker_constants_cssClasses.DAY_SELECTED_START]: dayStatus.isSelectedStart,
      [datePicker_constants_cssClasses.DAY_SELECTED_END]: dayStatus.isSelectedEnd,
      [datePicker_constants_cssClasses.DAY_DISABLED]: dayStatus.isDisabled,
      // offsetDate class
      [datePicker_constants_cssClasses.DAY_HOVER_DAY]: dayStatus.isHoverDayOffset,
      [datePicker_constants_cssClasses.DAY_IN_OFFSET_RANGE]: dayStatus.isInOffsetRange,
      [datePicker_constants_cssClasses.DAY_SELECTED_RANGE_HOVER]: dayStatus.isHoverInOffsetRange,
      [datePicker_constants_cssClasses.DAY_OFFSET_RANGE_START]: dayStatus.isOffsetRangeStart,
      [datePicker_constants_cssClasses.DAY_OFFSET_RANGE_END]: dayStatus.isOffsetRangeEnd,
      // range input class
      [datePicker_constants_cssClasses.DAY_SELECTED_START_AFTER_HOVER]: dayStatus.isSelectedStartAfterHover,
      [datePicker_constants_cssClasses.DAY_SELECTED_END_BEFORE_HOVER]: dayStatus.isSelectedEndBeforeHover,
      [datePicker_constants_cssClasses.DAY_HOVER_DAY_BEFORE_RANGE]: dayStatus.isHoverDayInStartSelection,
      [datePicker_constants_cssClasses.DAY_HOVER_DAY_AFTER_RANGE]: dayStatus.isHoverDayInEndSelection,
      [datePicker_constants_cssClasses.DAY_HOVER_DAY_AROUND_SINGLE_SELECTED]: dayStatus.isHoverDayAroundOneSelected
    });
    const dayMainCls = classnames_default()({
      ["".concat(datePicker_constants_cssClasses.DAY, "-main")]: true
    });
    const fullDateArgs = [dayNumber, fullDate, dayStatus];

    const customRender = isFunction_default()(renderFullDate);

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "gridcell",
      tabIndex: dayStatus.isDisabled ? -1 : 0,
      "aria-disabled": dayStatus.isDisabled,
      "aria-selected": dayStatus.isSelected,
      "aria-label": fullDate,
      className: !customRender ? dayCls : datePicker_constants_cssClasses.DAY,
      title: fullDate,
      key: dayNumber + dayIndex,
      onClick: e => !dayStatus.isDisabled && this.foundation.handleClick(day),
      onMouseEnter: () => this.foundation.handleHover(day),
      onMouseLeave: () => this.foundation.handleHover()
    }, customRender ? renderFullDate(...fullDateArgs) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: dayMainCls
    }, isFunction_default()(renderDate) ? renderDate(dayNumber, fullDate) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, dayNumber)));
  }

  render() {
    const {
      forwardRef,
      multiple
    } = this.props;
    const weekday = this.renderDayOfWeek();
    const weeks = this.renderWeeks();
    const monthCls = classnames_default()(datePicker_constants_cssClasses.MONTH);
    const ref = forwardRef || this.monthRef;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "grid",
      "aria-multiselectable": multiple,
      ref: ref,
      className: monthCls
    }, weekday, weeks);
  }

}
month_Month.propTypes = {
  month: prop_types_default.a.object,
  selected: prop_types_default.a.object,
  rangeStart: prop_types_default.a.string,
  rangeEnd: prop_types_default.a.string,
  offsetRangeStart: prop_types_default.a.string,
  offsetRangeEnd: prop_types_default.a.string,
  onDayClick: prop_types_default.a.func,
  onDayHover: prop_types_default.a.func,
  weekStartsOn: prop_types_default.a.number,
  disabledDate: prop_types_default.a.func,
  weeksRowNum: prop_types_default.a.number,
  onWeeksRowNumChange: prop_types_default.a.func,
  renderDate: prop_types_default.a.func,
  renderFullDate: prop_types_default.a.func,
  hoverDay: prop_types_default.a.string,
  startDateOffset: prop_types_default.a.func,
  endDateOffset: prop_types_default.a.func,
  rangeInputFocus: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.bool]),
  focusRecordsRef: prop_types_default.a.object,
  multiple: prop_types_default.a.bool
};
month_Month.defaultProps = {
  month: new Date(),
  selected: new set_default.a(),
  rangeStart: '',
  rangeEnd: '',
  onDayClick: noop_default.a,
  onDayHover: noop_default.a,
  onWeeksRowNumChange: noop_default.a,
  weekStartsOn: datePicker_constants_numbers.WEEK_START_ON,
  disabledDate: stubFalse_default.a,
  weeksRowNum: 0
};
// CONCATENATED MODULE: ../semi-foundation/timePicker/constants.ts


const TYPE_TIME_PICKER = 'time';
const TYPE_TIME_RANGE_PICKER = 'timeRange';
const DEFAULT_RANGE_SEPARATOR = ' ~ ';
const DEFAULT_MULTIPLE_SEPARATOR = ',';
const timePicker_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-timepicker"),
  RANGE_PICKER: "".concat(BASE_CLASS_PREFIX, "-timepicker-range-panel"),
  RANGE_PANEL_LISTS: "".concat(BASE_CLASS_PREFIX, "-timepicker-lists")
};
const timePicker_constants_strings = {
  TYPES: [TYPE_TIME_PICKER, TYPE_TIME_RANGE_PICKER],
  TYPE_TIME_PICKER,
  TYPE_TIME_RANGE_PICKER,
  DEFAULT_TYPE: TYPE_TIME_PICKER,
  DEFAULT_RANGE_SEPARATOR,
  DEFAULT_MULTIPLE_SEPARATOR,
  SIZE: input_constants_strings.SIZE,
  DEFAULT_FORMAT: 'HH:mm:ss',
  DEFAULT_FORMAT_A: 'a h:mm:ss',
  STATUS: VALIDATE_STATUS,
  DEFAULT_POSITION: {
    [TYPE_TIME_PICKER]: 'bottomLeft',
    [TYPE_TIME_RANGE_PICKER]: 'bottomLeft'
  }
};
const timePicker_constants_numbers = {};

// CONCATENATED MODULE: ../semi-foundation/scrollList/constants.ts

const scrollList_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-scrolllist"),
  SELECTED: "".concat(BASE_CLASS_PREFIX, "-scrolllist-item-selected")
};
const scrollList_constants_strings = {
  MODE: ['normal', 'wheel']
};
const scrollList_constants_numbers = {
  DEFAULT_ITEM_HEIGHT: 36,
  DEFAULT_SCROLL_DURATION: 120
};

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/times.js
var times = __webpack_require__("15pl");
var times_default = /*#__PURE__*/__webpack_require__.n(times);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/findIndex.js
var lodash_findIndex = __webpack_require__("FllU");
var findIndex_default = /*#__PURE__*/__webpack_require__.n(lodash_findIndex);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/map.js
var lodash_map = __webpack_require__("mbB6");
var lodash_map_default = /*#__PURE__*/__webpack_require__.n(lodash_map);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/find.js
var lodash_find = __webpack_require__("6R5o");
var lodash_find_default = /*#__PURE__*/__webpack_require__.n(lodash_find);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/slice.js
var lodash_slice = __webpack_require__("+n+S");
var lodash_slice_default = /*#__PURE__*/__webpack_require__.n(lodash_slice);

// CONCATENATED MODULE: ../semi-foundation/scrollList/itemFoundation.ts










class itemFoundation_ItemFoundation extends foundation {
  constructor() {
    super(...arguments);
    this._cachedSelectedNode = null;
  }

  selectIndex(index, listWrapper) {
    const {
      type,
      list
    } = this.getProps();

    if (index > -1 && is_array_default()(list) && list.length && Object(isElement["a" /* default */])(listWrapper)) {
      const indexInData = index % list.length;
      const item = list[indexInData];
      const node = listWrapper.children[index];

      this._adapter.setSelectedNode(node);

      this._adapter.notifySelectItem(assign_default()(assign_default()({}, item), {
        value: item.value,
        type,
        index: indexInData
      }));
    }
  }

  selectNode(node, listWrapper) {
    const {
      type,
      list: data
    } = this.getProps();

    if (Object(isElement["a" /* default */])(node) && Object(isElement["a" /* default */])(listWrapper)) {
      const indexInList = findIndex_default()(listWrapper.children, ele => ele === node);

      const indexInData = indexInList % data.length;

      const cachedIndexInList = findIndex_default()(listWrapper.children, ele => ele === this._cachedSelectedNode);

      const cachedIndexData = cachedIndexInList % data.length;
      const item = data[indexInData];

      this._adapter.setSelectedNode(node);

      this._adapter.scrollToCenter(node); // Avoid triggerring notifySelectItem twice,
      // because that scroll event will be trigger
      // when you click to select an item.


      if (this._cachedSelectedNode !== node) {
        this._cachedSelectedNode = node;

        if (cachedIndexData !== indexInData) {
          this._adapter.notifySelectItem(assign_default()(assign_default()({}, item), {
            value: item.value,
            type,
            index: indexInData
          }));
        }
      }
    }
  }
  /**
   *
   * @param {HTMLElement} listWrapper
   * @param {HTMLElement} scrollWrapper
   * @param {number} ratio
   * @returns {boolean}
   */


  shouldAppend(listWrapper, scrollWrapper) {
    let ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
    const tag = 'li';

    if (Object(isElement["a" /* default */])(listWrapper) && Object(isElement["a" /* default */])(scrollWrapper)) {
      const itemNodes = listWrapper.querySelectorAll(tag);
      const lastNode = itemNodes[itemNodes.length - 1];
      const {
        list
      } = this.getProps();

      if (lastNode) {
        const scrollRect = scrollWrapper.getBoundingClientRect();
        const lastRect = lastNode.getBoundingClientRect();
        const listHeight = lastRect.height * list.length;
        let baseTop = lastRect.top;
        let count = 0;

        while (baseTop <= scrollRect.top + scrollRect.height * ratio) {
          count += 1;
          baseTop += listHeight;
        }

        return count;
      }
    }

    return false;
  }
  /**
   *
   * @param {HTMLElement} listWrapper
   * @param {HTMLElement} scrollWrapper
   * @param {number} ratio
   *
   * @returns {boolean}
   */


  shouldPrepend(listWrapper, scrollWrapper) {
    let ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
    const tag = 'li';

    if (Object(isElement["a" /* default */])(listWrapper) && Object(isElement["a" /* default */])(scrollWrapper)) {
      const itemNodes = listWrapper.querySelectorAll(tag);
      const firstNode = itemNodes[0];
      const {
        list
      } = this.getProps();

      if (firstNode) {
        const scrollRect = scrollWrapper.getBoundingClientRect();
        const firstRect = firstNode.getBoundingClientRect();
        const listHeight = firstRect.height * list.length;
        let baseTop = firstRect.top;
        let count = 0;

        while (baseTop + firstRect.height >= scrollRect.top - scrollRect.height * ratio) {
          count += 1;
          baseTop -= listHeight;
        }

        return count;
      }
    }

    return 0;
  }
  /**
   *
   * @param {HTMLElement} listWrapper
   * @param {HTMLElement} wrapper
   * @param {Function} [callback]
   */


  initWheelList(listWrapper, wrapper, callback) {
    const {
      list
    } = this.getProps();

    if (Object(isElement["a" /* default */])(wrapper) && Object(isElement["a" /* default */])(listWrapper) && list && list.length) {
      const allNodes = listWrapper.children;

      const baseNodes = lodash_slice_default()(allNodes, 0, list.length);

      const prependCount = this.shouldPrepend(listWrapper, wrapper);
      const appendCount = this.shouldAppend(listWrapper, wrapper); // this._adapter.setPrependCount(prependCount);
      // this._adapter.setAppendCount(appendCount);

      this._adapter.setState({
        prependCount,
        appendCount
      }, callback);
    }
  }
  /**
   *
   * @param {HTMLElement} listWrapper
   * @param {HTMLElement} wrapper
   * @param {HTMLElement} [nearestNode]
   */


  adjustInfiniteList(listWrapper, wrapper, nearestNode) {
    const {
      list
    } = this.getProps();
    const nodeTag = 'li';

    if (Object(isElement["a" /* default */])(wrapper) && Object(isElement["a" /* default */])(listWrapper) && list && list.length) {
      const allNodes = listWrapper.querySelectorAll(nodeTag);
      const total = allNodes.length;
      const ratio = 1;
      const prependCount = this.shouldPrepend(listWrapper, wrapper, ratio);
      const appendCount = this.shouldAppend(listWrapper, wrapper, ratio); // while (this.shouldPrepend(listWrapper, wrapper, nearestNode)) {

      if (prependCount) {
        // move last nodes to first position
        for (let i = 0; i < prependCount; i++) {
          const nodes = lodash_slice_default()(allNodes, total - list.length * (i + 1), total - list.length * i);

          Object(dom["c" /* prepend */])(listWrapper, ...nodes);
        }
      } // while (this.shouldAppend(listWrapper, wrapper, nearestNode)) {


      if (appendCount) {
        for (let i = 0; i < appendCount; i++) {
          const nodes = lodash_slice_default()(allNodes, i * list.length, (i + 1) * list.length);

          Object(dom["a" /* append */])(listWrapper, ...nodes);
        }
      }
    }
  }
  /**
   *
   * @param {HTMLElement} listWrapper
   * @param {HTMLElement} selector
   *
   */


  getNearestNodeInfo(listWrapper, selector) {
    if (Object(isElement["a" /* default */])(listWrapper) && Object(isElement["a" /* default */])(selector)) {
      var _context;

      const selectorRect = selector.getBoundingClientRect();
      const selectorTop = selectorRect.top;
      const itemNodes = listWrapper.querySelectorAll('li');
      let nearestNode = null;
      let nearestIndex = -1;
      let nearestDistance = Infinity;

      map_default()(_context = from_default()(itemNodes)).call(_context, (node, index) => {
        const rect = node.getBoundingClientRect();
        const rectTop = rect.top;
        const absDistance = Math.abs(rectTop - selectorTop);

        if (absDistance < nearestDistance && !this._adapter.isDisabledIndex(index)) {
          nearestDistance = absDistance;
          nearestNode = node;
          nearestIndex = index;
        }
      });

      return {
        nearestNode,
        nearestIndex
      };
    }

    return undefined;
  }
  /**
   *
   * @param {HTMLElement} listWrapper
   *
   * @param {HTMLElement|null}
   */


  getTargetNode(e, listWrapper) {
    if (e && Object(isElement["a" /* default */])(listWrapper)) {
      const targetTagName = 'li';
      const currentTarget = e.target;
      const itemNodes = listWrapper.querySelectorAll(targetTagName);
      const list = this.getProp('list');
      const length = is_array_default()(list) ? list.length : 0;
      let targetIndex = -1;
      let indexInList = -1;
      let infoInList = null;

      const targetNode = lodash_find_default()(itemNodes, (node, index) => {
        if (node === currentTarget || node.contains(currentTarget)) {
          targetIndex = index;

          if (length > 0) {
            indexInList = index % length;
          }

          return true;
        }

        return undefined;
      });

      if (indexInList > -1) {
        infoInList = list[indexInList];
      }

      return {
        targetNode,
        targetIndex,
        indexInList,
        infoInList
      };
    }

    return null;
  }

}
// CONCATENATED MODULE: ../semi-foundation/scrollList/scrollTo.ts


const scrollTo = (element, to, duration) => {
  const animation = new es_src_Animation_Animation({
    from: {
      scrollTop: element.scrollTop
    },
    to: {
      scrollTop: to
    }
  }, {
    duration
  });
  animation.on('frame', _ref => {
    let {
      scrollTop
    } = _ref;
    element.scrollTop = scrollTop;
  }); // animation.start();

  return animation;
};

/* harmony default export */ var scrollList_scrollTo = (scrollTo);
// CONCATENATED MODULE: ./scrollList/scrollItem.tsx



















const scrollItem_msPerFrame = 1000 / 60;
const blankReg = /^\s*$/;
const wheelMode = 'wheel';
class scrollItem_ScrollItem extends baseComponent_BaseComponent {
  constructor() {
    var _this;

    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super(props);
    _this = this;

    this._cacheNode = (name, node) => name && node && Object.prototype.hasOwnProperty.call(this, name) && (this[name] = node);

    this._cacheSelectedNode = selectedNode => this._cacheNode('selectedNode', selectedNode);

    this._cacheWillSelectNode = node => this._cacheNode('willSelectNode', node);

    this._cacheListNode = list => this._cacheNode('list', list);

    this._cacheSelectorNode = selector => this._cacheNode('selector', selector);

    this._cacheWrapperNode = wrapper => this._cacheNode('wrapper', wrapper);
    /* istanbul ignore next */


    this._isFirst = node => {
      const {
        list
      } = this;

      if (Object(isElement["a" /* default */])(node) && Object(isElement["a" /* default */])(list)) {
        const chilren = list.children;

        const index = findIndex_default()(chilren, node);

        return index === 0;
      }

      return false;
    };
    /* istanbul ignore next */


    this._isLast = node => {
      const {
        list
      } = this;

      if (Object(isElement["a" /* default */])(node) && Object(isElement["a" /* default */])(list)) {
        const {
          children
        } = list;

        const index = findIndex_default()(children, node);

        return index === children.length - 1;
      }

      return false;
    };

    this.indexIsSame = (index1, index2) => {
      const {
        list
      } = this.props;

      if (list.length) {
        return index1 % list.length === index2 % list.length;
      }

      return undefined;
    };

    this.isDisabledIndex = index => {
      const {
        list
      } = this.props;

      if (is_array_default()(list) && list.length && index > -1) {
        const size = list.length;
        const indexInData = index % size;
        return this.isDisabledData(list[indexInData]);
      }

      return false;
    };

    this.isDisabledNode = node => {
      const listWrapper = this.list;

      if (Object(isElement["a" /* default */])(node) && Object(isElement["a" /* default */])(listWrapper)) {
        const index = findIndex_default()(listWrapper.children, child => child === node);

        return this.isDisabledIndex(index);
      }

      return false;
    };

    this.isDisabledData = data => data && typeof data === 'object' && data.disabled;

    this.isWheelMode = () => this.props.mode === wheelMode;

    this.addClassToNode = function (selectedNode) {
      let selectedCls = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scrollList_constants_cssClasses.SELECTED;
      const {
        list
      } = _this;
      selectedNode = selectedNode || _this.selectedNode;

      if (Object(isElement["a" /* default */])(selectedNode) && Object(isElement["a" /* default */])(list)) {
        const {
          children
        } = list;
        const reg = new RegExp("\\s*".concat(selectedCls, "\\s*"), 'g');

        lodash_map_default()(children, node => {
          node.className = node.className && node.className.replace(reg, ' ');

          if (blankReg.test(node.className)) {
            node.className = '';
          }
        });

        if (selectedNode.className && !blankReg.test(selectedNode.className)) {
          selectedNode.className += " ".concat(selectedCls);
        } else {
          selectedNode.className = selectedCls;
        }
      }
    };

    this.getIndexByNode = node => findIndex_default()(this.list.children, node);

    this.getNodeByIndex = index => {
      if (index > -1) {
        return lodash_find_default()(this.list.children, (node, idx) => idx === index);
      }

      const defaultSelectedNode = lodash_find_default()(this.list.children, child => !this.isDisabledNode(child));

      return defaultSelectedNode;
    };

    this.scrollToIndex = (selectedIndex, duration) => {
      // move to selected item
      duration = typeof duration === 'number' ? duration : scrollList_constants_numbers.DEFAULT_SCROLL_DURATION; // eslint-disable-next-line

      selectedIndex = selectedIndex == null ? this.props.selectedIndex : selectedIndex; // this.isWheelMode() && this.addClassToNode();

      this.scrollToNode(this.selectedNode, duration);
    };

    this.scrollToNode = (node, duration) => {
      const {
        wrapper
      } = this;
      const wrapperHeight = wrapper.offsetHeight;
      const itemHeight = this.getItmHeight(node);
      const targetTop = (node.offsetTop || this.list.children.length * itemHeight / 2) - (wrapperHeight - itemHeight) / 2;
      this.scrollToPos(targetTop, duration);
    };

    this.scrollToPos = function (targetTop) {
      let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scrollList_constants_numbers.DEFAULT_SCROLL_DURATION;
      const {
        wrapper
      } = _this; // this.isWheelMode() && this.addClassToNode();

      if (duration && _this.props.motion) {
        if (_this.scrollAnimation) {
          _this.scrollAnimation.destroy();

          _this.scrolling = false;
        }

        if (wrapper.scrollTop === targetTop) {
          if (_this.isWheelMode()) {
            const nodeInfo = _this.foundation.getNearestNodeInfo(_this.list, _this.selector);

            _this.addClassToNode(nodeInfo.nearestNode);
          }
        } else {
          _this.scrollAnimation = scrollList_scrollTo(wrapper, targetTop, duration);

          _this.scrollAnimation.on('rest', () => {
            if (_this.isWheelMode()) {
              const nodeInfo = _this.foundation.getNearestNodeInfo(_this.list, _this.selector);

              _this.addClassToNode(nodeInfo.nearestNode);
            }
          });

          _this.scrollAnimation.start();
        }
      } else {
        wrapper.scrollTop = targetTop;
      }
    };

    this.scrollToSelectItem = e => {
      const {
        nearestNode
      } = this.foundation.getNearestNodeInfo(this.list, this.selector);

      if (this.props.cycled) {
        this.throttledAdjustList(e, nearestNode);
      }

      this.debouncedSelect(e, nearestNode);
    };
    /**
     *
     * reset position to center of the scrollWrapper
     *
     * @param {HTMLElement} selectedNode
     * @param {HTMLElement} scrollWnumber
     * @param {number} duration
     */


    this.scrollToCenter = (selectedNode, scrollWrapper, duration) => {
      selectedNode = selectedNode || this.selectedNode;
      scrollWrapper = scrollWrapper || this.wrapper;

      if (Object(isElement["a" /* default */])(selectedNode) && Object(isElement["a" /* default */])(scrollWrapper)) {
        const scrollRect = scrollWrapper.getBoundingClientRect();
        const selectedRect = selectedNode.getBoundingClientRect();
        const targetTop = scrollWrapper.scrollTop + (selectedRect.top - (scrollRect.top + scrollRect.height / 2 - selectedRect.height / 2));
        this.scrollToPos(targetTop, typeof duration === 'number' ? duration : scrollList_constants_numbers.DEFAULT_SCROLL_DURATION);
      }
    };

    this.clickToSelectItem = e => {
      // const index = this.foundation.selectNearestIndex(e.nativeEvent, this.list);
      e && e.nativeEvent && e.nativeEvent.stopImmediatePropagation();
      const {
        targetNode: node,
        infoInList
      } = this.foundation.getTargetNode(e, this.list);

      if (node && infoInList && !infoInList.disabled) {
        this.debouncedSelect(null, node);
      }
    };

    this.getItmHeight = itm => itm && itm.offsetHeight || scrollList_constants_numbers.DEFAULT_ITEM_HEIGHT;

    this.renderItemList = function () {
      let prefixKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      const {
        selectedIndex,
        mode,
        transform: commonTrans,
        list
      } = _this.props;
      return map_default()(list).call(list, (item, index) => {
        const {
          transform: itemTrans
        } = item;
        const transform = typeof itemTrans === 'function' ? itemTrans : commonTrans;
        const selected = selectedIndex === index;
        const cls = classnames_default()({
          ["".concat(scrollList_constants_cssClasses.PREFIX, "-item-sel")]: selected && mode !== wheelMode,
          ["".concat(scrollList_constants_cssClasses.PREFIX, "-item-disabled")]: Boolean(item.disabled)
        });
        let text = '';

        if (selected) {
          if (typeof transform === 'function') {
            text = transform(item.value, item.text);
          } else {
            // eslint-disable-next-line
            text = item.text == null ? item.value : item.text;
          }
        } else {
          // eslint-disable-next-line
          text = item.text == null ? item.value : item.text;
        }

        const events = {};

        if (!_this.isWheelMode() && !item.disabled) {
          events.onClick = () => _this.foundation.selectIndex(index, _this.list);
        }

        return (
          /*#__PURE__*/
          // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
          external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", assign_default()({
            key: prefixKey + index
          }, events, {
            className: cls,
            role: "option",
            "aria-selected": selected,
            "aria-disabled": item.disabled
          }), text)
        );
      });
    };

    this.renderNormalList = () => {
      const {
        list,
        className,
        style
      } = this.props;
      const inner = this.renderItemList();
      const wrapperCls = classnames_default()("".concat(scrollList_constants_cssClasses.PREFIX, "-item"), className);
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        style: style,
        className: wrapperCls,
        ref: this._cacheWrapperNode
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        role: "listbox",
        "aria-multiselectable": false,
        "aria-label": this.props['aria-label'],
        ref: this._cacheListNode
      }, inner));
    };
    /**
     * List of Rendering Unlimited Modes
     */


    this.renderInfiniteList = () => {
      var _context, _context2;

      const {
        list,
        cycled,
        className,
        style
      } = this.props;
      const {
        prependCount,
        appendCount
      } = this.state;

      const prependList = reduce_default()(_context = times_default()(prependCount)).call(_context, (arr, num) => {
        const items = this.renderItemList("pre_".concat(num, "_"));
        arr.unshift(...items);
        return arr;
      }, []);

      const appendList = reduce_default()(_context2 = times_default()(appendCount)).call(_context2, (arr, num) => {
        const items = this.renderItemList("app_".concat(num, "_"));
        arr.push(...items);
        return arr;
      }, []);

      const inner = this.renderItemList();
      const listWrapperCls = classnames_default()("".concat(scrollList_constants_cssClasses.PREFIX, "-list-outer"), {
        ["".concat(scrollList_constants_cssClasses.PREFIX, "-list-outer-nocycle")]: !cycled
      });
      const wrapperCls = classnames_default()("".concat(scrollList_constants_cssClasses.PREFIX, "-item-wheel"), className);
      const selectorCls = classnames_default()("".concat(scrollList_constants_cssClasses.PREFIX, "-selector"));
      const preShadeCls = classnames_default()("".concat(scrollList_constants_cssClasses.PREFIX, "-shade"), "".concat(scrollList_constants_cssClasses.PREFIX, "-shade-pre"));
      const postShadeCls = classnames_default()("".concat(scrollList_constants_cssClasses.PREFIX, "-shade"), "".concat(scrollList_constants_cssClasses.PREFIX, "-shade-post"));
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: wrapperCls,
        style: style
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: preShadeCls
      }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: selectorCls,
        ref: this._cacheSelectorNode
      }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: postShadeCls
      }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: listWrapperCls,
        ref: this._cacheWrapperNode,
        onScroll: this.scrollToSelectItem
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        role: "listbox",
        "aria-label": this.props['aria-label'],
        "aria-multiselectable": false,
        ref: this._cacheListNode,
        onClick: this.clickToSelectItem
      }, prependList, inner, appendList)));
    };

    this.state = {
      prependCount: 0,
      appendCount: 0 // selectedIndex: props.selectedIndex,
      // fakeSelectedIndex: props.selectedIndex,

    };
    this.selectedNode = null;
    this.willSelectNode = null;
    this.list = null;
    this.wrapper = null;
    this.selector = null;
    this.scrollAnimation = null; // cache if select action comes from outside

    this.foundation = new itemFoundation_ItemFoundation(this.adapter);
    this.throttledAdjustList = throttle_default()((e, nearestNode) => {
      this.foundation.adjustInfiniteList(this.list, this.wrapper, nearestNode);
    }, scrollItem_msPerFrame);
    this.debouncedSelect = debounce_default()((e, nearestNode) => {
      this._cacheSelectedNode(nearestNode);

      this.foundation.selectNode(nearestNode, this.list);
    }, scrollItem_msPerFrame * 5);
  }

  get adapter() {
    var _this2 = this;

    return assign_default()(assign_default()({}, super.adapter), {
      setState: (states, callback) => this.setState(assign_default()({}, states), callback),
      setPrependCount: prependCount => this.setState({
        prependCount
      }),
      setAppendCount: appendCount => this.setState({
        appendCount
      }),
      isDisabledIndex: this.isDisabledIndex,
      setSelectedNode: selectedNode => this._cacheWillSelectNode(selectedNode),
      notifySelectItem: function () {
        return _this2.props.onSelect(...arguments);
      },
      scrollToCenter: this.scrollToCenter
    });
  }

  componentWillUnmount() {
    if (this.props.cycled) {
      this.throttledAdjustList.cancel();
      this.debouncedSelect.cancel();
    }
  }

  componentDidMount() {
    this.foundation.init();
    const {
      mode,
      cycled,
      selectedIndex,
      list
    } = this.props;
    const selectedNode = this.getNodeByIndex(typeof selectedIndex === 'number' && selectedIndex > -1 ? selectedIndex : 0);

    this._cacheSelectedNode(selectedNode);

    this._cacheWillSelectNode(selectedNode);

    if (mode === wheelMode && cycled) {
      this.foundation.initWheelList(this.list, this.wrapper, () => {
        // we have to scroll in next tick
        // setTimeout(() => {
        this.scrollToNode(selectedNode, 0); // });
      });
    } else {
      this.scrollToNode(selectedNode, 0);
    }
  }

  componentDidUpdate(prevProps) {
    const {
      selectedIndex
    } = this.props; // smooth scroll to selected option

    if (prevProps.selectedIndex !== selectedIndex) {
      const willSelectIndex = this.getIndexByNode(this.willSelectNode);

      if (!this.indexIsSame(willSelectIndex, selectedIndex)) {
        const newSelectedNode = this.getNodeByOffset(this.selectedNode, selectedIndex - prevProps.selectedIndex, this.list);

        this._cacheWillSelectNode(newSelectedNode);
      }

      this._cacheSelectedNode(this.willSelectNode);

      this.scrollToIndex(selectedIndex);
    }
  }
  /**
   *
   * @param {HTMLElement} refNode
   * @param {number} offset
   * @param {HTMLElement} listWrapper
   *
   * @returns {HTMLElement}
   */


  getNodeByOffset(refNode, offset, listWrapper) {
    const {
      list
    } = this.props;

    if (Object(isElement["a" /* default */])(refNode) && Object(isElement["a" /* default */])(listWrapper) && typeof offset === 'number' && is_array_default()(list) && list.length) {
      offset = offset % list.length;
      const refIndex = this.getIndexByNode(refNode);
      let targetIndex = refIndex + offset;

      while (targetIndex < 0) {
        targetIndex += list.length;
      }

      if (offset) {
        return this.getNodeByIndex(targetIndex);
      }
    }

    return refNode;
  }

  render() {
    return this.isWheelMode() ? this.renderInfiniteList() : this.renderNormalList();
  }

}
scrollItem_ScrollItem.propTypes = {
  mode: prop_types_default.a.string,
  cycled: prop_types_default.a.bool,
  list: prop_types_default.a.array,
  selectedIndex: prop_types_default.a.number,
  onSelect: prop_types_default.a.func,
  transform: prop_types_default.a.func,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  motion: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.bool]),
  type: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number])
};
scrollItem_ScrollItem.defaultProps = {
  selectedIndex: 0,
  motion: true,
  // transform: identity,
  list: [],
  onSelect: noop_default.a,
  cycled: false,
  mode: wheelMode
};
// CONCATENATED MODULE: ../semi-foundation/scrollList/foundation.ts

class foundation_ScrollListFoundation extends foundation {}
// EXTERNAL MODULE: ../semi-foundation/scrollList/scrollList.scss
var scrollList = __webpack_require__("MomL");

// CONCATENATED MODULE: ./scrollList/index.tsx








 // eslint-disable-next-line @typescript-eslint/ban-types

class scrollList_ScrollList extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);
    this.foundation = new foundation_ScrollListFoundation(this.adapter);
  }

  render() {
    const {
      children,
      header,
      footer,
      prefixCls,
      bodyHeight,
      className,
      style
    } = this.props;
    const clsWrapper = classnames_default()(className, {
      [prefixCls || scrollList_constants_cssClasses.PREFIX]: true
    });
    const clsHeader = classnames_default()({
      ["".concat(prefixCls || scrollList_constants_cssClasses.PREFIX, "-header")]: true
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: clsWrapper,
      style: style
    }, header ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: clsHeader
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(clsHeader, "-title"),
      "x-semi-prop": this.props['x-semi-header-alias'] || "header"
    }, header), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(clsWrapper, "-line")
    })) : null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(clsWrapper, "-body"),
      style: {
        height: bodyHeight ? bodyHeight : ''
      },
      "x-semi-prop": "children"
    }, children), footer ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(clsWrapper, "-footer"),
      "x-semi-prop": this.props['x-semi-footer-alias'] || "footer"
    }, footer) : null);
  }

}

scrollList_ScrollList.Item = scrollItem_ScrollItem;
scrollList_ScrollList.propTypes = {
  className: prop_types_default.a.string,
  header: prop_types_default.a.node,
  footer: prop_types_default.a.node,
  children: prop_types_default.a.node,
  bodyHeight: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string])
};
/* harmony default export */ var scrollList_0 = (scrollList_ScrollList);
// CONCATENATED MODULE: ../semi-foundation/timePicker/ComboxFoundation.ts











const HOUR = 1000 * 60 * 60;
const DAY = 24 * HOUR; // TODO: move to utils

const formatOption = (option, disabledOptions) => {
  let value = "".concat(option);

  if (option < 10) {
    value = "0".concat(option);
  }

  let disabled = false;

  if (disabledOptions && index_of_default()(disabledOptions).call(disabledOptions, option) >= 0) {
    disabled = true;
  }

  return {
    value,
    disabled
  };
};

function generateOptions(length, disabledOptions, hideDisabledOptions) {
  let step = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  const arr = [];

  for (let value = 0; value < length; value += step) {
    if (!disabledOptions || index_of_default()(disabledOptions).call(disabledOptions, value) < 0 || !hideDisabledOptions) {
      arr.push(value);
    }
  }

  return arr;
}

class ComboxFoundation_ComboboxFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  }

  isAM() {
    return this.getProp('isAM');
  }

  initData() {
    const {
      timeStampValue,
      hourStep,
      disabledMinutes,
      disabledSeconds,
      hideDisabledOptions,
      minuteStep,
      secondStep
    } = this.getProps();
    const format = this.getValidFormat();
    const dateTime = this.getDisplayDateFromTimeStamp(timeStampValue);
    const disabledHourOptions = this.disabledHours();
    const disabledMinuteOptions = disabledMinutes(dateTime ? dateTime.getHours() : null);
    const disabledSecondOptions = disabledSeconds(dateTime ? dateTime.getHours() : null, dateTime ? dateTime.getMinutes() : null);
    const hourOptions = generateOptions(24, disabledHourOptions, hideDisabledOptions, hourStep);
    const minuteOptions = generateOptions(60, disabledMinuteOptions, hideDisabledOptions, minuteStep);
    const secondOptions = generateOptions(60, disabledSecondOptions, hideDisabledOptions, secondStep);
    return {
      showHour: Boolean(format.match(/HH|hh|H|h/g)),
      showMinute: Boolean(format.match(/mm/g)),
      showSecond: Boolean(format.match(/ss/g)),
      hourOptions,
      minuteOptions,
      secondOptions
    };
  }

  getPosition() {
    const position = this.getProp('position');
    const type = this.getProp('type') || timePicker_constants_strings.DEFAULT_TYPE;
    return position || timePicker_constants_strings.DEFAULT_POSITION[type];
  }

  getDefaultFormatIfNeed() {
    if (this._isInProps('format')) {
      return this.getProp('format');
    } else if (this.getProp('use12Hours')) {
      return timePicker_constants_strings.DEFAULT_FORMAT_A;
    } else {
      return timePicker_constants_strings.DEFAULT_FORMAT;
    }
  }

  disabledHours() {
    const {
      use12Hours,
      disabledHours
    } = this.getProps();
    let disabledOptions = disabledHours && disabledHours();

    if (use12Hours && is_array_default()(disabledOptions)) {
      if (this.isAM()) {
        var _context;

        disabledOptions = map_default()(_context = filter_default()(disabledOptions).call(disabledOptions, h => h < 12)).call(_context, h => h === 0 ? 12 : h);
      } else {
        disabledOptions = map_default()(disabledOptions).call(disabledOptions, h => h === 12 ? 12 : h - 12);
      }
    }

    return disabledOptions;
  }

  getValidFormat(format) {
    let _format = isNullOrUndefined(format) ? this.getProp('format') : format;

    _format = this.getDefaultFormatIfNeed();
    _format = typeof _format === 'string' ? _format : timePicker_constants_strings.DEFAULT_FORMAT; // if (use12Hours) {
    //     format = format.replace(/H/g, 'h');
    //     if (!/(\s+)a/i.test(format)) {
    //         format += ' a';
    //     } else {
    //         format = format.replace(/(\s+)A/i, '$1a');
    //     }
    // }

    return _format;
  }
  /**
   * from 13-bit timestamp  -> get display date
   * by combobox use
   */


  getDisplayDateFromTimeStamp(timeStamp) {
    let date;

    if (timeStamp) {
      date = new Date(timeStamp);
    }

    if (!timeStamp || !isValidDate(date)) {
      return this.createDateDefault();
    }

    return date;
  }
  /**
   * create a date at 00:00:00
   */


  createDateDefault() {
    return new Date(parse_int_default()(String(now_default()() / DAY), 10) * DAY - 8 * HOUR);
  }

}

/* harmony default export */ var ComboxFoundation = (ComboxFoundation_ComboboxFoundation);
// CONCATENATED MODULE: ./timePicker/Combobox.tsx








/* eslint-disable max-len */

/* eslint-disable react/no-did-update-set-state */










class Combobox_Combobox extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.cacheRefCurrent = (key, current) => {
      if (key && typeof key === 'string') {
        this.adapter.setCache(key, current);
      }
    };

    this.reselect = () => {
      const currentKeys = ['ampm', 'hour', 'minute', 'second'];

      for_each_default()(currentKeys).call(currentKeys, key => {
        const current = this.adapter.getCache(key);

        if (current && current.scrollToIndex) {
          current.scrollToIndex();
        }
      });
    };

    this.onItemChange = _ref => {
      let {
        type,
        value,
        disabled
      } = _ref;
      // eslint-disable-next-line prefer-const
      let {
        onChange,
        use12Hours,
        isAM,
        format,
        timeStampValue
      } = this.props;
      const transformValue = this.foundation.getDisplayDateFromTimeStamp(timeStampValue); // TODO: foundation

      if (type === 'hour') {
        if (use12Hours) {
          if (isAM) {
            transformValue.setHours(Number(value) % 12);
          } else {
            transformValue.setHours(Number(value) % 12 + 12);
          }
        } else {
          transformValue.setHours(Number(value));
        }
      } else if (type === 'minute') {
        transformValue.setMinutes(Number(value));
      } else if (type === 'ampm') {
        const ampm = value.toUpperCase();

        if (use12Hours) {
          if (ampm === 'PM') {
            isAM = false;
            transformValue.getHours() < 12 && transformValue.setHours(transformValue.getHours() % 12 + 12);
          }

          if (ampm === 'AM') {
            isAM = true;
            transformValue.getHours() >= 12 && transformValue.setHours(transformValue.getHours() - 12);
          }
        }
      } else {
        transformValue.setSeconds(Number(value));
      }

      onChange && onChange({
        isAM,
        value: format_format(transformValue, format && format.replace(/(\s+)A/g, '$1a')),
        timeStampValue: Number(transformValue)
      });
    };

    this.onEnterSelectPanel = range => {
      const {
        onCurrentSelectPanelChange
      } = this.props;
      onCurrentSelectPanelChange(range);
    };

    this.getDisplayDateFromTimeStamp = timeStampValue => this.foundation.getDisplayDateFromTimeStamp(timeStampValue);

    this.foundation = new ComboxFoundation(this.adapter);
    this.state = assign_default()({}, this.foundation.initData());
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevProps.timeStampValue !== this.props.timeStampValue || prevProps.format !== this.props.format) {
      this.setState(assign_default()({}, this.foundation.initData()));
    }
  }

  componentWillUnmount() {// this.foundation.destroy();
  }

  componentDidMount() {// this.foundation.init();
  }

  renderHourSelect(hour, locale) {
    const {
      prefixCls,
      disabledHours,
      use12Hours,
      scrollItemProps
    } = this.props;
    const {
      showHour,
      hourOptions
    } = this.state;

    if (!showHour) {
      return null;
    }

    const disabledOptions = disabledHours();
    let hourOptionsAdj, hourAdj;

    if (use12Hours) {
      var _context;

      hourOptionsAdj = concat_default()(_context = [12]).call(_context, filter_default()(hourOptions).call(hourOptions, h => h < 12 && h > 0));
      hourAdj = hour % 12 || 12;
    } else {
      hourOptionsAdj = hourOptions;
      hourAdj = hour;
    }

    const transformHour = value => value + locale.hour;

    const className = "".concat(prefixCls, "-list-hour");
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(scrollItem_ScrollItem, assign_default()({
      ref: current => this.cacheRefCurrent('hour', current),
      mode: 'wheel',
      transform: transformHour,
      cycled: true,
      className: className,
      list: map_default()(hourOptionsAdj).call(hourOptionsAdj, option => formatOption(option, disabledOptions)),
      selectedIndex: index_of_default()(hourOptionsAdj).call(hourOptionsAdj, hourAdj),
      type: "hour",
      onSelect: this.onItemChange
    }, scrollItemProps));
  }

  renderMinuteSelect(minute, locale) {
    const {
      prefixCls,
      disabledMinutes,
      timeStampValue,
      scrollItemProps
    } = this.props;
    const {
      showMinute,
      minuteOptions
    } = this.state;

    if (!showMinute) {
      return null;
    }

    const value = new Date(timeStampValue);
    const disabledOptions = disabledMinutes && disabledMinutes(value.getHours());
    const className = "".concat(prefixCls, "-list-minute");

    const transformMinute = min => min + locale.minute;

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(scrollItem_ScrollItem, assign_default()({
      ref: current => this.cacheRefCurrent('minute', current),
      mode: 'wheel',
      transform: transformMinute,
      cycled: true,
      list: map_default()(minuteOptions).call(minuteOptions, option => formatOption(option, disabledOptions)),
      selectedIndex: index_of_default()(minuteOptions).call(minuteOptions, minute),
      type: "minute",
      onSelect: this.onItemChange,
      className: className
    }, scrollItemProps));
  }

  renderSecondSelect(second, locale) {
    const {
      prefixCls,
      disabledSeconds,
      timeStampValue,
      scrollItemProps
    } = this.props;
    const {
      showSecond,
      secondOptions
    } = this.state;

    if (!showSecond) {
      return null;
    }

    const value = new Date(timeStampValue);
    const disabledOptions = disabledSeconds && disabledSeconds(value.getHours(), value.getMinutes());
    const className = "".concat(prefixCls, "-list-second");

    const transformSecond = sec => String(sec) + locale.second;

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(scrollItem_ScrollItem, assign_default()({
      ref: current => this.cacheRefCurrent('second', current),
      mode: 'wheel',
      transform: transformSecond,
      cycled: true,
      list: map_default()(secondOptions).call(secondOptions, option => formatOption(option, disabledOptions)),
      selectedIndex: index_of_default()(secondOptions).call(secondOptions, second),
      className: className,
      type: "second",
      onSelect: this.onItemChange
    }, scrollItemProps));
  }

  renderAMPMSelect(locale, localeCode) {
    const {
      prefixCls,
      use12Hours,
      isAM,
      scrollItemProps
    } = this.props;

    if (!use12Hours) {
      return null;
    }

    const AMPMOptions = [{
      value: 'AM',
      text: locale.AM || '上午'
    }, {
      value: 'PM',
      text: locale.PM || '下午'
    }];
    const selected = isAM ? 0 : 1;
    const className = "".concat(prefixCls, "-list-ampm");
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(scrollItem_ScrollItem, assign_default()({
      ref: current => this.cacheRefCurrent('ampm', current),
      mode: 'wheel',
      className: className,
      cycled: false,
      list: AMPMOptions,
      selectedIndex: selected,
      type: "ampm",
      onSelect: this.onItemChange
    }, scrollItemProps));
  }

  render() {
    const {
      timeStampValue,
      panelHeader,
      panelFooter
    } = this.props;
    const value = this.getDisplayDateFromTimeStamp(timeStampValue);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
      componentName: "TimePicker"
    }, (locale, localeCode) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(scrollList_0, {
      header: panelHeader,
      footer: panelFooter,
      "x-semi-header-alias": "panelHeader",
      "x-semi-footer-alias": "panelFooter"
    }, this.renderAMPMSelect(locale, localeCode), this.renderHourSelect(value.getHours(), locale), this.renderMinuteSelect(value.getMinutes(), locale), this.renderSecondSelect(value.getSeconds(), locale)));
  }

}

Combobox_Combobox.propTypes = {
  format: prop_types_default.a.string,
  defaultOpenValue: prop_types_default.a.object,
  prefixCls: prop_types_default.a.string,
  onChange: prop_types_default.a.func,
  showHour: prop_types_default.a.bool,
  showMinute: prop_types_default.a.bool,
  showSecond: prop_types_default.a.bool,
  disabledHours: prop_types_default.a.func,
  disabledMinutes: prop_types_default.a.func,
  disabledSeconds: prop_types_default.a.func,
  hideDisabledOptions: prop_types_default.a.bool,
  onCurrentSelectPanelChange: prop_types_default.a.func,
  use12Hours: prop_types_default.a.bool,
  isAM: prop_types_default.a.bool,
  timeStampValue: prop_types_default.a.any,
  scrollItemProps: prop_types_default.a.object
};
Combobox_Combobox.defaultProps = {
  disabledHours: noop_default.a,
  disabledMinutes: noop_default.a,
  disabledSeconds: noop_default.a,
  format: timePicker_constants_strings.DEFAULT_FORMAT
};
/* harmony default export */ var timePicker_Combobox = (Combobox_Combobox);
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/fill.js
var fill = __webpack_require__("nctR");
var fill_default = /*#__PURE__*/__webpack_require__.n(fill);

// CONCATENATED MODULE: ../semi-foundation/datePicker/yearAndMonthFoundation.ts


class yearAndMonthFoundation_YearAndMonthFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  init() {} // eslint-disable-next-line @typescript-eslint/no-empty-function


  destroy() {}

  selectYear(item) {
    const year = item.value;

    this._adapter.setCurrentYear(year);

    this._adapter.notifySelectYear(year);
  }

  selectMonth(item) {
    const {
      month
    } = item;

    this._adapter.setCurrentMonth(month);

    this._adapter.notifySelectMonth(month);
  }

  backToMain() {
    this._adapter.notifyBackToMain();
  }

}
// CONCATENATED MODULE: ../semi-foundation/datePicker/_utils/getYears.ts


const getYears = () => {
  const year = new Date().getFullYear();
  const startYear = year - 100;
  return from_default()({
    length: 200
  }, (v, i) => startYear + i);
};

/* harmony default export */ var _utils_getYears = (getYears);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/date-fns/esm/setYear/index.js



/**
 * @name setYear
 * @category Year Helpers
 * @summary Set the year to the given date.
 *
 * @description
 * Set the year to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} year - the year of the new date
 * @returns {Date} the new date with the year set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set year 2013 to 1 September 2014:
 * const result = setYear(new Date(2014, 8, 1), 2013)
 * //=> Sun Sep 01 2013 00:00:00
 */

function setYear(dirtyDate, dirtyYear) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var year = toInteger(dirtyYear); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date

  if (isNaN(date.getTime())) {
    return new Date(NaN);
  }

  date.setFullYear(year);
  return date;
}
// CONCATENATED MODULE: ./datePicker/yearAndMonth.tsx









/* eslint-disable max-len */













const yearAndMonth_prefixCls = "".concat(BASE_CLASS_PREFIX, "-datepicker");

class yearAndMonth_YearAndMonth extends baseComponent_BaseComponent {
  constructor(props) {
    var _context, _context2, _context3;

    super(props);

    this.selectYear = item => {
      this.foundation.selectYear(item);
    };

    this.selectMonth = item => {
      this.foundation.selectMonth(item);
    };

    this.reselect = () => {
      const refKeys = ['yearRef', 'monthRef'];

      for_each_default()(refKeys).call(refKeys, key => {
        const ref = this[key];

        if (ref && ref.current && ref.current.scrollToIndex) {
          ref.current.scrollToIndex();
        }
      });
    };

    this.backToMain = e => {
      e.nativeEvent.stopImmediatePropagation();
      this.foundation.backToMain();
    };

    const now = new Date();
    let {
      currentYear,
      currentMonth
    } = props;
    currentYear = currentYear || now.getFullYear();
    currentMonth = currentMonth || now.getMonth() + 1;
    this.state = {
      years: map_default()(_context = _utils_getYears()).call(_context, year => ({
        value: year,
        year
      })),
      months: map_default()(_context2 = fill_default()(_context3 = Array(12)).call(_context3, 0)).call(_context2, (v, idx) => ({
        value: idx + 1,
        month: idx + 1
      })),
      currentYear,
      currentMonth
    };
    this.yearRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.monthRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.foundation = new yearAndMonthFoundation_YearAndMonthFoundation(this.adapter);
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      // updateYears: years => this.setState({ years }),
      // updateMonths: months => this.setState({ months }),
      setCurrentYear: currentYear => this.setState({
        currentYear
      }),
      setCurrentMonth: currentMonth => this.setState({
        currentMonth
      }),
      notifySelectYear: year => this.props.onSelect({
        currentMonth: this.state.currentMonth,
        currentYear: year
      }),
      notifySelectMonth: month => this.props.onSelect({
        currentYear: this.state.currentYear,
        currentMonth: month
      }),
      notifyBackToMain: () => this.props.onBackToMain()
    });
  }

  static getDerivedStateFromProps(props, state) {
    const willUpdateStates = {};
    const now = new Date();

    if (!isNullOrUndefined(props.currentMonth) && props.currentMonth !== state.currentMonth && props.currentMonth !== 0) {
      willUpdateStates.currentMonth = props.currentMonth || now.getMonth() + 1;
    }

    if (isNullOrUndefined(props.currentYear) && props.currentYear !== state.currentYear && props.currentYear !== 0) {
      willUpdateStates.currentYear = props.currentYear || now.getFullYear();
    }

    return willUpdateStates;
  }

  renderColYear() {
    const {
      years,
      currentYear,
      currentMonth
    } = this.state;
    const {
      disabledDate,
      localeCode,
      yearCycled
    } = this.props;
    const currentDate = setMonth(now_default()(), currentMonth - 1);

    const list = map_default()(years).call(years, _ref => {
      let {
        value,
        year
      } = _ref;
      return {
        year,
        value,
        disabled: disabledDate(setYear(currentDate, year))
      };
    });

    let transform = val => val;

    if (localeCode === 'zh-CN' || localeCode === 'zh-TW') {
      // Only Chinese needs to add [year] after the selected year
      transform = val => "".concat(val, "\u5E74");
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(scrollItem_ScrollItem, {
      ref: this.yearRef,
      cycled: yearCycled,
      list: list,
      transform: transform,
      selectedIndex: find_index_default()(years).call(years, item => item.value === currentYear),
      type: "year",
      onSelect: this.selectYear
    });
  }

  renderColMonth() {
    const {
      months,
      currentMonth,
      currentYear
    } = this.state;
    const {
      locale,
      localeCode,
      monthCycled,
      disabledDate
    } = this.props;

    let transform = val => val;

    const currentDate = setYear(now_default()(), currentYear);

    if (localeCode === 'zh-CN' || localeCode === 'zh-TW') {
      // Only Chinese needs to add [month] after the selected month
      transform = val => "".concat(val, "\u6708");
    } // i18n


    const list = map_default()(months).call(months, _ref2 => {
      let {
        value,
        month
      } = _ref2;
      return {
        month,
        disabled: disabledDate(setMonth(currentDate, month - 1)),
        value: locale.fullMonths[value] // Actual rendered text

      };
    });

    const selectedIndex = find_index_default()(list).call(list, item => item.month === currentMonth);

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(scrollItem_ScrollItem, {
      ref: this.monthRef,
      cycled: monthCycled,
      list: list,
      transform: transform,
      selectedIndex: selectedIndex,
      type: "month",
      onSelect: this.selectMonth
    });
  }

  render() {
    const {
      locale,
      noBackBtn,
      density,
      presetPosition,
      renderQuickControls,
      renderDateInput
    } = this.props;
    const prefix = "".concat(yearAndMonth_prefixCls, "-yearmonth-header"); // i18n

    const selectDateText = locale.selectDate;
    const iconSize = density === 'compact' ? 'default' : 'large';
    const buttonSize = density === 'compact' ? 'small' : 'default';
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, noBackBtn ? null : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: prefix
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(iconButton_0, {
      noHorizontalPadding: false,
      icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronLeft, {
        "aria-hidden": true,
        size: iconSize
      }),
      size: buttonSize,
      onClick: this.backToMain
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, selectDateText))), presetPosition ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, presetPosition === "left" && renderQuickControls, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", null, renderDateInput, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(scrollList_0, null, this.renderColYear(), this.renderColMonth())), presetPosition === "right" && renderQuickControls) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, renderDateInput, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(scrollList_0, null, this.renderColYear(), this.renderColMonth())));
  }

}

yearAndMonth_YearAndMonth.propTypes = {
  currentYear: prop_types_default.a.number,
  currentMonth: prop_types_default.a.number,
  onSelect: prop_types_default.a.func,
  locale: prop_types_default.a.object,
  localeCode: prop_types_default.a.string,
  monthCycled: prop_types_default.a.bool,
  yearCycled: prop_types_default.a.bool,
  noBackBtn: prop_types_default.a.bool,
  disabledDate: prop_types_default.a.func,
  density: prop_types_default.a.string,
  presetPosition: prop_types_default.a.oneOf(datePicker_constants_strings.PRESET_POSITION_SET),
  renderQuickControls: prop_types_default.a.node,
  renderDateInput: prop_types_default.a.node
};
yearAndMonth_YearAndMonth.defaultProps = {
  disabledDate: stubFalse_default.a,
  monthCycled: false,
  yearCycled: false,
  noBackBtn: false,
  onSelect: noop_default.a
};
/* harmony default export */ var yearAndMonth = (yearAndMonth_YearAndMonth);
// CONCATENATED MODULE: ./datePicker/monthsGrid.tsx








/* eslint-disable jsx-a11y/interactive-supports-focus,jsx-a11y/click-events-have-key-events */

/* eslint-disable jsx-a11y/no-static-element-interactions */

/* eslint-disable react/no-did-update-set-state */

/* eslint-disable max-len */

/* eslint-disable no-nested-ternary */















const monthsGrid_prefixCls = datePicker_constants_cssClasses.PREFIX;
class monthsGrid_MonthsGrid extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.cacheRefCurrent = (key, current) => {
      if (typeof key === 'string' && key.length) {
        this.adapter.setCache(key, current);
      }
    };

    this.leftIsYearOrTime = state => {
      const {
        monthLeft
      } = state || this.state;

      if (monthLeft && (monthLeft.isTimePickerOpen || monthLeft.isYearPickerOpen)) {
        return true;
      } else {
        return false;
      }
    };

    this.rightIsYearOrTime = state => {
      const {
        monthRight
      } = state || this.state;

      if (monthRight && (monthRight.isTimePickerOpen || monthRight.isYearPickerOpen)) {
        return true;
      } else {
        return false;
      }
    };
    /**
     * Calculate the height of the scrolling list, if the animation is not over, return 0
     */


    this.calcScrollListHeight = () => {
      const {
        motionEnd
      } = this.props;
      let wrapLeft, wrapRight, switchLeft, switchRight;

      if (motionEnd) {
        wrapLeft = this.adapter.getCache("wrap-".concat(datePicker_constants_strings.PANEL_TYPE_LEFT));
        wrapRight = this.adapter.getCache("wrap-".concat(datePicker_constants_strings.PANEL_TYPE_RIGHT));
        switchLeft = this.adapter.getCache("switch-".concat(datePicker_constants_strings.PANEL_TYPE_LEFT));
        switchRight = this.adapter.getCache("switch-".concat(datePicker_constants_strings.PANEL_TYPE_RIGHT));
      }

      const leftRect = wrapLeft && wrapLeft.getBoundingClientRect();
      const rightRect = wrapRight && wrapRight.getBoundingClientRect();
      let leftHeight = leftRect && leftRect.height || 0;
      let rightHeight = rightRect && rightRect.height || 0;

      if (switchLeft) {
        leftHeight += switchLeft.getBoundingClientRect().height;
      }

      if (switchRight) {
        rightHeight += switchRight.getBoundingClientRect().height;
      }

      return Math.max(leftHeight, rightHeight);
    };

    this.handleWeeksRowNumChange = (weeksRowNum, panelType) => {
      const isLeft = panelType === datePicker_constants_strings.PANEL_TYPE_RIGHT;
      const isRight = panelType === datePicker_constants_strings.PANEL_TYPE_RIGHT;
      const allIsYearOrTime = this.leftIsYearOrTime() && this.rightIsYearOrTime();

      if (this.foundation.isRangeType() && !allIsYearOrTime) {
        const states = {
          weeksRowNum,
          currentPanelHeight: this.calcScrollListHeight()
        };
        this.setState(states, () => {
          if (this.leftIsYearOrTime() && isRight || this.rightIsYearOrTime() && isLeft) {
            this.reselect();
          }
        });
      }
    };

    this.reselect = () => {
      const refKeys = ["timepicker-".concat(datePicker_constants_strings.PANEL_TYPE_LEFT), "timepicker-".concat(datePicker_constants_strings.PANEL_TYPE_RIGHT), "yam-".concat(datePicker_constants_strings.PANEL_TYPE_LEFT), "yam-".concat(datePicker_constants_strings.PANEL_TYPE_RIGHT)];

      for_each_default()(refKeys).call(refKeys, key => {
        const current = this.adapter.getCache(key);

        if (current && typeof current.reselect === 'function') {
          current.reselect();
        }
      });
    };

    this.getYAMOpenType = () => {
      return this.foundation.getYAMOpenType();
    };

    const validFormat = props.format || getDefaultFormatTokenByType(props.type);
    const {
      nowDate,
      nextDate
    } = getDefaultPickerDate({
      defaultPickerValue: props.defaultPickerValue,
      format: validFormat,
      dateFnsLocale: props.dateFnsLocale
    });
    const dateState = {
      // Direct use of full date string storage, mainly considering the month rendering comparison to save a conversion
      // The selected value for single or multiple selection, full date string, eg. {'2019-10-01', '2019-10-02'}
      selected: new set_default.a()
    };
    const rangeState = {
      monthLeft: {
        pickerDate: nowDate,
        showDate: nowDate,
        isTimePickerOpen: false,
        isYearPickerOpen: false
      },
      monthRight: {
        pickerDate: nextDate,
        showDate: nextDate,
        isTimePickerOpen: false,
        isYearPickerOpen: false
      },
      maxWeekNum: 0,
      hoverDay: '',
      rangeStart: props.rangeStart,
      rangeEnd: '',
      currentPanelHeight: 0,
      offsetRangeStart: '',
      offsetRangeEnd: ''
    };
    this.state = assign_default()(assign_default()({}, dateState), rangeState);
    this.foundation = new monthsGridFoundation_MonthsGridFoundation(this.adapter);
  }

  get dateAdapter() {
    return {
      updateDaySelected: selected => this.setState({
        selected
      })
    };
  }

  get rangeAdapter() {
    return {
      setRangeStart: rangeStart => this.setState({
        rangeStart
      }),
      setRangeEnd: rangeEnd => this.setState({
        rangeEnd
      }),
      setHoverDay: hoverDay => this.setState({
        hoverDay
      }),
      setWeeksHeight: maxWeekNum => this.setState({
        maxWeekNum
      }),
      setOffsetRangeStart: offsetRangeStart => this.setState({
        offsetRangeStart
      }),
      setOffsetRangeEnd: offsetRangeEnd => this.setState({
        offsetRangeEnd
      })
    };
  }

  get adapter() {
    return assign_default()(assign_default()(assign_default()(assign_default()({}, super.adapter), this.dateAdapter), this.rangeAdapter), {
      updateMonthOnLeft: v => this.setState({
        monthLeft: v
      }),
      updateMonthOnRight: v => this.setState({
        monthRight: v
      }),
      notifySelectedChange: (value, options) => this.props.onChange(value, options),
      notifyMaxLimit: v => this.props.onMaxSelect(v),
      notifyPanelChange: (date, dateString) => this.props.onPanelChange(date, dateString),
      setRangeInputFocus: rangeInputFocus => this.props.setRangeInputFocus(rangeInputFocus),
      isAnotherPanelHasOpened: currentRangeInput => this.props.isAnotherPanelHasOpened(currentRangeInput)
    });
  }

  componentDidMount() {
    super.componentDidMount();
  }

  componentDidUpdate(prevProps, prevState) {
    const {
      defaultValue,
      defaultPickerValue,
      motionEnd
    } = this.props;

    if (prevProps.defaultValue !== defaultValue) {
      // we should always update panel state when value changes
      this.foundation.updateSelectedFromProps(defaultValue);
    }

    if (prevProps.defaultPickerValue !== defaultPickerValue) {
      this.foundation.initDefaultPickerValue();
    }

    if (prevProps.motionEnd !== motionEnd && motionEnd === true) {
      if (this.foundation.isRangeType()) {
        const currentPanelHeight = this.calcScrollListHeight();
        this.setState({
          currentPanelHeight
        });
      }
    }

    const isRange = this.foundation.isRangeType();

    if (isRange) {
      /**
       * we have to add these code to ensure that scroll list's selector places center
       */
      const prevAll = this.leftIsYearOrTime(prevState) && this.rightIsYearOrTime(prevState);
      const prevSome = this.leftIsYearOrTime(prevState) && !this.rightIsYearOrTime(prevState) || !this.leftIsYearOrTime(prevState) && this.rightIsYearOrTime(prevState);
      const nowAll = this.leftIsYearOrTime() && this.rightIsYearOrTime();
      const nowSome = this.leftIsYearOrTime() && !this.rightIsYearOrTime() || !this.leftIsYearOrTime() && this.rightIsYearOrTime();
      const prevAllToSome = prevAll && nowSome;
      const prevSomeToAll = prevSome && nowAll;

      if (prevSomeToAll) {
        this.setState({
          currentPanelHeight: this.calcScrollListHeight()
        }, this.reselect);
      } else if (prevAllToSome) {
        this.reselect();
      }
    }
  }

  renderPanel(month, panelType) {
    var _context;

    let monthCls = classnames_default()(concat_default()(_context = "".concat(monthsGrid_prefixCls, "-month-grid-")).call(_context, panelType));
    const {
      monthLeft,
      monthRight,
      currentPanelHeight
    } = this.state;
    const {
      insetInput
    } = this.props;
    const panelDetail = panelType === datePicker_constants_strings.PANEL_TYPE_RIGHT ? monthRight : monthLeft;
    const {
      isTimePickerOpen,
      isYearPickerOpen
    } = panelDetail;
    const panelContent = this.renderMonth(month, panelType);
    const yearAndMonthLayer = isYearPickerOpen ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(monthsGrid_prefixCls, "-yam")
    }, this.renderYearAndMonth(panelType, panelDetail)) : null;
    const timePickerLayer = isTimePickerOpen ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(monthsGrid_prefixCls, "-tpk")
    }, this.renderTimePicker(panelType, panelDetail)) : null;
    const style = {};
    const wrapLeft = this.adapter.getCache("wrap-".concat(datePicker_constants_strings.PANEL_TYPE_LEFT));
    const wrapRight = this.adapter.getCache("wrap-".concat(datePicker_constants_strings.PANEL_TYPE_RIGHT));
    const wrap = panelType === datePicker_constants_strings.PANEL_TYPE_RIGHT ? wrapRight : wrapLeft;

    if (this.foundation.isRangeType()) {
      if (isYearPickerOpen || isTimePickerOpen) {
        style.minWidth = wrap.getBoundingClientRect().width;
      }

      if (this.leftIsYearOrTime() && this.rightIsYearOrTime() && !insetInput) {
        /**
         * left和right同时为tpk时，panel会有一个minHeight
         * 如果缓存的currentPanelHeight为0，则需要计算滚动列表的高度
         * 如果有缓存的值则使用currentPanelHeight（若此高度<实际值，则会影响ScrollList中渲染列表的循环次数）
         * 详见 packages/semi-foundation/scrollList/itemFoundation.js initWheelList函数
         *
         * When left and right are tpk at the same time, the panel will have a minHeight
         * If the cached currentPanelHeight is 0, you need to calculate the height of the scrolling list
         * If there is a cached value, use currentPanelHeight (if this height is less than the actual value, it will affect the number of cycles in the ScrollList to render the list)
         * See packages/semi-foundation/scrollList/itemFoundation.js initWheelList function
         */
        style.minHeight = currentPanelHeight ? currentPanelHeight : this.calcScrollListHeight();
      }
    } else if (this.props.type !== 'year' && this.props.type !== 'month' && (isTimePickerOpen || isYearPickerOpen)) {
      monthCls = classnames_default()(monthCls, "".concat(monthsGrid_prefixCls, "-yam-showing"));
    }

    const _isDatePanelOpen = !(isYearPickerOpen || isTimePickerOpen);

    const xOpenType = _isDatePanelOpen ? 'date' : isYearPickerOpen ? 'year' : 'time';
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: monthCls,
      key: panelType,
      style: style,
      "x-open-type": xOpenType
    }, yearAndMonthLayer, timePickerLayer, this.foundation.isRangeType() ? panelContent : isYearPickerOpen || isTimePickerOpen ? null : panelContent, this.renderSwitch(panelType));
  }

  showYearPicker(panelType, e) {
    // e.stopPropagation();
    // When switching to the year and month, the e.target at this time is generated from Navigation, and the Navigation module will be removed from the DOM after switching
    // If you do not prevent the event from spreading to index.jsx, panel.contain (e.target) in clickOutSide will call closePanel because there is no Nav in the Panel and think this click is clickOutSide
    // Cause the entire component pop-up window to be closed by mistake
    // console.log(this.navRef.current.clientHeight, this.monthRef.current.clientHeight);
    // this.wrapRef.current.style.height = this.wrapRef.current.clientHeight + 'px';
    // this.wrapRef.current.style.overflow = 'hidden';
    e.nativeEvent.stopImmediatePropagation();
    this.foundation.showYearPicker(panelType);
  }

  renderMonth(month, panelType) {
    const {
      selected,
      rangeStart,
      rangeEnd,
      hoverDay,
      maxWeekNum,
      offsetRangeStart,
      offsetRangeEnd
    } = this.state;
    const {
      weekStartsOn,
      disabledDate,
      locale,
      localeCode,
      renderDate,
      renderFullDate,
      startDateOffset,
      endDateOffset,
      density,
      rangeInputFocus,
      syncSwitchMonth,
      multiple
    } = this.props;
    let monthText = ''; // i18n monthText

    if (month) {
      // Get the absolute value of the year and month
      const yearNumber = month ? format_format(month, 'yyyy') : '';
      const monthNumber = month ? format_format(month, 'L') : ''; // Display the month as the corresponding language text

      const mText = locale.months[monthNumber];
      const monthFormatToken = locale.monthText; // Display the year and month in a specific language format order

      monthText = monthFormatToken.replace('${year}', yearNumber).replace('${month}', mText);
    }

    let style = {};
    const detail = panelType === datePicker_constants_strings.PANEL_TYPE_RIGHT ? this.state.monthRight : this.state.monthLeft; // Whether to select type for range

    const isRangeType = this.foundation.isRangeType(); // Whether to switch synchronously for two panels

    const shouldBimonthSwitch = isRangeType && syncSwitchMonth;

    if (isRangeType && detail && (detail.isYearPickerOpen || detail.isTimePickerOpen)) {
      style = {
        visibility: 'hidden',
        position: 'absolute',
        pointerEvents: 'none'
      };
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      ref: current => this.cacheRefCurrent("wrap-".concat(panelType), current),
      style: style
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(navigation_Navigation, {
      forwardRef: current => this.cacheRefCurrent("nav-".concat(panelType), current),
      monthText: monthText,
      density: density,
      onMonthClick: e => this.showYearPicker(panelType, e),
      onPrevMonth: () => this.foundation.prevMonth(panelType),
      onNextMonth: () => this.foundation.nextMonth(panelType),
      onNextYear: () => this.foundation.nextYear(panelType),
      onPrevYear: () => this.foundation.prevYear(panelType),
      shouldBimonthSwitch: shouldBimonthSwitch,
      panelType: panelType
    }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(month_Month, {
      locale: locale,
      localeCode: localeCode,
      forwardRef: current => this.cacheRefCurrent("month-".concat(panelType), current),
      disabledDate: disabledDate,
      weekStartsOn: weekStartsOn,
      month: month,
      selected: selected,
      rangeStart: rangeStart,
      rangeEnd: rangeEnd,
      rangeInputFocus: rangeInputFocus,
      offsetRangeStart: offsetRangeStart,
      offsetRangeEnd: offsetRangeEnd,
      hoverDay: hoverDay,
      weeksRowNum: maxWeekNum,
      renderDate: renderDate,
      renderFullDate: renderFullDate,
      onDayClick: day => this.foundation.handleDayClick(day, panelType),
      onDayHover: day => this.foundation.handleDayHover(day, panelType),
      onWeeksRowNumChange: weeksRowNum => this.handleWeeksRowNumChange(weeksRowNum, panelType),
      startDateOffset: startDateOffset,
      endDateOffset: endDateOffset,
      focusRecordsRef: this.props.focusRecordsRef,
      multiple: multiple
    }));
  }

  renderTimePicker(panelType, panelDetail) {
    const {
      type,
      locale,
      format,
      hideDisabledOptions,
      timePickerOpts,
      dateFnsLocale
    } = this.props;
    const {
      pickerDate
    } = panelDetail;
    const timePanelCls = classnames_default()("".concat(monthsGrid_prefixCls, "-time"));

    const restProps = assign_default()(assign_default()({}, timePickerOpts), {
      hideDisabledOptions
    });

    const disabledOptions = this.foundation.calcDisabledTime(panelType);

    if (disabledOptions) {
      var _context2;

      for_each_default()(_context2 = ['disabledHours', 'disabledMinutes', 'disabledSeconds']).call(_context2, key => {
        if (disabledOptions[key]) {
          restProps[key] = disabledOptions[key];
        }
      });
    }

    const {
      rangeStart,
      rangeEnd
    } = this.state;
    const dateFormat = this.foundation.getValidDateFormat();
    let startDate, endDate;

    if (type === 'dateTimeRange' && rangeStart && rangeEnd && isSameDay(startDate = compatibleParse(rangeStart, dateFormat, undefined, dateFnsLocale), endDate = compatibleParse(rangeEnd, dateFormat, undefined, dateFnsLocale))) {
      if (panelType === datePicker_constants_strings.PANEL_TYPE_RIGHT) {
        rangeStart && (restProps.startDate = startDate);
      } else {
        rangeEnd && (restProps.endDate = endDate);
      }
    } // i18n placeholder


    const placeholder = locale.selectTime;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: timePanelCls
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(timePicker_Combobox, assign_default()({
      ref: current => this.cacheRefCurrent("timepicker-".concat(panelType), current),
      panelHeader: placeholder,
      format: format || datePicker_constants_strings.FORMAT_TIME_PICKER,
      timeStampValue: pickerDate,
      onChange: newTime => this.foundation.handleTimeChange(newTime, panelType)
    }, restProps)));
  }

  renderYearAndMonth(panelType, panelDetail) {
    const {
      pickerDate
    } = panelDetail;
    const {
      locale,
      localeCode,
      density
    } = this.props;
    const y = pickerDate.getFullYear();
    const m = pickerDate.getMonth() + 1;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(yearAndMonth, {
      ref: current => this.cacheRefCurrent("yam-".concat(panelType), current),
      locale: locale,
      localeCode: localeCode,
      currentYear: y,
      currentMonth: m,
      onSelect: item => this.foundation.toYearMonth(panelType, new Date(item.currentYear, item.currentMonth - 1)),
      onBackToMain: () => {
        this.foundation.showDatePanel(panelType);
        const wrapCurrent = this.adapter.getCache("wrap-".concat(panelType));

        if (wrapCurrent) {
          wrapCurrent.style.height = 'auto';
        }
      },
      density: density
    });
  }

  renderSwitch(panelType) {
    var _context3;

    const {
      rangeStart,
      rangeEnd,
      monthLeft,
      monthRight
    } = this.state;
    const {
      type,
      locale,
      disabledTimePicker,
      density,
      dateFnsLocale,
      insetInput
    } = this.props; // Type: date, dateRange, year, month, inset input no rendering required

    if (!includes_default()(type).call(type, 'Time') || insetInput) {
      return null;
    } // switch year/month & time


    let panelDetail, dateText; // i18n

    const {
      FORMAT_SWITCH_DATE
    } = locale.localeFormatToken; // Timepicker format is constant and does not change with language
    // const FORMAT_TIME_PICKER = strings.FORMAT_TIME_PICKER;

    const formatTimePicker = this.foundation.getValidTimeFormat();
    const dateFormat = this.foundation.getValidDateFormat();

    if (panelType === datePicker_constants_strings.PANEL_TYPE_LEFT) {
      panelDetail = monthLeft;
      dateText = rangeStart ? format_format(compatibleParse(rangeStart, dateFormat, undefined, dateFnsLocale), FORMAT_SWITCH_DATE) : '';
    } else {
      panelDetail = monthRight;
      dateText = rangeEnd ? format_format(compatibleParse(rangeEnd, dateFormat, undefined, dateFnsLocale), FORMAT_SWITCH_DATE) : '';
    }

    const {
      isTimePickerOpen,
      showDate
    } = panelDetail;
    const monthText = showDate ? format_format(showDate, FORMAT_SWITCH_DATE) : '';
    const timeText = showDate ? format_format(showDate, formatTimePicker) : '';

    const showSwitchIcon = includes_default()(_context3 = ['default']).call(_context3, density);

    const switchCls = classnames_default()("".concat(monthsGrid_prefixCls, "-switch"));
    const dateCls = classnames_default()({
      ["".concat(monthsGrid_prefixCls, "-switch-date")]: true,
      ["".concat(monthsGrid_prefixCls, "-switch-date-active")]: !isTimePickerOpen
    });
    const timeCls = classnames_default()({
      ["".concat(monthsGrid_prefixCls, "-switch-time")]: true,
      ["".concat(monthsGrid_prefixCls, "-switch-time-disabled")]: disabledTimePicker,
      ["".concat(monthsGrid_prefixCls, "-switch-date-active")]: isTimePickerOpen
    });
    const textCls = classnames_default()("".concat(monthsGrid_prefixCls, "-switch-text"));
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: switchCls,
      ref: current => this.adapter.setCache("switch-".concat(panelType), current)
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "button",
      "aria-label": "Switch to date panel",
      className: dateCls,
      onClick: e => this.foundation.showDatePanel(panelType)
    }, showSwitchIcon && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconCalendar, {
      "aria-hidden": true
    }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: textCls
    }, dateText || monthText)), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "button",
      "aria-label": "Switch to time panel",
      className: timeCls,
      onClick: e => this.foundation.showTimePicker(panelType, true)
    }, showSwitchIcon && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClock, {
      "aria-hidden": true
    }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: textCls
    }, timeText)));
  }

  render() {
    const {
      monthLeft,
      monthRight
    } = this.state;
    const {
      type,
      insetInput,
      presetPosition,
      renderQuickControls,
      renderDateInput
    } = this.props;
    const monthGridCls = classnames_default()({
      ["".concat(monthsGrid_prefixCls, "-month-grid")]: true
    });
    const panelTypeLeft = datePicker_constants_strings.PANEL_TYPE_LEFT;
    const panelTypeRight = datePicker_constants_strings.PANEL_TYPE_RIGHT;
    let content = null;

    if (type === 'date' || type === 'dateTime') {
      content = this.renderPanel(monthLeft.pickerDate, panelTypeLeft);
    } else if (type === 'dateRange' || type === 'dateTimeRange') {
      content = [this.renderPanel(monthLeft.pickerDate, panelTypeLeft), this.renderPanel(monthRight.pickerDate, panelTypeRight)];
    } else if (type === 'year' || type === 'month') {
      content = 'year month';
    }

    const yearOpenType = this.getYAMOpenType();
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, presetPosition === "left" && renderQuickControls, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", null, renderDateInput, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: monthGridCls,
      "x-type": type,
      "x-panel-yearandmonth-open-type": yearOpenType,
      "x-insetinput": insetInput ? "true" : "false",
      "x-preset-position": renderQuickControls === null ? 'null' : presetPosition,
      ref: current => this.cacheRefCurrent('monthGrid', current)
    }, content)), presetPosition === "right" && renderQuickControls);
  }

}
monthsGrid_MonthsGrid.propTypes = {
  type: prop_types_default.a.oneOf(datePicker_constants_strings.TYPE_SET),
  defaultValue: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number, prop_types_default.a.object, prop_types_default.a.array]),
  defaultPickerValue: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number, prop_types_default.a.object, prop_types_default.a.array]),
  multiple: prop_types_default.a.bool,
  max: prop_types_default.a.number,
  weekStartsOn: prop_types_default.a.number,
  disabledDate: prop_types_default.a.func,
  disabledTime: prop_types_default.a.func,
  disabledTimePicker: prop_types_default.a.bool,
  hideDisabledOptions: prop_types_default.a.bool,
  navPrev: prop_types_default.a.node,
  navNext: prop_types_default.a.node,
  onMaxSelect: prop_types_default.a.func,
  timePickerOpts: prop_types_default.a.object,
  // Whether the outer datePicker is a controlled component
  isControlledComponent: prop_types_default.a.bool,
  rangeStart: prop_types_default.a.oneOfType([prop_types_default.a.string]),
  rangeInputFocus: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.string]),
  locale: prop_types_default.a.object,
  localeCode: prop_types_default.a.string,
  format: prop_types_default.a.string,
  renderDate: prop_types_default.a.func,
  renderFullDate: prop_types_default.a.func,
  startDateOffset: prop_types_default.a.func,
  endDateOffset: prop_types_default.a.func,
  autoSwitchDate: prop_types_default.a.bool,
  motionEnd: prop_types_default.a.bool,
  density: prop_types_default.a.string,
  dateFnsLocale: prop_types_default.a.object.isRequired,
  timeZone: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  // Support synchronous switching of months
  syncSwitchMonth: prop_types_default.a.bool,
  // Callback function for panel date switching
  onPanelChange: prop_types_default.a.func,
  focusRecordsRef: prop_types_default.a.object,
  triggerRender: prop_types_default.a.func,
  presetPosition: prop_types_default.a.oneOf(datePicker_constants_strings.PRESET_POSITION_SET),
  renderQuickControls: prop_types_default.a.node,
  renderDateInput: prop_types_default.a.node
};
monthsGrid_MonthsGrid.defaultProps = {
  type: 'date',
  rangeStart: '',
  multiple: false,
  weekStartsOn: datePicker_constants_numbers.WEEK_START_ON,
  disabledDate: stubFalse_default.a,
  onMaxSelect: noop_default.a,
  locale: {}
};
// CONCATENATED MODULE: ./datePicker/quickControl.tsx



/* eslint-disable jsx-a11y/no-static-element-interactions,jsx-a11y/click-events-have-key-events */







const quickControl_prefixCls = datePicker_constants_cssClasses.PREFIX;
const {
  Text: quickControl_Text
} = typography_0;

class quickControl_QuickControl extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    var _context, _context2, _context3, _context4, _context5, _context6, _context7, _context8, _context9, _context10, _context11, _context12;

    const {
      presets,
      onPresetClick,
      type,
      presetPosition,
      insetInput
    } = this.props;
    const isTypeRange = type === 'dateRange' || type === 'dateTimeRange';
    const isPanelTopAndBottom = presetPosition === 'top' || presetPosition === 'bottom';
    const isMonth = type === 'month';
    const isTopAndBottomRange = isPanelTopAndBottom && isTypeRange;
    const isTopAndBottomMonth = isPanelTopAndBottom && isMonth;
    const wrapperCls = classnames_default()("".concat(quickControl_prefixCls, "-quick-control"), {
      [concat_default()(_context = "".concat(quickControl_prefixCls, "-quick-control-")).call(_context, type)]: type,
      [concat_default()(_context2 = "".concat(quickControl_prefixCls, "-quick-control-")).call(_context2, presetPosition)]: true
    });
    const headerCls = classnames_default()({
      ["".concat(quickControl_prefixCls, "-quick-control-header")]: true
    });
    const contentWrapperCls = classnames_default()({
      [concat_default()(_context3 = "".concat(quickControl_prefixCls, "-quick-control-")).call(_context3, presetPosition, "-content-wrapper")]: true
    });
    const contentCls = classnames_default()({
      [concat_default()(_context4 = "".concat(quickControl_prefixCls, "-quick-control-")).call(_context4, presetPosition, "-content")]: !isTopAndBottomRange && !isTopAndBottomMonth,
      [concat_default()(_context5 = "".concat(quickControl_prefixCls, "-quick-control-")).call(_context5, presetPosition, "-range-content")]: isTopAndBottomRange,
      [concat_default()(_context6 = "".concat(quickControl_prefixCls, "-quick-control-")).call(_context6, presetPosition, "-month-content")]: isTopAndBottomMonth
    });
    const itemCls = classnames_default()({
      [concat_default()(_context7 = "".concat(quickControl_prefixCls, "-quick-control-")).call(_context7, presetPosition, "-content-item")]: !isTopAndBottomRange && !isTopAndBottomMonth,
      [concat_default()(_context8 = "".concat(quickControl_prefixCls, "-quick-control-")).call(_context8, presetPosition, "-range-content-item")]: isTopAndBottomRange,
      [concat_default()(_context9 = "".concat(quickControl_prefixCls, "-quick-control-")).call(_context9, presetPosition, "-month-content-item")]: isTopAndBottomMonth
    });
    const ellipsisCls = classnames_default()({
      [concat_default()(_context10 = "".concat(quickControl_prefixCls, "-quick-control-")).call(_context10, presetPosition, "-content-item-ellipsis")]: !isTopAndBottomRange && !isTopAndBottomMonth,
      [concat_default()(_context11 = "".concat(quickControl_prefixCls, "-quick-control-")).call(_context11, presetPosition, "-range-content-item-ellipsis")]: isTopAndBottomRange,
      [concat_default()(_context12 = "".concat(quickControl_prefixCls, "-quick-control-")).call(_context12, presetPosition, "-month-content-item-ellipsis")]: isTopAndBottomMonth
    });

    if (!presets.length) {
      return null;
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: wrapperCls,
      "x-insetinput": insetInput ? "true" : "false"
    }, !isPanelTopAndBottom && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: headerCls
    }, "\u5FEB\u6377\u9009\u62E9"), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: contentWrapperCls
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: contentCls
    }, map_default()(presets).call(presets, (item, index) => {
      const _item = typeof item === 'function' ? item() : item;

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(button_0, {
        size: "small",
        type: "primary",
        onClick: e => onPresetClick(_item, e),
        key: index
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: itemCls
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(quickControl_Text, {
        ellipsis: {
          showTooltip: true
        },
        className: ellipsisCls
      }, _item.text)));
    }))));
  }

}

quickControl_QuickControl.propTypes = {
  presets: prop_types_default.a.array,
  presetPosition: prop_types_default.a.oneOf(datePicker_constants_strings.PRESET_POSITION_SET),
  onPresetClick: prop_types_default.a.func,
  type: prop_types_default.a.string,
  insetInput: prop_types_default.a.bool
};
quickControl_QuickControl.defaultProps = {
  presets: [],
  presetPosition: 'bottom',
  onPresetClick: function_noop
};
/* harmony default export */ var quickControl = (quickControl_QuickControl);
// CONCATENATED MODULE: ./datePicker/footer.tsx




function Footer() {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const {
    prefixCls,
    locale,
    onCancelClick,
    onConfirmClick
  } = props;
  const wrapCls = classnames_default()("".concat(prefixCls, "-footer"));
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: wrapCls
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(button_0, {
    theme: "borderless",
    onClick: onCancelClick
  }, get_default()(locale, 'footer.cancel', '')), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(button_0, {
    theme: "solid",
    onClick: onConfirmClick
  }, get_default()(locale, 'footer.confirm', '')));
}
// EXTERNAL MODULE: ../semi-foundation/datePicker/datePicker.scss
var datePicker = __webpack_require__("IJ0B");

// CONCATENATED MODULE: ./datePicker/datePicker.tsx












/* eslint-disable jsx-a11y/click-events-have-key-events,jsx-a11y/interactive-supports-focus */

/* eslint-disable max-len */

/* eslint-disable jsx-a11y/click-events-have-key-events */

/* eslint-disable jsx-a11y/no-static-element-interactions */
















class datePicker_DatePicker extends baseComponent_BaseComponent {
  constructor(props) {
    var _this;

    super(props);
    _this = this;

    this.setTriggerRef = node => this.triggerElRef.current = node; // Called when changes are selected by clicking on the selected date


    this.handleSelectedChange = (v, options) => this.foundation.handleSelectedChange(v, options); // Called when the year and month change


    this.handleYMSelectedChange = item => this.foundation.handleYMSelectedChange(item);

    this.disabledDisposeDate = function (date) {
      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        rest[_key - 1] = arguments[_key];
      }

      return _this.foundation.disabledDisposeDate(date, ...rest);
    };

    this.disabledDisposeTime = function (date) {
      for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        rest[_key2 - 1] = arguments[_key2];
      }

      return _this.foundation.disabledDisposeTime(date, ...rest);
    };

    this.handleOpenPanel = () => this.foundation.openPanel();

    this.handleInputChange = function () {
      return _this.foundation.handleInputChange(...arguments);
    };

    this.handleInsetInputChange = options => this.foundation.handleInsetInputChange(options);

    this.handleInputComplete = v => this.foundation.handleInputComplete(v);

    this.handleInputBlur = e => this.foundation.handleInputBlur(get_default()(e, 'nativeEvent.target.value'), e);

    this.handleInputFocus = function () {
      return _this.foundation.handleInputFocus(...arguments);
    };

    this.handleInputClear = e => this.foundation.handleInputClear(e);

    this.handleTriggerWrapperClick = e => this.foundation.handleTriggerWrapperClick(e);

    this.handleSetRangeFocus = rangeInputFocus => this.foundation.handleSetRangeFocus(rangeInputFocus);

    this.handleRangeInputBlur = (value, e) => this.foundation.handleRangeInputBlur(value, e);

    this.handleRangeInputClear = e => this.foundation.handleRangeInputClear(e);

    this.handleRangeEndTabPress = e => this.foundation.handleRangeEndTabPress(e);

    this.isAnotherPanelHasOpened = currentRangeInput => {
      if (currentRangeInput === 'rangeStart') {
        return this.focusRecordsRef.current.rangeEnd;
      } else {
        return this.focusRecordsRef.current.rangeStart;
      }
    };

    this.handleInsetDateFocus = (e, rangeType) => {
      const monthGridFoundation = get_default()(this, 'monthGrid.current.foundation');

      if (monthGridFoundation) {
        monthGridFoundation.showDatePanel(datePicker_constants_strings.PANEL_TYPE_LEFT);
        monthGridFoundation.showDatePanel(datePicker_constants_strings.PANEL_TYPE_RIGHT);
      }

      this.handleInputFocus(e, rangeType);
    };

    this.handleInsetTimeFocus = () => {
      const monthGridFoundation = get_default()(this, 'monthGrid.current.foundation');

      if (monthGridFoundation) {
        monthGridFoundation.showTimePicker(datePicker_constants_strings.PANEL_TYPE_LEFT);
        monthGridFoundation.showTimePicker(datePicker_constants_strings.PANEL_TYPE_RIGHT);
      }
    };

    this.handlePanelVisibleChange = visible => {
      this.foundation.handlePanelVisibleChange(visible);
    };

    this.handleConfirm = e => this.foundation.handleConfirm();

    this.handleCancel = e => this.foundation.handleCancel();

    this.renderFooter = (locale, localeCode) => {
      if (this.adapter.needConfirm()) {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Footer, assign_default()({}, this.props, {
          locale: locale,
          localeCode: localeCode,
          onConfirmClick: this.handleConfirm,
          onCancelClick: this.handleCancel
        }));
      }

      return null;
    };

    this.renderPanel = (locale, localeCode, dateFnsLocale) => {
      const {
        dropdownClassName,
        dropdownStyle,
        density,
        topSlot,
        bottomSlot,
        insetInput,
        type,
        format,
        rangeSeparator,
        defaultPickerValue,
        presetPosition
      } = this.props;
      const {
        insetInputValue,
        value
      } = this.state;
      const wrapCls = classnames_default()(datePicker_constants_cssClasses.PREFIX, {
        [datePicker_constants_cssClasses.PANEL_YAM]: this.adapter.typeIsYearOrMonth(),
        ["".concat(datePicker_constants_cssClasses.PREFIX, "-compact")]: density === 'compact'
      }, dropdownClassName);
      const insetInputProps = {
        dateFnsLocale,
        format,
        insetInputValue,
        rangeSeparator,
        type,
        value: value,
        handleInsetDateFocus: this.handleInsetDateFocus,
        handleInsetTimeFocus: this.handleInsetTimeFocus,
        onInsetInputChange: this.handleInsetInputChange,
        rangeInputStartRef: this.rangeInputStartRef,
        rangeInputEndRef: this.rangeInputEndRef,
        density,
        defaultPickerValue
      };
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        ref: this.panelRef,
        className: wrapCls,
        style: dropdownStyle
      }, topSlot && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(datePicker_constants_cssClasses.PREFIX, "-topSlot"),
        "x-semi-prop": "topSlot"
      }, topSlot), presetPosition === "top" && this.renderQuickControls(), this.adapter.typeIsYearOrMonth() ? this.renderYearMonthPanel(locale, localeCode) : this.renderMonthGrid(locale, localeCode, dateFnsLocale), presetPosition === "bottom" && this.renderQuickControls(), bottomSlot && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(datePicker_constants_cssClasses.PREFIX, "-bottomSlot"),
        "x-semi-prop": "bottomSlot"
      }, bottomSlot), this.renderFooter(locale, localeCode));
    };

    this.renderYearMonthPanel = (locale, localeCode) => {
      const {
        density,
        presetPosition
      } = this.props;
      const date = this.state.value[0];
      let year = 0;
      let month = 0;

      if (isDate_default()(date)) {
        year = date.getFullYear();
        month = date.getMonth() + 1;
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(yearAndMonth, {
        locale: locale,
        localeCode: localeCode,
        disabledDate: this.disabledDisposeDate,
        noBackBtn: true,
        monthCycled: true,
        onSelect: this.handleYMSelectedChange,
        currentYear: year,
        currentMonth: month,
        density: density,
        presetPosition: presetPosition,
        renderQuickControls: this.renderQuickControls(),
        renderDateInput: this.renderDateInput()
      });
    };

    this.wrapPopover = children => {
      const {
        panelShow
      } = this.state; // rtl changes the default position

      const {
        direction
      } = this.context;
      const defaultPosition = direction === 'rtl' ? 'bottomRight' : 'bottomLeft';
      const {
        motion,
        zIndex,
        position = defaultPosition,
        getPopupContainer,
        locale,
        localeCode,
        dateFnsLocale,
        stopPropagation,
        autoAdjustOverflow,
        spacing
      } = this.props;
      const mergedMotion = this.foundation.getMergedMotion(motion);
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(popover_0, {
        getPopupContainer: getPopupContainer,
        // wrapWhenSpecial={false}
        autoAdjustOverflow: autoAdjustOverflow,
        zIndex: zIndex,
        motion: mergedMotion,
        content: this.renderPanel(locale, localeCode, dateFnsLocale),
        trigger: "custom",
        position: position,
        visible: panelShow,
        stopPropagation: stopPropagation,
        spacing: spacing,
        onVisibleChange: this.handlePanelVisibleChange
      }, children);
    };

    this.state = {
      panelShow: props.open || props.defaultOpen,
      isRange: false,
      inputValue: null,
      value: [],
      cachedSelectedValue: null,
      prevTimeZone: null,
      motionEnd: false,
      rangeInputFocus: undefined,
      autofocus: props.autoFocus || this.isRangeType(props.type, props.triggerRender) && (props.open || props.defaultOpen),
      insetInputValue: null,
      triggerDisabled: undefined
    };
    this.adapter.setCache('cachedSelectedValue', null);
    this.triggerElRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.panelRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.monthGrid = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.rangeInputStartRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.rangeInputEndRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.focusRecordsRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef(); // @ts-ignore ignore readonly

    this.focusRecordsRef.current = {
      rangeStart: false,
      rangeEnd: false
    };
    this.foundation = new foundation_DatePickerFoundation(this.adapter);
  }

  get adapter() {
    var _this2 = this;

    return assign_default()(assign_default()({}, super.adapter), {
      togglePanel: panelShow => {
        this.setState({
          panelShow
        });

        if (!panelShow) {
          this.focusRecordsRef.current.rangeEnd = false;
          this.focusRecordsRef.current.rangeStart = false;
        }
      },
      registerClickOutSide: () => {
        if (this.clickOutSideHandler) {
          this.adapter.unregisterClickOutSide();
          this.clickOutSideHandler = null;
        }

        this.clickOutSideHandler = e => {
          if (this.adapter.needConfirm()) {
            return;
          }

          const triggerEl = this.triggerElRef && this.triggerElRef.current;
          const panelEl = this.panelRef && this.panelRef.current;
          const isInTrigger = triggerEl && triggerEl.contains(e.target);
          const isInPanel = panelEl && panelEl.contains(e.target);

          if (!isInTrigger && !isInPanel && this._mounted) {
            this.foundation.closePanel(e);
          }
        };

        document.addEventListener('mousedown', this.clickOutSideHandler);
      },
      unregisterClickOutSide: () => {
        document.removeEventListener('mousedown', this.clickOutSideHandler);
      },
      notifyBlur: function () {
        return _this2.props.onBlur(...arguments);
      },
      notifyFocus: function () {
        return _this2.props.onFocus(...arguments);
      },
      notifyClear: function () {
        return _this2.props.onClear(...arguments);
      },
      notifyChange: function () {
        return _this2.props.onChange(...arguments);
      },
      notifyCancel: function () {
        return _this2.props.onCancel(...arguments);
      },
      notifyConfirm: function () {
        return _this2.props.onConfirm(...arguments);
      },
      notifyOpenChange: function () {
        return _this2.props.onOpenChange(...arguments);
      },
      notifyPresetsClick: function () {
        return _this2.props.onPresetClick(...arguments);
      },
      updateValue: value => this.setState({
        value
      }),
      updatePrevTimezone: prevTimeZone => this.setState({
        prevTimeZone
      }),
      updateCachedSelectedValue: cachedSelectedValue => {
        let _cachedSelectedValue = cachedSelectedValue;

        if (cachedSelectedValue && !is_array_default()(cachedSelectedValue)) {
          _cachedSelectedValue = [...cachedSelectedValue];
        }

        this.setState({
          cachedSelectedValue: _cachedSelectedValue
        });
      },
      updateInputValue: inputValue => {
        this.setState({
          inputValue
        });
      },
      updateInsetInputValue: insetInputValue => {
        const {
          insetInput
        } = this.props;

        if (insetInput && !isEqual_default()(insetInputValue, this.state.insetInputValue)) {
          this.setState({
            insetInputValue
          });
        }
      },
      needConfirm: () => {
        var _context;

        return includes_default()(_context = ['dateTime', 'dateTimeRange']).call(_context, this.props.type) && this.props.needConfirm === true;
      },
      typeIsYearOrMonth: () => {
        var _context2;

        return includes_default()(_context2 = ['month', 'year']).call(_context2, this.props.type);
      },
      setMotionEnd: motionEnd => this.setState({
        motionEnd
      }),
      setRangeInputFocus: rangeInputFocus => {
        const {
          preventScroll
        } = this.props;

        if (rangeInputFocus !== this.state.rangeInputFocus) {
          this.setState({
            rangeInputFocus
          });
        }

        switch (rangeInputFocus) {
          case 'rangeStart':
            const inputStartNode = get_default()(this, 'rangeInputStartRef.current');

            inputStartNode && inputStartNode.focus({
              preventScroll
            });
            /**
             * 解决选择完startDate，切换到endDate后panel被立马关闭的问题。
             * 用户打开panel，选了startDate后，会执行setRangeInputFocus('rangeEnd'),focus到endDateInput，
             * 同时会走到datePicker/foundation.js中的handleSelectedChange方法，在这个方法里会根据focusRecordsRef来判断是否可以关闭panel。
             * 如果在setRangeInputFocus里同步修改了focusRecordsRef的状态为true，那在handleSelectedChange里会误判startDate和endDate都已经完成选择，
             * 导致endDate还没选就关闭了panel
             *
             * Fix the problem that the panel is closed immediately after switching to endDate after starting Date is selected.
             * The user opens the panel and after starting Date is selected, setRangeInputFocus ('rangeEnd') will be executed, focus to endDateInput,
             * At the same time, it will go to the handleSelectedChange method in datePicker/foundation.js, where it will be determined whether the panel can be closed according to focusRecordsRef.
             * If the status of focusRecordsRef is modified synchronously in setRangeInputFocus to true, then in handleSelectedChange it will be misjudged that both begDate and endDate have completed the selection,
             * resulting in the panel being closed before endDate is selected
             */

            set_timeout_default()(() => {
              this.focusRecordsRef.current.rangeStart = true;
            }, 0);

            break;

          case 'rangeEnd':
            const inputEndNode = get_default()(this, 'rangeInputEndRef.current');

            inputEndNode && inputEndNode.focus({
              preventScroll
            });
            /**
             * 解决选择完startDate，切换到endDate后panel被立马关闭的问题。
             * 用户打开panel，选了startDate后，会执行setRangeInputFocus('rangeEnd'),focus到endDateInput，
             * 同时会走到datePicker/foundation.js中的handleSelectedChange方法，在这个方法里会根据focusRecordsRef来判断是否可以关闭panel。
             * 如果在setRangeInputFocus里同步修改了focusRecordsRef的状态为true，那在handleSelectedChange里会误判startDate和endDate都已经完成选择，
             * 导致endDate还没选就关闭了panel
             *
             * Fix the problem that the panel is closed immediately after switching to endDate after starting Date is selected.
             * The user opens the panel and after starting Date is selected, setRangeInputFocus ('rangeEnd') will be executed, focus to endDateInput,
             * At the same time, it will go to the handleSelectedChange method in datePicker/foundation.js, where it will be determined whether the panel can be closed according to focusRecordsRef.
             * If the status of focusRecordsRef is modified synchronously in setRangeInputFocus to true, then in handleSelectedChange it will be misjudged that both begDate and endDate have completed the selection,
             * resulting in the panel being closed before endDate is selected
             */

            set_timeout_default()(() => {
              this.focusRecordsRef.current.rangeEnd = true;
            }, 0);

            break;

          default:
            return;
        }
      },
      couldPanelClosed: () => this.focusRecordsRef.current.rangeStart && this.focusRecordsRef.current.rangeEnd,
      isEventTarget: e => e && e.target === e.currentTarget,
      setInsetInputFocus: () => {
        const {
          preventScroll
        } = this.props;
        const {
          rangeInputFocus
        } = this.state;

        switch (rangeInputFocus) {
          case 'rangeEnd':
            if (document.activeElement !== this.rangeInputEndRef.current) {
              const inputEndNode = get_default()(this, 'rangeInputEndRef.current');

              inputEndNode && inputEndNode.focus({
                preventScroll
              });
            }

            break;

          case 'rangeStart':
          default:
            if (document.activeElement !== this.rangeInputStartRef.current) {
              const inputStartNode = get_default()(this, 'rangeInputStartRef.current');

              inputStartNode && inputStartNode.focus({
                preventScroll
              });
            }

            break;
        }
      },
      setTriggerDisabled: disabled => {
        this.setState({
          triggerDisabled: disabled
        });
      }
    });
  }

  isRangeType(type, triggerRender) {
    return /range/i.test(type) && !isFunction_default()(triggerRender);
  }

  componentDidUpdate(prevProps) {
    if (prevProps.value !== this.props.value) {
      this.foundation.initFromProps(assign_default()({}, this.props));
    } else if (this.props.timeZone !== prevProps.timeZone) {
      this.foundation.initFromProps({
        value: this.state.value,
        timeZone: this.props.timeZone,
        prevTimeZone: prevProps.timeZone
      });
    }

    if (prevProps.open !== this.props.open) {
      this.foundation.initPanelOpenStatus();

      if (!this.props.open) {
        this.foundation.clearRangeInputFocus();
      }
    }
  }

  componentDidMount() {
    this._mounted = true;
    super.componentDidMount();
  }

  componentWillUnmount() {
    this._mounted = false;
    super.componentWillUnmount();
  }

  renderMonthGrid(locale, localeCode, dateFnsLocale) {
    const {
      type,
      multiple,
      max,
      weekStartsOn,
      timePickerOpts,
      defaultPickerValue,
      format,
      hideDisabledOptions,
      disabledTimePicker,
      renderDate,
      renderFullDate,
      startDateOffset,
      endDateOffset,
      autoSwitchDate,
      density,
      syncSwitchMonth,
      onPanelChange,
      timeZone,
      triggerRender,
      insetInput,
      presetPosition
    } = this.props;
    const {
      cachedSelectedValue,
      motionEnd,
      rangeInputFocus
    } = this.state;
    const defaultValue = cachedSelectedValue;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(monthsGrid_MonthsGrid, {
      ref: this.monthGrid,
      locale: locale,
      localeCode: localeCode,
      dateFnsLocale: dateFnsLocale,
      weekStartsOn: weekStartsOn,
      type: type,
      multiple: multiple,
      max: max,
      format: format,
      disabledDate: this.disabledDisposeDate,
      hideDisabledOptions: hideDisabledOptions,
      disabledTimePicker: disabledTimePicker,
      disabledTime: this.disabledDisposeTime,
      defaultValue: defaultValue,
      defaultPickerValue: defaultPickerValue,
      timePickerOpts: timePickerOpts,
      isControlledComponent: !this.adapter.needConfirm() && this.isControlled('value'),
      onChange: this.handleSelectedChange,
      renderDate: renderDate,
      renderFullDate: renderFullDate,
      startDateOffset: startDateOffset,
      endDateOffset: endDateOffset,
      autoSwitchDate: autoSwitchDate,
      motionEnd: motionEnd,
      density: density,
      rangeInputFocus: rangeInputFocus,
      setRangeInputFocus: this.handleSetRangeFocus,
      isAnotherPanelHasOpened: this.isAnotherPanelHasOpened,
      syncSwitchMonth: syncSwitchMonth,
      onPanelChange: onPanelChange,
      timeZone: timeZone,
      focusRecordsRef: this.focusRecordsRef,
      triggerRender: triggerRender,
      insetInput: insetInput,
      presetPosition: presetPosition,
      renderQuickControls: this.renderQuickControls(),
      renderDateInput: this.renderDateInput()
    });
  }

  renderQuickControls() {
    const {
      presets,
      type,
      presetPosition,
      insetInput
    } = this.props;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(quickControl, {
      type: type,
      presets: presets,
      insetInput: insetInput,
      presetPosition: presetPosition,
      onPresetClick: (item, e) => this.foundation.handlePresetClick(item, e)
    });
  }

  renderDateInput() {
    const {
      insetInput,
      dateFnsLocale,
      density,
      type,
      format,
      rangeSeparator,
      defaultPickerValue
    } = this.props;
    const {
      insetInputValue,
      value
    } = this.state;
    const insetInputProps = {
      dateFnsLocale,
      format,
      insetInputValue,
      rangeSeparator,
      type,
      value: value,
      handleInsetDateFocus: this.handleInsetDateFocus,
      handleInsetTimeFocus: this.handleInsetTimeFocus,
      onInsetInputChange: this.handleInsetInputChange,
      rangeInputStartRef: this.rangeInputStartRef,
      rangeInputEndRef: this.rangeInputEndRef,
      density,
      defaultPickerValue
    };
    return insetInput ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dateInput_DateInput, assign_default()({}, insetInputProps, {
      insetInput: true
    })) : null;
  }

  renderInner(extraProps) {
    var _context3, _context4;

    const {
      type,
      format,
      multiple,
      disabled,
      showClear,
      insetLabel,
      insetLabelId,
      placeholder,
      validateStatus,
      inputStyle,
      prefix,
      locale,
      dateFnsLocale,
      triggerRender,
      size,
      inputReadOnly,
      rangeSeparator,
      insetInput,
      defaultPickerValue
    } = this.props;
    const {
      value,
      inputValue,
      rangeInputFocus,
      triggerDisabled
    } = this.state; // This class is not needed when triggerRender is function

    const isRangeType = this.isRangeType(type, triggerRender);
    const inputDisabled = disabled || insetInput && triggerDisabled;
    const inputCls = classnames_default()("".concat(datePicker_constants_cssClasses.PREFIX, "-input"), {
      ["".concat(datePicker_constants_cssClasses.PREFIX, "-range-input")]: isRangeType,
      [concat_default()(_context3 = "".concat(datePicker_constants_cssClasses.PREFIX, "-range-input-")).call(_context3, size)]: isRangeType && size,
      ["".concat(datePicker_constants_cssClasses.PREFIX, "-range-input-active")]: isRangeType && rangeInputFocus && !inputDisabled,
      ["".concat(datePicker_constants_cssClasses.PREFIX, "-range-input-disabled")]: isRangeType && inputDisabled,
      [concat_default()(_context4 = "".concat(datePicker_constants_cssClasses.PREFIX, "-range-input-")).call(_context4, validateStatus)]: isRangeType && validateStatus
    });
    const phText = placeholder || locale.placeholder[type]; // i18n
    // These values should be passed to triggerRender, do not delete any key if it is not necessary

    const props = assign_default()(assign_default()({}, extraProps), {
      placeholder: phText,
      disabled: inputDisabled,
      inputValue,
      value: value,
      defaultPickerValue,
      onChange: this.handleInputChange,
      onEnterPress: this.handleInputComplete,
      // TODO: remove in next major version
      block: true,
      inputStyle,
      showClear,
      insetLabel,
      insetLabelId,
      type,
      format,
      multiple,
      validateStatus,
      inputReadOnly: inputReadOnly || insetInput,
      // onClick: this.handleOpenPanel,
      onBlur: this.handleInputBlur,
      onFocus: this.handleInputFocus,
      onClear: this.handleInputClear,
      prefix,
      size,
      autofocus: this.state.autofocus,
      dateFnsLocale,
      rangeInputFocus,
      rangeSeparator,
      onRangeBlur: this.handleRangeInputBlur,
      onRangeClear: this.handleRangeInputClear,
      onRangeEndTabPress: this.handleRangeEndTabPress,
      rangeInputStartRef: insetInput ? null : this.rangeInputStartRef,
      rangeInputEndRef: insetInput ? null : this.rangeInputEndRef
    });

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      // tooltip will mount a11y props to children
      // eslint-disable-next-line jsx-a11y/role-has-required-aria-props
      role: "combobox",
      "aria-label": is_array_default()(value) && value.length ? "Change date" : "Choose date",
      "aria-disabled": disabled,
      onClick: this.handleTriggerWrapperClick,
      className: inputCls
    }, typeof triggerRender === 'function' ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(trigger_0, assign_default()({}, props, {
      triggerRender: triggerRender,
      componentName: "DatePicker",
      componentProps: assign_default()({}, this.props)
    })) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dateInput_DateInput, assign_default()({}, props)));
  }

  render() {
    const {
      style,
      className,
      prefixCls
    } = this.props;
    const outerProps = {
      style,
      className: classnames_default()(className, {
        [prefixCls]: true
      }),
      ref: this.setTriggerRef,
      'aria-invalid': this.props['aria-invalid'],
      'aria-errormessage': this.props['aria-errormessage'],
      'aria-labelledby': this.props['aria-labelledby'],
      'aria-describedby': this.props['aria-describedby'],
      'aria-required': this.props['aria-required']
    };
    const inner = this.renderInner();
    const wrappedInner = this.wrapPopover(inner);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({}, outerProps), wrappedInner);
  }

}
datePicker_DatePicker.contextType = configProvider_context;
datePicker_DatePicker.propTypes = {
  'aria-describedby': prop_types_default.a.string,
  'aria-errormessage': prop_types_default.a.string,
  'aria-invalid': prop_types_default.a.bool,
  'aria-labelledby': prop_types_default.a.string,
  'aria-required': prop_types_default.a.bool,
  type: prop_types_default.a.oneOf(datePicker_constants_strings.TYPE_SET),
  size: prop_types_default.a.oneOf(datePicker_constants_strings.SIZE_SET),
  density: prop_types_default.a.oneOf(datePicker_constants_strings.DENSITY_SET),
  defaultValue: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number, prop_types_default.a.object, prop_types_default.a.array]),
  value: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number, prop_types_default.a.object, prop_types_default.a.array]),
  defaultPickerValue: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number, prop_types_default.a.object, prop_types_default.a.array]),
  disabledTime: prop_types_default.a.func,
  disabledTimePicker: prop_types_default.a.bool,
  hideDisabledOptions: prop_types_default.a.bool,
  format: prop_types_default.a.string,
  disabled: prop_types_default.a.bool,
  multiple: prop_types_default.a.bool,
  max: prop_types_default.a.number,
  placeholder: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.array]),
  presets: prop_types_default.a.array,
  presetPosition: prop_types_default.a.oneOf(datePicker_constants_strings.PRESET_POSITION_SET),
  onChange: prop_types_default.a.func,
  onChangeWithDateFirst: prop_types_default.a.bool,
  weekStartsOn: prop_types_default.a.number,
  disabledDate: prop_types_default.a.func,
  timePickerOpts: prop_types_default.a.object,
  showClear: prop_types_default.a.bool,
  onOpenChange: prop_types_default.a.func,
  open: prop_types_default.a.bool,
  defaultOpen: prop_types_default.a.bool,
  motion: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.func, prop_types_default.a.object]),
  className: prop_types_default.a.string,
  prefixCls: prop_types_default.a.string,
  prefix: prop_types_default.a.node,
  insetLabel: prop_types_default.a.node,
  insetLabelId: prop_types_default.a.string,
  zIndex: prop_types_default.a.number,
  position: prop_types_default.a.oneOf(popover_constants_strings.POSITION_SET),
  getPopupContainer: prop_types_default.a.func,
  onCancel: prop_types_default.a.func,
  onConfirm: prop_types_default.a.func,
  needConfirm: prop_types_default.a.bool,
  inputStyle: prop_types_default.a.object,
  timeZone: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  triggerRender: prop_types_default.a.func,
  stopPropagation: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.string]),
  autoAdjustOverflow: prop_types_default.a.bool,
  onBlur: prop_types_default.a.func,
  onFocus: prop_types_default.a.func,
  onClear: prop_types_default.a.func,
  style: prop_types_default.a.object,
  autoFocus: prop_types_default.a.bool,
  inputReadOnly: prop_types_default.a.bool,
  validateStatus: prop_types_default.a.oneOf(datePicker_constants_strings.STATUS),
  renderDate: prop_types_default.a.func,
  renderFullDate: prop_types_default.a.func,
  spacing: prop_types_default.a.number,
  startDateOffset: prop_types_default.a.func,
  endDateOffset: prop_types_default.a.func,
  autoSwitchDate: prop_types_default.a.bool,
  dropdownClassName: prop_types_default.a.string,
  dropdownStyle: prop_types_default.a.object,
  topSlot: prop_types_default.a.node,
  bottomSlot: prop_types_default.a.node,
  dateFnsLocale: prop_types_default.a.object,
  // Support synchronous switching of months
  syncSwitchMonth: prop_types_default.a.bool,
  // Callback function for panel date switching
  onPanelChange: prop_types_default.a.func,
  rangeSeparator: prop_types_default.a.string,
  preventScroll: prop_types_default.a.bool
};
datePicker_DatePicker.defaultProps = {
  onChangeWithDateFirst: true,
  autoAdjustOverflow: true,
  stopPropagation: true,
  motion: true,
  prefixCls: datePicker_constants_cssClasses.PREFIX,
  presetPosition: 'bottom',
  // position: 'bottomLeft',
  zIndex: constants_numbers.DEFAULT_Z_INDEX,
  type: 'date',
  size: 'default',
  density: 'default',
  multiple: false,
  defaultOpen: false,
  disabledHours: noop_default.a,
  disabledMinutes: noop_default.a,
  disabledSeconds: noop_default.a,
  hideDisabledOptions: false,
  onBlur: noop_default.a,
  onFocus: noop_default.a,
  onClear: noop_default.a,
  onCancel: noop_default.a,
  onConfirm: noop_default.a,
  onChange: noop_default.a,
  onOpenChange: noop_default.a,
  onPanelChange: noop_default.a,
  onPresetClick: noop_default.a,
  weekStartsOn: datePicker_constants_numbers.WEEK_START_ON,
  disabledDate: stubFalse_default.a,
  disabledTime: stubFalse_default.a,
  inputReadOnly: false,
  spacing: datePicker_constants_numbers.SPACING,
  autoSwitchDate: true,
  syncSwitchMonth: false,
  rangeSeparator: datePicker_constants_strings.DEFAULT_SEPARATOR_RANGE,
  insetInput: false
};
// CONCATENATED MODULE: ./datePicker/index.tsx















/* harmony default export */ var datePicker_0 = (forwardStatics( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.forwardRef((props, ref) => {
  const propsObj = assign_default()({}, props);

  const {
    type,
    format,
    rangeSeparator
  } = propsObj;

  if (typeof format === 'string' && format) {
    if (!/[Hhms]+/.test(format)) {
      if (type === 'dateTime') {
        propsObj.type = 'date';
      } else if (type === 'dateTimeRange') {
        propsObj.type = 'dateRange';
      }
    }
  } // Add spaces at both ends to prevent conflicts with characters in the date when separating


  if (rangeSeparator && typeof rangeSeparator === 'string') {
    propsObj.rangeSeparator = " ".concat(trim_default()(rangeSeparator).call(rangeSeparator), " ");
  }

  if (propsObj.insetInput) {
    var _context;

    if (!propsObj.position) {
      propsObj.position = datePicker_constants_strings.POSITION_INLINE_INPUT;
    }
    /**
     * When insetInput is `true` and `position` includes `over`, use 1px `spacing` to solve the problem of border-radius leakage in the upper left corner
     *
     * @see https://user-images.githubusercontent.com/26477537/158817185-126a5f33-41f7-414a-8e36-8d1be2dda5cd.png
     */


    if (includes_default()(_context = propsObj.position).call(_context, 'Over') && !propsObj.spacing) {
      propsObj.spacing = datePicker_constants_numbers.SPACING_INSET_INPUT;
    }
  }

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(configProvider_context.Consumer, null, _ref => {
    let {
      timeZone
    } = _ref;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
      componentName: 'DatePicker'
    }, (locale, localeCode, dateFnsLocale) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(datePicker_DatePicker, assign_default()({
      timeZone: timeZone,
      localeCode: localeCode,
      locale: locale,
      dateFnsLocale: dateFnsLocale
    }, propsObj, {
      ref: ref
    })));
  });
}), datePicker_DatePicker));

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/isPlainObject.js
var isPlainObject = __webpack_require__("Kkar");
var isPlainObject_default = /*#__PURE__*/__webpack_require__.n(isPlainObject);

// CONCATENATED MODULE: ../semi-foundation/descriptions/constants.ts

const descriptions_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-descriptions")
};
const descriptions_constants_strings = {
  ALIGN_SET: ['left', 'justify', 'plain', 'center'],
  SIZE_SET: ['small', 'medium', 'large']
};
const descriptions_constants_numbers = {};

// EXTERNAL MODULE: ../semi-foundation/descriptions/descriptions.scss
var descriptions = __webpack_require__("uwM5");

// CONCATENATED MODULE: ./descriptions/descriptions-context.ts

const DescriptionsContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext(null);
/* harmony default export */ var descriptions_context = (DescriptionsContext);
// CONCATENATED MODULE: ./descriptions/item.tsx






const item_prefixCls = descriptions_constants_cssClasses.PREFIX;
const keyCls = "".concat(item_prefixCls, "-key");
const valCls = "".concat(item_prefixCls, "-value");
class descriptions_item_Item extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    var _context, _context2;

    const {
      itemKey,
      hidden,
      className,
      style,
      children
    } = this.props;
    const {
      align
    } = this.context;

    if (hidden) {
      return null;
    }

    const item = align === 'plain' ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("tr", {
      className: className,
      style: style
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("td", {
      className: "".concat(item_prefixCls, "-item")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: keyCls
    }, itemKey, ":"), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: valCls
    }, typeof children === 'function' ? children() : children))) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("tr", {
      className: className,
      style: style
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("th", {
      className: concat_default()(_context = "".concat(item_prefixCls, "-item ")).call(_context, item_prefixCls, "-item-th")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: keyCls
    }, itemKey)), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("td", {
      className: concat_default()(_context2 = "".concat(item_prefixCls, "-item ")).call(_context2, item_prefixCls, "-item-td")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: valCls
    }, typeof children === 'function' ? children() : children)));
    return item;
  }

}
descriptions_item_Item.propTypes = {
  itemKey: prop_types_default.a.node,
  hidden: prop_types_default.a.bool,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object
};
descriptions_item_Item.contextType = descriptions_context;
// CONCATENATED MODULE: ./descriptions/index.tsx












const descriptions_prefixCls = descriptions_constants_cssClasses.PREFIX;

class descriptions_Descriptions extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    var _context, _context2;

    const {
      align,
      row,
      size,
      className,
      style,
      children,
      data
    } = this.props;
    const classNames = classnames_default()(descriptions_prefixCls, className, {
      [concat_default()(_context = "".concat(descriptions_prefixCls, "-")).call(_context, align)]: !row,
      ["".concat(descriptions_prefixCls, "-double")]: row,
      [concat_default()(_context2 = "".concat(descriptions_prefixCls, "-double-")).call(_context2, size)]: row
    });
    const childrenList = data && data.length ? map_default()(data).call(data, (item, index) => isPlainObject_default()(item) ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(descriptions_item_Item, assign_default()({
      itemKey: item.key
    }, item, {
      key: index
    }), item.value) : null) : children;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: classNames,
      style: style
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("table", null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("tbody", null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(descriptions_context.Provider, {
      value: {
        align
      }
    }, childrenList))));
  }

}

descriptions_Descriptions.Item = descriptions_item_Item;
descriptions_Descriptions.contextType = descriptions_context;
descriptions_Descriptions.propTypes = {
  align: prop_types_default.a.oneOf(descriptions_constants_strings.ALIGN_SET),
  row: prop_types_default.a.bool,
  size: prop_types_default.a.oneOf(descriptions_constants_strings.SIZE_SET),
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  data: prop_types_default.a.arrayOf(prop_types_default.a.shape({
    key: prop_types_default.a.node,
    value: prop_types_default.a.oneOfType([prop_types_default.a.node, prop_types_default.a.func]),
    hidden: prop_types_default.a.bool,
    className: prop_types_default.a.string,
    style: prop_types_default.a.object
  }))
};
descriptions_Descriptions.defaultProps = {
  align: 'center',
  row: false,
  size: 'medium',
  data: []
};
/* harmony default export */ var descriptions_0 = (descriptions_Descriptions);
// CONCATENATED MODULE: ../semi-foundation/divider/constants.ts

const divider_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX)
};
const divider_constants_strings = {
  LAYOUT: ['vertical', 'horizontal']
};

// EXTERNAL MODULE: ../semi-foundation/divider/divider.scss
var divider = __webpack_require__("LDNj");

// CONCATENATED MODULE: ./divider/index.tsx





var divider_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};





const divider_prefixCls = divider_constants_cssClasses.PREFIX;

const Divider = props => {
  var _context;

  const {
    layout = 'horizontal',
    dashed,
    align = 'center',
    className,
    margin,
    style,
    children
  } = props,
        rest = divider_rest(props, ["layout", "dashed", "align", "className", "margin", "style", "children"]);

  const dividerClassNames = classnames_default()("".concat(divider_prefixCls, "-divider"), className, {
    ["".concat(divider_prefixCls, "-divider-horizontal")]: layout === 'horizontal',
    ["".concat(divider_prefixCls, "-divider-vertical")]: layout === 'vertical',
    ["".concat(divider_prefixCls, "-divider-dashed")]: !!dashed,
    ["".concat(divider_prefixCls, "-divider-with-text")]: children && layout === 'horizontal',
    [concat_default()(_context = "".concat(divider_prefixCls, "-divider-with-text-")).call(_context, align)]: children && layout === 'horizontal'
  });
  let overrideDefaultStyle = {};

  if (margin !== undefined) {
    if (layout === 'vertical') {
      overrideDefaultStyle = {
        'marginLeft': margin,
        'marginRight': margin
      };
    } else if (layout === 'horizontal') {
      overrideDefaultStyle = {
        'marginTop': margin,
        'marginBottom': margin
      };
    }
  }

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({}, rest, {
    className: dividerClassNames,
    style: assign_default()(assign_default()({}, overrideDefaultStyle), style)
  }), children && layout === 'horizontal' ? typeof children === 'string' ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
    className: "".concat(divider_prefixCls, "-divider_inner-text"),
    "x-semi-prop": "children"
  }, children) : children : null);
};

/* harmony default export */ var divider_0 = (Divider);
// CONCATENATED MODULE: ../semi-foundation/empty/constants.ts

const empty_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-empty")
};
const empty_constants_strings = {
  LAYOUT: ['vertical', 'horizontal']
};

// EXTERNAL MODULE: ../semi-foundation/empty/empty.scss
var empty_empty = __webpack_require__("UO4o");

// CONCATENATED MODULE: ./empty/index.tsx








const empty_prefixCls = empty_constants_cssClasses.PREFIX;
class empty_Empty extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.observe = mutationsList => {
      for (const mutation of mutationsList) {
        if (mutation.type === 'attributes' && mutation.attributeName === 'theme-mode') {
          this.updateMode();
        }
      }
    };

    this.updateMode = () => {
      const val = this.body.getAttribute('theme-mode');

      if (val !== this.state.mode) {
        this.setState({
          mode: val
        });
      }
    };

    this.state = {
      mode: null
    };
  }

  componentDidMount() {
    if (this.props.darkModeImage) {
      this.body = window.document.body;
      this.updateMode();
      const config = {
        attributes: true,
        childList: false,
        subtree: false
      };
      this.observer = new MutationObserver(this.observe);
      this.observer.observe(this.body, config);
    }
  }

  componentWillUnmount() {
    this.observer && this.observer.disconnect();
  }

  render() {
    var _context;

    const {
      className,
      image,
      description,
      style,
      title,
      imageStyle,
      children,
      layout,
      darkModeImage
    } = this.props;
    const alt = typeof description === 'string' ? description : 'empty';
    const imgSrc = this.state.mode === 'dark' && darkModeImage ? darkModeImage : image;
    let imageNode = null;

    if (typeof imgSrc === 'string') {
      imageNode = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("img", {
        alt: alt,
        src: imgSrc
      });
    } else if (imgSrc && 'id' in imgSrc) {
      imageNode = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("svg", {
        "aria-hidden": "true"
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("use", {
        xlinkHref: "#".concat(imgSrc.id)
      }));
    } else {
      imageNode = imgSrc;
    }

    const wrapperCls = classnames_default()(className, empty_prefixCls, {
      [concat_default()(_context = "".concat(empty_prefixCls, "-")).call(_context, layout)]: layout
    });
    const titleProps = imageNode ? {
      heading: 4
    } : {
      heading: 6,
      style: {
        fontWeight: 400
      }
    };
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: wrapperCls,
      style: style
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(empty_prefixCls, "-image"),
      style: imageStyle,
      "x-semi-prop": "image,darkModeImage"
    }, imageNode), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(empty_prefixCls, "-content")
    }, title ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(typography_0.Title, assign_default()({}, titleProps, {
      className: "".concat(empty_prefixCls, "-title"),
      "x-semi-prop": "title"
    }), title) : null, description ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(empty_prefixCls, "-description"),
      "x-semi-prop": "description"
    }, description) : null, children ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(empty_prefixCls, "-footer"),
      "x-semi-prop": "children"
    }, children) : null));
  }

}
empty_Empty.defaultProps = {
  layout: 'vertical'
};
// EXTERNAL MODULE: ../semi-foundation/modal/modal.scss
var modal_modal = __webpack_require__("CbLw");

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js/global-this.js
var global_this = __webpack_require__("re6r");
var global_this_default = /*#__PURE__*/__webpack_require__.n(global_this);

// CONCATENATED MODULE: ../semi-foundation/modal/constants.ts

const modal_constants_cssClasses = {
  DIALOG: "".concat(BASE_CLASS_PREFIX, "-modal")
};
const modal_constants_strings = {
  cancelKey: 'cancel',
  confirmKey: 'confirm',
  SIZE: ['small', 'medium', 'large', 'full-width'],
  directions: ['ltr', 'rtl']
};

// CONCATENATED MODULE: ../semi-foundation/modal/modalFoundation.ts


class modalFoundation_ModalFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));

    this.toggleHidden = (hidden, callback) => {
      this._adapter.toggleHidden(hidden, callback);
    };
  }

  destroy() {
    this.afterHide();
  }

  handleCancel(e) {
    this._adapter.notifyCancel(e);
  }

  handleOk(e) {
    this._adapter.notifyOk(e);
  }

  beforeShow() {
    this._adapter.disabledBodyScroll();
  }

  afterHide() {
    this._adapter.enabledBodyScroll();
  }

  afterClose() {
    this._adapter.notifyClose();
  }

}
// CONCATENATED MODULE: ../semi-foundation/modal/modalContentFoundation.ts



class modalContentFoundation_ModalContentFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()(assign_default()({}, modalContentFoundation_ModalContentFoundation.defaultAdapter), adapter));
  }

  destroy() {
    this.handleKeyDownEventListenerUnmount();
    this.modalDialogBlur();
    this.prevFocusElementReFocus();
  }

  handleDialogMouseDown() {
    this._adapter.notifyDialogMouseDown();
  }

  handleMaskMouseUp() {
    this._adapter.notifyDialogMouseUp();
  }

  handleKeyDown(e) {
    const {
      closeOnEsc
    } = this.getProps();

    if (closeOnEsc && e.keyCode === utils_keyCode.ESC) {
      e.stopPropagation();
      this.close(e);
      return;
    }
  }

  handleKeyDownEventListenerMount() {
    this._adapter.addKeyDownEventListener();
  }

  handleKeyDownEventListenerUnmount() {
    this._adapter.removeKeyDownEventListener();
  }

  getMouseState() {
    this._adapter.getMouseState();
  }

  handleMaskClick(e) {
    const {
      dialogMouseDown
    } = this.getStates();

    if (e.target === e.currentTarget && !dialogMouseDown) {
      this.close(e);
    }
  }

  close(e) {
    this._adapter.notifyClose(e);
  }

  modalDialogFocus() {
    this._adapter.modalDialogFocus();
  }

  modalDialogBlur() {
    this._adapter.modalDialogBlur();
  }

  prevFocusElementReFocus() {
    this._adapter.prevFocusElementReFocus();
  }

}
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/without.js
var without = __webpack_require__("uUTq");
var without_default = /*#__PURE__*/__webpack_require__.n(without);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/object/freeze.js
var freeze = __webpack_require__("p7I/");
var freeze_default = /*#__PURE__*/__webpack_require__.n(freeze);

// CONCATENATED MODULE: ../semi-foundation/utils/FocusHandle.ts






/*
* Usage:
*   // Eg1: Pass a dom as the tab tarp container.
*  const handle = new FocusTrapHandle(container, { enable: true });
*
*   // Eg2: The focus redirect listener will be triggered when user pressed tab whiling last focusable dom is focusing in trap dom, return false to cancel redirect and use the browser normal tab focus index.
*   handle.addFocusRedirectListener((e)=>{
*       return true; // return false to prevent redirect on target DOM;
*   });
*
*   // Eg3: Set it to false in order to disable tab tarp at any moment;
*   handle.enable = true;
*
*   // Eg4: Destroy instance when component is unmounting for saving resource;
*   handle.destroy();
*
* */
class FocusHandle_FocusTrapHandle {
  constructor(container, options) {
    var _a;

    this.addFocusRedirectListener = listener => {
      this.focusRedirectListenerList.push(listener);
      return () => this.removeFocusRedirectListener(listener);
    };

    this.removeFocusRedirectListener = listener => {
      this.focusRedirectListenerList = without_default()(this.focusRedirectListenerList, listener);
    };

    this.destroy = () => {
      var _a;

      (_a = this.container) === null || _a === void 0 ? void 0 : _a.removeEventListener('keydown', this.onKeyPress);
    }; // ---- private func ----


    this.shouldFocusRedirect = element => {
      if (!this.enable) {
        return false;
      }

      for (const listener of this.focusRedirectListenerList) {
        const should = listener(element);

        if (!should) {
          return false;
        }
      }

      return true;
    };

    this.focusElement = (element, event) => {
      const {
        preventScroll
      } = this.options;
      element === null || element === void 0 ? void 0 : element.focus({
        preventScroll
      });
      event.preventDefault(); // prevent browser default tab move behavior
    };

    this.onKeyPress = event => {
      if (event && event.key === 'Tab') {
        const focusableElements = FocusHandle_FocusTrapHandle.getFocusableElements(this.container);
        const focusableNum = focusableElements.length;

        if (focusableNum) {
          // Shift + Tab will move focus backward
          if (event.shiftKey) {
            this.handleContainerShiftTabKeyDown(focusableElements, event);
          } else {
            this.handleContainerTabKeyDown(focusableElements, event);
          }
        }
      }
    };

    this.handleContainerTabKeyDown = (focusableElements, event) => {
      const activeElement = FocusHandle_FocusTrapHandle.getActiveElement();
      const isLastCurrentFocus = focusableElements[focusableElements.length - 1] === activeElement;
      const redirectForcingElement = focusableElements[0];

      if (isLastCurrentFocus && this.shouldFocusRedirect(redirectForcingElement)) {
        this.focusElement(redirectForcingElement, event);
      }
    };

    this.handleContainerShiftTabKeyDown = (focusableElements, event) => {
      const activeElement = FocusHandle_FocusTrapHandle.getActiveElement();
      const isFirstCurrentFocus = focusableElements[0] === activeElement;
      const redirectForcingElement = focusableElements[focusableElements.length - 1];

      if (isFirstCurrentFocus && this.shouldFocusRedirect(redirectForcingElement)) {
        this.focusElement(redirectForcingElement, event);
      }
    };

    freeze_default()(options); // prevent user to change options after init;


    this.container = container;
    this.options = options;
    this.enable = (_a = options === null || options === void 0 ? void 0 : options.enable) !== null && _a !== void 0 ? _a : true;

    this.focusRedirectListenerList = (() => {
      if (options === null || options === void 0 ? void 0 : options.onFocusRedirectListener) {
        return is_array_default()(options.onFocusRedirectListener) ? [...options.onFocusRedirectListener] : [options.onFocusRedirectListener];
      } else {
        return [];
      }
    })();

    this.container.addEventListener('keydown', this.onKeyPress);
  }

  get enable() {
    return this._enable;
  }

  set enable(value) {
    this._enable = value;
  } // ---- static func ----


  static getFocusableElements(node) {
    if (!Object(isElement["a" /* default */])(node)) {
      return [];
    }

    const focusableSelectorsList = ["input:not([disabled]):not([tabindex='-1'])", "textarea:not([disabled]):not([tabindex='-1'])", "button:not([disabled]):not([tabindex='-1'])", "a[href]:not([tabindex='-1'])", "select:not([disabled]):not([tabindex='-1'])", "area[href]:not([tabindex='-1'])", "iframe:not([tabindex='-1'])", "object:not([tabindex='-1'])", "*[tabindex]:not([tabindex='-1'])", "*[contenteditable]:not([tabindex='-1'])"];
    const focusableSelectorsStr = focusableSelectorsList.join(','); // we are not filtered elements which are invisible

    return from_default()(node.querySelectorAll(focusableSelectorsStr));
  }

  static getActiveElement() {
    return document ? document.activeElement : null;
  }

}

/* harmony default export */ var FocusHandle = (FocusHandle_FocusTrapHandle);
// CONCATENATED MODULE: ./modal/ModalContent.tsx










var ModalContent_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable eqeqeq */









 // eslint-disable-next-line max-len




let uuid = 0;
class ModalContent_ModalContent extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.onKeyDown = e => {
      this.foundation.handleKeyDown(e);
    }; // Record when clicking the modal box


    this.onDialogMouseDown = () => {
      this.foundation.handleDialogMouseDown();
    }; // Cancel recording when clicking the modal box at the end


    this.onMaskMouseUp = () => {
      this.foundation.handleMaskMouseUp();
    }; // onMaskClick will judge dialogMouseDown before onMaskMouseUp updates dialogMouseDown


    this.onMaskClick = e => {
      this.foundation.handleMaskClick(e);
    };

    this.close = e => {
      this.foundation.close(e);
    };

    this.getMaskElement = () => {
      const props = ModalContent_rest(this.props, []);

      const {
        mask,
        maskClassName
      } = props;

      if (mask) {
        const className = classnames_default()("".concat(modal_constants_cssClasses.DIALOG, "-mask"), {// [`${cssClasses.DIALOG}-mask-hidden`]: !props.visible,
        });
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          key: "mask",
          className: classnames_default()(className, maskClassName),
          style: props.maskStyle
        });
      }

      return null;
    };

    this.renderCloseBtn = () => {
      const {
        closable,
        closeIcon
      } = this.props;
      let closer;

      if (closable) {
        const iconType = closeIcon || /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClose, {
          "x-semi-prop": "closeIcon"
        });
        closer = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(iconButton_0, {
          "aria-label": "close",
          className: "".concat(modal_constants_cssClasses.DIALOG, "-close"),
          key: "close-btn",
          onClick: this.close,
          type: "tertiary",
          icon: iconType,
          theme: "borderless",
          size: "small"
        });
      }

      return closer;
    };

    this.renderIcon = () => {
      const {
        icon
      } = this.props;
      return icon ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: "".concat(modal_constants_cssClasses.DIALOG, "-icon-wrapper"),
        "x-semi-prop": "icon"
      }, icon) : null;
    };

    this.renderHeader = () => {
      if ('header' in this.props) {
        return this.props.header;
      }

      const {
        title
      } = this.props;
      const closer = this.renderCloseBtn();
      const icon = this.renderIcon();
      return title === null || title === undefined ? null : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(modal_constants_cssClasses.DIALOG, "-header")
      }, icon, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(typography_0.Title, {
        heading: 5,
        className: "".concat(modal_constants_cssClasses.DIALOG, "-title"),
        id: "".concat(modal_constants_cssClasses.DIALOG, "-title"),
        "x-semi-prop": "title"
      }, title), closer);
    };

    this.renderBody = () => {
      const {
        bodyStyle,
        children,
        title
      } = this.props;
      const bodyCls = classnames_default()("".concat(modal_constants_cssClasses.DIALOG, "-body"), {
        ["".concat(modal_constants_cssClasses.DIALOG, "-withIcon")]: this.props.icon
      });
      const closer = this.renderCloseBtn();
      const icon = this.renderIcon();
      const hasHeader = title !== null && title !== undefined || 'header' in this.props;
      return hasHeader ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: bodyCls,
        id: "".concat(modal_constants_cssClasses.DIALOG, "-body"),
        style: bodyStyle,
        "x-semi-prop": "children"
      }, children) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(modal_constants_cssClasses.DIALOG, "-body-wrapper")
      }, icon, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: bodyCls,
        style: bodyStyle,
        "x-semi-prop": "children"
      }, children), closer);
    };

    this.getDialogElement = () => {
      var _context;

      const props = ModalContent_rest(this.props, []);

      const style = {};
      const digCls = classnames_default()("".concat(modal_constants_cssClasses.DIALOG), {
        ["".concat(modal_constants_cssClasses.DIALOG, "-centered")]: props.centered,
        [concat_default()(_context = "".concat(modal_constants_cssClasses.DIALOG, "-")).call(_context, props.size)]: props.size
      });

      if (props.width) {
        style.width = props.width;
      }

      if (props.height) {
        style.height = props.height;
      }

      if (props.isFullScreen) {
        style.width = '100%';
        style.height = '100%';
        style.margin = 'unset';
      }

      const body = this.renderBody();
      const header = this.renderHeader();
      const footer = props.footer ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(modal_constants_cssClasses.DIALOG, "-footer"),
        "x-semi-prop": "footer"
      }, props.footer) : null;
      const dialogElement =
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/no-static-element-interactions
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        key: "dialog-element",
        className: digCls,
        onMouseDown: this.onDialogMouseDown,
        style: assign_default()(assign_default()({}, props.style), style),
        id: this.dialogId
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "dialog",
        ref: this.modalDialogRef,
        tabIndex: -1,
        "aria-modal": "true",
        "aria-labelledby": "".concat(modal_constants_cssClasses.DIALOG, "-title"),
        "aria-describedby": "".concat(modal_constants_cssClasses.DIALOG, "-body"),
        onAnimationEnd: props.onAnimationEnd,
        className: classnames_default()(["".concat(modal_constants_cssClasses.DIALOG, "-content"), props.contentClassName, {
          ["".concat(modal_constants_cssClasses.DIALOG, "-content-fullScreen")]: props.isFullScreen
        }])
      }, header, body, footer)); // return props.visible ? dialogElement : null;

      return dialogElement;
    };

    this.state = {
      dialogMouseDown: false,
      prevFocusElement: FocusHandle.getActiveElement()
    };
    this.foundation = new modalContentFoundation_ModalContentFoundation(this.adapter);
    this.dialogId = "dialog-".concat(uuid++);
    this.modalDialogRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      notifyClose: e => {
        this.props.onClose(e);
      },
      notifyDialogMouseDown: () => {
        this.setState({
          dialogMouseDown: true
        });
      },
      notifyDialogMouseUp: () => {
        if (this.state.dialogMouseDown) {
          // Not setting setTimeout triggers close when modal external mouseUp
          this.timeoutId = set_timeout_default()(() => {
            this.setState({
              dialogMouseDown: false
            });
          }, 0);
        }
      },
      addKeyDownEventListener: () => {
        if (this.props.closeOnEsc) {
          var _context2;

          document.addEventListener('keydown', bind_default()(_context2 = this.foundation.handleKeyDown).call(_context2, this.foundation));
        }
      },
      removeKeyDownEventListener: () => {
        if (this.props.closeOnEsc) {
          var _context3;

          document.removeEventListener('keydown', bind_default()(_context3 = this.foundation.handleKeyDown).call(_context3, this.foundation));
        }
      },
      getMouseState: () => this.state.dialogMouseDown,
      modalDialogFocus: () => {
        var _a, _b, _c;

        const {
          preventScroll
        } = this.props;
        let activeElementInDialog;

        if (this.modalDialogRef) {
          const activeElement = FocusHandle.getActiveElement();
          activeElementInDialog = this.modalDialogRef.current.contains(activeElement);
          (_a = this.focusTrapHandle) === null || _a === void 0 ? void 0 : _a.destroy();
          this.focusTrapHandle = new FocusHandle(this.modalDialogRef.current, {
            preventScroll
          });
        }

        if (!activeElementInDialog) {
          (_c = (_b = this.modalDialogRef) === null || _b === void 0 ? void 0 : _b.current) === null || _c === void 0 ? void 0 : _c.focus({
            preventScroll
          });
        }
      },
      modalDialogBlur: () => {
        var _a, _b;

        (_a = this.modalDialogRef) === null || _a === void 0 ? void 0 : _a.current.blur();
        (_b = this.focusTrapHandle) === null || _b === void 0 ? void 0 : _b.destroy();
      },
      prevFocusElementReFocus: () => {
        const {
          prevFocusElement
        } = this.state;
        const {
          preventScroll
        } = this.props;

        const focus = get_default()(prevFocusElement, 'focus');

        isFunction_default()(focus) && prevFocusElement.focus({
          preventScroll
        });
      }
    });
  }

  componentDidMount() {
    this.foundation.handleKeyDownEventListenerMount();
    this.foundation.modalDialogFocus();
  }

  componentWillUnmount() {
    clearTimeout(this.timeoutId);
    this.foundation.destroy();
  }

  render() {
    const {
      maskClosable,
      className,
      getPopupContainer,
      maskFixed,
      getContainerContext
    } = this.props;
    const {
      direction
    } = this.context;
    const classList = classnames_default()(className, {
      ["".concat(modal_constants_cssClasses.DIALOG, "-popup")]: getPopupContainer && !maskFixed,
      ["".concat(modal_constants_cssClasses.DIALOG, "-fixed")]: maskFixed,
      ["".concat(modal_constants_cssClasses.DIALOG, "-rtl")]: direction === 'rtl'
    });
    const containerContext = getContainerContext();
    const elem = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: classList
    }, this.getMaskElement(), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "none",
      tabIndex: -1,
      className: "".concat(modal_constants_cssClasses.DIALOG, "-wrap"),
      onClick: maskClosable ? this.onMaskClick : null,
      onMouseUp: maskClosable ? this.onMaskMouseUp : null
    }, this.getDialogElement())); // eslint-disable-next-line max-len

    return containerContext && containerContext.Provider ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(containerContext.Provider, {
      value: containerContext.value
    }, elem) : elem;
  }

}
ModalContent_ModalContent.contextType = configProvider_context;
ModalContent_ModalContent.propTypes = {
  close: prop_types_default.a.func,
  getContainerContext: prop_types_default.a.func,
  contentClassName: prop_types_default.a.string,
  maskClassName: prop_types_default.a.string,
  onAnimationEnd: prop_types_default.a.func,
  preventScroll: prop_types_default.a.bool
};
ModalContent_ModalContent.defaultProps = {
  close: noop_default.a,
  getContainerContext: noop_default.a,
  contentClassName: '',
  maskClassName: ''
};
// CONCATENATED MODULE: ./modal/ConfirmModal.tsx





var ConfirmModal_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable react/destructuring-assignment */

/* eslint-disable eqeqeq */









const ConfirmModal = props => {
  var _context, _context2;

  const [visible, setVisible] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(true);
  const [confirmLoading, setConfirmLoading] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])();
  const [cancelLoading, setCancelLoading] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])();
  const {
    direction
  } = props;

  const {
    title,
    content,
    icon,
    type,
    onCancel,
    onOk,
    className
  } = props,
        rest = ConfirmModal_rest(props, ["title", "content", "icon", "type", "onCancel", "onOk", "className"]);

  const handleOk = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useCallback"])(e => {
    const res = onOk && onOk(e);

    if (res && res.then) {
      setConfirmLoading(true);
      res.then(function () {
        setVisible(false);
        setConfirmLoading(false);
      }, err => {
        setConfirmLoading(false);
      });
    } else {
      setVisible(false);
    }
  }, [onOk]);
  const handleCancel = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useCallback"])(e => {
    const res = onCancel && onCancel(e);

    if (res && res.then) {
      setCancelLoading(true);
      res.then(function () {
        setVisible(false);
        setCancelLoading(false);
      }, err => {
        setCancelLoading(false);
      });
    } else {
      setVisible(false);
    }
  }, [onCancel]);
  const confirmCls = "".concat(modal_constants_cssClasses.DIALOG, "-confirm");
  const wrapperCls = classnames_default()(className, confirmCls, {
    ["".concat(confirmCls, "-rtl")]: direction === 'rtl'
  });
  const typeCls = classnames_default()(concat_default()(_context = "".concat(modal_constants_cssClasses.DIALOG, "-")).call(_context, type));
  const iconNode = Object(_utils["e" /* isSemiIcon */])(icon) ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(icon, {
    className: concat_default()(_context2 = "".concat(confirmCls, "-icon ")).call(_context2, typeCls, "-icon"),
    size: 'extra-large'
  }) : icon;
  const titleNode = title == null ? null : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
    className: "".concat(confirmCls, "-title-text")
  }, title);
  const contentCls = classnames_default()("".concat(confirmCls, "-content"), {
    ["".concat(confirmCls, "-content-withIcon")]: props.icon
  });
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(modal_Modal, assign_default()({
    className: wrapperCls,
    title: titleNode,
    confirmLoading: confirmLoading,
    cancelLoading: cancelLoading,
    onOk: handleOk,
    onCancel: handleCancel,
    icon: iconNode,
    visible: visible
  }, rest), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: contentCls,
    "x-semi-prop": "content"
  }, content));
};

/* harmony default export */ var modal_ConfirmModal = (ConfirmModal);
// CONCATENATED MODULE: ./modal/confirm.tsx









function confirm_confirm(props) {
  // create a dom in adapter?
  const div = document.createElement('div');
  document.body.appendChild(div);

  let currentConfig = assign_default()({}, props);

  const destroy = () => {
    const unmountResult = external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default.a.unmountComponentAtNode(div);

    if (unmountResult && div.parentNode) {
      div.parentNode.removeChild(div);
    }

    for (let i = 0; i < destroyFns.length; i++) {
      const fn = destroyFns[i]; // eslint-disable-next-line @typescript-eslint/no-use-before-define

      if (fn === close) {
        splice_default()(destroyFns).call(destroyFns, i, 1);

        break;
      }
    }
  };

  const mergedMotion = typeof props.motion === 'undefined' || props.motion ? assign_default()(assign_default()({}, props.motion), {
    didLeave: function () {
      const didLeave = get_default()(props.motion, 'didLeave');

      if (typeof didLeave === 'function') {
        didLeave(...arguments);
      }

      destroy();
    }
  }) : false;

  function render(renderProps) {
    external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default.a.render( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(modal_ConfirmModal, assign_default()({}, renderProps, {
      motion: mergedMotion
    })), div);
  }

  function close() {
    currentConfig = assign_default()(assign_default()({}, currentConfig), {
      visible: false
    });
    render(currentConfig);
  }

  function update(newConfig) {
    currentConfig = assign_default()(assign_default()({}, currentConfig), newConfig);
    render(currentConfig);
  }

  render(currentConfig);
  destroyFns.push(close);
  return {
    destroy: close,
    update
  };
}
function withInfo(props) {
  return assign_default()({
    type: 'info',
    icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconInfoCircle, null)
  }, props);
}
function withSuccess(props) {
  return assign_default()({
    type: 'success',
    icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconTickCircle, null)
  }, props);
}
function withWarning(props) {
  return assign_default()({
    type: 'warning',
    icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconAlertTriangle, null)
  }, props);
}
function withError(props) {
  return assign_default()({
    type: 'error',
    icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconAlertCircle, null)
  }, props);
}
function withConfirm(props) {
  return assign_default()({
    type: 'confirm',
    icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconHelpCircle, null)
  }, props);
}
// CONCATENATED MODULE: ./modal/useModal/HookModal.tsx





var HookModal_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};




// eslint-disable-next-line max-len
const HookModal = (_a, ref) => {
  var {
    afterClose,
    config
  } = _a,
      props = HookModal_rest(_a, ["afterClose", "config"]);

  const [innerConfig, setInnerConfig] = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.useState(config);
  external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.useImperativeHandle(ref, () => ({
    destroy: () => {
      setInnerConfig(originConfig => assign_default()(assign_default()({}, originConfig), {
        visible: false
      }));
    },
    update: newConfig => {
      setInnerConfig(originConfig => assign_default()(assign_default()({}, originConfig), newConfig));
    }
  }));
  const {
    motion
  } = props;
  /* istanbul ignore next */

  const mergedMotion = typeof motion === 'undefined' || motion ? assign_default()(assign_default()({}, motion), {
    didLeave: function () {
      const didLeave = get_default()(props.motion, 'didLeave');

      if (typeof didLeave === 'function') {
        didLeave(...arguments);
      }

      afterClose();
    }
  }) : false;
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(modal_ConfirmModal, assign_default()({}, innerConfig, {
    // visible={!visible ? visible : undefined}
    motion: mergedMotion
  }));
};

/* harmony default export */ var useModal_HookModal = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.forwardRef(HookModal));
// CONCATENATED MODULE: ./modal/useModal/index.tsx




let useModal_uuid = 0;

function usePatchElement() {
  const [elements, setElements] = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.useState([]);

  function patchElement(element) {
    setElements(originElements => [...originElements, element]);
    return () => {
      setElements(originElements => filter_default()(originElements).call(originElements, ele => ele !== element));
    };
  }

  return [elements, patchElement];
}

function useModal() {
  const [elements, patchElement] = usePatchElement(); // eslint-disable-next-line max-len

  function getConfirmFunc(withFunc) {
    return function hookConfirm(config) {
      useModal_uuid += 1;
      const modalRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef(); // eslint-disable-next-line prefer-const

      let closeFunc;
      const modal = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(useModal_HookModal, {
        key: "semi-modal-".concat(useModal_uuid),
        config: withFunc(config),
        ref: modalRef,
        afterClose: () => {
          closeFunc();
        }
      });
      closeFunc = patchElement(modal);
      return {
        destroy: () => {
          if (modalRef.current) {
            modalRef.current.destroy();
          }
        },
        update: newConfig => {
          if (modalRef.current) {
            modalRef.current.update(newConfig);
          }
        }
      };
    };
  }

  return [{
    info: getConfirmFunc(withInfo),
    success: getConfirmFunc(withSuccess),
    error: getConfirmFunc(withError),
    warning: getConfirmFunc(withWarning),
    confirm: getConfirmFunc(withConfirm)
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, elements)];
}
// CONCATENATED MODULE: ./modal/Modal.tsx







var Modal_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable react/destructuring-assignment, prefer-const, @typescript-eslint/no-unused-vars */















const destroyFns = [];


class Modal_Modal extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.handleCancel = e => {
      this.foundation.handleCancel(e);
    };

    this.handleOk = e => {
      this.foundation.handleOk(e);
    };

    this.updateHiddenState = () => {
      const {
        visible
      } = this.props;
      const {
        hidden
      } = this.state;

      if (!visible && !hidden) {
        this.foundation.toggleHidden(true, () => this.foundation.afterClose());
      } else if (visible && this.state.hidden) {
        this.foundation.toggleHidden(false);
      }
    };

    this.renderFooter = () => {
      const {
        okText,
        okType,
        cancelText,
        confirmLoading,
        cancelLoading,
        hasCancel
      } = this.props;

      const getCancelButton = locale => {
        if (!hasCancel) {
          return null;
        } else {
          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(button_0, assign_default()({
            "aria-label": "cancel",
            onClick: this.handleCancel,
            loading: cancelLoading,
            type: "tertiary",
            autoFocus: true
          }, this.props.cancelButtonProps, {
            "x-semi-children-alias": "cancelText"
          }), cancelText || locale.cancel);
        }
      };

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
        componentName: "Modal"
      }, (locale, localeCode) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", null, getCancelButton(locale), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(button_0, assign_default()({
        "aria-label": "confirm",
        type: okType,
        theme: "solid",
        loading: confirmLoading,
        onClick: this.handleOk
      }, this.props.okButtonProps, {
        "x-semi-children-alias": "okText"
      }), okText || locale.confirm)));
    }; // getDialog = () => {
    //     const {
    //         footer,
    //         ...restProps
    //     } = this.props;
    //     const renderFooter = 'footer' in this.props ? footer : this.renderFooter();
    //     return <ModalContent {...restProps} footer={renderFooter} onClose={this.handleCancel}/>;
    // };


    this.renderDialog = () => {
      let _a = this.props,
          {
        footer,
        className,
        motion,
        maskStyle: maskStyleFromProps,
        keepDOM,
        style: styleFromProps,
        zIndex,
        getPopupContainer,
        visible
      } = _a,
          restProps = Modal_rest(_a, ["footer", "className", "motion", "maskStyle", "keepDOM", "style", "zIndex", "getPopupContainer", "visible"]);

      let style = styleFromProps;
      const maskStyle = maskStyleFromProps;
      const renderFooter = 'footer' in this.props ? footer : this.renderFooter();

      if (this.props.centered) {
        style = assign_default()({
          transform: 'translateY(-50%)',
          top: '50%'
        }, style);
      }

      let wrapperStyle = {
        zIndex
      };

      if (getPopupContainer) {
        wrapperStyle = {
          zIndex,
          position: 'static'
        };
      }

      const classList = classnames_default()(className, {
        ["".concat(modal_constants_cssClasses.DIALOG, "-displayNone")]: keepDOM && this.state.hidden && !visible
      });
      const contentClassName = motion ? classnames_default()({
        ["".concat(modal_constants_cssClasses.DIALOG, "-content-animate-hide")]: !visible,
        ["".concat(modal_constants_cssClasses.DIALOG, "-content-animate-show")]: visible
      }) : null;
      const maskClassName = motion ? classnames_default()({
        ["".concat(modal_constants_cssClasses.DIALOG, "-mask-animate-hide")]: !visible,
        ["".concat(modal_constants_cssClasses.DIALOG, "-mask-animate-show")]: visible
      }) : null;
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(_portal, {
        style: wrapperStyle,
        getPopupContainer: getPopupContainer
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(ModalContent_ModalContent, assign_default()({}, restProps, {
        isFullScreen: this.state.isFullScreen,
        contentClassName: contentClassName,
        maskClassName: maskClassName,
        className: classList,
        getPopupContainer: getPopupContainer,
        maskStyle: maskStyle,
        style: style,
        ref: this.modalRef,
        onAnimationEnd: () => {
          this.updateHiddenState();
        },
        footer: renderFooter,
        onClose: this.handleCancel
      })));
    };

    this.state = {
      hidden: !props.visible,
      isFullScreen: props.fullScreen
    };
    this.foundation = new modalFoundation_ModalFoundation(this.adapter);
    this.modalRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.bodyOverflow = '';
    this.scrollBarWidth = 0;
    this.originBodyWith = '100%';
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      getProps: () => this.props,
      disabledBodyScroll: () => {
        const {
          getPopupContainer
        } = this.props;
        this.bodyOverflow = document.body.style.overflow || '';

        if (!getPopupContainer && this.bodyOverflow !== 'hidden') {
          var _context;

          document.body.style.overflow = 'hidden';
          document.body.style.width = concat_default()(_context = "calc(".concat(this.originBodyWith || '100%', " - ")).call(_context, this.scrollBarWidth, "px)");
        }
      },
      enabledBodyScroll: () => {
        const {
          getPopupContainer
        } = this.props;

        if (!getPopupContainer && this.bodyOverflow !== 'hidden') {
          document.body.style.overflow = this.bodyOverflow;
          document.body.style.width = this.originBodyWith;
        }
      },
      notifyCancel: e => {
        this.props.onCancel(e);
      },
      notifyOk: e => {
        this.props.onOk(e);
      },
      notifyClose: () => {
        var _a, _b;

        (_b = (_a = this.props.motion) === null || _a === void 0 ? void 0 : _a.didLeave) === null || _b === void 0 ? void 0 : _b.call(_a);
        this.props.afterClose();
      },
      toggleHidden: (hidden, callback) => {
        if (hidden !== this.state.hidden) {
          this.setState({
            hidden
          }, callback || noop_default.a);
        }
      },
      notifyFullScreen: isFullScreen => {
        if (isFullScreen !== this.state.isFullScreen) {
          this.setState({
            isFullScreen
          });
        }
      }
    });
  }

  static getDerivedStateFromProps(props, prevState) {
    const newState = {};

    if (props.fullScreen !== prevState.isFullScreen) {
      newState.isFullScreen = props.fullScreen;
    }

    return newState;
  }

  static getScrollbarWidth() {
    if (global_this_default.a && Object.prototype.toString.call(global_this_default.a) === '[object Window]') {
      return window.innerWidth - document.documentElement.clientWidth;
    }

    return 0;
  }

  componentDidMount() {
    this.scrollBarWidth = Modal_Modal.getScrollbarWidth();
    this.originBodyWith = document.body.style.width;

    if (this.props.visible) {
      this.foundation.beforeShow();
      this._active = this._active || this.props.visible;
    }
  }

  componentDidUpdate(prevProps, prevState, snapshot) {
    // hide => show
    if (!prevProps.visible && this.props.visible) {
      this.foundation.beforeShow();
    } // show => hide


    if (prevProps.visible && !this.props.visible) {
      this.foundation.afterHide();
    }

    if (!this.props.motion) {
      this.updateHiddenState();
    }
  }

  componentWillUnmount() {
    if (this.props.visible) {
      this.foundation.destroy();
    }
  }

  render() {
    const {
      visible,
      keepDOM,
      lazyRender
    } = this.props;
    this._active = this._active || visible;
    const shouldRender = (visible || keepDOM) && (!lazyRender || this._active) || !this.state.hidden;

    if (shouldRender) {
      return this.renderDialog();
    }

    return null;
  }

}

Modal_Modal.propTypes = {
  mask: prop_types_default.a.bool,
  closable: prop_types_default.a.bool,
  centered: prop_types_default.a.bool,
  visible: prop_types_default.a.bool,
  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  height: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  confirmLoading: prop_types_default.a.bool,
  cancelLoading: prop_types_default.a.bool,
  okText: prop_types_default.a.string,
  okType: prop_types_default.a.string,
  cancelText: prop_types_default.a.string,
  maskClosable: prop_types_default.a.bool,
  onCancel: prop_types_default.a.func,
  onOk: prop_types_default.a.func,
  afterClose: prop_types_default.a.func,
  okButtonProps: prop_types_default.a.object,
  cancelButtonProps: prop_types_default.a.object,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  maskStyle: prop_types_default.a.object,
  bodyStyle: prop_types_default.a.object,
  zIndex: prop_types_default.a.number,
  title: prop_types_default.a.node,
  icon: prop_types_default.a.node,
  header: prop_types_default.a.node,
  footer: prop_types_default.a.node,
  hasCancel: prop_types_default.a.bool,
  motion: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.func, prop_types_default.a.object]),
  children: prop_types_default.a.node,
  getPopupContainer: prop_types_default.a.func,
  getContainerContext: prop_types_default.a.func,
  maskFixed: prop_types_default.a.bool,
  closeIcon: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node]),
  closeOnEsc: prop_types_default.a.bool,
  size: prop_types_default.a.oneOf(modal_constants_strings.SIZE),
  keepDOM: prop_types_default.a.bool,
  lazyRender: prop_types_default.a.bool,
  direction: prop_types_default.a.oneOf(modal_constants_strings.directions),
  fullScreen: prop_types_default.a.bool
};
Modal_Modal.defaultProps = {
  zIndex: 1000,
  motion: true,
  mask: true,
  centered: false,
  closable: true,
  visible: false,
  confirmLoading: false,
  cancelLoading: false,
  okType: 'primary',
  maskClosable: true,
  hasCancel: true,
  onCancel: noop_default.a,
  onOk: noop_default.a,
  afterClose: noop_default.a,
  maskFixed: false,
  closeOnEsc: true,
  size: 'small',
  keepDOM: false,
  lazyRender: true,
  fullScreen: false
};
Modal_Modal.useModal = useModal;

Modal_Modal.info = function (props) {
  return confirm_confirm(withInfo(props));
};

Modal_Modal.success = function (props) {
  return confirm_confirm(withSuccess(props));
};

Modal_Modal.error = function (props) {
  return confirm_confirm(withError(props));
};

Modal_Modal.warning = function (props) {
  return confirm_confirm(withWarning(props));
};

Modal_Modal.confirm = function (props) {
  return confirm_confirm(withConfirm(props));
};

Modal_Modal.destroyAll = function destroyAllFn() {
  while (destroyFns.length) {
    const close = destroyFns.pop();

    if (close) {
      close();
    }
  }
};

/* harmony default export */ var modal_Modal = (Modal_Modal);
// CONCATENATED MODULE: ./modal/index.tsx






/* harmony default export */ var modal_0 = (modal_Modal);
// CONCATENATED MODULE: ../semi-foundation/dropdown/constants.ts


const dropdown_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-dropdown"),
  SELECTED: "".concat(BASE_CLASS_PREFIX, "-dropdown-item-selected"),
  DISABLED: "".concat(BASE_CLASS_PREFIX, "-dropdown-item-disabled")
};
const dropdown_constants_strings = {
  POSITION_SET: tooltip_constants_strings.POSITION_SET,
  TRIGGER_SET: ['hover', 'focus', 'click', 'custom'],
  DEFAULT_LEAVE_DELAY: 100,
  ITEM_TYPE: ['primary', 'secondary', 'tertiary', 'warning', 'danger']
};
const dropdown_constants_numbers = {
  SPACING: 4,
  NESTED_SPACING: 2
};

// CONCATENATED MODULE: ../semi-foundation/dropdown/foundation.ts




class foundation_DropdownFoundation extends foundation {
  handleVisibleChange(visible) {
    this._adapter.setPopVisible(visible);

    this._adapter.notifyVisibleChange(visible);
  }

  getMenuItemNodes(target) {
    var _context;

    const id = target.attributes['data-popupid'].value;
    const menuWrapper = document.getElementById(id); // if has dropdown item, the item must wrapped by li

    return menuWrapper ? filter_default()(_context = from_default()(menuWrapper.getElementsByTagName('li'))).call(_context, item => item.ariaDisabled === "false") : null;
  }

  setFocusToFirstMenuItem(target) {
    const menuItemNodes = this.getMenuItemNodes(target);
    menuItemNodes && setFocusToFirstItem(menuItemNodes);
  }

  setFocusToLastMenuItem(target) {
    const menuItemNodes = this.getMenuItemNodes(target);
    menuItemNodes && setFocusToLastItem(menuItemNodes);
  }

  handleKeyDown(event) {
    switch (event.key) {
      case ' ':
      case 'Enter':
        event.target.click();
        handlePrevent(event);
        break;

      case 'ArrowDown':
        this.setFocusToFirstMenuItem(event.target);
        handlePrevent(event);
        break;

      case 'ArrowUp':
        this.setFocusToLastMenuItem(event.target);
        handlePrevent(event);
        break;

      default:
        break;
    }
  }

}
// CONCATENATED MODULE: ../semi-foundation/dropdown/menuFoundation.ts






class menuFoundation_DropdownMenuFoundation extends foundation {
  constructor() {
    super(...arguments);
    this.menuItemNodes = null;
    this.firstChars = [];
  } // if trigger is click, auto focus to the first menu item


  autoFocus(ulElement) {
    const trigger = this._adapter.getContext('trigger');

    if (trigger === 'click') {
      var _context;

      // find all non-disabled li under this menu and set focus to the first menu
      this.menuItemNodes = filter_default()(_context = [...ulElement.getElementsByTagName('li')]).call(_context, item => item.ariaDisabled !== "true");
      setFocusToFirstItem(this.menuItemNodes);
    }
  }

  handleEscape(menu) {
    const trigger = this._adapter.getContext('trigger');

    if (trigger === 'custom') {
      const menuButton = menu && getMenuButton(document.querySelectorAll("[data-popupid]"), menu.id);
      menuButton.focus();
    }
  }

  setFocusByFirstCharacter(curItem, char) {
    const index = findIndexByCharacter(this.menuItemNodes, curItem, this.firstChars, char);

    if (index >= 0) {
      setFocusToItem(this.menuItemNodes, this.menuItemNodes[index]);
    }
  }

  onMenuKeydown(event) {
    var _context5;

    const menu = getAncestorNodeByRole(event.target, 'tooltip');

    if (!this.menuItemNodes) {
      var _context2;

      this.menuItemNodes = filter_default()(_context2 = [...event.target.parentNode.getElementsByTagName('li')]).call(_context2, item => item.ariaDisabled !== "true");
    }

    if (this.firstChars.length === 0) {
      var _context3;

      for_each_default()(_context3 = this.menuItemNodes).call(_context3, item => {
        var _context4;

        var _a; // the menuItemNodes can be an component and not exit textContent


        this.firstChars.push((_a = trim_default()(_context4 = item.textContent).call(_context4)[0]) === null || _a === void 0 ? void 0 : _a.toLowerCase());
      });
    } // get the currently focused menu item


    const curItem = find_default()(_context5 = this.menuItemNodes).call(_context5, item => item.tabIndex === 0);

    switch (event.key) {
      case ' ':
      case 'Enter':
        event.target.click();
        handlePrevent(event);
        break;

      case 'Escape':
        this.handleEscape(menu);
        break;

      case 'ArrowUp':
        setFocusToPreviousMenuItem(this.menuItemNodes, curItem);
        handlePrevent(event);
        break;

      case 'ArrowDown':
        setFocusToNextMenuitem(this.menuItemNodes, curItem);
        handlePrevent(event);
        break;

      default:
        if (isPrintableCharacter(event.key)) {
          this.setFocusByFirstCharacter(curItem, event.key); // it can be an input on Dropdown, handlePrevent may affect the input of the component
          // handlePrevent(event); 
        }

        break;
    }
  }

}
// CONCATENATED MODULE: ./dropdown/context.ts

const DropdownContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext({
  level: 0
});
/* harmony default export */ var dropdown_context = (DropdownContext);
// CONCATENATED MODULE: ./dropdown/dropdownMenu.tsx




var dropdownMenu_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};








const dropdownMenu_prefixCls = dropdown_constants_cssClasses.PREFIX;

class dropdownMenu_DropdownMenu extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);
    this.menuRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.foundation = new menuFoundation_DropdownMenuFoundation(this.adapter);
  }

  get adapter() {
    return assign_default()({}, super.adapter);
  }

  componentDidMount() {
    this.foundation.autoFocus(this.menuRef.current);
  }

  render() {
    const _a = this.props,
          {
      children,
      className,
      style
    } = _a,
          rest = dropdownMenu_rest(_a, ["children", "className", "style"]);

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", assign_default()({
      role: "menu",
      "aria-orientation": "vertical",
      ref: this.menuRef
    }, rest, {
      className: classnames_default()("".concat(dropdownMenu_prefixCls, "-menu"), className),
      style: style,
      onKeyDown: e => this.foundation.onMenuKeydown(e)
    }), children);
  }

}

dropdownMenu_DropdownMenu.propTypes = {
  children: prop_types_default.a.node,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object
};
dropdownMenu_DropdownMenu.contextType = dropdown_context;
/* harmony default export */ var dropdownMenu = (dropdownMenu_DropdownMenu);
// CONCATENATED MODULE: ./dropdown/dropdownItem.tsx











const dropdownItem_prefixCls = dropdown_constants_cssClasses.PREFIX;

class dropdownItem_DropdownItem extends baseComponent_BaseComponent {
  render() {
    var _context;

    const {
      children,
      disabled,
      className,
      forwardRef,
      style,
      type,
      active,
      icon
    } = this.props;
    const {
      showTick
    } = this.context;
    const itemclass = classnames_default()(className, {
      ["".concat(dropdownItem_prefixCls, "-item")]: true,
      ["".concat(dropdownItem_prefixCls, "-item-disabled")]: disabled,
      ["".concat(dropdownItem_prefixCls, "-item-withTick")]: showTick,
      [concat_default()(_context = "".concat(dropdownItem_prefixCls, "-item-")).call(_context, type)]: type,
      ["".concat(dropdownItem_prefixCls, "-item-active")]: active
    });
    const events = {};

    if (!disabled) {
      var _context2;

      for_each_default()(_context2 = ['onClick', 'onMouseEnter', 'onMouseLeave', 'onContextMenu']).call(_context2, eventName => {
        events[eventName] = this.props[eventName];
      });
    }

    let tick = null;

    switch (true) {
      case showTick && active:
        tick = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconTick, null);
        break;

      case showTick && !active:
        tick = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconTick, {
          style: {
            color: 'transparent'
          }
        });
        break;

      default:
        tick = null;
        break;
    }

    let iconContent = null;

    if (icon) {
      iconContent = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(dropdownItem_prefixCls, "-item-icon")
      }, icon);
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", assign_default()({
      role: "menuitem",
      tabIndex: -1,
      "aria-disabled": disabled
    }, events, {
      ref: ref => forwardRef(ref),
      className: itemclass,
      style: style
    }), tick, iconContent, children);
  }

}

dropdownItem_DropdownItem.propTypes = {
  children: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node]),
  name: prop_types_default.a.string,
  disabled: prop_types_default.a.bool,
  selected: prop_types_default.a.bool,
  onClick: prop_types_default.a.func,
  onMouseEnter: prop_types_default.a.func,
  onMouseLeave: prop_types_default.a.func,
  onContextMenu: prop_types_default.a.func,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  forwardRef: prop_types_default.a.func,
  type: prop_types_default.a.oneOf(dropdown_constants_strings.ITEM_TYPE),
  active: prop_types_default.a.bool,
  icon: prop_types_default.a.node
};
dropdownItem_DropdownItem.contextType = dropdown_context;
dropdownItem_DropdownItem.defaultProps = {
  disabled: false,
  divided: false,
  selected: false,
  onMouseEnter: noop_default.a,
  onMouseLeave: noop_default.a,
  forwardRef: noop_default.a
};
/* harmony default export */ var dropdown_dropdownItem = (dropdownItem_DropdownItem);
// CONCATENATED MODULE: ./dropdown/dropdownDivider.tsx




const dropdownDivider_prefixCls = dropdown_constants_cssClasses.PREFIX;

const DropdownDivider = function () {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const {
    style,
    className
  } = props;
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: classnames_default()("".concat(dropdownDivider_prefixCls, "-divider"), className),
    style: style
  });
};

DropdownDivider.propTypes = {
  style: prop_types_default.a.object,
  className: prop_types_default.a.string
};
/* harmony default export */ var dropdownDivider = (DropdownDivider);
// CONCATENATED MODULE: ./dropdown/dropdownTitle.tsx





const dropdownTitle_prefixCls = dropdown_constants_cssClasses.PREFIX;

class dropdownTitle_DropdownTitle extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    const {
      className,
      style,
      children
    } = this.props;
    const {
      showTick
    } = this.context;
    const titleCls = classnames_default()({
      ["".concat(dropdownTitle_prefixCls, "-title")]: true,
      ["".concat(dropdownTitle_prefixCls, "-title-withTick")]: showTick
    }, className);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: titleCls,
      style: style
    }, children);
  }

}

dropdownTitle_DropdownTitle.propTypes = {
  children: prop_types_default.a.node,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object
};
dropdownTitle_DropdownTitle.contextType = dropdown_context;
/* harmony default export */ var dropdownTitle = (dropdownTitle_DropdownTitle);
// EXTERNAL MODULE: ../semi-foundation/dropdown/dropdown.scss
var dropdown = __webpack_require__("lSFK");

// CONCATENATED MODULE: ./dropdown/index.tsx








var dropdown_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};















const dropdown_positionSet = dropdown_constants_strings.POSITION_SET;
const dropdown_triggerSet = dropdown_constants_strings.TRIGGER_SET;





class dropdown_Dropdown extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.handleVisibleChange = visible => this.foundation.handleVisibleChange(visible);

    this.state = {
      popVisible: props.visible
    };
    this.foundation = new foundation_DropdownFoundation(this.adapter);
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      setPopVisible: popVisible => this.setState({
        popVisible
      }),
      notifyVisibleChange: visible => this.props.onVisibleChange(visible)
    });
  }

  renderContent() {
    const {
      render,
      menu,
      contentClassName,
      style,
      showTick,
      prefixCls,
      trigger
    } = this.props;
    const className = classnames_default()(prefixCls, contentClassName);
    const {
      level = 0
    } = this.context;
    const contextValue = {
      showTick,
      level: level + 1,
      trigger
    };
    let content = null;

    if ( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(render)) {
      content = render;
    } else if (is_array_default()(menu)) {
      content = this.renderMenu();
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dropdown_context.Provider, {
      value: contextValue
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: className,
      style: style
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-content"),
      "x-semi-prop": "render"
    }, content)));
  }

  renderMenu() {
    const {
      menu
    } = this.props;

    const content = map_default()(menu).call(menu, (m, index) => {
      switch (m.node) {
        case 'title':
          {
            const {
              name,
              node
            } = m,
                  rest = dropdown_rest(m, ["name", "node"]);

            return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dropdown_Dropdown.Title, assign_default()({}, rest, {
              key: node + name + index
            }), name);
          }

        case 'item':
          {
            const {
              node,
              name
            } = m,
                  rest = dropdown_rest(m, ["node", "name"]);

            return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dropdown_Dropdown.Item, assign_default()({}, rest, {
              key: node + name + index
            }), name);
          }

        case 'divider':
          {
            return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dropdown_Dropdown.Divider, {
              key: m.node + index
            });
          }

        default:
          return null;
      }
    });

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dropdown_Dropdown.Menu, null, content);
  }

  renderPopCard() {
    const {
      render,
      contentClassName,
      style,
      showTick,
      prefixCls
    } = this.props;
    const className = classnames_default()(prefixCls, contentClassName);
    const {
      level = 0
    } = this.context;
    const contextValue = {
      showTick,
      level: level + 1
    };
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dropdown_context.Provider, {
      value: contextValue
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: className,
      style: style
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-content")
    }, render)));
  }

  render() {
    const _a = this.props,
          {
      children,
      position,
      trigger,
      onVisibleChange,
      zIndex,
      className,
      motion,
      style,
      prefixCls
    } = _a,
          attr = dropdown_rest(_a, ["children", "position", "trigger", "onVisibleChange", "zIndex", "className", "motion", "style", "prefixCls"]);

    let {
      spacing
    } = this.props;
    const {
      level
    } = this.context;
    const {
      popVisible
    } = this.state;
    const pop = this.renderContent();

    if (level > 0) {
      spacing = typeof spacing === 'number' ? spacing : dropdown_constants_numbers.NESTED_SPACING;
    } else if (spacing === null || typeof spacing === 'undefined') {
      spacing = dropdown_constants_numbers.SPACING;
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tooltip_Tooltip, assign_default()({
      zIndex: zIndex,
      motion: motion,
      content: pop,
      className: className,
      prefixCls: prefixCls,
      spacing: spacing,
      position: position,
      trigger: trigger,
      onVisibleChange: this.handleVisibleChange,
      showArrow: false,
      returnFocusOnClose: true
    }, attr), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(children) ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(children, {
      className: classnames_default()(get_default()(children, 'props.className'), {
        ["".concat(prefixCls, "-showing")]: popVisible
      }),
      'aria-haspopup': true,
      'aria-expanded': popVisible,
      onKeyDown: e => this.foundation.handleKeyDown(e)
    }) : children);
  }

}

dropdown_Dropdown.Menu = dropdownMenu;
dropdown_Dropdown.Item = dropdown_dropdownItem;
dropdown_Dropdown.Divider = dropdownDivider;
dropdown_Dropdown.Title = dropdownTitle;
dropdown_Dropdown.contextType = dropdown_context;
dropdown_Dropdown.propTypes = {
  render: prop_types_default.a.node,
  children: prop_types_default.a.node,
  visible: prop_types_default.a.bool,
  position: prop_types_default.a.oneOf(dropdown_positionSet),
  getPopupContainer: prop_types_default.a.func,
  mouseEnterDelay: prop_types_default.a.number,
  mouseLeaveDelay: prop_types_default.a.number,
  trigger: prop_types_default.a.oneOf(dropdown_triggerSet),
  zIndex: prop_types_default.a.number,
  motion: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.func, prop_types_default.a.object]),
  className: prop_types_default.a.string,
  contentClassName: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.array]),
  style: prop_types_default.a.object,
  onVisibleChange: prop_types_default.a.func,
  rePosKey: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  showTick: prop_types_default.a.bool,
  prefixCls: prop_types_default.a.string,
  spacing: prop_types_default.a.number,
  menu: prop_types_default.a.array
};
dropdown_Dropdown.defaultProps = {
  onVisibleChange: noop_default.a,
  prefixCls: dropdown_constants_cssClasses.PREFIX,
  zIndex: numbers.DEFAULT_Z_INDEX,
  motion: true,
  trigger: 'hover',
  position: 'bottom',
  mouseLeaveDelay: dropdown_constants_strings.DEFAULT_LEAVE_DELAY,
  showTick: false,
  closeOnEsc: true,
  onEscKeyDown: noop_default.a
};
/* harmony default export */ var dropdown_0 = (dropdown_Dropdown);
// CONCATENATED MODULE: ../semi-foundation/grid/constants.ts

const grid_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX)
};

// EXTERNAL MODULE: ../semi-foundation/grid/grid.scss
var grid_grid = __webpack_require__("o2yd");

// CONCATENATED MODULE: ./grid/row.tsx










var row_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/**
 * Implementation reference from: https://github.com/ant-design/ant-design/blob/master/components/grid/row.tsx
 */








const responsiveArray = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];
const RowContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext(null);
const responsiveMap = {
  xs: '(max-width: 575px)',
  sm: '(min-width: 576px)',
  md: '(min-width: 768px)',
  lg: '(min-width: 992px)',
  xl: '(min-width: 1200px)',
  xxl: '(min-width: 1600px)'
};

class row_Row extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Component {
  constructor() {
    super(...arguments);
    this.state = {
      screens: {
        xs: true,
        sm: true,
        md: true,
        lg: true,
        xl: true,
        xxl: true
      }
    };
    this.unRegisters = [];
  }

  componentDidMount() {
    var _context;

    this.unRegisters = map_default()(_context = keys_default()(responsiveMap)).call(_context, screen => Object(_utils["f" /* registerMediaQuery */])(responsiveMap[screen], {
      match: () => {
        if (typeof this.props.gutter !== 'object') {
          return;
        }

        this.setState(prevState => ({
          screens: assign_default()(assign_default()({}, prevState.screens), {
            [screen]: true
          })
        }));
      },
      unmatch: () => {
        if (typeof this.props.gutter !== 'object') {
          return;
        }

        this.setState(prevState => ({
          screens: assign_default()(assign_default()({}, prevState.screens), {
            [screen]: false
          })
        }));
      }
    }));
  }

  componentWillUnmount() {
    var _context2;

    for_each_default()(_context2 = this.unRegisters).call(_context2, unRegister => unRegister());
  }

  getGutter() {
    const {
      gutter = 0
    } = this.props;
    const results = [0, 0];
    const normalizedGutter = is_array_default()(gutter) ? slice_default()(gutter).call(gutter, 0, 2) : [gutter, 0];

    for_each_default()(normalizedGutter).call(normalizedGutter, (g, index) => {
      if (typeof g === 'object') {
        for (let i = 0; i < responsiveArray.length; i++) {
          const breakpoint = responsiveArray[i];

          if (this.state.screens[breakpoint] && g[breakpoint] !== undefined) {
            results[index] = g[breakpoint];
            break;
          }
        }
      } else {
        results[index] = g || 0;
      }
    });

    return results;
  }

  render() {
    var _context3, _context4, _context5, _context6, _context7;

    const _a = this.props,
          {
      prefixCls,
      type,
      justify,
      align,
      className,
      style,
      children
    } = _a,
          others = row_rest(_a, ["prefixCls", "type", "justify", "align", "className", "style", "children"]);

    const gutters = this.getGutter();
    const prefix = "".concat(prefixCls, "-row");
    const classes = classnames_default()({
      [prefix]: type !== 'flex',
      [concat_default()(_context3 = "".concat(prefix, "-")).call(_context3, type)]: type,
      [concat_default()(_context4 = concat_default()(_context5 = "".concat(prefix, "-")).call(_context5, type, "-")).call(_context4, justify)]: type && justify,
      [concat_default()(_context6 = concat_default()(_context7 = "".concat(prefix, "-")).call(_context7, type, "-")).call(_context6, align)]: type && align
    }, className);

    const rowStyle = assign_default()(assign_default()(assign_default()({}, gutters[0] > 0 ? {
      marginLeft: gutters[0] / -2,
      marginRight: gutters[0] / -2
    } : {}), gutters[1] > 0 ? {
      marginTop: gutters[1] / -2,
      marginBottom: gutters[1] / -2
    } : {}), style);

    const otherProps = assign_default()({}, others);

    delete otherProps.gutter;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(RowContext.Provider, {
      value: {
        gutters
      }
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({}, otherProps, {
      className: classes,
      style: rowStyle,
      "x-semi-prop": "children"
    }), children));
  }

}

row_Row.propTypes = {
  type: prop_types_default.a.oneOf(['flex']),
  align: prop_types_default.a.oneOf(['top', 'middle', 'bottom']),
  justify: prop_types_default.a.oneOf(['start', 'end', 'center', 'space-around', 'space-between']),
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  children: prop_types_default.a.node,
  gutter: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.number, prop_types_default.a.array]),
  prefixCls: prop_types_default.a.string
};
row_Row.defaultProps = {
  prefixCls: grid_constants_cssClasses.PREFIX
};
row_Row.RowContext = {
  gutters: prop_types_default.a.any
};
/* harmony default export */ var grid_row = (row_Row);
// CONCATENATED MODULE: ./grid/col.tsx






var col_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/**
 * Implementation reference from: https://github.com/ant-design/ant-design/blob/master/components/grid/col.tsx
 */







const objectOrNumber = prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.number]);

class col_Col extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Component {
  render() {
    var _context, _context12, _context13, _context14, _context15, _context16;

    const {
      props
    } = this;

    const {
      prefixCls,
      span,
      order,
      offset,
      push,
      pull,
      className,
      children
    } = props,
          others = col_rest(props, ["prefixCls", "span", "order", "offset", "push", "pull", "className", "children"]);

    let sizeClassObj = {};
    const prefix = "".concat(prefixCls, "-col");

    for_each_default()(_context = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl']).call(_context, size => {
      var _context2, _context3, _context4, _context5, _context6, _context7, _context8, _context9, _context10, _context11;

      let sizeProps = {};

      if (typeof props[size] === 'number') {
        sizeProps.span = props[size];
      } else if (typeof props[size] === 'object') {
        sizeProps = props[size] || {};
      }

      delete others[size];
      sizeClassObj = assign_default()(assign_default()({}, sizeClassObj), {
        [concat_default()(_context2 = concat_default()(_context3 = "".concat(prefix, "-")).call(_context3, size, "-")).call(_context2, sizeProps.span)]: sizeProps.span !== undefined,
        [concat_default()(_context4 = concat_default()(_context5 = "".concat(prefix, "-")).call(_context5, size, "-order-")).call(_context4, sizeProps.order)]: sizeProps.order || sizeProps.order === 0,
        [concat_default()(_context6 = concat_default()(_context7 = "".concat(prefix, "-")).call(_context7, size, "-offset-")).call(_context6, sizeProps.offset)]: sizeProps.offset || sizeProps.offset === 0,
        [concat_default()(_context8 = concat_default()(_context9 = "".concat(prefix, "-")).call(_context9, size, "-push-")).call(_context8, sizeProps.push)]: sizeProps.push || sizeProps.push === 0,
        [concat_default()(_context10 = concat_default()(_context11 = "".concat(prefix, "-")).call(_context11, size, "-pull-")).call(_context10, sizeProps.pull)]: sizeProps.pull || sizeProps.pull === 0
      });
    });

    const classes = classnames_default()(prefix, {
      [concat_default()(_context12 = "".concat(prefix, "-")).call(_context12, span)]: span !== undefined,
      [concat_default()(_context13 = "".concat(prefix, "-order-")).call(_context13, order)]: order,
      [concat_default()(_context14 = "".concat(prefix, "-offset-")).call(_context14, offset)]: offset,
      [concat_default()(_context15 = "".concat(prefix, "-push-")).call(_context15, push)]: push,
      [concat_default()(_context16 = "".concat(prefix, "-pull-")).call(_context16, pull)]: pull
    }, className, sizeClassObj);
    let {
      style
    } = others;
    let gutters;

    try {
      gutters = this.context.gutters;
    } catch (error) {
      throw new Error('please make sure <Col> inside <Row>');
    }

    style = assign_default()(assign_default()(assign_default()({}, gutters[0] > 0 ? {
      paddingLeft: gutters[0] / 2,
      paddingRight: gutters[0] / 2
    } : {}), gutters[1] > 0 ? {
      paddingTop: gutters[1] / 2,
      paddingBottom: gutters[1] / 2
    } : {}), style);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({}, others, {
      style: style,
      className: classes,
      "x-semi-prop": "children"
    }), children);
  }

}

col_Col.contextType = RowContext;
col_Col.propTypes = {
  span: prop_types_default.a.number,
  order: prop_types_default.a.number,
  offset: prop_types_default.a.number,
  push: prop_types_default.a.number,
  pull: prop_types_default.a.number,
  className: prop_types_default.a.string,
  children: prop_types_default.a.node,
  xs: objectOrNumber,
  sm: objectOrNumber,
  md: objectOrNumber,
  lg: objectOrNumber,
  xl: objectOrNumber,
  xxl: objectOrNumber,
  prefixCls: prop_types_default.a.string
};
col_Col.defaultProps = {
  prefixCls: grid_constants_cssClasses.PREFIX
};
/* harmony default export */ var grid_col = (col_Col);
// CONCATENATED MODULE: ../semi-foundation/layout/constants.ts

const layout_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-layout")
};
const layout_constants_strings = {
  BREAKPOINT: ['xs', 'sm', 'md', 'lg', 'xl', 'xxl']
};

// EXTERNAL MODULE: ../semi-foundation/layout/layout.scss
var layout_layout = __webpack_require__("lff2");

// CONCATENATED MODULE: ./layout/layout-context.ts


const LayoutContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext({
  siderHook: {
    addSider: function_noop,
    removeSider: function_noop
  }
});
/* harmony default export */ var layout_context = (LayoutContext);
// CONCATENATED MODULE: ./layout/Sider.tsx









var Sider_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};








const Sider_responsiveMap = {
  xs: '(max-width: 575px)',
  sm: '(min-width: 576px)',
  md: '(min-width: 768px)',
  lg: '(min-width: 992px)',
  xl: '(min-width: 1200px)',
  xxl: '(min-width: 1600px)'
};

const generateId = (() => {
  let i = 0;
  return () => {
    var _context;

    i += 1;
    return concat_default()(_context = "".concat(layout_constants_cssClasses.PREFIX, "-sider-")).call(_context, i);
  };
})();

const bpt = layout_constants_strings.BREAKPOINT;

class Sider_Sider extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
  constructor(props) {
    super(props);
    this.unRegisters = [];
    this.uniqueId = '';
    this.uniqueId = generateId();
  }

  componentDidMount() {
    var _context2;

    const {
      breakpoint
    } = this.props;

    const matchBpt = filter_default()(_context2 = keys_default()(Sider_responsiveMap)).call(_context2, item => breakpoint && index_of_default()(breakpoint).call(breakpoint, item) !== -1);

    const unRegisters = map_default()(matchBpt).call(matchBpt, screen => Object(_utils["f" /* registerMediaQuery */])(Sider_responsiveMap[screen], {
      match: () => {
        this.responsiveHandler(screen, true);
      },
      unmatch: () => {
        this.responsiveHandler(screen, false);
      }
    }));

    this.unRegisters = unRegisters;

    if (this.context.siderHook) {
      this.context.siderHook.addSider(this.uniqueId);
    }
  }

  componentWillUnmount() {
    var _context3;

    for_each_default()(_context3 = this.unRegisters).call(_context3, unRegister => unRegister());

    if (this.context.siderHook) {
      this.context.siderHook.removeSider(this.uniqueId);
    }
  }

  responsiveHandler(screen, matches) {
    const {
      onBreakpoint
    } = this.props;

    if (onBreakpoint) {
      onBreakpoint(screen, matches);
    }
  }

  render() {
    const _a = this.props,
          {
      prefixCls,
      className,
      children,
      style
    } = _a,
          others = Sider_rest(_a, ["prefixCls", "className", "children", "style"]);

    const classString = classnames_default()(className, {
      ["".concat(prefixCls, "-sider")]: true
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("aside", assign_default()({
      className: classString,
      "aria-label": this.props['aria-label'],
      style: style
    }, getDataAttr(others)), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-sider-children")
    }, children));
  }

}

Sider_Sider.propTypes = {
  prefixCls: prop_types_default.a.string,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  breakpoint: prop_types_default.a.arrayOf(prop_types_default.a.oneOf(bpt)),
  onBreakpoint: prop_types_default.a.func,
  'aria-label': prop_types_default.a.string,
  role: prop_types_default.a.string
};
Sider_Sider.defaultProps = {
  prefixCls: layout_constants_cssClasses.PREFIX
};
Sider_Sider.contextType = layout_context;
/* harmony default export */ var layout_Sider = (Sider_Sider);
// CONCATENATED MODULE: ./layout/index.tsx






var layout_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};









const htmlTag = {
  Header: 'header',
  Footer: 'footer',
  Content: 'main',
  Layout: 'section'
};

function layout_generator(type) {
  const tagName = htmlTag[type];
  const typeName = type.toLowerCase();
  return BasicComponent => class Adapter extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
    render() {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(BasicComponent, assign_default()({
        role: this.props.role,
        "aria-label": this.props['aria-label'],
        type: typeName,
        tagName: tagName
      }, this.props));
    }

  };
}

class layout_Basic extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
  render() {
    var _context;

    const _a = this.props,
          {
      prefixCls,
      type,
      className,
      children,
      tagName
    } = _a,
          others = layout_rest(_a, ["prefixCls", "type", "className", "children", "tagName"]);

    const classString = classnames_default()(className, concat_default()(_context = "".concat(prefixCls, "-")).call(_context, type));
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tagName, assign_default()({
      className: classString
    }, others), children);
  }

}

layout_Basic.propTypes = {
  prefixCls: prop_types_default.a.string,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string
};
layout_Basic.defaultProps = {
  prefixCls: layout_constants_cssClasses.PREFIX
};
const Header = layout_generator('Header')(layout_Basic);
const layout_Footer = layout_generator('Footer')(layout_Basic);
const Content = layout_generator('Content')(layout_Basic);

class layout_Layout extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Component {
  constructor(props) {
    super(props);
    this.state = {
      siders: []
    };
  }

  getSiderHook() {
    return {
      addSider: id => {
        this.setState(state => ({
          siders: [...state.siders, id]
        }));
      },
      removeSider: id => {
        this.setState(state => {
          var _context2;

          return {
            siders: filter_default()(_context2 = state.siders).call(_context2, curr => curr !== id)
          };
        });
      }
    };
  }

  render() {
    const _a = this.props,
          {
      prefixCls,
      className,
      children,
      hasSider,
      tagName
    } = _a,
          others = layout_rest(_a, ["prefixCls", "className", "children", "hasSider", "tagName"]);

    const {
      siders
    } = this.state;
    const classString = classnames_default()(className, prefixCls, {
      ["".concat(prefixCls, "-has-sider")]: typeof hasSider === 'boolean' ? hasSider : siders.length > 0
    });
    const Tag = tagName;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(layout_context.Provider, {
      value: {
        siderHook: this.getSiderHook()
      }
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Tag, assign_default()({
      className: classString
    }, others), children));
  }

}

layout_Layout.propTypes = {
  prefixCls: prop_types_default.a.string,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string
};
layout_Layout.defaultProps = {
  prefixCls: layout_constants_cssClasses.PREFIX,
  tagName: 'section'
};
layout_Layout.Header = Header;
layout_Layout.Footer = layout_Footer;
layout_Layout.Content = Content;
layout_Layout.Sider = layout_Sider;

/* harmony default export */ var layout_0 = (layout_Layout);
// CONCATENATED MODULE: ../semi-foundation/list/constants.ts

const list_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-list")
};
const list_constants_strings = {
  SIZE: ['large', 'small', 'default'],
  LAYOUT: ['vertical', 'horizontal'],
  ALIGN: ['flex-start', 'flex-end', 'center', 'baseline', 'stretch']
};

// EXTERNAL MODULE: ../semi-foundation/list/list.scss
var list_list = __webpack_require__("fFnB");

// CONCATENATED MODULE: ./list/list-context.ts

const ListContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext(null);
/* harmony default export */ var list_context = (ListContext);
// CONCATENATED MODULE: ./list/item.tsx






var list_item_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};







const list_item_prefixCls = list_constants_cssClasses.PREFIX;
class item_ListItem extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  wrapWithGrid(content) {
    const {
      grid
    } = this.context;

    const {
      gutter,
      justify,
      type,
      align
    } = grid,
          rest = list_item_rest(grid, ["gutter", "justify", "type", "align"]);

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(grid_col, assign_default()({}, rest), content);
  }

  render() {
    var _context;

    const {
      header,
      main,
      className,
      style,
      extra,
      children,
      align,
      onClick,
      onRightClick,
      onMouseEnter,
      onMouseLeave
    } = this.props;
    const {
      onRightClick: contextOnRightClick,
      onClick: contextOnClick,
      grid: contextGrid
    } = this.context;
    const handleContextMenu = onRightClick ? onRightClick : contextOnRightClick;
    const handleClick = onClick ? onClick : contextOnClick;
    const itemCls = classnames_default()("".concat(list_item_prefixCls, "-item"), className);
    const bodyCls = classnames_default()("".concat(list_item_prefixCls, "-item-body"), {
      [concat_default()(_context = "".concat(list_item_prefixCls, "-item-body-")).call(_context, align)]: align
    });
    let body;

    if (header || main) {
      body = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: bodyCls
      }, header ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(list_item_prefixCls, "-item-body-header")
      }, header) : null, main ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(list_item_prefixCls, "-item-body-main")
      }, main) : null);
    }

    let content =
    /*#__PURE__*/
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions
    external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
      className: itemCls,
      style: style,
      onClick: handleClick,
      onContextMenu: handleContextMenu,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    }, body ? body : null, children, extra ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(list_item_prefixCls, "-item-extra")
    }, extra) : null);

    if (this.context && contextGrid) {
      content = this.wrapWithGrid(content);
    }

    return content;
  }

}
item_ListItem.contextType = list_context;
item_ListItem.propTypes = {
  extra: prop_types_default.a.node,
  header: prop_types_default.a.node,
  main: prop_types_default.a.node,
  align: prop_types_default.a.oneOf(list_constants_strings.ALIGN),
  className: prop_types_default.a.string,
  children: prop_types_default.a.node,
  style: prop_types_default.a.object,
  onClick: prop_types_default.a.func,
  onRightClick: prop_types_default.a.func,
  onMouseEnter: prop_types_default.a.func,
  onMouseLeave: prop_types_default.a.func
};
item_ListItem.defaultProps = {
  align: 'flex-start',
  onMouseEnter: noop_default.a,
  onMouseLeave: noop_default.a
};
// CONCATENATED MODULE: ./list/index.tsx

















const list_prefixCls = list_constants_cssClasses.PREFIX;

class list_List extends baseComponent_BaseComponent {
  constructor() {
    super(...arguments);

    this.renderEmpty = () => {
      const {
        emptyContent
      } = this.props;

      if (emptyContent) {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          className: "".concat(list_constants_cssClasses.PREFIX, "-empty"),
          "x-semi-prop": "emptyContent"
        }, emptyContent);
      } else {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
          componentName: "List"
        }, locale => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          className: "".concat(list_constants_cssClasses.PREFIX, "-empty")
        }, locale.emptyText));
      }
    };
  }

  wrapChildren(childrenList, children) {
    const {
      grid
    } = this.props;

    if (grid) {
      var _context;

      const rowProps = {};

      for_each_default()(_context = ['align', 'gutter', 'justify', 'type']).call(_context, key => {
        if (key in grid) {
          rowProps[key] = grid[key];
        }
      });

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(grid_row, assign_default()({
        type: "flex"
      }, rowProps), childrenList ? childrenList : null, children);
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
      className: "".concat(list_prefixCls, "-items")
    }, childrenList ? childrenList : null, children);
  }

  render() {
    var _context2;

    const {
      style,
      className,
      header,
      loading,
      onRightClick,
      onClick,
      footer,
      layout,
      grid,
      size,
      split,
      loadMore,
      bordered,
      dataSource,
      renderItem,
      children
    } = this.props;
    const wrapperCls = classnames_default()(list_prefixCls, className, {
      ["".concat(list_prefixCls, "-flex")]: layout === 'horizontal',
      [concat_default()(_context2 = "".concat(list_prefixCls, "-")).call(_context2, size)]: size,
      ["".concat(list_prefixCls, "-grid")]: grid,
      ["".concat(list_prefixCls, "-split")]: split,
      ["".concat(list_prefixCls, "-bordered")]: bordered
    });
    let childrenList;

    if (dataSource && dataSource.length) {
      var _context3;

      childrenList = [];
      const items = renderItem ? map_default()(dataSource).call(dataSource, (item, index) => renderItem(item, index)) : [];

      for_each_default()(_context3 = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children).call(_context3, items, (child, index) => {
        const itemKey = child.key || "list-item-".concat(index);
        childrenList.push( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(child, {
          key: itemKey
        }));
      });
    } else if (!children && !loading) {
      childrenList = this.renderEmpty();
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: wrapperCls,
      style: style
    }, header ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(list_constants_cssClasses.PREFIX, "-header"),
      "x-semi-prop": "header"
    }, header) : null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(list_context.Provider, {
      value: {
        grid,
        onRightClick,
        onClick
      }
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(spin_0, {
      spinning: loading,
      size: "large"
    }, this.wrapChildren(childrenList, children))), footer ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(list_constants_cssClasses.PREFIX, "-footer"),
      "x-semi-prop": "footer"
    }, footer) : null, loadMore ? loadMore : null);
  }

}

list_List.Item = item_ListItem;
list_List.propTypes = {
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  bordered: prop_types_default.a.bool,
  footer: prop_types_default.a.node,
  header: prop_types_default.a.node,
  layout: prop_types_default.a.oneOf(list_constants_strings.LAYOUT),
  size: prop_types_default.a.oneOf(list_constants_strings.SIZE),
  split: prop_types_default.a.bool,
  emptyContent: prop_types_default.a.node,
  dataSource: prop_types_default.a.array,
  renderItem: prop_types_default.a.func,
  grid: prop_types_default.a.object,
  loading: prop_types_default.a.bool,
  loadMore: prop_types_default.a.node,
  onRightClick: prop_types_default.a.func,
  onClick: prop_types_default.a.func
};
list_List.defaultProps = {
  bordered: false,
  split: true,
  loading: false,
  layout: 'vertical',
  size: 'default',
  onRightClick: noop_default.a,
  onClick: noop_default.a
};
/* harmony default export */ var list_0 = (list_List);
// CONCATENATED MODULE: ./icons/index.tsx


/* harmony default export */ var icons_0 = (lib_es);
// CONCATENATED MODULE: ../semi-foundation/form/constants.ts

const form_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-form")
};
const form_constants_strings = {
  LAYOUT: ['horizontal', 'vertical'],
  LABEL_POS: ['left', 'top', 'inset'],
  LABEL_ALIGN: ['left', 'right'],
  EXTRA_POS: ['middle', 'bottom']
};
const form_constants_numbers = {};

// CONCATENATED MODULE: ./form/label.tsx




const label_prefixCls = form_constants_cssClasses.PREFIX;
class label_Label extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    const {
      children,
      required,
      text,
      disabled,
      name,
      width,
      align,
      style,
      className,
      extra,
      id
    } = this.props;
    const labelCls = classnames_default()(className, {
      ["".concat(label_prefixCls, "-field-label")]: true,
      ["".concat(label_prefixCls, "-field-label-left")]: align === 'left',
      ["".concat(label_prefixCls, "-field-label-right")]: align === 'right',
      ["".concat(label_prefixCls, "-field-label-required")]: required,
      ["".concat(label_prefixCls, "-field-label-disabled")]: disabled,
      ["".concat(label_prefixCls, "-field-label-with-extra")]: extra
    });
    const labelStyle = style ? style : {};
    width ? labelStyle.width = width : null;
    const textContent = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(label_prefixCls, "-field-label-text"),
      "x-semi-prop": "label"
    }, typeof text !== 'undefined' ? text : children);
    const contentWithExtra = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, textContent, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(label_prefixCls, "-field-label-extra")
    }, extra));
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("label", {
      className: labelCls,
      htmlFor: name,
      style: labelStyle,
      id: id
    }, extra ? contentWithExtra : textContent);
  }

}
label_Label.defaultProps = {
  required: false,
  name: '',
  align: 'left',
  className: ''
};
label_Label.propTypes = {
  id: prop_types_default.a.string,
  children: prop_types_default.a.node,
  required: prop_types_default.a.bool,
  text: prop_types_default.a.node,
  disabled: prop_types_default.a.bool,
  name: prop_types_default.a.string,
  align: prop_types_default.a.string,
  width: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  extra: prop_types_default.a.node
};
// CONCATENATED MODULE: ./input/inputGroup.tsx









var inputGroup_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable max-len */









const inputGroup_prefixCls = input_constants_cssClasses.PREFIX;
const inputGroup_sizeSet = input_constants_strings.SIZE;
class inputGroup_inputGroup extends baseComponent_BaseComponent {
  renderGroupWithLabel(inner) {
    var _context;

    // eslint-disable-next-line no-unused-vars
    const _a = this.props,
          {
      size,
      className,
      label,
      labelPosition
    } = _a,
          rest = inputGroup_rest(_a, ["size", "className", "label", "labelPosition"]);

    const groupWrapperCls = classnames_default()({
      ["".concat(inputGroup_prefixCls, "-group-wrapper")]: true,
      ["".concat(inputGroup_prefixCls, "-group-wrapper-with-top-label")]: labelPosition === 'top',
      ["".concat(inputGroup_prefixCls, "-group-wrapper-with-left-label")]: labelPosition === 'left'
    });
    const groupCls = classnames_default()("".concat(inputGroup_prefixCls, "-group"), className, {
      [concat_default()(_context = "".concat(inputGroup_prefixCls, "-")).call(_context, size)]: size !== 'default'
    }); // const labelCls = cls(label.className, '');

    const defaultName = 'input-group';
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: groupWrapperCls
    }, label && label.text ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(label_Label, assign_default()({
      name: defaultName
    }, label)) : null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      role: "group",
      "aria-disabled": this.props.disabled,
      id: label && label.name || defaultName,
      className: groupCls,
      style: this.props.style,
      onFocus: this.props.onFocus,
      onBlur: this.props.onBlur
    }, inner));
  }

  render() {
    var _context2;

    const _a = this.props,
          {
      size,
      style,
      className,
      children,
      label,
      onBlur: groupOnBlur,
      onFocus: groupOnFocus,
      disabled: groupDisabled
    } = _a,
          rest = inputGroup_rest(_a, ["size", "style", "className", "children", "label", "onBlur", "onFocus", "disabled"]);

    const groupCls = classnames_default()("".concat(inputGroup_prefixCls, "-group"), {
      [concat_default()(_context2 = "".concat(inputGroup_prefixCls, "-")).call(_context2, size)]: size !== 'default'
    }, className);
    let inner;

    if (children) {
      var _context3;

      inner = map_default()(_context3 = is_array_default()(children) ? children : [children]).call(_context3, (item, index) => {
        if (item) {
          const {
            onBlur: itemOnBlur,
            onFocus: itemOnFocus,
            disabled: itemDisabled
          } = item.props;
          const onBlur = isFunction_default()(itemOnBlur) && get_default()(itemOnBlur, 'name') !== 'noop' ? itemOnBlur : groupOnBlur;
          const onFocus = isFunction_default()(itemOnFocus) && get_default()(itemOnFocus, 'name') !== 'noop' ? itemOnFocus : groupOnFocus;
          const disabled = typeof itemDisabled === 'boolean' ? itemDisabled : groupDisabled;
          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(item, assign_default()(assign_default()({
            key: index
          }, rest), {
            size,
            onBlur,
            onFocus,
            disabled
          }));
        }

        return null;
      });
    }

    if (label && label.text) {
      return this.renderGroupWithLabel(inner);
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      role: "group",
      "aria-label": "Input group",
      "aria-disabled": this.props.disabled,
      className: groupCls,
      style: style,
      onFocus: this.props.onFocus,
      onBlur: this.props.onBlur
    }, inner);
  }

}
inputGroup_inputGroup.propTypes = {
  className: prop_types_default.a.string,
  children: prop_types_default.a.node,
  size: prop_types_default.a.oneOf(inputGroup_sizeSet),
  style: prop_types_default.a.object,
  onBlur: prop_types_default.a.func,
  onFocus: prop_types_default.a.func,
  label: prop_types_default.a.object,
  labelPosition: prop_types_default.a.string
};
inputGroup_inputGroup.defaultProps = {
  size: 'default',
  className: '',
  onBlur: function_noop,
  onFocus: function_noop
};
// CONCATENATED MODULE: ../semi-foundation/input/util/calculateNodeHeight.ts


// Reference to https://github.com/andreypopp/react-textarea-autosize/
let hiddenTextarea = null;
const HIDDEN_TEXTAREA_STYLE = {
  'min-height': '0',
  'max-height': 'none',
  height: '0',
  visibility: 'hidden',
  overflow: 'hidden',
  position: 'absolute',
  'z-index': '-1000',
  top: '0',
  right: '0'
};

const forceHiddenStyles = node => {
  var _context;

  for_each_default()(_context = keys_default()(HIDDEN_TEXTAREA_STYLE)).call(_context, key => {
    node.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], 'important');
  });
};

const getContentHeight = (node, sizingData) => {
  const height = node.scrollHeight;

  if (sizingData.sizingStyle.boxSizing === 'border-box') {
    // border-box: add border, since height = content + padding + border
    return height + sizingData.borderSize;
  } // remove padding, since height = content


  return height - sizingData.paddingSize;
};

function calculateNodeHeight(sizingData, value) {
  var _context2;

  let minRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  let maxRows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;

  if (!hiddenTextarea) {
    hiddenTextarea = document.createElement('textarea');
    hiddenTextarea.setAttribute('tab-index', '-1');
    hiddenTextarea.setAttribute('aria-hidden', 'true');
    forceHiddenStyles(hiddenTextarea);
  }

  if (hiddenTextarea.parentNode === null) {
    document.body.appendChild(hiddenTextarea);
  }

  const {
    paddingSize,
    borderSize,
    sizingStyle
  } = sizingData;
  const {
    boxSizing
  } = sizingStyle;

  for_each_default()(_context2 = keys_default()(sizingStyle)).call(_context2, key => {
    hiddenTextarea.style[key] = sizingStyle[key];
  });

  forceHiddenStyles(hiddenTextarea);
  hiddenTextarea.value = value;
  let height = getContentHeight(hiddenTextarea, sizingData); // measure height of a textarea with a single row

  hiddenTextarea.value = 'x'; // calc single row need to remove padding and border to avoid duplicated calc

  const rowHeight = getContentHeight(hiddenTextarea, sizingData) - paddingSize - borderSize;
  let minHeight = rowHeight * minRows;

  if (boxSizing === 'border-box') {
    minHeight = minHeight + paddingSize + borderSize;
  }

  height = Math.max(minHeight, height);
  let maxHeight = rowHeight * maxRows;

  if (boxSizing === 'border-box') {
    maxHeight = maxHeight + paddingSize + borderSize;
  }

  height = Math.min(maxHeight, height);
  return height;
}
// CONCATENATED MODULE: ../semi-foundation/input/util/getSizingData.ts


const SIZING_STYLE = ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'boxSizing', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'lineHeight', 'paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop', // non-standard
'tabSize', 'textIndent', // non-standard
'textRendering', 'textTransform', 'width'];

const getSizingData = node => {
  const style = window.getComputedStyle(node);

  if (style === null) {
    return null;
  }

  const sizingStyle = pick_default()(style, SIZING_STYLE);

  const {
    boxSizing
  } = sizingStyle; // probably node is detached from DOM, can't read computed dimensions

  if (boxSizing === '') {
    return null;
  }

  const paddingSize = parse_float_default()(sizingStyle.paddingBottom) + parse_float_default()(sizingStyle.paddingTop);

  const borderSize = parse_float_default()(sizingStyle.borderBottomWidth) + parse_float_default()(sizingStyle.borderTopWidth);

  return {
    sizingStyle,
    paddingSize,
    borderSize
  };
};

/* harmony default export */ var util_getSizingData = (getSizingData);
// CONCATENATED MODULE: ../semi-foundation/input/textareaFoundation.ts









class textareaFoundation_TextAreaFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()(assign_default()({}, textareaFoundation_TextAreaFoundation.textAreaDefaultAdapter), adapter));

    this.resizeTextarea = cb => {
      const {
        height
      } = this.getStates();
      const {
        rows
      } = this.getProps();

      const node = this._adapter.getRef().current;

      const nodeSizingData = util_getSizingData(node);

      if (!nodeSizingData) {
        cb && cb();
        return;
      }

      const newHeight = calculateNodeHeight(nodeSizingData, node.value || node.placeholder || 'x', rows // maxRows,
      );

      if (height !== newHeight) {
        this._adapter.notifyHeightUpdate(newHeight);

        node.style.height = "".concat(newHeight, "px");
        return;
      }

      cb && cb();
    };
  }

  static get textAreaDefaultAdapter() {
    return {
      notifyChange: noop_default.a,
      setValue: noop_default.a,
      toggleFocusing: noop_default.a,
      toggleHovering: noop_default.a,
      notifyFocus: noop_default.a,
      notifyBlur: noop_default.a,
      notifyKeyDown: noop_default.a,
      notifyEnterPress: noop_default.a
    };
  }

  init() {
    this.setInitValue();
  } // eslint-disable-next-line


  destroy() {}

  setInitValue() {
    const {
      defaultValue,
      value
    } = this.getProps();
    let v = defaultValue;

    if (this._isControlledComponent()) {
      v = value;
    }

    this._adapter.setValue(v);
  }

  handleValueChange(v) {
    this._adapter.setValue(v);
  }

  handleChange(value, e) {
    const {
      maxLength,
      minLength,
      getValueLength
    } = this._adapter.getProps();

    let nextValue = value;

    if (maxLength && isFunction_default()(getValueLength)) {
      nextValue = this.handleVisibleMaxLength(value);
    }

    if (minLength && isFunction_default()(getValueLength)) {
      this.handleVisibleMinLength(nextValue);
    }

    if (this._isControlledComponent()) {
      this._adapter.notifyChange(nextValue, e);
    } else {
      this._adapter.setValue(nextValue);

      this._adapter.notifyChange(nextValue, e);
    }
  }
  /**
   * Modify minLength to trigger browser check for minimum length
   * Controlled mode is not checked
   * @param {String} value
   */


  handleVisibleMinLength(value) {
    const {
      minLength,
      getValueLength
    } = this._adapter.getProps();

    const {
      minLength: stateMinLength
    } = this._adapter.getStates();

    if (isNumber_default()(minLength) && minLength >= 0 && isFunction_default()(getValueLength) && isString_default()(value)) {
      const valueLength = getValueLength(value);

      if (valueLength < minLength) {
        const newMinLength = value.length + (minLength - valueLength);
        newMinLength !== stateMinLength && this._adapter.setMinLength(newMinLength);
      } else {
        stateMinLength !== minLength && this._adapter.setMinLength(minLength);
      }
    }
  }
  /**
   * Handle input emoji characters beyond maxLength
   * Controlled mode is not checked
   * @param {String} value
   */


  handleVisibleMaxLength(value) {
    const {
      maxLength,
      getValueLength
    } = this._adapter.getProps();

    if (isNumber_default()(maxLength) && maxLength >= 0 && isFunction_default()(getValueLength) && isString_default()(value)) {
      const valueLength = getValueLength(value);

      if (valueLength > maxLength) {
        // eslint-disable-next-line max-len
        console.warn('[Semi TextArea] The input character is truncated because the input length exceeds the maximum length limit');
        const truncatedValue = this.handleTruncateValue(value, maxLength);
        return truncatedValue;
      } else {
        return value;
      }
    }

    return undefined;
  }
  /**
   * Truncate textarea values based on maximum length
   * @param {String} value
   * @param {Number} maxLength
   * @returns {String}
   */


  handleTruncateValue(value, maxLength) {
    const {
      getValueLength
    } = this._adapter.getProps();

    if (isFunction_default()(getValueLength)) {
      let truncatedValue = '';

      for (let i = 1, len = value.length; i <= len; i++) {
        const currentValue = slice_default()(value).call(value, 0, i);

        if (getValueLength(currentValue) > maxLength) {
          return truncatedValue;
        } else {
          truncatedValue = currentValue;
        }
      }

      return truncatedValue;
    } else {
      return slice_default()(value).call(value, 0, maxLength);
    }
  }

  handleFocus(e) {
    const {
      value
    } = this.getStates();

    this._adapter.toggleFocusing(true);

    this._adapter.notifyFocus(value, e);
  }

  handleBlur(e) {
    const {
      value
    } = this.getStates();

    this._adapter.toggleFocusing(false);

    this._adapter.notifyBlur(value, e);
  }

  handleKeyDown(e) {
    this._adapter.notifyKeyDown(e);

    if (e.keyCode === 13) {
      this._adapter.notifyPressEnter(e);
    }
  }

  handleMouseEnter(e) {
    this._adapter.toggleHovering(true);
  }

  handleMouseLeave(e) {
    this._adapter.toggleHovering(false);
  }

  isAllowClear() {
    const {
      value,
      isFocus,
      isHover
    } = this._adapter.getStates();

    const {
      showClear,
      disabled,
      readonly
    } = this._adapter.getProps();

    const allowClear = value && showClear && !disabled && (isFocus || isHover) && !readonly;
    return allowClear;
  }

  handleClear(e) {
    const {
      isFocus
    } = this.getStates();

    if (this._isControlledComponent('value')) {
      this._adapter.setState({
        isFocus: false
      });
    } else {
      this._adapter.setState({
        value: '',
        isFocus: false
      });
    }

    if (isFocus) {
      this._adapter.notifyBlur('', e);
    }

    this._adapter.notifyChange('', e);

    this._adapter.notifyClear(e);

    this.stopPropagation(e);
  }

}
// EXTERNAL MODULE: ../semi-foundation/input/textarea.scss
var input_textarea = __webpack_require__("0fLf");

// CONCATENATED MODULE: ./input/textarea.tsx








var textarea_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable no-unused-vars */










const textarea_prefixCls = input_constants_cssClasses.PREFIX;

class textarea_TextArea extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.handleClear = e => {
      this.foundation.handleClear(e);
    };

    this.setRef = node => {
      this.libRef.current = node;
      const {
        forwardRef
      } = this.props;

      if (typeof forwardRef === 'function') {
        forwardRef(node);
      } else if (forwardRef && typeof forwardRef === 'object') {
        forwardRef.current = node;
      }
    };

    this.state = {
      value: '',
      isFocus: false,
      isHover: false,
      height: 0,
      minLength: props.minLength
    };
    this.focusing = false;
    this.foundation = new textareaFoundation_TextAreaFoundation(this.adapter);
    this.libRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this._resizeLock = false;
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      setValue: value => this.setState({
        value
      }, () => {
        if (this.props.autosize) {
          this.foundation.resizeTextarea();
        }
      }),
      getRef: () => this.libRef,
      toggleFocusing: focusing => this.setState({
        isFocus: focusing
      }),
      toggleHovering: hovering => this.setState({
        isHover: hovering
      }),
      notifyChange: (val, e) => {
        this.props.onChange(val, e);
      },
      notifyClear: e => this.props.onClear(e),
      notifyBlur: (val, e) => this.props.onBlur(e),
      notifyFocus: (val, e) => this.props.onFocus(e),
      notifyKeyDown: e => {
        this.props.onKeyDown(e);
      },
      notifyHeightUpdate: height => {
        this.setState({
          height
        });
        this.props.onResize({
          height
        });
      },
      notifyPressEnter: e => {
        this.props.onEnterPress && this.props.onEnterPress(e);
      },
      setMinLength: minLength => this.setState({
        minLength
      })
    });
  }

  static getDerivedStateFromProps(props, state) {
    const willUpdateStates = {};

    if (props.value !== state.cachedValue) {
      willUpdateStates.value = props.value;
      willUpdateStates.cachedValue = props.value;
    }

    return willUpdateStates;
  }

  componentDidMount() {
    this.foundation.init();
    this._resizeListener = null;

    if (this.props.autosize) {
      // Working around Firefox bug which runs resize listeners even when other JS is running at the same moment
      // causing competing rerenders (due to setState in the listener) in React.
      // More can be found here - facebook/react#6324
      // // Reference to https://github.com/andreypopp/react-textarea-autosize/
      this._resizeListener = () => {
        if (this._resizeLock) {
          return;
        }

        this._resizeLock = true;
        this.foundation.resizeTextarea(() => {
          this._resizeLock = false;
        });
      };

      window.addEventListener('resize', this._resizeListener);
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
    this._resizeListener && window.removeEventListener('resize', this._resizeListener);
  }

  componentDidUpdate(prevProps, prevState) {
    if (this.props.value !== prevProps.value && this.props.autosize) {
      this.foundation.resizeTextarea();
    }
  }

  renderClearBtn() {
    const {
      showClear
    } = this.props;
    const displayClearBtn = this.foundation.isAllowClear();
    const clearCls = classnames_default()("".concat(textarea_prefixCls, "-clearbtn"), {
      ["".concat(textarea_prefixCls, "-clearbtn-hidden")]: !displayClearBtn
    });

    if (showClear) {
      return (
        /*#__PURE__*/
        // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
        external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          className: clearCls,
          onClick: this.handleClear
        }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClear, null))
      );
    }

    return null;
  }

  renderCounter() {
    let counter, current, total, countCls;
    const {
      showCounter,
      maxCount,
      getValueLength
    } = this.props;

    if (showCounter || maxCount) {
      const {
        value
      } = this.state; // eslint-disable-next-line no-nested-ternary

      current = value ? isFunction_default()(getValueLength) ? getValueLength(value) : value.length : 0;
      total = maxCount || null;
      countCls = classnames_default()("".concat(textarea_prefixCls, "-textarea-counter"), {
        ["".concat(textarea_prefixCls, "-textarea-counter-exceed")]: current > total
      });
      counter = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: countCls
      }, current, total ? '/' : null, total);
    } else {
      counter = null;
    }

    return counter;
  }

  render() {
    var _context;

    const _a = this.props,
          {
      autosize,
      placeholder,
      onEnterPress,
      onResize,
      // resize,
      disabled,
      readonly,
      className,
      showCounter,
      validateStatus,
      maxCount,
      defaultValue,
      style,
      forwardRef,
      getValueLength,
      maxLength,
      minLength,
      showClear
    } = _a,
          rest = textarea_rest(_a, ["autosize", "placeholder", "onEnterPress", "onResize", "disabled", "readonly", "className", "showCounter", "validateStatus", "maxCount", "defaultValue", "style", "forwardRef", "getValueLength", "maxLength", "minLength", "showClear"]);

    const {
      isFocus,
      value,
      minLength: stateMinLength
    } = this.state;
    const wrapperCls = classnames_default()(className, "".concat(textarea_prefixCls, "-textarea-wrapper"), {
      ["".concat(textarea_prefixCls, "-textarea-wrapper-disabled")]: disabled,
      ["".concat(textarea_prefixCls, "-textarea-wrapper-readonly")]: readonly,
      [concat_default()(_context = "".concat(textarea_prefixCls, "-textarea-wrapper-")).call(_context, validateStatus)]: Boolean(validateStatus),
      ["".concat(textarea_prefixCls, "-textarea-wrapper-focus")]: isFocus // [`${prefixCls}-textarea-wrapper-resize`]: !autosize && resize,

    }); // const ref = this.props.forwardRef || this.textAreaRef;

    const itemCls = classnames_default()("".concat(textarea_prefixCls, "-textarea"), {
      ["".concat(textarea_prefixCls, "-textarea-disabled")]: disabled,
      ["".concat(textarea_prefixCls, "-textarea-readonly")]: readonly,
      ["".concat(textarea_prefixCls, "-textarea-autosize")]: autosize,
      ["".concat(textarea_prefixCls, "-textarea-showClear")]: showClear
    });

    const itemProps = assign_default()(assign_default()({}, omit_default()(rest, 'insetLabel', 'insetLabelId', 'getValueLength', 'onClear', 'showClear')), {
      className: itemCls,
      disabled,
      readOnly: readonly,
      placeholder: !placeholder ? null : placeholder,
      onChange: e => this.foundation.handleChange(e.target.value, e),
      onFocus: e => this.foundation.handleFocus(e),
      onBlur: e => this.foundation.handleBlur(e.nativeEvent),
      onKeyDown: e => this.foundation.handleKeyDown(e),
      value: value === null || value === undefined ? '' : value
    });

    if (!isFunction_default()(getValueLength)) {
      itemProps.maxLength = maxLength;
    }

    if (stateMinLength) {
      itemProps.minLength = stateMinLength;
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: wrapperCls,
      style: style,
      onMouseEnter: e => this.foundation.handleMouseEnter(e),
      onMouseLeave: e => this.foundation.handleMouseLeave(e)
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("textarea", assign_default()({}, itemProps, {
      ref: this.setRef
    })), this.renderClearBtn(), this.renderCounter());
  }

}

textarea_TextArea.propTypes = {
  autosize: prop_types_default.a.bool,
  placeholder: prop_types_default.a.string,
  value: prop_types_default.a.string,
  rows: prop_types_default.a.number,
  cols: prop_types_default.a.number,
  maxCount: prop_types_default.a.number,
  onEnterPress: prop_types_default.a.func,
  validateStatus: prop_types_default.a.string,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  showClear: prop_types_default.a.bool,
  onClear: prop_types_default.a.func,
  onResize: prop_types_default.a.func,
  getValueLength: prop_types_default.a.func // TODO
  // resize: PropTypes.bool,

};
textarea_TextArea.defaultProps = {
  autosize: false,
  rows: 4,
  cols: 20,
  showCounter: false,
  showClear: false,
  onEnterPress: noop_default.a,
  onChange: noop_default.a,
  onBlur: noop_default.a,
  onFocus: noop_default.a,
  onKeyDown: noop_default.a,
  onResize: noop_default.a,
  onClear: noop_default.a // resize: false,

};
const ForwardTextarea = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.forwardRef((props, ref) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(textarea_TextArea, assign_default()({}, props, {
  forwardRef: ref
})));
/* harmony default export */ var input_textarea_0 = (ForwardTextarea);
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/isNaN.js
var lodash_isNaN = __webpack_require__("DlqW");
var isNaN_default = /*#__PURE__*/__webpack_require__.n(lodash_isNaN);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/instance/last-index-of.js
var last_index_of = __webpack_require__("RFfO");
var last_index_of_default = /*#__PURE__*/__webpack_require__.n(last_index_of);

// CONCATENATED MODULE: ../semi-foundation/utils/isBothNaN.ts
/**
 * Determine whether both values are NaN
 * @param {*} a
 * @param {*} b
 * @returns {Boolean}
 */
const isBothNaN = (a, b) => {
  const {
    isNaN
  } = Number;
  return isNaN(a) && isNaN(b);
};

/* harmony default export */ var utils_isBothNaN = (isBothNaN);
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/toString.js
var lodash_toString = __webpack_require__("dw5g");
var toString_default = /*#__PURE__*/__webpack_require__.n(lodash_toString);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/toNumber.js
var toNumber = __webpack_require__("nvU9");
var toNumber_default = /*#__PURE__*/__webpack_require__.n(toNumber);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/number/is-nan.js
var is_nan = __webpack_require__("gobS");
var is_nan_default = /*#__PURE__*/__webpack_require__.n(is_nan);

// CONCATENATED MODULE: ../semi-foundation/inputNumber/constants.ts



const inputNumber_constants_cssClasses = assign_default()({}, input_constants_cssClasses);

const inputNumber_constants_numbers = assign_default()(assign_default()({}, input_constants_numbers), {
  DEFAULT_STEP: 1,
  DEFAULT_SHIFT_STEP: 10,
  DEFAULT_PRESS_TIMEOUT: 250,
  DEFAULT_PRESS_INTERVAL: 0,
  MOUSE_BUTTON_LEFT: 0
});

const inputNumber_constants_strings = assign_default()({}, input_constants_strings);


// CONCATENATED MODULE: ../semi-foundation/utils/number.ts
/**
 * Solve the problem of js addition accuracy
 * e.g.
 *  0.1 + 0.2 => 0.30000000000000004
 *  plus(0.1, 0.2) => 0.3
 * @param {Number} num1
 * @param {Number} num2
 */
function plus(num1, num2) {
  const num1Digits = (num1.toString().split('.')[1] || '').length;
  const num2Digits = (num2.toString().split('.')[1] || '').length;
  const baseNum = Math.pow(10, Math.max(num1Digits, num2Digits));
  return (num1 * baseNum + num2 * baseNum) / baseNum;
}
function minus(num1, num2) {
  return plus(num1, -num2);
}
// CONCATENATED MODULE: ../semi-foundation/inputNumber/foundation.ts












/* eslint-disable max-len */

/* eslint-disable no-param-reassign */

/* eslint-disable eqeqeq */





class foundation_InputNumberFoundation extends foundation {
  init() {
    this._setInitValue();
  }

  destroy() {
    this._unregisterInterval();

    this._unregisterTimer();

    this._adapter.unregisterGlobalEvent('mouseup');
  }

  isControlled() {
    return this._isControlledComponent('value');
  }

  _doInput() {
    let v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let updateCb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    let notifyVal = v;
    let number = v;
    let isValidNumber = true;
    const isControlled = this.isControlled(); // console.log(v);

    if (typeof v !== 'number') {
      number = this.doParse(v, false);
      isValidNumber = !isNaN(number);
    }

    if (isValidNumber) {
      notifyVal = number;

      if (!isControlled) {
        this._adapter.setNumber(number);
      }
    }

    if (!isControlled) {
      this._adapter.setValue(v, updateCb);
    }

    if (this.getProp('keepFocus')) {
      this._adapter.setFocusing(true, () => {
        this._adapter.setClickUpOrDown(true);
      });
    }

    this.notifyChange(notifyVal, event);
  }

  _registerInterval(cb) {
    const pressInterval = this.getProp('pressInterval') || inputNumber_constants_numbers.DEFAULT_PRESS_INTERVAL;
    this._intervalHasRegistered = true;
    this._interval = set_interval_default()(() => {
      if (typeof cb === 'function' && this._intervalHasRegistered) {
        cb();
      }
    }, pressInterval);
  }

  _unregisterInterval() {
    if (this._interval) {
      this._intervalHasRegistered = false;
      clearInterval(this._interval);
      this._interval = null;
    }
  }

  _registerTimer(cb) {
    const pressTimeout = this.getProp('pressTimeout') || inputNumber_constants_numbers.DEFAULT_PRESS_TIMEOUT;
    this._timerHasRegistered = true;
    this._timer = set_timeout_default()(() => {
      if (this._timerHasRegistered && typeof cb === 'function') {
        cb();
      }
    }, pressTimeout);
  }

  _unregisterTimer() {
    if (this._timer) {
      this._timerHasRegistered = false;
      clearTimeout(this._timer);
      this._timer = null;
    }
  }

  handleInputFocus(e) {
    const value = this.getState('value');

    if (value !== '') {// let parsedStr = this.doParse(this.getState('value'));
      // this._adapter.setValue(Number(parsedStr));
    }

    this._adapter.recordCursorPosition();

    this._adapter.setFocusing(true, null);

    this._adapter.setClickUpOrDown(false);

    this._adapter.notifyFocus(e);
  }
  /**
   * Input box content update processing
   * @param {String} value
   * @param {*} event
   */


  handleInputChange(value, event) {
    // Check accuracy, adjust accuracy, adjust maximum and minimum values, call parser to parse the number
    const parsedNum = this.doParse(value, true, true, true); // Parser parsed number, type Number (normal number or NaN)

    const toNum = this.doParse(value, false, false, false); // String converted from parser parsed numbers or directly converted without parser

    const valueAfterParser = this.afterParser(value);

    this._adapter.recordCursorPosition();

    let notifyVal;
    let num = toNum; // The formatted input value

    let formattedNum = value;

    if (value === '') {
      if (!this.isControlled()) {
        num = null;
      }
    } else if (this.isValidNumber(toNum) && this.isValidNumber(parsedNum)) {
      notifyVal = toNum;
      formattedNum = this.doFormat(toNum, false);
    } else {
      /**
       * This logic is used to solve the problem that parsedNum is not a valid number
       */
      if (typeof toNum === 'number' && !isNaN(toNum)) {
        formattedNum = this.doFormat(toNum, false); // console.log(`parsedStr: `, parsedStr, `toNum: `, toNum);

        const dotIndex = last_index_of_default()(valueAfterParser).call(valueAfterParser, '.');

        const lengthAfterDot = valueAfterParser.length - 1 - dotIndex;

        const precLength = this._getPrecLen(toNum);

        if (!precLength) {
          const dotBeginStr = dotIndex > -1 ? slice_default()(valueAfterParser).call(valueAfterParser, dotIndex) : '';
          formattedNum += dotBeginStr;
        } else if (precLength < lengthAfterDot) {
          // eslint-disable-next-line max-depth
          for (let i = 0; i < lengthAfterDot - precLength; i++) {
            formattedNum += '0';
          }
        } // NOUSE:


        num = toNum;
      } else {
        /**
         * When the user enters an illegal character, it needs to go through parser and format before displaying
         * Ensure that all input is processed by parser and format
         *
         * 用户输入非法字符时，需要经过 parser 和 format 一下再显示
         * 保证所有的输入都经过 parser 和 format 处理
         */
        formattedNum = this.doFormat(valueAfterParser, false);
      }

      notifyVal = valueAfterParser;
    }

    if (!this.isControlled() && (num === null || typeof num === 'number' && !isNaN(num))) {
      this._adapter.setNumber(num);
    }

    this._adapter.setValue(this.isControlled() ? formattedNum : this.doFormat(valueAfterParser, false), () => {
      this._adapter.restoreCursor();
    });

    this.notifyChange(notifyVal, event);
  }

  handleInputKeyDown(event) {
    const code = event.keyCode;

    if (code === utils_keyCode.UP || code === utils_keyCode.DOWN) {
      this._adapter.setClickUpOrDown(true);

      this._adapter.recordCursorPosition();

      const formattedVal = code === utils_keyCode.UP ? this.add(null, event) : this.minus(null, event);

      this._doInput(formattedVal, event, () => {
        this._adapter.restoreCursor();
      });

      event.preventDefault();
    }

    this._adapter.notifyKeyDown(event);
  }

  handleInputBlur(e) {
    const currentValue = toString_default()(this.getState('value'));

    let currentNumber = this.getState('number');

    if (currentNumber != null || currentValue != null && currentValue !== '') {
      const parsedNum = this.doParse(currentValue, false, true, true);
      let numHasChanged = false;
      let strHasChanged = false;
      let willSetNum, willSetVal;

      if (this.isValidNumber(parsedNum) && currentNumber !== parsedNum) {
        willSetNum = parsedNum;

        if (!this.isControlled()) {
          currentNumber = willSetNum;
        }

        numHasChanged = true;
      }

      const currentFormattedNum = this.doFormat(currentNumber, true);

      if (currentFormattedNum !== currentValue) {
        willSetVal = currentFormattedNum;
        strHasChanged = true;
      }

      if (strHasChanged || numHasChanged) {
        const notifyVal = willSetVal != null ? willSetVal : willSetNum;

        if (willSetVal != null) {
          this._adapter.setValue(willSetVal); // this.notifyChange(willSetVal);

        }

        if (willSetNum != null) {
          // eslint-disable-next-line max-depth
          if (!this._isControlledComponent('value')) {
            this._adapter.setNumber(willSetNum);
          } // this.notifyChange(willSetNum);

        }

        this.notifyChange(notifyVal, e);
      }
    }

    this._adapter.setFocusing(false);

    this._adapter.notifyBlur(e);
  }

  handleInputMouseEnter(event) {
    this._adapter.setHovering(true);
  }

  handleInputMouseLeave(event) {
    this._adapter.setHovering(false);
  }

  handleInputMouseMove(event) {
    this._adapter.setHovering(true);
  }

  handleMouseUp(e) {
    this._unregisterInterval();

    this._unregisterTimer();

    this._adapter.unregisterGlobalEvent('mouseup');
  }

  handleUpClick(event) {
    const {
      readonly
    } = this.getProps();

    if (!this._isMouseButtonLeft(event) || readonly) {
      return;
    }

    this._adapter.setClickUpOrDown(true);

    if (event) {
      event.persist();
      event.stopPropagation(); // Prevent native blurring events

      this._preventDefault(event);
    }

    this.upClick(event); // Cannot access event objects asynchronously https://reactjs.org/docs/events.html#event-pooling

    this._registerTimer(() => {
      this._registerInterval(() => {
        this.upClick(event);
      });
    });
  }

  handleDownClick(event) {
    const {
      readonly
    } = this.getProps();

    if (!this._isMouseButtonLeft(event) || readonly) {
      return;
    }

    this._adapter.setClickUpOrDown(true);

    if (event) {
      event.persist();
      event.stopPropagation();

      this._preventDefault(event);
    }

    this.downClick(event);

    this._registerTimer(() => {
      this._registerInterval(() => {
        this.downClick(event);
      });
    });
  }
  /**
   * Whether it is a left mouse button click
   * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button
   */


  _isMouseButtonLeft(event) {
    return get_default()(event, 'button') === inputNumber_constants_numbers.MOUSE_BUTTON_LEFT;
  }

  _preventDefault(event) {
    const keepFocus = this._adapter.getProp('keepFocus');

    if (keepFocus) {
      event.preventDefault();
    }
  }

  handleMouseLeave(event) {
    this._adapter.registerGlobalEvent('mouseup', () => {
      this.handleMouseUp(event);
    });
  }

  upClick(event) {
    const value = this.add(null, event);

    this._doInput(value, event);

    this._adapter.notifyUpClick(value, event);
  }

  downClick(event) {
    const value = this.minus(null, event);

    this._doInput(value, event);

    this._adapter.notifyDownClick(value, event);
  }

  _setInitValue() {
    const {
      defaultValue,
      value
    } = this.getProps();
    const propsValue = this._isControlledComponent('value') ? value : defaultValue;
    const tmpNumber = this.doParse(toString_default()(propsValue), false, true, true);
    let number = null;

    if (typeof tmpNumber === 'number' && !isNaN(tmpNumber)) {
      number = tmpNumber;
    }

    const formattedValue = typeof number === 'number' ? this.doFormat(number, true) : '';

    this._adapter.setNumber(number);

    this._adapter.setValue(formattedValue);

    if (isString_default()(formattedValue) && formattedValue !== String(propsValue !== null && propsValue !== void 0 ? propsValue : '')) {
      this.notifyChange(formattedValue, null);
    }
  }

  add(step, event) {
    const pressShift = event && event.shiftKey;
    const propStep = pressShift ? this.getProp('shiftStep') : this.getProp('step');
    step = step == null ? propStep : Number(step);
    const stepAbs = Math.abs(toNumber_default()(step));
    const curVal = this.getState('number');
    let curNum = this.toNumber(curVal) || 0;
    const min = this.getProp('min');
    const max = this.getProp('max');

    const minPrecLen = this._getPrecLen(min);

    const maxPrecLen = this._getPrecLen(max);

    const curPrecLen = this._getPrecLen(curNum);

    const stepPrecLen = this._getPrecLen(step);

    const scale = Math.pow(10, Math.max(minPrecLen, maxPrecLen, curPrecLen, stepPrecLen));

    if (step < 0) {
      // Js accuracy problem
      if (Math.abs(minus(min, curNum)) >= stepAbs) {
        curNum = (curNum * scale + step * scale) / scale;
      }
    } else if (step > 0) {
      if (Math.abs(minus(max, curNum)) >= stepAbs) {
        curNum = (curNum * scale + step * scale) / scale;
      }
    }

    if (typeof min === 'number' && min > curNum) {
      curNum = min;
    }

    if (typeof max === 'number' && max < curNum) {
      curNum = max;
    } // console.log('scale: ', scale, 'curNum: ', curNum);


    return this.doFormat(curNum, true);
  }

  minus(step, event) {
    const pressShift = event && event.shiftKey;
    const propStep = pressShift ? this.getProp('shiftStep') : this.getProp('step');
    step = step == null ? propStep : Number(step);
    return this.add(-step, event);
  }
  /**
   * get decimal length
   * @param {number} num
   * @returns {number}
   */


  _getPrecLen(num) {
    if (typeof num !== 'string') {
      num = String(Math.abs(Number(num || '')));
    }

    const idx = index_of_default()(num).call(num, '.') + 1;
    return idx ? num.length - idx : 0;
  }

  _adjustPrec(num) {
    const precision = this.getProp('precision');

    if (typeof precision === 'number' && num !== '' && num !== null && !is_nan_default()(Number(num))) {
      num = Number(num).toFixed(precision);
    }

    return toString_default()(num);
  }
  /**
   * format number to string
   * @param {string|number} value
   * @param {boolean} needAdjustPrec
   * @returns {string}
   */


  doFormat() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let needAdjustPrec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    // if (typeof value === 'string') {
    //     return value;
    // }
    let str;
    const formatter = this.getProp('formatter');

    if (needAdjustPrec) {
      str = this._adjustPrec(value);
    } else {
      str = toString_default()(value);
    }

    if (typeof formatter === 'function') {
      str = formatter(str);
    }

    return str;
  }
  /**
   *
   * @param {number} current
   * @returns {number}
   */


  fetchMinOrMax(current) {
    const {
      min,
      max
    } = this.getProps();

    if (current < min) {
      return min;
    } else if (current > max) {
      return max;
    }

    return current;
  }
  /**
   * parse to number
   * @param {string|number} value
   * @param {boolean} needCheckPrec
   * @param {boolean} needAdjustPrec
   * @param {boolean} needAdjustMaxMin
   * @returns {number}
   */


  doParse(value) {
    let needCheckPrec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    let needAdjustPrec = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let needAdjustMaxMin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    if (typeof value === 'number') {
      if (needAdjustMaxMin) {
        value = this.fetchMinOrMax(value);
      }

      if (needAdjustPrec) {
        value = this._adjustPrec(value);
      }

      return toNumber_default()(value);
    }

    const parser = this.getProp('parser');

    if (typeof parser === 'function') {
      value = parser(value);
    }

    if (needCheckPrec && typeof value === 'string') {
      var _context;

      const zeroIsValid = index_of_default()(value).call(value, '.') === -1 || index_of_default()(value).call(value, '.') > -1 && (value === '0' || last_index_of_default()(value).call(value, '0') < value.length - 1);
      const dotIsValid = last_index_of_default()(value).call(value, '.') < value.length - 1 && filter_default()(_context = value.split('')).call(_context, v => v === '.').length < 2;

      if (!zeroIsValid || !dotIsValid // (this.getProp('precision') > 0 && this._getPrecLen(value) > this.getProp('precision'))
      ) {
        return NaN;
      }
    }

    if (needAdjustPrec) {
      value = this._adjustPrec(value);
    }

    if (typeof value === 'string' && value.length) {
      return needAdjustMaxMin ? this.fetchMinOrMax(toNumber_default()(value)) : toNumber_default()(value);
    }

    return NaN;
  }
  /**
   * Parsing the input value
   * @param {string} value
   * @returns {string}
   */


  afterParser(value) {
    const parser = this.getProp('parser');

    if (typeof value === 'string' && typeof parser === 'function') {
      return toString_default()(parser(value));
    }

    return toString_default()(value);
  }

  toNumber(value) {
    let needAdjustPrec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    if (typeof value === 'number') {
      return value;
    }

    if (typeof value === 'string') {
      const parser = this.getProp('parser');

      if (typeof parser === 'function') {
        value = parser(value);
      }

      if (needAdjustPrec) {
        value = this._adjustPrec(value);
      }
    }

    return toNumber_default()(value);
  }
  /**
   * Returning true requires both:
   * 1.type is number and not equal to NaN
   * 2.min < = value < = max
   * 3.length after decimal point requires < = precision | | No precision
   * @param {*} um
   * @param {*} needCheckPrec
   * @returns
   */


  isValidNumber(num) {
    let needCheckPrec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    if (typeof num === 'number' && !isNaN(num)) {
      const {
        min,
        max,
        precision
      } = this.getProps();

      const numPrec = this._getPrecLen(num);

      const precIsValid = needCheckPrec ? typeof precision === 'number' && numPrec <= precision || typeof precision !== 'number' : true;

      if (num >= min && num <= max && precIsValid) {
        return true;
      }
    }

    return false;
  }

  isValidString(str) {
    if (typeof str === 'string' && str.length) {
      const parsedNum = this.doParse(str);
      return this.isValidNumber(parsedNum);
    }

    return false;
  }

  notifyChange(value, e) {
    if (value == null || value === '') {
      this._adapter.notifyChange('', e);
    } else {
      const parsedNum = this.toNumber(value, true);

      if (typeof parsedNum === 'number' && !isNaN(parsedNum)) {
        // this._adapter.notifyChange(typeof value === 'number' ? parsedNum : this.afterParser(value), e);
        this._adapter.notifyChange(parsedNum, e);

        this.notifyNumberChange(parsedNum, e);
      } else {
        this._adapter.notifyChange(this.afterParser(value), e);
      }
    }
  }

  notifyNumberChange(value, e) {
    const {
      number
    } = this.getStates(); // Does not trigger numberChange if value is not a significant number

    if (this.isValidNumber(value) && value !== number) {
      this._adapter.notifyNumberChange(value, e);
    }
  }

  updateStates(states, callback) {
    this._adapter.updateStates(states, callback);
  }

}

/* harmony default export */ var inputNumber_foundation = (foundation_InputNumberFoundation);
// EXTERNAL MODULE: ../semi-foundation/inputNumber/inputNumber.scss
var inputNumber = __webpack_require__("KwJG");

// CONCATENATED MODULE: ./inputNumber/index.tsx










var inputNumber_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable jsx-a11y/no-static-element-interactions */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable no-unused-vars */

/* eslint-disable max-depth */

/* eslint-disable react/no-did-update-set-state */

/* eslint-disable max-len */















class inputNumber_InputNumber extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.setInputRef = node => {
      const {
        forwardedRef
      } = this.props;
      this.inputNode = node;

      if (forwardedRef && typeof forwardedRef === 'object') {
        forwardedRef.current = node;
      } else if (typeof forwardedRef === 'function') {
        forwardedRef(node);
      }
    };

    this.handleInputFocus = e => this.foundation.handleInputFocus(e);

    this.handleInputChange = (value, event) => this.foundation.handleInputChange(value, event);

    this.handleInputBlur = e => this.foundation.handleInputBlur(e);

    this.handleInputKeyDown = e => this.foundation.handleInputKeyDown(e);

    this.handleInputMouseEnter = e => this.foundation.handleInputMouseEnter(e);

    this.handleInputMouseLeave = e => this.foundation.handleInputMouseLeave(e);

    this.handleInputMouseMove = e => this.foundation.handleInputMouseMove(e);

    this.handleUpClick = e => this.foundation.handleUpClick(e);

    this.handleDownClick = e => this.foundation.handleDownClick(e);

    this.handleMouseUp = e => this.foundation.handleMouseUp(e);

    this.handleMouseLeave = e => this.foundation.handleMouseLeave(e);

    this.renderButtons = () => {
      const {
        prefixCls,
        disabled,
        innerButtons,
        max,
        min
      } = this.props;
      const {
        hovering,
        focusing,
        number
      } = this.state;
      const notAllowedUp = disabled ? disabled : number === max;
      const notAllowedDown = disabled ? disabled : number === min;
      const suffixChildrenCls = classnames_default()("".concat(prefixCls, "-number-suffix-btns"), {
        ["".concat(prefixCls, "-number-suffix-btns-inner")]: innerButtons,
        ["".concat(prefixCls, "-number-suffix-btns-inner-hover")]: innerButtons && hovering && !focusing
      });
      const upClassName = classnames_default()("".concat(prefixCls, "-number-button"), "".concat(prefixCls, "-number-button-up"), {
        ["".concat(prefixCls, "-number-button-up-disabled")]: disabled,
        ["".concat(prefixCls, "-number-button-up-not-allowed")]: notAllowedUp
      });
      const downClassName = classnames_default()("".concat(prefixCls, "-number-button"), "".concat(prefixCls, "-number-button-down"), {
        ["".concat(prefixCls, "-number-button-down-disabled")]: disabled,
        ["".concat(prefixCls, "-number-button-down-not-allowed")]: notAllowedDown
      });
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: suffixChildrenCls
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: upClassName,
        onMouseDown: notAllowedUp ? noop_default.a : this.handleUpClick,
        onMouseUp: this.handleMouseUp,
        onMouseLeave: this.handleMouseLeave
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronUp, {
        size: "extra-small"
      })), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: downClassName,
        onMouseDown: notAllowedDown ? noop_default.a : this.handleDownClick,
        onMouseUp: this.handleMouseUp,
        onMouseLeave: this.handleMouseLeave
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronDown, {
        size: "extra-small"
      })));
    };

    this.renderSuffix = () => {
      const {
        innerButtons,
        suffix
      } = this.props;
      const {
        hovering,
        focusing
      } = this.state;

      if (innerButtons && (hovering || focusing)) {
        const buttons = this.renderButtons();
        return buttons;
      }

      return suffix;
    };

    this.state = {
      value: '',
      number: null,
      focusing: Boolean(props.autofocus) || false,
      hovering: false
    };
    this.inputNode = null;
    this.foundation = new inputNumber_foundation(this.adapter);
    this.clickUpOrDown = false;
  }

  get adapter() {
    var _this = this;

    return assign_default()(assign_default()({}, super.adapter), {
      setValue: (value, cb) => this.setState({
        value
      }, cb),
      setNumber: (number, cb) => this.setState({
        number
      }, cb),
      setFocusing: (focusing, cb) => this.setState({
        focusing
      }, cb),
      setHovering: hovering => this.setState({
        hovering
      }),
      notifyChange: function () {
        return _this.props.onChange(...arguments);
      },
      notifyNumberChange: function () {
        return _this.props.onNumberChange(...arguments);
      },
      notifyBlur: e => this.props.onBlur(e),
      notifyFocus: e => this.props.onFocus(e),
      notifyUpClick: (value, e) => this.props.onUpClick(value, e),
      notifyDownClick: (value, e) => this.props.onDownClick(value, e),
      notifyKeyDown: e => this.props.onKeyDown(e),
      registerGlobalEvent: (eventName, handler) => {
        if (eventName && typeof handler === 'function') {
          this.adapter.unregisterGlobalEvent(eventName);
          this.adapter.setCache(eventName, handler);
          document.addEventListener(eventName, handler);
        }
      },
      unregisterGlobalEvent: eventName => {
        if (eventName) {
          const handler = this.adapter.getCache(eventName);
          document.removeEventListener(eventName, handler);
          this.adapter.setCache(eventName, null);
        }
      },
      recordCursorPosition: () => {
        // Record position
        try {
          if (this.inputNode) {
            this.cursorStart = this.inputNode.selectionStart;
            this.cursorEnd = this.inputNode.selectionEnd;
            this.currentValue = this.inputNode.value;
            this.cursorBefore = this.inputNode.value.substring(0, this.cursorStart);
            this.cursorAfter = this.inputNode.value.substring(this.cursorEnd);
          }
        } catch (e) {
          console.warn(e); // Fix error in Chrome:
          // Failed to read the 'selectionStart' property from 'HTMLInputElement'
          // http://stackoverflow.com/q/21177489/3040605
        }
      },
      restoreByAfter: str => {
        if (isNullOrUndefined(str)) {
          return false;
        }

        const fullStr = this.inputNode.value;

        const index = last_index_of_default()(fullStr).call(fullStr, str);

        if (index === -1) {
          return false;
        }

        if (index + str.length === fullStr.length) {
          this.adapter.fixCaret(index, index);
          return true;
        }

        return false;
      },
      restoreCursor: function () {
        let str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.cursorAfter;

        if (isNullOrUndefined(str)) {
          return false;
        } // For loop from full str to the str with last char to map. e.g. 123
        // -> 123
        // -> 23
        // -> 3


        return some_default()(Array.prototype).call(str, (_, start) => {
          const partStr = str.substring(start);
          return _this.adapter.restoreByAfter(partStr);
        });
      },
      fixCaret: (start, end) => {
        if (start === undefined || end === undefined || !this.inputNode || !this.inputNode.value) {
          return;
        }

        try {
          const currentStart = this.inputNode.selectionStart;
          const currentEnd = this.inputNode.selectionEnd;

          if (start !== currentStart || end !== currentEnd) {
            this.inputNode.setSelectionRange(start, end);
          }
        } catch (e) {// Fix error in Chrome:
          // Failed to read the 'selectionStart' property from 'HTMLInputElement'
          // http://stackoverflow.com/q/21177489/3040605
        }
      },
      setClickUpOrDown: value => {
        this.clickUpOrDown = value;
      },
      updateStates: (states, callback) => {
        this.setState(states, callback);
      }
    });
  }

  componentDidUpdate(prevProps) {
    const {
      value,
      preventScroll
    } = this.props;
    const {
      focusing
    } = this.state;
    let newValue;
    /**
     * To determine whether the front and back are equal
     * NaN need to check whether both are NaN
     */

    if (value !== prevProps.value && !utils_isBothNaN(value, prevProps.value)) {
      if (isNullOrUndefined(value) || value === '') {
        newValue = '';
        this.foundation.updateStates({
          value: newValue,
          number: null
        });
      } else {
        let valueStr = value;

        if (typeof value === 'number') {
          valueStr = value.toString();
        }

        const parsedNum = this.foundation.doParse(valueStr, false, true, true);
        const toNum = typeof value === 'number' ? value : this.foundation.doParse(valueStr, false, false, false);
        /**
         * focusing 状态为输入状态，输入状态的受控值要特殊处理
         * 如：
         *  - 输入合法值
         *      123 => input value 也应该是 123，同时需要设置 number 为 123
         *  - 输入非法值，只设置 input value，不设置非法的number
         *      abc => input value 这时是 abc，但失焦后会进行格式化
         *      100（超出范围） => input value 应该是 100，但不设置 number
         *
         * 保持输入态有三种方式
         * 1. 输入框输入
         *  - 输入可以解析为合法数字，input value根据输入值确定，失焦时更新input value
         *  - 输入不可解析为合法数字，进行格式化后显示在input框
         * 2. 键盘点击上下按钮（input value根据受控值进行更改）
         * 3. keepFocus+鼠标点击上下按钮（input value根据受控值进行更改）
         *
         * The focusing state is the input state, and the controlled value of the input state needs special treatment
         * For example:
         *  - input legal value
         *      123 = > input value should also be 123, and the number should be set to 123
         *  - input illegal value, only set the input value, do not set the illegal number
         *      abc = > input value This is abc at this time, but it will be formatted after being out of focus
         *      100 (out of range) = > input value should be 100, but no number
         *
         * There are three ways to maintain the input state
         * 1. input box input
         *  - input can be resolved into legal numbers, input value is determined according to the input value, and input value is updated when out of focus
         *  - input cannot be resolved into legal numbers, and it will be displayed in the input box after formatting
         * 2. Keyboard click on the up and down button (input value is changed according to the controlled value)
         * 3.keepFocus + mouse click on the up and down button (input value is changed according to the controlled value)
         */

        if (focusing) {
          if (this.foundation.isValidNumber(parsedNum) && parsedNum !== this.state.number) {
            const obj = {
              number: parsedNum
            };
            /**
             * If you are clicking the button, it will automatically format once
             * We need to set the status to false after trigger focus event
             */

            if (this.clickUpOrDown) {
              obj.value = this.foundation.doFormat(valueStr, true);
              newValue = obj.value;
            }

            this.foundation.updateStates(obj, () => this.adapter.restoreCursor());
          } else if (!isNaN_default()(toNum)) {
            // Update input content when controlled input is illegal and not NaN
            newValue = this.foundation.doFormat(toNum, false);
            this.foundation.updateStates({
              value: newValue
            });
          } else {
            // Update input content when controlled input NaN
            newValue = this.foundation.doFormat(valueStr, false);
            this.foundation.updateStates({
              value: newValue
            });
          }
        } else if (this.foundation.isValidNumber(parsedNum)) {
          newValue = this.foundation.doFormat(parsedNum);
          this.foundation.updateStates({
            number: parsedNum,
            value: newValue
          });
        } else {
          // Invalid digital analog blurring effect instead of controlled failure
          newValue = '';
          this.foundation.updateStates({
            number: null,
            value: newValue
          });
        }
      }

      if (isString_default()(newValue) && newValue !== String(this.props.value)) {
        this.foundation.notifyChange(newValue, null);
      }
    }

    if (!this.clickUpOrDown) {
      return;
    }

    if (this.props.keepFocus && this.state.focusing) {
      if (document.activeElement !== this.inputNode) {
        this.inputNode.focus({
          preventScroll
        });
      }
    }
  }

  render() {
    var _context;

    const _a = this.props,
          {
      disabled,
      className,
      prefixCls,
      min,
      max,
      step,
      shiftStep,
      precision,
      formatter,
      parser,
      forwardedRef,
      onUpClick,
      onDownClick,
      pressInterval,
      pressTimeout,
      suffix,
      size,
      hideButtons,
      innerButtons,
      style,
      onNumberChange,
      keepFocus,
      defaultValue
    } = _a,
          rest = inputNumber_rest(_a, ["disabled", "className", "prefixCls", "min", "max", "step", "shiftStep", "precision", "formatter", "parser", "forwardedRef", "onUpClick", "onDownClick", "pressInterval", "pressTimeout", "suffix", "size", "hideButtons", "innerButtons", "style", "onNumberChange", "keepFocus", "defaultValue"]);

    const {
      value,
      number
    } = this.state;
    const inputNumberCls = classnames_default()(className, "".concat(prefixCls, "-number"), {
      [concat_default()(_context = "".concat(prefixCls, "-number-size-")).call(_context, size)]: size
    });
    const buttons = this.renderButtons();
    const ariaProps = {
      'aria-disabled': disabled,
      step
    };

    if (number) {
      ariaProps['aria-valuenow'] = number;
    }

    if (max !== Infinity) {
      ariaProps['aria-valuemax'] = max;
    }

    if (min !== -Infinity) {
      ariaProps['aria-valuemin'] = min;
    }

    const input = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: inputNumberCls,
      style: style,
      onMouseMove: e => this.handleInputMouseMove(e),
      onMouseEnter: e => this.handleInputMouseEnter(e),
      onMouseLeave: e => this.handleInputMouseLeave(e)
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(input_0, assign_default()({
      role: "spinbutton"
    }, ariaProps, rest, {
      size: size,
      disabled: disabled,
      ref: this.setInputRef,
      value: value,
      onFocus: this.handleInputFocus,
      onChange: this.handleInputChange,
      onBlur: this.handleInputBlur,
      onKeyDown: this.handleInputKeyDown,
      suffix: this.renderSuffix()
    })), hideButtons || innerButtons ? null : buttons);
    return input;
  }

}

inputNumber_InputNumber.propTypes = {
  'aria-label': prop_types_default.a.string,
  'aria-labelledby': prop_types_default.a.string,
  'aria-invalid': prop_types_default.a.bool,
  'aria-errormessage': prop_types_default.a.string,
  'aria-describedby': prop_types_default.a.string,
  'aria-required': prop_types_default.a.bool,
  autofocus: prop_types_default.a.bool,
  className: prop_types_default.a.string,
  defaultValue: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  disabled: prop_types_default.a.bool,
  formatter: prop_types_default.a.func,
  forwardedRef: prop_types_default.a.any,
  hideButtons: prop_types_default.a.bool,
  innerButtons: prop_types_default.a.bool,
  insetLabel: prop_types_default.a.node,
  insetLabelId: prop_types_default.a.string,
  keepFocus: prop_types_default.a.bool,
  max: prop_types_default.a.number,
  min: prop_types_default.a.number,
  parser: prop_types_default.a.func,
  precision: prop_types_default.a.number,
  prefixCls: prop_types_default.a.string,
  pressInterval: prop_types_default.a.number,
  pressTimeout: prop_types_default.a.number,
  preventScroll: prop_types_default.a.bool,
  shiftStep: prop_types_default.a.number,
  step: prop_types_default.a.number,
  style: prop_types_default.a.object,
  suffix: prop_types_default.a.any,
  value: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  onBlur: prop_types_default.a.func,
  onChange: prop_types_default.a.func,
  onDownClick: prop_types_default.a.func,
  onKeyDown: prop_types_default.a.func,
  onNumberChange: prop_types_default.a.func,
  onUpClick: prop_types_default.a.func
};
inputNumber_InputNumber.defaultProps = {
  forwardedRef: noop_default.a,
  innerButtons: false,
  keepFocus: false,
  max: Infinity,
  min: -Infinity,
  prefixCls: inputNumber_constants_cssClasses.PREFIX,
  pressInterval: inputNumber_constants_numbers.DEFAULT_PRESS_TIMEOUT,
  pressTimeout: inputNumber_constants_numbers.DEFAULT_PRESS_TIMEOUT,
  shiftStep: inputNumber_constants_numbers.DEFAULT_SHIFT_STEP,
  size: inputNumber_constants_strings.DEFAULT_SIZE,
  step: inputNumber_constants_numbers.DEFAULT_STEP,
  onBlur: noop_default.a,
  onChange: noop_default.a,
  onDownClick: noop_default.a,
  onFocus: noop_default.a,
  onKeyDown: noop_default.a,
  onNumberChange: noop_default.a,
  onUpClick: noop_default.a
};
/* harmony default export */ var inputNumber_0 = (forwardStatics( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.forwardRef(function SemiInputNumber(props, ref) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(inputNumber_InputNumber, assign_default()({}, props, {
    forwardedRef: ref
  }));
}), inputNumber_InputNumber));

// CONCATENATED MODULE: ../semi-foundation/navigation/constants.ts

const MODE_HORIZONTAL = 'horizontal';
const MODE_VERTICAL = 'vertical';
const navigation_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-navigation")
};
const navigation_constants_strings = {
  MODE: [MODE_VERTICAL, MODE_HORIZONTAL],
  MODE_VERTICAL,
  MODE_HORIZONTAL,
  ICON_POS_LEFT: 'left',
  ICON_POS_RIGHT: 'right',
  DEFAULT_LOGO_ICON_SIZE: 'extra-large',
  TOGGLE_ICON_LEFT: 'left',
  TOGGLE_ICON_RIGHT: 'right'
};
const navigation_constants_numbers = {
  DEFAULT_SUBNAV_MAX_HEIGHT: 999,
  DEFAULT_TOOLTIP_SHOW_DELAY: 0,
  DEFAULT_TOOLTIP_HIDE_DELAY: 100,
  DEFAULT_SUBNAV_OPEN_DELAY: 0,
  DEFAULT_SUBNAV_CLOSE_DELAY: 100 // ms

};

// CONCATENATED MODULE: ../semi-foundation/navigation/NavItem.ts





const DEFAULT_TOGGLE_ICON = {
  open: 'chevron_up',
  closed: 'chevron_down'
};
class NavItem_NavItem {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    // eslint-disable-next-line eqeqeq
    if (options == null || typeof options !== 'object') {
      // eslint-disable-next-line no-param-reassign
      options = {
        text: options,
        itemKey: options,
        maxHeight: navigation_constants_numbers.DEFAULT_SUBNAV_MAX_HEIGHT,
        // selected: false,
        // isOpen: false,
        link: null,
        items: null,
        icon: '',
        indent: false
      };
    }

    for (const key of keys_default()(options)) {
      this[key] = options[key];
    }

    if (options.items && is_array_default()(options.items) && options.items.length) {
      var _context;

      this.items = map_default()(_context = options.items).call(_context, item => new NavItem_NavItem(item));

      if ('toggleIcon' in options) {
        this.toggleIcon = NavItem_NavItem.isValidToggleIcon(options.toggleIcon) ? assign_default()({}, options.toggleIcon) : assign_default()({}, DEFAULT_TOGGLE_ICON);
      } else {
        this.toggleIcon = assign_default()({}, DEFAULT_TOGGLE_ICON);
      }
    } else {
      this.items = null;
    }
  }

  static isValidToggleIcon(toggleIcon) {
    return Boolean(toggleIcon && typeof toggleIcon === 'object' && typeof toggleIcon.open === 'string' && toggleIcon.open.length && typeof toggleIcon.closed === 'string' && toggleIcon.closed.length);
  }

}
// CONCATENATED MODULE: ../semi-foundation/navigation/foundation.ts








/* eslint-disable max-depth */

/* eslint-disable max-len */




class foundation_NavigationFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  }
  /* istanbul ignore next */


  static getZeroParentKeys() {
    let itemKeysMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const willAddKeys = [];

    for (var _len = arguments.length, itemKeys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      itemKeys[_key - 1] = arguments[_key];
    }

    if (itemKeys.length) {
      for (const itemKey of itemKeys) {
        if (is_array_default()(itemKeysMap[itemKey]) && itemKeysMap[itemKey].length) {
          const levelZeroParentKey = itemKeysMap[itemKey][0];

          if (!isNullOrUndefined(levelZeroParentKey)) {
            willAddKeys.push(levelZeroParentKey);
          }
        }
      }
    }

    return willAddKeys;
  }

  static buildItemKeysMap() {
    let items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let keysMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let parentKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    let keyPropName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'itemKey';

    if (is_array_default()(items) && items.length) {
      for (const item of items) {
        if (is_array_default()(item)) {
          foundation_NavigationFoundation.buildItemKeysMap(item, keysMap, [...parentKeys], keyPropName);
        } else {
          let itemKey;

          if (item && typeof item === 'object') {
            itemKey = item[keyPropName] || item.props && item.props[keyPropName];
          }

          if (itemKey) {
            keysMap[itemKey] = [...parentKeys];

            if (is_array_default()(item.items) && item.items.length) {
              foundation_NavigationFoundation.buildItemKeysMap(item.items, keysMap, [...parentKeys, itemKey], keyPropName);
            } else if (item.props && item.props.children) {
              const children = is_array_default()(item.props.children) ? item.props.children : [item.props.children];
              foundation_NavigationFoundation.buildItemKeysMap(children, keysMap, [...parentKeys, itemKey], keyPropName);
            }
          }
        }
      }
    }

    return keysMap;
  }
  /**
   * init is called in constructor and componentDidMount.
   * if you want to update state in constructor, please add it to return object;
   * if you want to update state in componentDidMount, please call adapter in else logic.
   * @param {*} lifecycle
   * @returns
   */


  init(lifecycle) {
    const {
      defaultSelectedKeys,
      selectedKeys
    } = this.getProps();
    let willSelectedKeys = selectedKeys || defaultSelectedKeys || [];
    const {
      itemKeysMap,
      willOpenKeys,
      formattedItems
    } = this.getCalcState();
    const parentSelectKeys = this.selectLevelZeroParentKeys(itemKeysMap, willSelectedKeys);
    willSelectedKeys = concat_default()(willSelectedKeys).call(willSelectedKeys, parentSelectKeys);

    if (lifecycle === 'constructor') {
      return {
        selectedKeys: willSelectedKeys,
        itemKeysMap,
        openKeys: willOpenKeys,
        items: formattedItems
      };
    } else {
      this._adapter.updateSelectedKeys(willSelectedKeys);

      this._adapter.setItemKeysMap(itemKeysMap);

      this._adapter.updateOpenKeys(willOpenKeys);

      this._adapter.updateItems(formattedItems);

      this._adapter.setItemsChanged(true);
    }

    return undefined;
  }
  /**
   * Get the state to be calculated
   */


  getCalcState() {
    const {
      itemKeysMap,
      formattedItems
    } = this.getFormattedItems();
    const willOpenKeys = this.getWillOpenKeys(itemKeysMap);
    return {
      itemKeysMap,
      willOpenKeys,
      formattedItems
    };
  }
  /**
   * Calculate formatted items and itemsKeyMap
   */


  getFormattedItems() {
    const {
      items,
      children
    } = this.getProps();
    const formattedItems = this.formatItems(items);
    const willHandleItems = is_array_default()(items) && items.length ? formattedItems : children;
    const itemKeysMap = foundation_NavigationFoundation.buildItemKeysMap(willHandleItems);
    return {
      itemKeysMap,
      formattedItems
    };
  }
  /**
   * Calculate the keys that will need to be opened soon
   * @param {*} itemKeysMap
   */


  getWillOpenKeys(itemKeysMap) {
    const {
      defaultOpenKeys,
      openKeys,
      defaultSelectedKeys,
      selectedKeys,
      mode
    } = this.getProps();
    let willOpenKeys = openKeys || defaultOpenKeys || [];

    if (!(is_array_default()(defaultOpenKeys) || is_array_default()(openKeys)) && mode === navigation_constants_strings.MODE_VERTICAL && (is_array_default()(defaultSelectedKeys) || is_array_default()(selectedKeys))) {
      const currentSelectedKeys = is_array_default()(selectedKeys) ? selectedKeys : defaultSelectedKeys;
      willOpenKeys = this.getShouldOpenKeys(itemKeysMap, currentSelectedKeys);
    }

    return [...willOpenKeys];
  }

  getItemKey(item) {
    let keyPropName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'itemKey';

    if (item && typeof item === 'object') {
      return item[keyPropName];
    }

    return item;
  }

  getShouldOpenKeys() {
    let itemKeysMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let selectedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    const willOpenKeySet = new set_default.a();

    if (is_array_default()(selectedKeys) && selectedKeys.length) {
      for_each_default()(selectedKeys).call(selectedKeys, item => {
        if (item) {
          const parentKeys = get_default()(itemKeysMap, this.getItemKey(item));

          if (is_array_default()(parentKeys)) {
            for_each_default()(parentKeys).call(parentKeys, k => willOpenKeySet.add(k));
          }
        }
      });
    }

    return [...willOpenKeySet];
  }

  destroy() {} // eslint-disable-line


  selectLevelZeroParentKeys(itemKeysMap) {
    const _itemKeysMap = isNullOrUndefined(itemKeysMap) ? this.getState('itemKeysMap') : itemKeysMap; // console.log(itemKeysMap);


    const willAddKeys = [];

    for (var _len2 = arguments.length, itemKeys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      itemKeys[_key2 - 1] = arguments[_key2];
    }

    if (itemKeys.length) {
      for (const itemKey of itemKeys) {
        if (is_array_default()(_itemKeysMap[itemKey]) && _itemKeysMap[itemKey].length) {
          const levelZeroParentKey = _itemKeysMap[itemKey][0];

          if (!isNullOrUndefined(levelZeroParentKey)) {
            willAddKeys.push(levelZeroParentKey);
          }
        }
      }
    }

    if (willAddKeys.length) {
      return willAddKeys;
    }

    return [];
  }

  formatItems() {
    let items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    const formattedItems = [];

    for (const item of items) {
      formattedItems.push(new NavItem_NavItem(item));
    }

    return formattedItems;
  }

  handleSelect(data) {
    this._adapter.notifySelect(data);
  }
  /* istanbul ignore next */


  judgeIfOpen(openKeys, items) {
    let shouldBeOpen = false;

    const _openKeys = is_array_default()(openKeys) ? openKeys : openKeys && [openKeys];

    if (_openKeys && is_array_default()(items) && items.length) {
      for (const item of items) {
        shouldBeOpen = includes_default()(_openKeys).call(_openKeys, item.itemKey) || this.judgeIfOpen(_openKeys, item.items);

        if (shouldBeOpen) {
          break;
        }
      }
    }

    return shouldBeOpen;
  }

  handleCollapseChange() {
    const isCollapsed = !this.getState('isCollapsed');

    if (!this._isControlledComponent('isCollapsed')) {
      this._adapter.setIsCollapsed(isCollapsed);
    }

    this._adapter.notifyCollapseChange(isCollapsed);
  }

  handleItemsChange(isChanged) {
    this._adapter.setItemsChanged(isChanged);
  }

}
// EXTERNAL MODULE: ../semi-foundation/navigation/navigation.scss
var navigation = __webpack_require__("/PBC");

// CONCATENATED MODULE: ../semi-foundation/navigation/subNavFoundation.ts







const subNavFoundation_addKeys = function addKeys() {
  let originKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  const keySet = new set_default.a(originKeys);

  for (var _len = arguments.length, willAddKeys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    willAddKeys[_key - 1] = arguments[_key];
  }

  for_each_default()(willAddKeys).call(willAddKeys, key => key && keySet.add(key));

  return from_default()(keySet);
};

const subNavFoundation_removeKeys = function removeKeys() {
  let originKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  const keySet = new set_default.a(originKeys);

  for (var _len2 = arguments.length, willRemoveKeys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    willRemoveKeys[_key2 - 1] = arguments[_key2];
  }

  for_each_default()(willRemoveKeys).call(willRemoveKeys, key => key && keySet.delete(key));

  return from_default()(keySet);
};

class subNavFoundation_SubNavFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  }

  init() {
    // this.log('invoke SubNavFoundation init()');
    this._timer = null;
  }

  destroy() {} // eslint-disable-line


  clearDelayTimer() {
    if (this._timer) {
      clearTimeout(this._timer);
      this._timer = null;
    }
  }

  isValidKey(itemKey) {
    // eslint-disable-next-line eqeqeq
    return itemKey != null && (typeof itemKey === 'number' || typeof itemKey === 'string');
  }

  handleDropdownVisibleChange(visible) {
    const itemKey = this.getProp('itemKey');

    const openKeysIsControlled = this._adapter.getOpenKeysIsControlled();

    const canUpdateOpenKeys = this._adapter.getCanUpdateOpenKeys();

    const rawOpenKeys = this._adapter.getOpenKeys();

    const openKeys = visible ? subNavFoundation_addKeys(rawOpenKeys, itemKey) : subNavFoundation_removeKeys(rawOpenKeys, itemKey);
    this.clearDelayTimer();

    if (!openKeysIsControlled) {
      if (canUpdateOpenKeys) {
        this._adapter.updateOpen(visible);
      } // this._adapter.updateIsHovered(visible);

    }

    this._adapter.notifyGlobalOpenChange({
      itemKey,
      openKeys,
      isOpen: visible
    });
  }
  /**
   *
   * @param {Event} e
   * @param {HTMLElement} titleRef
   */


  handleClick(e, titleRef) {
    const {
      itemKey,
      disabled
    } = this.getProps();

    if (disabled) {
      return;
    } // this.log(e, titleRef, titleRef.contains(e.target));


    const clickedDomIsTitle = titleRef && titleRef.contains(e.target);
    let isOpen = Boolean(this._adapter.getIsOpen());

    if (!clickedDomIsTitle) {
      isOpen = false;
    } else {
      isOpen = !isOpen;
    }

    const openKeys = isOpen ? subNavFoundation_addKeys(this._adapter.getOpenKeys(), itemKey) : subNavFoundation_removeKeys(this._adapter.getOpenKeys(), itemKey);
    const cbVal = {
      itemKey,
      openKeys,
      isOpen,
      domEvent: e
    };

    const openKeysIsControlled = this._adapter.getOpenKeysIsControlled();

    const canUpdateOpenKeys = this._adapter.getCanUpdateOpenKeys();

    if (!openKeysIsControlled && canUpdateOpenKeys) {
      this._adapter.updateOpen(isOpen);
    }

    this._adapter.notifyGlobalOpenChange(cbVal);

    this._adapter.notifyGlobalOnClick(cbVal);
  }
  /**
   * A11y: simulate sub nav click
   * @param e
   * @param titleRef
   */


  handleKeyPress(e, titleRef) {
    if (utils_isEnterPress(e)) {
      this.handleClick(e, titleRef);
    }
  }

}
// CONCATENATED MODULE: ../semi-foundation/navigation/itemFoundation.ts


/* argus-disable unPkgSensitiveInfo */


class navigation_itemFoundation_ItemFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  }

  init() {
    this._timer = null;
    this._mounted = true;
  }

  destroy() {
    this._mounted = false;
  }

  isValidKey(itemKey) {
    // eslint-disable-next-line eqeqeq
    return itemKey != null && (typeof itemKey === 'string' || typeof itemKey === 'number');
  }

  handleClick(e) {
    const {
      isSubNav,
      itemKey,
      text,
      disabled
    } = this.getProps();

    if (disabled) {
      return;
    }

    if (!isSubNav && this.isValidKey(itemKey) && !this._adapter.getSelectedKeysIsControlled() && !this._adapter.getSelected()) {
      this._adapter.updateSelected(true);
    }

    const selectedKeys = [itemKey]; // If the current item is subNav, there is no need to trigger the global onSelect/onClick event, instead, the SubNav component will trigger the click event

    if (!isSubNav) {
      if (!this._adapter.getSelected()) {
        // internal-issues:51
        const selectedItems = [this._adapter.cloneDeep(this.getProps())];

        this._adapter.notifyGlobalOnSelect({
          itemKey,
          selectedKeys,
          selectedItems,
          domEvent: e
        });
      }

      this._adapter.notifyGlobalOnClick({
        itemKey,
        text,
        domEvent: e
      });
    }

    this._adapter.notifyClick({
      itemKey,
      text,
      domEvent: e
    });
  }
  /**
   * A11y: simulate item click
   */


  handleKeyPress(e) {
    if (utils_isEnterPress(e)) {
      this.handleClick(e);
    }
  }

}
// CONCATENATED MODULE: ./navigation/nav-context.ts

const NavContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext({
  isCollapsed: false,
  selectedKeys: [],
  openKeys: []
});
/* harmony default export */ var nav_context = (NavContext);
// CONCATENATED MODULE: ./navigation/Item.tsx






/* eslint-disable max-len */

/* eslint-disable no-nested-ternary */











const Item_clsPrefix = "".concat(navigation_constants_cssClasses.PREFIX, "-item");
class Item_NavItem extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.setItemRef = ref => {
      // console.log('Item - setItemRef()', ref);
      this.props.forwardRef && this.props.forwardRef(ref);
    };

    this.wrapTooltip = node => {
      const {
        text,
        tooltipHideDelay,
        tooltipShowDelay
      } = this.props;
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tooltip_Tooltip, {
        content: text,
        position: "right",
        trigger: 'hover',
        mouseEnterDelay: tooltipShowDelay,
        mouseLeaveDelay: tooltipHideDelay
      }, node);
    };

    this.handleClick = e => this.foundation.handleClick(e);

    this.handleKeyPress = e => this.foundation.handleKeyPress(e);

    this.state = {
      tooltipShow: false
    };
    this.foundation = new navigation_itemFoundation_ItemFoundation(this.adapter);
  }

  _invokeContextFunc(funcName) {
    if (funcName && this.context && typeof this.context[funcName] === 'function') {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return this.context[funcName](...args);
    }

    return null;
  }

  get adapter() {
    var _this = this;

    return assign_default()(assign_default()({}, super.adapter), {
      cloneDeep: _utils["a" /* cloneDeep */],
      updateTooltipShow: tooltipShow => this.setState({
        tooltipShow
      }),
      updateSelected: _selected => this._invokeContextFunc('updateSelectedKeys', [this.props.itemKey]),
      updateGlobalSelectedKeys: keys => this._invokeContextFunc('updateSelectedKeys', [...keys]),
      getSelectedKeys: () => this.context && this.context.selectedKeys,
      getSelectedKeysIsControlled: () => this.context && this.context.selectedKeysIsControlled,
      notifyGlobalOnSelect: function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return _this._invokeContextFunc('onSelect', ...args);
      },
      notifyGlobalOnClick: function () {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        return _this._invokeContextFunc('onClick', ...args);
      },
      notifyClick: function () {
        return _this.props.onClick(...arguments);
      },
      notifyMouseEnter: function () {
        return _this.props.onMouseEnter(...arguments);
      },
      notifyMouseLeave: function () {
        return _this.props.onMouseLeave(...arguments);
      },
      getIsCollapsed: () => this.props.isCollapsed || Boolean(this.context && this.context.isCollapsed) || false,
      getSelected: () => {
        var _context;

        return Boolean(this.context && this.context.selectedKeys && includes_default()(_context = this.context.selectedKeys).call(_context, this.props.itemKey));
      },
      getIsOpen: () => {
        var _context2;

        return Boolean(this.context && this.context.openKeys && includes_default()(_context2 = this.context.openKeys).call(_context2, this.props.itemKey));
      }
    });
  }

  renderIcon(icon, pos) {
    var _context3;

    let isToggleIcon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    if (this.props.isSubNav) {
      return null;
    }

    if (!icon && this.context.mode === navigation_constants_strings.MODE_HORIZONTAL) {
      return null;
    }

    let iconSize = 'large';

    if (pos === navigation_constants_strings.ICON_POS_RIGHT) {
      iconSize = 'default';
    }

    const className = classnames_default()("".concat(Item_clsPrefix, "-icon"), {
      [concat_default()(_context3 = "".concat(Item_clsPrefix, "-icon-toggle-")).call(_context3, this.context.toggleIconPosition)]: isToggleIcon,
      ["".concat(Item_clsPrefix, "-icon-info")]: !isToggleIcon
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("i", {
      className: className,
      key: key
    }, Object(_utils["e" /* isSemiIcon */])(icon) ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(icon, {
      size: icon.props.size || iconSize
    }) : icon);
  }

  render() {
    const {
      text,
      children,
      icon,
      toggleIcon,
      className,
      isSubNav,
      style,
      indent,
      onMouseEnter,
      onMouseLeave,
      link,
      linkOptions,
      disabled,
      level = 0
    } = this.props;
    const {
      mode,
      isInSubNav,
      prefixCls,
      limitIndent
    } = this.context;
    const isCollapsed = this.adapter.getIsCollapsed();
    const selected = this.adapter.getSelected();
    let itemChildren = null;

    if (!isNullOrUndefined(children)) {
      itemChildren = children;
    } else {
      let placeholderIcons = null;

      if (mode === navigation_constants_strings.MODE_VERTICAL && !limitIndent && !isCollapsed) {
        const iconAmount = icon && !indent ? level : level - 1;
        placeholderIcons = times_default()(iconAmount, index => this.renderIcon(null, navigation_constants_strings.ICON_POS_RIGHT, false, index));
      }

      itemChildren = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, placeholderIcons, this.context.toggleIconPosition === navigation_constants_strings.TOGGLE_ICON_LEFT && this.renderIcon(toggleIcon, navigation_constants_strings.ICON_POS_RIGHT, true, 'key-toggle-pos-right'), icon || indent || isInSubNav ? this.renderIcon(icon, navigation_constants_strings.ICON_POS_LEFT, false, 'key-position-left') : null, !isNullOrUndefined(text) ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: "".concat(navigation_constants_cssClasses.PREFIX, "-item-text")
      }, text) : '', this.context.toggleIconPosition === navigation_constants_strings.TOGGLE_ICON_RIGHT && this.renderIcon(toggleIcon, navigation_constants_strings.ICON_POS_RIGHT, true, 'key-toggle-pos-right'));
    }

    if (typeof link === 'string') {
      itemChildren = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("a", assign_default()({
        className: "".concat(prefixCls, "-item-link"),
        href: link
      }, linkOptions), itemChildren);
    }

    let itemDom = '';

    if (isInSubNav && (isCollapsed || mode === navigation_constants_strings.MODE_HORIZONTAL)) {
      const popoverItemCls = classnames_default()({
        [Item_clsPrefix]: true,
        ["".concat(Item_clsPrefix, "-sub")]: isSubNav,
        ["".concat(Item_clsPrefix, "-selected")]: selected,
        ["".concat(Item_clsPrefix, "-collapsed")]: isCollapsed,
        ["".concat(Item_clsPrefix, "-disabled")]: disabled
      });
      itemDom = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dropdown_0.Item, {
        selected: selected,
        active: selected,
        forwardRef: this.setItemRef,
        className: popoverItemCls,
        onClick: this.handleClick,
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        disabled: disabled
      }, itemChildren);
    } else {
      // Items are divided into normal and sub-wrap
      const popoverItemCls = classnames_default()("".concat(className || "".concat(Item_clsPrefix, "-normal")), {
        [Item_clsPrefix]: true,
        ["".concat(Item_clsPrefix, "-sub")]: isSubNav,
        ["".concat(Item_clsPrefix, "-selected")]: selected && !isSubNav,
        ["".concat(Item_clsPrefix, "-collapsed")]: isCollapsed,
        ["".concat(Item_clsPrefix, "-disabled")]: disabled
      });
      const ariaProps = {
        'aria-disabled': disabled
      };

      if (isSubNav) {
        const isOpen = this.adapter.getIsOpen();
        ariaProps['aria-expanded'] = isOpen;
      }

      itemDom = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", assign_default()({
        role: "menuitem",
        tabIndex: -1
      }, ariaProps, {
        style: style,
        ref: this.setItemRef,
        className: popoverItemCls,
        onClick: this.handleClick,
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onKeyPress: this.handleKeyPress
      }), itemChildren);
    } // Display Tooltip when disabled and SubNav


    if (isCollapsed && !isInSubNav && !isSubNav || isCollapsed && isSubNav && disabled) {
      itemDom = this.wrapTooltip(itemDom);
    }

    return itemDom;
  }

}
Item_NavItem.contextType = nav_context;
Item_NavItem.propTypes = {
  text: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node]),
  itemKey: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  onClick: prop_types_default.a.func,
  onMouseEnter: prop_types_default.a.func,
  onMouseLeave: prop_types_default.a.func,
  children: prop_types_default.a.node,
  icon: prop_types_default.a.oneOfType([prop_types_default.a.node]),
  className: prop_types_default.a.string,
  toggleIcon: prop_types_default.a.string,
  style: prop_types_default.a.object,
  forwardRef: prop_types_default.a.func,
  indent: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.number]),
  isCollapsed: prop_types_default.a.bool,
  isSubNav: prop_types_default.a.bool,
  link: prop_types_default.a.string,
  linkOptions: prop_types_default.a.object,
  disabled: prop_types_default.a.bool
};
Item_NavItem.defaultProps = {
  isSubNav: false,
  indent: false,
  forwardRef: noop_default.a,
  isCollapsed: false,
  onClick: noop_default.a,
  onMouseEnter: noop_default.a,
  onMouseLeave: noop_default.a,
  disabled: false
};
// CONCATENATED MODULE: ./navigation/SubNavTransition.tsx



const SubNavTransition_ease = 'cubicBezier(.25,.1,.25,1)';

const SubNavTransition_formatStyle = function formatStyle(_ref) {
  let {
    maxHeight,
    opacity
  } = _ref;
  return {
    maxHeight,
    opacity
  };
};

function SubNavTransition() {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const {
    children,
    isCollapsed,
    maxHeight = 999
  } = props; // eslint-disable-next-line no-unused-vars

  const [immediate, setImmediate] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(false); // useEffect(() => {
  //     setImmediate(isCollapsed);
  // }, [isCollapsed]);

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Transition_Transition, {
    from: {
      maxHeight: 0,
      opacity: 0
    },
    enter: {
      maxHeight: {
        val: maxHeight,
        easing: 'easeInQuad',
        duration: 250
      },
      opacity: {
        val: 1,
        duration: 200,
        easing: 'cubic-bezier(0.5, -0.1, 1, 0.4)'
      }
    },
    leave: {
      maxHeight: {
        val: 0,
        easing: SubNavTransition_ease,
        duration: 250
      },
      opacity: {
        val: 0,
        duration: isCollapsed ? 1 : 200,
        easing: 'cubic-bezier(0.5, -0.1, 1, 0.4)'
      }
    },
    immediate: immediate
  }, typeof children === 'function' ? transitionStyle => children(SubNavTransition_formatStyle(transitionStyle)) : children);
}

SubNavTransition.propTypes = {
  children: prop_types_default.a.any,
  isCollapsed: prop_types_default.a.bool
};
/* harmony default export */ var navigation_SubNavTransition = (SubNavTransition);
// CONCATENATED MODULE: ./navigation/OpenIconTransition.tsx





const OpenIconTransition_formatStyle = function formatStyle(_ref) {
  let {
    rotate = 0
  } = _ref;
  return {
    transform: "rotate(".concat(Math.ceil(rotate), "deg)")
  };
};

function OpenIconTransition() {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const {
    children,
    isOpen
  } = props;
  const [immediate, setImmediate] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(true);
  Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useEffect"])(() => {
    setImmediate(false);
  }, []);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Transition_Transition, {
    immediate: immediate,
    state: isOpen ? 'enter' : 'leave',
    from: {
      rotate: 0
    },
    enter: {
      rotate: {
        val: 180,
        duration: 200,
        easing: 'cubic-bezier(.62, .05, .36, .95)'
      }
    },
    leave: {
      rotate: {
        val: 0,
        duration: 200,
        easing: 'cubic-bezier(.62, .05, .36, .95)'
      }
    }
  }, transitionStyle => {
    const formatedStyle = OpenIconTransition_formatStyle(transitionStyle);

    if (typeof children === 'function') {
      return children(formatedStyle);
    }

    if ( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(children)) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(children, {
        style: assign_default()(assign_default()({}, children.props && children.props.style), formatedStyle)
      });
    }

    return children;
  });
}

OpenIconTransition.propTypes = {
  isOpen: prop_types_default.a.bool.isRequired,
  children: prop_types_default.a.any.isRequired
};
/* harmony default export */ var navigation_OpenIconTransition = (OpenIconTransition);
// CONCATENATED MODULE: ./navigation/SubNav.tsx






/* eslint-disable max-len */

/* eslint-disable no-nested-ternary */














class SubNav_SubNav extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.setItemRef = ref => {
      if (ref && ref.current) {
        this.itemRef = ref;
      } else {
        this.itemRef = {
          current: ref
        };
      }
    };

    this.setTitleRef = ref => {
      if (ref && ref.current) {
        this.titleRef = ref;
      } else {
        this.titleRef = {
          current: ref
        };
      }
    };

    this.handleClick = e => {
      this.foundation.handleClick(e && e.nativeEvent, this.titleRef && this.titleRef.current);
    };

    this.handleKeyPress = e => {
      this.foundation.handleKeyPress(e && e.nativeEvent, this.titleRef && this.titleRef.current);
    };

    this.handleDropdownVisible = visible => this.foundation.handleDropdownVisibleChange(visible);

    this.state = {
      isHovered: false
    };
    this.adapter.setCache('firstMounted', true);
    this.titleRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.itemRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.foundation = new subNavFoundation_SubNavFoundation(this.adapter);
  }

  _invokeContextFunc(funcName) {
    if (funcName && this.context && typeof this.context[funcName] === 'function') {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return this.context[funcName](...args);
    }

    return null;
  }

  get adapter() {
    var _this = this;

    return assign_default()(assign_default()({}, super.adapter), {
      updateIsHovered: isHovered => this.setState({
        isHovered
      }),
      getOpenKeys: () => this.context && this.context.openKeys,
      getOpenKeysIsControlled: () => this.context && this.context.openKeysIsControlled,
      getCanUpdateOpenKeys: () => this.context && this.context.canUpdateOpenKeys,
      updateOpen: isOpen => this._invokeContextFunc(isOpen ? 'addOpenKeys' : 'removeOpenKeys', this.props.itemKey),
      notifyGlobalOpenChange: function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return _this._invokeContextFunc('onOpenChange', ...args);
      },
      notifyGlobalOnSelect: function () {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        return _this._invokeContextFunc('onSelect', ...args);
      },
      notifyGlobalOnClick: function () {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        return _this._invokeContextFunc('onClick', ...args);
      },
      getIsSelected: itemKey => {
        var _context;

        return Boolean(!isNullOrUndefined(itemKey) && includes_default()(_context = get_default()(this.context, 'selectedKeys', [])).call(_context, String(itemKey)));
      },
      getIsOpen: () => {
        var _context2;

        return Boolean(this.context && this.context.openKeys && includes_default()(_context2 = this.context.openKeys).call(_context2, String(this.props.itemKey)));
      }
    });
  }

  renderIcon(icon, pos, withTransition) {
    var _context3;

    let isToggleIcon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    let key = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    const {
      prefixCls
    } = this.context;
    let iconSize = 'large';

    if (pos === navigation_constants_strings.ICON_POS_RIGHT) {
      iconSize = 'default';
    }

    const className = classnames_default()("".concat(prefixCls, "-item-icon"), {
      [concat_default()(_context3 = "".concat(prefixCls, "-item-icon-toggle-")).call(_context3, this.context.toggleIconPosition)]: isToggleIcon,
      ["".concat(prefixCls, "-item-icon-info")]: !isToggleIcon
    });
    const isOpen = this.adapter.getIsOpen();
    const iconElem = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(icon) ? withTransition ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(navigation_OpenIconTransition, {
      isOpen: isOpen
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(icon, {
      size: iconSize
    })) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(icon, {
      size: iconSize
    }) : null;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("i", {
      key: key,
      className: className
    }, iconElem);
  }

  renderTitleDiv() {
    const {
      text,
      icon,
      itemKey,
      indent,
      disabled,
      level
    } = this.props;
    const {
      mode,
      isInSubNav,
      isCollapsed,
      prefixCls,
      subNavMotion,
      limitIndent
    } = this.context;
    const titleCls = classnames_default()("".concat(prefixCls, "-sub-title"), {
      ["".concat(prefixCls, "-sub-title-selected")]: this.adapter.getIsSelected(itemKey),
      ["".concat(prefixCls, "-sub-title-disabled")]: disabled
    });
    let withTransition = false;
    let toggleIconType = '';

    if (isCollapsed) {
      if (isInSubNav) {
        toggleIconType = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronRight, null);
      } else {
        toggleIconType = null;
      }
    } else if (mode === navigation_constants_strings.MODE_HORIZONTAL) {
      if (isInSubNav) {
        toggleIconType = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronRight, null);
      } else {
        toggleIconType = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronDown, null); // Horizontal mode does not require animation fix#1198
        // withTransition = true;
      }
    } else {
      if (subNavMotion) {
        withTransition = true;
      }

      toggleIconType = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronDown, null);
    }

    let placeholderIcons = null;

    if (mode === navigation_constants_strings.MODE_VERTICAL && !limitIndent && !isCollapsed) {
      /* Different icons' amount means different indents.*/
      const iconAmount = icon && !indent ? level : level - 1;
      placeholderIcons = times_default()(iconAmount, index => this.renderIcon(null, navigation_constants_strings.ICON_POS_RIGHT, false, false, index));
    }

    const titleDiv = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "menuitem",
      tabIndex: -1,
      ref: this.setTitleRef,
      className: titleCls,
      onClick: this.handleClick,
      onKeyPress: this.handleKeyPress
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-item-inner")
    }, placeholderIcons, this.context.toggleIconPosition === navigation_constants_strings.TOGGLE_ICON_LEFT && this.renderIcon(toggleIconType, navigation_constants_strings.ICON_POS_RIGHT, withTransition, true, 'key-toggle-position-left'), icon || indent || isInSubNav && mode !== navigation_constants_strings.MODE_HORIZONTAL ? this.renderIcon(icon, navigation_constants_strings.ICON_POS_LEFT, false, false, 'key-inSubNav-position-left') : null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(prefixCls, "-item-text")
    }, text), this.context.toggleIconPosition === navigation_constants_strings.TOGGLE_ICON_RIGHT && this.renderIcon(toggleIconType, navigation_constants_strings.ICON_POS_RIGHT, withTransition, true, 'key-toggle-position-right')));
    return titleDiv;
  }

  renderSubUl() {
    const {
      children,
      maxHeight
    } = this.props;
    const {
      isCollapsed,
      mode,
      subNavMotion,
      prefixCls
    } = this.context;
    const isOpen = this.adapter.getIsOpen();
    const isHorizontal = mode === navigation_constants_strings.MODE_HORIZONTAL;
    const subNavCls = classnames_default()("".concat(prefixCls, "-sub"), {
      ["".concat(prefixCls, "-sub-open")]: isOpen,
      ["".concat(prefixCls, "-sub-popover")]: isCollapsed || isHorizontal
    });
    const ulWithMotion = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(navigation_SubNavTransition, {
      motion: subNavMotion,
      isCollapsed: isCollapsed,
      maxHeight: maxHeight
    }, !isCollapsed && isOpen ? transitionStyle => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
      style: assign_default()(assign_default()({}, transitionStyle), {
        visibility: isCollapsed ? 'hidden' : 'visible'
      }),
      className: subNavCls
    }, children) : null);
    const finalDom = isHorizontal ? null : subNavMotion ? ulWithMotion : isOpen && !isCollapsed ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
      className: subNavCls
    }, children) : null;
    return finalDom;
  }

  wrapDropdown() {
    let elem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let _elem = elem;
    const {
      children,
      dropdownStyle,
      disabled
    } = this.props;
    const {
      mode,
      isInSubNav,
      isCollapsed,
      subNavCloseDelay,
      subNavOpenDelay,
      prefixCls
    } = this.context;
    const isOpen = this.adapter.getIsOpen();
    const openKeysIsControlled = this.adapter.getOpenKeysIsControlled();
    const subNavCls = classnames_default()({
      ["".concat(prefixCls, "-popover")]: isCollapsed
    });
    const dropdownProps = {
      trigger: 'hover',
      style: dropdownStyle
    };

    if (openKeysIsControlled) {
      dropdownProps.trigger = 'custom';
      dropdownProps.visible = isOpen;
    }

    if (isCollapsed || mode === navigation_constants_strings.MODE_HORIZONTAL) {
      // Do not show dropdown when disabled
      _elem = !disabled ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dropdown_0, assign_default()({
        className: subNavCls,
        render: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dropdown_0.Menu, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
          className: "".concat(prefixCls, "-popover-crumb")
        }), children),
        position: mode === navigation_constants_strings.MODE_HORIZONTAL && !isInSubNav ? 'bottomLeft' : 'rightTop',
        mouseEnterDelay: subNavOpenDelay,
        mouseLeaveDelay: subNavCloseDelay,
        onVisibleChange: this.handleDropdownVisible
      }, dropdownProps), _elem) : _elem;
    }

    return _elem;
  }

  render() {
    const {
      itemKey,
      style,
      onMouseEnter,
      onMouseLeave,
      disabled,
      text
    } = this.props;
    const {
      mode,
      isCollapsed,
      prefixCls
    } = this.context;
    let titleDiv = this.renderTitleDiv();
    const subUl = this.renderSubUl(); // When mode=horizontal, it is displayed in Dropdown

    if (isCollapsed || mode === navigation_constants_strings.MODE_HORIZONTAL) {
      titleDiv = this.wrapDropdown(titleDiv);
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Item_NavItem, {
      style: style,
      isSubNav: true,
      itemKey: itemKey,
      forwardRef: this.setItemRef,
      isCollapsed: isCollapsed,
      className: "".concat(prefixCls, "-sub-wrap"),
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      disabled: disabled,
      text: text
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(nav_context.Provider, {
      value: assign_default()(assign_default()({}, this.context), {
        isInSubNav: true
      })
    }, titleDiv, subUl));
  }

}
SubNav_SubNav.contextType = nav_context;
SubNav_SubNav.propTypes = {
  /**
   * Unique identification
   */
  itemKey: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),

  /**
   * Copywriting
   */
  text: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node]),

  /**
   * Whether child navigation is expanded
   */
  isOpen: prop_types_default.a.bool,

  /**
   * Whether it is in the state of being stowed to the sidebar
   */
  isCollapsed: prop_types_default.a.bool,

  /**
   * Whether to keep the left Icon placeholder
   */
  indent: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.number]),

  /**
   * Nested child elements
   */
  children: prop_types_default.a.node,

  /**
   * The icon name of the right control switch (on and off status)
   */
  toggleIcon: prop_types_default.a.oneOfType([prop_types_default.a.any, prop_types_default.a.shape({
    open: prop_types_default.a.string,
    closed: prop_types_default.a.string
  })]),
  style: prop_types_default.a.object,

  /**
   * Icon name on the left
   */
  icon: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node]),

  /**
   * Maximum height (for animation)
   */
  maxHeight: prop_types_default.a.number,
  onMouseEnter: prop_types_default.a.func,
  onMouseLeave: prop_types_default.a.func,
  // Is it disabled
  disabled: prop_types_default.a.bool,
  level: prop_types_default.a.number
};
SubNav_SubNav.defaultProps = {
  level: 0,
  indent: false,
  isCollapsed: false,
  isOpen: false,
  maxHeight: navigation_constants_numbers.DEFAULT_SUBNAV_MAX_HEIGHT,
  toggleIcon: {
    open: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronUp, null),
    closed: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronDown, null)
  },
  disabled: false
};
// CONCATENATED MODULE: ./navigation/CollapseButton.tsx






function CollapseButton(_ref) {
  let {
    prefixCls,
    locale,
    collapseText,
    isCollapsed,
    onClick = noop_default.a
  } = _ref;

  const handleClick = () => {
    if (typeof onClick === 'function') {
      onClick(!isCollapsed);
    }
  };

  const btnProps = {
    icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconSidebar, null),
    type: 'tertiary',
    theme: 'borderless',
    onClick: handleClick
  };
  let finalCollapseText = isCollapsed ? locale === null || locale === void 0 ? void 0 : locale.expandText : locale === null || locale === void 0 ? void 0 : locale.collapseText;

  if (typeof collapseText === 'function') {
    finalCollapseText = collapseText(isCollapsed);
  }

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: "".concat(prefixCls, "-collapse-btn")
  }, isCollapsed ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tooltip_Tooltip, {
    content: finalCollapseText,
    position: "right"
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(button_0, assign_default()({}, btnProps))) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(button_0, assign_default()({}, btnProps), finalCollapseText));
}
// CONCATENATED MODULE: ./navigation/Footer.tsx








class Footer_NavFooter extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  constructor() {
    super(...arguments);

    this.renderCollapseButton = () => {
      const {
        collapseButton,
        collapseText
      } = this.props;

      if ( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(collapseButton)) {
        return collapseButton;
      }

      const {
        onCollapseChange,
        prefixCls,
        locale,
        isCollapsed
      } = this.context;
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(CollapseButton, assign_default()({
        prefixCls: prefixCls,
        isCollapsed: isCollapsed,
        locale: locale,
        onClick: onCollapseChange,
        collapseText: collapseText
      }, collapseButton));
    };
  }

  render() {
    const {
      style,
      className,
      collapseButton
    } = this.props;
    let {
      children
    } = this.props;
    const {
      isCollapsed,
      mode
    } = this.context;

    if (! /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(children) && collapseButton && mode !== navigation_constants_strings.MODE_HORIZONTAL) {
      children = this.renderCollapseButton();
    }

    const wrapCls = classnames_default()(className, "".concat(navigation_constants_cssClasses.PREFIX, "-footer"), {
      ["".concat(navigation_constants_cssClasses.PREFIX, "-footer-collapsed")]: isCollapsed
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: wrapCls,
      style: style
    }, children);
  }

}
Footer_NavFooter.contextType = nav_context;
Footer_NavFooter.propTypes = {
  children: prop_types_default.a.node,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  collapseButton: prop_types_default.a.oneOfType([prop_types_default.a.node, prop_types_default.a.bool]),
  collapseText: prop_types_default.a.func
};
Footer_NavFooter.defaultProps = {
  collapseButton: false
};
// CONCATENATED MODULE: ./navigation/Header.tsx








class Header_NavHeader extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  renderLogo(logo) {
    if ( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(logo)) {
      return logo;
    }

    return null;
  }

  render() {
    const {
      children,
      style,
      className,
      logo,
      text,
      link,
      linkOptions,
      prefixCls
    } = this.props;
    const {
      isCollapsed
    } = this.context;
    const wrapCls = classnames_default()(className, "".concat(navigation_constants_cssClasses.PREFIX, "-header"), {
      ["".concat(navigation_constants_cssClasses.PREFIX, "-header-collapsed")]: isCollapsed
    });
    let wrappedChildren = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, logo ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("i", {
      className: "".concat(navigation_constants_cssClasses.PREFIX, "-header-logo")
    }, this.renderLogo(logo)) : null, !isNullOrUndefined(text) && !isCollapsed ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(navigation_constants_cssClasses.PREFIX, "-header-text")
    }, text) : null, children);

    if (typeof link === 'string') {
      wrappedChildren = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("a", assign_default()({
        className: "".concat(prefixCls, "-header-link"),
        href: link
      }, linkOptions), wrappedChildren);
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: wrapCls,
      style: style
    }, wrappedChildren);
  }

}
Header_NavHeader.contextType = nav_context;
Header_NavHeader.propTypes = {
  prefixCls: prop_types_default.a.string,
  logo: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.object, prop_types_default.a.node]),
  text: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node]),
  children: prop_types_default.a.node,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  link: prop_types_default.a.string,
  linkOptions: prop_types_default.a.object
};
Header_NavHeader.defaultProps = {
  prefixCls: navigation_constants_cssClasses.PREFIX
};
// CONCATENATED MODULE: ./navigation/index.tsx











/* eslint-disable max-lines-per-function */





















function createAddKeysFn(context, keyName) {
  return function addKeys() {
    const handleKeys = new set_default.a(context.state[keyName]);

    for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {
      keys[_key] = arguments[_key];
    }

    for_each_default()(keys).call(keys, key => key && handleKeys.add(key));

    context.setState({
      [keyName]: from_default()(handleKeys)
    });
  };
}

function createRemoveKeysFn(context, keyName) {
  return function removeKeys() {
    const handleKeys = new set_default.a(context.state[keyName]);

    for (var _len2 = arguments.length, keys = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      keys[_key2] = arguments[_key2];
    }

    for_each_default()(keys).call(keys, key => key && handleKeys.delete(key));

    context.setState({
      [keyName]: from_default()(handleKeys)
    });
  };
}

const {
  hasOwnProperty: navigation_hasOwnProperty
} = Object.prototype;

class navigation_Nav extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.onCollapseChange = () => {
      this.foundation.handleCollapseChange();
    };

    this.foundation = new foundation_NavigationFoundation(this.adapter);
    this.itemsChanged = true;
    const {
      isCollapsed,
      defaultIsCollapsed,
      items,
      children
    } = props;
    const initState = {
      isCollapsed: Boolean(this.isControlled('isCollapsed') ? isCollapsed : defaultIsCollapsed),
      // calc state
      openKeys: [],
      items: [],
      itemKeysMap: {},
      selectedKeys: []
    };
    this.state = assign_default()({}, initState);

    if (items && items.length || children) {
      const calcState = this.foundation.init('constructor');
      this.state = assign_default()(assign_default()({}, initState), calcState);
    }
  }

  static getDerivedStateFromProps(props, state) {
    const willUpdateState = {};

    if (navigation_hasOwnProperty.call(props, 'isCollapsed') && props.isCollapsed !== state.isCollapsed) {
      willUpdateState.isCollapsed = props.isCollapsed;
    }

    return willUpdateState;
  }

  componentDidMount() {// override BaseComponent
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevProps.items !== this.props.items || prevProps.children !== this.props.children) {
      this.foundation.init();
    } else {
      this.foundation.handleItemsChange(false);
      const {
        selectedKeys
      } = this.state;

      if (this.props.selectedKeys && !isEqual_default()(prevProps.selectedKeys, this.props.selectedKeys)) {
        this.adapter.updateSelectedKeys(this.props.selectedKeys);
      }

      if (this.props.openKeys && !isEqual_default()(prevProps.openKeys, this.props.openKeys)) {
        this.adapter.updateOpenKeys(this.props.openKeys);
      }

      if (!isEqual_default()(selectedKeys, prevState.selectedKeys)) {
        const parentSelectKeys = this.foundation.selectLevelZeroParentKeys(null, ...selectedKeys);
        this.adapter.addSelectedKeys(...parentSelectKeys);
      }
    }
  }

  get adapter() {
    var _this = this;

    return assign_default()(assign_default()({}, super.adapter), {
      notifySelect: function () {
        return _this.props.onSelect(...arguments);
      },
      notifyOpenChange: function () {
        return _this.props.onOpenChange(...arguments);
      },
      setIsCollapsed: isCollapsed => this.setState({
        isCollapsed
      }),
      notifyCollapseChange: function () {
        return _this.props.onCollapseChange(...arguments);
      },
      updateItems: items => this.setState({
        items: [...items]
      }),
      setItemKeysMap: itemKeysMap => this.setState({
        itemKeysMap: assign_default()({}, itemKeysMap)
      }),
      addSelectedKeys: createAddKeysFn(this, 'selectedKeys'),
      removeSelectedKeys: createRemoveKeysFn(this, 'selectedKeys'),
      updateSelectedKeys: selectedKeys => this.setState({
        selectedKeys: [...selectedKeys]
      }),
      updateOpenKeys: openKeys => this.setState({
        openKeys: [...openKeys]
      }),
      addOpenKeys: createAddKeysFn(this, 'openKeys'),
      removeOpenKeys: createRemoveKeysFn(this, 'openKeys'),
      setItemsChanged: isChanged => {
        this.itemsChanged = isChanged;
      }
    });
  }
  /**
   * Render navigation items recursively
   *
   * @param {NavItem[]} items
   * @returns {JSX.Element}
   */


  renderItems() {
    let items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    const finalDom = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, map_default()(items).call(items, (item, idx) => {
      if (is_array_default()(item.items) && item.items.length) {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(SubNav_SubNav, assign_default()({
          key: item.itemKey || String(level) + idx
        }, item, {
          level: level
        }), this.renderItems(item.items, level + 1));
      } else {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Item_NavItem, assign_default()({
          key: item.itemKey || String(level) + idx
        }, item, {
          level: level
        }));
      }
    }));
    return finalDom;
  }

  render() {
    const {
      children: originChildren,
      mode,
      onOpenChange,
      onSelect,
      onClick,
      style,
      className,
      subNavCloseDelay,
      subNavOpenDelay,
      subNavMotion,
      tooltipShowDelay,
      tooltipHideDelay,
      prefixCls,
      bodyStyle,
      footer,
      header,
      toggleIconPosition,
      limitIndent
    } = this.props;
    const {
      selectedKeys,
      openKeys,
      items,
      isCollapsed
    } = this.state;
    const {
      updateOpenKeys,
      addOpenKeys,
      removeOpenKeys,
      updateSelectedKeys,
      addSelectedKeys,
      removeSelectedKeys
    } = this.adapter;

    const finalStyle = assign_default()({}, style);

    let children = external_root_React_commonjs2_react_commonjs_react_amd_react_["Children"].toArray(originChildren);
    const footers = [];
    const headers = [];

    if ( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(footer)) {
      footers.push( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Footer_NavFooter, {
        key: 0
      }, footer));
    } else if (footer && typeof footer === 'object') {
      footers.push( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Footer_NavFooter, assign_default()({
        key: 0
      }, footer)));
    }

    if ( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(header)) {
      headers.push( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Header_NavHeader, {
        key: 0
      }, header));
    } else if (header && typeof header === 'object') {
      headers.push( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Header_NavHeader, assign_default()({
        key: 0
      }, header)));
    }

    if (is_array_default()(children) && children.length) {
      children = [...children];
      let childrenLength = children.length;

      for (let i = 0; i < childrenLength; i++) {
        const child = children[i];

        if (child.type === Footer_NavFooter || get_default()(child, 'type.name') === 'NavFooter') {
          footers.push(child);

          splice_default()(children).call(children, i, 1);

          i--;
          childrenLength--;
        } else if (child.type === Header_NavHeader || get_default()(child, 'type.name') === 'NavHeader') {
          headers.push(child);

          splice_default()(children).call(children, i, 1);

          i--;
          childrenLength--;
        }
      }
    }

    const finalCls = classnames_default()(prefixCls, className, {
      ["".concat(prefixCls, "-collapsed")]: isCollapsed,
      ["".concat(prefixCls, "-horizontal")]: mode === 'horizontal',
      ["".concat(prefixCls, "-vertical")]: mode === 'vertical'
    });
    const headerListOuterCls = classnames_default()("".concat(prefixCls, "-header-list-outer"), {
      ["".concat(prefixCls, "-header-list-outer-collapsed")]: isCollapsed
    });

    if (this.itemsChanged) {
      this.adapter.setCache('itemElems', this.renderItems(items));
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
      componentName: "Navigation"
    }, locale => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(nav_context.Provider, {
      value: {
        subNavCloseDelay,
        subNavOpenDelay,
        subNavMotion,
        tooltipShowDelay,
        tooltipHideDelay,
        openKeys,
        openKeysIsControlled: this.isControlled('openKeys') && mode === 'vertical' && !isCollapsed,
        // canUpdateOpenKeys: mode === 'vertical' && !isCollapsed,
        canUpdateOpenKeys: true,
        selectedKeys,
        selectedKeysIsControlled: this.isControlled('selectedKeys'),
        isCollapsed,
        onCollapseChange: this.onCollapseChange,
        mode,
        onSelect,
        onOpenChange,
        updateOpenKeys,
        addOpenKeys,
        removeOpenKeys,
        updateSelectedKeys,
        addSelectedKeys,
        removeSelectedKeys,
        onClick,
        locale,
        prefixCls,
        toggleIconPosition,
        limitIndent
      }
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: finalCls,
      style: finalStyle
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-inner")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: headerListOuterCls
    }, headers, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      style: bodyStyle,
      className: "".concat(prefixCls, "-list-wrapper")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
      role: "menu",
      "aria-orientation": mode,
      className: "".concat(prefixCls, "-list")
    }, this.adapter.getCache('itemElems'), children))), footers))));
  }

}

navigation_Nav.Sub = SubNav_SubNav;
navigation_Nav.Item = Item_NavItem;
navigation_Nav.Header = Header_NavHeader;
navigation_Nav.Footer = Footer_NavFooter;
navigation_Nav.propTypes = {
  // Initial expanded SubNav navigation key array
  defaultOpenKeys: prop_types_default.a.arrayOf(prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number])),
  openKeys: prop_types_default.a.arrayOf(prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number])),
  // Initial selected navigation key array
  defaultSelectedKeys: prop_types_default.a.arrayOf(prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number])),
  selectedKeys: prop_types_default.a.arrayOf(prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number])),
  // Navigation type, now supports vertical, horizontal
  mode: prop_types_default.a.oneOf([...navigation_constants_strings.MODE]),
  // Triggered when selecting a navigation item
  onSelect: prop_types_default.a.func,
  // Triggered when clicking a navigation item
  onClick: prop_types_default.a.func,
  // SubNav expand/close callback
  onOpenChange: prop_types_default.a.func,
  // Array of options (nested options can continue)
  items: prop_types_default.a.array,
  // Is it in the state of being stowed to the sidebar
  isCollapsed: prop_types_default.a.bool,
  defaultIsCollapsed: prop_types_default.a.bool,
  onCollapseChange: prop_types_default.a.func,
  multiple: prop_types_default.a.bool,
  onDeselect: prop_types_default.a.func,
  subNavMotion: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.object, prop_types_default.a.func]),
  subNavCloseDelay: prop_types_default.a.number,
  subNavOpenDelay: prop_types_default.a.number,
  tooltipShowDelay: prop_types_default.a.number,
  tooltipHideDelay: prop_types_default.a.number,
  children: prop_types_default.a.node,
  style: prop_types_default.a.object,
  bodyStyle: prop_types_default.a.object,
  className: prop_types_default.a.string,
  toggleIconPosition: prop_types_default.a.string,
  prefixCls: prop_types_default.a.string,
  header: prop_types_default.a.oneOfType([prop_types_default.a.node, prop_types_default.a.object]),
  footer: prop_types_default.a.oneOfType([prop_types_default.a.node, prop_types_default.a.object]),
  limitIndent: prop_types_default.a.bool
};
navigation_Nav.defaultProps = {
  subNavCloseDelay: navigation_constants_numbers.DEFAULT_SUBNAV_CLOSE_DELAY,
  subNavOpenDelay: navigation_constants_numbers.DEFAULT_SUBNAV_OPEN_DELAY,
  tooltipHideDelay: navigation_constants_numbers.DEFAULT_TOOLTIP_HIDE_DELAY,
  tooltipShowDelay: navigation_constants_numbers.DEFAULT_TOOLTIP_SHOW_DELAY,
  onCollapseChange: noop_default.a,
  onSelect: noop_default.a,
  onClick: noop_default.a,
  onOpenChange: noop_default.a,
  toggleIconPosition: 'right',
  limitIndent: true,
  prefixCls: navigation_constants_cssClasses.PREFIX,
  subNavMotion: true,
  // isOpen: false,
  mode: navigation_constants_strings.MODE_VERTICAL // defaultOpenKeys: [],
  // defaultSelectedKeys: [],
  // items: [],

};
/* harmony default export */ var navigation_0 = (navigation_Nav);
// CONCATENATED MODULE: ../semi-foundation/notification/notificationListFoundation.ts


/* eslint-disable no-useless-constructor */

class notificationListFoundation_NotificationListFoundation extends foundation {
  addNotice(opts) {
    // let notices = this._adapter.getNotices();
    const notices = this._adapter.getNotices(); // opts = { ...opts, id };
    // if (opts.duration) {
    //     setTimeout(() => {
    //         this.removeNotice(opts.id);
    //     }, opts.duration * 1000);
    // }


    this._adapter.updateNotices([opts, ...notices]); // return id;

  }

  removeNotice(id) {
    let notices = this._adapter.getNotices(); // let notices = this._adapter.getNotices();


    const removedItems = [];
    notices = filter_default()(notices).call(notices, notice => {
      if (notice.id === id) {
        removedItems.push(notice);
        return false;
      }

      return true;
    });

    this._adapter.updateNotices(notices, removedItems); // This must be updated at the same time https://github.com/facebook/react/issues/12312

  }

  destroyAll() {
    const notices = this._adapter.getNotices();

    if (notices.length > 0) {
      this._adapter.updateNotices([], notices);
    }
  }

}
// CONCATENATED MODULE: ../semi-foundation/notification/constants.ts

const notification_constants_cssClasses = {
  WRAPPER: "".concat(BASE_CLASS_PREFIX, "-notification-wrapper"),
  LIST: "".concat(BASE_CLASS_PREFIX, "-notification-list"),
  NOTICE: "".concat(BASE_CLASS_PREFIX, "-notification-notice")
};
const notification_constants_strings = {
  types: ['warning', 'success', 'info', 'error', 'default'],
  themes: ['normal', 'light'],
  directions: ['ltr', 'rtl']
};
const notification_constants_numbers = {
  duration: 3 // default close time, unit: s

};

// CONCATENATED MODULE: ../semi-foundation/notification/notificationFoundation.ts




class notificationFoundation_NotificationFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()(assign_default()({}, notificationFoundation_NotificationFoundation.defaultAdapter), adapter));
    this._timer = null;
    this._id = null; // cache id
  }

  init() {
    this._startCloseTimer();

    this._id = this.getProp('id');
  }

  destroy() {
    this._clearCloseTimer();
  }

  _startCloseTimer() {
    // unit: s
    const duration = this.getProp('duration');

    if (duration && isNumber_default()(duration)) {
      this._timer = set_timeout_default()(() => {
        this.close(); // call parent to remove itself
      }, duration * 1000);
    }
  }

  close(e) {
    if (e) {
      e.stopPropagation();
    }

    this._adapter.notifyWrapperToRemove(this._id);

    this._adapter.notifyClose();
  }

  _clearCloseTimer() {
    if (this._timer) {
      clearTimeout(this._timer);
      this._timer = null;
    }
  }

  restartCloseTimer() {
    this._clearCloseTimer();

    this._startCloseTimer();
  }

}
// CONCATENATED MODULE: ./notification/notice.tsx







var notice_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable no-unreachable */













const notice_prefixCls = notification_constants_cssClasses.NOTICE;
const {
  duration: notice_duration
} = notification_constants_numbers;
const {
  types: notice_types,
  themes,
  directions
} = notification_constants_strings;

class notice_Notice extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.clearCloseTimer = () => {
      this.foundation._clearCloseTimer();
    };

    this.startCloseTimer = () => {
      this.foundation._startCloseTimer();
    };

    this.close = e => {
      this.props.onCloseClick(this.props.id);
      this.foundation.close(e);
    };

    this.notifyClick = e => {
      this.props.onClick(e);
    };

    this.state = {
      visible: true
    };
    this.foundation = new notificationFoundation_NotificationFoundation(this.adapter);
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      notifyWrapperToRemove: id => {
        this.props.close(id);
      },
      notifyClose: () => {
        this.props.onClose();
        this.props.onHookClose && this.props.onHookClose();
      }
    });
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  renderTypeIcon() {
    var _context;

    const {
      type,
      icon
    } = this.props;
    const iconMap = {
      warning: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconAlertTriangle, {
        size: "large"
      }),
      success: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconTickCircle, {
        size: "large"
      }),
      info: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconInfoCircle, {
        size: "large"
      }),
      error: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconAlertCircle, {
        size: "large"
      })
    };
    let iconType = iconMap[type];
    const iconCls = classnames_default()({
      ["".concat(notice_prefixCls, "-icon")]: true,
      [concat_default()(_context = "".concat(notice_prefixCls, "-")).call(_context, type)]: true
    });

    if (icon) {
      iconType = icon;
    }

    if (iconType) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: iconCls,
        "x-semi-prop": "icon"
      }, Object(_utils["e" /* isSemiIcon */])(iconType) ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(iconType, {
        size: iconType.props.size || 'large'
      }) : iconType);
    }

    return null;
  }

  render() {
    var _context2, _context3;

    const direction = this.props.direction || this.context.direction;
    const defaultPosition = direction === 'rtl' ? 'topLeft' : 'topRight';

    const _a = this.props,
          {
      content,
      title,
      theme,
      position = defaultPosition,
      type,
      id,
      onCloseClick,
      className,
      showClose,
      style
    } = _a,
          attr = notice_rest(_a, ["content", "title", "theme", "position", "type", "id", "onCloseClick", "className", "showClose", "style"]);

    const {
      visible
    } = this.state;
    const wrapper = classnames_default()(notice_prefixCls, className, {
      ["".concat(notice_prefixCls, "-close")]: !visible,
      ["".concat(notice_prefixCls, "-icon-show")]: includes_default()(notice_types).call(notice_types, type),
      [concat_default()(_context2 = "".concat(notice_prefixCls, "-")).call(_context2, type)]: true,
      [concat_default()(_context3 = "".concat(notice_prefixCls, "-")).call(_context3, theme)]: theme === 'light',
      ["".concat(notice_prefixCls, "-rtl")]: direction === 'rtl'
    });
    const titleID = getUuidShort({});
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/no-static-element-interactions
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: wrapper,
        style: style,
        onMouseEnter: this.clearCloseTimer,
        onMouseLeave: this.startCloseTimer,
        onClick: this.notifyClick,
        "aria-labelledby": titleID,
        role: 'alert'
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", null, this.renderTypeIcon()), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(notice_prefixCls, "-inner")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(notice_prefixCls, "-content-wrapper")
      }, title ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        id: titleID,
        className: "".concat(notice_prefixCls, "-title"),
        "x-semi-prop": "title"
      }, title) : '', content ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(notice_prefixCls, "-content"),
        "x-semi-prop": "content"
      }, content) : ''), showClose && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(iconButton_0, {
        className: "".concat(notice_prefixCls, "-icon-close"),
        type: "tertiary",
        icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClose, null),
        theme: "borderless",
        size: "small",
        onClick: this.close
      })))
    );
  }

}

notice_Notice.contextType = configProvider_context;
notice_Notice.propTypes = {
  duration: prop_types_default.a.number,
  id: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  title: prop_types_default.a.node,
  content: prop_types_default.a.node,
  type: prop_types_default.a.oneOf(notice_types),
  theme: prop_types_default.a.oneOf(themes),
  icon: prop_types_default.a.node,
  onClick: prop_types_default.a.func,
  onClose: prop_types_default.a.func,
  onCloseClick: prop_types_default.a.func,
  showClose: prop_types_default.a.bool,
  // private props
  close: prop_types_default.a.func,
  direction: prop_types_default.a.oneOf(directions)
};
notice_Notice.defaultProps = {
  duration: notice_duration,
  id: '',
  close: noop_default.a,
  onClose: noop_default.a,
  onClick: noop_default.a,
  onCloseClick: noop_default.a,
  content: '',
  title: '',
  showClose: true,
  theme: 'normal'
};
/* harmony default export */ var notification_notice = (notice_Notice);
// EXTERNAL MODULE: ../semi-foundation/notification/notification.scss
var notification = __webpack_require__("hIpk");

// CONCATENATED MODULE: ./notification/NoticeTransition.tsx

// @ts-ignore  Currently there is no types for semi-animation-react


function NoticeTransition() {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let {
    motion = {}
  } = props;
  const {
    position = 'topRight'
  } = props;

  const formatStyle = function formatStyle(_ref) {
    let {
      translate,
      opacity
    } = _ref;
    let transform = "translateX(".concat(translate, "%)");

    if (position && typeof position === 'string') {
      if (/left/i.test(position)) {
        transform = "translateX(".concat(-translate, "%)");
      } else if (/right/i.test(position)) {
        transform = "translateX(".concat(translate, "%)");
      } else if (/top/i.test(position)) {
        transform = "translateY(".concat(-translate, "%)");
      } else {
        transform = "translateY(".concat(translate, "%)");
      }
    }

    return {
      transform,
      opacity
    };
  };

  if (typeof motion === 'function') {
    motion = motion(props);
  } else if (!motion || typeof motion !== 'object') {
    motion = {};
  }

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Transition_Transition // onFrame={style => console.log(formatStyle(style))}
  , assign_default()({
    // onFrame={style => console.log(formatStyle(style))}
    from: {
      translate: 100,
      opacity: 0
    },
    enter: {
      translate: {
        val: 0,
        tension: 560,
        friction: 32
      },
      opacity: {
        val: 1,
        duration: 200
      }
    },
    leave: {
      translate: {
        val: 100,
        easing: 'easeOutCubic',
        duration: 300
      },
      opacity: {
        val: 0,
        duration: 200
      }
    }
  }, motion), typeof props.children === 'function' ? transitionStyle => props.children(formatStyle(transitionStyle)) : props.children);
}
// CONCATENATED MODULE: ./notification/useNotification/HookNotice.tsx




var HookNotice_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};




const HookNotice = (_a, ref) => {
  var {
    afterClose
  } = _a,
      config = HookNotice_rest(_a, ["afterClose"]);

  const [visible, setVisible] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(true);

  const close = () => {
    setVisible(false);
  };

  external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.useImperativeHandle(ref, () => ({
    close: () => {
      setVisible(false);
    }
  }));
  Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useEffect"])(() => {
    if (!visible) {
      afterClose(String(config.id));
    }
  }, [visible]);
  return visible ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(notification_notice, assign_default()({}, config, {
    onHookClose: close
  })) : null;
};

/* harmony default export */ var useNotification_HookNotice = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.forwardRef(HookNotice));
// CONCATENATED MODULE: ./notification/useNotification/index.tsx












 // TODO: Automatic folding + unfolding function when there are more than N

const useNotification_defaultConfig = {
  duration: 3,
  position: 'topRight',
  motion: true,
  content: '',
  title: '',
  zIndex: 1010
};

function useNotification_usePatchElement() {
  const [elements, setElements] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])([]);

  function patchElement(element, config) {
    setElements(originElements => [{
      element,
      config
    }, ...originElements]);
    return id => {
      setElements(originElements => filter_default()(originElements).call(originElements, _ref => {
        let {
          config: configOfCurrentElement
        } = _ref;
        return configOfCurrentElement.id !== id;
      }));
    };
  }

  function renderList() {
    var _context;

    const noticesInPosition = {
      top: [],
      topLeft: [],
      topRight: [],
      bottom: [],
      bottomLeft: [],
      bottomRight: []
    };

    for_each_default()(elements).call(elements, _ref2 => {
      let {
        element,
        config
      } = _ref2;
      const {
        position
      } = config;
      noticesInPosition[position].push(element);
    });

    return map_default()(_context = object_entries_default()(noticesInPosition)).call(_context, obj => {
      const pos = obj[0];
      const notices = obj[1]; // @ts-ignore

      return is_array_default()(notices) && notices.length ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        key: pos,
        className: classnames_default()(notification_constants_cssClasses.LIST),
        placement: pos
      }, notices) : null;
    });
  }

  return [renderList(), patchElement];
}

function useNotification() {
  const [elements, patchElement] = useNotification_usePatchElement();
  const noticeRef = new core_js_stable_map_default.a();

  const addNotice = config => {
    const id = getUuid('semi_notice_');

    const mergeConfig = assign_default()(assign_default()({}, config), {
      id
    }); // eslint-disable-next-line prefer-const


    let closeFunc;

    const ref = ele => {
      noticeRef.set(id, ele);
    };

    const notice = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(useNotification_HookNotice, assign_default()({
      key: id
    }, mergeConfig, {
      afterClose: instanceID => closeFunc(instanceID),
      ref: ref
    }));
    closeFunc = patchElement(notice, assign_default()({}, mergeConfig));
    return id;
  };

  const removeElement = instanceID => {
    const ele = noticeRef.get(instanceID);
    ele && ele.close();
  };

  return [{
    success: config => addNotice(assign_default()(assign_default()(assign_default()({}, useNotification_defaultConfig), config), {
      type: 'success'
    })),
    info: config => addNotice(assign_default()(assign_default()(assign_default()({}, useNotification_defaultConfig), config), {
      type: 'info'
    })),
    error: config => addNotice(assign_default()(assign_default()(assign_default()({}, useNotification_defaultConfig), config), {
      type: 'error'
    })),
    warning: config => addNotice(assign_default()(assign_default()(assign_default()({}, useNotification_defaultConfig), config), {
      type: 'warning'
    })),
    open: config => addNotice(assign_default()(assign_default()(assign_default()({}, useNotification_defaultConfig), config), {
      type: 'default'
    })),
    close: removeElement
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, elements)];
}
// CONCATENATED MODULE: ./notification/index.tsx





















 // TODO: Automatic folding + unfolding function when there are more than N



let notification_ref = null;
const notification_defaultConfig = {
  duration: 3,
  position: 'topRight',
  motion: true,
  content: '',
  title: '',
  zIndex: 1010
};

class notification_NotificationList extends baseComponent_BaseComponent {
  constructor(props) {
    var _this;

    super(props);
    _this = this;

    this.add = noticeOpts => this.foundation.addNotice(noticeOpts);

    this.remove = id => {
      this.foundation.removeNotice(String(id));
    };

    this.destroyAll = () => this.foundation.destroyAll();

    this.renderNoticeInPosition = function (notices, position) {
      let removedItems = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      const className = classnames_default()(notification_constants_cssClasses.LIST); // TODO notifyOnClose

      if (notices.length) {
        const style = _this.setPosInStyle(notices[0]);

        return (
          /*#__PURE__*/
          // @ts-ignore
          external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
            placement: position,
            key: position,
            className: className,
            style: style
          }, map_default()(notices).call(notices, (notice, index) => notice.motion ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(NoticeTransition, {
            key: notice.id || index,
            position: position,
            motion: notice.motion
          }, find_default()(removedItems).call(removedItems, item => item.id === notice.id) ? null : transitionStyle => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(notification_notice, assign_default()({}, notice, {
            style: assign_default()(assign_default()({}, transitionStyle), notice.style),
            key: notice.id,
            close: _this.remove
          }))) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(notification_notice, assign_default()({}, notice, {
            style: assign_default()({}, notice.style),
            key: notice.id,
            close: _this.remove
          }))))
        );
      }

      return null;
    };

    this.state = {
      notices: [],
      removedItems: []
    };
    this.noticeStorage = [];
    this.removeItemStorage = [];
    this.foundation = new notificationListFoundation_NotificationListFoundation(this.adapter);
  }

  get adapter() {
    var _this2 = this;

    return assign_default()(assign_default()({}, super.adapter), {
      updateNotices: function (notices) {
        let removedItems = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        _this2.noticeStorage = [...notices];
        _this2.removeItemStorage = [...removedItems]; // setState is async sometimes and react often merges state, so use "this" , make sure other code always get right data.

        _this2.setState({
          notices,
          removedItems
        });
      },
      getNotices: () => this.noticeStorage
    });
  }

  static addNotice(notice) {
    const id = getUuid('notification');

    if (!notification_ref) {
      const {
        getPopupContainer
      } = notice;
      const div = document.createElement('div');

      if (!this.wrapperId) {
        var _context;

        this.wrapperId = slice_default()(_context = getUuid('notification-wrapper')).call(_context, 0, 32);
      }

      div.className = notification_constants_cssClasses.WRAPPER;
      div.id = this.wrapperId;
      div.style.zIndex = String(typeof notice.zIndex === 'number' ? notice.zIndex : notification_defaultConfig.zIndex);

      if (getPopupContainer) {
        const container = getPopupContainer();
        container.appendChild(div);
      } else {
        document.body.appendChild(div);
      }

      external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default.a.render( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(notification_NotificationList, {
        ref: instance => notification_ref = instance
      }), div, () => {
        notification_ref.add(assign_default()(assign_default()({}, notice), {
          id
        }));
      });
    } else {
      notification_ref.add(assign_default()(assign_default()({}, notice), {
        id
      }));
    }

    return id;
  }

  static removeNotice(id) {
    if (notification_ref) {
      notification_ref.remove(id);
    }

    return id;
  }

  static info(opts) {
    return this.addNotice(assign_default()(assign_default()(assign_default()({}, notification_defaultConfig), opts), {
      type: 'info'
    }));
  }

  static success(opts) {
    return this.addNotice(assign_default()(assign_default()(assign_default()({}, notification_defaultConfig), opts), {
      type: 'success'
    }));
  }

  static error(opts) {
    return this.addNotice(assign_default()(assign_default()(assign_default()({}, notification_defaultConfig), opts), {
      type: 'error'
    }));
  }

  static warning(opts) {
    return this.addNotice(assign_default()(assign_default()(assign_default()({}, notification_defaultConfig), opts), {
      type: 'warning'
    }));
  }

  static open(opts) {
    return this.addNotice(assign_default()(assign_default()(assign_default()({}, notification_defaultConfig), opts), {
      type: 'default'
    }));
  }

  static close(id) {
    return this.removeNotice(id);
  }

  static destroyAll() {
    if (notification_ref) {
      notification_ref.destroyAll();
      const wrapper = document.querySelector("#".concat(this.wrapperId));
      external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default.a.unmountComponentAtNode(wrapper);
      wrapper && wrapper.parentNode.removeChild(wrapper);
      notification_ref = null;
      this.wrapperId = null;
    }
  }

  static config(opts) {
    var _context2;

    map_default()(_context2 = ['top', 'left', 'bottom', 'right']).call(_context2, pos => {
      if (pos in opts) {
        notification_defaultConfig[pos] = opts[pos];
      }
    });

    if (typeof opts.zIndex === 'number') {
      notification_defaultConfig.zIndex = opts.zIndex;
    }

    if (typeof opts.duration === 'number') {
      notification_defaultConfig.duration = opts.duration;
    }

    if (typeof opts.position === 'string') {
      notification_defaultConfig.position = opts.position;
    }
  }

  setPosInStyle(noticeInstance) {
    var _context3;

    const style = {};

    for_each_default()(_context3 = ['top', 'left', 'bottom', 'right']).call(_context3, pos => {
      if (pos in noticeInstance) {
        const val = noticeInstance[pos];
        style[pos] = typeof val === 'number' ? "".concat(val, "px") : val;
      }
    });

    return style;
  }

  render() {
    var _context4;

    let {
      notices
    } = this.state;
    const {
      removedItems
    } = this.state;
    notices = from_default()(new set_default.a([...notices, ...removedItems]));
    const noticesInPosition = {
      top: [],
      topLeft: [],
      topRight: [],
      bottom: [],
      bottomLeft: [],
      bottomRight: []
    };

    for_each_default()(notices).call(notices, notice => {
      const direction = notice.direction || this.context.direction;
      const defaultPosition = direction === 'rtl' ? 'topLeft' : 'topRight';
      const position = notice.position || defaultPosition;
      noticesInPosition[position].push(notice);
    });

    const noticesList = map_default()(_context4 = object_entries_default()(noticesInPosition)).call(_context4, obj => {
      const pos = obj[0];
      const noticesInPos = obj[1];
      return this.renderNoticeInPosition(noticesInPos, pos, removedItems);
    });

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, noticesList);
  }

}

notification_NotificationList.contextType = configProvider_context;
notification_NotificationList.propTypes = {
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  direction: prop_types_default.a.oneOf(notification_constants_strings.directions)
};
notification_NotificationList.defaultProps = {};
notification_NotificationList.useNotification = useNotification;
/* harmony default export */ var notification_0 = (notification_NotificationList);
// CONCATENATED MODULE: ../semi-foundation/overflowList/constants.ts


const overflowList_constants_cssClasses = {
  PREFIX: BASE_CLASS_PREFIX + '-overflow-list'
};
const MODE_MAP = {
  COLLAPSE: 'collapse',
  SCROLL: 'scroll'
};
const BOUNDARY_MAP = {
  START: 'start',
  END: 'end'
};
const OVERFLOW_DIR = {
  NONE: 0,
  GROW: 1,
  SHRINK: 2
};
const overflowList_constants_strings = {
  BOUNDARY_SET: values_default()(BOUNDARY_MAP),
  POSITION_SET: ['vertical', 'horizontal'],
  MODE_SET: values_default()(MODE_MAP),
  MODE_MAP,
  BOUNDARY_MAP,
  OVERFLOW_DIR
};
const overflowList_constants_numbers = {};

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js
var ResizeObserver_es = __webpack_require__("LaGA");

// CONCATENATED MODULE: ./resizeObserver/index.tsx





class resizeObserver_ReactResizeObserver extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.getElement = () => {
      try {
        // using findDOMNode for two reasons:
        // 1. cloning to insert a ref is unwieldy and not performant.
        // 2. ensure that we resolve to an actual DOM node (instead of any JSX ref instance).
        // eslint-disable-next-line
        return Object(external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_["findDOMNode"])(this.childNode || this);
      } catch (error) {
        // swallow error if findDOMNode is run on unmounted component.
        return null;
      }
    };

    this.mergeRef = (ref, node) => {
      this.childNode = node;

      if (typeof ref === 'function') {
        ref(node);
      } else if (typeof ref === 'object' && ref && 'current' in ref) {
        ref.current = node;
      }
    };

    this.observer = new ResizeObserver_es["a" /* default */](props.onResize);
  }

  componentDidMount() {
    this.observeElement();
  }

  componentDidUpdate(prevProps) {
    this.observeElement(this.props.observeParent !== prevProps.observeParent);
  }

  componentWillUnmount() {
    if (this.observer) {
      this.observer.disconnect();
      this.observer = null;
    }
  }

  observeElement() {
    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    const element = this.getElement();

    if (!(element && element instanceof Element)) {
      // stop everything if not defined
      this.observer.disconnect();
      return;
    }

    if (element === this.element && !force) {
      // abort if given same element -- nothing to update (unless forced)
      return;
    } else {
      // clear observer list if new element
      this.observer.disconnect(); // remember element reference for next time

      this.element = element;
    } // observer callback is invoked immediately when observing new elements


    this.observer.observe(element);

    if (this.props.observeParent && element.parentNode && element.parentNode.ownerDocument && element.parentNode.ownerDocument.defaultView && element.parentNode instanceof element.parentNode.ownerDocument.defaultView.HTMLElement) {
      this._parentNode = element.parentNode;
      this.observer.observe(this._parentNode);
    }
  }

  render() {
    const child = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children.only(this.props.children);
    const {
      ref
    } = child;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(child, {
      ref: node => this.mergeRef(ref, node)
    });
  }

}
resizeObserver_ReactResizeObserver.propTypes = {
  onResize: prop_types_default.a.func,
  observeParent: prop_types_default.a.bool
};
resizeObserver_ReactResizeObserver.defaultProps = {
  onResize: () => {},
  observeParent: false
};
// CONCATENATED MODULE: ./overflowList/intersectionObserver.tsx







class intersectionObserver_ReactIntersectionObserver extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
  componentDidMount() {
    const {
      items
    } = this.props;
    this.cachedKeys = keys_default()(items);
    const {
      root,
      threshold,
      rootMargin,
      option,
      onIntersect
    } = this.props;
    this.observer = new IntersectionObserver(onIntersect, assign_default()({
      root,
      threshold,
      rootMargin
    }, option));
    this.observeElement();
  }

  componentDidUpdate() {
    const {
      items
    } = this.props;

    const itemKeys = keys_default()(items);

    if (!isEqual_default()(this.cachedKeys, itemKeys)) {
      this.observeElement(true);
      this.cachedKeys = itemKeys;
    }
  }

  componentWillUnmount() {
    if (this.observer) {
      this.observer.disconnect();
      this.observer = null;
    }
  }

  observeElement() {
    var _context;

    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    const {
      items
    } = this.props;

    if (isEmpty_default()(items)) {
      // stop everything if not defined
      this.observer.disconnect();
      return;
    }

    if (force) {
      this.observer.disconnect();
    } // observer callback is invoked immediately when observing new elements


    for_each_default()(_context = keys_default()(items)).call(_context, key => {
      const node = items[key];

      if (!node) {
        return;
      }

      this.observer.observe(node);
    });
  }

  render() {
    const {
      children
    } = this.props;
    return children;
  }

}
intersectionObserver_ReactIntersectionObserver.propTypes = {
  onIntersect: prop_types_default.a.func,
  option: prop_types_default.a.object,
  root: prop_types_default.a.any,
  threshold: prop_types_default.a.number,
  rootMargin: prop_types_default.a.string,
  items: prop_types_default.a.object
};
intersectionObserver_ReactIntersectionObserver.defaultProps = {
  onIntersect: () => undefined,
  threshold: 0.75,
  rootMargin: '0px',
  option: {},
  items: {}
};
// CONCATENATED MODULE: ../semi-foundation/overflowList/foundation.ts











const Boundary = overflowList_constants_strings.BOUNDARY_MAP;
const OverflowDirection = overflowList_constants_strings.OVERFLOW_DIR;

class foundation_OverflowListFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
    this.previousY = undefined;

    this.isScrollMode = () => {
      const {
        renderMode
      } = this.getProps();
      return renderMode === 'scroll';
    };
  }

  getOverflowItem() {
    const {
      items
    } = this.getProps();
    const {
      visibleState,
      overflow
    } = this.getStates();

    if (!this.isScrollMode()) {
      return overflow;
    }

    const visibleStateArr = map_default()(items).call(items, _ref => {
      let {
        key
      } = _ref;
      return Boolean(visibleState.get(key));
    });

    const visibleStart = index_of_default()(visibleStateArr).call(visibleStateArr, true);

    const visibleEnd = last_index_of_default()(visibleStateArr).call(visibleStateArr, true);

    const overflowList = [];
    overflowList[0] = visibleStart >= 0 ? slice_default()(items).call(items, 0, visibleStart) : [];
    overflowList[1] = visibleEnd >= 0 ? slice_default()(items).call(items, visibleEnd + 1, items.length) : items;
    return overflowList;
  }

  handleIntersect(entries) {
    const visibleState = cloneDeep_default()(this.getState('visibleState'));

    const res = {};

    for_each_default()(entries).call(entries, entry => {
      const itemKey = get_default()(entry, 'target.dataset.scrollkey');

      const visible = entry.isIntersecting;
      res[itemKey] = entry;
      visibleState.set(itemKey, visible);
    });

    let someItemVisible = false;

    for (const value of instance_values_default()(visibleState).call(visibleState)) {
      if (value) {
        someItemVisible = true;
        break;
      }
    } // Any item is visible, indicating that the List is visible


    const wholeListVisible = someItemVisible; // If scrolling in the vertical direction makes the List invisible, no processing is required. 
    // If this.previousY is undefined, it means that the List is mounted for the first time and will not be processed.

    const [entry1] = entries;
    const currentY = entry1.boundingClientRect.y;

    if (!wholeListVisible && this.previousY !== undefined && currentY !== this.previousY) {
      this.previousY = currentY;
      return;
    }

    this.previousY = currentY;

    this._adapter.updateVisibleState(visibleState);

    this._adapter.notifyIntersect(res);
  }

  handlePartition(growing) {
    const {
      direction,
      overflow,
      lastOverflowCount,
      visible
    } = this.getStates();
    const {
      minVisibleItems,
      collapseFrom,
      items
    } = this.getProps();
    let updateState = {};

    if (growing === OverflowDirection.NONE) {
      updateState = {
        direction: OverflowDirection.NONE
      };
    }

    if (growing === OverflowDirection.GROW) {
      const updatedOverflowCount = direction === OverflowDirection.NONE ? overflow.length : lastOverflowCount;
      updateState = {
        direction: OverflowDirection.GROW,
        lastOverflowCount: updatedOverflowCount,
        overflow: [],
        visible: items
      };
    }

    if (growing === OverflowDirection.SHRINK && visible.length > minVisibleItems) {
      const collapseFromStart = collapseFrom === Boundary.START;

      const newVisible = slice_default()(visible).call(visible);

      const next = collapseFromStart ? newVisible.shift() : newVisible.pop();

      if (next !== undefined) {
        updateState = {
          // set SHRINK mode unless a GROW is already in progress.
          // GROW shows all items then shrinks until it settles, so we
          // preserve the fact that the original trigger was a GROW.
          direction: direction !== OverflowDirection.GROW ? OverflowDirection.SHRINK : direction,
          overflow: collapseFromStart ? [...overflow, next] : [next, ...overflow],
          visible: newVisible
        };
      }
    }

    this._adapter.updateStates(updateState);
  }

}

/* harmony default export */ var overflowList_foundation = (foundation_OverflowListFoundation);
// EXTERNAL MODULE: ../semi-foundation/overflowList/overflowList.scss
var overflowList_overflowList = __webpack_require__("O1Tx");

// CONCATENATED MODULE: ./overflowList/index.tsx










/* eslint-disable arrow-body-style */









const overflowList_prefixCls = overflowList_constants_cssClasses.PREFIX;
const overflowList_Boundary = overflowList_constants_strings.BOUNDARY_MAP;
const overflowList_OverflowDirection = overflowList_constants_strings.OVERFLOW_DIR;
const RenderMode = overflowList_constants_strings.MODE_MAP;
 // reference to https://github.com/palantir/blueprint/blob/1aa71605/packages/core/src/components/overflow-list/overflowList.tsx#L34

class overflowList_OverflowList extends baseComponent_BaseComponent {
  constructor(props) {
    var _this;

    super(props);
    _this = this;
    this.scroller = null;
    this.spacer = null;

    this.isScrollMode = () => {
      const {
        renderMode
      } = this.props;
      return renderMode === RenderMode.SCROLL;
    };

    this.resize = function () {
      let entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      // if any parent is growing, assume we have more room than before
      const growing = some_default()(entries).call(entries, entry => {
        const previousWidth = _this.previousWidths.get(entry.target) || 0;
        return entry.contentRect.width > previousWidth;
      });

      _this.repartition(growing);

      for_each_default()(entries).call(entries, entry => _this.previousWidths.set(entry.target, entry.contentRect.width));
    };

    this.repartition = growing => {
      // if not mounted or scroll mode, we do not
      if (isNull_default()(this.spacer) || isUndefined_default()(this.spacer) || this.isScrollMode()) {
        return;
      } // spacer has flex-shrink and width 1px so if it's much smaller then we know to shrink


      const state = growing ? overflowList_OverflowDirection.GROW : this.spacer.getBoundingClientRect().width < 0.9 ? overflowList_OverflowDirection.SHRINK : overflowList_OverflowDirection.NONE;
      this.foundation.handlePartition(state);
    };

    this.reintersect = entries => {
      this.foundation.handleIntersect(entries);
    };

    this.mergeRef = (ref, node, key) => {
      this.itemRefs[key] = node;

      if (typeof ref === 'function') {
        ref(node);
      } else if (typeof ref === 'object' && ref && 'current' in ref) {
        ref.current = node;
      }
    };

    this.renderOverflow = () => {
      const overflow = this.foundation.getOverflowItem();
      return this.props.overflowRenderer(overflow);
    };

    this.renderItemList = () => {
      var _context;

      const {
        className,
        wrapperClassName,
        wrapperStyle,
        style,
        visibleItemRenderer,
        renderMode,
        collapseFrom
      } = this.props;
      const {
        visible
      } = this.state;
      const overflow = this.renderOverflow();
      const inner = renderMode === RenderMode.SCROLL ? [overflow[0], /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: classnames_default()(wrapperClassName, "".concat(overflowList_prefixCls, "-scroll-wrapper")),
        ref: ref => {
          this.scroller = ref;
        },
        style: assign_default()({}, wrapperStyle),
        key: "".concat(overflowList_prefixCls, "-scroll-wrapper")
      }, map_default()(_context = map_default()(visible).call(visible, visibleItemRenderer)).call(_context, (item, ind) => {
        const {
          forwardRef,
          key
        } = item;
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(item, {
          ref: node => this.mergeRef(forwardRef, node, key),
          'data-scrollkey': "".concat(key),
          key
        });
      })), overflow[1]] : [collapseFrom === overflowList_Boundary.START ? overflow : null, map_default()(visible).call(visible, visibleItemRenderer), collapseFrom === overflowList_Boundary.END ? overflow : null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(overflowList_prefixCls, "-spacer"),
        ref: ref => this.spacer = ref,
        key: "".concat(overflowList_prefixCls, "-spacer")
      })];
      const list = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement('div', {
        className: classnames_default()("".concat(overflowList_prefixCls), className),
        style
      }, ...inner);
      return list;
    };

    this.state = {
      direction: overflowList_OverflowDirection.GROW,
      lastOverflowCount: 0,
      overflow: [],
      visible: props.items,
      visibleState: new core_js_stable_map_default.a()
    };
    this.foundation = new overflowList_foundation(this.adapter);
    this.previousWidths = new core_js_stable_map_default.a();
    this.itemRefs = {};
    this.itemSizeMap = new core_js_stable_map_default.a();
  }

  static getDerivedStateFromProps(props, prevState) {
    const {
      prevProps
    } = prevState;
    const newState = {};
    newState.prevProps = props;

    const needUpdate = name => {
      return !prevProps && name in props || prevProps && !isEqual_default()(prevProps[name], props[name]);
    };

    if (needUpdate('items') || needUpdate('style')) {
      // reset visible state if the above props change.
      newState.direction = overflowList_OverflowDirection.GROW;
      newState.lastOverflowCount = 0;
      newState.overflow = [];
      newState.visible = props.items;
    }

    return newState;
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      updateVisibleState: visibleState => {
        this.setState({
          visibleState
        });
      },
      updateStates: states => {
        this.setState(assign_default()({}, states));
      },
      notifyIntersect: res => {
        this.props.onIntersect && this.props.onIntersect(res);
      }
    });
  }

  componentDidMount() {
    this.repartition(false);
  }

  shouldComponentUpdate(_nextProps, nextState) {
    // We want this component to always re-render, even when props haven't changed, so that
    // changes in the renderers' behavior can be reflected.
    // The following statement prevents re-rendering only in the case where the state changes
    // identity (i.e. setState was called), but the state is still the same when
    // shallow-compared to the previous state.
    const currState = omit_default()(this.state, 'prevProps');

    const comingState = omit_default()(nextState, 'prevProps');

    return !(currState !== comingState && isEqual_default()(currState, comingState));
  }

  componentDidUpdate(prevProps, prevState) {
    if (!isEqual_default()(prevProps.items, this.props.items)) {
      this.itemRefs = {};
    }

    if (!isEqual_default()(omit_default()(prevState, 'prevProps'), omit_default()(this.state, 'prevProps'))) {
      this.repartition(false);
    }

    const {
      direction,
      overflow,
      lastOverflowCount
    } = this.state;

    if ( // if a resize operation has just completed (transition to NONE)
    direction === overflowList_OverflowDirection.NONE && direction !== prevState.direction && overflow.length !== lastOverflowCount) {
      this.props.onOverflow && this.props.onOverflow(overflow);
    }
  }

  render() {
    const list = this.renderItemList();
    const {
      renderMode
    } = this.props;

    if (renderMode === RenderMode.SCROLL) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(intersectionObserver_ReactIntersectionObserver, {
        onIntersect: this.reintersect,
        root: this.scroller,
        threshold: this.props.threshold,
        items: this.itemRefs
      }, list);
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(resizeObserver_ReactResizeObserver, {
      onResize: this.resize
    }, list);
  }

}

overflowList_OverflowList.defaultProps = {
  collapseFrom: 'end',
  minVisibleItems: 0,
  overflowRenderer: () => null,
  renderMode: 'collapse',
  threshold: 0.75,
  visibleItemRenderer: () => null
};
overflowList_OverflowList.propTypes = {
  // if render in scroll mode, key is required in items
  className: prop_types_default.a.string,
  collapseFrom: prop_types_default.a.oneOf(overflowList_constants_strings.BOUNDARY_SET),
  direction: prop_types_default.a.oneOf(overflowList_constants_strings.POSITION_SET),
  items: prop_types_default.a.array,
  minVisibleItems: prop_types_default.a.number,
  onIntersect: prop_types_default.a.func,
  onOverflow: prop_types_default.a.func,
  overflowRenderer: prop_types_default.a.func,
  renderMode: prop_types_default.a.oneOf(overflowList_constants_strings.MODE_SET),
  style: prop_types_default.a.object,
  threshold: prop_types_default.a.number,
  visibleItemRenderer: prop_types_default.a.func,
  wrapperClassName: prop_types_default.a.string,
  wrapperStyle: prop_types_default.a.object
};
/* harmony default export */ var overflowList_0 = (overflowList_OverflowList);
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/memoize-one/dist/memoize-one.esm.js
var safeIsNaN = Number.isNaN ||
    function ponyfill(value) {
        return typeof value === 'number' && value !== value;
    };
function memoize_one_esm_isEqual(first, second) {
    if (first === second) {
        return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
        return true;
    }
    return false;
}
function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
        return false;
    }
    for (var i = 0; i < newInputs.length; i++) {
        if (!memoize_one_esm_isEqual(newInputs[i], lastInputs[i])) {
            return false;
        }
    }
    return true;
}

function memoizeOne(resultFn, isEqual) {
    if (isEqual === void 0) { isEqual = areInputsEqual; }
    var lastThis;
    var lastArgs = [];
    var lastResult;
    var calledOnce = false;
    function memoized() {
        var newArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newArgs[_i] = arguments[_i];
        }
        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
            return lastResult;
        }
        lastResult = resultFn.apply(this, newArgs);
        calledOnce = true;
        lastThis = this;
        lastArgs = newArgs;
        return lastResult;
    }
    return memoized;
}

/* harmony default export */ var memoize_one_esm = (memoizeOne);

// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
// CONCATENATED MODULE: /home/runner/work/semi-design/semi-design/node_modules/react-window/dist/index.esm.js







// Animation frame based implementation of setTimeout.
// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js
var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
var index_esm_now = hasNativePerformanceNow ? function () {
  return performance.now();
} : function () {
  return Date.now();
};
function cancelTimeout(timeoutID) {
  cancelAnimationFrame(timeoutID.id);
}
function requestTimeout(callback, delay) {
  var start = index_esm_now();

  function tick() {
    if (index_esm_now() - start >= delay) {
      callback.call(null);
    } else {
      timeoutID.id = requestAnimationFrame(tick);
    }
  }

  var timeoutID = {
    id: requestAnimationFrame(tick)
  };
  return timeoutID;
}

var index_esm_size = -1; // This utility copied from "dom-helpers" package.

function getScrollbarSize(recalculate) {
  if (recalculate === void 0) {
    recalculate = false;
  }

  if (index_esm_size === -1 || recalculate) {
    var div = document.createElement('div');
    var style = div.style;
    style.width = '50px';
    style.height = '50px';
    style.overflow = 'scroll';
    document.body.appendChild(div);
    index_esm_size = div.offsetWidth - div.clientWidth;
    document.body.removeChild(div);
  }

  return index_esm_size;
}
var cachedRTLResult = null; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.
// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).
// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.
// The safest way to check this is to intentionally set a negative offset,
// and then verify that the subsequent "scroll" event matches the negative offset.
// If it does not match, then we can assume a non-standard RTL scroll implementation.

function getRTLOffsetType(recalculate) {
  if (recalculate === void 0) {
    recalculate = false;
  }

  if (cachedRTLResult === null || recalculate) {
    var outerDiv = document.createElement('div');
    var outerStyle = outerDiv.style;
    outerStyle.width = '50px';
    outerStyle.height = '50px';
    outerStyle.overflow = 'scroll';
    outerStyle.direction = 'rtl';
    var innerDiv = document.createElement('div');
    var innerStyle = innerDiv.style;
    innerStyle.width = '100px';
    innerStyle.height = '100px';
    outerDiv.appendChild(innerDiv);
    document.body.appendChild(outerDiv);

    if (outerDiv.scrollLeft > 0) {
      cachedRTLResult = 'positive-descending';
    } else {
      outerDiv.scrollLeft = 1;

      if (outerDiv.scrollLeft === 0) {
        cachedRTLResult = 'negative';
      } else {
        cachedRTLResult = 'positive-ascending';
      }
    }

    document.body.removeChild(outerDiv);
    return cachedRTLResult;
  }

  return cachedRTLResult;
}

var IS_SCROLLING_DEBOUNCE_INTERVAL = 150;

var defaultItemKey = function defaultItemKey(_ref) {
  var columnIndex = _ref.columnIndex,
      data = _ref.data,
      rowIndex = _ref.rowIndex;
  return rowIndex + ":" + columnIndex;
}; // In DEV mode, this Set helps us only log a warning once per component instance.
// This avoids spamming the console every time a render happens.


var devWarningsOverscanCount = null;
var devWarningsOverscanRowsColumnsCount = null;
var devWarningsTagName = null;

if (false) {}

function createGridComponent(_ref2) {
  var _class;

  var getColumnOffset = _ref2.getColumnOffset,
      getColumnStartIndexForOffset = _ref2.getColumnStartIndexForOffset,
      getColumnStopIndexForStartIndex = _ref2.getColumnStopIndexForStartIndex,
      getColumnWidth = _ref2.getColumnWidth,
      getEstimatedTotalHeight = _ref2.getEstimatedTotalHeight,
      getEstimatedTotalWidth = _ref2.getEstimatedTotalWidth,
      getOffsetForColumnAndAlignment = _ref2.getOffsetForColumnAndAlignment,
      getOffsetForRowAndAlignment = _ref2.getOffsetForRowAndAlignment,
      getRowHeight = _ref2.getRowHeight,
      getRowOffset = _ref2.getRowOffset,
      getRowStartIndexForOffset = _ref2.getRowStartIndexForOffset,
      getRowStopIndexForStartIndex = _ref2.getRowStopIndexForStartIndex,
      initInstanceProps = _ref2.initInstanceProps,
      shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange,
      validateProps = _ref2.validateProps;
  return _class = /*#__PURE__*/function (_PureComponent) {
    _inheritsLoose(Grid, _PureComponent);

    // Always use explicit constructor for React components.
    // It produces less code after transpilation. (#26)
    // eslint-disable-next-line no-useless-constructor
    function Grid(props) {
      var _this;

      _this = _PureComponent.call(this, props) || this;
      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_this));
      _this._resetIsScrollingTimeoutId = null;
      _this._outerRef = void 0;
      _this.state = {
        instance: _assertThisInitialized(_this),
        isScrolling: false,
        horizontalScrollDirection: 'forward',
        scrollLeft: typeof _this.props.initialScrollLeft === 'number' ? _this.props.initialScrollLeft : 0,
        scrollTop: typeof _this.props.initialScrollTop === 'number' ? _this.props.initialScrollTop : 0,
        scrollUpdateWasRequested: false,
        verticalScrollDirection: 'forward'
      };
      _this._callOnItemsRendered = void 0;
      _this._callOnItemsRendered = memoize_one_esm(function (overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {
        return _this.props.onItemsRendered({
          overscanColumnStartIndex: overscanColumnStartIndex,
          overscanColumnStopIndex: overscanColumnStopIndex,
          overscanRowStartIndex: overscanRowStartIndex,
          overscanRowStopIndex: overscanRowStopIndex,
          visibleColumnStartIndex: visibleColumnStartIndex,
          visibleColumnStopIndex: visibleColumnStopIndex,
          visibleRowStartIndex: visibleRowStartIndex,
          visibleRowStopIndex: visibleRowStopIndex
        });
      });
      _this._callOnScroll = void 0;
      _this._callOnScroll = memoize_one_esm(function (scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {
        return _this.props.onScroll({
          horizontalScrollDirection: horizontalScrollDirection,
          scrollLeft: scrollLeft,
          scrollTop: scrollTop,
          verticalScrollDirection: verticalScrollDirection,
          scrollUpdateWasRequested: scrollUpdateWasRequested
        });
      });
      _this._getItemStyle = void 0;

      _this._getItemStyle = function (rowIndex, columnIndex) {
        var _this$props = _this.props,
            columnWidth = _this$props.columnWidth,
            direction = _this$props.direction,
            rowHeight = _this$props.rowHeight;

        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);

        var key = rowIndex + ":" + columnIndex;
        var style;

        if (itemStyleCache.hasOwnProperty(key)) {
          style = itemStyleCache[key];
        } else {
          var _offset = getColumnOffset(_this.props, columnIndex, _this._instanceProps);

          var isRtl = direction === 'rtl';
          itemStyleCache[key] = style = {
            position: 'absolute',
            left: isRtl ? undefined : _offset,
            right: isRtl ? _offset : undefined,
            top: getRowOffset(_this.props, rowIndex, _this._instanceProps),
            height: getRowHeight(_this.props, rowIndex, _this._instanceProps),
            width: getColumnWidth(_this.props, columnIndex, _this._instanceProps)
          };
        }

        return style;
      };

      _this._getItemStyleCache = void 0;
      _this._getItemStyleCache = memoize_one_esm(function (_, __, ___) {
        return {};
      });

      _this._onScroll = function (event) {
        var _event$currentTarget = event.currentTarget,
            clientHeight = _event$currentTarget.clientHeight,
            clientWidth = _event$currentTarget.clientWidth,
            scrollLeft = _event$currentTarget.scrollLeft,
            scrollTop = _event$currentTarget.scrollTop,
            scrollHeight = _event$currentTarget.scrollHeight,
            scrollWidth = _event$currentTarget.scrollWidth;

        _this.setState(function (prevState) {
          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {
            // Scroll position may have been updated by cDM/cDU,
            // In which case we don't need to trigger another render,
            // And we don't want to update state.isScrolling.
            return null;
          }

          var direction = _this.props.direction; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.
          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).
          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.
          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.

          var calculatedScrollLeft = scrollLeft;

          if (direction === 'rtl') {
            switch (getRTLOffsetType()) {
              case 'negative':
                calculatedScrollLeft = -scrollLeft;
                break;

              case 'positive-descending':
                calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;
                break;
            }
          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.


          calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));
          var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
          return {
            isScrolling: true,
            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',
            scrollLeft: calculatedScrollLeft,
            scrollTop: calculatedScrollTop,
            verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward',
            scrollUpdateWasRequested: false
          };
        }, _this._resetIsScrollingDebounced);
      };

      _this._outerRefSetter = function (ref) {
        var outerRef = _this.props.outerRef;
        _this._outerRef = ref;

        if (typeof outerRef === 'function') {
          outerRef(ref);
        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {
          outerRef.current = ref;
        }
      };

      _this._resetIsScrollingDebounced = function () {
        if (_this._resetIsScrollingTimeoutId !== null) {
          cancelTimeout(_this._resetIsScrollingTimeoutId);
        }

        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);
      };

      _this._resetIsScrolling = function () {
        _this._resetIsScrollingTimeoutId = null;

        _this.setState({
          isScrolling: false
        }, function () {
          // Clear style cache after state update has been committed.
          // This way we don't break pure sCU for items that don't use isScrolling param.
          _this._getItemStyleCache(-1);
        });
      };

      return _this;
    }

    Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
      validateSharedProps(nextProps, prevState);
      validateProps(nextProps);
      return null;
    };

    var _proto = Grid.prototype;

    _proto.scrollTo = function scrollTo(_ref3) {
      var scrollLeft = _ref3.scrollLeft,
          scrollTop = _ref3.scrollTop;

      if (scrollLeft !== undefined) {
        scrollLeft = Math.max(0, scrollLeft);
      }

      if (scrollTop !== undefined) {
        scrollTop = Math.max(0, scrollTop);
      }

      this.setState(function (prevState) {
        if (scrollLeft === undefined) {
          scrollLeft = prevState.scrollLeft;
        }

        if (scrollTop === undefined) {
          scrollTop = prevState.scrollTop;
        }

        if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {
          return null;
        }

        return {
          horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',
          scrollLeft: scrollLeft,
          scrollTop: scrollTop,
          scrollUpdateWasRequested: true,
          verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward'
        };
      }, this._resetIsScrollingDebounced);
    };

    _proto.scrollToItem = function scrollToItem(_ref4) {
      var _ref4$align = _ref4.align,
          align = _ref4$align === void 0 ? 'auto' : _ref4$align,
          columnIndex = _ref4.columnIndex,
          rowIndex = _ref4.rowIndex;
      var _this$props2 = this.props,
          columnCount = _this$props2.columnCount,
          height = _this$props2.height,
          rowCount = _this$props2.rowCount,
          width = _this$props2.width;
      var _this$state = this.state,
          scrollLeft = _this$state.scrollLeft,
          scrollTop = _this$state.scrollTop;
      var scrollbarSize = getScrollbarSize();

      if (columnIndex !== undefined) {
        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));
      }

      if (rowIndex !== undefined) {
        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));
      }

      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);
      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps); // The scrollbar size should be considered when scrolling an item into view,
      // to ensure it's fully visible.
      // But we only need to account for its size when it's actually visible.

      var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;
      var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;
      this.scrollTo({
        scrollLeft: columnIndex !== undefined ? getOffsetForColumnAndAlignment(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,
        scrollTop: rowIndex !== undefined ? getOffsetForRowAndAlignment(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop
      });
    };

    _proto.componentDidMount = function componentDidMount() {
      var _this$props3 = this.props,
          initialScrollLeft = _this$props3.initialScrollLeft,
          initialScrollTop = _this$props3.initialScrollTop;

      if (this._outerRef != null) {
        var outerRef = this._outerRef;

        if (typeof initialScrollLeft === 'number') {
          outerRef.scrollLeft = initialScrollLeft;
        }

        if (typeof initialScrollTop === 'number') {
          outerRef.scrollTop = initialScrollTop;
        }
      }

      this._callPropsCallbacks();
    };

    _proto.componentDidUpdate = function componentDidUpdate() {
      var direction = this.props.direction;
      var _this$state2 = this.state,
          scrollLeft = _this$state2.scrollLeft,
          scrollTop = _this$state2.scrollTop,
          scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;

      if (scrollUpdateWasRequested && this._outerRef != null) {
        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.
        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).
        // So we need to determine which browser behavior we're dealing with, and mimic it.
        var outerRef = this._outerRef;

        if (direction === 'rtl') {
          switch (getRTLOffsetType()) {
            case 'negative':
              outerRef.scrollLeft = -scrollLeft;
              break;

            case 'positive-ascending':
              outerRef.scrollLeft = scrollLeft;
              break;

            default:
              var clientWidth = outerRef.clientWidth,
                  scrollWidth = outerRef.scrollWidth;
              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;
              break;
          }
        } else {
          outerRef.scrollLeft = Math.max(0, scrollLeft);
        }

        outerRef.scrollTop = Math.max(0, scrollTop);
      }

      this._callPropsCallbacks();
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this._resetIsScrollingTimeoutId !== null) {
        cancelTimeout(this._resetIsScrollingTimeoutId);
      }
    };

    _proto.render = function render() {
      var _this$props4 = this.props,
          children = _this$props4.children,
          className = _this$props4.className,
          columnCount = _this$props4.columnCount,
          direction = _this$props4.direction,
          height = _this$props4.height,
          innerRef = _this$props4.innerRef,
          innerElementType = _this$props4.innerElementType,
          innerTagName = _this$props4.innerTagName,
          itemData = _this$props4.itemData,
          _this$props4$itemKey = _this$props4.itemKey,
          itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey,
          outerElementType = _this$props4.outerElementType,
          outerTagName = _this$props4.outerTagName,
          rowCount = _this$props4.rowCount,
          style = _this$props4.style,
          useIsScrolling = _this$props4.useIsScrolling,
          width = _this$props4.width;
      var isScrolling = this.state.isScrolling;

      var _this$_getHorizontalR = this._getHorizontalRangeToRender(),
          columnStartIndex = _this$_getHorizontalR[0],
          columnStopIndex = _this$_getHorizontalR[1];

      var _this$_getVerticalRan = this._getVerticalRangeToRender(),
          rowStartIndex = _this$_getVerticalRan[0],
          rowStopIndex = _this$_getVerticalRan[1];

      var items = [];

      if (columnCount > 0 && rowCount) {
        for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {
          for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {
            items.push(Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"])(children, {
              columnIndex: _columnIndex,
              data: itemData,
              isScrolling: useIsScrolling ? isScrolling : undefined,
              key: itemKey({
                columnIndex: _columnIndex,
                data: itemData,
                rowIndex: _rowIndex
              }),
              rowIndex: _rowIndex,
              style: this._getItemStyle(_rowIndex, _columnIndex)
            }));
          }
        }
      } // Read this value AFTER items have been created,
      // So their actual sizes (if variable) are taken into consideration.


      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);
      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps);
      return Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"])(outerElementType || outerTagName || 'div', {
        className: className,
        onScroll: this._onScroll,
        ref: this._outerRefSetter,
        style: _extends({
          position: 'relative',
          height: height,
          width: width,
          overflow: 'auto',
          WebkitOverflowScrolling: 'touch',
          willChange: 'transform',
          direction: direction
        }, style)
      }, Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"])(innerElementType || innerTagName || 'div', {
        children: items,
        ref: innerRef,
        style: {
          height: estimatedTotalHeight,
          pointerEvents: isScrolling ? 'none' : undefined,
          width: estimatedTotalWidth
        }
      }));
    };

    _proto._callPropsCallbacks = function _callPropsCallbacks() {
      var _this$props5 = this.props,
          columnCount = _this$props5.columnCount,
          onItemsRendered = _this$props5.onItemsRendered,
          onScroll = _this$props5.onScroll,
          rowCount = _this$props5.rowCount;

      if (typeof onItemsRendered === 'function') {
        if (columnCount > 0 && rowCount > 0) {
          var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(),
              _overscanColumnStartIndex = _this$_getHorizontalR2[0],
              _overscanColumnStopIndex = _this$_getHorizontalR2[1],
              _visibleColumnStartIndex = _this$_getHorizontalR2[2],
              _visibleColumnStopIndex = _this$_getHorizontalR2[3];

          var _this$_getVerticalRan2 = this._getVerticalRangeToRender(),
              _overscanRowStartIndex = _this$_getVerticalRan2[0],
              _overscanRowStopIndex = _this$_getVerticalRan2[1],
              _visibleRowStartIndex = _this$_getVerticalRan2[2],
              _visibleRowStopIndex = _this$_getVerticalRan2[3];

          this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);
        }
      }

      if (typeof onScroll === 'function') {
        var _this$state3 = this.state,
            _horizontalScrollDirection = _this$state3.horizontalScrollDirection,
            _scrollLeft = _this$state3.scrollLeft,
            _scrollTop = _this$state3.scrollTop,
            _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested,
            _verticalScrollDirection = _this$state3.verticalScrollDirection;

        this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);
      }
    } // Lazily create and cache item styles while scrolling,
    // So that pure component sCU will prevent re-renders.
    // We maintain this cache, and pass a style prop rather than index,
    // So that List can clear cached styles and force item re-render if necessary.
    ;

    _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {
      var _this$props6 = this.props,
          columnCount = _this$props6.columnCount,
          overscanColumnCount = _this$props6.overscanColumnCount,
          overscanColumnsCount = _this$props6.overscanColumnsCount,
          overscanCount = _this$props6.overscanCount,
          rowCount = _this$props6.rowCount;
      var _this$state4 = this.state,
          horizontalScrollDirection = _this$state4.horizontalScrollDirection,
          isScrolling = _this$state4.isScrolling,
          scrollLeft = _this$state4.scrollLeft;
      var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;

      if (columnCount === 0 || rowCount === 0) {
        return [0, 0, 0, 0];
      }

      var startIndex = getColumnStartIndexForOffset(this.props, scrollLeft, this._instanceProps);
      var stopIndex = getColumnStopIndexForStartIndex(this.props, startIndex, scrollLeft, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.
      // If there isn't at least one extra item, tab loops back around.

      var overscanBackward = !isScrolling || horizontalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;
      var overscanForward = !isScrolling || horizontalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;
      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
    };

    _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {
      var _this$props7 = this.props,
          columnCount = _this$props7.columnCount,
          overscanCount = _this$props7.overscanCount,
          overscanRowCount = _this$props7.overscanRowCount,
          overscanRowsCount = _this$props7.overscanRowsCount,
          rowCount = _this$props7.rowCount;
      var _this$state5 = this.state,
          isScrolling = _this$state5.isScrolling,
          verticalScrollDirection = _this$state5.verticalScrollDirection,
          scrollTop = _this$state5.scrollTop;
      var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;

      if (columnCount === 0 || rowCount === 0) {
        return [0, 0, 0, 0];
      }

      var startIndex = getRowStartIndexForOffset(this.props, scrollTop, this._instanceProps);
      var stopIndex = getRowStopIndexForStartIndex(this.props, startIndex, scrollTop, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.
      // If there isn't at least one extra item, tab loops back around.

      var overscanBackward = !isScrolling || verticalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;
      var overscanForward = !isScrolling || verticalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;
      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
    };

    return Grid;
  }(external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"]), _class.defaultProps = {
    direction: 'ltr',
    itemData: undefined,
    useIsScrolling: false
  }, _class;
}

var validateSharedProps = function validateSharedProps(_ref5, _ref6) {
  var children = _ref5.children,
      direction = _ref5.direction,
      height = _ref5.height,
      innerTagName = _ref5.innerTagName,
      outerTagName = _ref5.outerTagName,
      overscanColumnsCount = _ref5.overscanColumnsCount,
      overscanCount = _ref5.overscanCount,
      overscanRowsCount = _ref5.overscanRowsCount,
      width = _ref5.width;
  var instance = _ref6.instance;

  if (false) {}
};

var DEFAULT_ESTIMATED_ITEM_SIZE = 50;

var index_esm_getEstimatedTotalHeight = function getEstimatedTotalHeight(_ref, _ref2) {
  var rowCount = _ref.rowCount;
  var rowMetadataMap = _ref2.rowMetadataMap,
      estimatedRowHeight = _ref2.estimatedRowHeight,
      lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;
  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.
  // https://github.com/bvaughn/react-window/pull/138

  if (lastMeasuredRowIndex >= rowCount) {
    lastMeasuredRowIndex = rowCount - 1;
  }

  if (lastMeasuredRowIndex >= 0) {
    var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];
    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;
  }

  var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;
  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;
  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;
};

var index_esm_getEstimatedTotalWidth = function getEstimatedTotalWidth(_ref3, _ref4) {
  var columnCount = _ref3.columnCount;
  var columnMetadataMap = _ref4.columnMetadataMap,
      estimatedColumnWidth = _ref4.estimatedColumnWidth,
      lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;
  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.
  // https://github.com/bvaughn/react-window/pull/138

  if (lastMeasuredColumnIndex >= columnCount) {
    lastMeasuredColumnIndex = columnCount - 1;
  }

  if (lastMeasuredColumnIndex >= 0) {
    var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];
    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;
  }

  var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;
  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;
  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;
};

var getItemMetadata = function getItemMetadata(itemType, props, index, instanceProps) {
  var itemMetadataMap, itemSize, lastMeasuredIndex;

  if (itemType === 'column') {
    itemMetadataMap = instanceProps.columnMetadataMap;
    itemSize = props.columnWidth;
    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;
  } else {
    itemMetadataMap = instanceProps.rowMetadataMap;
    itemSize = props.rowHeight;
    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;
  }

  if (index > lastMeasuredIndex) {
    var offset = 0;

    if (lastMeasuredIndex >= 0) {
      var itemMetadata = itemMetadataMap[lastMeasuredIndex];
      offset = itemMetadata.offset + itemMetadata.size;
    }

    for (var i = lastMeasuredIndex + 1; i <= index; i++) {
      var size = itemSize(i);
      itemMetadataMap[i] = {
        offset: offset,
        size: size
      };
      offset += size;
    }

    if (itemType === 'column') {
      instanceProps.lastMeasuredColumnIndex = index;
    } else {
      instanceProps.lastMeasuredRowIndex = index;
    }
  }

  return itemMetadataMap[index];
};

var findNearestItem = function findNearestItem(itemType, props, instanceProps, offset) {
  var itemMetadataMap, lastMeasuredIndex;

  if (itemType === 'column') {
    itemMetadataMap = instanceProps.columnMetadataMap;
    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;
  } else {
    itemMetadataMap = instanceProps.rowMetadataMap;
    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;
  }

  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;

  if (lastMeasuredItemOffset >= offset) {
    // If we've already measured items within this range just use a binary search as it's faster.
    return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset);
  } else {
    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.
    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.
    // The overall complexity for this approach is O(log n).
    return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset);
  }
};

var findNearestItemBinarySearch = function findNearestItemBinarySearch(itemType, props, instanceProps, high, low, offset) {
  while (low <= high) {
    var middle = low + Math.floor((high - low) / 2);
    var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;

    if (currentOffset === offset) {
      return middle;
    } else if (currentOffset < offset) {
      low = middle + 1;
    } else if (currentOffset > offset) {
      high = middle - 1;
    }
  }

  if (low > 0) {
    return low - 1;
  } else {
    return 0;
  }
};

var findNearestItemExponentialSearch = function findNearestItemExponentialSearch(itemType, props, instanceProps, index, offset) {
  var itemCount = itemType === 'column' ? props.columnCount : props.rowCount;
  var interval = 1;

  while (index < itemCount && getItemMetadata(itemType, props, index, instanceProps).offset < offset) {
    index += interval;
    interval *= 2;
  }

  return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);
};

var index_esm_getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment(itemType, props, index, align, scrollOffset, instanceProps, scrollbarSize) {
  var size = itemType === 'column' ? props.width : props.height;
  var itemMetadata = getItemMetadata(itemType, props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,
  // To ensure it reflects actual measurements instead of just estimates.

  var estimatedTotalSize = itemType === 'column' ? index_esm_getEstimatedTotalWidth(props, instanceProps) : index_esm_getEstimatedTotalHeight(props, instanceProps);
  var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));
  var minOffset = Math.max(0, itemMetadata.offset - size + scrollbarSize + itemMetadata.size);

  if (align === 'smart') {
    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {
      align = 'auto';
    } else {
      align = 'center';
    }
  }

  switch (align) {
    case 'start':
      return maxOffset;

    case 'end':
      return minOffset;

    case 'center':
      return Math.round(minOffset + (maxOffset - minOffset) / 2);

    case 'auto':
    default:
      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
        return scrollOffset;
      } else if (minOffset > maxOffset) {
        // Because we only take into account the scrollbar size when calculating minOffset
        // this value can be larger than maxOffset when at the end of the list
        return minOffset;
      } else if (scrollOffset < minOffset) {
        return minOffset;
      } else {
        return maxOffset;
      }

  }
};

var VariableSizeGrid = /*#__PURE__*/createGridComponent({
  getColumnOffset: function getColumnOffset(props, index, instanceProps) {
    return getItemMetadata('column', props, index, instanceProps).offset;
  },
  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {
    return findNearestItem('column', props, instanceProps, scrollLeft);
  },
  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {
    var columnCount = props.columnCount,
        width = props.width;
    var itemMetadata = getItemMetadata('column', props, startIndex, instanceProps);
    var maxOffset = scrollLeft + width;
    var offset = itemMetadata.offset + itemMetadata.size;
    var stopIndex = startIndex;

    while (stopIndex < columnCount - 1 && offset < maxOffset) {
      stopIndex++;
      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;
    }

    return stopIndex;
  },
  getColumnWidth: function getColumnWidth(props, index, instanceProps) {
    return instanceProps.columnMetadataMap[index].size;
  },
  getEstimatedTotalHeight: index_esm_getEstimatedTotalHeight,
  getEstimatedTotalWidth: index_esm_getEstimatedTotalWidth,
  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {
    return index_esm_getOffsetForIndexAndAlignment('column', props, index, align, scrollOffset, instanceProps, scrollbarSize);
  },
  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {
    return index_esm_getOffsetForIndexAndAlignment('row', props, index, align, scrollOffset, instanceProps, scrollbarSize);
  },
  getRowOffset: function getRowOffset(props, index, instanceProps) {
    return getItemMetadata('row', props, index, instanceProps).offset;
  },
  getRowHeight: function getRowHeight(props, index, instanceProps) {
    return instanceProps.rowMetadataMap[index].size;
  },
  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {
    return findNearestItem('row', props, instanceProps, scrollTop);
  },
  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {
    var rowCount = props.rowCount,
        height = props.height;
    var itemMetadata = getItemMetadata('row', props, startIndex, instanceProps);
    var maxOffset = scrollTop + height;
    var offset = itemMetadata.offset + itemMetadata.size;
    var stopIndex = startIndex;

    while (stopIndex < rowCount - 1 && offset < maxOffset) {
      stopIndex++;
      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;
    }

    return stopIndex;
  },
  initInstanceProps: function initInstanceProps(props, instance) {
    var _ref5 = props,
        estimatedColumnWidth = _ref5.estimatedColumnWidth,
        estimatedRowHeight = _ref5.estimatedRowHeight;
    var instanceProps = {
      columnMetadataMap: {},
      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,
      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,
      lastMeasuredColumnIndex: -1,
      lastMeasuredRowIndex: -1,
      rowMetadataMap: {}
    };

    instance.resetAfterColumnIndex = function (columnIndex, shouldForceUpdate) {
      if (shouldForceUpdate === void 0) {
        shouldForceUpdate = true;
      }

      instance.resetAfterIndices({
        columnIndex: columnIndex,
        shouldForceUpdate: shouldForceUpdate
      });
    };

    instance.resetAfterRowIndex = function (rowIndex, shouldForceUpdate) {
      if (shouldForceUpdate === void 0) {
        shouldForceUpdate = true;
      }

      instance.resetAfterIndices({
        rowIndex: rowIndex,
        shouldForceUpdate: shouldForceUpdate
      });
    };

    instance.resetAfterIndices = function (_ref6) {
      var columnIndex = _ref6.columnIndex,
          rowIndex = _ref6.rowIndex,
          _ref6$shouldForceUpda = _ref6.shouldForceUpdate,
          shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;

      if (typeof columnIndex === 'number') {
        instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);
      }

      if (typeof rowIndex === 'number') {
        instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);
      } // We could potentially optimize further by only evicting styles after this index,
      // But since styles are only cached while scrolling is in progress-
      // It seems an unnecessary optimization.
      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.


      instance._getItemStyleCache(-1);

      if (shouldForceUpdate) {
        instance.forceUpdate();
      }
    };

    return instanceProps;
  },
  shouldResetStyleCacheOnItemSizeChange: false,
  validateProps: function validateProps(_ref7) {
    var columnWidth = _ref7.columnWidth,
        rowHeight = _ref7.rowHeight;

    if (false) {}
  }
});

var IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;

var defaultItemKey$1 = function defaultItemKey(index, data) {
  return index;
}; // In DEV mode, this Set helps us only log a warning once per component instance.
// This avoids spamming the console every time a render happens.


var devWarningsDirection = null;
var devWarningsTagName$1 = null;

if (false) {}

function createListComponent(_ref) {
  var _class;

  var getItemOffset = _ref.getItemOffset,
      getEstimatedTotalSize = _ref.getEstimatedTotalSize,
      getItemSize = _ref.getItemSize,
      getOffsetForIndexAndAlignment = _ref.getOffsetForIndexAndAlignment,
      getStartIndexForOffset = _ref.getStartIndexForOffset,
      getStopIndexForStartIndex = _ref.getStopIndexForStartIndex,
      initInstanceProps = _ref.initInstanceProps,
      shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange,
      validateProps = _ref.validateProps;
  return _class = /*#__PURE__*/function (_PureComponent) {
    _inheritsLoose(List, _PureComponent);

    // Always use explicit constructor for React components.
    // It produces less code after transpilation. (#26)
    // eslint-disable-next-line no-useless-constructor
    function List(props) {
      var _this;

      _this = _PureComponent.call(this, props) || this;
      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_this));
      _this._outerRef = void 0;
      _this._resetIsScrollingTimeoutId = null;
      _this.state = {
        instance: _assertThisInitialized(_this),
        isScrolling: false,
        scrollDirection: 'forward',
        scrollOffset: typeof _this.props.initialScrollOffset === 'number' ? _this.props.initialScrollOffset : 0,
        scrollUpdateWasRequested: false
      };
      _this._callOnItemsRendered = void 0;
      _this._callOnItemsRendered = memoize_one_esm(function (overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {
        return _this.props.onItemsRendered({
          overscanStartIndex: overscanStartIndex,
          overscanStopIndex: overscanStopIndex,
          visibleStartIndex: visibleStartIndex,
          visibleStopIndex: visibleStopIndex
        });
      });
      _this._callOnScroll = void 0;
      _this._callOnScroll = memoize_one_esm(function (scrollDirection, scrollOffset, scrollUpdateWasRequested) {
        return _this.props.onScroll({
          scrollDirection: scrollDirection,
          scrollOffset: scrollOffset,
          scrollUpdateWasRequested: scrollUpdateWasRequested
        });
      });
      _this._getItemStyle = void 0;

      _this._getItemStyle = function (index) {
        var _this$props = _this.props,
            direction = _this$props.direction,
            itemSize = _this$props.itemSize,
            layout = _this$props.layout;

        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);

        var style;

        if (itemStyleCache.hasOwnProperty(index)) {
          style = itemStyleCache[index];
        } else {
          var _offset = getItemOffset(_this.props, index, _this._instanceProps);

          var size = getItemSize(_this.props, index, _this._instanceProps); // TODO Deprecate direction "horizontal"

          var isHorizontal = direction === 'horizontal' || layout === 'horizontal';
          var isRtl = direction === 'rtl';
          var offsetHorizontal = isHorizontal ? _offset : 0;
          itemStyleCache[index] = style = {
            position: 'absolute',
            left: isRtl ? undefined : offsetHorizontal,
            right: isRtl ? offsetHorizontal : undefined,
            top: !isHorizontal ? _offset : 0,
            height: !isHorizontal ? size : '100%',
            width: isHorizontal ? size : '100%'
          };
        }

        return style;
      };

      _this._getItemStyleCache = void 0;
      _this._getItemStyleCache = memoize_one_esm(function (_, __, ___) {
        return {};
      });

      _this._onScrollHorizontal = function (event) {
        var _event$currentTarget = event.currentTarget,
            clientWidth = _event$currentTarget.clientWidth,
            scrollLeft = _event$currentTarget.scrollLeft,
            scrollWidth = _event$currentTarget.scrollWidth;

        _this.setState(function (prevState) {
          if (prevState.scrollOffset === scrollLeft) {
            // Scroll position may have been updated by cDM/cDU,
            // In which case we don't need to trigger another render,
            // And we don't want to update state.isScrolling.
            return null;
          }

          var direction = _this.props.direction;
          var scrollOffset = scrollLeft;

          if (direction === 'rtl') {
            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.
            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).
            // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.
            // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.
            switch (getRTLOffsetType()) {
              case 'negative':
                scrollOffset = -scrollLeft;
                break;

              case 'positive-descending':
                scrollOffset = scrollWidth - clientWidth - scrollLeft;
                break;
            }
          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.


          scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));
          return {
            isScrolling: true,
            scrollDirection: prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',
            scrollOffset: scrollOffset,
            scrollUpdateWasRequested: false
          };
        }, _this._resetIsScrollingDebounced);
      };

      _this._onScrollVertical = function (event) {
        var _event$currentTarget2 = event.currentTarget,
            clientHeight = _event$currentTarget2.clientHeight,
            scrollHeight = _event$currentTarget2.scrollHeight,
            scrollTop = _event$currentTarget2.scrollTop;

        _this.setState(function (prevState) {
          if (prevState.scrollOffset === scrollTop) {
            // Scroll position may have been updated by cDM/cDU,
            // In which case we don't need to trigger another render,
            // And we don't want to update state.isScrolling.
            return null;
          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.


          var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
          return {
            isScrolling: true,
            scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',
            scrollOffset: scrollOffset,
            scrollUpdateWasRequested: false
          };
        }, _this._resetIsScrollingDebounced);
      };

      _this._outerRefSetter = function (ref) {
        var outerRef = _this.props.outerRef;
        _this._outerRef = ref;

        if (typeof outerRef === 'function') {
          outerRef(ref);
        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {
          outerRef.current = ref;
        }
      };

      _this._resetIsScrollingDebounced = function () {
        if (_this._resetIsScrollingTimeoutId !== null) {
          cancelTimeout(_this._resetIsScrollingTimeoutId);
        }

        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);
      };

      _this._resetIsScrolling = function () {
        _this._resetIsScrollingTimeoutId = null;

        _this.setState({
          isScrolling: false
        }, function () {
          // Clear style cache after state update has been committed.
          // This way we don't break pure sCU for items that don't use isScrolling param.
          _this._getItemStyleCache(-1, null);
        });
      };

      return _this;
    }

    List.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
      validateSharedProps$1(nextProps, prevState);
      validateProps(nextProps);
      return null;
    };

    var _proto = List.prototype;

    _proto.scrollTo = function scrollTo(scrollOffset) {
      scrollOffset = Math.max(0, scrollOffset);
      this.setState(function (prevState) {
        if (prevState.scrollOffset === scrollOffset) {
          return null;
        }

        return {
          scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',
          scrollOffset: scrollOffset,
          scrollUpdateWasRequested: true
        };
      }, this._resetIsScrollingDebounced);
    };

    _proto.scrollToItem = function scrollToItem(index, align) {
      if (align === void 0) {
        align = 'auto';
      }

      var itemCount = this.props.itemCount;
      var scrollOffset = this.state.scrollOffset;
      index = Math.max(0, Math.min(index, itemCount - 1));
      this.scrollTo(getOffsetForIndexAndAlignment(this.props, index, align, scrollOffset, this._instanceProps));
    };

    _proto.componentDidMount = function componentDidMount() {
      var _this$props2 = this.props,
          direction = _this$props2.direction,
          initialScrollOffset = _this$props2.initialScrollOffset,
          layout = _this$props2.layout;

      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {
        var outerRef = this._outerRef; // TODO Deprecate direction "horizontal"

        if (direction === 'horizontal' || layout === 'horizontal') {
          outerRef.scrollLeft = initialScrollOffset;
        } else {
          outerRef.scrollTop = initialScrollOffset;
        }
      }

      this._callPropsCallbacks();
    };

    _proto.componentDidUpdate = function componentDidUpdate() {
      var _this$props3 = this.props,
          direction = _this$props3.direction,
          layout = _this$props3.layout;
      var _this$state = this.state,
          scrollOffset = _this$state.scrollOffset,
          scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;

      if (scrollUpdateWasRequested && this._outerRef != null) {
        var outerRef = this._outerRef; // TODO Deprecate direction "horizontal"

        if (direction === 'horizontal' || layout === 'horizontal') {
          if (direction === 'rtl') {
            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.
            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).
            // So we need to determine which browser behavior we're dealing with, and mimic it.
            switch (getRTLOffsetType()) {
              case 'negative':
                outerRef.scrollLeft = -scrollOffset;
                break;

              case 'positive-ascending':
                outerRef.scrollLeft = scrollOffset;
                break;

              default:
                var clientWidth = outerRef.clientWidth,
                    scrollWidth = outerRef.scrollWidth;
                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;
                break;
            }
          } else {
            outerRef.scrollLeft = scrollOffset;
          }
        } else {
          outerRef.scrollTop = scrollOffset;
        }
      }

      this._callPropsCallbacks();
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this._resetIsScrollingTimeoutId !== null) {
        cancelTimeout(this._resetIsScrollingTimeoutId);
      }
    };

    _proto.render = function render() {
      var _this$props4 = this.props,
          children = _this$props4.children,
          className = _this$props4.className,
          direction = _this$props4.direction,
          height = _this$props4.height,
          innerRef = _this$props4.innerRef,
          innerElementType = _this$props4.innerElementType,
          innerTagName = _this$props4.innerTagName,
          itemCount = _this$props4.itemCount,
          itemData = _this$props4.itemData,
          _this$props4$itemKey = _this$props4.itemKey,
          itemKey = _this$props4$itemKey === void 0 ? defaultItemKey$1 : _this$props4$itemKey,
          layout = _this$props4.layout,
          outerElementType = _this$props4.outerElementType,
          outerTagName = _this$props4.outerTagName,
          style = _this$props4.style,
          useIsScrolling = _this$props4.useIsScrolling,
          width = _this$props4.width;
      var isScrolling = this.state.isScrolling; // TODO Deprecate direction "horizontal"

      var isHorizontal = direction === 'horizontal' || layout === 'horizontal';
      var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;

      var _this$_getRangeToRend = this._getRangeToRender(),
          startIndex = _this$_getRangeToRend[0],
          stopIndex = _this$_getRangeToRend[1];

      var items = [];

      if (itemCount > 0) {
        for (var _index = startIndex; _index <= stopIndex; _index++) {
          items.push(Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"])(children, {
            data: itemData,
            key: itemKey(_index, itemData),
            index: _index,
            isScrolling: useIsScrolling ? isScrolling : undefined,
            style: this._getItemStyle(_index)
          }));
        }
      } // Read this value AFTER items have been created,
      // So their actual sizes (if variable) are taken into consideration.


      var estimatedTotalSize = getEstimatedTotalSize(this.props, this._instanceProps);
      return Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"])(outerElementType || outerTagName || 'div', {
        className: className,
        onScroll: onScroll,
        ref: this._outerRefSetter,
        style: _extends({
          position: 'relative',
          height: height,
          width: width,
          overflow: 'auto',
          WebkitOverflowScrolling: 'touch',
          willChange: 'transform',
          direction: direction
        }, style)
      }, Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createElement"])(innerElementType || innerTagName || 'div', {
        children: items,
        ref: innerRef,
        style: {
          height: isHorizontal ? '100%' : estimatedTotalSize,
          pointerEvents: isScrolling ? 'none' : undefined,
          width: isHorizontal ? estimatedTotalSize : '100%'
        }
      }));
    };

    _proto._callPropsCallbacks = function _callPropsCallbacks() {
      if (typeof this.props.onItemsRendered === 'function') {
        var itemCount = this.props.itemCount;

        if (itemCount > 0) {
          var _this$_getRangeToRend2 = this._getRangeToRender(),
              _overscanStartIndex = _this$_getRangeToRend2[0],
              _overscanStopIndex = _this$_getRangeToRend2[1],
              _visibleStartIndex = _this$_getRangeToRend2[2],
              _visibleStopIndex = _this$_getRangeToRend2[3];

          this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);
        }
      }

      if (typeof this.props.onScroll === 'function') {
        var _this$state2 = this.state,
            _scrollDirection = _this$state2.scrollDirection,
            _scrollOffset = _this$state2.scrollOffset,
            _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;

        this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);
      }
    } // Lazily create and cache item styles while scrolling,
    // So that pure component sCU will prevent re-renders.
    // We maintain this cache, and pass a style prop rather than index,
    // So that List can clear cached styles and force item re-render if necessary.
    ;

    _proto._getRangeToRender = function _getRangeToRender() {
      var _this$props5 = this.props,
          itemCount = _this$props5.itemCount,
          overscanCount = _this$props5.overscanCount;
      var _this$state3 = this.state,
          isScrolling = _this$state3.isScrolling,
          scrollDirection = _this$state3.scrollDirection,
          scrollOffset = _this$state3.scrollOffset;

      if (itemCount === 0) {
        return [0, 0, 0, 0];
      }

      var startIndex = getStartIndexForOffset(this.props, scrollOffset, this._instanceProps);
      var stopIndex = getStopIndexForStartIndex(this.props, startIndex, scrollOffset, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.
      // If there isn't at least one extra item, tab loops back around.

      var overscanBackward = !isScrolling || scrollDirection === 'backward' ? Math.max(1, overscanCount) : 1;
      var overscanForward = !isScrolling || scrollDirection === 'forward' ? Math.max(1, overscanCount) : 1;
      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
    };

    return List;
  }(external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"]), _class.defaultProps = {
    direction: 'ltr',
    itemData: undefined,
    layout: 'vertical',
    overscanCount: 2,
    useIsScrolling: false
  }, _class;
} // NOTE: I considered further wrapping individual items with a pure ListItem component.
// This would avoid ever calling the render function for the same index more than once,
// But it would also add the overhead of a lot of components/fibers.
// I assume people already do this (render function returning a class component),
// So my doing it would just unnecessarily double the wrappers.

var validateSharedProps$1 = function validateSharedProps(_ref2, _ref3) {
  var children = _ref2.children,
      direction = _ref2.direction,
      height = _ref2.height,
      layout = _ref2.layout,
      innerTagName = _ref2.innerTagName,
      outerTagName = _ref2.outerTagName,
      width = _ref2.width;
  var instance = _ref3.instance;

  if (false) { var isHorizontal; }
};

var DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;

var getItemMetadata$1 = function getItemMetadata(props, index, instanceProps) {
  var _ref = props,
      itemSize = _ref.itemSize;
  var itemMetadataMap = instanceProps.itemMetadataMap,
      lastMeasuredIndex = instanceProps.lastMeasuredIndex;

  if (index > lastMeasuredIndex) {
    var offset = 0;

    if (lastMeasuredIndex >= 0) {
      var itemMetadata = itemMetadataMap[lastMeasuredIndex];
      offset = itemMetadata.offset + itemMetadata.size;
    }

    for (var i = lastMeasuredIndex + 1; i <= index; i++) {
      var size = itemSize(i);
      itemMetadataMap[i] = {
        offset: offset,
        size: size
      };
      offset += size;
    }

    instanceProps.lastMeasuredIndex = index;
  }

  return itemMetadataMap[index];
};

var findNearestItem$1 = function findNearestItem(props, instanceProps, offset) {
  var itemMetadataMap = instanceProps.itemMetadataMap,
      lastMeasuredIndex = instanceProps.lastMeasuredIndex;
  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;

  if (lastMeasuredItemOffset >= offset) {
    // If we've already measured items within this range just use a binary search as it's faster.
    return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset);
  } else {
    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.
    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.
    // The overall complexity for this approach is O(log n).
    return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset);
  }
};

var findNearestItemBinarySearch$1 = function findNearestItemBinarySearch(props, instanceProps, high, low, offset) {
  while (low <= high) {
    var middle = low + Math.floor((high - low) / 2);
    var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;

    if (currentOffset === offset) {
      return middle;
    } else if (currentOffset < offset) {
      low = middle + 1;
    } else if (currentOffset > offset) {
      high = middle - 1;
    }
  }

  if (low > 0) {
    return low - 1;
  } else {
    return 0;
  }
};

var findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch(props, instanceProps, index, offset) {
  var itemCount = props.itemCount;
  var interval = 1;

  while (index < itemCount && getItemMetadata$1(props, index, instanceProps).offset < offset) {
    index += interval;
    interval *= 2;
  }

  return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);
};

var index_esm_getEstimatedTotalSize = function getEstimatedTotalSize(_ref2, _ref3) {
  var itemCount = _ref2.itemCount;
  var itemMetadataMap = _ref3.itemMetadataMap,
      estimatedItemSize = _ref3.estimatedItemSize,
      lastMeasuredIndex = _ref3.lastMeasuredIndex;
  var totalSizeOfMeasuredItems = 0; // Edge case check for when the number of items decreases while a scroll is in progress.
  // https://github.com/bvaughn/react-window/pull/138

  if (lastMeasuredIndex >= itemCount) {
    lastMeasuredIndex = itemCount - 1;
  }

  if (lastMeasuredIndex >= 0) {
    var itemMetadata = itemMetadataMap[lastMeasuredIndex];
    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;
  }

  var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;
  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;
  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;
};

var VariableSizeList = /*#__PURE__*/createListComponent({
  getItemOffset: function getItemOffset(props, index, instanceProps) {
    return getItemMetadata$1(props, index, instanceProps).offset;
  },
  getItemSize: function getItemSize(props, index, instanceProps) {
    return instanceProps.itemMetadataMap[index].size;
  },
  getEstimatedTotalSize: index_esm_getEstimatedTotalSize,
  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(props, index, align, scrollOffset, instanceProps) {
    var direction = props.direction,
        height = props.height,
        layout = props.layout,
        width = props.width; // TODO Deprecate direction "horizontal"

    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';
    var size = isHorizontal ? width : height;
    var itemMetadata = getItemMetadata$1(props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,
    // To ensure it reflects actual measurements instead of just estimates.

    var estimatedTotalSize = index_esm_getEstimatedTotalSize(props, instanceProps);
    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));
    var minOffset = Math.max(0, itemMetadata.offset - size + itemMetadata.size);

    if (align === 'smart') {
      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {
        align = 'auto';
      } else {
        align = 'center';
      }
    }

    switch (align) {
      case 'start':
        return maxOffset;

      case 'end':
        return minOffset;

      case 'center':
        return Math.round(minOffset + (maxOffset - minOffset) / 2);

      case 'auto':
      default:
        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
          return scrollOffset;
        } else if (scrollOffset < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }

    }
  },
  getStartIndexForOffset: function getStartIndexForOffset(props, offset, instanceProps) {
    return findNearestItem$1(props, instanceProps, offset);
  },
  getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {
    var direction = props.direction,
        height = props.height,
        itemCount = props.itemCount,
        layout = props.layout,
        width = props.width; // TODO Deprecate direction "horizontal"

    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';
    var size = isHorizontal ? width : height;
    var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);
    var maxOffset = scrollOffset + size;
    var offset = itemMetadata.offset + itemMetadata.size;
    var stopIndex = startIndex;

    while (stopIndex < itemCount - 1 && offset < maxOffset) {
      stopIndex++;
      offset += getItemMetadata$1(props, stopIndex, instanceProps).size;
    }

    return stopIndex;
  },
  initInstanceProps: function initInstanceProps(props, instance) {
    var _ref4 = props,
        estimatedItemSize = _ref4.estimatedItemSize;
    var instanceProps = {
      itemMetadataMap: {},
      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,
      lastMeasuredIndex: -1
    };

    instance.resetAfterIndex = function (index, shouldForceUpdate) {
      if (shouldForceUpdate === void 0) {
        shouldForceUpdate = true;
      }

      instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1); // We could potentially optimize further by only evicting styles after this index,
      // But since styles are only cached while scrolling is in progress-
      // It seems an unnecessary optimization.
      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.

      instance._getItemStyleCache(-1);

      if (shouldForceUpdate) {
        instance.forceUpdate();
      }
    };

    return instanceProps;
  },
  shouldResetStyleCacheOnItemSizeChange: false,
  validateProps: function validateProps(_ref5) {
    var itemSize = _ref5.itemSize;

    if (false) {}
  }
});

var FixedSizeGrid = /*#__PURE__*/createGridComponent({
  getColumnOffset: function getColumnOffset(_ref, index) {
    var columnWidth = _ref.columnWidth;
    return index * columnWidth;
  },
  getColumnWidth: function getColumnWidth(_ref2, index) {
    var columnWidth = _ref2.columnWidth;
    return columnWidth;
  },
  getRowOffset: function getRowOffset(_ref3, index) {
    var rowHeight = _ref3.rowHeight;
    return index * rowHeight;
  },
  getRowHeight: function getRowHeight(_ref4, index) {
    var rowHeight = _ref4.rowHeight;
    return rowHeight;
  },
  getEstimatedTotalHeight: function getEstimatedTotalHeight(_ref5) {
    var rowCount = _ref5.rowCount,
        rowHeight = _ref5.rowHeight;
    return rowHeight * rowCount;
  },
  getEstimatedTotalWidth: function getEstimatedTotalWidth(_ref6) {
    var columnCount = _ref6.columnCount,
        columnWidth = _ref6.columnWidth;
    return columnWidth * columnCount;
  },
  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {
    var columnCount = _ref7.columnCount,
        columnWidth = _ref7.columnWidth,
        width = _ref7.width;
    var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);
    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);
    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);

    if (align === 'smart') {
      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {
        align = 'auto';
      } else {
        align = 'center';
      }
    }

    switch (align) {
      case 'start':
        return maxOffset;

      case 'end':
        return minOffset;

      case 'center':
        // "Centered" offset is usually the average of the min and max.
        // But near the edges of the list, this doesn't hold true.
        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);

        if (middleOffset < Math.ceil(width / 2)) {
          return 0; // near the beginning
        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {
          return lastColumnOffset; // near the end
        } else {
          return middleOffset;
        }

      case 'auto':
      default:
        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {
          return scrollLeft;
        } else if (minOffset > maxOffset) {
          // Because we only take into account the scrollbar size when calculating minOffset
          // this value can be larger than maxOffset when at the end of the list
          return minOffset;
        } else if (scrollLeft < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }

    }
  },
  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {
    var rowHeight = _ref8.rowHeight,
        height = _ref8.height,
        rowCount = _ref8.rowCount;
    var lastRowOffset = Math.max(0, rowCount * rowHeight - height);
    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);
    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);

    if (align === 'smart') {
      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {
        align = 'auto';
      } else {
        align = 'center';
      }
    }

    switch (align) {
      case 'start':
        return maxOffset;

      case 'end':
        return minOffset;

      case 'center':
        // "Centered" offset is usually the average of the min and max.
        // But near the edges of the list, this doesn't hold true.
        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);

        if (middleOffset < Math.ceil(height / 2)) {
          return 0; // near the beginning
        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {
          return lastRowOffset; // near the end
        } else {
          return middleOffset;
        }

      case 'auto':
      default:
        if (scrollTop >= minOffset && scrollTop <= maxOffset) {
          return scrollTop;
        } else if (minOffset > maxOffset) {
          // Because we only take into account the scrollbar size when calculating minOffset
          // this value can be larger than maxOffset when at the end of the list
          return minOffset;
        } else if (scrollTop < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }

    }
  },
  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(_ref9, scrollLeft) {
    var columnWidth = _ref9.columnWidth,
        columnCount = _ref9.columnCount;
    return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));
  },
  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(_ref10, startIndex, scrollLeft) {
    var columnWidth = _ref10.columnWidth,
        columnCount = _ref10.columnCount,
        width = _ref10.width;
    var left = startIndex * columnWidth;
    var numVisibleColumns = Math.ceil((width + scrollLeft - left) / columnWidth);
    return Math.max(0, Math.min(columnCount - 1, startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive
    ));
  },
  getRowStartIndexForOffset: function getRowStartIndexForOffset(_ref11, scrollTop) {
    var rowHeight = _ref11.rowHeight,
        rowCount = _ref11.rowCount;
    return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));
  },
  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(_ref12, startIndex, scrollTop) {
    var rowHeight = _ref12.rowHeight,
        rowCount = _ref12.rowCount,
        height = _ref12.height;
    var top = startIndex * rowHeight;
    var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);
    return Math.max(0, Math.min(rowCount - 1, startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive
    ));
  },
  initInstanceProps: function initInstanceProps(props) {// Noop
  },
  shouldResetStyleCacheOnItemSizeChange: true,
  validateProps: function validateProps(_ref13) {
    var columnWidth = _ref13.columnWidth,
        rowHeight = _ref13.rowHeight;

    if (false) {}
  }
});

var FixedSizeList = /*#__PURE__*/createListComponent({
  getItemOffset: function getItemOffset(_ref, index) {
    var itemSize = _ref.itemSize;
    return index * itemSize;
  },
  getItemSize: function getItemSize(_ref2, index) {
    var itemSize = _ref2.itemSize;
    return itemSize;
  },
  getEstimatedTotalSize: function getEstimatedTotalSize(_ref3) {
    var itemCount = _ref3.itemCount,
        itemSize = _ref3.itemSize;
    return itemSize * itemCount;
  },
  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(_ref4, index, align, scrollOffset) {
    var direction = _ref4.direction,
        height = _ref4.height,
        itemCount = _ref4.itemCount,
        itemSize = _ref4.itemSize,
        layout = _ref4.layout,
        width = _ref4.width;
    // TODO Deprecate direction "horizontal"
    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';
    var size = isHorizontal ? width : height;
    var lastItemOffset = Math.max(0, itemCount * itemSize - size);
    var maxOffset = Math.min(lastItemOffset, index * itemSize);
    var minOffset = Math.max(0, index * itemSize - size + itemSize);

    if (align === 'smart') {
      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {
        align = 'auto';
      } else {
        align = 'center';
      }
    }

    switch (align) {
      case 'start':
        return maxOffset;

      case 'end':
        return minOffset;

      case 'center':
        {
          // "Centered" offset is usually the average of the min and max.
          // But near the edges of the list, this doesn't hold true.
          var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);

          if (middleOffset < Math.ceil(size / 2)) {
            return 0; // near the beginning
          } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {
            return lastItemOffset; // near the end
          } else {
            return middleOffset;
          }
        }

      case 'auto':
      default:
        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
          return scrollOffset;
        } else if (scrollOffset < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }

    }
  },
  getStartIndexForOffset: function getStartIndexForOffset(_ref5, offset) {
    var itemCount = _ref5.itemCount,
        itemSize = _ref5.itemSize;
    return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));
  },
  getStopIndexForStartIndex: function getStopIndexForStartIndex(_ref6, startIndex, scrollOffset) {
    var direction = _ref6.direction,
        height = _ref6.height,
        itemCount = _ref6.itemCount,
        itemSize = _ref6.itemSize,
        layout = _ref6.layout,
        width = _ref6.width;
    // TODO Deprecate direction "horizontal"
    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';
    var offset = startIndex * itemSize;
    var size = isHorizontal ? width : height;
    var numVisibleItems = Math.ceil((size + scrollOffset - offset) / itemSize);
    return Math.max(0, Math.min(itemCount - 1, startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive
    ));
  },
  initInstanceProps: function initInstanceProps(props) {// Noop
  },
  shouldResetStyleCacheOnItemSizeChange: true,
  validateProps: function validateProps(_ref7) {
    var itemSize = _ref7.itemSize;

    if (false) {}
  }
});

// Pulled from react-compat
// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349
function shallowDiffers(prev, next) {
  for (var attribute in prev) {
    if (!(attribute in next)) {
      return true;
    }
  }

  for (var _attribute in next) {
    if (prev[_attribute] !== next[_attribute]) {
      return true;
    }
  }

  return false;
}

var _excluded = ["style"],
    _excluded2 = ["style"];
// It knows to compare individual style props and ignore the wrapper object.
// See https://reactjs.org/docs/react-api.html#reactmemo

function areEqual(prevProps, nextProps) {
  var prevStyle = prevProps.style,
      prevRest = _objectWithoutPropertiesLoose(prevProps, _excluded);

  var nextStyle = nextProps.style,
      nextRest = _objectWithoutPropertiesLoose(nextProps, _excluded2);

  return !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest);
}

// It knows to compare individual style props and ignore the wrapper object.
// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate

function shouldComponentUpdate(nextProps, nextState) {
  return !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState);
}


//# sourceMappingURL=index.esm.js.map

// CONCATENATED MODULE: ../semi-foundation/pagination/constants.ts

const pagination_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-page")
};
const pagination_constants_strings = {};
const pagination_constants_numbers = {
  PAGE_SHOW_MAX: 7,
  REST_PAGE_SHOW_MAX: 5,
  DEFAULT_PAGE_SIZE: 10,
  PAGE_SIZE_OPTION: [10, 20, 40, 100],
  REST_PAGE_MAX_SIZE: 1000000
};

// CONCATENATED MODULE: ../semi-foundation/pagination/foundation.ts








/* eslint-disable max-len */

/* eslint-disable no-param-reassign */



class foundation_PaginationFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  }

  init() {
    const {
      currentPage,
      total,
      pageSize
    } = this.getStates(); // If pageSize is set, pageSizeOpts does not work

    this._updateDisabled({
      currentPage,
      total,
      pageSize
    });

    this._updatePageList({
      currentPage,
      total,
      pageSize
    });

    this._registerEventHandler();
  }

  destroy() {
    this._unregisterEventHandler();
  }

  _registerEventHandler() {
    this._adapter.registerKeyDownHandler(this.handleKeyDown);
  }

  _unregisterEventHandler() {
    this._adapter.unregisterKeyDownHandler(this.handleKeyDown);
  }

  _updateDisabled(pageInfo) {
    const {
      currentPage,
      total,
      pageSize
    } = pageInfo;

    const totalPageNum = this._getTotalPageNumber(total, pageSize);

    let prevIsDisabled = false;
    let nextIsDisabled = false;

    if (currentPage === 1) {
      prevIsDisabled = true;
      nextIsDisabled = totalPageNum < 2;
    } else if (currentPage === totalPageNum) {
      prevIsDisabled = false;
      nextIsDisabled = true;
    }

    this._adapter.setDisabled(prevIsDisabled, nextIsDisabled);
  }

  goPage(targetPageIndex) {
    if (targetPageIndex === '...') {
      return;
    }

    const {
      pageSize,
      currentPage
    } = this.getStates();

    const isControlComponent = this._isInProps('currentPage');

    if (targetPageIndex === currentPage) {
      return;
    }

    if (!isControlComponent) {
      this.updatePage(targetPageIndex);

      this._adapter.notifyPageChange(targetPageIndex);

      this._adapter.notifyChange(targetPageIndex, pageSize);
    } else {
      this._adapter.notifyPageChange(targetPageIndex);

      this._adapter.notifyChange(targetPageIndex, pageSize);
    }
  }

  updatePage() {
    let targetPageIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    let total = arguments.length > 1 ? arguments[1] : undefined;
    let pageSize = arguments.length > 2 ? arguments[2] : undefined;

    // maybe undefined or null
    if (total === null || typeof total === 'undefined') {
      total = this.getState('total');
    }

    if (pageSize === null || typeof pageSize === 'undefined') {
      pageSize = this.getState('pageSize');
    }

    this._updateDisabled({
      currentPage: targetPageIndex,
      total,
      pageSize
    });

    this._updatePageList({
      currentPage: targetPageIndex,
      total,
      pageSize
    });

    this._adapter.updateTotal(total);

    this._adapter.setCurrentPage(targetPageIndex);

    this._adapter.updatePageSize(pageSize);
  }

  goPrev() {
    const {
      currentPage
    } = this.getStates();

    if (currentPage > 1) {
      this.goPage(currentPage - 1);
    }
  }

  goNext() {
    const {
      currentPage,
      total,
      pageSize
    } = this.getStates();

    const totalPageNum = this._getTotalPageNumber(total, pageSize);

    if (currentPage <= totalPageNum - 1) {
      this.goPage(currentPage + 1);
    }
  }

  _updatePageList(pageListInfo) {
    var _context, _context2;

    const {
      currentPage,
      total,
      pageSize
    } = pageListInfo;
    let pageList = [];
    let restLeftPageList = []; // pages before ...

    let restRightPageList = []; // pages after ...

    /** Pager truncation logic (t is the total number of pages, c is the current page):
         - No need to truncate when t<=7 pages
         - When t>7
             - When c<4, the fourth is a truncation symbol (...)
             - When c=4, the sixth is the truncation symbol (...)
             - When 4<c<t-3, the second and sixth are truncation symbols (...)
             - When t-3<=c<=t, the second is the truncation symbol (...), followed by the 5th from the bottom-the 1st from the bottom
         Truncation character + number, the total number is 7
         分页器截断逻辑（t为总页数，c为当前页）：
        - t<=7 页的时候不需要截断
        - 当 t>7 时
            - 当 c<4 时，第4个为截断符号（...）
            - 当 c=4 时，第6个为截断符号（...）
            - 当 4<c<t-3 时，第2个与第6个为截断符号（...）
            - 当 t-3<=c<=t 时，第 2 个为截断符号（...），后面为倒数第5个-倒数第1个
        截断符+数字 总共个数为7个
    */

    const totalPageNum = this._getTotalPageNumber(total, pageSize);

    const {
      PAGE_SHOW_MAX,
      REST_PAGE_MAX_SIZE
    } = pagination_constants_numbers;

    if (totalPageNum <= PAGE_SHOW_MAX) {
      pageList = from_default()({
        length: totalPageNum
      }, (v, i) => i + 1);
      restLeftPageList = [];
      restRightPageList = [];
    } else {
      switch (true) {
        case currentPage < 4:
          pageList = [1, 2, 3, 4, '...', totalPageNum - 1, totalPageNum]; // length: (totalPageNum - 1) - 4

          restRightPageList = from_default()({
            length: Math.min(totalPageNum - 6, REST_PAGE_MAX_SIZE)
          }, (v, i) => i + 5);
          restLeftPageList = [];
          break;

        case currentPage === 4:
          pageList = [1, 2, 3, 4, 5, '...', totalPageNum];
          restRightPageList = from_default()({
            length: Math.min(totalPageNum - 6, REST_PAGE_MAX_SIZE)
          }, (v, i) => i + 6);
          restLeftPageList = [];
          break;

        case 4 < currentPage && currentPage < totalPageNum - 3:
          const middle = from_default()({
            length: 3
          }, (v, i) => currentPage + (i - 1));

          pageList = concat_default()(_context = [1]).call(_context, '...', middle, '...', totalPageNum); // length: total-(currentPage+1)-1

          restRightPageList = from_default()({
            length: Math.min(totalPageNum - currentPage - 2, REST_PAGE_MAX_SIZE)
          }, (v, i) => currentPage + i + 2);
          restLeftPageList = from_default()({
            length: Math.min(currentPage - 3, REST_PAGE_MAX_SIZE)
          }, (v, i) => i + 2);
          break;

        case currentPage - 3 <= currentPage && currentPage <= totalPageNum:
          const right = from_default()({
            length: 5
          }, (v, i) => totalPageNum - (4 - i));

          pageList = concat_default()(_context2 = [1, '...']).call(_context2, right);
          restRightPageList = [];
          restLeftPageList = from_default()({
            length: Math.min(right[0] - 2, REST_PAGE_MAX_SIZE)
          }, (v, i) => i + 2);
          break;

        default:
          break;
      }
    }

    this._adapter.setPageList({
      pageList,
      restLeftPageList,
      restRightPageList
    }); // this._adapter.setRestLeftPageList(restLeftPageList);
    // this._adapter.setRestRightPageList(restRightPageList);

  }

  changePageSize(newPageSize) {
    const {
      pageSize
    } = this.getStates();

    this._adapter.updatePageSize(newPageSize);

    this._adapter.notifyPageSizeChange(newPageSize);

    const {
      total,
      currentPage
    } = this.getStates(); // After converting the switching page capacity, which page is the current page

    const currentPageFirstItemIndex = (currentPage - 1) * pageSize + 1;
    const newCurrentPage = Math.ceil(currentPageFirstItemIndex / newPageSize);
    this.updatePage(newCurrentPage, total, newPageSize);

    if (currentPage !== newCurrentPage) {
      this._adapter.notifyPageChange(newCurrentPage);
    }

    this._adapter.notifyChange(newCurrentPage, newPageSize);
  } // TODO handle tab/enter events
  // eslint-disable-next-line @typescript-eslint/no-empty-function


  handleKeyDown() {} // If pageSize is not in the Opts array, insert it


  pageSizeInOpts() {
    const {
      pageSizeOpts
    } = this.getProps();
    const {
      pageSize
    } = this.getStates();
    const newPageSizeOpts = [...pageSizeOpts];

    if (index_of_default()(newPageSizeOpts).call(newPageSizeOpts, pageSize) === -1) {
      const firstLargerIndex = find_index_default()(newPageSizeOpts).call(newPageSizeOpts, el => el > pageSize);

      splice_default()(newPageSizeOpts).call(newPageSizeOpts, firstLargerIndex, 0, pageSize);
    }

    return newPageSizeOpts;
  }

  handleQuickJumpNumberChange(targetPage) {
    this._adapter.updateQuickJumpPage(targetPage);
  }

  _handleQuickJump(quickJumpPage) {
    let page = Number(quickJumpPage);
    const {
      pageSize,
      total
    } = this.getStates();

    const totalPageNum = this._getTotalPageNumber(total, pageSize);

    if (is_nan_default()(page)) {
      return;
    } // If the user input is greater than totalPage


    if (page > totalPageNum) {
      page = totalPageNum;
    }

    if (page <= 0) {
      page = 1;
    } // clear inputnumber


    this._adapter.updateQuickJumpPage('');

    this.goPage(page);
  }

  handleQuickJumpBlur() {
    const {
      quickJumpPage
    } = this.getStates(); // no need to operate when inputnumber blur & quickJumpPage is empty

    if (typeof quickJumpPage === 'string' && quickJumpPage || typeof quickJumpPage === 'number') {
      this._handleQuickJump(quickJumpPage);
    }
  }

  handleQuickJumpEnterPress(targetPage) {
    this._handleQuickJump(targetPage);
  }

  _getTotalPageNumber(total, pageSize) {
    const totalPageNum = Math.ceil(total / pageSize);
    return totalPageNum;
  }

}

/* harmony default export */ var pagination_foundation = (foundation_PaginationFoundation);
// EXTERNAL MODULE: ../semi-foundation/pagination/pagination.scss
var pagination_pagination = __webpack_require__("gJkj");

// CONCATENATED MODULE: ../semi-foundation/select/foundation.ts


















var foundation_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* argus-disable unPkgSensitiveInfo */

/* eslint-disable max-len */








class foundation_SelectFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter)); // keyboard event listner
    // eslint-disable-next-line @typescript-eslint/member-ordering

    this._keydownHandler = null;
  }

  init() {
    this._setDropdownWidth();

    const isDefaultOpen = this.getProp('defaultOpen');
    const isOpen = this.getProp('open');

    const originalOptions = this._collectOptions();

    this._setDefaultSelection(originalOptions);

    if (isDefaultOpen || isOpen) {
      this.open(undefined, originalOptions);
    }

    const autoFocus = this.getProp('autoFocus');

    if (autoFocus) {
      this.focus();
    }
  }

  focus() {
    const isFilterable = this._isFilterable();

    const isMultiple = this._isMultiple();

    this._adapter.updateFocusState(true);

    this._adapter.setIsFocusInContainer(false);

    if (isFilterable && isMultiple) {
      // when filter and multiple, only focus input
      this.focusInput();
    } else if (isFilterable && !isMultiple) {
      // when filter and not multiple, only show input and focus input
      this.toggle2SearchInput(true);
    } else {
      this._focusTrigger();
    }
  }

  _focusTrigger() {
    this._adapter.focusTrigger(); // this.bindKeyBoardEvent();

  }

  destroy() {
    this._adapter.unregisterClickOutsideHandler(); // this.unBindKeyBoardEvent();

  }

  _setDropdownWidth() {
    const {
      style,
      dropdownMatchSelectWidth
    } = this.getProps();
    let width;

    if (dropdownMatchSelectWidth) {
      var _context;

      if (style && isNumber_default()(style.width)) {
        width = style.width;
      } else if (style && isString_default()(style.width) && !includes_default()(_context = style.width).call(_context, '%')) {
        width = style.width;
      } else {
        width = this._adapter.getTriggerWidth();
      }

      this._adapter.setOptionWrapperWidth(width);
    }
  }

  _collectOptions() {
    const originalOptions = this._adapter.getOptionsFromChildren();

    this._adapter.updateOptions(originalOptions); // Reposition the drop-down layer


    this._adapter.rePositionDropdown();

    return originalOptions;
  }

  _setDefaultSelection(originalOptions) {
    let {
      value
    } = this.getProps();
    const {
      defaultValue
    } = this.getProps();

    if (this._isControlledComponent()) {// do nothing
    } else {
      value = defaultValue;
    }

    this._update(value, originalOptions);
  } // call when props.optionList change


  handleOptionListChange() {
    const newOptionList = this._collectOptions();

    const {
      selections
    } = this.getStates();
    this.updateOptionsActiveStatus(selections, newOptionList); // reset focusIndex

    const {
      defaultActiveFirstOption
    } = this.getProps();

    if (defaultActiveFirstOption) {
      this._adapter.updateFocusIndex(0);
    }
  } // In uncontrolled mode, when props.optionList change,
  // but already had defaultValue or choose some option


  handleOptionListChangeHadDefaultValue() {
    const selections = this.getState('selections');
    let value;
    const {
      onChangeWithObject
    } = this.getProps();

    const isMultiple = this._isMultiple();

    switch (true) {
      case isMultiple && Boolean(selections.size):
        try {
          var _context2;

          value = map_default()(_context2 = [...selections]).call(_context2, item => // At this point item1 is directly the object
          onChangeWithObject ? item[1] : item[1].value);
        } catch (error) {
          value = [];
        }

        break;

      case isMultiple && !selections.size:
        value = [];
        break;

      case !isMultiple && Boolean(selections.size):
        try {
          value = onChangeWithObject ? [...selections][0][1] : [...selections][0][1].value;
        } catch (error) {}

        break;

      case !isMultiple && !selections.size:
        break;

      default:
        break;
    }

    const originalOptions = this._adapter.getOptionsFromChildren();

    this._update(value, originalOptions);
  } // call when props.value change


  handleValueChange(value) {
    const {
      allowCreate
    } = this.getProps();
    let originalOptions; // AllowCreate and controlled mode, no need to re-collect optionList

    if (allowCreate && this._isControlledComponent()) {
      originalOptions = this.getState('options');

      for_each_default()(originalOptions).call(originalOptions, item => item._show = true);
    } else {
      // originalOptions = this.getState('options');
      // The options in state cannot be used directly here, because it is possible to update the optionList and props.value at the same time, and the options in state are still old at this time
      originalOptions = this._adapter.getOptionsFromChildren();
    } // Multi-selection, controlled mode, you need to reposition the drop-down menu after updating


    this._adapter.rePositionDropdown();

    this._update(value, originalOptions);
  } // Update the selected item in the selection box


  _update(propValue, originalOptions) {
    let selections;

    if (!this._isMultiple()) {
      // Radio
      selections = this._updateSingle(propValue, originalOptions);
    } else {
      selections = this._updateMultiple(propValue, originalOptions);
    } // Update the text in the selection box


    this._adapter.updateSelection(selections); // Update the selected item in the drop-down box


    this.updateOptionsActiveStatus(selections, originalOptions);
  } // Optionally selected updates (when components are mounted, or after value changes)


  _updateSingle(propValue, originalOptions) {
    const selections = new core_js_stable_map_default.a();
    const {
      onChangeWithObject
    } = this.getProps(); // When onChangeWithObject is true, the defaultValue or Value passed by the props should be the object, which corresponds to the result returned by onChange, so the value of the object needs to be taken as a judgment comparison

    const selectedValue = onChangeWithObject && typeof propValue !== 'undefined' ? propValue.value : propValue;

    const selectedOptions = filter_default()(originalOptions).call(originalOptions, option => option.value === selectedValue);

    const noMatchOptionInList = !selectedOptions.length && typeof selectedValue !== 'undefined'; // If the current value, there is a matching option in the optionList

    if (selectedOptions.length) {
      const selectedOption = selectedOptions[0];

      const optionExist = assign_default()({}, selectedOption); // if (onChangeWithObject) {
      //     OptionExist = {... propValue }; // value is the object with the'value 'Key
      // }


      selections.set(optionExist.label, optionExist);
    } else if (noMatchOptionInList) {
      // If the current value does not have a corresponding item in the optionList, construct an option and update it to the selection. However, it does not need to be inserted into the list
      let optionNotExist = {
        value: propValue,
        label: propValue,
        _notExist: true,
        _scrollIndex: -1
      };

      if (onChangeWithObject) {
        optionNotExist = assign_default()(assign_default()({}, propValue), {
          _notExist: true,
          _scrollIndex: -1
        });
      }

      selections.set(optionNotExist.label, optionNotExist);
    }

    return selections;
  } // Multi-selected option update (when the component is mounted, or after the value changes)


  _updateMultiple(propValue, originalOptions) {
    const nowSelections = this.getState('selections');
    let selectedOptionList = []; // Multiple selection is to determine whether it is an array to avoid the problem of defaultValue/value incoming string error

    const propValueIsArray = is_array_default()(propValue);

    this.checkMultipleProps(); // If N values are currently selected, the corresponding option data is retrieved from the current selections for retrieval. Because these selected options may not exist in the new optionList

    if (nowSelections.size) {
      var _context3;

      selectedOptionList = map_default()(_context3 = [...nowSelections]).call(_context3, item => item[1]);
    }

    const selections = new core_js_stable_map_default.a();
    let selectedValues = propValue;
    const {
      onChangeWithObject
    } = this.getProps(); // When onChangeWithObject is true

    if (onChangeWithObject && propValueIsArray) {
      selectedValues = map_default()(propValue).call(propValue, item => item.value);
    }

    if (propValueIsArray && selectedValues.length) {
      for_each_default()(selectedValues).call(selectedValues, (selectedValue, i) => {
        // The current value exists in the current optionList
        const index = find_index_default()(originalOptions).call(originalOptions, option => option.value === selectedValue);

        if (index !== -1) {
          selections.set(originalOptions[index].label, originalOptions[index]);
        } else {
          // The current value exists in the optionList that has been selected before the change, and does not exist in the current optionList, then directly take the corresponding value from the selections, no need to construct a new option
          const indexInSelectedList = find_index_default()(selectedOptionList).call(selectedOptionList, option => option.value === selectedValue);

          if (indexInSelectedList !== -1) {
            const option = selectedOptionList[indexInSelectedList];
            selections.set(option.label, option);
          } else {
            // The current value does not exist in the current optionList or the list before the change. Construct an option and update it to the selection
            let optionNotExist = {
              value: selectedValue,
              label: selectedValue,
              _notExist: true
            };
            onChangeWithObject ? optionNotExist = assign_default()(assign_default()({}, propValue[i]), {
              _notExist: true
            }) : null;
            selections.set(optionNotExist.label, assign_default()(assign_default()({}, optionNotExist), {
              _scrollIndex: -1
            }));
          }
        }
      });
    }

    return selections;
  }

  _isMultiple() {
    return this.getProp('multiple');
  }

  _isDisabled() {
    return this.getProp('disabled');
  }

  _isFilterable() {
    return Boolean(this.getProp('filter')); // filter can be boolean or function
  }

  handleClick(e) {
    const {
      clickToHide
    } = this.getProps();
    const {
      isOpen
    } = this.getStates();

    const isDisabled = this._isDisabled();

    if (isDisabled) {
      return;
    } else if (!isOpen) {
      this.open();

      this._notifyFocus(e);
    } else if (isOpen && clickToHide) {
      this.close(e);
    } else if (isOpen && !clickToHide) {
      this.focusInput();
    }
  }

  open(acInput, originalOptions) {
    const isFilterable = this._isFilterable();

    const options = originalOptions || this.getState('options'); // When searchable, when the drop-down box expands

    if (isFilterable) {
      var _context4;

      // Also clears the options filter to show all candidates
      // Options created dynamically but not selected are also filtered out
      const sugInput = '';

      const newOptions = filter_default()(_context4 = this._filterOption(options, sugInput)).call(_context4, item => !item._inputCreateOnly);

      this._adapter.updateOptions(newOptions);

      this.toggle2SearchInput(true);
    }

    this._adapter.openMenu();

    this._setDropdownWidth();

    this._adapter.notifyDropdownVisibleChange(true);

    this.bindKeyBoardEvent();

    this._adapter.registerClickOutsideHandler(e => {
      this.close(e);

      this._notifyBlur(e);

      this._adapter.updateFocusState(false);
    });
  }

  toggle2SearchInput(isShow) {
    if (isShow) {
      this._adapter.toggleInputShow(isShow, () => this.focusInput());
    } else {
      // only when choose the option and close the panel, the input can be hide
      this._adapter.toggleInputShow(isShow, () => undefined);
    }
  }

  close(e) {
    // to support A11y, closing the panel trigger does not necessarily lose focus
    const isFilterable = this._isFilterable();

    if (isFilterable) {
      // this.unBindKeyBoardEvent();
      this.clearInput();
      this.toggle2SearchInput(false);
    }

    this._adapter.closeMenu();

    this._adapter.notifyDropdownVisibleChange(false);

    this._adapter.setIsFocusInContainer(false); // this.unBindKeyBoardEvent();
    // this._notifyBlur(e);


    this._adapter.unregisterClickOutsideHandler(); // this._adapter.updateFocusState(false);

  }

  onSelect(option, optionIndex, event) {
    const isDisabled = this._isDisabled();

    if (isDisabled) {
      return;
    } // If the allowCreate dynamically created option is selected, onCreate needs to be triggered


    if (option._inputCreateOnly) {
      this._adapter.notifyCreate(option);
    }

    const isMultiple = this._isMultiple();

    if (!isMultiple) {
      this._handleSingleSelect(option, event);

      this._focusTrigger();
    } else {
      this._handleMultipleSelect(option, event);
    }

    this._adapter.updateFocusIndex(optionIndex);
  }

  _handleSingleSelect(_a, event) {
    var {
      value,
      label
    } = _a,
        rest = foundation_rest(_a, ["value", "label"]);

    const selections = new core_js_stable_map_default.a().set(label, assign_default()({
      value,
      label
    }, rest)); // First trigger onSelect, then trigger onChange

    this._notifySelect(value, assign_default()({
      value,
      label
    }, rest)); // If it is a controlled component, directly notify


    if (this._isControlledComponent()) {
      this._notifyChange(selections);

      this.close(event);
    } else {
      this._adapter.updateSelection(selections); // notify user


      this._notifyChange(selections); // Update the selected item in the drop-down box


      this.close(event);
      this.updateOptionsActiveStatus(selections);
    }
  }

  _handleMultipleSelect(_a, event) {
    var {
      value,
      label
    } = _a,
        rest = foundation_rest(_a, ["value", "label"]);

    const maxLimit = this._adapter.getMaxLimit();

    const selections = this._adapter.getSelections();

    const {
      autoClearSearchValue
    } = this.getProps();

    if (selections.has(label)) {
      this._notifyDeselect(value, assign_default()({
        value,
        label
      }, rest));

      selections.delete(label);
    } else if (maxLimit && selections.size === maxLimit) {
      this._adapter.notifyMaxLimit(assign_default()({
        value,
        label
      }, omit_default()(rest, '_scrollIndex')));

      return;
    } else {
      this._notifySelect(value, assign_default()({
        value,
        label
      }, rest));

      selections.set(label, assign_default()({
        value,
        label
      }, rest));
    }

    if (this._isControlledComponent()) {
      // Controlled components, directly notified
      this._notifyChange(selections);

      if (this._isFilterable()) {
        if (autoClearSearchValue) {
          this.clearInput();
        }

        this.focusInput();
      }
    } else {
      // Uncontrolled components, update ui
      this._adapter.updateSelection(selections); // In multi-select mode, the drop-down pop-up layer is repositioned every time the value is changed, because the height selection of the selection box may have changed


      this._adapter.rePositionDropdown();

      let {
        options
      } = this.getStates(); // Searchable filtering, when selected, resets Input

      if (this._isFilterable()) {
        // When filter active，if autoClearSearchValue is true，reset input after select
        if (autoClearSearchValue) {
          this.clearInput(); // At the same time, the filtering of options is also cleared, in order to show all candidates

          const sugInput = '';
          options = this._filterOption(options, sugInput);
        }

        this.focusInput();
      }

      this.updateOptionsActiveStatus(selections, options);

      this._notifyChange(selections);
    }
  }

  clearSelected() {
    const selections = new core_js_stable_map_default.a();

    if (this._isControlledComponent()) {
      this._notifyChange(selections);

      this._adapter.notifyClear();
    } else {
      this._adapter.updateSelection(selections);

      this.updateOptionsActiveStatus(selections);

      this._notifyChange(selections);

      this._adapter.notifyClear();
    } // when call manually by ref method


    const {
      isOpen
    } = this.getStates();

    if (isOpen) {
      this._adapter.rePositionDropdown();
    }
  } // Update the selected item in the drop-down box


  updateOptionsActiveStatus(selections) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getState('options');
    const {
      allowCreate
    } = this.getProps();

    const newOptions = map_default()(options).call(options, option => {
      if (selections.has(option.label)) {
        option._selected = true;

        if (allowCreate) {
          delete option._inputCreateOnly;
        }
      } else {
        if (option._inputCreateOnly) {
          option._show = false;
        }

        option._selected = false;
      }

      return option;
    });

    this._adapter.updateOptions(newOptions);
  }

  removeTag(item) {
    const selections = this._adapter.getSelections();

    selections.delete(item.label);

    if (this._isControlledComponent()) {
      this._notifyDeselect(item.value, item);

      this._notifyChange(selections);
    } else {
      this._notifyDeselect(item.value, item);

      this._adapter.updateSelection(selections);

      this.updateOptionsActiveStatus(selections); // Repostion drop-down layer, because the selection may have changed the number of rows, resulting in a height change

      this._adapter.rePositionDropdown();

      this._notifyChange(selections);
    }
  }

  clearInput() {
    this._adapter.updateInputValue('');

    this._adapter.notifySearch(''); // reset options filter


    const {
      options
    } = this.getStates();
    const {
      remote
    } = this.getProps();
    let optionsAfterFilter = options;

    if (!remote) {
      optionsAfterFilter = this._filterOption(options, '');
    }

    this._adapter.updateOptions(optionsAfterFilter);
  }

  focusInput() {
    this._adapter.focusInput();

    this._adapter.updateFocusState(true);

    this._adapter.setIsFocusInContainer(false);
  }

  handleInputChange(sugInput) {
    // Input is a controlled component, so the value needs to be updated
    this._adapter.updateInputValue(sugInput);

    const {
      options,
      isOpen
    } = this.getStates();
    const {
      allowCreate,
      remote
    } = this.getProps();
    let optionsAfterFilter = options;

    if (!remote) {
      // Filter options based on input
      optionsAfterFilter = this._filterOption(options, sugInput);
    } // When allowClear is true, an entry can be created. You need to include the current input as a new Option input


    optionsAfterFilter = this._createOptionByInput(allowCreate, optionsAfterFilter, sugInput);

    this._adapter.updateOptions(optionsAfterFilter);

    this._adapter.notifySearch(sugInput); // In multi-select mode, the drop-down box is repositioned each time you enter, because it may cause a line break as the input changes


    if (this._isMultiple()) {
      this._adapter.rePositionDropdown();
    }
  }

  _filterOption(originalOptions, sugInput) {
    const filter = this.getProp('filter');

    if (!filter) {
      // 1. No filtering
      return originalOptions;
    } else if (typeof filter === 'boolean' && filter) {
      // 2. When true, the default filter is used
      const input = sugInput.toLowerCase();
      return map_default()(originalOptions).call(originalOptions, option => {
        var _context5;

        const label = option.label.toString().toLowerCase();
        const groupLabel = option._parentGroup && option._parentGroup.label;

        const matchOption = includes_default()(label).call(label, input);

        const matchGroup = isString_default()(groupLabel) && includes_default()(_context5 = groupLabel.toLowerCase()).call(_context5, input);

        if (matchOption || matchGroup) {
          option._show = true;
        } else {
          option._show = false;
        }

        return option;
      });
    } else if (typeof filter === 'function') {
      // 3. When passing in a custom function, use a custom function for filtering
      return map_default()(originalOptions).call(originalOptions, option => {
        filter(sugInput, option) ? option._show = true : option._show = false;
        return option;
      });
    }

    return undefined;
  }

  _createOptionByInput(allowCreate, optionsAfterFilter, sugInput) {
    if (allowCreate) {
      if (sugInput) {
        // optionsAfterFilter clone ??? needClone ?
        const newOptionByInput = {
          _show: true,
          _selected: false,
          value: sugInput,
          label: sugInput,
          // True indicates that the option was dynamically created during user filtering
          _inputCreateOnly: true
        };
        let createOptionIndex = -1;
        let matchOptionIndex = -1;

        for_each_default()(optionsAfterFilter).call(optionsAfterFilter, (option, index) => {
          if (!option._show && !option._inputCreateOnly) {
            return;
          } // The matching algorithm is not necessarily through labels?


          if (option.label === sugInput) {
            matchOptionIndex = index;
          }

          if (option._inputCreateOnly) {
            createOptionIndex = index;
            option.value = sugInput;
            option.label = sugInput;
            option._show = true;
          }
        });

        if (createOptionIndex === -1 && matchOptionIndex === -1) {
          optionsAfterFilter.push(newOptionByInput);
        }

        if (matchOptionIndex !== -1) {
          optionsAfterFilter = filter_default()(optionsAfterFilter).call(optionsAfterFilter, item => !item._inputCreateOnly);
        }
      } else {
        // Delete input unselected items
        optionsAfterFilter = filter_default()(optionsAfterFilter).call(optionsAfterFilter, item => !item._inputCreateOnly);
      }
    } // TODO Promise supports asynchronous creation


    return optionsAfterFilter;
  }

  bindKeyBoardEvent() {
    this._keydownHandler = event => {
      this._handleKeyDown(event);
    };

    this._adapter.registerKeyDown(this._keydownHandler);
  }

  unBindKeyBoardEvent() {
    if (this._keydownHandler) {
      this._adapter.unregisterKeyDown();
    }
  }

  _handleKeyDown(event) {
    const key = event.keyCode;
    const {
      loading,
      filter,
      multiple,
      disabled
    } = this.getProps();
    const {
      isOpen
    } = this.getStates();

    if (loading || disabled) {
      return;
    }

    switch (key) {
      case utils_keyCode.UP:
        // Prevent Input's cursor from following
        // Prevent Input cursor from following
        event.preventDefault();

        this._handleArrowKeyDown(-1);

        break;

      case utils_keyCode.DOWN:
        // Prevent Input's cursor from following
        // Prevent Input cursor from following
        event.preventDefault();

        this._handleArrowKeyDown(1);

        break;

      case utils_keyCode.BACKSPACE:
        this._handleBackspaceKeyDown();

        break;

      case utils_keyCode.ENTER:
        // internal-issues:302
        // prevent trigger form’s submit when use in form
        handlePrevent(event);

        this._handleEnterKeyDown(event);

        break;

      case utils_keyCode.ESC:
        isOpen && this.close(event);
        filter && !multiple && this._focusTrigger();
        break;

      case utils_keyCode.TAB:
        // check if slot have focusable element
        this._handleTabKeyDown(event);

        break;

      default:
        break;
    }
  }

  handleContainerKeyDown(event) {
    // when focus in contanier, handle the key down
    const key = event.keyCode;
    const {
      isOpen
    } = this.getStates();

    switch (key) {
      case utils_keyCode.TAB:
        isOpen && this._handleTabKeyDown(event);
        break;

      default:
        break;
    }
  }

  _getEnableFocusIndex(offset) {
    const {
      focusIndex,
      options
    } = this.getStates();

    const visibleOptions = filter_default()(options).call(options, item => item._show); // let visibleOptions = options;


    const optionsLength = visibleOptions.length;
    let index = focusIndex + offset;

    if (index < 0) {
      index = optionsLength - 1;
    }

    if (index >= optionsLength) {
      index = 0;
    } // avoid newIndex option is disabled


    if (offset > 0) {
      let nearestActiveOption = -1;

      for (let i = 0; i < visibleOptions.length; i++) {
        const optionIsActive = !visibleOptions[i].disabled;

        if (optionIsActive) {
          nearestActiveOption = i;
        }

        if (nearestActiveOption >= index) {
          break;
        }
      }

      index = nearestActiveOption;
    } else {
      let nearestActiveOption = visibleOptions.length;

      for (let i = optionsLength - 1; i >= 0; i--) {
        const optionIsActive = !visibleOptions[i].disabled;

        if (optionIsActive) {
          nearestActiveOption = i;
        }

        if (nearestActiveOption <= index) {
          break;
        }
      }

      index = nearestActiveOption;
    } // console.log('new:' + index);


    this._adapter.updateFocusIndex(index);

    this._adapter.updateScrollTop(index);
  }

  _handleArrowKeyDown(offset) {
    const {
      isOpen
    } = this.getStates();
    isOpen ? this._getEnableFocusIndex(offset) : this.open();
  }

  _handleTabKeyDown(event) {
    const {
      isOpen
    } = this.getStates();

    this._adapter.updateFocusState(false);

    if (isOpen) {
      const container = this._adapter.getContainer();

      const focusableElements = this._adapter.getFocusableElements(container);

      const focusableNum = focusableElements.length;

      if (focusableNum > 0) {
        // Shift + Tab will move focus backward
        if (event.shiftKey) {
          this._handlePanelOpenShiftTabKeyDown(focusableElements, event);
        } else {
          this._handlePanelOpenTabKeyDown(focusableElements, event);
        }
      } else {
        // there are no focusable elements inside the container, tab to next element and trigger blur
        this.close();

        this._notifyBlur(event);
      }
    } else {
      // tab or shift tab to next element and trigger blur
      this._notifyBlur(event);
    }
  }

  _handlePanelOpenTabKeyDown(focusableElements, event) {
    const activeElement = this._adapter.getActiveElement();

    const isFocusInContainer = this._adapter.getIsFocusInContainer();

    if (!isFocusInContainer) {
      // focus in trigger, set next focus to the first element in container
      focusableElements[0].focus();

      this._adapter.setIsFocusInContainer(true);

      handlePrevent(event);
    } else if (activeElement === focusableElements[focusableElements.length - 1]) {
      // focus in the last element in container, focus back to trigger and close panel
      this._focusTrigger();

      this.close();
      handlePrevent(event);
    }
  }

  _handlePanelOpenShiftTabKeyDown(focusableElements, event) {
    const activeElement = this._adapter.getActiveElement();

    const isFocusInContainer = this._adapter.getIsFocusInContainer();

    if (!isFocusInContainer) {
      // focus in trigger, close the panel, shift tab to previe element and trigger blur
      this.close();

      this._notifyBlur(event);
    } else if (activeElement === focusableElements[0]) {
      // focus in the first element in container, focus back to trigger
      this._focusTrigger();

      this._adapter.setIsFocusInContainer(false);

      handlePrevent(event);
    }
  }

  _handleEnterKeyDown(event) {
    const {
      isOpen,
      options,
      focusIndex
    } = this.getStates();

    if (!isOpen) {
      this.open();
    } else {
      if (focusIndex !== -1) {
        const visibleOptions = filter_default()(options).call(options, item => item._show);

        const {
          length
        } = visibleOptions; // fix issue 1201

        if (length <= focusIndex) {
          return;
        }

        if (visibleOptions && length) {
          const selectedOption = visibleOptions[focusIndex];

          if (selectedOption.disabled) {
            return;
          }

          this.onSelect(selectedOption, focusIndex, event);
        }
      } else {
        this.close();
      }
    }
  }

  _handleBackspaceKeyDown() {
    if (this._isMultiple()) {
      const selections = this._adapter.getSelections();

      const {
        inputValue
      } = this.getStates();
      const length = selections.size;

      if (length && !inputValue) {
        const keys = [...instance_keys_default()(selections).call(selections)];
        let index = length - 1;
        let targetLabel = keys[index];
        let targetItem = selections.get(targetLabel);
        let isAllDisabled = false; // can skip disabled item when remove trigger by backspace

        if (targetItem.disabled && index === 0) {
          return;
        }

        while (targetItem.disabled && index !== 0) {
          index = index - 1;
          targetLabel = keys[index];
          targetItem = selections.get(targetLabel); // eslint-disable-next-line

          if (index == 0 && targetItem.disabled) {
            isAllDisabled = true;
          }
        }

        if (!isAllDisabled) {
          this.removeTag(targetItem);
        }
      }
    }
  }

  _notifyChange(selections) {
    const {
      onChangeWithObject
    } = this.getProps();
    const stateSelections = this.getState('selections');
    let notifyVal;
    const selectionsProps = [...instance_values_default()(selections).call(selections)];

    const isMultiple = this._isMultiple();

    const hasChange = this._diffSelections(selections, stateSelections, isMultiple);

    if (!hasChange) {
      return;
    }

    switch (true) {
      case onChangeWithObject:
        this._notifyChangeWithObject(selections);

        break;

      case !onChangeWithObject && !isMultiple:
        notifyVal = selectionsProps.length ? selectionsProps[0].value : undefined;

        this._adapter.notifyChange(notifyVal);

        break;

      case !onChangeWithObject && isMultiple:
        notifyVal = selectionsProps.length ? map_default()(selectionsProps).call(selectionsProps, props => props.value) : [];

        this._adapter.notifyChange(notifyVal);

        break;

      default:
        break;
    }
  }

  _removeInternalKey(option) {
    // eslint-disable-next-line
    let newOption = assign_default()({}, option);

    delete newOption._parentGroup;
    delete newOption._show;
    delete newOption._selected;
    delete newOption._scrollIndex;

    if ('_keyInOptionList' in newOption) {
      newOption.key = newOption._keyInOptionList;
      delete newOption._keyInOptionList;
    }

    return newOption;
  }

  _notifySelect(value, option) {
    const newOption = this._removeInternalKey(option);

    this._adapter.notifySelect(value, newOption);
  }

  _notifyDeselect(value, option) {
    const newOption = this._removeInternalKey(option);

    this._adapter.notifyDeselect(value, newOption);
  }

  _diffSelections(selections, oldSelections, isMultiple) {
    let diff = true;

    if (!isMultiple) {
      const selectionProps = [...instance_values_default()(selections).call(selections)];
      const oldSelectionProps = [...instance_values_default()(oldSelections).call(oldSelections)];
      const optionLabel = selectionProps[0] ? selectionProps[0].label : selectionProps[0];
      const oldOptionLabel = oldSelectionProps[0] ? oldSelectionProps[0].label : oldSelectionProps[0];
      diff = !isEqual_default()(optionLabel, oldOptionLabel);
    } else {// When multiple selection, there is no scene where the value is different between the two operations
    }

    return diff;
  } // When onChangeWithObject is true, the onChange input parameter is not only value, but also label and other parameters


  _notifyChangeWithObject(selections) {
    const stateSelections = this.getState('selections');
    const values = [];

    for (const item of entries_default()(selections).call(selections)) {
      let val = assign_default()({
        label: item[0]
      }, item[1]);

      val = this._removeInternalKey(val);
      values.push(val);
    }

    if (!this._isMultiple()) {
      this._adapter.notifyChange(values[0]);
    } else {
      this._adapter.notifyChange(values);
    }
  } // Scenes that may trigger blur：
  // 1、clickOutSide
  // 2、 tab to next element/ shift tab to previous element
  // 3、[remove when add a11y] click option / press enter, and then select complete（when multiple is false 
  // 4、[remove when add a11y] press esc when dropdown list open 


  _notifyBlur(e) {
    this._adapter.notifyBlur(e);
  } // Scenes that may trigger focus:
  // 1、click selection


  _notifyFocus(e) {
    this._adapter.notifyFocus(e);
  }

  handleMouseEnter(e) {
    this._adapter.updateHovering(true);

    this._adapter.notifyMouseEnter(e);
  }

  handleMouseLeave(e) {
    this._adapter.updateHovering(false);

    this._adapter.notifyMouseLeave(e);
  }

  handleClearClick(e) {
    const {
      filter
    } = this.getProps();

    if (filter) {
      this.clearInput();
    }

    this.clearSelected(); // prevent this click open dropdown

    e.stopPropagation();
  }

  handleKeyPress(e) {
    if (e && e.key === ENTER_KEY) {
      this.handleClick(e);
    }
  }
  /* istanbul ignore next */


  handleClearBtnEnterPress(e) {
    if (utils_isEnterPress(e)) {
      this.handleClearClick(e);
    }
  }

  handleOptionMouseEnter(optionIndex) {
    this._adapter.updateFocusIndex(optionIndex);
  }

  handleListScroll(e) {
    this._adapter.notifyListScroll(e);
  }

  handleTriggerFocus(e) {
    this.bindKeyBoardEvent();

    this._adapter.updateFocusState(true);

    this._adapter.setIsFocusInContainer(false);
  }

  handleTriggerBlur(e) {
    this._adapter.updateFocusState(false);

    const {
      filter,
      autoFocus
    } = this.getProps();
    const {
      isOpen,
      isFocus
    } = this.getStates(); // Under normal circumstances, blur will be accompanied by clickOutsideHandler, so the notify of blur can be called uniformly in clickOutsideHandler
    // But when autoFocus, because clickOutsideHandler is not register, you need to listen for the trigger's blur and trigger the notify callback

    if (autoFocus && isFocus && !isOpen) {
      this._notifyBlur(e);
    }
  }

  handleInputBlur(e) {
    const {
      filter,
      autoFocus
    } = this.getProps();

    const isMultiple = this._isMultiple();

    if (autoFocus && filter && !isMultiple) {
      // under this condition, when input blur, hide the input
      this.toggle2SearchInput(false);
    }
  }

  selectAll() {
    const {
      options
    } = this.getStates();
    const {
      onChangeWithObject
    } = this.getProps();
    let selectedValues = [];

    const isMultiple = this._isMultiple();

    if (!isMultiple) {
      console.warn("[Semi Select]: It seems that you have called the selectAll method in the single-selection Select.\n                Please note that this is not a legal way to use it");
      return;
    }

    if (onChangeWithObject) {
      selectedValues = options;
    } else {
      selectedValues = map_default()(options).call(options, option => option.value);
    }

    this.handleValueChange(selectedValues);

    this._adapter.notifyChange(selectedValues);
  }
  /**
   * Check whether the props
   *  -defaultValue/value in multiple selection mode is array
   * @param {Object} props
   */


  checkMultipleProps(props) {
    if (this._isMultiple()) {
      const currentProps = props ? props : this.getProps();
      const {
        defaultValue,
        value
      } = currentProps;
      const selectedValues = value || defaultValue;

      if (!isNullOrUndefined(selectedValues) && !is_array_default()(selectedValues)) {
        /* istanbul ignore next */
        Object(warning["a" /* default */])(true, '[Semi Select] defaultValue/value should be array type in multiple mode');
      }
    }
  }

  updateScrollTop() {
    this._adapter.updateScrollTop();
  }

}
// CONCATENATED MODULE: ./tag/group.tsx









const group_prefixCls = tag_constants_cssClasses.PREFIX;
const group_tagSize = tag_constants_strings.TAG_SIZE;
const group_avatarShapeSet = tag_constants_strings.AVATAR_SHAPE;
class group_TagGroup extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  renderNTag(n, restTags) {
    const {
      size,
      showPopover,
      popoverProps
    } = this.props;
    let nTag = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tag_Tag, {
      closable: false,
      size: size,
      color: "grey",
      style: {
        backgroundColor: 'transparent'
      },
      key: "_+n"
    }, "+", n);

    if (showPopover) {
      nTag = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(popover_0, assign_default()({
        showArrow: true,
        content: restTags,
        trigger: "hover",
        position: "top",
        autoAdjustOverflow: true,
        className: "".concat(group_prefixCls, "-rest-group-popover")
      }, popoverProps, {
        key: "_+n_Popover"
      }), nTag);
    }

    return nTag;
  }

  renderMergeTags(tags) {
    const {
      maxTagCount,
      tagList,
      restCount
    } = this.props;
    const n = restCount ? restCount : tagList.length - maxTagCount;
    let renderTags = tags;

    const normalTags = slice_default()(tags).call(tags, 0, maxTagCount);

    const restTags = slice_default()(tags).call(tags, maxTagCount);

    let nTag = null;

    if (n > 0) {
      nTag = this.renderNTag(n, restTags);
      normalTags.push(nTag);
      renderTags = normalTags;
    }

    return renderTags;
  }

  renderAllTags() {
    const {
      tagList,
      size,
      mode,
      avatarShape
    } = this.props;

    const renderTags = map_default()(tagList).call(tagList, (tag, index) => {
      if (mode === 'custom') {
        return tag;
      }

      if (!tag.size) {
        tag.size = size;
      }

      if (!tag.avatarShape) {
        tag.avatarShape = avatarShape;
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tag_Tag, assign_default()({
        key: "".concat(index, "-tag")
      }, tag));
    });

    return renderTags;
  }

  render() {
    const {
      style,
      className,
      maxTagCount,
      size
    } = this.props;
    const groupCls = classnames_default()({
      ["".concat(group_prefixCls, "-group")]: true,
      ["".concat(group_prefixCls, "-group-max")]: maxTagCount,
      ["".concat(group_prefixCls, "-group-small")]: size === 'small',
      ["".concat(group_prefixCls, "-group-large")]: size === 'large'
    }, className);
    const tags = this.renderAllTags();
    const tagContents = typeof maxTagCount === 'undefined' ? tags : this.renderMergeTags(tags);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      style: style,
      className: groupCls
    }, tagContents);
  }

}
group_TagGroup.defaultProps = {
  style: {},
  className: '',
  size: group_tagSize[0],
  avatarShape: 'square'
};
group_TagGroup.propTypes = {
  children: prop_types_default.a.node,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  maxTagCount: prop_types_default.a.number,
  restCount: prop_types_default.a.number,
  tagList: prop_types_default.a.array,
  size: prop_types_default.a.oneOf(group_tagSize),
  mode: prop_types_default.a.string,
  showPopover: prop_types_default.a.bool,
  popoverProps: prop_types_default.a.object,
  avatarShape: prop_types_default.a.oneOf(group_avatarShapeSet)
};
// CONCATENATED MODULE: ./select/utils.tsx








var utils_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};




const generateOption = (child, parent, index) => {
  const childProps = child.props;

  if (!child || !childProps) {
    return null;
  }

  const option = assign_default()(assign_default()({
    value: childProps.value,
    // Drop-down menu rendering priority label value, children, value in turn downgrade
    label: childProps.label || childProps.children || childProps.value,
    _show: true,
    _selected: false,
    _scrollIndex: index
  }, childProps), {
    _parentGroup: parent
  });

  return option;
};

const getOptionsFromGroup = selectChildren => {
  let optionGroups = [];
  let options = [];
  const emptyGroup = {
    label: '',
    children: [],
    _show: false
  }; // avoid null
  // eslint-disable-next-line max-len

  let childNodes = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children.toArray(selectChildren);
  childNodes = filter_default()(childNodes).call(childNodes, childNode => childNode && childNode.props);
  let type = '';
  let optionIndex = -1;

  for_each_default()(childNodes).call(childNodes, child => {
    if (child.type.isSelectOption) {
      type = 'option';
      optionIndex++;
      const option = generateOption(child, undefined, optionIndex);
      emptyGroup.children.push(option);
      options.push(option);
    } else if (child.type.isSelectOptionGroup) {
      type = 'group'; // Avoid saving children (reactNode) by... removing other props from the group except children, causing performance problems
      // eslint-disable-next-line prefer-const

      let _a = child.props,
          {
        children
      } = _a,
          restGroupProps = utils_rest(_a, ["children"]);

      children = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children.toArray(children);

      const childrenOption = map_default()(children).call(children, option => {
        optionIndex++;
        return generateOption(option, restGroupProps, optionIndex);
      });

      const group = assign_default()(assign_default()({}, child.props), {
        children: childrenOption,
        key: child.key
      });

      optionGroups.push(group);
      options = concat_default()(options).call(options, childrenOption);
    } else {
      Object(warning["a" /* default */])(true, '[Semi Select] The children of `Select` should be `Select.Option` or `Select.OptionGroup`');
    }
  });

  if (type === 'option') {
    optionGroups = [emptyGroup];
  }

  return {
    optionGroups,
    options
  };
};


// CONCATENATED MODULE: ./select/virtualRow.tsx
const VirtualRow = _ref => {
  let {
    index,
    data,
    style
  } = _ref;
  const {
    visibleOptions
  } = data;
  const option = visibleOptions[index];
  return data.renderOption(option, index, style);
};

/* harmony default export */ var virtualRow = (VirtualRow);
// CONCATENATED MODULE: ./select/optionGroup.tsx





const optionGroup_prefixCls = select_constants_cssClasses.PREFIX_GROUP;

class optionGroup_OptionGroup extends baseComponent_BaseComponent {
  render() {
    const {
      label,
      className,
      style
    } = this.props;
    const groupCls = classnames_default()(className, {
      [optionGroup_prefixCls]: true
    });

    if (!label && typeof label !== 'number') {
      return null;
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: groupCls,
      style: style
    }, label);
  }

}

optionGroup_OptionGroup.isSelectOptionGroup = true;
optionGroup_OptionGroup.propTypes = {
  children: prop_types_default.a.oneOfType([prop_types_default.a.array, prop_types_default.a.node]),
  label: prop_types_default.a.node,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object
};
/* harmony default export */ var optionGroup = (optionGroup_OptionGroup);
// EXTERNAL MODULE: ../semi-foundation/select/select.scss
var select_select = __webpack_require__("1d3+");

// CONCATENATED MODULE: ./select/index.tsx


















/* eslint-disable max-len */

/* eslint-disable max-lines-per-function */





























const select_prefixcls = select_constants_cssClasses.PREFIX;
const select_key = 0; // Notes: Use the label of the option as the identifier, that is, the option in Select, the value is allowed to be the same, but the label must be unique

class select_Select extends baseComponent_BaseComponent {
  constructor(props) {
    var _context, _context2, _context3, _context4, _context5, _context6;

    super(props);

    this.setOptionContainerEl = node => this.optionContainerEl = {
      current: node
    };

    this.handleInputChange = value => this.foundation.handleInputChange(value);

    this.state = {
      isOpen: false,
      isFocus: false,
      options: [],
      selections: new core_js_stable_map_default.a(),
      dropdownMinWidth: null,
      optionKey: select_key,
      inputValue: '',
      showInput: false,
      focusIndex: props.defaultActiveFirstOption ? 0 : -1,
      keyboardEventSet: {},
      optionGroups: [],
      isHovering: false,
      isFocusInContainer: false
    };
    /* Generate random string */

    this.selectOptionListID = '';
    this.selectID = '';
    this.virtualizeListRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.inputRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.triggerRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.optionsRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.optionContainerEl = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.clickOutsideHandler = null;
    this.onSelect = bind_default()(_context = this.onSelect).call(_context, this);
    this.onClear = bind_default()(_context2 = this.onClear).call(_context2, this);
    this.onMouseEnter = bind_default()(_context3 = this.onMouseEnter).call(_context3, this);
    this.onMouseLeave = bind_default()(_context4 = this.onMouseLeave).call(_context4, this);
    this.renderOption = bind_default()(_context5 = this.renderOption).call(_context5, this);
    this.onKeyPress = bind_default()(_context6 = this.onKeyPress).call(_context6, this);
    this.foundation = new foundation_SelectFoundation(this.adapter);
    Object(warning["a" /* default */])('optionLabelProp' in this.props, '[Semi Select] \'optionLabelProp\' has already been deprecated, please use \'renderSelectedItem\' instead.');
    Object(warning["a" /* default */])('labelInValue' in this.props, '[Semi Select] \'labelInValue\' has already been deprecated, please use \'onChangeWithObject\' instead.');
  }

  get adapter() {
    var _this = this;

    const keyboardAdapter = {
      registerKeyDown: cb => {
        const keyboardEventSet = {
          onKeyDown: cb
        };
        this.setState({
          keyboardEventSet
        });
      },
      unregisterKeyDown: () => {
        this.setState({
          keyboardEventSet: {}
        });
      },
      updateFocusIndex: focusIndex => {
        this.setState({
          focusIndex
        });
      },
      // eslint-disable-next-line @typescript-eslint/no-empty-function
      scrollToFocusOption: () => {}
    };
    const filterAdapter = {
      updateInputValue: value => {
        this.setState({
          inputValue: value
        });
      },
      toggleInputShow: (showInput, cb) => {
        this.setState({
          showInput
        }, () => {
          cb();
        });
      },
      focusInput: () => {
        const {
          preventScroll
        } = this.props;

        if (this.inputRef && this.inputRef.current) {
          this.inputRef.current.focus({
            preventScroll
          });
        }
      }
    };
    const multipleAdapter = {
      notifyMaxLimit: option => this.props.onExceed(option),
      getMaxLimit: () => this.props.max,
      registerClickOutsideHandler: cb => {
        const clickOutsideHandler = e => {
          const optionInstance = this.optionsRef && this.optionsRef.current;
          const triggerDom = this.triggerRef && this.triggerRef.current; // eslint-disable-next-line react/no-find-dom-node

          const optionsDom = external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default.a.findDOMNode(optionInstance); // let isInPanel = optionsDom && optionsDom.contains(e.target);
          // let isInTrigger = triggerDom && triggerDom.contains(e.target);

          if (optionsDom && !optionsDom.contains(e.target) && triggerDom && !triggerDom.contains(e.target)) {
            cb(e);
          }
        };

        this.clickOutsideHandler = clickOutsideHandler;
        document.addEventListener('mousedown', clickOutsideHandler, false);
      },
      unregisterClickOutsideHandler: () => {
        if (this.clickOutsideHandler) {
          document.removeEventListener('mousedown', this.clickOutsideHandler, false);
          this.clickOutsideHandler = null;
        }
      },
      rePositionDropdown: () => {
        let {
          optionKey
        } = this.state;
        optionKey = optionKey + 1;
        this.setState({
          optionKey
        });
      },
      notifyDeselect: (value, option) => {
        delete option._parentGroup;
        this.props.onDeselect(value, option);
      }
    };
    return assign_default()(assign_default()(assign_default()(assign_default()(assign_default()({}, super.adapter), keyboardAdapter), filterAdapter), multipleAdapter), {
      // Collect all subitems, each item is visible by default when collected, and is not selected
      getOptionsFromChildren: function () {
        let children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props.children;
        let optionGroups = [];
        let options = [];
        const {
          optionList
        } = _this.props;

        if (optionList && optionList.length) {
          options = map_default()(optionList).call(optionList, (itemOpt, index) => assign_default()({
            _show: true,
            _selected: false,
            _scrollIndex: index
          }, itemOpt));
          optionGroups[0] = {
            children: options,
            label: ''
          };
        } else {
          const result = getOptionsFromGroup(children);
          optionGroups = result.optionGroups;
          options = result.options;
        }

        _this.setState({
          optionGroups
        });

        return options;
      },
      updateOptions: options => {
        this.setState({
          options
        });
      },
      openMenu: () => {
        this.setState({
          isOpen: true
        });
      },
      closeMenu: () => {
        this.setState({
          isOpen: false
        });
      },
      getTriggerWidth: () => {
        const el = this.triggerRef.current;
        return el && el.getBoundingClientRect().width;
      },
      setOptionWrapperWidth: width => {
        this.setState({
          dropdownMinWidth: width
        });
      },
      updateSelection: selections => {
        this.setState({
          selections
        });
      },
      // clone Map, important!!!, prevent unexpected modify on state
      getSelections: () => new core_js_stable_map_default.a(this.state.selections),
      notifyChange: value => {
        this.props.onChange(value);
      },
      notifySelect: (value, option) => {
        delete option._parentGroup;
        this.props.onSelect(value, option);
      },
      notifyDropdownVisibleChange: visible => {
        this.props.onDropdownVisibleChange(visible);
      },
      notifySearch: input => {
        this.props.onSearch(input);
      },
      notifyCreate: input => {
        this.props.onCreate(input);
      },
      notifyMouseEnter: e => {
        this.props.onMouseEnter(e);
      },
      notifyMouseLeave: e => {
        this.props.onMouseLeave(e);
      },
      notifyFocus: event => {
        this.props.onFocus(event);
      },
      notifyBlur: event => {
        this.props.onBlur(event);
      },
      notifyClear: () => {
        this.props.onClear();
      },
      notifyListScroll: e => {
        this.props.onListScroll(e);
      },
      updateHovering: isHovering => {
        this.setState({
          isHovering
        });
      },
      updateFocusState: isFocus => {
        this.setState({
          isFocus
        });
      },
      focusTrigger: () => {
        try {
          const {
            preventScroll
          } = this.props;
          const el = this.triggerRef.current;
          el.focus({
            preventScroll
          });
        } catch (error) {}
      },
      getContainer: () => {
        return this.optionContainerEl && this.optionContainerEl.current;
      },
      getFocusableElements: node => {
        return Object(_utils["c" /* getFocusableElements */])(node);
      },
      getActiveElement: () => {
        return Object(_utils["b" /* getActiveElement */])();
      },
      setIsFocusInContainer: isFocusInContainer => {
        this.setState({
          isFocusInContainer
        });
      },
      getIsFocusInContainer: () => {
        return this.state.isFocusInContainer;
      },
      updateScrollTop: index => {
        var _context8, _context9;

        // eslint-disable-next-line max-len
        let optionClassName = ".".concat(select_prefixcls, "-option-selected");

        if (index !== undefined) {
          var _context7;

          optionClassName = concat_default()(_context7 = ".".concat(select_prefixcls, "-option:nth-child(")).call(_context7, index, ")");
        }

        let destNode = document.querySelector(concat_default()(_context8 = concat_default()(_context9 = "#".concat(select_prefixcls, "-")).call(_context9, this.selectOptionListID, " ")).call(_context8, optionClassName));

        if (is_array_default()(destNode)) {
          // eslint-disable-next-line prefer-destructuring
          destNode = destNode[0];
        }

        if (destNode) {
          /**
           * Scroll the first selected item into view.
           * The reason why ScrollIntoView is not used here is that it may cause page to move.
           */
          const destParent = destNode.parentNode;
          destParent.scrollTop = destNode.offsetTop - destParent.offsetTop - destParent.clientHeight / 2 + destNode.clientHeight / 2;
        }
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
    this.selectOptionListID = getUuidShort();
    this.selectID = this.props.id || getUuidShort();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  componentDidUpdate(prevProps, prevState) {
    var _context10, _context11;

    const prevChildrenKeys = map_default()(_context10 = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children.toArray(prevProps.children)).call(_context10, child => child.key);

    const nowChildrenKeys = map_default()(_context11 = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children.toArray(this.props.children)).call(_context11, child => child.key);

    let isOptionsChanged = false;

    if (!isEqual_default()(prevChildrenKeys, nowChildrenKeys) || !isEqual_default()(prevProps.optionList, this.props.optionList)) {
      isOptionsChanged = true;
      this.foundation.handleOptionListChange();
    } // Add isOptionChanged: There may be cases where the value is unchanged, but the optionList is updated. At this time, the label corresponding to the value may change, and the selected item needs to be updated


    if (prevProps.value !== this.props.value || isOptionsChanged) {
      if ('value' in this.props) {
        this.foundation.handleValueChange(this.props.value);
      } else {
        this.foundation.handleOptionListChangeHadDefaultValue();
      }
    }
  }

  renderInput() {
    var _context12;

    const {
      size,
      multiple,
      disabled,
      inputProps,
      filter
    } = this.props;

    const inputPropsCls = get_default()(inputProps, 'className');

    const inputcls = classnames_default()("".concat(select_prefixcls, "-input"), {
      ["".concat(select_prefixcls, "-input-single")]: !multiple,
      ["".concat(select_prefixcls, "-input-multiple")]: multiple
    }, inputPropsCls);
    const {
      inputValue,
      focusIndex
    } = this.state;

    const selectInputProps = assign_default()({
      value: inputValue,
      disabled,
      className: inputcls,
      onChange: this.handleInputChange
    }, inputProps);

    let style = {}; // Multiple choice mode

    if (multiple) {
      style = {
        width: inputValue ? "".concat(inputValue.length * 16, "px") : '2px'
      };
      selectInputProps.style = style;
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(input_0, assign_default()({
      ref: this.inputRef,
      size: size,
      "aria-activedescendant": focusIndex !== -1 ? concat_default()(_context12 = "".concat(this.selectID, "-option-")).call(_context12, focusIndex) : '',
      onFocus: e => {
        // if multiple and filter, when use tab key to let select get focus
        // need to manual update state isFocus to let the focus style take effect
        if (multiple && Boolean(filter)) {
          this.setState({
            isFocus: true
          });
        } // prevent event bubbling which will fire trigger onFocus event


        e.stopPropagation(); // e.nativeEvent.stopImmediatePropagation();
      },
      onBlur: e => this.foundation.handleInputBlur(e)
    }, selectInputProps));
  }

  close() {
    this.foundation.close();
  }

  open() {
    this.foundation.open();
  }

  clearInput() {
    this.foundation.clearInput();
  }

  selectAll() {
    this.foundation.selectAll();
  }

  deselectAll() {
    this.foundation.clearSelected();
  }

  focus() {
    this.foundation.focus();
  }

  onSelect(option, optionIndex, e) {
    this.foundation.onSelect(option, optionIndex, e);
  }

  onClear(e) {
    e.nativeEvent.stopImmediatePropagation();
    this.foundation.handleClearClick(e);
  }

  renderEmpty() {
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(select_option, {
      empty: true,
      emptyContent: this.props.emptyContent
    });
  }

  renderLoading() {
    const loadingWrapperCls = "".concat(select_prefixcls, "-loading-wrapper");
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: loadingWrapperCls
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(spin_0, null));
  }

  renderOption(option, optionIndex, style) {
    const {
      focusIndex,
      inputValue
    } = this.state;
    const {
      renderOptionItem
    } = this.props;
    let optionContent;
    const isFocused = optionIndex === focusIndex;
    let optionStyle = style || {};

    if (option.style) {
      optionStyle = assign_default()(assign_default()({}, optionStyle), option.style);
    }

    if (option._inputCreateOnly) {
      optionContent = this.renderCreateOption(option, isFocused, optionIndex, style);
    } else {
      var _context13;

      // use another name to make sure that 'key' in optionList still exist when we call onChange
      if ('key' in option) {
        option._keyInOptionList = option.key;
      }

      optionContent = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(select_option, assign_default()({
        showTick: true
      }, option, {
        selected: option._selected,
        onSelect: (v, e) => this.onSelect(v, optionIndex, e),
        focused: isFocused,
        onMouseEnter: () => this.onOptionHover(optionIndex),
        style: optionStyle,
        key: option.key || option.label + option.value + optionIndex,
        renderOptionItem: renderOptionItem,
        inputValue: inputValue,
        id: concat_default()(_context13 = "".concat(this.selectID, "-option-")).call(_context13, optionIndex)
      }), option.label);
    }

    return optionContent;
  }

  renderCreateOption(option, isFocused, optionIndex, style) {
    const {
      renderCreateItem
    } = this.props; // default render method

    if (typeof renderCreateItem === 'undefined') {
      const defaultCreateItem = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(select_option, assign_default()({
        key: option.key || option.label + option.value,
        onSelect: (v, e) => this.onSelect(v, optionIndex, e),
        onMouseEnter: () => this.onOptionHover(optionIndex),
        showTick: true
      }, option, {
        focused: isFocused,
        style: style
      }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
        componentName: "Select"
      }, locale => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: "".concat(select_prefixcls, "-create-tips")
      }, locale.createText), option.value)));
      return defaultCreateItem;
    }

    const customCreateItem = renderCreateItem(option.value, isFocused);
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/interactive-supports-focus
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "button",
        "aria-label": "Use the input box to create an optional item",
        onClick: e => this.onSelect(option, optionIndex, e),
        key: option.key || option.label
      }, customCreateItem)
    );
  }

  onOptionHover(optionIndex) {
    this.foundation.handleOptionMouseEnter(optionIndex);
  }

  renderWithGroup(visibleOptions) {
    const content = [];
    const groupStatus = new core_js_stable_map_default.a();

    for_each_default()(visibleOptions).call(visibleOptions, (option, optionIndex) => {
      const parentGroup = option._parentGroup;
      const optionContent = this.renderOption(option, optionIndex);

      if (parentGroup && !groupStatus.has(parentGroup.label)) {
        // when use with OptionGroup and group content not already insert
        const groupContent = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(optionGroup, assign_default()({}, parentGroup, {
          key: parentGroup.label
        }));
        groupStatus.set(parentGroup.label, true);
        content.push(groupContent);
      }

      content.push(optionContent);
    });

    return content;
  }

  renderVirtualizeList(visibleOptions) {
    const {
      virtualize
    } = this.props;
    const {
      direction
    } = this.context;
    const {
      height,
      width,
      itemSize
    } = virtualize;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(FixedSizeList, {
      ref: this.virtualizeListRef,
      height: height || select_constants_numbers.LIST_HEIGHT,
      itemCount: visibleOptions.length,
      itemSize: itemSize,
      itemData: {
        visibleOptions,
        renderOption: this.renderOption
      },
      width: width || '100%',
      style: {
        direction
      }
    }, virtualRow);
  }

  renderOptions(children) {
    var _context14;

    const {
      dropdownMinWidth,
      options,
      selections
    } = this.state;
    const {
      maxHeight,
      dropdownClassName,
      dropdownStyle,
      outerTopSlot,
      innerTopSlot,
      outerBottomSlot,
      innerBottomSlot,
      loading,
      virtualize,
      multiple
    } = this.props; // Do a filter first, instead of directly judging in forEach, so that the focusIndex can correspond to

    const visibleOptions = filter_default()(options).call(options, item => item._show);

    let listContent = this.renderWithGroup(visibleOptions);

    if (virtualize) {
      listContent = this.renderVirtualizeList(visibleOptions);
    }

    const style = assign_default()({
      minWidth: dropdownMinWidth
    }, dropdownStyle);

    const optionListCls = classnames_default()({
      ["".concat(select_prefixcls, "-option-list")]: true,
      ["".concat(select_prefixcls, "-option-list-chosen")]: selections.size
    });
    const isEmpty = !options.length || !some_default()(options).call(options, item => item._show);
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/no-static-element-interactions
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        id: concat_default()(_context14 = "".concat(select_prefixcls, "-")).call(_context14, this.selectOptionListID),
        className: dropdownClassName,
        style: style,
        ref: this.setOptionContainerEl,
        onKeyDown: e => this.foundation.handleContainerKeyDown(e)
      }, outerTopSlot, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        style: {
          maxHeight: "".concat(maxHeight, "px")
        },
        className: optionListCls,
        role: "listbox",
        "aria-multiselectable": multiple,
        onScroll: e => this.foundation.handleListScroll(e)
      }, innerTopSlot, loading ? this.renderLoading() : isEmpty ? this.renderEmpty() : listContent, innerBottomSlot), outerBottomSlot)
    );
  }

  renderSingleSelection(selections, filterable) {
    let {
      renderSelectedItem
    } = this.props;
    const {
      placeholder
    } = this.props;
    const {
      showInput,
      inputValue
    } = this.state;
    let renderText = '';
    const selectedItems = [...selections];

    if (typeof renderSelectedItem === 'undefined') {
      renderSelectedItem = optionNode => optionNode.label;
    }

    if (selectedItems.length) {
      const selectedItem = selectedItems[0][1];
      renderText = renderSelectedItem(selectedItem);
    }

    const spanCls = classnames_default()({
      ["".concat(select_prefixcls, "-selection-text")]: true,
      ["".concat(select_prefixcls, "-selection-placeholder")]: !renderText && renderText !== 0,
      ["".concat(select_prefixcls, "-selection-text-hide")]: inputValue && showInput,
      ["".concat(select_prefixcls, "-selection-text-inactive")]: !inputValue && showInput // Stack Input & RenderText(opacity 0.4)

    });
    const contentWrapperCls = "".concat(select_prefixcls, "-content-wrapper");
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: contentWrapperCls
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: spanCls,
      "x-semi-prop": "placeholder"
    }, renderText || renderText === 0 ? renderText : placeholder), filterable && showInput ? this.renderInput() : null));
  }

  renderMultipleSelection(selections, filterable) {
    let {
      renderSelectedItem
    } = this.props;
    const {
      placeholder,
      maxTagCount,
      size
    } = this.props;
    const {
      inputValue
    } = this.state;
    const selectDisabled = this.props.disabled;
    const renderTags = [];
    const selectedItems = [...selections];

    if (typeof renderSelectedItem === 'undefined') {
      renderSelectedItem = optionNode => ({
        isRenderInTag: true,
        content: optionNode.label
      });
    }

    const mapItems = maxTagCount ? slice_default()(selectedItems).call(selectedItems, 0, maxTagCount) : selectedItems; // no need to render rest tag when maxTagCount is setting

    const tags = map_default()(mapItems).call(mapItems, (item, i) => {
      const label = item[0];
      const {
        value
      } = item[1];
      const disabled = item[1].disabled || selectDisabled;

      const onClose = (tagContent, e) => {
        if (e && typeof e.preventDefault === 'function') {
          e.preventDefault(); // make sure that tag will not hidden immediately in controlled mode
        }

        this.foundation.removeTag({
          label,
          value
        });
      };

      const {
        content,
        isRenderInTag
      } = renderSelectedItem(item[1], {
        index: i,
        disabled,
        onClose
      });
      const basic = {
        disabled,
        closable: !disabled,
        onClose
      };

      if (isRenderInTag) {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tag_Tag, assign_default()({}, basic, {
          color: "white",
          size: size || 'large',
          key: value,
          tabIndex: -1
        }), content);
      } else {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
          key: value
        }, content);
      }
    });

    const contentWrapperCls = classnames_default()({
      ["".concat(select_prefixcls, "-content-wrapper")]: true,
      ["".concat(select_prefixcls, "-content-wrapper-one-line")]: maxTagCount,
      ["".concat(select_prefixcls, "-content-wrapper-empty")]: !tags.length
    });
    const spanCls = classnames_default()({
      ["".concat(select_prefixcls, "-selection-text")]: true,
      ["".concat(select_prefixcls, "-selection-placeholder")]: !tags.length,
      ["".concat(select_prefixcls, "-selection-text-hide")]: tags && tags.length // [prefixcls + '-selection-text-inactive']: !inputValue && !tags.length,

    });
    const placeholderText = placeholder && !inputValue ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: spanCls
    }, placeholder) : null;
    const n = selectedItems.length > maxTagCount ? maxTagCount : undefined;
    const NotOneLine = !maxTagCount; // Multiple lines (that is, do not set maxTagCount), do not use TagGroup, directly traverse with Tag, otherwise Input cannot follow the correct position

    const tagContent = NotOneLine ? tags : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(group_TagGroup, {
      tagList: tags,
      maxTagCount: n,
      restCount: maxTagCount ? selectedItems.length - maxTagCount : undefined,
      size: "large",
      mode: "custom"
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: contentWrapperCls
    }, tags && tags.length ? tagContent : placeholderText, !filterable ? null : this.renderInput()));
  }

  onMouseEnter(e) {
    this.foundation.handleMouseEnter(e);
  }

  onMouseLeave(e) {
    this.foundation.handleMouseLeave(e);
  }

  onKeyPress(e) {
    this.foundation.handleKeyPress(e);
  }
  /* Processing logic when popover visible changes */


  handlePopoverVisibleChange(status) {
    const {
      virtualize
    } = this.props;
    const {
      selections
    } = this.state;

    if (!status) {
      return;
    }

    if (virtualize) {
      let minItemIndex = -1;

      for_each_default()(selections).call(selections, item => {
        const itemIndex = get_default()(item, '_scrollIndex');
        /* When the itemIndex is legal */


        if (isNumber_default()(itemIndex) && itemIndex >= 0) {
          minItemIndex = minItemIndex !== -1 && minItemIndex < itemIndex ? minItemIndex : itemIndex;
        }
      });

      if (minItemIndex !== -1) {
        try {
          this.virtualizeListRef.current.scrollToItem(minItemIndex, 'center');
        } catch (error) {}
      }
    } else {
      this.foundation.updateScrollTop();
    }
  }

  renderSuffix() {
    const {
      suffix
    } = this.props;
    const suffixWrapperCls = classnames_default()({
      ["".concat(select_prefixcls, "-suffix")]: true,
      ["".concat(select_prefixcls, "-suffix-text")]: suffix && isString_default()(suffix),
      ["".concat(select_prefixcls, "-suffix-icon")]: Object(_utils["e" /* isSemiIcon */])(suffix)
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: suffixWrapperCls,
      "x-semi-prop": "suffix"
    }, suffix);
  }

  renderPrefix() {
    const {
      prefix,
      insetLabel,
      insetLabelId
    } = this.props;
    const labelNode = prefix || insetLabel;
    const prefixWrapperCls = classnames_default()({
      ["".concat(select_prefixcls, "-prefix")]: true,
      ["".concat(select_prefixcls, "-inset-label")]: insetLabel,
      ["".concat(select_prefixcls, "-prefix-text")]: labelNode && isString_default()(labelNode),
      ["".concat(select_prefixcls, "-prefix-icon")]: Object(_utils["e" /* isSemiIcon */])(labelNode)
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: prefixWrapperCls,
      id: insetLabelId,
      "x-semi-prop": "prefix,insetLabel"
    }, labelNode);
  }

  renderSelection() {
    var _context15, _context16;

    const {
      disabled,
      multiple,
      filter,
      style,
      id,
      size,
      className,
      validateStatus,
      showArrow,
      suffix,
      prefix,
      insetLabel,
      placeholder,
      triggerRender,
      arrowIcon
    } = this.props;
    const {
      selections,
      isOpen,
      keyboardEventSet,
      inputValue,
      isHovering,
      isFocus,
      showInput,
      focusIndex
    } = this.state;
    const useCustomTrigger = typeof triggerRender === 'function';
    const filterable = Boolean(filter); // filter（boolean || function）

    const selectionCls = useCustomTrigger ? classnames_default()(className) : classnames_default()(select_prefixcls, className, {
      ["".concat(select_prefixcls, "-open")]: isOpen,
      ["".concat(select_prefixcls, "-focus")]: isFocus,
      ["".concat(select_prefixcls, "-disabled")]: disabled,
      ["".concat(select_prefixcls, "-single")]: !multiple,
      ["".concat(select_prefixcls, "-multiple")]: multiple,
      ["".concat(select_prefixcls, "-filterable")]: filterable,
      ["".concat(select_prefixcls, "-small")]: size === 'small',
      ["".concat(select_prefixcls, "-large")]: size === 'large',
      ["".concat(select_prefixcls, "-error")]: validateStatus === 'error',
      ["".concat(select_prefixcls, "-warning")]: validateStatus === 'warning',
      ["".concat(select_prefixcls, "-no-arrow")]: !showArrow,
      ["".concat(select_prefixcls, "-with-prefix")]: prefix || insetLabel,
      ["".concat(select_prefixcls, "-with-suffix")]: suffix
    });
    const showClear = this.props.showClear && (selections.size || inputValue) && !disabled && (isHovering || isOpen);
    const arrowContent = showArrow ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(select_prefixcls, "-arrow"),
      "x-semi-prop": "arrowIcon"
    }, arrowIcon) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(select_prefixcls, "-arrow-empty")
    });
    const inner = useCustomTrigger ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(trigger_0, {
      value: from_default()(instance_values_default()(selections).call(selections)),
      inputValue: inputValue,
      onChange: this.handleInputChange,
      onClear: this.onClear,
      disabled: disabled,
      triggerRender: triggerRender,
      placeholder: placeholder,
      componentName: "Select",
      componentProps: assign_default()({}, this.props)
    }) : [/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
      key: "prefix"
    }, prefix || insetLabel ? this.renderPrefix() : null), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
      key: "selection"
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: classnames_default()("".concat(select_prefixcls, "-selection"))
    }, multiple ? this.renderMultipleSelection(selections, filterable) : this.renderSingleSelection(selections, filterable))), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
      key: "clearicon"
    }, showClear ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: classnames_default()("".concat(select_prefixcls, "-clear")),
      onClick: this.onClear
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClear, null)) : arrowContent), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
      key: "suffix"
    }, suffix ? this.renderSuffix() : null)];
    /**
     *
     * In disabled, searchable single-selection and display input, and searchable multi-selection
     * make combobox not focusable by tab key
     *
     * 在disabled，可搜索单选且显示input框，以及可搜索多选情况下
     * 让combobox无法通过tab聚焦
     */

    const tabIndex = disabled || filterable && showInput || filterable && multiple ? -1 : 0;
    return (
      /*#__PURE__*/

      /* eslint-disable-next-line jsx-a11y/aria-activedescendant-has-tabindex */
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
        role: "combobox",
        "aria-disabled": disabled,
        "aria-expanded": isOpen,
        "aria-controls": concat_default()(_context15 = "".concat(select_prefixcls, "-")).call(_context15, this.selectOptionListID),
        "aria-haspopup": "listbox",
        "aria-label": selections.size ? 'selected' : '',
        "aria-invalid": this.props['aria-invalid'],
        "aria-errormessage": this.props['aria-errormessage'],
        "aria-labelledby": this.props['aria-labelledby'],
        "aria-describedby": this.props['aria-describedby'],
        "aria-required": this.props['aria-required'],
        className: selectionCls,
        ref: ref => this.triggerRef.current = ref,
        onClick: e => this.foundation.handleClick(e),
        style: style,
        id: this.selectID,
        tabIndex: tabIndex,
        "aria-activedescendant": focusIndex !== -1 ? concat_default()(_context16 = "".concat(this.selectID, "-option-")).call(_context16, focusIndex) : '',
        onMouseEnter: this.onMouseEnter,
        onMouseLeave: this.onMouseLeave,
        onFocus: e => this.foundation.handleTriggerFocus(e),
        onBlur: e => this.foundation.handleTriggerBlur(e),
        onKeyPress: this.onKeyPress
      }, keyboardEventSet), inner)
    );
  }

  render() {
    const {
      direction
    } = this.context;
    const defaultPosition = direction === 'rtl' ? 'bottomRight' : 'bottomLeft';
    const {
      children,
      position = defaultPosition,
      zIndex,
      getPopupContainer,
      motion,
      autoAdjustOverflow,
      mouseLeaveDelay,
      mouseEnterDelay,
      spacing,
      stopPropagation
    } = this.props;
    const {
      isOpen,
      optionKey
    } = this.state;
    const optionList = this.renderOptions(children);
    const selection = this.renderSelection();
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(popover_0, {
      getPopupContainer: getPopupContainer,
      motion: motion,
      autoAdjustOverflow: autoAdjustOverflow,
      mouseLeaveDelay: mouseLeaveDelay,
      mouseEnterDelay: mouseEnterDelay,
      // transformFromCenter TODO: check no such property
      zIndex: zIndex,
      ref: this.optionsRef,
      content: optionList,
      visible: isOpen,
      trigger: "custom",
      rePosKey: optionKey,
      position: position,
      spacing: spacing,
      stopPropagation: stopPropagation,
      disableArrowKeyDown: true,
      onVisibleChange: status => this.handlePopoverVisibleChange(status)
    }, selection);
  }

}

select_Select.contextType = configProvider_context;
select_Select.Option = select_option;
select_Select.OptGroup = optionGroup;
select_Select.propTypes = {
  'aria-describedby': prop_types_default.a.string,
  'aria-errormessage': prop_types_default.a.string,
  'aria-invalid': prop_types_default.a.bool,
  'aria-labelledby': prop_types_default.a.string,
  'aria-required': prop_types_default.a.bool,
  autoFocus: prop_types_default.a.bool,
  autoClearSearchValue: prop_types_default.a.bool,
  children: prop_types_default.a.node,
  defaultValue: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number, prop_types_default.a.array, prop_types_default.a.object]),
  value: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number, prop_types_default.a.array, prop_types_default.a.object]),
  placeholder: prop_types_default.a.node,
  onChange: prop_types_default.a.func,
  multiple: prop_types_default.a.bool,
  // Whether to turn on the input box filtering function, when it is a function, it represents a custom filtering function
  filter: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.bool]),
  // How many tags can you choose?
  max: prop_types_default.a.number,
  // How many tabs are displayed at most, and the rest are displayed in + N
  maxTagCount: prop_types_default.a.number,
  maxHeight: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  size: prop_types_default.a.oneOf(select_constants_strings.SIZE_SET),
  disabled: prop_types_default.a.bool,
  emptyContent: prop_types_default.a.node,
  onDropdownVisibleChange: prop_types_default.a.func,
  zIndex: prop_types_default.a.number,
  position: prop_types_default.a.oneOf(select_constants_strings.POSITION_SET),
  onSearch: prop_types_default.a.func,
  getPopupContainer: prop_types_default.a.func,
  dropdownClassName: prop_types_default.a.string,
  dropdownStyle: prop_types_default.a.object,
  outerTopSlot: prop_types_default.a.node,
  innerTopSlot: prop_types_default.a.node,
  inputProps: prop_types_default.a.object,
  outerBottomSlot: prop_types_default.a.node,
  innerBottomSlot: prop_types_default.a.node,
  optionList: prop_types_default.a.array,
  dropdownMatchSelectWidth: prop_types_default.a.bool,
  loading: prop_types_default.a.bool,
  defaultOpen: prop_types_default.a.bool,
  validateStatus: prop_types_default.a.oneOf(select_constants_strings.STATUS),
  defaultActiveFirstOption: prop_types_default.a.bool,
  triggerRender: prop_types_default.a.func,
  stopPropagation: prop_types_default.a.bool,
  // motion doesn't need to be exposed
  motion: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.bool, prop_types_default.a.object]),
  onChangeWithObject: prop_types_default.a.bool,
  suffix: prop_types_default.a.node,
  prefix: prop_types_default.a.node,
  insetLabel: prop_types_default.a.node,
  insetLabelId: prop_types_default.a.string,
  showClear: prop_types_default.a.bool,
  showArrow: prop_types_default.a.bool,
  renderSelectedItem: prop_types_default.a.func,
  allowCreate: prop_types_default.a.bool,
  renderCreateItem: prop_types_default.a.func,
  onMouseEnter: prop_types_default.a.func,
  onMouseLeave: prop_types_default.a.func,
  clickToHide: prop_types_default.a.bool,
  onExceed: prop_types_default.a.func,
  onCreate: prop_types_default.a.func,
  remote: prop_types_default.a.bool,
  onDeselect: prop_types_default.a.func,
  // The main difference between onSelect and onChange is that when multiple selections are selected, onChange contains all options, while onSelect only contains items for the current operation
  onSelect: prop_types_default.a.func,
  autoAdjustOverflow: prop_types_default.a.bool,
  mouseEnterDelay: prop_types_default.a.number,
  mouseLeaveDelay: prop_types_default.a.number,
  spacing: prop_types_default.a.number,
  onBlur: prop_types_default.a.func,
  onFocus: prop_types_default.a.func,
  onClear: prop_types_default.a.func,
  virtualize: prop_types_default.a.object,
  renderOptionItem: prop_types_default.a.func,
  onListScroll: prop_types_default.a.func,
  arrowIcon: prop_types_default.a.node,
  preventScroll: prop_types_default.a.bool // open: PropTypes.bool,
  // tagClosable: PropTypes.bool,

};
select_Select.defaultProps = {
  stopPropagation: true,
  motion: true,
  zIndex: constants_numbers.DEFAULT_Z_INDEX,
  // position: 'bottomLeft',
  filter: false,
  multiple: false,
  disabled: false,
  defaultOpen: false,
  allowCreate: false,
  placeholder: '',
  onDropdownVisibleChange: noop_default.a,
  onChangeWithObject: false,
  onChange: noop_default.a,
  onSearch: noop_default.a,
  onMouseEnter: noop_default.a,
  onMouseLeave: noop_default.a,
  onDeselect: noop_default.a,
  onSelect: noop_default.a,
  onCreate: noop_default.a,
  onExceed: noop_default.a,
  onFocus: noop_default.a,
  onBlur: noop_default.a,
  onClear: noop_default.a,
  onListScroll: noop_default.a,
  maxHeight: 300,
  dropdownMatchSelectWidth: true,
  defaultActiveFirstOption: true,
  showArrow: true,
  showClear: false,
  remote: false,
  autoAdjustOverflow: true,
  autoClearSearchValue: true,
  arrowIcon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronDown, {
    "aria-label": ''
  }) // Radio selection is different from the default renderSelectedItem for multiple selection, so it is not declared here
  // renderSelectedItem: (optionNode) => optionNode.label,
  // The default creator rendering is related to i18, so it is not declared here
  // renderCreateItem: (input) => input

};
/* harmony default export */ var select_0 = (select_Select);
// CONCATENATED MODULE: ./pagination/index.tsx







/* eslint-disable max-len */

/* eslint-disable jsx-a11y/no-noninteractive-element-to-interactive-role */
















const pagination_prefixCls = pagination_constants_cssClasses.PREFIX;
const {
  Option: pagination_Option
} = select_0;

class pagination_Pagination extends baseComponent_BaseComponent {
  constructor(props) {
    var _context, _context2;

    super(props);
    this.state = {
      total: props.total,
      showTotal: props.showTotal,
      currentPage: props.currentPage || props.defaultCurrentPage,
      pageSize: props.pageSize || props.pageSizeOpts[0] || pagination_constants_numbers.DEFAULT_PAGE_SIZE,
      pageList: [],
      prevDisabled: false,
      nextDisabled: false,
      restLeftPageList: [],
      restRightPageList: [],
      quickJumpPage: ''
    };
    this.foundation = new pagination_foundation(this.adapter);
    this.renderDefaultPage = bind_default()(_context = this.renderDefaultPage).call(_context, this);
    this.renderSmallPage = bind_default()(_context2 = this.renderSmallPage).call(_context2, this);
    Object(warning["a" /* default */])(Boolean(props.showSizeChanger && props.hideOnSinglePage), '[Semi Pagination] You should not use showSizeChanger and hideOnSinglePage in ths same time. At this time, hideOnSinglePage no longer takes effect, otherwise there may be a problem that the switch entry disappears');
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      setPageList: pageListState => {
        const {
          pageList,
          restLeftPageList,
          restRightPageList
        } = pageListState;
        this.setState({
          pageList,
          restLeftPageList,
          restRightPageList
        });
      },
      setDisabled: (prevIsDisabled, nextIsDisabled) => {
        this.setState({
          prevDisabled: prevIsDisabled,
          nextDisabled: nextIsDisabled
        });
      },
      updateTotal: total => this.setState({
        total
      }),
      updatePageSize: pageSize => this.setState({
        pageSize
      }),
      updateQuickJumpPage: quickJumpPage => this.setState({
        quickJumpPage
      }),
      // updateRestPageList: () => {},
      setCurrentPage: pageIndex => {
        this.setState({
          currentPage: pageIndex
        });
      },
      registerKeyDownHandler: handler => {
        document.addEventListener('keydown', handler);
      },
      unregisterKeyDownHandler: handler => {
        document.removeEventListener('keydown', handler);
      },
      notifyPageChange: pageIndex => {
        this.props.onPageChange(pageIndex);
      },
      notifyPageSizeChange: pageSize => {
        this.props.onPageSizeChange(pageSize);
      },
      notifyChange: (pageIndex, pageSize) => {
        this.props.onChange(pageIndex, pageSize);
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  componentDidUpdate(prevProps) {
    const pagerProps = {
      currentPage: this.props.currentPage,
      total: this.props.total,
      pageSize: this.props.pageSize
    };
    let pagerHasChanged = false;

    if (prevProps.currentPage !== this.props.currentPage) {
      pagerHasChanged = true; // this.foundation.updatePage(this.props.currentPage);
    }

    if (prevProps.total !== this.props.total) {
      pagerHasChanged = true;
    }

    if (prevProps.pageSize !== this.props.pageSize) {
      pagerHasChanged = true;
    }

    if (pagerHasChanged) {
      this.foundation.updatePage(pagerProps.currentPage, pagerProps.total, pagerProps.pageSize);
    }
  }

  renderPrevBtn() {
    const {
      prevText
    } = this.props;
    const {
      prevDisabled
    } = this.state;
    const preClassName = classnames_default()({
      ["".concat(pagination_prefixCls, "-item")]: true,
      ["".concat(pagination_prefixCls, "-prev")]: true,
      ["".concat(pagination_prefixCls, "-item-disabled")]: prevDisabled
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
      role: "button",
      "aria-disabled": prevDisabled ? true : false,
      "aria-label": "Previous",
      onClick: e => !prevDisabled && this.foundation.goPrev(e),
      className: preClassName,
      "x-semi-prop": "prevText"
    }, prevText || /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronLeft, {
      size: "large"
    }));
  }

  renderNextBtn() {
    const {
      nextText
    } = this.props;
    const {
      nextDisabled
    } = this.state;
    const nextClassName = classnames_default()({
      ["".concat(pagination_prefixCls, "-item")]: true,
      ["".concat(pagination_prefixCls, "-item-disabled")]: nextDisabled,
      ["".concat(pagination_prefixCls, "-next")]: true
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
      role: "button",
      "aria-disabled": nextDisabled ? true : false,
      "aria-label": "Next",
      onClick: e => !nextDisabled && this.foundation.goNext(e),
      className: nextClassName,
      "x-semi-prop": "prevText"
    }, nextText || /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronRight, {
      size: "large"
    }));
  }

  renderPageSizeSwitch(locale) {
    // rtl modify the default position
    const {
      direction
    } = this.context;
    const defaultPopoverPosition = direction === 'rtl' ? 'bottomRight' : 'bottomLeft';
    const {
      showSizeChanger,
      popoverPosition = defaultPopoverPosition
    } = this.props;
    const {
      pageSize
    } = this.state;
    const switchCls = classnames_default()("".concat(pagination_prefixCls, "-switch"));

    if (!showSizeChanger) {
      return null;
    }

    const pageSizeText = locale.pageSize;
    const newPageSizeOpts = this.foundation.pageSizeInOpts();

    const options = map_default()(newPageSizeOpts).call(newPageSizeOpts, size => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(pagination_Option, {
      value: size,
      key: size
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, "".concat(size, " "), pageSizeText)));

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: switchCls
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(select_0, {
      "aria-label": "Page size selector",
      onChange: newPageSize => this.foundation.changePageSize(newPageSize),
      value: pageSize,
      key: pageSizeText,
      position: popoverPosition || 'bottomRight',
      clickToHide: true,
      dropdownClassName: "".concat(pagination_prefixCls, "-select-dropdown")
    }, options));
  }

  renderQuickJump(locale) {
    const {
      showQuickJumper
    } = this.props;
    const {
      quickJumpPage,
      total,
      pageSize
    } = this.state;

    if (!showQuickJumper) {
      return null;
    }

    const totalPageNum = this.foundation._getTotalPageNumber(total, pageSize);

    const isDisabled = totalPageNum === 1;
    const quickJumpCls = classnames_default()({
      ["".concat(pagination_prefixCls, "-quickjump")]: true,
      ["".concat(pagination_prefixCls, "-quickjump-disabled")]: isDisabled
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: quickJumpCls
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, locale.jumpTo), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(inputNumber_0, {
      value: quickJumpPage,
      className: "".concat(pagination_prefixCls, "-quickjump-input-number"),
      hideButtons: true,
      disabled: isDisabled,
      onBlur: e => this.foundation.handleQuickJumpBlur(),
      onEnterPress: e => this.foundation.handleQuickJumpEnterPress(e.target.value),
      onChange: v => this.foundation.handleQuickJumpNumberChange(v)
    }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, locale.page));
  }

  renderPageList() {
    const {
      pageList,
      currentPage,
      restLeftPageList,
      restRightPageList
    } = this.state;
    const {
      popoverPosition,
      popoverZIndex
    } = this.props;
    return map_default()(pageList).call(pageList, (page, i) => {
      var _context3;

      const pageListClassName = classnames_default()("".concat(pagination_prefixCls, "-item"), {
        ["".concat(pagination_prefixCls, "-item-active")]: currentPage === page // [`${prefixCls}-item-rest-opening`]: (i < 3 && isLeftRestHover && page ==='...') || (i > 3 && isRightRestHover && page === '...')

      });
      const pageEl = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
        key: concat_default()(_context3 = "".concat(page)).call(_context3, i),
        onClick: () => this.foundation.goPage(page, i),
        className: pageListClassName,
        "aria-label": page === '...' ? 'More' : "Page ".concat(page),
        "aria-current": currentPage === page ? "page" : false
      }, page);

      if (page === '...') {
        var _context4;

        let content;
        i < 3 ? content = restLeftPageList : content = restRightPageList;
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(popover_0, {
          trigger: "hover",
          // onVisibleChange={visible=>this.handleRestHover(visible, i < 3 ? 'left' : 'right')}
          content: this.renderRestPageList(content),
          key: concat_default()(_context4 = "".concat(page)).call(_context4, i),
          position: popoverPosition,
          zIndex: popoverZIndex
        }, pageEl);
      }

      return pageEl;
    });
  }

  renderRestPageList(restList) {
    // The number of pages may be tens of thousands, here is virtualized with the help of react-window
    const {
      direction
    } = this.context;
    const className = classnames_default()("".concat(pagination_prefixCls, "-rest-item"));
    const count = restList.length;

    const row = item => {
      var _context5;

      const {
        index,
        style
      } = item;
      const page = restList[index];
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "listitem",
        key: concat_default()(_context5 = "".concat(page)).call(_context5, index),
        className: className,
        onClick: () => this.foundation.goPage(page, index),
        style: style,
        "aria-label": "".concat(page)
      }, page);
    };

    const itemHeight = 32;
    const listHeight = count >= 5 ? itemHeight * 5 : itemHeight * count;
    return (
      /*#__PURE__*/
      // @ts-ignore skip type check cause react-window not update with @types/react 18
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(FixedSizeList, {
        className: "".concat(pagination_prefixCls, "-rest-list"),
        itemData: restList,
        itemSize: itemHeight,
        width: 78,
        itemCount: count,
        height: listHeight,
        style: {
          direction
        }
      }, row)
    );
  }

  renderSmallPage(locale) {
    var _context6;

    const {
      className,
      style,
      hideOnSinglePage,
      hoverShowPageSelect,
      showSizeChanger
    } = this.props;
    const paginationCls = classnames_default()("".concat(pagination_prefixCls, "-small"), pagination_prefixCls, className);
    const {
      currentPage,
      total,
      pageSize
    } = this.state;
    const totalPageNum = Math.ceil(total / pageSize);

    if (totalPageNum < 2 && hideOnSinglePage && !showSizeChanger) {
      return null;
    }

    const pageNumbers = from_default()({
      length: Math.ceil(total / pageSize)
    }, (v, i) => i + 1);

    const pageList = this.renderRestPageList(pageNumbers);
    const page = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: concat_default()(_context6 = "".concat(pagination_prefixCls, "-item ")).call(_context6, pagination_prefixCls, "-item-small")
    }, currentPage, "/", totalPageNum, " ");
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: paginationCls,
      style: style
    }, this.renderPrevBtn(), hoverShowPageSelect ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(popover_0, {
      content: pageList
    }, page) : page, this.renderNextBtn(), this.renderQuickJump(locale));
  }

  renderDefaultPage(locale) {
    const {
      total,
      pageSize
    } = this.state;
    const {
      showTotal,
      className,
      style,
      hideOnSinglePage,
      showSizeChanger
    } = this.props;
    const paginationCls = classnames_default()(className, "".concat(pagination_prefixCls));
    const showTotalCls = "".concat(pagination_prefixCls, "-total");
    const totalPageNum = Math.ceil(total / pageSize);

    if (totalPageNum < 2 && hideOnSinglePage && !showSizeChanger) {
      return null;
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
      className: paginationCls,
      style: style
    }, showTotal ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: showTotalCls
    }, locale.total, " ".concat(Math.ceil(total / pageSize), " "), locale.page) : null, this.renderPrevBtn(), this.renderPageList(), this.renderNextBtn(), this.renderPageSizeSwitch(locale), this.renderQuickJump(locale));
  }

  render() {
    const {
      size
    } = this.props;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
      componentName: "Pagination"
    }, locale => size === 'small' ? this.renderSmallPage(locale) : this.renderDefaultPage(locale));
  }

}
pagination_Pagination.contextType = configProvider_context;
pagination_Pagination.propTypes = {
  total: prop_types_default.a.number,
  showTotal: prop_types_default.a.bool,
  pageSize: prop_types_default.a.number,
  pageSizeOpts: prop_types_default.a.array,
  size: prop_types_default.a.string,
  currentPage: prop_types_default.a.number,
  defaultCurrentPage: prop_types_default.a.number,
  onPageChange: prop_types_default.a.func,
  onPageSizeChange: prop_types_default.a.func,
  onChange: prop_types_default.a.func,
  prevText: prop_types_default.a.node,
  nextText: prop_types_default.a.node,
  showSizeChanger: prop_types_default.a.bool,
  popoverZIndex: prop_types_default.a.number,
  popoverPosition: prop_types_default.a.string,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  hideOnSinglePage: prop_types_default.a.bool,
  hoverShowPageSelect: prop_types_default.a.bool,
  showQuickJumper: prop_types_default.a.bool
};
pagination_Pagination.defaultProps = {
  total: 1,
  popoverZIndex: constants_numbers.DEFAULT_Z_INDEX,
  showTotal: false,
  pageSize: null,
  pageSizeOpts: pagination_constants_numbers.PAGE_SIZE_OPTION,
  defaultCurrentPage: 1,
  size: 'default',
  onPageChange: noop_default.a,
  onPageSizeChange: noop_default.a,
  onChange: noop_default.a,
  showSizeChanger: false,
  className: '',
  hideOnSinglePage: false,
  showQuickJumper: false
};
// CONCATENATED MODULE: ../semi-foundation/popconfirm/constants.ts

const popconfirm_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-popconfirm"),
  POPOVER: "".concat(BASE_CLASS_PREFIX, "-popconfirm-popover")
};
const popconfirm_constants_strings = {
  POSITION_SET: ['top', 'topLeft', 'topRight', 'left', 'leftTop', 'leftBottom', 'right', 'rightTop', 'rightBottom', 'bottom', 'bottomLeft', 'bottomRight', 'leftTopOver', 'rightTopOver'],
  TRIGGER_SET: ['hover', 'focus', 'click', 'custom']
};
const popconfirm_constants_numbers = {
  SPACING: 4,
  DEFAULT_Z_INDEX: 1030
};

// CONCATENATED MODULE: ../semi-foundation/popconfirm/popconfirmFoundation.ts
/* eslint-disable @typescript-eslint/no-empty-function */

class popconfirmFoundation_PopConfirmFoundation extends foundation {
  init() {}

  destroy() {}

  handleCancel(e) {
    this._adapter.notifyCancel(e);

    this.handleVisibleChange(false);
  }

  handleConfirm(e) {
    this._adapter.notifyConfirm(e);

    this.handleVisibleChange(false);
  }

  handleClickOutSide(e) {
    this._adapter.notifyClickOutSide(e);
  }

  handleVisibleChange(visible) {
    if (!this._isControlledComponent('visible')) {
      this._adapter.setVisible(visible);
    }

    this._adapter.notifyVisibleChange(visible);
  }

}
// EXTERNAL MODULE: ../semi-foundation/popconfirm/popconfirm.scss
var popconfirm = __webpack_require__("s0u6");

// CONCATENATED MODULE: ./popconfirm/index.tsx






var popconfirm_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable max-len */














class popconfirm_Popconfirm extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.handleCancel = e => this.foundation.handleCancel(e && e.nativeEvent);

    this.handleConfirm = e => this.foundation.handleConfirm(e && e.nativeEvent);

    this.handleVisibleChange = visible => this.foundation.handleVisibleChange(visible);

    this.handleClickOutSide = e => this.foundation.handleClickOutSide(e);

    this.stopImmediatePropagation = e => e && e.nativeEvent && e.nativeEvent.stopImmediatePropagation();

    this.state = {
      visible: props.defaultVisible || false
    };
    this.foundation = new popconfirmFoundation_PopConfirmFoundation(this.adapter);
  }

  static getDerivedStateFromProps(props, state) {
    const willUpdateStates = {};
    const {
      hasOwnProperty
    } = Object.prototype;

    if (hasOwnProperty.call(props, 'visible')) {
      willUpdateStates.visible = props.visible;
    }

    return willUpdateStates;
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      setVisible: visible => this.setState({
        visible
      }),
      notifyConfirm: e => this.props.onConfirm(e),
      notifyCancel: e => this.props.onCancel(e),
      notifyVisibleChange: visible => this.props.onVisibleChange(visible),
      notifyClickOutSide: e => this.props.onClickOutSide(e)
    });
  }

  renderControls() {
    const {
      okText,
      cancelText,
      okType,
      cancelType,
      cancelButtonProps,
      okButtonProps
    } = this.props;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
      componentName: "Popconfirm"
    }, (locale, localeCode) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(button_0, assign_default()({
      type: cancelType,
      onClick: this.handleCancel
    }, cancelButtonProps), cancelText || get_default()(locale, 'cancel')), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(button_0, assign_default()({
      type: okType,
      theme: "solid",
      onClick: this.handleConfirm
    }, okButtonProps), okText || get_default()(locale, 'confirm'))));
  }

  renderConfirmPopCard() {
    const {
      content,
      title,
      className,
      style,
      cancelType,
      icon,
      prefixCls
    } = this.props;
    const {
      direction
    } = this.context;
    const popCardCls = classnames_default()(prefixCls, className, {
      ["".concat(prefixCls, "-rtl")]: direction === 'rtl'
    });
    const showTitle = title !== null && typeof title !== 'undefined';
    const showContent = content !== null || typeof content !== 'undefined';
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: popCardCls,
      onClick: this.stopImmediatePropagation,
      style: style
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-inner")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-header")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("i", {
      className: "".concat(prefixCls, "-header-icon"),
      "x-semi-prop": "icon"
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(icon) ? icon : null), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-header-body")
    }, showTitle ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-header-title"),
      "x-semi-prop": "title"
    }, title) : null, showContent ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-header-content"),
      "x-semi-prop": "content"
    }, content) : null), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(button_0, {
      className: "".concat(prefixCls, "-btn-close"),
      icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClose, null),
      size: "small",
      theme: 'borderless',
      type: cancelType,
      onClick: this.handleCancel
    })), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-footer")
    }, this.renderControls())));
  }

  render() {
    // rtl changes the default position
    const {
      direction
    } = this.context;
    const defaultPosition = direction === 'rtl' ? 'bottomRight' : 'bottomLeft';

    const _a = this.props,
          {
      className,
      prefixCls,
      disabled,
      children,
      style,
      position = defaultPosition
    } = _a,
          attrs = popconfirm_rest(_a, ["className", "prefixCls", "disabled", "children", "style", "position"]);

    if (disabled) {
      return children;
    }

    const {
      visible
    } = this.state;
    const popContent = this.renderConfirmPopCard();
    const popProps = {
      onVisibleChange: this.handleVisibleChange,
      className: popconfirm_constants_cssClasses.POPOVER,
      onClickOutSide: this.handleClickOutSide
    };

    if (this.isControlled('visible')) {
      popProps.trigger = 'custom';
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(popover_0, assign_default()({}, attrs, {
      content: popContent,
      visible: visible,
      position: position
    }, popProps), children);
  }

}
popconfirm_Popconfirm.contextType = configProvider_context;
popconfirm_Popconfirm.propTypes = {
  motion: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.func, prop_types_default.a.object]),
  disabled: prop_types_default.a.bool,
  content: prop_types_default.a.any,
  title: prop_types_default.a.any,
  prefixCls: prop_types_default.a.string,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  icon: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node]),
  okText: prop_types_default.a.string,
  okType: prop_types_default.a.string,
  cancelText: prop_types_default.a.string,
  cancelType: prop_types_default.a.string,
  onCancel: prop_types_default.a.func,
  onConfirm: prop_types_default.a.func,
  onClickOutSide: prop_types_default.a.func,
  onVisibleChange: prop_types_default.a.func,
  visible: prop_types_default.a.bool,
  defaultVisible: prop_types_default.a.bool,
  okButtonProps: prop_types_default.a.object,
  cancelButtonProps: prop_types_default.a.object,
  stopPropagation: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.string]),
  zIndex: prop_types_default.a.number,
  // private
  trigger: prop_types_default.a.string,
  position: prop_types_default.a.string
};
popconfirm_Popconfirm.defaultProps = {
  stopPropagation: true,
  trigger: 'click',
  // position: 'bottomLeft',
  onVisibleChange: noop_default.a,
  disabled: false,
  icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconAlertTriangle, {
    size: "extra-large"
  }),
  okType: 'primary',
  cancelType: 'tertiary',
  prefixCls: popconfirm_constants_cssClasses.PREFIX,
  zIndex: popconfirm_constants_numbers.DEFAULT_Z_INDEX,
  onCancel: noop_default.a,
  onConfirm: noop_default.a,
  onClickOutSide: noop_default.a
};
// CONCATENATED MODULE: ../semi-foundation/progress/constants.ts

const progress_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-progress")
};
const progress_constants_strings = {
  types: ['line', 'circle'],
  DEFAULT_TYPE: 'line',
  strokeLineCap: ['square', 'round'],
  DEFAULT_LINECAP: 'round',
  sizes: ['default', 'small', 'large'],
  DEFAULT_SIZE: 'default',
  directions: ['vertical', 'horizontal'],
  DEFAULT_DIRECTION: 'horizontal'
};
const progress_constants_numbers = {};

// EXTERNAL MODULE: ../semi-foundation/progress/progress.scss
var progress_progress = __webpack_require__("lxn1");

// CONCATENATED MODULE: ./node_modules/@douyinfe/semi-animation/lib/es/src/getEasing.js







function src_getEasing_minMax(val, min, max) {
  return Math.min(Math.max(val, min), max);
}

function src_getEasing_parseEasingParameters(string) {
  var _context;

  const match = /\(([^)]+)\)/.exec(string);
  return match ? map_default()(_context = match[1].split(',')).call(_context, p => parse_float_default()(p)) : [];
} // Elastic easing adapted from jQueryUI http://api.jqueryui.com/easings/


function src_getEasing_elastic() {
  let amplitude = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  let period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
  const a = src_getEasing_minMax(amplitude, 1, 10);
  const p = src_getEasing_minMax(period, 0.1, 2);
  return t => t === 0 || t === 1 ? t : -a * Math.pow(2, 10 * (t - 1)) * Math.sin((t - 1 - p / (Math.PI * 2) * Math.asin(1 / a)) * (Math.PI * 2) / p);
} // anime.js/src/index.js


const src_getEasing_easingMap = (() => {
  const names = ['Quad', 'Cubic', 'Quart', 'Quint', 'Sine', 'Expo', 'Circ', 'Back', 'Elastic']; // Approximated Penner equations http://matthewlein.com/ceaser/

  const curves = {
    In: [[0.55, 0.085, 0.68, 0.53]
    /* inQuad */
    , [0.55, 0.055, 0.675, 0.19]
    /* inCubic */
    , [0.895, 0.03, 0.685, 0.22]
    /* inQuart */
    , [0.755, 0.05, 0.855, 0.06]
    /* inQuint */
    , [0.47, 0.0, 0.745, 0.715]
    /* inSine */
    , [0.95, 0.05, 0.795, 0.035]
    /* inExpo */
    , [0.6, 0.04, 0.98, 0.335]
    /* inCirc */
    , [0.6, -0.28, 0.735, 0.045]
    /* inBack */
    , src_getEasing_elastic
    /* inElastic */
    ],
    Out: [[0.25, 0.46, 0.45, 0.94]
    /* outQuad */
    , [0.215, 0.61, 0.355, 1.0]
    /* outCubic */
    , [0.165, 0.84, 0.44, 1.0]
    /* outQuart */
    , [0.23, 1.0, 0.32, 1.0]
    /* outQuint */
    , [0.39, 0.575, 0.565, 1.0]
    /* outSine */
    , [0.19, 1.0, 0.22, 1.0]
    /* outExpo */
    , [0.075, 0.82, 0.165, 1.0]
    /* outCirc */
    , [0.175, 0.885, 0.32, 1.275]
    /* outBack */
    , (a, p) => t => 1 - src_getEasing_elastic(a, p)(1 - t)
    /* outElastic */
    ],
    InOut: [[0.455, 0.03, 0.515, 0.955]
    /* inOutQuad */
    , [0.645, 0.045, 0.355, 1.0]
    /* inOutCubic */
    , [0.77, 0.0, 0.175, 1.0]
    /* inOutQuart */
    , [0.86, 0.0, 0.07, 1.0]
    /* inOutQuint */
    , [0.445, 0.05, 0.55, 0.95]
    /* inOutSine */
    , [1.0, 0.0, 0.0, 1.0]
    /* inOutExpo */
    , [0.785, 0.135, 0.15, 0.86]
    /* inOutCirc */
    , [0.68, -0.55, 0.265, 1.55]
    /* inOutBack */
    , (a, p) => t => t < 0.5 ? src_getEasing_elastic(a, p)(t * 2) / 2 : 1 - src_getEasing_elastic(a, p)(t * -2 + 2) / 2
    /* inOutElastic */
    ]
  };
  const eases = {
    linear: [0.25, 0.25, 0.75, 0.75]
  };

  for (const coords of keys_default()(curves)) {
    var _context2;

    for_each_default()(_context2 = curves[coords]).call(_context2, (ease, i) => {
      eases['ease' + coords + names[i]] = ease;
    });
  }

  return eases;
})();
/**
 * get easing function
 * @param {string|Function} easing
 * @returns {Function}
 */

function src_getEasing_getEasing(easing) {
  if (typeof easing === 'function') {
    return easing;
  }

  if (!easing || typeof easing !== 'string') {
    easing = 'linear';
  } else {
    easing = trim_default()(easing).call(easing);
  }

  let name = easing.split('(')[0];
  const args = src_getEasing_parseEasingParameters(easing);
  let ease;

  if (name === 'cubic-bezier' || name === 'cubicBezier') {
    return src_default()(...(args.length ? args : src_getEasing_easingMap.linear));
  } else {
    // eslint-disable-next-line eqeqeq
    if (!name || typeof name !== 'string' || typeof name === 'string' && src_getEasing_easingMap[name] == null) {
      name = 'linear';
    }

    ease = src_getEasing_easingMap[name];

    if (typeof ease === 'function') {
      return ease(...args);
    } else if (args.length) {
      return src_default()(...args);
    } else {
      return src_default()(...ease);
    }
  }
}
// CONCATENATED MODULE: ./node_modules/@douyinfe/semi-animation/lib/es/src/constants.js
const es_src_constants_events = ['start', 'frame', 'pause', 'resume', 'stop', 'rest'];
// CONCATENATED MODULE: ./node_modules/@douyinfe/semi-animation/lib/es/src/utils/Event.js





class es_src_utils_Event_Event {
  constructor() {
    this._eventMap = new core_js_stable_map_default.a();
  }

  on(event, callback) {
    if (event && typeof callback === 'function') {
      this._eventMap.has(event) || this._eventMap.set(event, []);

      this._eventMap.get(event).push(callback);
    }

    return this;
  }

  once(event, callback) {
    var _this = this;

    if (event && typeof callback === 'function') {
      const fn = function () {
        callback(...arguments);

        _this.off(event, fn);
      };

      this.on(event, fn);
    }
  }

  off(event, callback) {
    if (event) {
      if (typeof callback === 'function') {
        const callbacks = this._eventMap.get(event);

        if (is_array_default()(callbacks) && callbacks.length) {
          let index = -1; // eslint-disable-next-line max-depth

          while ((index = find_index_default()(callbacks).call(callbacks, cb => cb === callback)) > -1) {
            splice_default()(callbacks).call(callbacks, index, 1);
          }
        } // eslint-disable-next-line eqeqeq

      } else if (callback == null) {
        this._eventMap.delete(event);
      }
    }

    return this;
  }

  emit(event) {
    var _context;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (!this._eventMap.has(event)) {
      return false;
    }

    for_each_default()(_context = this._eventMap.get(event)).call(_context, callback => callback(...args));

    return true;
  }

}
// CONCATENATED MODULE: ./node_modules/@douyinfe/semi-animation/lib/es/src/shouldUseBezier.js
function src_shouldUseBezier_shouldUseBezier(config) {
  return Boolean(config && typeof config === 'object' && (config.duration > 0 || typeof config.easing === 'string' || typeof config.easing === 'function'));
}
// CONCATENATED MODULE: ./node_modules/@douyinfe/semi-animation/lib/es/src/shouldStopAnimation.js


/**
 * usage assumption: currentStyle values have already been rendered but it says
 * nothing of whether currentStyle is stale (see unreadPropStyle)
 *
 * @param {object} currentStyle
 * @param {object} style
 * @param {object} currentVelocity
 * @param {number} startTime
 * @param {number} nowTime
 *
 * @returns {boolean}
 */
// eslint-disable-next-line max-len

function src_shouldStopAnimation_shouldStopAnimation(currentStyle, style, currentVelocity, startTime, nowTime) {
  for (const key of keys_default()(style)) {
    const styleValue = style[key];
    const value = typeof styleValue === 'number' ? styleValue : styleValue.val;

    if (typeof styleValue === 'object' && styleValue.done) {
      continue;
    }

    if (src_shouldUseBezier_shouldUseBezier(styleValue) && startTime && nowTime && styleValue.duration) {
      if (styleValue.duration + startTime <= nowTime || value !== currentStyle[key]) {
        return false;
      }
    } else if (typeof currentVelocity[key] === 'number' && currentVelocity[key] !== 0) {
      return false;
    } // stepper will have already taken care of rounding precision errors, so
    // won't have such thing as 0.9999 !=== 1


    if (currentStyle[key] !== value) {
      return false;
    }
  }

  return true;
}
// CONCATENATED MODULE: ./node_modules/@douyinfe/semi-animation/lib/es/src/stripStyle.js
/* eslint-disable no-restricted-syntax */
function src_stripStyle_stripStyle(style) {
  const ret = {};

  for (const key in style) {
    if (!Object.prototype.hasOwnProperty.call(style, key)) {
      continue;
    }

    ret[key] = typeof style[key] === 'number' ? style[key] : style[key].val;
  }

  return ret;
}
// CONCATENATED MODULE: ./node_modules/@douyinfe/semi-animation/lib/es/src/stepper.js
/**
 * @file
 *
 * react-motion/src/stepper.js
 */
// stepper is used a lot. Saves allocation to return the same array wrapper.
// This is fine and danger-free against mutations because the callsite
// immediately destructures it and gets the numbers inside without passing the
// array reference around.
const src_stepper_reusedTuple = [0, 0];
/**
 *
 * @param {number} secondPerFrame
 * @param {number} x
 * @param {number} v
 * @param {number} destX
 * @param {number} k
 * @param {number} b
 * @param {number} precision
 */
// eslint-disable-next-line max-len

function src_stepper_stepper(secondPerFrame, x, v, destX, k, b, precision) {
  // Spring stiffness, in kg / s^2
  // for animations, destX is really spring length (spring at rest). initial
  // position is considered as the stretched/compressed position of a spring
  const Fspring = -k * (x - destX); // Damping, in kg / s

  const Fdamper = -b * v; // usually we put mass here, but for animation purposes, specifying mass is a
  // bit redundant. you could simply adjust k and b accordingly
  // let a = (Fspring + Fdamper) / mass;

  const a = Fspring + Fdamper;
  const newV = v + a * secondPerFrame;
  const newX = x + newV * secondPerFrame;

  if (Math.abs(newV) < precision && Math.abs(newX - destX) < precision) {
    src_stepper_reusedTuple[0] = destX;
    src_stepper_reusedTuple[1] = 0;
    return src_stepper_reusedTuple;
  }

  src_stepper_reusedTuple[0] = newX;
  src_stepper_reusedTuple[1] = newV;
  return src_stepper_reusedTuple;
}
// CONCATENATED MODULE: ./node_modules/@douyinfe/semi-animation/lib/es/src/mapToZero.js

// currently used to initiate the velocity style object to 0
function src_mapToZero_mapToZero(obj) {
  const ret = {};
  const objKeys = obj && keys_default()(obj) || [];

  for (const key of objKeys) {
    ret[key] = 0;
  }

  return ret;
}
// CONCATENATED MODULE: ./node_modules/@douyinfe/semi-animation/lib/es/src/presets.js
/**
 * stiffness is like tension
 * damping is like friction
 */
/* harmony default export */ var lib_es_src_presets = ({
  default: {
    tension: 170,
    friction: 26
  },
  gentle: {
    tension: 120,
    friction: 14
  },
  wobbly: {
    tension: 180,
    friction: 12
  },
  stiff: {
    tension: 210,
    friction: 20
  },
  slow: {
    tension: 280,
    friction: 60
  },
  molasses: {
    tension: 280,
    friction: 120
  }
});
// CONCATENATED MODULE: ./node_modules/@douyinfe/semi-animation/lib/es/src/wrapValue.js






const es_src_wrapValue_defaultConfig = assign_default()(assign_default()({}, lib_es_src_presets.default), {
  precision: 0.01
});

function src_wrapValue_wrapValue(val) {
  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (src_shouldUseBezier_shouldUseBezier(config)) {
    const easing = src_getEasing_getEasing(config.easing);
    const duration = typeof config.duration === 'number' && config.duration > 0 ? config.duration : 1000;
    config = assign_default()(assign_default()({}, config), {
      easing,
      duration
    });
  }

  let wrapped = assign_default()(assign_default()(assign_default()({}, es_src_wrapValue_defaultConfig), config), {
    done: false
  });

  if (val && typeof val === 'object' && 'val' in val) {
    if (src_shouldUseBezier_shouldUseBezier(val)) {
      const easing = src_getEasing_getEasing(val.easing);
      const duration = typeof val.duration === 'number' && val.duration > 0 ? val.duration : parse_int_default()(config.duration) || 1000;
      val = assign_default()(assign_default()({}, val), {
        easing,
        duration
      });
    }

    wrapped = assign_default()(assign_default()({}, wrapped), val);
  } else {
    wrapped = assign_default()(assign_default()({}, wrapped), {
      val
    });
  }

  return wrapped;
}
// CONCATENATED MODULE: ./node_modules/@douyinfe/semi-animation/lib/es/src/Animation.js






/* eslint-disable max-depth */

/* eslint-disable eqeqeq */

/* eslint-disable max-lines-per-function */








const es_src_Animation_now = () => now_default()();

const src_Animation_msPerFrame = 1000 / 60;
/**
 * @summary
 *
 * Lifecycle hook:
 * start, pause, resume, stop, frame, rest
 *
 * Binding method:
 * const animation = new Animation (); animation.on ('start | frame | rest ', () => {});
 */

class lib_es_src_Animation_Animation extends es_src_utils_Event_Event {
  constructor() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super();
    this._props = assign_default()({}, props);
    this._config = assign_default()({}, config);
    this.initStates();
  }

  _wrapConfig(object, config) {
    config = config && typeof config === 'object' ? config : this._config;
    const ret = {};

    for (const key of keys_default()(object)) {
      ret[key] = src_wrapValue_wrapValue(object[key], config);
    }

    return ret;
  }

  initStates(props, config) {
    props = props && typeof props === 'object' ? props : this._props;
    config = config && typeof config === 'object' ? config : this._config;
    const {
      from,
      to
    } = props;
    this._from = {};

    if (from && typeof from) {
      for (const key of keys_default()(from)) {
        this._from[key] = typeof from[key] === 'object' && from[key].val ? from[key].val : from[key];
      }
    }

    this._to = this._wrapConfig(to, config);
    this._delay = parse_int_default()(config.delay) || 0;
    const currentStyle = this._from && src_stripStyle_stripStyle(this._from) || src_stripStyle_stripStyle(this._to);
    const currentVelocity = src_mapToZero_mapToZero(currentStyle);
    this._currentStyle = assign_default()({}, currentStyle);
    this._currentVelocity = assign_default()({}, currentVelocity);
    this._lastIdealStyle = assign_default()({}, currentStyle);
    this._lastIdealVelocity = assign_default()({}, currentVelocity);
    this.resetPlayStates();
    this._frameCount = 0;
    this._prevTime = 0;
  }

  animate() {
    if (this._timer != null) {
      return;
    }

    this._timer = requestAnimationFrame(timestamp => {
      const nowTime = es_src_Animation_now(); // stop animation and emit onRest event

      if (src_shouldStopAnimation_shouldStopAnimation(this._currentStyle, this._to, this._currentVelocity, this._startedTime || nowTime, nowTime) || this._ended || this._stopped) {
        if (this._wasAnimating && !this._ended && !this._stopped) {
          // should emit reset in settimeout for delay msPerframe
          this._timer = set_timeout_default()(() => {
            clearTimeout(this._timer);
            this._timer = null;
            this._ended = true;
            this.emit('rest', this.getCurrentStates());
          }, src_Animation_msPerFrame);
        }

        this.resetPlayStates();
        return;
      }

      if (!this._started) {
        this._started = true;
        this.emit('start', this.getCurrentStates());
      }

      this._stopped = false;
      this._paused = false;
      this._wasAnimating = true;

      if (this._startedTime === 0) {
        this._startedTime = nowTime;
      }

      const currentTime = nowTime;
      const timeDelta = currentTime - this._prevTime;
      this._prevTime = currentTime;

      if (currentTime - this._startedTime < this._delay) {
        this._timer = null;
        this.animate();
      }

      const newLastIdealStyle = {};
      const newLastIdealVelocity = {};
      const newCurrentStyle = {};
      const newCurrentVelocity = {};
      const toKeys = this._to && keys_default()(this._to) || [];

      for (const key of toKeys) {
        const styleValue = this._to[key];
        this._accumulatedTime[key] = typeof this._accumulatedTime[key] !== 'number' ? timeDelta : this._accumulatedTime[key] + timeDelta;
        const from = this._from[key] != null && typeof this._from[key] === 'object' ? this._from[key].val : this._from[key];
        const to = styleValue.val;

        if (typeof styleValue === 'number') {
          newCurrentStyle[key] = styleValue;
          newCurrentVelocity[key] = 0;
          newLastIdealStyle[key] = styleValue;
          newLastIdealVelocity[key] = 0;
        } else {
          let newLastIdealStyleValue = this._lastIdealStyle[key];
          let newLastIdealVelocityValue = this._lastIdealVelocity[key];

          if (src_shouldUseBezier_shouldUseBezier(this._config) || src_shouldUseBezier_shouldUseBezier(styleValue)) {
            // easing
            const {
              easing,
              duration
            } = styleValue;
            newLastIdealStyleValue = from + easing((currentTime - this._startedTime) / duration) * (to - from);

            if (currentTime >= this._startedTime + duration) {
              newLastIdealStyleValue = to;
              styleValue.done = true;
            }

            newLastIdealStyle[key] = newLastIdealStyleValue;
            newCurrentStyle[key] = newLastIdealStyleValue;
          } else if (to != null && to === this._currentStyle[key]) {
            newCurrentStyle[key] = to;
            newCurrentVelocity[key] = 0;
            newLastIdealStyle[key] = to;
            newLastIdealVelocity[key] = 0;
          } else {
            // spring
            const currentFrameCompletion = (this._accumulatedTime[key] - Math.floor(this._accumulatedTime[key] / src_Animation_msPerFrame) * src_Animation_msPerFrame) / src_Animation_msPerFrame;
            const framesToCatchUp = Math.floor(this._accumulatedTime[key] / src_Animation_msPerFrame);

            for (let i = 0; i < framesToCatchUp; i++) {
              [newLastIdealStyleValue, newLastIdealVelocityValue] = src_stepper_stepper(src_Animation_msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.tension, styleValue.friction, styleValue.precision);
            }

            const [nextIdealX, nextIdealV] = src_stepper_stepper(src_Animation_msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.tension, styleValue.friction, styleValue.precision);
            newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
            newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
            newLastIdealStyle[key] = newLastIdealStyleValue;
            newLastIdealVelocity[key] = newLastIdealVelocityValue;
            this._accumulatedTime[key] -= framesToCatchUp * src_Animation_msPerFrame;
          }
        }
      }

      this._timer = null;
      this._currentStyle = assign_default()({}, newCurrentStyle);
      this._currentVelocity = assign_default()({}, newCurrentVelocity);
      this._lastIdealStyle = assign_default()({}, newLastIdealStyle);
      this._lastIdealVelocity = assign_default()({}, newLastIdealVelocity); // console.log(newCurrentStyle);

      if (!this._destroyed) {
        this.emit('frame', this.getCurrentStates());
        this.animate();
      }
    });
  }

  start() {
    this._prevTime = es_src_Animation_now();
    this._startedTime = es_src_Animation_now();
    this.animate();
  }

  end() {
    if (!this._ended) {
      this._ended = true;
      this._currentStyle = this.getFinalStates();
      this.emit('frame', this.getFinalStates());
      this.emit('rest', this.getFinalStates());
    }

    this.destroy();
  }

  pause() {
    if (!this._paused) {
      this._pausedTime = es_src_Animation_now();
      this._paused = true;
      this.emit('pause', this.getCurrentStates());
      this.destroy();
      this._destroyed = false;
    }
  }

  resume() {
    if (this._started && this._paused) {
      const nowTime = es_src_Animation_now();
      const pausedDuration = nowTime - this._pausedTime;
      this._paused = false; // should add with pausedDuration

      this._startedTime += pausedDuration;
      this._prevTime += pausedDuration;
      this._pausedTime = 0;
      this.emit('resume', this.getCurrentStates());
      this.animate();
    }
  }

  stop() {
    this.destroy();

    if (!this._stopped) {
      this._stopped = true; // this.emit('frame', this.getInitialStates());

      this.emit('stop', this.getInitialStates());
      this.initStates();
    }
  }

  destroy() {
    cancelAnimationFrame(this._timer);
    clearTimeout(this._timer);
    this._timer = null;
    this._destroyed = true;
  }

  resetPlayStates() {
    this._started = false;
    this._stopped = false;
    this._ended = false;
    this._paused = false;
    this._destroyed = false;
    this._timer = null;
    this._wasAnimating = false;
    this._accumulatedTime = {};
    this._startedTime = 0;
    this._pausedTime = 0;
  }

  reset() {
    this.destroy();
    this.initStates();
  }

  reverse() {
    this.destroy();

    const props = assign_default()({}, this._props);

    const [from, to] = [props.to, props.from];
    props.from = from;
    props.to = to;
    this._props = assign_default()({}, props);
    this.initStates();
  }

  getCurrentStates() {
    return assign_default()({}, this._currentStyle);
  }

  getInitialStates() {
    return assign_default()({}, src_stripStyle_stripStyle(this._props.from));
  }

  getFinalStates() {
    return assign_default()({}, src_stripStyle_stripStyle(this._props.to));
  }

}
// CONCATENATED MODULE: ./node_modules/@douyinfe/semi-animation/lib/es/src/interpolate.js




/**
 *
 * @param {number|number[]|string|string[]} from
 * @param {number|number[]|string|string[]} to
 * @param {number} ratio
 * @param {Function} [parser]
 * @param {Function} [formatter]
 * @returns {any}
*/
// eslint-disable-next-line max-len
function src_interpolate_interpolate(from, to) {
  let ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  let parser = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  let formatter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

  if (typeof parser === 'function') {
    from = parser(from);
    to = parser(to);
  }

  if (typeof from === 'string' || typeof from === 'number') {
    from = [parse_float_default()(from)];
  }

  if (typeof to === 'string' || typeof to === 'number') {
    to = [parse_float_default()(to)];
  }

  const result = [];

  if (is_array_default()(from) && is_array_default()(to)) {
    for_each_default()(from).call(from, (fromVal, idx) => {
      fromVal = parse_float_default()(fromVal);

      const toVal = parse_float_default()(to[idx]);

      result.push((toVal - fromVal) * ratio + fromVal);
    });
  }

  if (typeof formatter === 'function') {
    return formatter(result);
  } else {
    return result;
  }
}
// CONCATENATED MODULE: ./node_modules/@douyinfe/semi-animation/lib/es/index.js






// CONCATENATED MODULE: ./progress/index.tsx








const progress_prefixCls = progress_constants_cssClasses.PREFIX;

class progress_Progress extends external_root_React_commonjs2_react_commonjs_react_amd_react_["Component"] {
  constructor(props) {
    super(props);
    this._mounted = true;
    this._mounted = true;
    this.state = {
      percentNumber: this.props.percent // Specially used for animation of numbers

    };
  }

  componentDidUpdate(prevProps) {
    if (isNaN(this.props.percent) || isNaN(prevProps.percent)) {
      throw new Error('[Semi Progress]:percent can not be NaN');
      return;
    }

    if (prevProps.percent !== this.props.percent) {
      if (!this.props.motion) {
        // eslint-disable-next-line
        this.setState({
          percentNumber: this.props.percent
        });
        return;
      }

      if (this.animation && this.animation.destroy) {
        this.animation.destroy();
      }

      this.animation = new lib_es_src_Animation_Animation({
        from: {
          value: prevProps.percent
        },
        to: {
          value: this.props.percent
        }
      }, {
        // easing: 'cubic-bezier(0, .68, .3, 1)'
        easing: 'linear',
        duration: 300
      });
      this.animation.on('frame', props => {
        // prevent setState while component is unmounted but this timer is called
        if (this._mounted === false) {
          return;
        } // let percentNumber = Number.isInteger(props.value) ? props.value : Math.floor(props.value * 100) / 100;


        const percentNumber = parse_int_default()(props.value);

        this.setState({
          percentNumber
        });
      });
      this.animation.on('rest', () => {
        // prevent setState while component is unmounted but this timer is called
        if (this._mounted === false) {
          return;
        }

        this.setState({
          percentNumber: this.props.percent
        });
      });
      this.animation.start();
    }
  }

  componentWillUnmount() {
    this.animation && this.animation.destroy();
    this._mounted = false;
  }

  renderCircleProgress() {
    var _context;

    const {
      strokeLinecap,
      style,
      className,
      strokeWidth,
      format,
      size,
      stroke,
      showInfo,
      percent,
      orbitStroke,
      id
    } = this.props;
    const ariaLabel = this.props['aria-label'];
    const ariaLabelledBy = this.props['aria-labelledby'];
    const ariaValueText = this.props['aria-valuetext'];
    const {
      percentNumber
    } = this.state;
    const classNames = {
      wrapper: classnames_default()("".concat(progress_prefixCls, "-circle"), className),
      svg: classnames_default()("".concat(progress_prefixCls, "-circle-ring")),
      circle: classnames_default()("".concat(progress_prefixCls, "-circle-ring-inner"))
    };
    const perc = this.calcPercent(percent);
    const percNumber = this.calcPercent(percentNumber);
    let width;

    if (this.props.width) {
      width = this.props.width;
    } else {
      size === progress_constants_strings.DEFAULT_SIZE ? width = 72 : width = 24;
    } // cx, cy is circle center


    const cy = width / 2;
    const cx = width / 2;
    const radius = (width - strokeWidth) / 2; // radius

    const circumference = radius * 2 * Math.PI;
    const strokeDashoffset = (1 - perc / 100) * circumference; // Offset

    const strokeDasharray = concat_default()(_context = "".concat(circumference, " ")).call(_context, circumference);

    const text = format(percNumber);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      id: id,
      className: classNames.wrapper,
      style: style,
      role: 'progressbar',
      "aria-valuemin": 0,
      "aria-valuemax": 100,
      "aria-valuenow": percNumber,
      "aria-labelledby": ariaLabelledBy,
      "aria-label": ariaLabel,
      "aria-valuetext": ariaValueText
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("svg", {
      key: size,
      className: classNames.svg,
      height: width,
      width: width,
      "aria-hidden": true
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("circle", {
      strokeDashoffset: 0,
      strokeWidth: strokeWidth,
      strokeDasharray: strokeDasharray,
      strokeLinecap: strokeLinecap,
      fill: "transparent",
      stroke: orbitStroke,
      r: radius,
      cx: cx,
      cy: cy,
      "aria-hidden": true
    }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("circle", {
      className: classNames.circle,
      strokeDashoffset: strokeDashoffset,
      strokeWidth: strokeWidth,
      strokeDasharray: strokeDasharray,
      strokeLinecap: strokeLinecap,
      fill: "transparent",
      stroke: stroke,
      r: radius,
      cx: cx,
      cy: cy,
      "aria-hidden": true
    })), showInfo && size !== 'small' ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(progress_prefixCls, "-circle-text")
    }, text) : null);
  }

  calcPercent(percent) {
    let perc;

    if (percent > 100) {
      perc = 100;
    } else if (percent < 0) {
      perc = 0;
    } else {
      perc = percent;
    }

    return perc;
  }

  renderLineProgress() {
    const {
      className,
      style,
      stroke,
      direction,
      format,
      showInfo,
      size,
      percent,
      orbitStroke,
      id
    } = this.props;
    const ariaLabel = this.props['aria-label'];
    const ariaLabelledBy = this.props['aria-labelledby'];
    const ariaValueText = this.props['aria-valuetext'];
    const {
      percentNumber
    } = this.state;
    const progressWrapperCls = classnames_default()(progress_prefixCls, className, {
      ["".concat(progress_prefixCls, "-horizontal")]: direction === progress_constants_strings.DEFAULT_DIRECTION,
      ["".concat(progress_prefixCls, "-vertical")]: direction !== progress_constants_strings.DEFAULT_DIRECTION,
      ["".concat(progress_prefixCls, "-large")]: size === 'large'
    });
    const progressTrackCls = classnames_default()({
      ["".concat(progress_prefixCls, "-track")]: true
    });
    const innerCls = classnames_default()("".concat(progress_prefixCls, "-track-inner"));
    const perc = this.calcPercent(percent);
    const percNumber = this.calcPercent(percentNumber);
    const innerStyle = {
      background: stroke
    };

    if (direction === progress_constants_strings.DEFAULT_DIRECTION) {
      innerStyle.width = "".concat(perc, "%");
    } else {
      innerStyle.height = "".concat(perc, "%");
    }

    const text = format(percNumber);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      id: id,
      className: progressWrapperCls,
      style: style,
      role: 'progressbar',
      "aria-valuemin": 0,
      "aria-valuemax": 100,
      "aria-valuenow": perc,
      "aria-labelledby": ariaLabelledBy,
      "aria-label": ariaLabel,
      "aria-valuetext": ariaValueText
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: progressTrackCls,
      style: orbitStroke ? {
        backgroundColor: orbitStroke
      } : {},
      "aria-hidden": true
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: innerCls,
      style: innerStyle,
      "aria-hidden": true
    })), showInfo ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(progress_prefixCls, "-line-text")
    }, text) : null);
  }

  render() {
    const {
      type
    } = this.props;

    if (type === 'line') {
      return this.renderLineProgress();
    } else {
      return this.renderCircleProgress();
    }
  }

}

progress_Progress.propTypes = {
  'aria-label': prop_types_default.a.string,
  'aria-labelledby': prop_types_default.a.string,
  'aria-valuetext': prop_types_default.a.string,
  className: prop_types_default.a.string,
  direction: prop_types_default.a.oneOf(progress_constants_strings.directions),
  format: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.node]),
  id: prop_types_default.a.string,
  motion: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.func, prop_types_default.a.object]),
  orbitStroke: prop_types_default.a.string,
  percent: prop_types_default.a.number,
  scale: prop_types_default.a.number,
  showInfo: prop_types_default.a.bool,
  size: prop_types_default.a.oneOf(progress_constants_strings.sizes),
  stroke: prop_types_default.a.string,
  strokeLinecap: prop_types_default.a.oneOf(progress_constants_strings.strokeLineCap),
  strokeWidth: prop_types_default.a.number,
  style: prop_types_default.a.object,
  type: prop_types_default.a.oneOf(progress_constants_strings.types),
  width: prop_types_default.a.number
};
progress_Progress.defaultProps = {
  className: '',
  direction: progress_constants_strings.DEFAULT_DIRECTION,
  format: text => "".concat(text, "%"),
  motion: true,
  orbitStroke: 'var(--semi-color-fill-0)',
  percent: 0,
  showInfo: false,
  size: progress_constants_strings.DEFAULT_SIZE,
  stroke: 'var(--semi-color-success)',
  strokeLinecap: progress_constants_strings.DEFAULT_LINECAP,
  strokeWidth: 4,
  style: {},
  type: progress_constants_strings.DEFAULT_TYPE
};
/* harmony default export */ var progress_0 = (progress_Progress);
// CONCATENATED MODULE: ../semi-foundation/radio/constants.ts

const radioClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-radio"),
  INNER: "".concat(BASE_CLASS_PREFIX, "-radio-inner"),
  TEXT: "".concat(BASE_CLASS_PREFIX, "-radio-text"),
  INPUT: "".concat(BASE_CLASS_PREFIX, "-radio-input"),
  CHECKED: "".concat(BASE_CLASS_PREFIX, "-radio-checked"),
  DISABLED: "".concat(BASE_CLASS_PREFIX, "-radio-disabled"),
  BUTTON: "".concat(BASE_CLASS_PREFIX, "-radio-button")
};
const radioGroupClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-radioGroup"),
  INNER: "".concat(BASE_CLASS_PREFIX, "-radioGroup-inner"),
  TEXT: "".concat(BASE_CLASS_PREFIX, "-radioGroup-text"),
  INPUT: "".concat(BASE_CLASS_PREFIX, "-radioGroup-input"),
  CHECKED: "".concat(BASE_CLASS_PREFIX, "-radioGroup-checked"),
  DISABLED: "".concat(BASE_CLASS_PREFIX, "-radioGroup-disabled")
};
const radio_constants_strings = {
  DIRECTION_SET: ['horizontal', 'vertical'],
  DEFAULT_DIRECTION: 'horizontal',
  MODE: ['advanced', ''],
  TYPE_DEFAULT: 'default',
  TYPE_BUTTON: 'button',
  TYPE_CARD: 'card',
  TYPE_PURECARD: 'pureCard',
  BUTTON_SIZE: ['middle', 'small', 'large']
};
const radio_constants_numbers = {};

// CONCATENATED MODULE: ../semi-foundation/radio/radioGroupFoundation.ts


class radioGroupFoundation_RadioGroupFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  }

  init() {
    const displayValue = this._getDisplayValue();

    this._setValue(displayValue);
  }

  _getDisplayValue() {
    const {
      value,
      defaultValue
    } = this.getProps();
    let displayValue;

    if ('value' in this.getProps()) {
      displayValue = value;
    } else if ('defaultValue' in this.getProps()) {
      displayValue = defaultValue;
    }

    return displayValue;
  }

  handleChange(evt) {
    const mode = this.getProp('mode');
    const lastValue = this.getState('value');
    const {
      checked,
      value
    } = evt.target;

    const isControlledComponent = this._adapter.isInProps('value');

    const cbValue = assign_default()(assign_default()({}, evt), {
      target: assign_default()(assign_default()({}, evt.target), {
        value
      })
    });

    if (mode === 'advanced' && !checked) {
      cbValue.target.value = undefined;
    }

    if (!isControlledComponent) {
      if (mode === 'advanced' && !checked) {
        this._setValue(undefined);
      } else {
        this._setValue(value);
      }
    }

    if (mode === 'advanced' || lastValue !== value) {
      this._adapter.notifyChange(cbValue);
    }
  } // call when prop.value change


  handlePropValueChange(propValue) {
    this._setValue(propValue);
  }

  _setValue(value) {
    this._adapter.setValue(value);
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  destroy() {}

}
// CONCATENATED MODULE: ../semi-foundation/radio/radioFoundation.ts


class radioFoundation_RadioFoundation extends foundation {
  constructor() {
    super(...arguments);

    this.handleFocusVisible = event => {
      const {
        target
      } = event;

      try {
        if (target.matches(':focus-visible')) {
          this._adapter.setFocusVisible(true);
        }
      } catch (error) {
        Object(warning["a" /* default */])(true, 'Warning: [Semi Radio] The current browser does not support the focus-visible');
      }
    };

    this.handleBlur = () => {
      this._adapter.setFocusVisible(false);
    };
  }

  init() {
    const {
      children,
      extra,
      extraId,
      addonId
    } = this._adapter.getProps();

    if (children && !addonId) {
      this._adapter.setAddonId();
    }

    if (extra && !extraId) {
      this._adapter.setExtraId();
    }
  }

  setHover(hover) {
    this._adapter.setHover(hover);
  }

}
// EXTERNAL MODULE: ../semi-foundation/radio/radio.scss
var radio_radio = __webpack_require__("L6OJ");

// CONCATENATED MODULE: ../semi-foundation/radio/radioInnerFoundation.ts


class radioInnerFoundation_RadioInnerFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  }

  init() {
    const checked = this._adapter.getProp('checked');

    const defaultChecked = this._adapter.getProp('defaultChecked');

    this.setChecked(checked || defaultChecked);
  }

  setChecked(checked) {
    this._adapter.setNativeControlChecked(checked);
  }

  getChecked() {
    return this._adapter.getProp('checked');
  }

  handleChange(e) {
    const isControlledMode = ('checked' in this.getProps());
    const {
      checked
    } = e.target;

    const stopPropagation = () => {
      e.stopPropagation();
    };

    const preventDefault = () => {
      e.preventDefault();
    };

    const cbValue = {
      target: assign_default()(assign_default()({}, this.getProps()), {
        checked
      }),
      stopPropagation,
      preventDefault
    };

    if (isControlledMode) {
      this._adapter.notifyChange(cbValue);
    } else {
      this.setChecked(checked);

      this._adapter.notifyChange(cbValue);
    }
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  destroy() {}

}
// CONCATENATED MODULE: ./radio/context.ts

const context_Context = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext(null);
/* harmony default export */ var radio_context = (context_Context);
// CONCATENATED MODULE: ./radio/radioInner.tsx












class radioInner_RadioInner extends baseComponent_BaseComponent {
  constructor(props) {
    var _context;

    super(props);
    this.state = {
      checked: false
    };
    this.foundation = new radioInnerFoundation_RadioInnerFoundation(this.adapter);
    this.onChange = bind_default()(_context = this.onChange).call(_context, this);
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      setNativeControlChecked: checked => {
        this.setState({
          checked
        });
      },
      notifyChange: e => {
        this.props.onChange(e);
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentDidUpdate(prevProps) {
    if (prevProps.checked !== this.props.checked) {
      this.foundation.setChecked(this.props.checked);
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  blur() {
    this.inputEntity.blur();
  }

  focus() {
    const {
      preventScroll
    } = this.props;
    this.inputEntity.focus({
      preventScroll
    });
  }

  onChange(e) {
    this.foundation.handleChange(e);
  }

  render() {
    const {
      disabled,
      mode,
      autoFocus,
      name,
      isButtonRadio,
      isPureCardRadioGroup,
      addonId,
      extraId,
      'aria-label': ariaLabel,
      focusInner,
      onInputFocus,
      onInputBlur
    } = this.props;
    const {
      checked
    } = this.state;
    const prefix = this.props.prefixCls || radioClasses.PREFIX;
    const wrapper = classnames_default()({
      ["".concat(prefix, "-inner")]: true,
      ["".concat(prefix, "-inner-checked")]: Boolean(checked),
      ["".concat(prefix, "-inner-buttonRadio")]: isButtonRadio,
      ["".concat(prefix, "-inner-pureCardRadio")]: isPureCardRadioGroup
    });
    const inner = classnames_default()({
      ["".concat(prefix, "-focus")]: focusInner,
      ["".concat(prefix, "-focus-border")]: focusInner && !checked,
      ["".concat(prefix, "-inner-display")]: !isButtonRadio
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: wrapper
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("input", {
      ref: ref => {
        this.inputEntity = ref;
      },
      autoFocus: autoFocus,
      type: mode === 'advanced' ? 'checkbox' : 'radio',
      checked: Boolean(checked),
      disabled: disabled,
      onChange: this.onChange,
      name: name,
      "aria-label": ariaLabel,
      "aria-labelledby": addonId,
      "aria-describedby": extraId,
      onFocus: onInputFocus,
      onBlur: onInputBlur
    }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: inner
    }, checked ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconRadio, null) : null));
  }

}

radioInner_RadioInner.contextType = radio_context;
radioInner_RadioInner.propTypes = {
  checked: prop_types_default.a.bool,
  disabled: prop_types_default.a.bool,
  isButtonRadio: prop_types_default.a.bool,
  onChange: prop_types_default.a.func,
  mode: prop_types_default.a.oneOf(['advanced', '']),
  'aria-label': prop_types_default.a.string,
  focusInner: prop_types_default.a.bool,
  onInputFocus: prop_types_default.a.func,
  onInputBlur: prop_types_default.a.func,
  preventScroll: prop_types_default.a.bool
};
radioInner_RadioInner.defaultProps = {
  onChange: noop_default.a,
  isButtonRadio: false
};
/* harmony default export */ var radioInner = (radioInner_RadioInner);
// CONCATENATED MODULE: ./radio/radio.tsx




/* eslint-disable prefer-destructuring */













class radio_Radio extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.onChange = e => {
      const {
        onChange
      } = this.props;

      if (this.isInGroup()) {
        const {
          radioGroup
        } = this.context;
        radioGroup.onChange && radioGroup.onChange(e);
      }

      onChange && onChange(e);
    };

    this.handleMouseEnter = e => {
      this.props.onMouseEnter(e);
      this.foundation.setHover(true);
    };

    this.handleMouseLeave = e => {
      this.props.onMouseLeave(e);
      this.foundation.setHover(false);
    };

    this.handleFocusVisible = event => {
      this.foundation.handleFocusVisible(event);
    };

    this.handleBlur = event => {
      this.foundation.handleBlur();
    };

    this.state = {
      hover: false,
      addonId: props.addonId,
      extraId: props.extraId
    };
    this.foundation = new radioFoundation_RadioFoundation(this.adapter);
    this.radioEntity = null;
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      setHover: hover => {
        this.setState({
          hover
        });
      },
      setAddonId: () => {
        this.setState({
          addonId: getUuidShort({
            prefix: 'addon'
          })
        });
      },
      setExtraId: () => {
        this.setState({
          extraId: getUuidShort({
            prefix: 'extra'
          })
        });
      },
      setFocusVisible: focusVisible => {
        this.setState({
          focusVisible
        });
      }
    });
  }

  isInGroup() {
    // eslint-disable-next-line react/destructuring-assignment
    return this.context && this.context.radioGroup;
  }

  focus() {
    this.radioEntity.focus();
  }

  blur() {
    this.radioEntity.blur();
  }

  render() {
    var _context, _context2, _context3;

    const {
      addonClassName,
      addonStyle,
      checked,
      disabled,
      style,
      className,
      prefixCls,
      displayMode,
      children,
      extra,
      mode,
      type,
      value: propValue,
      name
    } = this.props;
    let realChecked, isDisabled, realMode, isButtonRadioGroup, isCardRadioGroup, isPureCardRadioGroup, isButtonRadioComponent, buttonSize, realPrefixCls;
    const {
      hover: isHover,
      addonId,
      extraId,
      focusVisible
    } = this.state;
    let props = {};

    if (this.isInGroup()) {
      realChecked = this.context.radioGroup.value === propValue;
      isDisabled = disabled || this.context.radioGroup.disabled;
      realMode = this.context.mode;
      isButtonRadioGroup = this.context.radioGroup.isButtonRadio;
      isCardRadioGroup = this.context.radioGroup.isCardRadio;
      isPureCardRadioGroup = this.context.radioGroup.isPureCardRadio;
      buttonSize = this.context.radioGroup.buttonSize;
      realPrefixCls = prefixCls || this.context.radioGroup.prefixCls;
      props = {
        checked: realChecked,
        disabled: isDisabled
      };
    } else {
      realChecked = checked;
      isDisabled = disabled;
      realMode = mode;
      isButtonRadioComponent = type === 'button';
      realPrefixCls = prefixCls;
    }

    const isButtonRadio = typeof isButtonRadioGroup === 'undefined' ? isButtonRadioComponent : isButtonRadioGroup;
    const prefix = realPrefixCls || radioClasses.PREFIX;
    const focusOuter = isCardRadioGroup || isPureCardRadioGroup || isButtonRadio;
    const wrapper = classnames_default()(prefix, {
      ["".concat(prefix, "-disabled")]: isDisabled,
      ["".concat(prefix, "-checked")]: realChecked,
      [concat_default()(_context = "".concat(prefix, "-")).call(_context, displayMode)]: Boolean(displayMode),
      ["".concat(prefix, "-buttonRadioComponent")]: isButtonRadioComponent,
      ["".concat(prefix, "-buttonRadioGroup")]: isButtonRadioGroup,
      [concat_default()(_context2 = "".concat(prefix, "-buttonRadioGroup-")).call(_context2, buttonSize)]: isButtonRadioGroup && buttonSize,
      ["".concat(prefix, "-cardRadioGroup")]: isCardRadioGroup,
      ["".concat(prefix, "-cardRadioGroup_disabled")]: isDisabled && isCardRadioGroup,
      ["".concat(prefix, "-cardRadioGroup_checked")]: isCardRadioGroup && realChecked && !isDisabled,
      ["".concat(prefix, "-cardRadioGroup_checked_disabled")]: isCardRadioGroup && realChecked && isDisabled,
      ["".concat(prefix, "-cardRadioGroup_hover")]: isCardRadioGroup && !realChecked && isHover && !isDisabled,
      [className]: Boolean(className),
      ["".concat(prefix, "-focus")]: focusVisible && (isCardRadioGroup || isPureCardRadioGroup)
    });
    const groupName = this.isInGroup() && this.context.radioGroup.name;
    const addonCls = classnames_default()({
      ["".concat(prefix, "-addon")]: !isButtonRadio,
      ["".concat(prefix, "-addon-buttonRadio")]: isButtonRadio,
      ["".concat(prefix, "-addon-buttonRadio-checked")]: isButtonRadio && realChecked,
      ["".concat(prefix, "-addon-buttonRadio-disabled")]: isButtonRadio && isDisabled,
      ["".concat(prefix, "-addon-buttonRadio-hover")]: isButtonRadio && !realChecked && !isDisabled && isHover,
      [concat_default()(_context3 = "".concat(prefix, "-addon-buttonRadio-")).call(_context3, buttonSize)]: isButtonRadio && buttonSize,
      ["".concat(prefix, "-focus")]: focusVisible && isButtonRadio
    }, addonClassName);

    const renderContent = () => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, children ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: addonCls,
      style: addonStyle,
      id: addonId,
      "x-semi-prop": "children"
    }, children) : null, extra && !isButtonRadio ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefix, "-extra"),
      id: extraId,
      "x-semi-prop": "extra"
    }, extra) : null);

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("label", {
      style: style,
      className: wrapper,
      onMouseEnter: this.handleMouseEnter,
      onMouseLeave: this.handleMouseLeave
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(radioInner, assign_default()({}, this.props, props, {
      mode: realMode,
      name: name !== null && name !== void 0 ? name : groupName,
      isButtonRadio: isButtonRadio,
      isPureCardRadioGroup: isPureCardRadioGroup,
      onChange: this.onChange,
      ref: ref => {
        this.radioEntity = ref;
      },
      addonId: children && addonId,
      extraId: extra && extraId,
      focusInner: focusVisible && !focusOuter,
      onInputFocus: this.handleFocusVisible,
      onInputBlur: this.handleBlur
    })), isCardRadioGroup ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefix, "-isCardRadioGroup_content")
    }, renderContent()) : renderContent());
  }

}

radio_Radio.contextType = radio_context;
radio_Radio.propTypes = {
  autoFocus: prop_types_default.a.bool,
  checked: prop_types_default.a.bool,
  defaultChecked: prop_types_default.a.bool,
  value: prop_types_default.a.any,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  disabled: prop_types_default.a.bool,
  prefixCls: prop_types_default.a.string,
  displayMode: prop_types_default.a.oneOf(['vertical', '']),
  onChange: prop_types_default.a.func,
  onMouseEnter: prop_types_default.a.func,
  onMouseLeave: prop_types_default.a.func,
  mode: prop_types_default.a.oneOf(radio_constants_strings.MODE),
  extra: prop_types_default.a.node,
  addonStyle: prop_types_default.a.object,
  addonClassName: prop_types_default.a.string,
  type: prop_types_default.a.oneOf([radio_constants_strings.TYPE_DEFAULT, radio_constants_strings.TYPE_BUTTON, radio_constants_strings.TYPE_CARD, radio_constants_strings.TYPE_PURECARD]),
  'aria-label': prop_types_default.a.string,
  preventScroll: prop_types_default.a.bool
};
radio_Radio.defaultProps = {
  autoFocus: false,
  defaultChecked: false,
  value: undefined,
  style: undefined,
  onMouseEnter: noop_default.a,
  onMouseLeave: noop_default.a,
  mode: '',
  type: 'default'
};
/* harmony default export */ var radio_radio_0 = (radio_Radio);
// CONCATENATED MODULE: ./radio/radioGroup.tsx













class radioGroup_RadioGroup extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.onChange = evt => {
      this.foundation.handleChange(evt);
    };

    this.getFormatName = () => this.props.name || 'default';

    this.state = {
      value: undefined
    };
    this.foundation = new radioGroupFoundation_RadioGroupFoundation(this.adapter);
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentDidUpdate(prevProps) {
    if (typeof prevProps.value === 'number' && isNaN(prevProps.value) && typeof this.props.value === 'number' && isNaN(this.props.value)) {
      // `NaN === NaN` returns false, and this will fail the next if check
      // therefore triggering an infinite loop
      return;
    }

    if (prevProps.value !== this.props.value) {
      this.foundation.handlePropValueChange(this.props.value);
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      setValue: value => {
        this.setState({
          value
        });
      },
      getProps: () => this.props,
      isInProps: name => Boolean(name in this.props),
      notifyChange: evt => {
        this.props.onChange && this.props.onChange(evt);
      }
    });
  }

  render() {
    var _context, _context2, _context3;

    const {
      children,
      options,
      mode,
      prefixCls,
      className,
      style,
      direction,
      type,
      buttonSize,
      id
    } = this.props;
    const isButtonRadio = type === radio_constants_strings.TYPE_BUTTON;
    const isPureCardRadio = type === radio_constants_strings.TYPE_PURECARD;
    const isCardRadio = type === radio_constants_strings.TYPE_CARD || isPureCardRadio;
    const isDefaultRadio = type === radio_constants_strings.TYPE_DEFAULT;
    const prefix = prefixCls || radioGroupClasses.PREFIX;
    const prefixClsDisplay = classnames_default()(className, {
      [prefix]: true,
      ["".concat(prefix, "-wrapper")]: true,
      [concat_default()(_context = "".concat(prefix, "-")).call(_context, direction)]: direction && !isButtonRadio,
      [concat_default()(_context2 = "".concat(prefix, "-")).call(_context2, direction, "-default")]: direction && isDefaultRadio,
      [concat_default()(_context3 = "".concat(prefix, "-")).call(_context3, direction, "-card")]: direction && isCardRadio,
      ["".concat(prefix, "-buttonRadio")]: isButtonRadio
    });
    const realValue = this.state.value;
    let inner;

    if (options) {
      var _context4;

      inner = map_default()(_context4 = options || []).call(_context4, (option, index) => {
        if (typeof option === 'string') {
          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(radio_radio_0, {
            key: index,
            disabled: this.props.disabled,
            value: option
          }, option);
        } else {
          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(radio_radio_0, {
            key: index,
            disabled: option.disabled || this.props.disabled,
            value: option.value,
            extra: option.extra,
            className: option.className,
            style: option.style
          }, option.label);
        }
      });
    } else if (children) {
      var _context5;

      inner = map_default()(_context5 = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children).call(_context5, children, (itm, index) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(itm) ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(itm, {
        key: index
      }) : null);
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: prefixClsDisplay,
      style: style,
      id: id,
      "aria-label": this.props['aria-label'],
      "aria-invalid": this.props['aria-invalid'],
      "aria-errormessage": this.props['aria-errormessage'],
      "aria-labelledby": this.props['aria-labelledby'],
      "aria-describedby": this.props['aria-describedby'],
      "aria-required": this.props['aria-required']
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(radio_context.Provider, {
      value: {
        radioGroup: {
          onChange: this.onChange,
          value: realValue,
          disabled: this.props.disabled,
          name: this.getFormatName(),
          isButtonRadio,
          isCardRadio,
          isPureCardRadio,
          buttonSize,
          prefixCls
        },
        mode
      }
    }, inner));
  }

}

radioGroup_RadioGroup.propTypes = {
  defaultValue: prop_types_default.a.any,
  disabled: prop_types_default.a.bool,
  name: prop_types_default.a.string,
  options: prop_types_default.a.array,
  buttonSize: prop_types_default.a.oneOf(radio_constants_strings.BUTTON_SIZE),
  type: prop_types_default.a.oneOf([radio_constants_strings.TYPE_DEFAULT, radio_constants_strings.TYPE_BUTTON, radio_constants_strings.TYPE_CARD, radio_constants_strings.TYPE_PURECARD]),
  value: prop_types_default.a.any,
  onChange: prop_types_default.a.func,
  children: prop_types_default.a.node,
  prefixCls: prop_types_default.a.string,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  direction: prop_types_default.a.oneOf(radio_constants_strings.DIRECTION_SET),
  mode: prop_types_default.a.oneOf(radio_constants_strings.MODE),
  'aria-label': prop_types_default.a.string,
  'aria-describedby': prop_types_default.a.string,
  'aria-errormessage': prop_types_default.a.string,
  'aria-invalid': prop_types_default.a.bool,
  'aria-labelledby': prop_types_default.a.string,
  'aria-required': prop_types_default.a.bool,
  id: prop_types_default.a.string
};
radioGroup_RadioGroup.defaultProps = {
  disabled: false,
  onChange: noop_default.a,
  direction: radio_constants_strings.DEFAULT_DIRECTION,
  mode: '',
  type: radio_constants_strings.TYPE_DEFAULT,
  buttonSize: 'middle'
};
/* harmony default export */ var radioGroup = (radioGroup_RadioGroup);
// CONCATENATED MODULE: ./radio/index.tsx



class radio_RadioWithGroup extends radio_radio_0 {}

radio_RadioWithGroup.Group = radioGroup;
/* harmony default export */ var radio_0 = (radio_RadioWithGroup);




// CONCATENATED MODULE: ../semi-foundation/rating/constants.ts

const rating_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-rating")
};
const rating_constants_strings = {
  SIZE_SET: ['default', 'small']
};

// EXTERNAL MODULE: ../semi-foundation/rating/rating.scss
var rating = __webpack_require__("F3GA");

// CONCATENATED MODULE: ../semi-foundation/rating/foundation.ts




/* eslint-disable no-param-reassign */


class foundation_RatingFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()(assign_default()({}, foundation_RatingFoundation.defaultAdapter), adapter));

    this.handleStarFocusVisible = event => {
      const {
        target
      } = event;
      const {
        count
      } = this.getProps(); // when rating 0 is focus visible

      try {
        if (target.matches(':focus-visible')) {
          this._adapter.setEmptyStarFocusVisible(true);
        }
      } catch (error) {
        Object(warning["a" /* default */])(true, 'Warning: [Semi Rating] The current browser does not support the focus-visible');
      }
    };

    this.handleStarBlur = event => {
      const {
        emptyStarFocusVisible
      } = this.getStates();

      if (emptyStarFocusVisible) {
        this._adapter.setEmptyStarFocusVisible(false);
      }
    };
  }

  init() {
    const {
      autoFocus,
      disabled
    } = this.getProps();

    if (autoFocus && !disabled) {
      this._adapter.focus();
    }
  }

  _getScroll(w, top) {
    let ret = top ? w.pageYOffset : w.pageXOffset;
    const method = top ? 'scrollTop' : 'scrollLeft';

    if (typeof ret !== 'number') {
      const d = w.document; // ie6,7,8 standard mode

      ret = d.documentElement[method];

      if (typeof ret !== 'number') {
        // quirks mode
        ret = d.body[method];
      }
    }

    return ret;
  }

  _getClientPosition(elem) {
    let x, y;
    const doc = elem.ownerDocument;
    const {
      body
    } = doc;
    const docElem = doc && doc.documentElement;
    const box = elem.getBoundingClientRect();
    x = box.left;
    y = box.top;
    x -= docElem.clientLeft || body.clientLeft || 0;
    y -= docElem.clientTop || body.clientTop || 0;
    return {
      left: x,
      top: y
    };
  }

  _getOffsetLeft(el) {
    const pos = this._getClientPosition(el);

    const doc = el.ownerDocument;
    const w = doc.defaultView || doc.parentWindow;
    pos.left += this._getScroll(w);
    return pos.left;
  }

  getStarValue(index, pos) {
    const {
      allowHalf
    } = this.getProps();

    const direction = this._adapter.getContext('direction');

    const reverse = direction === 'rtl';
    let value = index + 1;

    if (allowHalf) {
      const starEle = this._adapter.getStarDOM(index);

      const leftDis = this._getOffsetLeft(starEle);

      const width = starEle.clientWidth;

      if (reverse && pos - leftDis > width / 2) {
        value -= 0.5;
      } else if (!reverse && pos - leftDis < width / 2) {
        value -= 0.5;
      }
    }

    return value;
  }

  handleHover(event, index) {
    const currValue = this.getStarValue(index, event.pageX);
    const {
      clearedValue,
      hoverValue
    } = this.getStates();

    if (currValue !== hoverValue && currValue !== clearedValue) {
      this._adapter.notifyHoverChange(currValue, null);
    }
  }

  handleMouseLeave() {
    this._adapter.notifyHoverChange(undefined, null);
  }

  handleClick(event, index) {
    const {
      allowClear
    } = this.getProps();
    const {
      value
    } = this.getStates();
    const newValue = this.getStarValue(index, event.pageX);
    const isReset = allowClear ? newValue === value : false;

    this._adapter.updateValue(isReset ? 0 : newValue);

    if (isReset) {
      this._adapter.notifyHoverChange(undefined, newValue);
    } else {
      this._adapter.clearValue(null);
    }
  }

  handleFocus(e) {
    this._adapter.notifyFocus(e);
  }

  handleBlur(e) {
    this._adapter.notifyBlur(e);
  }

  handleKeyDown(event, value) {
    var _context;

    const {
      key
    } = event;
    const {
      count,
      allowHalf
    } = this.getProps();

    const direction = this._adapter.getContext('direction');

    const reverse = direction === 'rtl';
    const step = allowHalf ? 0.5 : 1;
    let tempValue;
    let newValue;

    if (key === 'ArrowRight' || key === 'ArrowUp') {
      tempValue = value + (reverse ? -step : step);
    } else if (key === 'ArrowLeft' || key === 'ArrowDown') {
      tempValue = value + (reverse ? step : -step);
    }

    if (tempValue > count) {
      newValue = 0;
    } else if (tempValue < 0) {
      newValue = count;
    } else {
      newValue = tempValue;
    }

    if (includes_default()(_context = ['ArrowRight', 'ArrowUp', 'ArrowLeft', 'ArrowDown']).call(_context, key)) {
      this._adapter.notifyKeyDown(event);

      this._adapter.updateValue(newValue);

      this.changeFocusStar(newValue, event);
      event.preventDefault();

      this._adapter.notifyHoverChange(undefined, null);
    }
  }

  changeFocusStar(value, event) {
    var _context2;

    const {
      count,
      allowHalf,
      preventScroll
    } = this.getProps();
    const index = Math.ceil(value) - 1;

    const starElement = map_default()(_context2 = [...event.currentTarget.childNodes]).call(_context2, item => item.childNodes[0].childNodes);

    if (index < 0) {
      starElement[count][0].focus({
        preventScroll
      });
    } else {
      starElement[index][allowHalf ? value * 10 % 10 === 5 ? 0 : 1 : 0].focus({
        preventScroll
      });
    }
  }

}
class foundation_RatingItemFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()(assign_default()({}, foundation_RatingItemFoundation.defaultAdapter), adapter));

    this.handleFocusVisible = (event, star) => {
      const {
        target
      } = event; // when rating 0 is focus visible

      try {
        if (target.matches(':focus-visible')) {
          if (star === 'first') {
            this._adapter.setFirstStarFocus(true);
          } else {
            this._adapter.setSecondStarFocus(true);
          }
        }
      } catch (error) {
        Object(warning["a" /* default */])(true, 'Warning: [Semi Rating] The current browser does not support the focus-visible');
      }
    };

    this.handleBlur = (event, star) => {
      const {
        firstStarFocus,
        secondStarFocus
      } = this.getStates();

      if (star === 'first') {
        firstStarFocus && this._adapter.setFirstStarFocus(false);
      } else {
        secondStarFocus && this._adapter.setSecondStarFocus(false);
      }
    };
  }

}
// CONCATENATED MODULE: ./rating/item.tsx










class rating_item_Item extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);
    this.firstStar = null;
    this.secondStar = null;

    this.onHover = e => {
      const {
        onHover,
        index
      } = this.props;
      onHover(e, index);
    };

    this.onClick = e => {
      const {
        onClick,
        index
      } = this.props;
      onClick(e, index);
    };

    this.onFocus = (e, star) => {
      const {
        onFocus
      } = this.props;
      onFocus && onFocus(e);
      this.foundation.handleFocusVisible(e, star);
    };

    this.onBlur = (e, star) => {
      const {
        onBlur
      } = this.props;
      onBlur && onBlur(e);
      this.foundation.handleBlur(e, star);
    };

    this.onKeyDown = e => {
      const {
        onClick,
        index
      } = this.props;

      if (e.keyCode === 13) {
        onClick(e, index);
      }
    };

    this.starFocus = () => {
      const {
        value,
        index,
        preventScroll
      } = this.props;

      if (value - index === 0.5) {
        this.firstStar.focus({
          preventScroll
        });
      } else {
        this.secondStar.focus({
          preventScroll
        });
      }
    };

    this.saveFirstStar = node => {
      this.firstStar = node;
    };

    this.saveSecondStar = node => {
      this.secondStar = node;
    };

    this.state = {
      firstStarFocus: false,
      secondStarFocus: false
    };
    this.foundation = new foundation_RatingItemFoundation(this.adapter);
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      setFirstStarFocus: value => {
        this.setState({
          firstStarFocus: value
        });
      },
      setSecondStarFocus: value => {
        this.setState({
          secondStarFocus: value
        });
      }
    });
  }

  render() {
    var _context, _context2, _context3, _context4;

    const {
      index,
      prefixCls,
      character,
      count,
      value,
      disabled,
      allowHalf,
      focused,
      size,
      ariaLabelPrefix
    } = this.props;
    const {
      firstStarFocus,
      secondStarFocus
    } = this.state;
    const starValue = index + 1;
    const diff = starValue - value; // const isHalf = allowHalf && value + 0.5 === starValue;

    const isHalf = allowHalf && diff < 1 && diff > 0;
    const firstWidth = 1 - diff;
    const isFull = starValue <= value;
    const isCustomSize = typeof size === 'number';
    const starCls = classnames_default()(prefixCls, {
      ["".concat(prefixCls, "-half")]: isHalf,
      ["".concat(prefixCls, "-full")]: isFull,
      [concat_default()(_context = "".concat(prefixCls, "-")).call(_context, size)]: !isCustomSize
    });
    const sizeStyle = isCustomSize ? {
      width: size,
      height: size,
      fontSize: size
    } : {};
    const iconSize = isCustomSize ? 'inherit' : size === 'small' ? 'default' : 'extra-large';
    const content = character ? character : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconStar, {
      size: iconSize,
      style: {
        display: 'block'
      }
    });
    const isEmpty = index === count;
    const starWrapCls = classnames_default()("".concat(prefixCls, "-wrapper"), {
      ["".concat(prefixCls, "-disabled")]: disabled,
      ["".concat(rating_constants_cssClasses.PREFIX, "-focus")]: (firstStarFocus || secondStarFocus) && value !== 0
    });
    const starWrapProps = {
      onClick: disabled ? null : this.onClick,
      onKeyDown: disabled ? null : this.onKeyDown,
      onMouseMove: disabled ? null : this.onHover,
      className: starWrapCls
    };
    const AriaSetSize = allowHalf ? count * 2 + 1 : count + 1;
    const firstStarProps = {
      ref: this.saveFirstStar,
      role: "radio",
      'aria-checked': value === index + 0.5,
      'aria-posinset': 2 * index + 1,
      'aria-setsize': AriaSetSize,
      'aria-disabled': disabled,
      'aria-label': concat_default()(_context2 = "".concat(index + 0.5, " ")).call(_context2, ariaLabelPrefix, "s"),
      'aria-labelledby': this.props['aria-describedby'],
      'aria-describedby': this.props['aria-describedby'],
      className: classnames_default()("".concat(prefixCls, "-first"), "".concat(rating_constants_cssClasses.PREFIX, "-no-focus")),
      tabIndex: !disabled && value === index + 0.5 ? 0 : -1,
      onFocus: e => {
        this.onFocus(e, 'first');
      },
      onBlur: e => {
        this.onBlur(e, 'first');
      }
    };
    const secondStarTabIndex = !disabled && (value === index + 1 || isEmpty && value === 0) ? 0 : -1;
    const secondStarProps = {
      ref: this.saveSecondStar,
      role: "radio",
      'aria-checked': isEmpty ? value === 0 : value === index + 1,
      'aria-posinset': allowHalf ? 2 * (index + 1) : index + 1,
      'aria-setsize': AriaSetSize,
      'aria-disabled': disabled,
      'aria-label': concat_default()(_context3 = concat_default()(_context4 = "".concat(isEmpty ? 0 : index + 1, " ")).call(_context4, ariaLabelPrefix)).call(_context3, index === 0 ? '' : 's'),
      'aria-labelledby': this.props['aria-describedby'],
      'aria-describedby': this.props['aria-describedby'],
      className: classnames_default()("".concat(prefixCls, "-second"), "".concat(rating_constants_cssClasses.PREFIX, "-no-focus")),
      tabIndex: secondStarTabIndex,
      onFocus: e => {
        this.onFocus(e, 'second');
      },
      onBlur: e => {
        this.onBlur(e, 'second');
      }
    };
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
      className: starCls,
      style: assign_default()({}, sizeStyle),
      key: index
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({}, starWrapProps), allowHalf && !isEmpty && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({}, firstStarProps, {
      style: {
        width: "".concat(firstWidth * 100, "%")
      }
    }), content), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({}, secondStarProps, {
      "x-semi-prop": "character"
    }), content)));
  }

}
rating_item_Item.propTypes = {
  value: prop_types_default.a.number,
  index: prop_types_default.a.number,
  prefixCls: prop_types_default.a.string,
  allowHalf: prop_types_default.a.bool,
  onHover: prop_types_default.a.func,
  onClick: prop_types_default.a.func,
  character: prop_types_default.a.node,
  focused: prop_types_default.a.bool,
  disabled: prop_types_default.a.bool,
  count: prop_types_default.a.number,
  ariaLabelPrefix: prop_types_default.a.string,
  size: prop_types_default.a.oneOfType([prop_types_default.a.oneOf(rating_constants_strings.SIZE_SET), prop_types_default.a.number]),
  'aria-describedby': prop_types_default.a.string,
  onFocus: prop_types_default.a.func,
  onBlur: prop_types_default.a.func,
  preventScroll: prop_types_default.a.bool
};
// CONCATENATED MODULE: ./rating/index.tsx

















class rating_Rating extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);
    this.rate = null;

    this.onHover = (event, index) => {
      this.foundation.handleHover(event, index);
    };

    this.onMouseLeave = () => {
      this.foundation.handleMouseLeave();
    };

    this.onClick = (event, index) => {
      this.foundation.handleClick(event, index);
    };

    this.onFocus = e => {
      this.foundation.handleFocus(e);
    };

    this.onBlur = e => {
      this.foundation.handleBlur(e);
    };

    this.onKeyDown = event => {
      const {
        value
      } = this.state;
      this.foundation.handleKeyDown(event, value);
    };

    this.focus = () => {
      const {
        disabled,
        preventScroll
      } = this.props;

      if (!disabled) {
        this.rate.focus({
          preventScroll
        });
      }
    };

    this.blur = () => {
      const {
        disabled
      } = this.props;

      if (!disabled) {
        this.rate.blur();
      }
    };

    this.saveRef = index => node => {
      this.stars[index] = node;
    };

    this.saveRate = node => {
      this.rate = node;
    };

    this.handleStarFocusVisible = event => {
      this.foundation.handleStarFocusVisible(event);
    };

    this.handleStarBlur = event => {
      this.foundation.handleStarBlur(event);
    };

    this.getAriaLabelPrefix = () => {
      if (this.props['aria-label']) {
        return this.props['aria-label'];
      }

      let prefix = 'star';
      const {
        character
      } = this.props;

      if (typeof character === 'string') {
        prefix = character;
      }

      return prefix;
    };

    this.getItemList = ariaLabelPrefix => {
      var _context, _context2;

      const {
        count,
        allowHalf,
        prefixCls,
        disabled,
        character,
        size,
        tooltips
      } = this.props;
      const {
        value,
        hoverValue,
        focused
      } = this.state; // index == count is for Empty rating

      const itemList = map_default()(_context = [...instance_keys_default()(_context2 = Array(count + 1)).call(_context2)]).call(_context, ind => {
        const content = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(rating_item_Item, {
          ref: this.saveRef(ind),
          index: ind,
          count: count,
          prefixCls: "".concat(prefixCls, "-star"),
          allowHalf: allowHalf,
          value: hoverValue === undefined ? value : hoverValue,
          onClick: disabled ? function_noop : this.onClick,
          onHover: disabled ? function_noop : this.onHover,
          key: ind,
          disabled: disabled,
          character: character,
          focused: focused,
          size: ind === count ? 0 : size,
          ariaLabelPrefix: ariaLabelPrefix,
          onFocus: disabled || count !== ind ? function_noop : this.handleStarFocusVisible,
          onBlur: disabled || count !== ind ? function_noop : this.handleStarBlur
        });

        if (tooltips) {
          var _context3;

          const text = tooltips[ind] ? tooltips[ind] : '';
          const showTips = hoverValue - 1 === ind;
          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tooltip_Tooltip, {
            visible: showTips,
            trigger: "custom",
            content: text,
            key: concat_default()(_context3 = "".concat(ind, "-")).call(_context3, showTips)
          }, content);
        }

        return content;
      });

      return itemList;
    };

    const value = props.value === undefined ? props.defaultValue : props.value;
    this.stars = {};
    this.state = {
      value,
      focused: false,
      hoverValue: undefined,
      clearedValue: null,
      emptyStarFocusVisible: false
    };
    this.foundation = new foundation_RatingFoundation(this.adapter);
  }

  static getDerivedStateFromProps(nextProps, state) {
    if ('value' in nextProps && nextProps.value !== undefined) {
      return assign_default()(assign_default()({}, state), {
        value: nextProps.value
      });
    }

    return state;
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      focus: () => {
        const {
          disabled,
          count
        } = this.props;
        const {
          value
        } = this.state;

        if (!disabled) {
          const index = Math.ceil(value) - 1;
          this.stars[index < 0 ? count : index].starFocus();
        }
      },
      getStarDOM: index => {
        const instance = this.stars && this.stars[index]; // eslint-disable-next-line react/no-find-dom-node

        return external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default.a.findDOMNode(instance);
      },
      notifyHoverChange: (hoverValue, clearedValue) => {
        const {
          onHoverChange
        } = this.props;
        this.setState({
          hoverValue,
          clearedValue
        });
        onHoverChange(hoverValue);
      },
      updateValue: value => {
        const {
          onChange
        } = this.props;

        if (!('value' in this.props)) {
          this.setState({
            value
          });
        }

        onChange(value);
      },
      clearValue: clearedValue => {
        this.setState({
          clearedValue
        });
      },
      notifyFocus: e => {
        const {
          onFocus
        } = this.props;
        this.setState({
          focused: true
        });
        onFocus && onFocus(e);
      },
      notifyBlur: e => {
        const {
          onBlur
        } = this.props;
        this.setState({
          focused: false
        });
        onBlur && onBlur(e);
      },
      notifyKeyDown: e => {
        const {
          onKeyDown
        } = this.props;
        this.setState({
          focused: false
        });
        onKeyDown && onKeyDown(e);
      },
      setEmptyStarFocusVisible: focusVisible => {
        this.setState({
          emptyStarFocusVisible: focusVisible
        });
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  render() {
    var _context4, _context5, _context6;

    const {
      style,
      prefixCls,
      disabled,
      className,
      id,
      count,
      tabIndex
    } = this.props;
    const {
      value,
      emptyStarFocusVisible
    } = this.state;
    const ariaLabelPrefix = this.getAriaLabelPrefix();

    const ariaLabel = concat_default()(_context4 = concat_default()(_context5 = concat_default()(_context6 = "Rating: ".concat(value, " of ")).call(_context6, count, " ")).call(_context5, ariaLabelPrefix)).call(_context4, value === 1 ? '' : 's', ",");

    const itemList = this.getItemList(ariaLabelPrefix);
    const listCls = classnames_default()(prefixCls, {
      ["".concat(prefixCls, "-disabled")]: disabled,
      ["".concat(prefixCls, "-focus")]: emptyStarFocusVisible
    }, className);
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
        "aria-label": ariaLabel,
        "aria-labelledby": this.props['aria-labelledby'],
        "aria-describedby": this.props['aria-describedby'],
        className: listCls,
        style: style,
        onMouseLeave: disabled ? function_noop : this.onMouseLeave,
        tabIndex: disabled ? -1 : tabIndex,
        onFocus: disabled ? function_noop : this.onFocus,
        onBlur: disabled ? function_noop : this.onBlur,
        onKeyDown: disabled ? function_noop : this.onKeyDown,
        ref: this.saveRate,
        id: id
      }, itemList)
    );
  }

}
rating_Rating.contextType = configProvider_context;
rating_Rating.propTypes = {
  'aria-describedby': prop_types_default.a.string,
  'aria-errormessage': prop_types_default.a.string,
  'aria-invalid': prop_types_default.a.bool,
  'aria-label': prop_types_default.a.string,
  'aria-labelledby': prop_types_default.a.string,
  'aria-required': prop_types_default.a.bool,
  disabled: prop_types_default.a.bool,
  value: prop_types_default.a.number,
  defaultValue: prop_types_default.a.number,
  count: prop_types_default.a.number,
  allowHalf: prop_types_default.a.bool,
  allowClear: prop_types_default.a.bool,
  style: prop_types_default.a.object,
  prefixCls: prop_types_default.a.string,
  onChange: prop_types_default.a.func,
  onHoverChange: prop_types_default.a.func,
  className: prop_types_default.a.string,
  character: prop_types_default.a.node,
  tabIndex: prop_types_default.a.number,
  onFocus: prop_types_default.a.func,
  onBlur: prop_types_default.a.func,
  onKeyDown: prop_types_default.a.func,
  autoFocus: prop_types_default.a.bool,
  size: prop_types_default.a.oneOfType([prop_types_default.a.oneOf(rating_constants_strings.SIZE_SET), prop_types_default.a.number]),
  tooltips: prop_types_default.a.arrayOf(prop_types_default.a.string),
  id: prop_types_default.a.string,
  preventScroll: prop_types_default.a.bool
};
rating_Rating.defaultProps = {
  defaultValue: 0,
  count: 5,
  allowHalf: false,
  allowClear: true,
  style: {},
  prefixCls: rating_constants_cssClasses.PREFIX,
  onChange: function_noop,
  onHoverChange: function_noop,
  tabIndex: -1,
  size: 'default'
};
// CONCATENATED MODULE: ../semi-foundation/sideSheet/constants.ts

const sideSheet_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-sidesheet"),
  DIALOG: "".concat(BASE_CLASS_PREFIX, "-modal")
};
const sideSheet_constants_strings = {
  PLACEMENT: ['top', 'right', 'bottom', 'left'],
  SIZE: ['small', 'medium', 'large'],
  WIDTH: {
    small: 448,
    medium: 684,
    large: 920
  },
  HEIGHT: 448
};

// CONCATENATED MODULE: ./sideSheet/SideSheetTransition.tsx

// @ts-ignore  Currently there is no types definition for semi-animation-react;

 // eslint-disable-next-line max-len

const formatStyles = function formatStyles() {
  let styles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const {
    placement
  } = props;
  const {
    translate
  } = styles;
  const {
    opacity
  } = styles;
  let transform = '';

  switch (placement) {
    case 'left':
      transform = "translateX(-".concat(translate, "%)");
      break;

    case 'top':
      transform = "translateY(-".concat(translate, "%)");
      break;

    case 'right':
      transform = "translateX(".concat(translate, "%)");
      break;

    case 'bottom':
      transform = "translateY(".concat(translate, "%)");
      break;

    default:
      break;
  }

  return {
    transform,
    opacity
  };
};

class SideSheetTransition_SideSheetTransition extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
  render() {
    let {
      motion = {}
    } = this.props;
    const {
      children,
      controlled = false,
      visible
    } = this.props;

    if (typeof motion === 'function') {
      motion = motion(this.props);
    } else if (!motion || typeof motion !== 'object') {
      motion = {};
    }

    let extra = {};

    if (controlled) {
      extra = {
        state: visible ? 'enter' : 'leave'
      };
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Transition_Transition, assign_default()({
      config: {
        tension: 170,
        friction: 14,
        easing: 'linear',
        duration: 200
      },
      from: {
        translate: 100,
        opacity: {
          val: 0,
          duration: 180
        }
      },
      enter: {
        translate: 0,
        opacity: {
          val: 1,
          duration: 180
        }
      },
      leave: {
        translate: 100,
        opacity: {
          val: 0,
          duration: 180
        }
      }
    }, extra, motion), typeof children === 'function' ? styles => children(formatStyles(styles, this.props)) : children);
  }

}
// CONCATENATED MODULE: ./sideSheet/SideSheetContent.tsx






var SideSheetContent_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};







let SideSheetContent_uuid = 0;
const SideSheetContent_prefixCls = sideSheet_constants_cssClasses.PREFIX;
class SideSheetContent_SideSheetContent extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
  constructor() {
    super(...arguments);

    this.onMaskClick = e => {
      if (e.target === e.currentTarget) {
        this.close(e);
      }
    };

    this.close = e => {
      const {
        onClose
      } = this.props;
      onClose && onClose(e);
    };
  }

  componentDidMount() {
    this.sideSheetId = "sidesheet-".concat(SideSheetContent_uuid++);
  }

  componentWillUnmount() {
    clearTimeout(this.timeoutId);
  }

  getMaskElement() {
    const {
      mask,
      maskStyle,
      maskClosable
    } = this.props;

    if (mask) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        "aria-hidden": true,
        key: "mask",
        className: "".concat(SideSheetContent_prefixCls, "-mask"),
        style: maskStyle,
        onClick: maskClosable ? this.onMaskClick : null
      });
    }

    return null;
  }

  renderHeader() {
    const {
      title,
      closable,
      headerStyle
    } = this.props;
    let header, closer;

    if (title) {
      header = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(SideSheetContent_prefixCls, "-title"),
        "x-semi-prop": "title"
      }, this.props.title);
    }

    if (closable) {
      closer = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(iconButton_0, {
        className: "".concat(SideSheetContent_prefixCls, "-close"),
        key: "close-btn",
        onClick: this.close,
        type: "tertiary",
        icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClose, null),
        theme: "borderless",
        size: "small"
      });
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(SideSheetContent_prefixCls, "-header"),
      role: 'heading',
      "aria-level": 1,
      style: assign_default()({}, headerStyle)
    }, header, closer);
  }

  getDialogElement() {
    var _context;

    const props = SideSheetContent_rest(this.props, []);

    const style = {};

    if (props.width) {
      style.width = props.width; // When the mask is false, the width is set on the wrapper. At this time, sidesheet-inner does not need to set the width again, otherwise, the percentage will be accumulated repeatedly when the width is a percentage

      if (!props.mask) {
        style.width = '100%';
      }
    }

    if (props.height) {
      style.height = props.height;
    }

    const header = this.renderHeader();
    const dialogElement = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      key: "dialog-element",
      role: "dialog",
      tabIndex: -1,
      className: concat_default()(_context = "".concat(SideSheetContent_prefixCls, "-inner ")).call(_context, SideSheetContent_prefixCls, "-inner-wrap"),
      // onMouseDown={this.onDialogMouseDown}
      style: assign_default()(assign_default()({}, props.style), style)
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(SideSheetContent_prefixCls, "-content")
    }, header, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(SideSheetContent_prefixCls, "-body"),
      style: props.bodyStyle,
      "x-semi-prop": "children"
    }, props.children), props.footer ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(SideSheetContent_prefixCls, "-footer"),
      "x-semi-prop": "footer"
    }, props.footer) : null));
    return dialogElement;
  }

  render() {
    const {
      mask,
      className,
      width
    } = this.props;
    const wrapperCls = classnames_default()(className, {
      ["".concat(SideSheetContent_prefixCls, "-fixed")]: !mask
    });
    const wrapperStyle = {};

    if (!mask && width) {
      wrapperStyle.width = width;
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: wrapperCls,
      style: wrapperStyle
    }, this.getMaskElement(), this.getDialogElement());
  }

}
SideSheetContent_SideSheetContent.propTypes = {
  onClose: prop_types_default.a.func
};
SideSheetContent_SideSheetContent.defaultProps = {
  onClose: noop_default.a
};
// CONCATENATED MODULE: ../semi-foundation/sideSheet/sideSheetFoundation.ts






class sideSheetFoundation_SideSheetFoundation extends foundation {
  constructor(adapter) {
    var _this;

    super(assign_default()(assign_default()({}, sideSheetFoundation_SideSheetFoundation.defaultAdapter), adapter));
    _this = this;

    this.mergeMotionProp = (motion, prop, cb) => {
      const mergedMotion = typeof motion === 'undefined' || motion ? assign_default()(assign_default()({}, motion), {
        [prop]: function () {
          const curr = get_default()(motion, prop);

          if (typeof curr === 'function') {
            curr(...arguments);
          }

          cb();
        }
      }) : false;
      return mergedMotion;
    };

    this.getMergedMotion = () => {
      const {
        motion,
        visible,
        keepDOM
      } = this.getProps();
      let mergedMotion = this.mergeMotionProp(motion, 'didEnter', function () {
        const didEnter = get_default()(motion, 'didEnter');

        if (typeof didEnter === 'function') {
          didEnter(...arguments);
        }

        _this._adapter.notifyVisibleChange(visible);
      });
      mergedMotion = this.mergeMotionProp(mergedMotion, 'didLeave', function () {
        const didLeave = get_default()(motion, 'didLeave');

        if (typeof didLeave === 'function') {
          didLeave(...arguments);
        }

        _this._adapter.notifyVisibleChange(visible);
      });

      if (keepDOM) {
        var _context;

        mergedMotion = this.mergeMotionProp(mergedMotion, 'didLeave', bind_default()(_context = this._adapter.toggleHidden).call(_context, this, true));
      }

      return mergedMotion;
    };
  }

  get defaultAdapter() {
    return {
      handleCancel: noop_default.a,
      beforeShow: noop_default.a,
      afterHide: noop_default.a
    };
  }

  destroy() {
    this.afterHide();
  }

  handleCancel(e) {
    this._adapter.notifyCancel(e);
  }

  beforeShow() {
    const allowDisable = this.getProp('disableScroll');
    allowDisable && this._adapter.disabledBodyScroll();

    this._adapter.setOnKeyDownListener();
  }

  afterHide() {
    const allowDisable = this.getProp('disableScroll');
    allowDisable && this._adapter.enabledBodyScroll();

    this._adapter.removeKeyDownListener();
  }

  handleKeyDown(e) {
    const {
      closeOnEsc
    } = this.getProps();

    if (closeOnEsc && e.keyCode === utils_keyCode.ESC) {
      e.stopPropagation();
      this.handleCancel(e);
      return;
    }
  }

}
// EXTERNAL MODULE: ../semi-foundation/sideSheet/sideSheet.scss
var sideSheet = __webpack_require__("rjsz");

// CONCATENATED MODULE: ./sideSheet/index.tsx






var sideSheet_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable no-nested-ternary */













const sideSheet_prefixCls = sideSheet_constants_cssClasses.PREFIX;
const defaultWidthList = sideSheet_constants_strings.WIDTH;
const sideSheet_defaultHeight = sideSheet_constants_strings.HEIGHT;



class sideSheet_SideSheet extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.handleCancel = e => {
      this.foundation.handleCancel(e);
    };

    this.handleKeyDown = e => {
      this.foundation.handleKeyDown(e);
    };

    this.state = {
      hidden: !this.props.visible
    };
    this.foundation = new sideSheetFoundation_SideSheetFoundation(this.adapter);
    this._active = false;
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      disabledBodyScroll: () => {
        const {
          getPopupContainer
        } = this.props;

        if (!getPopupContainer && document) {
          document.body.style.overflow = 'hidden';
        }
      },
      enabledBodyScroll: () => {
        const {
          getPopupContainer
        } = this.props;

        if (!getPopupContainer && document) {
          document.body.style.overflow = '';
        }
      },
      notifyCancel: e => {
        this.props.onCancel && this.props.onCancel(e);
      },
      notifyVisibleChange: visible => {
        this.props.afterVisibleChange(visible);
      },
      setOnKeyDownListener: () => {
        if (window) {
          window.addEventListener('keydown', this.handleKeyDown);
        }
      },
      removeKeyDownListener: () => {
        if (window) {
          window.removeEventListener('keydown', this.handleKeyDown);
        }
      },
      toggleHidden: hidden => {
        if (hidden !== this.state.hidden) {
          this.setState({
            hidden
          });
        }
      }
    });
  }

  static getDerivedStateFromProps(props, prevState) {
    const newState = {};

    if (props.visible && prevState.hidden) {
      newState.hidden = false;
    }

    if (!props.visible && !props.motion && !prevState.hidden) {
      newState.hidden = true;
    }

    return newState;
  }

  componentDidMount() {
    if (this.props.visible) {
      this.foundation.beforeShow();
      this._active = this._active || this.props.visible;
    }
  }

  componentDidUpdate(prevProps, prevState, snapshot) {
    // hide => show
    if (!prevProps.visible && this.props.visible) {
      this.foundation.beforeShow();
    } // show => hide


    if (prevProps.visible && !this.props.visible) {
      this.foundation.afterHide();
    }
  }

  componentWillUnmount() {
    if (this.props.visible) {
      this.foundation.destroy();
    }
  }

  renderContent() {
    var _context;

    const _a = this.props,
          {
      placement,
      className,
      children,
      width,
      height,
      motion,
      visible,
      style,
      maskStyle,
      size,
      zIndex,
      getPopupContainer,
      keepDOM
    } = _a,
          props = sideSheet_rest(_a, ["placement", "className", "children", "width", "height", "motion", "visible", "style", "maskStyle", "size", "zIndex", "getPopupContainer", "keepDOM"]);

    const {
      direction
    } = this.context;
    const isVertical = placement === 'left' || placement === 'right';
    const isHorizontal = placement === 'top' || placement === 'bottom';
    const sheetWidth = isVertical ? width ? width : defaultWidthList[size] : '100%';
    const sheetHeight = isHorizontal ? height ? height : sideSheet_defaultHeight : '100%';
    const classList = classnames_default()(sideSheet_prefixCls, className, {
      [concat_default()(_context = "".concat(sideSheet_prefixCls, "-")).call(_context, placement)]: placement,
      ["".concat(sideSheet_prefixCls, "-popup")]: getPopupContainer,
      ["".concat(sideSheet_prefixCls, "-horizontal")]: isHorizontal,
      ["".concat(sideSheet_prefixCls, "-rtl")]: direction === 'rtl',
      ["".concat(sideSheet_prefixCls, "-hidden")]: keepDOM && this.state.hidden
    });

    const contentProps = assign_default()(assign_default()({}, props), {
      visible,
      motion: false,
      className: classList,
      width: sheetWidth,
      height: sheetHeight,
      onClose: this.handleCancel
    });

    const mergedMotion = this.foundation.getMergedMotion();
    this._active = this._active || visible;
    const shouldRender = (visible || keepDOM) && this._active;

    if (mergedMotion) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(SideSheetTransition_SideSheetTransition, {
        placement: placement,
        motion: mergedMotion,
        controlled: keepDOM,
        visible: visible
      }, shouldRender ? transitionStyles => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(SideSheetContent_SideSheetContent, assign_default()({}, contentProps, {
        style: assign_default()(assign_default()({}, transitionStyles), style),
        maskStyle: assign_default()({
          opacity: transitionStyles.opacity
        }, maskStyle)
      }), children) : null);
    }

    if (shouldRender) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(SideSheetContent_SideSheetContent, assign_default()({}, contentProps, {
        style: style,
        maskStyle: maskStyle
      }), children);
    }

    return null;
  }

  render() {
    const {
      zIndex,
      getPopupContainer
    } = this.props;
    let wrapperStyle = {
      zIndex
    };

    if (getPopupContainer) {
      wrapperStyle = {
        zIndex,
        position: 'static'
      };
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(_portal, {
      getPopupContainer: getPopupContainer,
      style: wrapperStyle
    }, this.renderContent());
  }

}
sideSheet_SideSheet.contextType = configProvider_context;
sideSheet_SideSheet.propTypes = {
  bodyStyle: prop_types_default.a.object,
  headerStyle: prop_types_default.a.object,
  children: prop_types_default.a.node,
  className: prop_types_default.a.string,
  closable: prop_types_default.a.bool,
  disableScroll: prop_types_default.a.bool,
  getPopupContainer: prop_types_default.a.func,
  height: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  mask: prop_types_default.a.bool,
  maskClosable: prop_types_default.a.bool,
  maskStyle: prop_types_default.a.object,
  motion: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.object, prop_types_default.a.func]),
  onCancel: prop_types_default.a.func,
  placement: prop_types_default.a.oneOf(sideSheet_constants_strings.PLACEMENT),
  size: prop_types_default.a.oneOf(sideSheet_constants_strings.SIZE),
  style: prop_types_default.a.object,
  title: prop_types_default.a.node,
  visible: prop_types_default.a.bool,
  width: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  zIndex: prop_types_default.a.number,
  afterVisibleChange: prop_types_default.a.func,
  closeOnEsc: prop_types_default.a.bool,
  footer: prop_types_default.a.node,
  keepDOM: prop_types_default.a.bool,
  'aria-label': prop_types_default.a.string
};
sideSheet_SideSheet.defaultProps = {
  visible: false,
  motion: true,
  mask: true,
  placement: 'right',
  closable: true,
  footer: null,
  zIndex: 1000,
  maskClosable: true,
  size: 'small',
  disableScroll: true,
  closeOnEsc: false,
  afterVisibleChange: noop_default.a,
  keepDOM: false
};
// CONCATENATED MODULE: ../semi-foundation/slider/constants.ts

const slider_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-slider"),
  DISABLED: "".concat(BASE_CLASS_PREFIX, "-slider-disabled"),
  VERTICAL: "".concat(BASE_CLASS_PREFIX, "-slider-vertical"),
  TRACK: "".concat(BASE_CLASS_PREFIX, "-slider-track"),
  DOTS: "".concat(BASE_CLASS_PREFIX, "-slider-dots"),
  MARKS: "".concat(BASE_CLASS_PREFIX, "-slider-marks"),
  HANDLE: "".concat(BASE_CLASS_PREFIX, "-slider-handle")
};
const slider_constants_strings = {
  SIZE: ['small', 'large', 'default'],
  POSITION: ['top', 'bottom'],
  OPTIONS: ['children', 'option']
};

// CONCATENATED MODULE: ../semi-foundation/utils/touchPolyfill.ts




const touchEventPolyfill = (touch, touchEvent) => {
  /* Touch is the first point of multi-touch. In order to minimize the change of slider code to support touch,
  some methods that will be used on touchEvent are mounted on the multi-touch Touch object.*/
  // polyfill for firefox
  if (!global_this_default.a.Touch || !(touch instanceof Touch)) {
    return touch;
  }

  const keysNeedPolyfill = ['stopPropagation', 'preventDefault'];

  for_each_default()(keysNeedPolyfill).call(keysNeedPolyfill, key => {
    let value = touchEvent[key];

    if (value) {
      if (typeof value === 'function') {
        // bind 'this' for function of touchEvent running in Touch Point Object
        value = function () {
          return touchEvent[key](...arguments);
        };
      }

      if (touch[key]) {
        Object(warning["a" /* default */])(true, "\"The key ".concat(key, "\" exist in Touch."));
      } else {
        touch[key] = value;
      }
    }
  });

  return touch;
};

/* harmony default export */ var touchPolyfill = (touchEventPolyfill);
// CONCATENATED MODULE: ../semi-foundation/slider/foundation.ts




/* eslint-disable no-param-reassign */

/* eslint-disable max-len */

/* eslint-disable no-nested-ternary */




class foundation_SliderFoundation extends foundation {
  constructor(adapter) {
    var _this;

    super(assign_default()(assign_default()({}, foundation_SliderFoundation.defaultAdapter), adapter));
    _this = this;

    /**
     * Calculate the percentage corresponding to the current value for style calculation
     * @{}
     *
     * @memberof SliderFoundation
     */
    this.getMinAndMaxPercent = value => {
      // debugger
      const {
        range,
        min,
        max
      } = this._adapter.getProps();

      const minPercent = range ? (value[0] - min) / (max - min) : (value - min) / (max - min);
      const maxPercent = range ? (value[1] - min) / (max - min) : 1;
      return {
        min: this._checkValidity(minPercent),
        max: this._checkValidity(maxPercent)
      };
    };
    /**
     * Check if value is out of range
     * @memberof SliderFoundation
     */


    this._checkValidity = function (value) {
      let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      const checked = value > max ? max : value < min ? min : value;
      return checked;
    };
    /**
     * When render handle, the display and content of the tooltip are calculated according to the conditions
     * @visible:  props passed in by the component
     * @formatter: tooltip content formatting function
     * @memberof SliderFoundation
     */


    this.computeHandleVisibleVal = (visible, formatter, range) => {
      // debugger;
      const {
        focusPos,
        currentValue
      } = this._adapter.getStates();

      const tipVisible = {
        min: false,
        max: false
      };
      let tipChildren;

      if (formatter) {
        tipChildren = {
          min: range ? formatter(this.outPutValue(currentValue[0])) : formatter(this.outPutValue(currentValue)),
          max: range ? formatter(this.outPutValue(currentValue[1])) : null
        };
      } else {
        tipChildren = {
          min: range ? this.outPutValue(currentValue[0]) : this.outPutValue(currentValue),
          max: range ? this.outPutValue(currentValue[1]) : null
        };
      }

      if (visible) {
        tipVisible.min = true;
        tipVisible.max = true;
      } else if (typeof visible === 'undefined' && formatter) {
        if (focusPos === 'min') {
          tipVisible.min = true;
        } else if (focusPos === 'max') {
          tipVisible.max = true;
        }
      }

      const result = {
        tipVisible,
        tipChildren
      };
      return result;
    };
    /**
     * Calculate whether the value passed in is valid
     *
     * @memberof SliderFoundation
     */


    this.valueFormatIsCorrect = value => {
      if (is_array_default()(value)) {
        return typeof value[0] === 'number' && typeof value[0] === 'number';
      } else {
        return typeof value === 'number';
      }
    };
    /**
     * Fix the mouse position to position the parent container relative to the position
     *
     * @memberof SliderFoundation
     */


    this.handleMousePos = (pageX, pageY) => {
      const parentRect = this._adapter.getParentRect();

      const scrollParent = this._adapter.getScrollParentVal();

      const parentX = parentRect ? parentRect.left : 0;
      const parentY = parentRect ? parentRect.top : 0;
      return {
        x: pageX - parentX + scrollParent.scrollLeft,
        y: pageY - parentY + scrollParent.scrollTop
      };
    };
    /**
     * Provides the nearest scrollable parent node of the current node, which is used to calculate the scrollTop and scrollLeft attributes
     *
     * @memberof SliderFoundation
     */


    this.getScrollParent = element => {
      // TODO: move window document out of foundation.
      const el = element;
      const regex = /(auto|scroll)/;

      const style = (node, prop) => window.getComputedStyle(node, null).getPropertyValue(prop);

      const scroll = node => regex.test(style(node, 'overflow') + style(node, 'overflow-y') + style(node, 'overflow-x'));

      const scrollParent = node => !node || node === document.body || !(node instanceof Element) ? document.body : scroll(node) ? node : scrollParent(node.parentNode);

      return scrollParent(el);
    };
    /**
     * Fixed the event location, beyond the maximum, minimum, left and right, etc. directly modified to the effective location
     *
     * @memberof SliderFoundation
     */


    this.checkMeetMinMax = position => {
      // Returns the length of the distance to the left
      const {
        vertical,
        verticalReverse,
        range
      } = this._adapter.getProps();

      const value = this._adapter.getState('currentValue');

      const currentPos = this.transValueToPos(value);

      const {
        sliderX,
        sliderY,
        sliderWidth,
        sliderHeight
      } = this._adapter.getSliderLengths();

      const {
        chooseMovePos,
        isDrag
      } = this._adapter.getStates();

      const len = vertical ? sliderHeight : sliderWidth;
      let startPos;

      if (vertical && verticalReverse) {
        startPos = sliderY + len;
      } else {
        startPos = vertical ? sliderY : sliderX;
      }

      startPos = chooseMovePos === 'max' && isDrag ? currentPos[0] : startPos; // eslint-disable-next-line one-var

      let endPos;

      if (vertical && verticalReverse) {
        endPos = sliderY;
      } else {
        endPos = vertical ? sliderY + sliderHeight : sliderX + sliderWidth;
      }

      endPos = chooseMovePos === 'min' && isDrag && range ? currentPos[1] : endPos;

      if (vertical && verticalReverse) {
        if (position >= startPos) {
          position = startPos;
        } else if (position <= endPos) {
          position = endPos;
        }
      } else {
        if (position <= startPos) {
          position = startPos;
        } else if (position >= endPos) {
          position = endPos;
        }
      }

      return position;
    };
    /**
     * Converting location information to value requires processing if step is not 1 (invalid move returns false)
     *
     * @memberof SliderFoundation
     */


    this.transPosToValue = (mousePos, isMin) => {
      const pos = this.checkMeetMinMax(mousePos);

      const {
        min,
        max,
        currentValue
      } = this._adapter.getStates();

      const {
        range,
        vertical,
        step,
        verticalReverse
      } = this._adapter.getProps();

      const {
        sliderX,
        sliderY,
        sliderWidth,
        sliderHeight
      } = this._adapter.getSliderLengths();

      const startPos = vertical ? sliderY : sliderX;
      const len = vertical ? sliderHeight : sliderWidth;
      let stepValue;

      if (vertical && verticalReverse) {
        isMin = !isMin;
        stepValue = (startPos + len - pos) / len * (max - min) + min;
      } else {
        stepValue = (pos - startPos) / len * (max - min) + min;
      } // debugger
      // eslint-disable-next-line one-var


      let compareValue;

      if (range) {
        compareValue = isMin ? currentValue[0] : currentValue[1];
      } else {
        compareValue = currentValue;
      }

      if (step !== 1) {
        // Find nearest step point
        stepValue = Math.round(stepValue / step) * step;
      }

      if (range && stepValue !== compareValue) {
        if (vertical && verticalReverse) {
          return isMin ? [currentValue[0], stepValue] : [stepValue, currentValue[1]];
        } else {
          return isMin ? [stepValue, currentValue[1]] : [currentValue[0], stepValue];
        }
      } else if (!range && stepValue !== compareValue) {
        return stepValue;
      } else {
        return false;
      }
    };
    /**
     * Convert value values into location information
     *
     * @memberof SliderFoundation
     */


    this.transValueToPos = value => {
      const {
        min,
        max
      } = this._adapter.getStates();

      const {
        vertical,
        range,
        verticalReverse
      } = this._adapter.getProps();

      const {
        sliderX,
        sliderY,
        sliderWidth,
        sliderHeight
      } = this._adapter.getSliderLengths();

      const startPos = vertical ? sliderY : sliderX;
      const len = vertical ? sliderHeight : sliderWidth;

      if (range) {
        if (vertical && verticalReverse) {
          return [startPos + len - (value[0] - min) * len / (max - min), startPos + len - (value[1] - min) * len / (max - min)];
        } else {
          return [(value[0] - min) * len / (max - min) + startPos, (value[1] - min) * len / (max - min) + startPos];
        }
      } else {
        return (value - min) * len / (max - min) + startPos;
      }
    };
    /**
     * Determine whether the mark should be highlighted: valid interval and include = false
     *
     * @memberof SliderFoundation
     */


    this.isMarkActive = mark => {
      const {
        min,
        max,
        range,
        included
      } = this._adapter.getProps();

      const currentValue = this._adapter.getState('currentValue');

      if (typeof (mark / 1) === 'number' && mark >= min && mark <= max) {
        if (range) {
          return (mark > currentValue[1] || mark < currentValue[0]) && included ? 'unActive' : 'active';
        } else {
          return mark <= currentValue && included ? 'active' : 'unActive';
        }
      } else {
        return false;
      }
    };
    /**
     * onchange output conversion, default rounding without decimal, step less than 1 has decimal
     *
     * @memberof SliderFoundation
     */


    this.outPutValue = inputValue => {
      const step = this._adapter.getProp('step');

      let transWay = Math.round;

      if (step < 1 && step >= 0.1) {
        transWay = value => Math.round(value * 10) / 10;
      } else if (step < 0.1 && step >= 0.01) {
        transWay = value => Math.round(value * 100) / 100;
      } else if (step < 0.01 && step >= 0.001) {
        transWay = value => Math.round(value * 1000) / 1000;
      }

      if (is_array_default()(inputValue)) {
        return [transWay(inputValue[0]), transWay(inputValue[1])];
      } else {
        return transWay(inputValue);
      }
    };

    this.handleDisabledChange = disabled => {
      this._adapter.updateDisabled(disabled);
    };

    this.checkAndUpdateIsInRenderTreeState = () => this._adapter.checkAndUpdateIsInRenderTreeState();

    this.calculateOutputValue = (position, isMin) => {
      const moveValue = this.transPosToValue(position, isMin);

      if (moveValue === false) {
        return undefined;
      }

      return this.outPutValue(moveValue);
    };
    /**
     *
     *
     * @memberof SliderFoundation
     */


    this.handleValueChange = (prevValue, nextValue) => {
      const {
        min,
        max
      } = this._adapter.getStates();

      let resultState = null;
      const disableState = {};

      if (this.valueFormatIsCorrect(nextValue)) {
        if (is_array_default()(prevValue) && is_array_default()(nextValue)) {
          nextValue = [nextValue[0] < min ? min : nextValue[0], nextValue[1] > max ? max : nextValue[1] // Math.round(nextValue[1])
          ]; // this._adapter.notifyChange(this.outPutValue(nextValue));

          resultState = assign_default()(disableState, {
            currentValue: nextValue
          });
        }

        if (typeof prevValue === 'number' && typeof nextValue === 'number') {
          if (nextValue > max) {
            nextValue = max;
          } else {
            nextValue = nextValue < min ? min : nextValue; // Math.round(nextValue);
          } // this._adapter.notifyChange(this.outPutValue(nextValue));


          resultState = assign_default()(disableState, {
            currentValue: nextValue
          });
        }
      } else {
        resultState = disableState;
      }

      if (resultState) {
        this._adapter.transNewPropsToState(resultState);
      }
    };

    this.onHandleDown = (e, handler) => {
      this._adapter.onHandleDown(e);

      const disabled = this._adapter.getState('disabled');

      const {
        vertical
      } = this._adapter.getProps();

      const {
        dragging
      } = this._adapter.getOverallVars();

      if (disabled) {
        return false;
      }

      this._adapter.setStateVal('isDrag', true);

      this._adapter.setStateVal('chooseMovePos', handler);

      if (handler === 'min') {
        this._adapter.setDragging([true, dragging[1]]);
      } else {
        this._adapter.setDragging([dragging[0], true]);
      }

      const mousePos = this.handleMousePos(e.pageX, e.pageY);
      let pos = vertical ? mousePos.y : mousePos.x;

      if (!this._adapter.isEventFromHandle(e)) {
        this._dragOffset = 0;
      } else {
        const handlePosition = this._getHandleCenterPosition(vertical, e.target);

        this._dragOffset = vertical ? pos - handlePosition : pos - handlePosition;
        pos = handlePosition;
      }

      return true;
    };

    this.onHandleMove = e => {
      this._adapter.setEventDefault(e);

      const {
        disabled,
        chooseMovePos
      } = this._adapter.getStates();

      const {
        vertical
      } = this._adapter.getProps();

      const {
        dragging
      } = this._adapter.getOverallVars();

      if (disabled) {
        return false;
      }

      this.onHandleEnter(chooseMovePos);
      const mousePos = this.handleMousePos(e.pageX, e.pageY);
      let pagePos = vertical ? mousePos.y : mousePos.x;
      pagePos = pagePos - this._dragOffset;

      if (chooseMovePos === 'min' && dragging[0] || chooseMovePos === 'max' && dragging[1]) {
        const outPutValue = this.calculateOutputValue(pagePos, chooseMovePos === 'min');

        if (outPutValue === undefined) {
          return false;
        }

        this._adapter.notifyChange(outPutValue); // allow drag for controlled component, so no _isControlledComponent check


        this._adapter.onHandleMove(pagePos, chooseMovePos === 'min', undefined, false, outPutValue);
      }

      return true;
    }; // run when user touch left or right handle.


    this.onHandleTouchStart = (e, handler) => {
      const handleMinDom = this._adapter.getMinHandleEl().current;

      const handleMaxDom = this._adapter.getMaxHandleEl().current;

      if (e.target === handleMinDom || e.target === handleMaxDom) {
        handlePrevent(e);
        const touch = touchPolyfill(e.touches[0], e);
        this.onHandleDown(touch, handler);
      }
    };

    this.onHandleTouchMove = e => {
      const handleMinDom = this._adapter.getMinHandleEl().current;

      const handleMaxDom = this._adapter.getMaxHandleEl().current;

      if (e.target === handleMinDom || e.target === handleMaxDom) {
        const touch = touchPolyfill(e.touches[0], e);
        this.onHandleMove(touch);
      }
    };

    this.onHandleEnter = pos => {
      // debugger;
      // this._adapter.setEventDefault(e);
      const {
        disabled,
        focusPos
      } = this._adapter.getStates();

      if (!disabled) {
        if (!focusPos && pos !== focusPos) {
          this._adapter.onHandleEnter(pos);
        }
      }
    };

    this.onHandleLeave = () => {
      // this._adapter.setEventDefault(e);
      const disabled = this._adapter.getState('disabled');

      if (!disabled) {
        this._adapter.onHandleLeave();
      }
    };

    this.onHandleUp = e => {
      this._adapter.onHandleUpBefore(e); // const value = this._adapter.getProp('value');


      const {
        disabled,
        chooseMovePos
      } = this._adapter.getStates();

      const {
        dragging
      } = this._adapter.getOverallVars();

      if (disabled) {
        return false;
      }

      if (chooseMovePos === 'min') {
        this._adapter.setDragging([false, dragging[1]]);
      } else {
        this._adapter.setDragging([dragging[0], false]);
      }

      this._adapter.setStateVal('isDrag', false);

      this._adapter.onHandleLeave();

      this._adapter.onHandleUpAfter();

      return true;
    };

    this._handleValueDecreaseWithKeyBoard = (step, handler) => {
      const {
        min,
        currentValue
      } = this.getStates();
      const {
        range
      } = this.getProps();

      if (handler === 'min') {
        if (range) {
          let newMinValue = currentValue[0] - step;
          newMinValue = newMinValue < min ? min : newMinValue;
          return [newMinValue, currentValue[1]];
        } else {
          let newMinValue = currentValue - step;
          newMinValue = newMinValue < min ? min : newMinValue;
          return newMinValue;
        }
      } else {
        let newMaxValue = currentValue[1] - step;
        newMaxValue = newMaxValue < currentValue[0] ? currentValue[0] : newMaxValue;
        return [currentValue[0], newMaxValue];
      }
    };

    this._handleValueIncreaseWithKeyBoard = (step, handler) => {
      const {
        max,
        currentValue
      } = this.getStates();
      const {
        range
      } = this.getProps();

      if (handler === 'min') {
        if (range) {
          let newMinValue = currentValue[0] + step;
          newMinValue = newMinValue > currentValue[1] ? currentValue[1] : newMinValue;
          return [newMinValue, currentValue[1]];
        } else {
          let newMinValue = currentValue + step;
          newMinValue = newMinValue > max ? max : newMinValue;
          return newMinValue;
        }
      } else {
        let newMaxValue = currentValue[1] + step;
        newMaxValue = newMaxValue > max ? max : newMaxValue;
        return [currentValue[0], newMaxValue];
      }
    };

    this._handleHomeKey = handler => {
      const {
        min,
        currentValue
      } = this.getStates();
      const {
        range
      } = this.getProps();

      if (handler === 'min') {
        if (range) {
          return [min, currentValue[1]];
        } else {
          return min;
        }
      } else {
        return [currentValue[0], currentValue[0]];
      }
    };

    this._handleEndKey = handler => {
      const {
        max,
        currentValue
      } = this.getStates();
      const {
        range
      } = this.getProps();

      if (handler === 'min') {
        if (range) {
          return [currentValue[1], currentValue[1]];
        } else {
          return max;
        }
      } else {
        return [currentValue[0], max];
      }
    };

    this.handleKeyDown = (event, handler) => {
      var _context;

      const {
        min,
        max,
        currentValue
      } = this.getStates();
      const {
        step,
        range
      } = this.getProps();
      let outputValue;

      switch (event.key) {
        case "ArrowLeft":
        case "ArrowDown":
          outputValue = this._handleValueDecreaseWithKeyBoard(step, handler);
          break;

        case "ArrowRight":
        case "ArrowUp":
          outputValue = this._handleValueIncreaseWithKeyBoard(step, handler);
          break;

        case "PageUp":
          outputValue = this._handleValueIncreaseWithKeyBoard(10 * step, handler);
          break;

        case "PageDown":
          outputValue = this._handleValueDecreaseWithKeyBoard(10 * step, handler);
          break;

        case "Home":
          outputValue = this._handleHomeKey(handler);
          break;

        case "End":
          outputValue = this._handleEndKey(handler);
          break;

        case 'default':
          break;
      }

      if (includes_default()(_context = ["ArrowLeft", "ArrowDown", "ArrowRight", "ArrowUp", "PageUp", "PageDown", "Home", "End"]).call(_context, event.key)) {
        let update = true;

        if (is_array_default()(currentValue)) {
          update = !(currentValue[0] === outputValue[0] && currentValue[1] === outputValue[1]);
        } else {
          update = currentValue !== outputValue;
        }

        if (update) {
          this._adapter.updateCurrentValue(outputValue);

          this._adapter.notifyChange(outputValue);
        }

        handlePrevent(event);
      }
    }; // eslint-disable-next-line @typescript-eslint/no-empty-function


    this.onFocus = (e, handler) => {
      handlePrevent(e);
      const {
        target
      } = e;

      try {
        if (target.matches(':focus-visible')) {
          if (handler === 'min') {
            this._adapter.setStateVal('firstDotFocusVisible', true);
          } else {
            this._adapter.setStateVal('secondDotFocusVisible', true);
          }
        }
      } catch (error) {
        Object(warning["a" /* default */])(true, 'Warning: [Semi Slider] The current browser does not support the focus-visible');
      }
    };

    this.onBlur = (e, handler) => {
      const {
        firstDotFocusVisible,
        secondDotFocusVisible
      } = this.getStates();

      if (handler === 'min') {
        firstDotFocusVisible && this._adapter.setStateVal('firstDotFocusVisible', false);
      } else {
        secondDotFocusVisible && this._adapter.setStateVal('secondDotFocusVisible', false);
      }
    };

    this.handleWrapClick = e => {
      const {
        disabled,
        isDrag
      } = this._adapter.getStates();

      if (isDrag || disabled || this._adapter.isEventFromHandle(e)) {
        return;
      }

      const {
        vertical
      } = this.getProps();
      const mousePos = this.handleMousePos(e.pageX, e.pageY);
      const position = vertical ? mousePos.y : mousePos.x;
      const isMin = this.checkWhichHandle(position);
      const outPutValue = this.calculateOutputValue(position, isMin);

      if (outPutValue === undefined) {
        return;
      }

      this._adapter.notifyChange(outPutValue); // check if is controlled component


      if (this._isControlledComponent()) {
        // only perform callback ops, skip UI update
        return;
      } // trigger UI state update


      this.setHandlePos(position, isMin, true, outPutValue);
    };
    /**
     * Move the slider to the current click position
     *
     * @memberof SliderFoundation
     */


    this.setHandlePos = function (position, isMin) {
      let clickTrack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      let outPutValue = arguments.length > 3 ? arguments[3] : undefined;

      _this._adapter.onHandleMove(position, isMin, () => _this._adapter.onHandleUpAfter(), clickTrack, outPutValue);
    };
    /**
     * Determine which slider should be moved currently
     *
     * @memberof SliderFoundation
     */


    this.checkWhichHandle = pagePos => {
      const {
        vertical,
        verticalReverse
      } = this.getProps();

      const {
        currentValue
      } = this._adapter.getStates();

      const currentPos = this.transValueToPos(currentValue);
      let isMin = true;

      if (is_array_default()(currentPos)) {
        // Slide on both sides
        if (pagePos > currentPos[1] || Math.abs(pagePos - currentPos[0]) > Math.abs(pagePos - currentPos[1])) {
          isMin = false;
        }
      }

      if (vertical && verticalReverse) {
        isMin = !isMin;
      }

      return isMin;
    };

    this.handleWrapperEnter = () => {
      this._adapter.setStateVal('showBoundary', true);
    };

    this.handleWrapperLeave = () => {
      this._adapter.setStateVal('showBoundary', false);
    };
  }

  init() {
    this._checkCurrentValue();

    this._dragOffset = 0;
  }

  _checkCurrentValue() {
    const {
      currentValue,
      min,
      max
    } = this.getStates();
    let checked;

    if (is_array_default()(currentValue)) {
      checked = [];
      checked[0] = this._checkValidity(currentValue[0], min, max);
      checked[1] = this._checkValidity(currentValue[1], min, max);
    } else {
      checked = this._checkValidity(currentValue, min, max);
    }

    this._adapter.updateCurrentValue(checked);
  }
  /**
   * Untie event
   * @memberof SliderFoundation
   */


  destroy() {
    // debugger
    this._adapter.unSubscribeEventListener();
  }

  _getHandleCenterPosition(vertical, handle) {
    const pos = handle.getBoundingClientRect();
    const {
      x,
      y
    } = this.handleMousePos(pos.left + pos.width * 0.5, pos.top + pos.height * 0.5);
    return vertical ? y : x;
  }

}
// EXTERNAL MODULE: ../semi-foundation/slider/slider.scss
var slider_slider = __webpack_require__("2HTi");

// CONCATENATED MODULE: ./slider/index.tsx











/* eslint-disable max-lines-per-function */

/* eslint-disable react/no-find-dom-node */









const slider_prefixCls = slider_constants_cssClasses.PREFIX;


function domIsInRenderTree(e) {
  if (!e) {
    return false;
  }

  return Boolean(e.offsetWidth || e.offsetHeight || e.getClientRects().length);
}

class slider_Slider extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.renderHandle = () => {
      const {
        vertical,
        range,
        tooltipVisible,
        tipFormatter,
        'aria-label': ariaLabel,
        'aria-labelledby': ariaLabelledby,
        'aria-valuetext': ariaValueText,
        getAriaValueText,
        disabled
      } = this.props;
      const {
        chooseMovePos,
        isDrag,
        isInRenderTree,
        firstDotFocusVisible,
        secondDotFocusVisible
      } = this.state;
      const stylePos = vertical ? 'top' : 'left';
      const percentInfo = this.foundation.getMinAndMaxPercent(this.state.currentValue);
      const minPercent = percentInfo.min;
      const maxPercent = percentInfo.max;
      const {
        tipVisible,
        tipChildren
      } = this.foundation.computeHandleVisibleVal(tooltipVisible && isInRenderTree, tipFormatter, range);
      const transform = {
        top: 'translateY(-50%)',
        left: 'translateX(-50%)'
      };
      const minClass = classnames_default()(slider_constants_cssClasses.HANDLE, {
        ["".concat(slider_constants_cssClasses.HANDLE, "-clicked")]: chooseMovePos === 'min' && isDrag
      });
      const maxClass = classnames_default()(slider_constants_cssClasses.HANDLE, {
        ["".concat(slider_constants_cssClasses.HANDLE, "-clicked")]: chooseMovePos === 'max' && isDrag
      });
      const {
        min,
        max,
        currentValue
      } = this.state;
      const commonAria = {
        'aria-label': ariaLabel !== null && ariaLabel !== void 0 ? ariaLabel : disabled ? 'Disabled Slider' : undefined,
        'aria-labelledby': ariaLabelledby,
        'aria-disabled': disabled
      };
      vertical && assign_default()(commonAria, {
        'aria-orientation': 'vertical'
      });
      const handleContents = !range ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tooltip_Tooltip, {
        content: tipChildren.min,
        position: "top",
        trigger: "custom",
        rePosKey: minPercent,
        visible: isInRenderTree && (tipVisible.min || firstDotFocusVisible),
        className: "".concat(slider_constants_cssClasses.HANDLE, "-tooltip")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", assign_default()({
        onMouseOver: this.foundation.checkAndUpdateIsInRenderTreeState,
        ref: this.minHanleEl,
        className: minClass,
        style: {
          [stylePos]: "".concat(minPercent * 100, "%"),
          zIndex: chooseMovePos === 'min' && isDrag ? 2 : 1,
          transform: transform[stylePos]
        },
        onMouseDown: e => {
          this.foundation.onHandleDown(e, 'min');
        },
        onMouseEnter: () => {
          this.foundation.onHandleEnter('min');
        },
        onTouchStart: e => {
          this.foundation.onHandleTouchStart(e, 'min');
        },
        onMouseLeave: () => {
          this.foundation.onHandleLeave();
        },
        onMouseUp: e => {
          this.foundation.onHandleUp(e);
        },
        onKeyUp: e => {
          this.foundation.onHandleUp(e);
        },
        onTouchEnd: e => {
          this.foundation.onHandleUp(e);
        },
        onKeyDown: e => {
          this.foundation.handleKeyDown(e, 'min');
        },
        onFocus: e => {
          this.foundation.onFocus(e, 'min');
        },
        onBlur: e => {
          this.foundation.onBlur(e, 'min');
        },
        role: "slider",
        "aria-valuetext": getAriaValueText ? getAriaValueText(currentValue, 0) : ariaValueText,
        tabIndex: disabled ? -1 : 0
      }, commonAria, {
        "aria-valuenow": currentValue,
        "aria-valuemax": max,
        "aria-valuemin": min
      }))) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tooltip_Tooltip, {
        content: tipChildren.min,
        position: "top",
        trigger: "custom",
        rePosKey: minPercent,
        visible: isInRenderTree && (tipVisible.min || firstDotFocusVisible),
        className: "".concat(slider_constants_cssClasses.HANDLE, "-tooltip")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", assign_default()({
        ref: this.minHanleEl,
        className: minClass,
        style: {
          [stylePos]: "".concat(minPercent * 100, "%"),
          zIndex: chooseMovePos === 'min' ? 2 : 1,
          transform: transform[stylePos]
        },
        onMouseDown: e => {
          this.foundation.onHandleDown(e, 'min');
        },
        onMouseEnter: () => {
          this.foundation.onHandleEnter('min');
        },
        onTouchStart: e => {
          this.foundation.onHandleTouchStart(e, 'min');
        },
        onMouseLeave: () => {
          this.foundation.onHandleLeave();
        },
        onMouseUp: e => {
          this.foundation.onHandleUp(e);
        },
        onKeyUp: e => {
          this.foundation.onHandleUp(e);
        },
        onTouchEnd: e => {
          this.foundation.onHandleUp(e);
        },
        onKeyDown: e => {
          this.foundation.handleKeyDown(e, 'min');
        },
        onFocus: e => {
          this.foundation.onFocus(e, 'min');
        },
        onBlur: e => {
          this.foundation.onBlur(e, 'min');
        },
        role: "slider",
        tabIndex: disabled ? -1 : 0
      }, commonAria, {
        "aria-valuetext": getAriaValueText ? getAriaValueText(currentValue[0], 0) : ariaValueText,
        "aria-valuenow": currentValue[0],
        "aria-valuemax": currentValue[1],
        "aria-valuemin": min
      }))), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tooltip_Tooltip, {
        content: tipChildren.max,
        position: "top",
        trigger: "custom",
        rePosKey: maxPercent,
        visible: isInRenderTree && (tipVisible.max || secondDotFocusVisible),
        className: "".concat(slider_constants_cssClasses.HANDLE, "-tooltip")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", assign_default()({
        ref: this.maxHanleEl,
        className: maxClass,
        style: {
          [stylePos]: "".concat(maxPercent * 100, "%"),
          zIndex: chooseMovePos === 'max' ? 2 : 1,
          transform: transform[stylePos]
        },
        onMouseDown: e => {
          this.foundation.onHandleDown(e, 'max');
        },
        onMouseEnter: () => {
          this.foundation.onHandleEnter('max');
        },
        onMouseLeave: () => {
          this.foundation.onHandleLeave();
        },
        onMouseUp: e => {
          this.foundation.onHandleUp(e);
        },
        onKeyUp: e => {
          this.foundation.onHandleUp(e);
        },
        onTouchStart: e => {
          this.foundation.onHandleTouchStart(e, 'max');
        },
        onTouchEnd: e => {
          this.foundation.onHandleUp(e);
        },
        onKeyDown: e => {
          this.foundation.handleKeyDown(e, 'max');
        },
        onFocus: e => {
          this.foundation.onFocus(e, 'max');
        },
        onBlur: e => {
          this.foundation.onBlur(e, 'max');
        },
        role: "slider",
        tabIndex: disabled ? -1 : 0
      }, commonAria, {
        "aria-valuetext": getAriaValueText ? getAriaValueText(currentValue[1], 1) : ariaValueText,
        "aria-valuenow": currentValue[1],
        "aria-valuemax": max,
        "aria-valuemin": currentValue[0]
      }))));
      return handleContents;
    };

    this.renderTrack = () => {
      const {
        range,
        included,
        vertical
      } = this.props;
      const percentInfo = this.foundation.getMinAndMaxPercent(this.state.currentValue);
      const minPercent = percentInfo.min;
      const maxPercent = percentInfo.max;
      let trackStyle = !vertical ? {
        width: range ? "".concat((maxPercent - minPercent) * 100, "%") : "".concat(minPercent * 100, "%"),
        left: range ? "".concat(minPercent * 100, "%") : 0
      } : {
        height: range ? "".concat((maxPercent - minPercent) * 100, "%") : "".concat(minPercent * 100, "%"),
        top: range ? "".concat(minPercent * 100, "%") : 0
      };
      trackStyle = included ? trackStyle : {};
      return (
        /*#__PURE__*/
        // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
        external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          className: slider_constants_cssClasses.TRACK,
          style: trackStyle,
          onClick: this.foundation.handleWrapClick
        })
      );
    };

    this.renderStepDot = () => {
      var _context;

      const {
        min,
        max,
        vertical,
        marks
      } = this.props;
      const stylePos = vertical ? 'top' : 'left';
      const labelContent = marks && keys_default()(marks).length > 0 ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: slider_constants_cssClasses.DOTS
      }, map_default()(_context = keys_default()(marks)).call(_context, mark => {
        const activeResult = this.foundation.isMarkActive(Number(mark));
        const markClass = classnames_default()("".concat(slider_prefixCls, "-dot"), {
          ["".concat(slider_prefixCls, "-dot-active")]: this.foundation.isMarkActive(Number(mark)) === 'active'
        });
        const markPercent = (Number(mark) - min) / (max - min);
        return activeResult ?
        /*#__PURE__*/
        // eslint-disable-next-line jsx-a11y/no-static-element-interactions
        external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
          key: mark,
          onClick: this.foundation.handleWrapClick,
          className: markClass,
          style: {
            [stylePos]: "calc(".concat(markPercent * 100, "% - 2px)")
          }
        }) : null;
      })) : null;
      return labelContent;
    };

    this.renderLabel = () => {
      var _context2;

      const {
        min,
        max,
        vertical,
        marks,
        verticalReverse
      } = this.props;
      const stylePos = vertical ? 'top' : 'left';
      const labelContent = marks && keys_default()(marks).length > 0 ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: slider_constants_cssClasses.MARKS + (vertical && verticalReverse ? '-reverse' : '')
      }, map_default()(_context2 = keys_default()(marks)).call(_context2, mark => {
        var _context3;

        const activeResult = this.foundation.isMarkActive(Number(mark));
        const markPercent = (Number(mark) - min) / (max - min);
        return activeResult ?
        /*#__PURE__*/
        // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
        external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
          key: mark,
          className: classnames_default()(concat_default()(_context3 = "".concat(slider_prefixCls, "-mark")).call(_context3, vertical && verticalReverse ? '-reverse' : '')),
          style: {
            [stylePos]: "".concat(markPercent * 100, "%")
          },
          onClick: this.foundation.handleWrapClick
        }, marks[mark]) : null;
      })) : null;
      return labelContent;
    };

    this._getAriaValueText = (value, index) => {
      const {
        getAriaValueText
      } = this.props;
      return getAriaValueText ? getAriaValueText(value, index) : value;
    };

    let {
      value
    } = this.props;

    if (!value) {
      value = this.props.defaultValue;
    }

    this.state = {
      // eslint-disable-next-line no-nested-ternary
      currentValue: value ? value : this.props.range ? [0, 0] : 0,
      min: this.props.min || 0,
      max: this.props.max || 0,
      focusPos: '',
      onChange: this.props.onChange,
      disabled: this.props.disabled || false,
      chooseMovePos: '',
      isDrag: false,
      clickValue: 0,
      showBoundary: false,
      isInRenderTree: true,
      firstDotFocusVisible: false,
      secondDotFocusVisible: false
    };
    this.sliderEl = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.minHanleEl = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.maxHanleEl = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.dragging = [false, false];
    this.foundation = new foundation_SliderFoundation(this.adapter);
    this.eventListenerSet = new set_default.a();
  }

  get adapter() {
    var _this = this;

    return assign_default()(assign_default()({}, super.adapter), {
      getSliderLengths: () => {
        if (this.sliderEl && this.sliderEl.current) {
          const rect = this.sliderEl.current.getBoundingClientRect();
          const offset = {
            x: this.sliderEl.current.offsetLeft,
            y: this.sliderEl.current.offsetTop
          };
          return {
            sliderX: offset.x,
            sliderY: offset.y,
            sliderWidth: rect.width,
            sliderHeight: rect.height
          };
        }

        return {
          sliderX: 0,
          sliderY: 0,
          sliderWidth: 0,
          sliderHeight: 0
        };
      },
      getParentRect: () => {
        const parentObj = this.sliderEl && this.sliderEl.current && this.sliderEl.current.offsetParent;

        if (!parentObj) {
          return undefined;
        }

        return parentObj.getBoundingClientRect();
      },
      getScrollParentVal: () => {
        const scrollParent = this.foundation.getScrollParent(this.sliderEl.current);
        return {
          scrollTop: scrollParent.scrollTop,
          scrollLeft: scrollParent.scrollLeft
        };
      },
      isEventFromHandle: e => {
        const handles = [this.minHanleEl, this.maxHanleEl];
        let flag = false;

        for_each_default()(handles).call(handles, handle => {
          if (!handle) {
            return;
          }

          const handleInstance = handle && handle.current;
          const handleDom = external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default.a.findDOMNode(handleInstance);

          if (handleDom && handleDom.contains(e.target)) {
            flag = true;
          }
        });

        return flag;
      },
      getOverallVars: () => ({
        dragging: this.dragging
      }),
      updateDisabled: disabled => {
        this.setState({
          disabled
        });
      },

      transNewPropsToState(stateObj) {
        let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop_default.a;
        this.setState(stateObj, callback);
      },

      notifyChange: cbValue => this.props.onChange(cbValue),
      setDragging: value => {
        this.dragging = value;
      },
      updateCurrentValue: value => {
        const {
          currentValue
        } = this.state;

        if (value !== currentValue) {
          this.setState({
            currentValue: value
          });
        }
      },
      setOverallVars: (key, value) => {
        this[key] = value;
      },
      getMinHandleEl: () => this.minHanleEl,
      getMaxHandleEl: () => this.maxHanleEl,
      onHandleDown: e => {
        this._addEventListener(document.body, 'mousemove', this.foundation.onHandleMove, false);

        this._addEventListener(document.body, 'mouseup', this.foundation.onHandleUp, false);

        this._addEventListener(document.body, 'touchmove', this.foundation.onHandleTouchMove, false);
      },
      onHandleMove: function (mousePos, isMin) {
        let stateChangeCallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop_default.a;
        let clickTrack = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        let outPutValue = arguments.length > 4 ? arguments[4] : undefined;

        const sliderDOMIsInRenderTree = _this.foundation.checkAndUpdateIsInRenderTreeState();

        if (!sliderDOMIsInRenderTree) {
          return;
        }

        const {
          value
        } = _this.props;
        let finalOutPutValue = outPutValue;

        if (finalOutPutValue === undefined) {
          const moveValue = _this.foundation.transPosToValue(mousePos, isMin);

          if (moveValue === false) {
            return;
          }

          finalOutPutValue = _this.foundation.outPutValue(moveValue);
        }

        const {
          currentValue
        } = _this.state;

        if (!isEqual_default()(_this.foundation.outPutValue(currentValue), finalOutPutValue)) {
          if (!clickTrack && _this.foundation.valueFormatIsCorrect(value)) {
            // still require afterChangeCallback when click on the track directly, need skip here
            return false;
          }

          _this.setState({
            currentValue: finalOutPutValue
          }, stateChangeCallback);
        }
      },
      setEventDefault: e => {
        e.stopPropagation();
        e.preventDefault();
      },
      setStateVal: (name, val) => {
        this.setState({
          [name]: val
        });
      },
      checkAndUpdateIsInRenderTreeState: () => {
        const sliderDOMIsInRenderTree = domIsInRenderTree(this.sliderEl.current);

        if (sliderDOMIsInRenderTree !== this.state.isInRenderTree) {
          this.setState({
            isInRenderTree: sliderDOMIsInRenderTree
          });
        }

        return sliderDOMIsInRenderTree;
      },
      onHandleEnter: pos => {
        this.setState({
          focusPos: pos
        });
      },
      onHandleLeave: () => {
        this.setState({
          focusPos: ''
        });
      },
      onHandleUpBefore: e => {
        e.stopPropagation();
        e.preventDefault();
        document.body.removeEventListener('mousemove', this.foundation.onHandleMove, false);
        document.body.removeEventListener('mouseup', this.foundation.onHandleUp, false);
      },
      onHandleUpAfter: () => {
        const {
          currentValue
        } = this.state;
        const value = this.foundation.outPutValue(currentValue);
        this.props.onAfterChange(value);
      },
      unSubscribeEventListener: () => {
        var _context4;

        for_each_default()(_context4 = from_default()(this.eventListenerSet)).call(_context4, clear => clear());
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentDidUpdate(prevProps, prevState) {
    const hasPropValueChange = !isEqual_default()(this.props.value, prevProps.value);
    const hasPropDisabledChange = this.props.disabled !== prevProps.disabled;

    if (hasPropDisabledChange) {
      this.foundation.handleDisabledChange(this.props.disabled);
    }

    if (hasPropValueChange) {
      const nextValue = this.props.value;
      const prevValue = this.state.currentValue;
      this.foundation.handleValueChange(prevValue, nextValue);
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  render() {
    var _context5;

    const {
      disabled,
      currentValue,
      min,
      max
    } = this.state;
    const {
      vertical,
      verticalReverse,
      style,
      railStyle,
      range,
      className
    } = this.props;
    const wrapperClass = classnames_default()("".concat(slider_prefixCls, "-wrapper"), {
      ["".concat(slider_prefixCls, "-disabled")]: disabled,
      ["".concat(slider_constants_cssClasses.VERTICAL, "-wrapper")]: vertical,
      ["".concat(slider_prefixCls, "-reverse")]: vertical && verticalReverse
    }, className);
    const boundaryClass = classnames_default()("".concat(slider_prefixCls, "-boundary"), {
      ["".concat(slider_prefixCls, "-boundary-show")]: this.props.showBoundary && this.state.showBoundary
    });
    const sliderCls = classnames_default()({
      ["".concat(slider_prefixCls)]: !vertical,
      [slider_constants_cssClasses.VERTICAL]: vertical
    });
    const ariaLabel = range ? concat_default()(_context5 = "Range: ".concat(this._getAriaValueText(currentValue[0], 0), " to ")).call(_context5, this._getAriaValueText(currentValue[1], 1)) : undefined;
    const slider = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: wrapperClass,
      style: style,
      ref: this.sliderEl,
      "aria-label": ariaLabel,
      onMouseEnter: () => this.foundation.handleWrapperEnter(),
      onMouseLeave: () => this.foundation.handleWrapperLeave()
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(slider_prefixCls, "-rail"),
      onClick: this.foundation.handleWrapClick,
      style: railStyle
    }), this.renderTrack(), this.renderStepDot(), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", null, this.renderHandle()), this.renderLabel(), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: boundaryClass
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(slider_prefixCls, "-boundary-min")
    }, min), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(slider_prefixCls, "-boundary-max")
    }, max)));

    if (!vertical) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: sliderCls
      }, slider);
    }

    return slider;
  }

  _addEventListener(target, eventName, callback) {
    if (target.addEventListener) {
      for (var _len = arguments.length, rests = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        rests[_key - 3] = arguments[_key];
      }

      target.addEventListener(eventName, callback, ...rests);

      const clearSelf = () => {
        target === null || target === void 0 ? void 0 : target.removeEventListener(eventName, callback);

        promise_default.a.resolve().then(() => {
          this.eventListenerSet.delete(clearSelf);
        });
      };

      this.eventListenerSet.add(clearSelf);
      return clearSelf;
    } else {
      return noop_default.a;
    }
  }

}
slider_Slider.propTypes = {
  // allowClear: PropTypes.bool,
  defaultValue: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.array]),
  disabled: prop_types_default.a.bool,
  included: prop_types_default.a.bool,
  marks: prop_types_default.a.object,
  max: prop_types_default.a.number,
  min: prop_types_default.a.number,
  range: prop_types_default.a.bool,
  step: prop_types_default.a.number,
  tipFormatter: prop_types_default.a.func,
  value: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.array]),
  vertical: prop_types_default.a.bool,
  onAfterChange: prop_types_default.a.func,
  onChange: prop_types_default.a.func,
  tooltipVisible: prop_types_default.a.bool,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  showBoundary: prop_types_default.a.bool,
  railStyle: prop_types_default.a.object,
  verticalReverse: prop_types_default.a.bool,
  getAriaValueText: prop_types_default.a.func
};
slider_Slider.defaultProps = {
  // allowClear: false,
  disabled: false,
  included: true,
  max: 100,
  min: 0,
  range: false,
  step: 1,
  tipFormatter: value => value,
  vertical: false,
  showBoundary: false,
  onAfterChange: value => {// console.log(value);
  },
  onChange: value => {// console.log(value);
  },
  verticalReverse: false
};
// CONCATENATED MODULE: ./button/splitButtonGroup.tsx






const splitButtonGroup_prefixCls = button_constants_cssClasses.PREFIX;
class splitButtonGroup_SplitButtonGroup extends baseComponent_BaseComponent {
  render() {
    const {
      children,
      style,
      className
    } = this.props;
    const cls = classnames_default()("".concat(splitButtonGroup_prefixCls, "-split"), className);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: cls,
      style: style,
      role: "group",
      "aria-label": this.props['aria-label']
    }, children);
  }

}
splitButtonGroup_SplitButtonGroup.propTypes = {
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  'aria-label': prop_types_default.a.string
};
// CONCATENATED MODULE: ../semi-foundation/steps/constants.ts

const stepsClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-steps"),
  ITEM: "".concat(BASE_CLASS_PREFIX, "-steps-item")
};

// CONCATENATED MODULE: ./steps/basicStep.tsx







var stepSizeMapIconSize;

(function (stepSizeMapIconSize) {
  stepSizeMapIconSize["small"] = "large";
  stepSizeMapIconSize["default"] = "extra-large";
})(stepSizeMapIconSize || (stepSizeMapIconSize = {}));

const BasicStep = props => {
  var _context;

  const {
    prefixCls,
    className,
    size,
    title,
    description,
    status,
    style,
    active,
    done,
    icon,
    stepNumber,
    onClick,
    onChange,
    onKeyDown
  } = props;

  const renderIcon = () => {
    let inner, progress;

    if ('icon' in props) {
      if ( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(icon)) {
        inner = icon;
      }
    } else if ('status' in props) {
      switch (status) {
        case 'error':
          inner = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconAlertCircle, {
            size: stepSizeMapIconSize[size]
          });
          break;

        case 'wait':
          inner = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
            className: "".concat(prefixCls, "-number-icon")
          }, stepNumber);
          break;

        case 'process':
          inner = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
            className: "".concat(prefixCls, "-number-icon")
          }, stepNumber);
          progress = true;
          break;

        case 'finish':
          inner = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconTickCircle, {
            size: stepSizeMapIconSize[size]
          });
          break;

        case 'warning':
          inner = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconAlertTriangle, {
            size: stepSizeMapIconSize[size]
          });
          break;

        default:
          inner = null;
          break;
      }
    }

    const cls = classnames_default()({
      ["".concat(prefixCls, "-icon")]: true,
      ["".concat(prefixCls, "-custom-icon")]: 'icon' in props,
      ["".concat(prefixCls, "-icon-process")]: progress
    });
    return inner ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: cls
    }, inner) : null;
  };

  const classString = classnames_default()(prefixCls, concat_default()(_context = "".concat(prefixCls, "-")).call(_context, status), {
    ["".concat(prefixCls, "-active")]: active,
    ["".concat(prefixCls, "-done")]: done
  }, className);

  const handleClick = e => {
    if (isFunction_default()(onClick)) {
      onClick(e);
    }

    onChange();
  };

  const handleKeyDown = e => {
    if (e.key === 'Enter') {
      if (isFunction_default()(onKeyDown)) {
        onKeyDown(e);
      }

      onChange();
    }
  };

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    role: props["role"],
    "aria-label": props["aria-label"],
    tabIndex: 0,
    "aria-current": "step",
    className: classString,
    style: style,
    onClick: e => handleClick(e),
    onKeyDown: handleKeyDown
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: "".concat(prefixCls, "-container")
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: "".concat(prefixCls, "-left")
  }, renderIcon()), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: "".concat(prefixCls, "-content")
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: "".concat(prefixCls, "-title")
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: "".concat(prefixCls, "-title-text")
  }, title)), description && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: "".concat(prefixCls, "-description")
  }, description))));
};

BasicStep.propTypes = {
  prefixCls: prop_types_default.a.string,
  description: prop_types_default.a.node,
  icon: prop_types_default.a.node,
  status: prop_types_default.a.oneOf(['wait', 'process', 'finish', 'error', 'warning']),
  title: prop_types_default.a.node,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  onClick: prop_types_default.a.func,
  active: prop_types_default.a.bool,
  done: prop_types_default.a.bool
};
BasicStep.defaultProps = {
  prefixCls: stepsClasses.ITEM,
  active: false,
  done: false,
  status: 'wait',
  className: ''
};
/* harmony default export */ var basicStep = (BasicStep);
// CONCATENATED MODULE: ./steps/fillStep.tsx








const FillStep = props => {
  var _context;

  const {
    prefixCls,
    className,
    title,
    description,
    status,
    style,
    onClick,
    icon,
    onChange,
    stepNumber,
    onKeyDown
  } = props;

  const renderIcon = () => {
    let inner, progress;

    if ('icon' in props) {
      inner = icon;
    } else if ('status' in props) {
      switch (status) {
        case 'error':
          inner = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconAlertCircle, {
            size: "extra-large"
          });
          break;

        case 'wait':
          inner = stepNumber;
          break;

        case 'process':
          inner = stepNumber;
          progress = true;
          break;

        case 'finish':
          inner = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconTickCircle, {
            size: "extra-large"
          });
          break;

        case 'warning':
          inner = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconAlertTriangle, {
            size: "extra-large"
          });
          break;

        default:
          inner = null;
          break;
      }
    }

    const cls = classnames_default()({
      ["".concat(prefixCls, "-left")]: true,
      ["".concat(prefixCls, "-icon")]: 'icon' in props,
      ["".concat(prefixCls, "-plain")]: !('icon' in props),
      ["".concat(prefixCls, "-icon-process")]: progress
    });
    return inner ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: cls
    }, inner) : null;
  };

  const handleClick = e => {
    if (isFunction_default()(onClick)) {
      onClick(e);
    }

    onChange();
  };

  const handleKeyDown = e => {
    if (e.key === 'Enter') {
      if (isFunction_default()(onKeyDown)) {
        onKeyDown(e);
      }

      onChange();
    }
  };

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    role: props["role"],
    "aria-label": props["aria-label"],
    "aria-current": "step",
    tabIndex: 0,
    className: classnames_default()({
      [prefixCls]: true,
      [concat_default()(_context = "".concat(prefixCls, "-")).call(_context, status)]: Boolean(status),
      ["".concat(prefixCls, "-clickable")]: onClick
    }, className),
    style: style,
    onClick: e => {
      handleClick(e);
    },
    onKeyDown: handleKeyDown
  }, renderIcon(), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: "".concat(prefixCls, "-content")
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: "".concat(prefixCls, "-title"),
    title: typeof title === 'string' ? title : null
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
    className: "".concat(prefixCls, "-title-text")
  }, title)), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: "".concat(prefixCls, "-description"),
    title: typeof description === 'string' ? description : null
  }, description)));
};

FillStep.propTypes = {
  prefixCls: prop_types_default.a.string,
  description: prop_types_default.a.node,
  icon: prop_types_default.a.node,
  status: prop_types_default.a.oneOf(['wait', 'process', 'finish', 'error', 'warning']),
  title: prop_types_default.a.node,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  onClick: prop_types_default.a.func
};
FillStep.defaultProps = {
  prefixCls: stepsClasses.ITEM,
  status: 'wait',
  className: ''
};
/* harmony default export */ var fillStep = (FillStep);
// CONCATENATED MODULE: ./steps/navStep.tsx







const NavStep = props => {
  const {
    prefixCls,
    className,
    title,
    style,
    active,
    index,
    total,
    onClick,
    onKeyDown,
    onChange
  } = props;
  const classString = classnames_default()(prefixCls, {
    ["".concat(prefixCls, "-active")]: active
  }, className);

  const handleClick = e => {
    if (isFunction_default()(onClick)) {
      onClick(e);
    }

    onChange();
  };

  const handleKeyDown = e => {
    if (e.key === 'Enter') {
      if (isFunction_default()(onKeyDown)) {
        onKeyDown(e);
      }

      onChange();
    }
  };

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    role: props["role"],
    "aria-label": props["aria-label"],
    "aria-current": "step",
    tabIndex: 0,
    className: classString,
    style: style,
    onClick: e => handleClick(e),
    onKeyDown: handleKeyDown
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: "".concat(prefixCls, "-container")
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: "".concat(prefixCls, "-content")
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: "".concat(prefixCls, "-title")
  }, title)), index !== total - 1 && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: "".concat(prefixCls, "-icon")
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronRight, {
    size: "small"
  }))));
};

NavStep.propTypes = {
  prefixCls: prop_types_default.a.string,
  title: prop_types_default.a.node,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  onClick: prop_types_default.a.func,
  active: prop_types_default.a.bool
};
NavStep.defaultProps = {
  prefixCls: stepsClasses.ITEM,
  active: false,
  className: ''
};
/* harmony default export */ var navStep = (NavStep);
// CONCATENATED MODULE: ./steps/context.ts

/* harmony default export */ var steps_context = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext(null));
// CONCATENATED MODULE: ./steps/step.tsx







const Step = props => {
  const {
    type
  } = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useContext"])(steps_context);

  const renderStep = () => {
    switch (type) {
      case 'fill':
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(fillStep, assign_default()({}, props));

      case 'basic':
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(basicStep, assign_default()({}, props));

      case 'nav':
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(navStep, assign_default()({}, props));

      default:
        return null;
    }
  };

  return renderStep();
};

/* harmony default export */ var steps_step = (Step);
// EXTERNAL MODULE: ../semi-foundation/steps/steps.scss
var steps = __webpack_require__("3al0");

// CONCATENATED MODULE: ./steps/fillSteps.tsx










const fillSteps_Steps = props => {
  var _context2;

  const {
    current,
    status,
    children,
    prefixCls,
    initial,
    direction,
    className,
    style,
    onChange
  } = props;
  const inner = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useMemo"])(() => {
    var _context;

    const filteredChildren = filter_default()(_context = external_root_React_commonjs2_react_commonjs_react_amd_react_["Children"].toArray(children)).call(_context, c => /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(c));

    const colStyle = direction === 'vertical' ? null : {
      width: "".concat(100 / filteredChildren.length, "%")
    };

    const content = map_default()(external_root_React_commonjs2_react_commonjs_react_amd_react_["Children"]).call(external_root_React_commonjs2_react_commonjs_react_amd_react_["Children"], filteredChildren, (child, index) => {
      if (!child) {
        return null;
      }

      const stepNumber = initial + index;

      const childProps = assign_default()({
        stepNumber: "".concat(stepNumber + 1),
        direction
      }, child.props);

      if (status === 'error' && index === current - 1) {
        childProps.className = "".concat(prefixCls, "-next-error");
      }

      if (!child.props.status) {
        if (stepNumber === current) {
          childProps.status = status;
        } else if (stepNumber < current) {
          childProps.status = 'finish';
        } else {
          childProps.status = 'wait';
        }
      }

      childProps.onChange = () => {
        if (index !== current) {
          onChange(index + initial);
        }
      };

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(grid_col, {
        style: colStyle
      }, /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["cloneElement"])(child, assign_default()({}, childProps)));
    });

    return content;
  }, [children, initial, prefixCls, direction, status, current, onChange]);
  const wrapperCls = classnames_default()(className, {
    [prefixCls]: true,
    [concat_default()(_context2 = "".concat(prefixCls, "-")).call(_context2, direction)]: true
  });
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: wrapperCls,
    style: style,
    "aria-label": props["aria-label"]
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(grid_row, {
    type: "flex",
    justify: "start"
  }, inner));
};

fillSteps_Steps.propTypes = {
  prefixCls: prop_types_default.a.string,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  current: prop_types_default.a.number,
  initial: prop_types_default.a.number,
  direction: prop_types_default.a.oneOf(['horizontal', 'vertical']),
  status: prop_types_default.a.oneOf(['wait', 'process', 'finish', 'error', 'warning'])
};
fillSteps_Steps.defaultProps = {
  prefixCls: stepsClasses.PREFIX,
  current: 0,
  direction: 'horizontal',
  initial: 0,
  status: 'process'
};
/* harmony default export */ var fillSteps = (fillSteps_Steps);
// CONCATENATED MODULE: ./steps/basicSteps.tsx









const basicSteps_Steps = props => {
  var _context2, _context3;

  const {
    size,
    current,
    status,
    children,
    prefixCls,
    initial,
    direction,
    className,
    style,
    hasLine,
    onChange
  } = props;
  const inner = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useMemo"])(() => {
    var _context;

    const filteredChildren = filter_default()(_context = external_root_React_commonjs2_react_commonjs_react_amd_react_["Children"].toArray(children)).call(_context, c => /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(c));

    const content = map_default()(external_root_React_commonjs2_react_commonjs_react_amd_react_["Children"]).call(external_root_React_commonjs2_react_commonjs_react_amd_react_["Children"], filteredChildren, (child, index) => {
      if (!child) {
        return null;
      }

      const stepNumber = initial + index;

      const childProps = assign_default()({
        stepNumber: "".concat(stepNumber + 1),
        size
      }, child.props);

      if (status === 'error' && index === current - 1) {
        childProps.className = "".concat(prefixCls, "-next-error");
      }

      if (!child.props.status) {
        if (stepNumber === current) {
          childProps.status = status;
        } else if (stepNumber < current) {
          childProps.status = 'finish';
        } else {
          childProps.status = 'wait';
        }
      }

      childProps.active = stepNumber === current;
      childProps.done = stepNumber < current;

      childProps.onChange = () => {
        if (index !== current) {
          onChange(index + initial);
        }
      };

      return /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["cloneElement"])(child, assign_default()({}, childProps));
    });

    return content;
  }, [children, initial, prefixCls, direction, status, current, size, onChange]);
  const wrapperCls = classnames_default()(className, {
    ["".concat(prefixCls, "-basic")]: true,
    [concat_default()(_context2 = "".concat(prefixCls, "-")).call(_context2, direction)]: true,
    [concat_default()(_context3 = "".concat(prefixCls, "-")).call(_context3, size)]: size !== 'default',
    ["".concat(prefixCls, "-hasline")]: hasLine
  });
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    "aria-label": props["aria-label"],
    className: wrapperCls,
    style: style
  }, inner);
};

basicSteps_Steps.propTypes = {
  prefixCls: prop_types_default.a.string,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  current: prop_types_default.a.number,
  initial: prop_types_default.a.number,
  direction: prop_types_default.a.oneOf(['horizontal', 'vertical']),
  status: prop_types_default.a.oneOf(['wait', 'process', 'finish', 'error', 'warning']),
  hasLine: prop_types_default.a.bool
};
basicSteps_Steps.defaultProps = {
  prefixCls: stepsClasses.PREFIX,
  current: 0,
  direction: 'horizontal',
  size: '',
  initial: 0,
  hasLine: true,
  status: 'process'
};
/* harmony default export */ var basicSteps = (basicSteps_Steps);
// CONCATENATED MODULE: ./steps/navSteps.tsx









const navSteps_Steps = props => {
  var _context2;

  const {
    size,
    current,
    initial,
    children,
    prefixCls,
    className,
    style,
    onChange
  } = props;
  const inner = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useMemo"])(() => {
    var _context;

    const filteredChildren = filter_default()(_context = external_root_React_commonjs2_react_commonjs_react_amd_react_["Children"].toArray(children)).call(_context, c => /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(c));

    const total = filteredChildren.length;

    const content = map_default()(external_root_React_commonjs2_react_commonjs_react_amd_react_["Children"]).call(external_root_React_commonjs2_react_commonjs_react_amd_react_["Children"], filteredChildren, (child, index) => {
      if (!child) {
        return null;
      }

      const childProps = assign_default()({
        index,
        total
      }, child.props);

      childProps.active = index === current;

      childProps.onChange = () => {
        if (index !== current) {
          onChange(index + initial);
        }
      };

      return /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["cloneElement"])(child, assign_default()({}, childProps));
    });

    return content;
  }, [children, prefixCls, current, size, initial, onChange]);
  const wrapperCls = classnames_default()(className, {
    ["".concat(prefixCls, "-nav")]: true,
    [concat_default()(_context2 = "".concat(prefixCls, "-")).call(_context2, size)]: size !== 'default'
  });
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    "aria-label": props["aria-label"],
    className: wrapperCls,
    style: style
  }, inner);
};

navSteps_Steps.propTypes = {
  prefixCls: prop_types_default.a.string,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  current: prop_types_default.a.number,
  initial: prop_types_default.a.number,
  size: prop_types_default.a.oneOf(['small', 'default'])
};
navSteps_Steps.defaultProps = {
  prefixCls: stepsClasses.PREFIX,
  current: 0,
  direction: 'horizontal',
  size: 'default',
  initial: 0,
  status: 'process'
};
/* harmony default export */ var navSteps = (navSteps_Steps);
// CONCATENATED MODULE: ./steps/index.tsx





var steps_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

















class steps_Steps extends external_root_React_commonjs2_react_commonjs_react_amd_react_["Component"] {
  renderComponent() {
    const _a = this.props,
          {
      type
    } = _a,
          restProps = steps_rest(_a, ["type"]);

    switch (type) {
      case 'fill':
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(fillSteps, assign_default()({}, restProps));

      case 'basic':
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(basicSteps, assign_default()({}, restProps));

      case 'nav':
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(navSteps, assign_default()({}, restProps));

      default:
        return null;
    }
  }

  render() {
    const {
      type
    } = this.props;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(steps_context.Provider, {
      value: {
        type
      }
    }, this.renderComponent());
  }

}

steps_Steps.Step = steps_step;
steps_Steps.propTypes = {
  onChange: prop_types_default.a.func,
  type: prop_types_default.a.oneOf(['fill', 'basic', 'nav']),
  size: prop_types_default.a.oneOf(['small', 'default'])
};
steps_Steps.defaultProps = {
  onChange: noop_default.a,
  type: 'fill',
  size: 'default'
};
/* harmony default export */ var steps_0 = (steps_Steps);
// CONCATENATED MODULE: ../semi-foundation/switch/foundation.ts



class foundation_SwitchFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));

    this.handleFocusVisible = event => {
      const {
        target
      } = event;

      try {
        if (target.matches(':focus-visible')) {
          this._adapter.setFocusVisible(true);
        }
      } catch (error) {
        Object(warning["a" /* default */])(true, 'Warning: [Semi Switch] The current browser does not support the focus-visible');
      }
    };

    this.handleBlur = () => {
      this._adapter.setFocusVisible(false);
    };
  }

  init() {
    const {
      defaultChecked,
      checked,
      disabled
    } = this.getProps();
    this.setChecked(defaultChecked || checked);
    this.setDisabled(disabled);
  }

  setChecked(checked) {
    this._adapter.setNativeControlChecked(checked);
  }

  setDisabled(disabled) {
    this._adapter.setNativeControlDisabled(disabled);
  }

  handleChange(checked, e) {
    const propChecked = this.getProps().checked;
    const isControledComponent = typeof propChecked !== 'undefined';

    if (isControledComponent) {
      this._adapter.notifyChange(checked, e);
    } else {
      this._adapter.setNativeControlChecked(checked);

      this._adapter.notifyChange(checked, e);
    }
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  destroy() {}

}
// CONCATENATED MODULE: ../semi-foundation/switch/constants.ts

const switch_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-switch"),
  FOCUS: "".concat(BASE_CLASS_PREFIX, "-switch-focus"),
  LARGE: "".concat(BASE_CLASS_PREFIX, "-switch-large"),
  SMALL: "".concat(BASE_CLASS_PREFIX, "-switch-small"),
  CHECKED: "".concat(BASE_CLASS_PREFIX, "-switch-checked"),
  DISABLED: "".concat(BASE_CLASS_PREFIX, "-switch-disabled"),
  ACTIVE: "".concat(BASE_CLASS_PREFIX, "-switch-active"),
  KNOB: "".concat(BASE_CLASS_PREFIX, "-switch-knob"),
  NATIVE_CONTROL: "".concat(BASE_CLASS_PREFIX, "-switch-native-control"),
  CHECKED_TEXT: "".concat(BASE_CLASS_PREFIX, "-switch-checked-text"),
  UNCHECKED_TEXT: "".concat(BASE_CLASS_PREFIX, "-switch-unchecked-text"),
  LOADING_SPIN: "".concat(BASE_CLASS_PREFIX, "-switch-loading-spin"),
  LOADING: "".concat(BASE_CLASS_PREFIX, "-switch-loading")
};
const switch_constants_strings = {
  SIZE_MAP: ['default', 'small', 'large']
};

// EXTERNAL MODULE: ../semi-foundation/switch/switch.scss
var switch_switch = __webpack_require__("DE4K");

// CONCATENATED MODULE: ./switch/index.tsx



/* eslint-disable max-len */









class switch_Switch extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.handleFocusVisible = event => {
      this.foundation.handleFocusVisible(event);
    };

    this.handleBlur = event => {
      this.foundation.handleBlur();
    };

    this.state = {
      nativeControlChecked: false,
      nativeControlDisabled: false,
      focusVisible: false
    };
    this.switchRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.foundation = new foundation_SwitchFoundation(this.adapter);
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentDidUpdate(prevProps) {
    if (this.props.checked !== prevProps.checked) {
      this.foundation.setChecked(this.props.checked);
    }

    if (this.props.disabled !== prevProps.disabled) {
      this.foundation.setDisabled(this.props.disabled);
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      setNativeControlChecked: nativeControlChecked => {
        this.setState({
          nativeControlChecked
        });
      },
      setNativeControlDisabled: nativeControlDisabled => {
        this.setState({
          nativeControlDisabled
        });
      },
      setFocusVisible: focusVisible => {
        this.setState({
          focusVisible
        });
      },
      notifyChange: (checked, e) => {
        this.props.onChange(checked, e);
      }
    });
  }

  render() {
    const {
      nativeControlChecked,
      nativeControlDisabled,
      focusVisible
    } = this.state;
    const {
      className,
      style,
      onMouseEnter,
      onMouseLeave,
      size,
      checkedText,
      uncheckedText,
      loading,
      id
    } = this.props;
    const wrapperCls = classnames_default()(className, {
      [switch_constants_cssClasses.PREFIX]: true,
      [switch_constants_cssClasses.CHECKED]: nativeControlChecked,
      [switch_constants_cssClasses.DISABLED]: nativeControlDisabled,
      [switch_constants_cssClasses.LARGE]: size === 'large',
      [switch_constants_cssClasses.SMALL]: size === 'small',
      [switch_constants_cssClasses.LOADING]: loading,
      [switch_constants_cssClasses.FOCUS]: focusVisible
    });
    const switchProps = {
      type: 'checkbox',
      className: switch_constants_cssClasses.NATIVE_CONTROL,
      disabled: nativeControlDisabled || loading,
      checked: nativeControlChecked || false
    };
    const showCheckedText = checkedText && nativeControlChecked && size !== 'small';
    const showUncheckedText = uncheckedText && !nativeControlChecked && size !== 'small';
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: wrapperCls,
      style: style,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    }, loading ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(spin_0, {
      wrapperClassName: switch_constants_cssClasses.LOADING_SPIN,
      size: size === 'default' ? 'middle' : size
    }) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: switch_constants_cssClasses.KNOB,
      "aria-hidden": true
    }), showCheckedText ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: switch_constants_cssClasses.CHECKED_TEXT,
      "x-semi-prop": "checkedText"
    }, checkedText) : null, showUncheckedText ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: switch_constants_cssClasses.UNCHECKED_TEXT,
      "x-semi-prop": "uncheckedText"
    }, uncheckedText) : null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("input", assign_default()({}, switchProps, {
      ref: this.switchRef,
      id: id,
      role: "switch",
      "aria-checked": nativeControlChecked,
      "aria-invalid": this.props['aria-invalid'],
      "aria-errormessage": this.props['aria-errormessage'],
      "aria-label": this.props['aria-label'],
      "aria-labelledby": this.props['aria-labelledby'],
      "aria-describedby": this.props['aria-describedby'],
      "aria-disabled": this.props['disabled'],
      onChange: e => this.foundation.handleChange(e.target.checked, e),
      onFocus: e => this.handleFocusVisible(e),
      onBlur: e => this.handleBlur(e)
    })));
  }

}

switch_Switch.propTypes = {
  'aria-label': prop_types_default.a.string,
  'aria-labelledby': prop_types_default.a.string,
  'aria-invalid': prop_types_default.a.bool,
  'aria-errormessage': prop_types_default.a.string,
  'aria-describedby': prop_types_default.a.string,
  className: prop_types_default.a.string,
  checked: prop_types_default.a.bool,
  checkedText: prop_types_default.a.node,
  defaultChecked: prop_types_default.a.bool,
  disabled: prop_types_default.a.bool,
  loading: prop_types_default.a.bool,
  onChange: prop_types_default.a.func,
  onMouseEnter: prop_types_default.a.func,
  onMouseLeave: prop_types_default.a.func,
  style: prop_types_default.a.object,
  size: prop_types_default.a.oneOf(switch_constants_strings.SIZE_MAP),
  uncheckedText: prop_types_default.a.node,
  id: prop_types_default.a.string
};
switch_Switch.defaultProps = {
  disabled: false,
  className: '',
  onChange: noop_default.a,
  loading: false,
  onMouseEnter: noop_default.a,
  onMouseLeave: noop_default.a,
  size: 'default'
};
/* harmony default export */ var switch_0 = (switch_Switch);
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/flattenDeep.js
var flattenDeep = __webpack_require__("cdI6");
var flattenDeep_default = /*#__PURE__*/__webpack_require__.n(flattenDeep);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/some.js
var lodash_some = __webpack_require__("oBkS");
var lodash_some_default = /*#__PURE__*/__webpack_require__.n(lodash_some);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/clone.js
var lodash_clone = __webpack_require__("zr3P");
var clone_default = /*#__PURE__*/__webpack_require__.n(lodash_clone);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/filter.js
var lodash_filter = __webpack_require__("+DnP");
var lodash_filter_default = /*#__PURE__*/__webpack_require__.n(lodash_filter);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/isEqualWith.js
var isEqualWith = __webpack_require__("6OdC");
var isEqualWith_default = /*#__PURE__*/__webpack_require__.n(isEqualWith);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/cloneDeepWith.js
var cloneDeepWith = __webpack_require__("NdXQ");
var cloneDeepWith_default = /*#__PURE__*/__webpack_require__.n(cloneDeepWith);

// CONCATENATED MODULE: ../semi-foundation/table/constants.ts
/* eslint-disable max-len */

const table_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-table"),
  TABLE: "".concat(BASE_CLASS_PREFIX, "-table"),
  WRAP: "".concat(BASE_CLASS_PREFIX, "-table-wrapper"),
  THEAD: "".concat(BASE_CLASS_PREFIX, "-table-thead"),
  TR: "".concat(BASE_CLASS_PREFIX, "-table-row"),
  TH: "".concat(BASE_CLASS_PREFIX, "-table-row-head"),
  TD: "".concat(BASE_CLASS_PREFIX, "-table-row-cell")
};
const table_constants_strings = {
  SIZE_SMALL: 'small',
  SIZE_MIDDLE: 'middle',
  SIZES: ['small', 'default', 'middle'],
  LAYOUTS: ['', 'auto', 'fixed'],
  PAGINATION_POSITIONS: ['bottom', 'top', 'both'],
  FOOTER_POSITIONS: [false, true, 'left', 'right'],
  SORT_DIRECTIONS: ['ascend', 'descend'],
  FIXED_SET: [false, true, 'left', 'right'],
  ALIGNS: ['left', 'right', 'center'],
  SCROLL_HORIZONTAL_POSITIONS: ['left', 'middle', 'right'],
  DEFAULT_KEY_COLUMN_SELECTION: 'column-selection',
  DEFAULT_KEY_COLUMN_EXPAND: 'column-expand',
  DEFAULT_KEY_COLUMN_TITLE: 'column-title',
  DEFAULT_KEY_COLUMN_SORTER: 'column-sorter',
  DEFAULT_KEY_COLUMN_FILTER: 'column-filter',
  DEFAULT_KEY_COLUMN_SCROLLBAR: 'column-scrollbar',
  DEFAULT_COMPONENTS: {
    table: 'table',
    header: {
      outer: 'table',
      wrapper: 'thead',
      row: 'tr',
      cell: 'th'
    },
    body: {
      outer: 'table',
      wrapper: 'tbody',
      row: 'tr',
      cell: 'td'
    },
    footer: {
      wrapper: 'tfoot',
      row: 'tr',
      cell: 'td'
    }
  },
  EXPAND_RELATED_PROPS: ['expandedRowRender', 'dataSource', 'hideExpandedColumn', 'childrenRecordName', 'rowExpandable']
};
const DEFAULT_CELL_BORDER_WITH_BOTTOM = 1;
const DEFAULT_CELL_BORDER_WITH_TOP = 0;
const DEFAULT_CELL_PADDING_TOP = 16;
const DEFAULT_CELL_PADDING_BOTTOM = 16;
const DEFAULT_CELL_MIDDLE_PADDING_TOP = 12;
const DEFAULT_CELL_MIDDLE_PADDING_BOTTOM = 12;
const DEFAULT_CELL_SMALL_PADDING_TOP = 8;
const DEFAULT_CELL_SMALL_PADDING_BOTTOM = 8;
const DEFAULT_CELL_LINE_HEIGHT = 20; // normal size

const DEFAULT_VIRTUALIZED_ROW_HEIGHT = DEFAULT_CELL_LINE_HEIGHT + DEFAULT_CELL_BORDER_WITH_BOTTOM + DEFAULT_CELL_BORDER_WITH_TOP + DEFAULT_CELL_PADDING_TOP + DEFAULT_CELL_PADDING_BOTTOM;
const DEFAULT_VIRTUALIZED_ROW_MIN_HEIGHT = DEFAULT_CELL_PADDING_TOP + DEFAULT_CELL_PADDING_BOTTOM + DEFAULT_CELL_BORDER_WITH_BOTTOM; // middle  size

const DEFAULT_VIRTUALIZED_ROW_MIDDLE_HEIGHT = DEFAULT_CELL_LINE_HEIGHT + DEFAULT_CELL_BORDER_WITH_BOTTOM + DEFAULT_CELL_BORDER_WITH_TOP + DEFAULT_CELL_MIDDLE_PADDING_TOP + DEFAULT_CELL_MIDDLE_PADDING_BOTTOM;
const DEFAULT_VIRTUALIZED_ROW_MIDDLE_MIN_HEIGHT = DEFAULT_CELL_MIDDLE_PADDING_TOP + DEFAULT_CELL_MIDDLE_PADDING_BOTTOM + DEFAULT_CELL_BORDER_WITH_BOTTOM; // small size

const DEFAULT_VIRTUALIZED_ROW_SMALL_HEIGHT = DEFAULT_CELL_LINE_HEIGHT + DEFAULT_CELL_BORDER_WITH_BOTTOM + DEFAULT_CELL_BORDER_WITH_TOP + DEFAULT_CELL_SMALL_PADDING_BOTTOM + DEFAULT_CELL_SMALL_PADDING_TOP;
const DEFAULT_VIRTUALIZED_ROW_SMALL_MIN_HEIGHT = DEFAULT_CELL_SMALL_PADDING_TOP + DEFAULT_CELL_SMALL_PADDING_BOTTOM + DEFAULT_CELL_BORDER_WITH_BOTTOM;
const table_constants_numbers = {
  DEFAULT_PAGE_SIZE: 10,
  DEFAULT_WIDTH_COLUMN_EXPAND: 60,
  DEFAULT_WIDTH_COLUMN_SELECTION: 60,
  DEFAULT_INDENT_WIDTH: 20,
  DEFAULT_CELL_PADDING_LEFT: 16,
  DEFAULT_CELL_PADDING_RIGHT: 16,
  DEFAULT_CELL_PADDING_TOP,
  DEFAULT_CELL_PADDING_BOTTOM,
  DEFAULT_CELL_MIDDLE_PADDING_TOP,
  DEFAULT_CELL_MIDDLE_PADDING_BOTTOM,
  DEFAULT_CELL_SMALL_PADDING_TOP,
  DEFAULT_CELL_SMALL_PADDING_BOTTOM,
  DEFAULT_CELL_BORDER_WIDTH_LEFT: 1,
  DEFAULT_CELL_BORDER_WIDTH_RIGHT: 1,
  DEFAULT_CELL_BORDER_WITH_BOTTOM,
  DEFAULT_CELL_LINE_HEIGHT,
  DEFAULT_VIRTUALIZED_BODY_HEIGHT: 600,
  DEFAULT_VIRTUALIZED_SECTION_ROW_HEIGHT: DEFAULT_VIRTUALIZED_ROW_HEIGHT,
  DEFAULT_VIRTUALIZED_ROW_HEIGHT,
  DEFAULT_VIRTUALIZED_ROW_MIN_HEIGHT,
  DEFAULT_VIRTUALIZED_SECTION_ROW_MIDDLE_HEIGHT: DEFAULT_VIRTUALIZED_ROW_MIDDLE_HEIGHT,
  DEFAULT_VIRTUALIZED_ROW_MIDDLE_HEIGHT,
  DEFAULT_VIRTUALIZED_ROW_MIDDLE_MIN_HEIGHT,
  DEFAULT_VIRTUALIZED_SECTION_ROW_SMALL_HEIGHT: DEFAULT_VIRTUALIZED_ROW_SMALL_HEIGHT,
  DEFAULT_VIRTUALIZED_ROW_SMALL_HEIGHT,
  DEFAULT_VIRTUALIZED_ROW_SMALL_MIN_HEIGHT
};

// CONCATENATED MODULE: ../semi-foundation/utils/Logger.ts
class Logger {
  /**
   * specify prefix
   * @param {string} prefix
   */
  constructor(prefix) {
    this._prefix = prefix;
  }

  _isEmpty(value) {
    return value === null || value === undefined || value === '';
  }

  _baseLog() {
    let method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'log';

    if (typeof console[method] === 'function') {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      const messages = [...args];

      if (!this._isEmpty(this._prefix)) {
        messages.unshift(this._prefix, ':');
      }

      console[method](...messages);
    }
  }
  /* istanbul ignore next */


  log() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    this._baseLog('log', ...args);
  }
  /* istanbul ignore next */


  warn() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    this._baseLog('warn', ...args);
  }
  /* istanbul ignore next */


  error() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    this._baseLog('error', ...args);
  }
  /* istanbul ignore next */


  info() {
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }

    this._baseLog('info', ...args);
  }

}

/* harmony default export */ var utils_Logger = (Logger);
// CONCATENATED MODULE: ../semi-foundation/table/utils.ts

























function utils_cloneDeep(value, customizer) {
  return cloneDeepWith_default()(value, v => {
    if (typeof v === 'function') {
      return v;
    } else if (typeof customizer === 'function') {
      return customizer(v);
    }

    return undefined;
  });
}
function equalWith(value, other, customizer) {
  return isEqualWith_default()(value, other, function (objVal, othVal) {
    if (typeof objVal === 'function' && typeof othVal === 'function') {
      return toString_default()(objVal) === toString_default()(othVal);
    }

    if (typeof customizer === 'function') {
      for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        rest[_key - 2] = arguments[_key];
      }

      return customizer(objVal, othVal, ...rest);
    } // If customizer returns undefined, comparisons are handled by isEqual instead


    return undefined;
  });
}
function getColumnKey(column, keyPropNames) {
  keyPropNames = is_array_default()(keyPropNames) ? keyPropNames : ['key', 'dataIndex'];
  let key = null;

  each_default()(keyPropNames, propName => {
    key = get_default()(column, propName);

    if (key != null) {
      return false;
    }

    return undefined;
  });

  return key;
}
function mergeColumns() {
  let oldColumns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let newColumns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  let keyPropNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  let deep = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  const finalColumns = [];
  const clone = deep ? utils_cloneDeep : clone_default.a;

  lodash_map_default()(newColumns, newColumn => {
    newColumn = assign_default()({}, newColumn);
    const key = getColumnKey(newColumn, keyPropNames);

    const oldColumn = key != null && lodash_find_default()(oldColumns, item => getColumnKey(item, keyPropNames) === key);

    if (oldColumn) {
      finalColumns.push(clone(assign_default()(assign_default()({}, oldColumn), newColumn)));
    } else {
      finalColumns.push(clone(newColumn));
    }
  });

  return finalColumns;
}
/**
 *
 * @param {Array<number>} arr
 * @param {number} [beginIndex] begin index, included
 * @param {number} [endIndex] end index, not included
 * @returns {number}
 */

function arrayAdd() {
  let arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let beginIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  let endIndex = arguments.length > 2 ? arguments[2] : undefined;
  beginIndex = beginIndex < 0 || typeof beginIndex !== 'number' ? 0 : beginIndex;
  endIndex = endIndex > arr.length || typeof endIndex !== 'number' ? arr.length : endIndex;
  let result = 0;

  each_default()(arr, (value, index) => {
    if (index >= beginIndex && index < endIndex) {
      result += typeof value === 'number' && !isNaN(value) ? value : 0;
    }
  });

  return result;
}
function isLastLeftFixed(columns, column) {
  let checkKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['key'];

  const leftFixedColumns = lodash_filter_default()(columns, col => col.fixed === true || col.fixed === 'left');

  const index = findIndex_default()(leftFixedColumns, col => every_default()(checkKeys).call(checkKeys, key => col[key] != null && col[key] === column[key]));

  return leftFixedColumns.length > 0 && index === leftFixedColumns.length - 1;
}
function isFirstFixedRight(columns, column) {
  let checkKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['key'];

  const rightFixedColumns = lodash_filter_default()(columns, col => col.fixed === 'right');

  const index = findIndex_default()(rightFixedColumns, col => every_default()(checkKeys).call(checkKeys, key => col[key] != null && col[key] === column[key]));

  return rightFixedColumns.length > 0 && index === 0;
}
function isAnyFixed(columns) {
  let fixedSet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['left', true, 'right'];

  if (typeof fixedSet === 'string' || typeof fixedSet === 'boolean') {
    fixedSet = [fixedSet];
  }

  return fixedSet.length > 0 && lodash_some_default()(columns, col => includes_default()(fixedSet).call(fixedSet, col.fixed));
}
function isAnyFixedRight(columns) {
  return lodash_some_default()(columns, col => col.fixed === 'right');
}
function isFixedLeft(column) {
  var _context;

  return includes_default()(_context = ['left', true]).call(_context, get_default()(column, 'fixed'));
}
function isFixedRight(column) {
  var _context2;

  return includes_default()(_context2 = ['right']).call(_context2, get_default()(column, 'fixed'));
}
function isFixed(column) {
  return isFixedLeft(column) || isFixedRight(column);
}
function isInnerColumnKey(key) {
  var _context3;

  return includes_default()(_context3 = [table_constants_strings.DEFAULT_KEY_COLUMN_EXPAND, table_constants_strings.DEFAULT_KEY_COLUMN_SCROLLBAR, table_constants_strings.DEFAULT_KEY_COLUMN_SELECTION]).call(_context3, key);
}
function isExpandedColumn(column) {
  return get_default()(column, 'key') === table_constants_strings.DEFAULT_KEY_COLUMN_EXPAND;
}
function isScrollbarColumn(column) {
  return get_default()(column, 'key') === table_constants_strings.DEFAULT_KEY_COLUMN_SCROLLBAR;
}
function isSelectionColumn(column) {
  return get_default()(column, 'key') === table_constants_strings.DEFAULT_KEY_COLUMN_SELECTION;
}
function filterColumns(columns) {
  let ignoreKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [table_constants_strings.DEFAULT_KEY_COLUMN_SCROLLBAR];
  return lodash_filter_default()(columns, col => !includes_default()(ignoreKeys).call(ignoreKeys, col.key));
}
/**
 * get width of scroll bar
 * @param {Array} columns
 * @returns {Number|undefined}
 */

function getScrollbarColumnWidth() {
  let columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  const len = columns.length;

  if (len) {
    const lastColumn = columns[len - 1];

    if (get_default()(lastColumn, 'key') === table_constants_strings.DEFAULT_KEY_COLUMN_SCROLLBAR) {
      return get_default()(lastColumn, 'width', 0);
    }
  }
}
function getRecordKey(record, rowKey) {
  if (rowKey === undefined) {
    rowKey = 'key';
  }

  return typeof rowKey === 'function' ? rowKey(record) : get_default()(record, rowKey);
}
/**
 * Determine whether the expandedRowKeys includes a key (rowKey will be added to expandedRowKeys when the expand button is clicked)
 * @param {*} expandedRowKeys
 * @param {*} key
 */

function isExpanded(expandedRowKeys, key) {
  return key != null && lodash_includes_default()(expandedRowKeys, key);
}
/**
 * Determine whether the selectedKeysSet includes the key
 * @param {Set} selectedRowKeysSet
 * @param {String} key
 */

function utils_isSelected(selectedRowKeysSet, key) {
  return key !== null && selectedRowKeysSet.has(key);
}
/**
 * Whether the key is included in the disabledRowKeysSet
 * @param {Set} disabledRowKeysSet
 * @param {String} key
 */

function utils_isDisabled(disabledRowKeysSet, key) {
  return key !== null && disabledRowKeysSet.has(key);
}
function getRecord(data, recordKey, rowKey) {
  if (rowKey === undefined) {
    rowKey = 'key';
  }

  return lodash_find_default()(data, record => recordKey != null && recordKey !== '' && getRecordKey(record, rowKey) === recordKey);
}
function getRecordChildren(record, childrenRecordName) {
  if (childrenRecordName === undefined) {
    childrenRecordName = 'children';
  }

  return get_default()(record, childrenRecordName);
}
function genExpandedRowKey() {
  let recordKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  let suffix = arguments.length > 1 ? arguments[1] : undefined;

  if (suffix === undefined) {
    suffix = '__expanded_row';
  }

  return recordKey + suffix;
}
function getDefaultVirtualizedRowConfig() {
  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  let sectionRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  const config = {};

  if (size === 'small') {
    config.height = sectionRow ? table_constants_numbers.DEFAULT_VIRTUALIZED_SECTION_ROW_SMALL_HEIGHT : table_constants_numbers.DEFAULT_VIRTUALIZED_ROW_SMALL_HEIGHT;
    config.minHeight = table_constants_numbers.DEFAULT_VIRTUALIZED_ROW_SMALL_MIN_HEIGHT;
  } else if (size === 'middle') {
    config.height = sectionRow ? table_constants_numbers.DEFAULT_VIRTUALIZED_SECTION_ROW_MIDDLE_HEIGHT : table_constants_numbers.DEFAULT_VIRTUALIZED_ROW_MIDDLE_HEIGHT;
    config.minHeight = table_constants_numbers.DEFAULT_VIRTUALIZED_ROW_MIDDLE_MIN_HEIGHT;
  } else {
    config.height = sectionRow ? table_constants_numbers.DEFAULT_VIRTUALIZED_SECTION_ROW_HEIGHT : table_constants_numbers.DEFAULT_VIRTUALIZED_ROW_HEIGHT;
    config.minHeight = table_constants_numbers.DEFAULT_VIRTUALIZED_ROW_MIN_HEIGHT;
  }

  return config;
}
function flattenColumns(cols) {
  let childrenColumnName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'children';
  const list = [];

  if (is_array_default()(cols) && cols.length) {
    for (const col of cols) {
      if (is_array_default()(col[childrenColumnName]) && col[childrenColumnName].length) {
        list.push(...flattenColumns(col[childrenColumnName], childrenColumnName));
      } else {
        warnIfNoDataIndex(col);
        list.push(col);
      }
    }
  }

  return list;
}
function assignColumnKeys(columns) {
  let childrenColumnName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'children';
  let level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  const sameLevelCols = [];

  each_default()(columns, (column, index) => {
    if (column.key == null) {
      var _context4;

      // if user give column a dataIndex, use it for backup
      const _index = column.dataIndex || index;

      column.key = concat_default()(_context4 = "".concat(level, "-")).call(_context4, _index);
    }

    if (is_array_default()(column[childrenColumnName]) && column[childrenColumnName].length) {
      sameLevelCols.push(...column[childrenColumnName]);
    }
  });

  if (sameLevelCols.length) {
    assignColumnKeys(sameLevelCols, childrenColumnName, level + 1);
  }

  return columns;
}
function sliceColumnsByLevel(columns) {
  let targetLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  let childrenColumnName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';
  let currentLevel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  const slicedColumns = [];

  if (is_array_default()(columns) && columns.length && currentLevel <= targetLevel) {
    for_each_default()(columns).call(columns, column => {
      const children = column[childrenColumnName];

      if (is_array_default()(children) && children.length && currentLevel < targetLevel) {
        slicedColumns.push(...sliceColumnsByLevel(children, targetLevel, childrenColumnName, currentLevel + 1));
      } else {
        slicedColumns.push(column);
      }
    });
  }

  return slicedColumns;
}
function getColumnsByLevel(columns) {
  let targetLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  let targetColumns = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  let currentLevel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  let childrenColumnName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'children';

  if (is_array_default()(columns) && columns.length) {
    if (targetLevel === currentLevel) {
      targetColumns.push(...columns);
    } else {
      for_each_default()(columns).call(columns, column => {
        getColumnsByLevel(column[childrenColumnName], targetLevel, targetColumns, currentLevel + 1, childrenColumnName);
      });
    }
  }

  return targetColumns;
}
function getAllLevelColumns(columns) {
  let childrenColumnName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'children';
  const all = [];

  if (is_array_default()(columns) && columns.length) {
    all.push([...columns]);
    const sameLevelColumns = [];

    for_each_default()(columns).call(columns, column => {
      const children = column[childrenColumnName];

      if (is_array_default()(children) && children.length) {
        sameLevelColumns.push(...children);
      }
    });

    if (sameLevelColumns.length) {
      all.push(sameLevelColumns);
    }
  }

  return all;
}
function getColumnByLevelIndex(columns, index) {
  let level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  let childrenColumnName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'children';
  const allLevelColumns = getAllLevelColumns(columns, childrenColumnName);
  return allLevelColumns[level][index];
}
function findColumn(columns, column) {
  let childrenColumnName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';
  let found;

  each_default()(columns, item => {
    if (item && item.key != null && !found) {
      if (item.key === column.key) {
        found = item;
      }
    }

    if (item && is_array_default()(item[childrenColumnName]) && !found) {
      found = findColumn(item[childrenColumnName], column, childrenColumnName);
    }

    if (found) {
      return false;
    }

    return undefined;
  });

  return found;
}
function utils_expandBtnShouldInRow(props) {
  const {
    expandedRowRender,
    dataSource,
    hideExpandedColumn,
    childrenRecordName,
    rowExpandable
  } = props;
  const hasExpandedRowRender = typeof expandedRowRender === 'function';
  return hideExpandedColumn && hasExpandedRowRender || !hasExpandedRowRender && some_default()(dataSource).call(dataSource, record => {
    const children = get_default()(record, childrenRecordName);

    if (is_array_default()(children) && children.length || rowExpandable(record)) {
      return true;
    } else {
      return false;
    }
  });
}
/**
 * merge query
 * @param {*} query
 * @param {*} queries
 */

function mergeQueries(query) {
  let queries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  let _mergedQuery;

  const idx = find_index_default()(queries).call(queries, item => {
    if (query.dataIndex === item.dataIndex) {
      _mergedQuery = assign_default()(assign_default()({}, item), query);
      return true;
    }

    return false;
  });

  if (idx > -1) {
    splice_default()(queries).call(queries, idx, 1, _mergedQuery);
  } else {
    queries.push(_mergedQuery);
  }

  return [...queries];
}
/**
 * Replace the width of the newColumns column with the width of the column after resize
 * @param {Object[]} columns columns retain the column width after resize
 * @param {Object[]} newColumns
 */

function withResizeWidth(columns, newColumns) {
  const _newColumns = utils_cloneDeep(newColumns);

  for (const column of columns) {
    if (!isNullOrUndefined(column.width)) {
      const currentColumn = column.key;

      const columnIndex = findIndex_default()(_newColumns, item => item.key === currentColumn);

      if (columnIndex !== -1) {
        _newColumns[columnIndex].width = get_default()(column, 'width');
      }
    }
  }

  return _newColumns;
}
/**
 * Pure function version of the same function in table foundation
 * This is not accessible in getDerivedStateFromProps, so fork one out
 */

function getAllDisabledRowKeys(_ref) {
  let {
    dataSource,
    getCheckboxProps,
    childrenRecordName,
    rowKey
  } = _ref;
  const disabledRowKeys = [];

  if (is_array_default()(dataSource) && dataSource.length && typeof getCheckboxProps === 'function') {
    for (const record of dataSource) {
      const props = getCheckboxProps(record);
      const recordKey = typeof rowKey === 'function' ? rowKey(record) : get_default()(record, rowKey);

      if (props && props.disabled) {
        disabledRowKeys.push(recordKey);
      }

      const children = get_default()(record, childrenRecordName);

      if (is_array_default()(children) && children.length) {
        const keys = getAllDisabledRowKeys({
          dataSource: children,
          getCheckboxProps
        });
        disabledRowKeys.push(...keys);
      }
    }
  }

  return disabledRowKeys;
}
function warnIfNoDataIndex(column) {
  if (typeof column === 'object' && column !== null) {
    const {
      filters,
      sorter,
      dataIndex
    } = column;
    const logger = new utils_Logger('[@douyinfe/semi-ui Table]');

    if ((is_array_default()(filters) || isFunction_default()(sorter)) && isNullOrUndefined(dataIndex)) {
      logger.warn("The column with sorter or filter must pass the 'dataIndex' prop");
    }
  }
}
/**
 * Whether is tree table
 */

function isTreeTable(_ref2) {
  let {
    dataSource,
    childrenRecordName = 'children'
  } = _ref2;
  let flag = false;

  if (is_array_default()(dataSource)) {
    for (const data of dataSource) {
      const children = get_default()(data, childrenRecordName);

      if (is_array_default()(children) && children.length) {
        flag = true;
        break;
      }
    }
  }

  return flag;
}
// CONCATENATED MODULE: ../semi-foundation/utils/Store.ts




/* istanbul ignore next */
class Store_Store {
  constructor(initialState) {
    this._state = assign_default()({}, initialState);
    this._listeners = [];
  }

  subscribe(listener) {
    this._listeners.push(listener);

    const unsubscribe = () => {
      var _context;

      const index = index_of_default()(_context = this._listeners).call(_context, listener);

      if (index > -1) {
        var _context2;

        splice_default()(_context2 = this._listeners).call(_context2, index, 1);
      }
    };

    return unsubscribe;
  }

  setState(state) {
    assign_default()(this._state, assign_default()({}, state));

    for (const listener of this._listeners) {
      if (typeof listener === 'function') {
        listener(this._state);
      }
    }
  }

  getState() {
    return this._state;
  }

}

/* harmony default export */ var utils_Store = (Store_Store);
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/isMap.js
var isMap = __webpack_require__("NbvU");
var isMap_default = /*#__PURE__*/__webpack_require__.n(isMap);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/pull.js
var lodash_pull = __webpack_require__("jHPj");
var pull_default = /*#__PURE__*/__webpack_require__.n(lodash_pull);

// CONCATENATED MODULE: ../semi-foundation/utils/set.ts



/* istanbul ignore next */
function copySet(setA) {
  return new set_default.a(setA);
}
/**
 * Set deduplicate
 * @param {*} setA
 * @param {*} setB
 */

function pullAll(setA, setB) {
  if (setA === setB) {
    setB = copySet(setB);
  }

  if (isSet_default()(setA) && setA.size && isSet_default()(setB) && setB.size) {
    for (const item of setB) {
      if (setA.has(item)) {
        setA.delete(item);
      }
    }

    return setA;
  }

  return setA;
}
// CONCATENATED MODULE: ../semi-foundation/utils/array.ts



/**
 * arrayA remove arrayB
 * @param {array} arrayA
 * @param {array} arrayB
 * @returns {array}  new array
 *
 * const arrayA = ['a', 'b', 'c', 'a', 'b', 'c'];
 *
 * const result = pullAll(arrayA, ['a', 'c'])
 * console.log(result);
 * => ['b', 'b']
 */

function array_pullAll(arrayA, arrayB) {
  if (arrayA !== null && arrayA.length && arrayB !== null && arrayB.length) {
    const setA = new set_default.a(arrayA);
    const setB = new set_default.a(arrayB);
    const resultSet = pullAll(setA, setB);
    return from_default()(resultSet);
  }

  return arrayA;
}
/**
 * Adapt the descending order
 * @param {Function} fn
 * @param {String} order
 * @returns
 */

function withOrderSort(fn) {
  let order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ascend';

  switch (order) {
    case 'descend':
      return (a, b) => {
        const result = Number(fn(a, b));
        return result !== 0 ? -result : result;
      };

    case 'ascend':
    default:
      return fn;
  }
}
// CONCATENATED MODULE: ../semi-foundation/table/foundation.ts


































class foundation_TableFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
    /**
     * set page number
     */

    this.setPage = (currentPage, currentPageSize) => {
      currentPage = currentPage || this._adapter.getCurrentPage();
      const currentPagination = this.getState('pagination');
      const {
        dataSource,
        pagination,
        disabledRowKeys,
        allRowKeys
      } = this.getCurrentPageData(null, assign_default()(assign_default()({}, currentPagination), {
        currentPage,
        pageSize: currentPageSize
      }));

      if (!this._pagerIsControlled() && currentPage > 0) {
        this._adapter.setDisabledRowKeys(disabledRowKeys);

        this._adapter.setAllRowKeys(allRowKeys);

        this._adapter.setPagination(pagination);

        this._adapter.setDataSource(dataSource);
      }

      this._notifyChange(pagination);
    };
    /**
     * Cache related data when initializing or updating the calculated dataSource
     * @param {*} filteredSortedDataSource
     */


    this.setCachedFilteredSortedDataSource = filteredSortedDataSource => {
      this._adapter.setCachedFilteredSortedDataSource(filteredSortedDataSource);

      const filteredSortedRowKeys = this.getAllRowKeys(filteredSortedDataSource);

      this._adapter.setCachedFilteredSortedRowKeys(filteredSortedRowKeys);
    };

    this.isSortOrderValid = sortOrder => {
      var _context;

      return includes_default()(_context = table_constants_strings.SORT_DIRECTIONS).call(_context, sortOrder) || sortOrder === false;
    };
    /**
     * memoized function list
     */


    const handleColumns = this._adapter.getHandleColumns();

    const mergePagination = this._adapter.getMergePagination();

    this.memoizedWithFnsColumns = memoize_one_esm(handleColumns, isEqual_default.a);
    this.memoizedFilterColumns = memoize_one_esm(filterColumns);
    this.memoizedFlattenFnsColumns = memoize_one_esm(flattenColumns);
    this.memoizedPagination = memoize_one_esm(mergePagination, isEqual_default.a);
  }

  init() {
    const dataSource = [...this.getProp('dataSource')];

    const {
      queries
    } = this._adapter.getStates();

    const filteredSortedDataSource = this.getFilteredSortedDataSource(dataSource, queries);
    const pageData = this.getCurrentPageData(filteredSortedDataSource);
    this.setAdapterPageData(pageData);
    this.initExpandedRowKeys(pageData);
    this.initSelectedRowKeys(pageData); // cache dataSource after mount, and then calculate it on demand

    this.setCachedFilteredSortedDataSource(filteredSortedDataSource);
  }

  initExpandedRowKeys() {
    let {
      groups
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const {
      defaultExpandAllRows,
      defaultExpandedRowKeys = [],
      expandedRowKeys: propExpandedRowKeys = [],
      dataSource = [],
      expandAllRows,
      defaultExpandAllGroupRows,
      expandAllGroupRows
    } = this.getProps();
    const expandedRowKeys = [];

    if (defaultExpandAllRows || expandAllRows) {
      this._addNoDuplicatedItemsToArr(expandedRowKeys, this.getAllRowKeys(dataSource), groups && isMap_default()(groups) && groups.size ? from_default()(instance_keys_default()(groups).call(groups)) : []);
    } else if (defaultExpandAllGroupRows || expandAllGroupRows) {
      this._addNoDuplicatedItemsToArr(expandedRowKeys, groups && isMap_default()(groups) && groups.size ? from_default()(instance_keys_default()(groups).call(groups)) : []);
    } else if (is_array_default()(defaultExpandedRowKeys) && defaultExpandedRowKeys.length) {
      this._addNoDuplicatedItemsToArr(expandedRowKeys, defaultExpandedRowKeys);
    } else if (is_array_default()(propExpandedRowKeys) && propExpandedRowKeys.length) {
      this._addNoDuplicatedItemsToArr(expandedRowKeys, propExpandedRowKeys);
    }

    this._adapter.setExpandedRowKeys(expandedRowKeys);
  }

  initSelectedRowKeys(_ref) {
    let {
      disabledRowKeys
    } = _ref;
    const rowSelection = this.getProp('rowSelection');
    const rowKeys = [];

    if (rowSelection) {
      const selectedRowKeys = get_default()(rowSelection, 'selectedRowKeys');

      const defaultSelectedRowKeys = get_default()(rowSelection, 'defaultSelectedRowKeys');

      if (is_array_default()(selectedRowKeys)) {
        this._addNoDuplicatedItemsToArr(rowKeys, selectedRowKeys);
      } else if (is_array_default()(defaultSelectedRowKeys)) {
        this._addNoDuplicatedItemsToArr(rowKeys, defaultSelectedRowKeys);
      }

      if (is_array_default()(disabledRowKeys) && disabledRowKeys.length) {
        pull_default()(rowKeys, ...disabledRowKeys);
      }

      this._adapter.setSelectedRowKeys(rowKeys);
    }
  }
  /**
   * Get filtered and sorted data
   * @param {Object[]} dataSource
   * @param {Object[]} queries
   * @returns {Object[]} sortedDataSource
   */


  getFilteredSortedDataSource(dataSource, queries) {
    const filteredDataSource = this.filterDataSource(dataSource, filter_default()(queries).call(queries, query => {
      /**
       * 这里无需判断 filteredValue 是否为数组，初始化时它是 `undefined`，点击选择空时为 `[]`
       * 初始化时我们应该用 `defaultFilteredValue`，点击后我们应该用 `filteredValue`
       *
       * There is no need to judge whether `filteredValue` is an array here, because it is `undefined` when initialized, and `[]` when you click to select empty
       * When initializing we should use `defaultFilteredValue`, after clicking we should use `filteredValue`
       */
      const currentFilteredValue = query.filteredValue ? query.filteredValue : query.defaultFilteredValue;
      return isFunction_default()(query.onFilter) && is_array_default()(query.filters) && query.filters.length && is_array_default()(currentFilteredValue) && currentFilteredValue.length;
    }));
    const sortedDataSource = this.sortDataSource(filteredDataSource, filter_default()(queries).call(queries, query => query && isFunction_default()(query.sorter)));
    return sortedDataSource;
  }
  /**
   * get current page data
   *
   * @param {Array} dataSource
   * @param {object} pagination
   * @param {object} queries
   * @returns {{dataSource: RecordType[], groups: Map<string, Set<string>>, pagination: object, disabledRowKeys: string[], queries: BaseColumnProps[], allRowKeys: string[]}}
   */


  getCurrentPageData(dataSource, pagination, queries) {
    const filteredSortedDataSource = this._adapter.getCachedFilteredSortedDataSource();

    dataSource = dataSource == null ? [...filteredSortedDataSource] : dataSource;
    pagination = pagination == null ? this.getState('pagination') && assign_default()({}, this.getState('pagination')) : pagination;
    queries = queries == null ? [...this.getState('queries')] : queries;
    let groups;

    if (this.getProp('groupBy') != null) {
      const {
        groups: groupedGroups,
        dataSource: groupedData
      } = this.groupDataSource(dataSource);
      dataSource = groupedData;
      groups = groupedGroups;
    }

    pagination = this.normalizePagination(pagination, dataSource);
    dataSource = this.limitPageDataSource(dataSource, pagination);
    const disabledRowKeys = this.getAllDisabledRowKeys(dataSource);
    const allRowKeys = this.getAllRowKeys(dataSource);
    const pageData = {
      dataSource,
      groups,
      pagination,
      disabledRowKeys,
      allRowKeys,
      queries
    };
    return pageData;
  }
  /**
   * group dataSource, return grouped row keys
   *
   * @param {*[]} dataSource
   * @param {Function|string} groupBy
   */


  groupDataSource(dataSource, groupBy) {
    groupBy = groupBy == null ? this.getProp('groupBy') : groupBy;
    const groups = new core_js_stable_map_default.a();
    const newDataSource = [];

    if (groupBy != null) {
      each_default()(dataSource, (record, index) => {
        const groupKey = typeof groupBy === 'function' ? groupBy(record) : get_default()(record, groupBy);

        if (groupKey != null && groupKey !== '') {
          const recordKey = this.getRecordKey(record);
          let group = groups.get(groupKey);

          if (!isSet_default()(group)) {
            group = new set_default.a([recordKey]);
            groups.set(groupKey, group);
          } else {
            group.add(recordKey);
          }
        }
      });
    }

    if (groups && groups.size) {
      for_each_default()(groups).call(groups, (set, key) => {
        if (isSet_default()(set)) {
          for_each_default()(set).call(set, realKey => {
            newDataSource.push(this._getRecord(realKey));
          });
        }
      });
    } else {
      newDataSource.push(...dataSource);
    }

    return {
      groups,
      dataSource: newDataSource
    };
  }
  /**
   * sort data
   *
   * @param {Array} dataSource
   * @param {Array} sorters
   * @returns {Array}
   */


  sortDataSource(dataSource, sorters) {
    each_default()(sorters, sorterObj => {
      var _context2;

      // const sorterObj = last(sorters) || {};
      const {
        sorter,
        sortOrder,
        defaultSortOrder,
        sortChildrenRecord
      } = sorterObj;
      const currentSortOrder = this.isSortOrderValid(sortOrder) ? sortOrder : defaultSortOrder;

      if (isFunction_default()(sorter) && currentSortOrder && includes_default()(_context2 = table_constants_strings.SORT_DIRECTIONS).call(_context2, currentSortOrder)) {
        if (sortChildrenRecord) {
          const childrenRecordName = this.getProp('childrenRecordName');
          dataSource = dataSource && map_default()(dataSource).call(dataSource, record => {
            const children = this._getRecordChildren(record);

            if (is_array_default()(children) && children.length) {
              return assign_default()(assign_default()({}, record), {
                [childrenRecordName]: this.sortDataSource(children, [sorterObj])
              });
            }

            return record;
          });
        }

        sort_default()(dataSource).call(dataSource, withOrderSort(sorter, currentSortOrder));

        return false;
      }

      return undefined;
    });

    return dataSource;
  }
  /**
   * filter data source
   *
   * @param {*[]} dataSource
   * @param {*[]} filters
   * @returns {*[]}
   */


  filterDataSource(dataSource, filters) {
    let filteredData = null;
    let hasValidFilters = false;
    const childrenRecordName = this.getProp('childrenRecordName');

    each_default()(filters, filterObj => {
      const {
        onFilter,
        filteredValue,
        filterChildrenRecord,
        defaultFilteredValue
      } = filterObj;
      const currentFilteredValue = is_array_default()(filteredValue) ? filteredValue : defaultFilteredValue;

      if (typeof onFilter === 'function' && is_array_default()(currentFilteredValue) && currentFilteredValue.length) {
        hasValidFilters = true;

        if (filteredData === null) {
          filteredData = new core_js_stable_map_default.a();
        } else {
          dataSource = from_default()(filteredData && instance_values_default()(filteredData).call(filteredData));
          filteredData = new core_js_stable_map_default.a();
        }

        each_default()(currentFilteredValue, value => {
          each_default()(dataSource, record => {
            const childrenRecords = get_default()(record, childrenRecordName);

            const recordKey = this.getRecordKey(record);
            let filteredChildren;

            if (is_array_default()(childrenRecords) && childrenRecords.length && filterChildrenRecord) {
              filteredChildren = this.filterDataSource(childrenRecords, [filterObj]);
            }

            if (is_array_default()(filteredChildren) && filteredChildren.length) {
              if (recordKey != null) {
                const children = get_default()(filteredData.get(recordKey), childrenRecordName, []);

                filteredData.set(recordKey, assign_default()(assign_default()({}, record), {
                  [childrenRecordName]: reduce_default()(filteredChildren).call(filteredChildren, (arr, cur) => {
                    if (find_default()(arr).call(arr, item => this.getRecordKey(item) === this.getRecordKey(cur)) == null) {
                      arr.push(cur);
                    }

                    return arr;
                  }, [...children])
                }));
              }
            } else if (onFilter(value, record)) {
              filteredData.set(recordKey, record);
            }
          });
        });
      }
    });

    if (hasValidFilters) {
      dataSource = from_default()(filteredData && instance_values_default()(filteredData).call(filteredData));
    }

    return dataSource;
  }

  limitPageDataSource(dataSource, pagination) {
    dataSource = dataSource == null ? this.getProp('dataSource') : dataSource;
    pagination = pagination == null ? this.getState('pagination') : pagination;
    let pageData = dataSource;

    const pageNo = get_default()(pagination, 'currentPage');

    if (this.getProp('pagination') !== false && pageNo && dataSource && pagination && !this._pagerIsControlled()) {
      const {
        pageSize = table_constants_numbers.DEFAULT_PAGE_SIZE
      } = pagination;
      const start = (pageNo - 1) * pageSize;
      const end = pageNo * pageSize;
      pageData = lodash_slice_default()(dataSource, start, end);
    }

    return pageData;
  }

  normalizePagination(pagination, dataSource) {
    pagination = pagination == null ? this._getPagination() : pagination;
    dataSource = dataSource == null ? this._getDataSource() : dataSource;
    const propPagination = this.getProp('pagination');

    if (pagination) {
      pagination = typeof pagination === 'object' ? assign_default()({}, pagination) : {};
      pagination = merge_default()({
        total: dataSource && dataSource.length || 0,
        pageSize: table_constants_numbers.DEFAULT_PAGE_SIZE,
        currentPage: get_default()(propPagination, 'defaultCurrentPage', 1),
        position: table_constants_strings.PAGINATION_POSITIONS[0]
      }, pagination);

      if (!this._pagerIsControlled()) {
        const total = get_default()(propPagination, 'total', dataSource.length);

        const pageSize = get_default()(propPagination, 'pageSize', pagination.pageSize);

        const {
          currentPage
        } = pagination;
        const realTotalPage = Math.ceil(total / pageSize);
        pagination.total = total;

        if (currentPage > realTotalPage) {
          pagination.currentPage = 1;
        }
      }
    }

    return pagination;
  }

  setAdapterPageData() {
    let pageData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const {
      pagination,
      dataSource,
      disabledRowKeys,
      allRowKeys,
      groups
    } = pageData;

    this._adapter.setDisabledRowKeys(disabledRowKeys);

    this._adapter.setAllRowKeys(allRowKeys);

    this._adapter.setPagination(pagination);

    this._adapter.setGroups(groups);

    this._adapter.setDataSource(dataSource);
  }

  destroy() {}

  handleClick(e) {}

  handleMouseEnter(e) {}

  handleMouseLeave(e) {}

  stopPropagation(e) {
    if (e && typeof e === 'object') {
      if (typeof e.stopPropagation === 'function') {
        e.stopPropagation();
      }

      if (e.nativeEvent && typeof e.nativeEvent.stopPropagation === 'function') {
        e.nativeEvent.stopPropagation();
      } else if (typeof e.stopImmediatePropagation === 'function') {
        e.stopImmediatePropagation();
      }
    }
  }
  /**
   * Add non-repeating elements to the array itself
   * @param {Array} srcArr
   * @param {Object} objArrs
   */


  _addNoDuplicatedItemsToArr() {
    let srcArr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    for (var _len = arguments.length, objArrs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      objArrs[_key - 1] = arguments[_key];
    }

    for (const objArr of objArrs) {
      if (is_array_default()(objArr)) {
        for (const item of objArr) {
          if (!includes_default()(srcArr).call(srcArr, item)) {
            srcArr.push(item);
          }
        }
      }
    }

    return srcArr;
  }

  _notifyChange(pagination, filters, sorter, extra) {
    pagination = pagination == null ? this._getPagination() : pagination;
    filters = filters == null ? this._getAllFilters() : filters;
    sorter = sorter == null ? this._getAllSorters()[0] : sorter;

    if (get_default()(this.getProp('scroll'), 'scrollToFirstRowOnChange')) {
      this._adapter.resetScrollY();
    }

    this._adapter.notifyChange({
      pagination: assign_default()({}, pagination),
      filters: [...filters],
      sorter,
      extra: assign_default()({}, extra)
    });
  }

  _rowExpansionIsControlled() {
    return is_array_default()(this.getProp('expandedRowKeys'));
  }

  _pagerIsControlled() {
    return get_default()(this.getProp('pagination'), 'currentPage') != null;
  }

  _selectionIsControlled() {
    return is_array_default()(get_default()(this.getProp('rowSelection'), 'selectedRowKeys'));
  }
  /**
   * Determine whether the column sorting is controlled
   * Controlled: the column passed the sortOrder prop
   * @param {String} dataIndex
   * @returns {Boolean}
   */


  _sorterIsControlled(dataIndex) {
    // The basis for judgment should be props columns instead of cachedColumns fix#1141
    const query = dataIndex && this.getQuery(dataIndex, this.getState('flattenColumns'));
    return Boolean(query && query.sortOrder != null);
  }
  /**
   * Determine whether the column is filtered and controlled
   * Controlled: the column passed the filteredValue prop
   * @param {String} dataIndex
   * @returns {Boolean}
   */


  _filterIsControlled(dataIndex) {
    const query = dataIndex && this.getQuery(dataIndex, this.getState('flattenColumns'));
    return Boolean(query && is_array_default()(query.filteredValue));
  }

  _filterShowIsControlled(dataIndex) {
    const query = dataIndex && this.getQuery(dataIndex, this.getState('flattenColumns'));
    return Boolean(query && (query.filterDropdownVisible === true || query.filterDropdownVisible === false));
  }

  _getSelectedRowKeys() {
    const rowSelection = this.getState('rowSelection');

    const selectedRowKeys = get_default()(rowSelection, 'selectedRowKeys', []);

    return [...selectedRowKeys];
  }

  _getSelectedRowKeysSet() {
    const rowSelection = this.getState('rowSelection');

    const selectedRowKeysSet = get_default()(rowSelection, 'selectedRowKeysSet', new set_default.a());

    return selectedRowKeysSet;
  }

  _getDataSource() {
    return this.getProp('dataSource') || [];
  }

  _getRecord(realKey) {
    return lodash_find_default()(this.getProp('dataSource'), record => realKey != null && realKey !== '' && this.getRecordKey(record) === realKey);
  }

  _getRecordChildren(record) {
    return get_default()(record, this.getProp('childrenRecordName'));
  }

  _getPagination() {
    return this.getState('pagination') || {};
  }

  _getAllFilters(queries) {
    queries = queries || this.getState('queries');
    const filters = [];

    each_default()(queries, query => {
      if (is_array_default()(query.filteredValue) && (query.filteredValue.length || this._filterIsControlled(query.dataIndex))) {
        filters.push(query);
      }
    });

    return filters;
  }

  _getAllSorters(queries) {
    queries = queries || this.getState('queries');
    return lodash_filter_default()(queries, query => query.sorter && query.sortOrder);
  }

  _filterQueries(targetQuery, queries) {
    let keys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['dataIndex'];
    queries = queries == null ? this.getState('queries') : queries;
    const filteredQueries = [];
    const filteredIndexes = [];

    each_default()(queries, (itQuery, index) => {
      const flag = lodash_some_default()(keys, k => k && targetQuery[k] != null && targetQuery[k] === itQuery[k]);

      if (flag) {
        filteredQueries.push(itQuery);
        filteredIndexes.push(index);
      }
    });

    return {
      filteredQueries,
      filteredIndexes
    };
  }

  _mergeToQueries(query, queries) {
    let keys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['dataIndex'];
    queries = queries == null ? this.getState('queries') : queries;
    queries = [...queries];
    query = assign_default()({}, query);

    const {
      filteredQueries,
      filteredIndexes
    } = this._filterQueries(query, queries, keys);

    each_default()(filteredQueries, (curQuery, idx) => {
      // assign(curQuery, query);
      queries[filteredIndexes[idx]] = assign_default()({}, query);
    });

    return queries;
  }
  /**
   * get record real key
   * @param {RecordType} record
   * @returns {string}
   */


  getRecordKey(record) {
    if (!record) {
      return undefined;
    }

    const rowKey = this.getProp('rowKey');
    return typeof rowKey === 'function' ? rowKey(record) : get_default()(record, rowKey);
  }

  isEmpty(dataSource) {
    dataSource = dataSource == null ? this.getProp('dataSource') : dataSource;
    return !(is_array_default()(dataSource) && dataSource.length > 0);
  }

  handleSelectRow(realKey, selected, e) {
    this.stopPropagation(e);

    if (typeof selected === 'boolean' && realKey != null) {
      const selectedRowKeys = this._getSelectedRowKeys();

      let foundIdx = -1;
      const selectedRow = this.getSelectedRows(null, [realKey])[0];
      let selectedRows;

      if ((foundIdx = index_of_default()(selectedRowKeys).call(selectedRowKeys, realKey)) > -1 && selected === false) {
        splice_default()(selectedRowKeys).call(selectedRowKeys, foundIdx, 1);

        selectedRows = this.getSelectedRows(null, selectedRowKeys);

        if (!this._selectionIsControlled()) {
          this._adapter.setSelectedRowKeys(selectedRowKeys);
        }

        this._adapter.notifySelect(selectedRow, selected, selectedRows, e);

        this._adapter.notifySelectionChange(selectedRowKeys, selectedRows);
      } else if (index_of_default()(selectedRowKeys).call(selectedRowKeys, realKey) === -1 && selected === true) {
        selectedRowKeys.push(realKey);
        selectedRows = this.getSelectedRows(null, selectedRowKeys);

        if (!this._selectionIsControlled()) {
          this._adapter.setSelectedRowKeys(selectedRowKeys);
        }

        this._adapter.notifySelect(selectedRow, selected, selectedRows, e);

        this._adapter.notifySelectionChange(selectedRowKeys, selectedRows);
      }
    }
  }
  /**
   * select all rows
   * @param {*} selected The future state of the select all button
   * @param {*} e
   */


  handleSelectAllRow(selected, e) {
    this.stopPropagation(e);

    if (typeof selected === 'boolean') {
      const curSelectedRowKeys = this._getSelectedRowKeys();

      let selectedRowKeys = [...curSelectedRowKeys];

      const selectedRowKeysSet = this._getSelectedRowKeysSet();

      let allRowKeys = [...this._adapter.getCachedFilteredSortedRowKeys()];
      const disabledRowKeys = this.getAllDisabledRowKeys();
      const disabledRowKeysSet = new set_default.a(disabledRowKeys);
      let changedRowKeys; // Select all, if not disabled && not in selectedRowKeys

      if (selected) {
        for (const key of allRowKeys) {
          if (!disabledRowKeysSet.has(key) && !selectedRowKeysSet.has(key)) {
            selectedRowKeys.push(key);
          }
        }

        allRowKeys = array_pullAll(allRowKeys, [...disabledRowKeys, ...curSelectedRowKeys]);
        changedRowKeys = [...allRowKeys];
      } else {
        selectedRowKeys = array_pullAll(selectedRowKeys, allRowKeys);
        changedRowKeys = [...curSelectedRowKeys];
      }

      const changedRows = this.getSelectedRows(null, changedRowKeys || []);
      const selectedRows = this.getSelectedRows(null, selectedRowKeys || []);

      if (!this._selectionIsControlled()) {
        this._adapter.setSelectedRowKeys(selectedRowKeys);
      }

      this._adapter.notifySelectAll(selected, selectedRows, changedRows, e);

      this._adapter.notifySelectionChange(selectedRowKeys, selectedRows);
    }
  }
  /**
   * row keys => rows
   * @param {*} dataSource
   * @param {*} selectedRowKeys
   * @param {*} selectedRowKeysSet Recursive optimization
   */


  getSelectedRows(dataSource, selectedRowKeys, selectedRowKeysSet) {
    dataSource = dataSource == null ? this._getDataSource() : dataSource;
    selectedRowKeys = selectedRowKeys == null ? this._getSelectedRowKeys() : selectedRowKeys;

    if (!isSet_default()(selectedRowKeysSet)) {
      selectedRowKeysSet = new set_default.a(selectedRowKeys);
    }

    const childrenRecordName = this.getProp('childrenRecordName');
    const selectedRows = [];

    if (isSet_default()(selectedRowKeysSet) && selectedRowKeysSet.size && is_array_default()(dataSource) && dataSource.length) {
      // Time complexity optimization, replace the includes operation of array with has of set
      selectedRows.push(...filter_default()(dataSource).call(dataSource, data => selectedRowKeysSet.has(this.getRecordKey(data))));

      if (selectedRows.length < selectedRowKeys.length) {
        for (const item of dataSource) {
          const children = get_default()(item, childrenRecordName);

          if (is_array_default()(children) && children.length) {
            const rows = this.getSelectedRows(children, selectedRowKeys, selectedRowKeysSet);
            selectedRows.push(...rows);
          }
        }
      }
    }

    return selectedRows;
  }

  getAllDisabledRowKeys(dataSource, getCheckboxProps) {
    dataSource = dataSource == null ? this._getDataSource() : dataSource;
    getCheckboxProps = getCheckboxProps == null ? get_default()(this.getProp('rowSelection'), 'getCheckboxProps') : getCheckboxProps;
    const childrenRecordName = this.getProp('childrenRecordName');
    const disabledRowKeys = [];

    if (is_array_default()(dataSource) && dataSource.length && typeof getCheckboxProps === 'function') {
      for (const record of dataSource) {
        const props = getCheckboxProps(record);

        if (props && props.disabled) {
          disabledRowKeys.push(this.getRecordKey(record));
        }

        const children = get_default()(record, childrenRecordName);

        if (is_array_default()(children) && children.length) {
          const keys = this.getAllDisabledRowKeys(children, getCheckboxProps);
          disabledRowKeys.push(...keys);
        }
      }
    }

    return disabledRowKeys;
  }

  getAllRowKeys(dataSource) {
    dataSource = dataSource == null ? this._getDataSource() : dataSource;
    const childrenRecordName = this.getProp('childrenRecordName');
    const allRowKeys = [];

    if (is_array_default()(dataSource) && dataSource.length) {
      for (const record of dataSource) {
        const childrenRowKeys = [];

        const children = get_default()(record, childrenRecordName);

        if (is_array_default()(children) && children.length) {
          childrenRowKeys.push(...this.getAllRowKeys(children));
        }

        allRowKeys.push(this.getRecordKey(record), ...childrenRowKeys);
      }
    }

    return allRowKeys;
  }
  /**
   * Check if the selected item is in allRowKeysSet
   * @param {Array} selectedRowKeys
   * @param {Set} allRowKeysSet
   */


  hasRowSelected(selectedRowKeys, allRowKeysSet) {
    return Boolean(is_array_default()(selectedRowKeys) && selectedRowKeys.length && isSet_default()(allRowKeysSet) && allRowKeysSet.size && filter_default()(selectedRowKeys).call(selectedRowKeys, key => allRowKeysSet.has(key)).length);
  }
  /**
   * expand processing function
   * @param {Boolean} expanded
   * @param {String} realKey
   * @param {Event} domEvent
   */


  handleRowExpanded(expanded, realKey, domEvent) {
    this.stopPropagation(domEvent);
    const expandedRowKeys = [...this.getState('expandedRowKeys')];

    const index = index_of_default()(expandedRowKeys).call(expandedRowKeys, realKey);

    const keyIsValid = typeof realKey === 'string' || typeof realKey === 'number';

    if (keyIsValid && expanded && index === -1) {
      expandedRowKeys.push(realKey);
    } else if (keyIsValid && !expanded && index > -1) {
      splice_default()(expandedRowKeys).call(expandedRowKeys, index, 1);
    }

    if (!this._rowExpansionIsControlled()) {
      this._adapter.setExpandedRowKeys(expandedRowKeys);
    }

    const expandedRows = this.getSelectedRows(null, expandedRowKeys);
    let expandedRow = this.getSelectedRows(null, [realKey])[0]; // groups record processing

    const groups = this._getGroups();

    if (groups) {
      // Construct group expandRow
      if (groups.has(realKey)) {
        expandedRow = {
          groupKey: realKey
        };
      } // If expandedRowKeys includes groupKey, add to expandedRows


      for (let i = 0, len = expandedRowKeys.length; i < len; i++) {
        if (groups.has(realKey)) {
          expandedRows.push({
            groupKey: expandedRowKeys[i]
          });
        }
      }
    }

    this._adapter.notifyExpand(expanded, expandedRow, domEvent);

    this._adapter.notifyExpandedRowsChange(expandedRows);
  }
  /**
   * get state.groups
   * @returns {Map|Null}
   */


  _getGroups() {
    const groupBy = this._adapter.getProp('groupBy');

    if (groupBy !== null) {
      const groups = this._adapter.getState('groups');

      return groups;
    }

    return null;
  }
  /**
   * Determine whether you have selected all except for disabled
   * @param {Set} selectedRowKeysSet
   * @param {Set} disabledRowKeysSet
   * @param {Array} allKeys keys after sorted and filtered
   */


  allIsSelected(selectedRowKeysSet, disabledRowKeysSet, allKeys) {
    const filteredAllKeys = lodash_filter_default()(allKeys, key => key != null && !disabledRowKeysSet.has(key));

    if (filteredAllKeys && filteredAllKeys.length) {
      for (const key of filteredAllKeys) {
        if (key != null && !selectedRowKeysSet.has(key)) {
          return false;
        }
      }

      return true;
    } else {
      return false;
    }
  }
  /**
   * This function is not used yet
   * @param {*} selectedRowKeys
   * @param {*} allKeys
   */


  allIsNotSelected(selectedRowKeys, allKeys) {
    for (const key of allKeys) {
      if (key != null && is_array_default()(selectedRowKeys) && includes_default()(selectedRowKeys).call(selectedRowKeys, key)) {
        return true;
      }
    }

    return false;
  }

  formatPaginationInfo() {
    let pagination = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let defaultPageText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    let info = '';

    const formatPageText = get_default()(this.getProp('pagination'), 'formatPageText');

    const {
      total,
      pageSize,
      currentPage
    } = pagination;
    const currentStart = Math.min((currentPage - 1) * pageSize + 1, total);
    const currentEnd = Math.min(currentPage * pageSize, total);

    if (formatPageText || formatPageText !== false && defaultPageText && total > 0) {
      info = typeof formatPageText === 'function' ? formatPageText({
        currentStart,
        currentEnd,
        total
      }) : defaultPageText.replace('${currentStart}', currentStart).replace('${currentEnd}', currentEnd).replace('${total}', total);
    }

    return info;
  }

  toggleShowFilter(dataIndex, visible) {
    let filterObj = this.getQuery(dataIndex);
    const filterDropdownVisible = visible; // eslint-disable-next-line @typescript-eslint/no-unused-vars

    filterObj = assign_default()(assign_default()({}, filterObj), {
      filterDropdownVisible
    });

    if (!this._filterShowIsControlled()) {// this._adapter.setQuery({
      //     ...filterObj,
      //     filterDropdownVisible,
      // });
    }

    this._adapter.notifyFilterDropdownVisibleChange(filterDropdownVisible, dataIndex);
  }
  /**
   * Called when the filter changes
   * @param {*} dataIndex
   * @param {*} data
   */


  handleFilterSelect(dataIndex) {
    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let query = this.getQuery(dataIndex);
    let queries = [...this._adapter.getState('queries')];
    const {
      filteredValue
    } = data;
    query = assign_default()(assign_default()({}, query), {
      filteredValue
    });
    queries = mergeQueries(query, queries);

    const mergedQueries = this._mergeToQueries(query, null);

    const filters = this._getAllFilters(mergedQueries);

    if (!this._filterIsControlled(dataIndex)) {
      this._adapter.setQueries(queries);

      this.handleClickFilterOrSorter(queries);
    }

    this._notifyChange(null, filters);
  }
  /**
   * Click the sort button to call
   * @param {*} column
   * @param {*} e
   */


  handleSort() {
    let column = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let e = arguments.length > 1 ? arguments[1] : undefined;
    this.stopPropagation(e);
    const {
      dataIndex
    } = column;
    let queries = this.getState('queries');
    let curQuery = null;
    queries = [...queries];

    each_default()(queries, (query, idx, arr) => {
      if (query.sorter) {
        const sorterObj = assign_default()({}, query);

        const stateSortOrder = get_default()(sorterObj, 'sortOrder');

        const defaultSortOrder = get_default()(sorterObj, 'defaultSortOrder', false);

        let querySortOrder = this.isSortOrderValid(stateSortOrder) ? stateSortOrder : defaultSortOrder;

        if (dataIndex && dataIndex === sorterObj.dataIndex) {
          if (querySortOrder === table_constants_strings.SORT_DIRECTIONS[0]) {
            querySortOrder = table_constants_strings.SORT_DIRECTIONS[1];
          } else if (querySortOrder === table_constants_strings.SORT_DIRECTIONS[1]) {
            querySortOrder = false;
          } else {
            querySortOrder = table_constants_strings.SORT_DIRECTIONS[0];
          }
        } else {
          // This results in the current click only supports single column sorting
          querySortOrder = false;
        }

        arr[idx] = assign_default()(assign_default()({}, sorterObj), {
          sortOrder: querySortOrder
        });

        if (dataIndex === sorterObj.dataIndex) {
          curQuery = arr[idx];
        }
      }
    });

    if (!this._sorterIsControlled(dataIndex)) {
      this._adapter.setQueries(queries);

      this.handleClickFilterOrSorter(queries);
    } // notify sort event


    this._notifyChange(null, null, curQuery, null);
  }
  /**
   * Recalculate the cached data after clicking filter or sorter
   * @param {*} queries
   */


  handleClickFilterOrSorter(queries) {
    const dataSource = [...this.getProp('dataSource')];
    const sortedDataSource = this.getFilteredSortedDataSource(dataSource, queries);
    this.setCachedFilteredSortedDataSource(sortedDataSource);
    const pageData = this.getCurrentPageData(sortedDataSource);
    this.setAdapterPageData(pageData);
  }

  getQuery(dataIndex, queries) {
    queries = queries || this.getState('queries');

    if (dataIndex != null) {
      return lodash_find_default()(queries, query => query.dataIndex === dataIndex);
    }

    return undefined;
  }

  getCellWidths(flattenedColumns, flattenedWidths, ignoreScrollBarKey) {
    return this._adapter.getCellWidths(flattenedColumns, flattenedWidths, ignoreScrollBarKey);
  }

  setHeadWidths(headWidths, index) {
    return this._adapter.setHeadWidths(headWidths, index);
  }

  getHeadWidths(index) {
    return this._adapter.getHeadWidths(index);
  }

  mergedRowExpandable(record) {
    return this._adapter.mergedRowExpandable(record);
  }

  setBodyHasScrollbar(bodyHasScrollbar) {
    this._adapter.setBodyHasScrollbar(bodyHasScrollbar);
  }

}

/* harmony default export */ var table_foundation = (foundation_TableFoundation);
// EXTERNAL MODULE: ../semi-foundation/table/table.scss
var table_table = __webpack_require__("J61X");

// CONCATENATED MODULE: ./table/ColumnShape.ts


/* harmony default export */ var ColumnShape = ({
  align: prop_types_default.a.oneOf(table_constants_strings.ALIGNS),
  className: prop_types_default.a.string,
  colSpan: prop_types_default.a.number,
  dataIndex: prop_types_default.a.string,
  defaultSortOrder: prop_types_default.a.oneOf(table_constants_strings.SORT_DIRECTIONS),
  filterChildrenRecord: prop_types_default.a.bool,
  filterDropdownProps: prop_types_default.a.object,
  filterDropdown: prop_types_default.a.node,
  filterDropdownVisible: prop_types_default.a.bool,
  filterIcon: prop_types_default.a.func,
  filterMultiple: prop_types_default.a.bool,
  filteredValue: prop_types_default.a.arrayOf(prop_types_default.a.any),
  filters: prop_types_default.a.array,
  fixed: prop_types_default.a.oneOf(table_constants_strings.FIXED_SET),
  onCell: prop_types_default.a.func,
  onFilter: prop_types_default.a.func,
  onFilterDropdownVisibleChange: prop_types_default.a.func,
  onHeaderCell: prop_types_default.a.func,
  onSorterChange: prop_types_default.a.func,
  render: prop_types_default.a.func,
  renderFilterDropdownItem: prop_types_default.a.func,
  sortChildrenRecord: prop_types_default.a.bool,
  sortDirections: prop_types_default.a.arrayOf(prop_types_default.a.string),
  sortOrder: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.string]),
  sorter: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.func]),
  title: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.node]),
  useFullRender: prop_types_default.a.bool,
  width: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string])
});
// CONCATENATED MODULE: ./table/Column.tsx



class Column_Column extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
  constructor() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super(props);
  }

  render() {
    return null;
  }

}
Column_Column.propTypes = assign_default()({}, ColumnShape);
// CONCATENATED MODULE: ./table/getColumns.tsx








/**
 * Convert jsx children into object columns
 * @param {Node} children
 * @returns
 */
function getColumns(children) {
  if (children) {
    var _context;

    const columns = [];

    for_each_default()(_context = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children).call(_context, children, child => {
      if ( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(child) && (child.type === Column_Column || get_default()(child, 'type.name') === Column_Column.name)) {
        const col = omit_default()(child.props, ['children']);

        if (is_array_default()(child.props.children) && child.props.children.length) {
          col.children = getColumns(child.props.children);
        }

        columns.push(assign_default()({
          key: child.key
        }, col));
      }
    });

    return columns;
  }

  return [];
}
// CONCATENATED MODULE: ./table/table-context.ts


/* eslint-disable max-len */

const TableContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext({
  headWidths: [],
  setHeadWidths: noop_default.a,
  handleRowExpanded: noop_default.a
});
/* harmony default export */ var table_context = (TableContext);
// CONCATENATED MODULE: ./table/TableContextProvider.tsx



const TableContextProvider = _ref => {
  let {
    children,
    anyColumnFixed,
    flattenedColumns,
    tableWidth,
    headWidths,
    setHeadWidths,
    getHeadWidths,
    getCellWidths,
    handleRowExpanded,
    renderExpandIcon,
    renderSelection,
    getVirtualizedListRef,
    setBodyHasScrollbar
  } = _ref;
  const tableContextValue = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useMemo"])(() => ({
    anyColumnFixed,
    flattenedColumns,
    renderExpandIcon,
    renderSelection,
    setHeadWidths,
    getHeadWidths,
    getCellWidths,
    headWidths,
    tableWidth,
    handleRowExpanded,
    getVirtualizedListRef,
    setBodyHasScrollbar
  }), [anyColumnFixed, flattenedColumns, renderExpandIcon, renderSelection, setHeadWidths, getHeadWidths, getCellWidths, headWidths, tableWidth, handleRowExpanded, getVirtualizedListRef, setBodyHasScrollbar]);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(table_context.Provider, {
    value: tableContextValue
  }, children);
};

/* harmony default export */ var table_TableContextProvider = (TableContextProvider);
// CONCATENATED MODULE: ../semi-foundation/table/tableSelectionCellFoundation.ts

class tableSelectionCellFoundation_TableSelectionCellFoundation extends foundation {
  handleChange(e) {
    const value = e.target.checked;

    this._adapter.notifyChange(value, e);
  }

}
// CONCATENATED MODULE: ./table/ColumnSelection.tsx



/* eslint-disable max-len */







/**
 * render selection cell
 */

class ColumnSelection_TableSelectionCell extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.handleChange = e => this.foundation.handleChange(e);

    this.foundation = new tableSelectionCellFoundation_TableSelectionCellFoundation(this.adapter);
  }

  get adapter() {
    var _this = this;

    return assign_default()(assign_default()({}, super.adapter), {
      notifyChange: function () {
        return _this.props.onChange(...arguments);
      }
    });
  }

  render() {
    const {
      selected,
      getCheckboxProps,
      indeterminate,
      disabled,
      prefixCls,
      className
    } = this.props;
    const ariaLabel = this.props['aria-label'];
    let checkboxProps = {
      onChange: this.handleChange,
      disabled,
      indeterminate,
      checked: selected
    };

    if (typeof getCheckboxProps === 'function') {
      checkboxProps = assign_default()(assign_default()({}, checkboxProps), getCheckboxProps());
    }

    const wrapCls = classnames_default()("".concat(prefixCls, "-selection-wrap"), {
      ["".concat(prefixCls, "-selection-disabled")]: disabled
    }, className);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: wrapCls
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(checkbox_checkbox_0, assign_default()({
      "aria-label": ariaLabel
    }, checkboxProps)));
  }

}
ColumnSelection_TableSelectionCell.propTypes = {
  columnTitle: prop_types_default.a.string,
  getCheckboxProps: prop_types_default.a.func,
  type: prop_types_default.a.string,
  onChange: prop_types_default.a.func,
  selected: prop_types_default.a.bool,
  disabled: prop_types_default.a.bool,
  indeterminate: prop_types_default.a.bool,
  prefixCls: prop_types_default.a.string,
  className: prop_types_default.a.string,
  'aria-label': prop_types_default.a.string
};
ColumnSelection_TableSelectionCell.defaultProps = {
  disabled: false,
  onChange: noop_default.a,
  prefixCls: table_constants_cssClasses.PREFIX
};
// CONCATENATED MODULE: ./table/TablePagination.tsx




/* eslint-disable max-len */




class TablePagination_TablePagination extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    const {
      pagination,
      prefixCls,
      info,
      renderPagination
    } = this.props;

    const total = get_default()(pagination, 'total');

    const customPagination = renderPagination && isFunction_default()(renderPagination) ? renderPagination(pagination) : null;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-pagination-outer")
    }, /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(customPagination) ? customPagination : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(prefixCls, "-pagination-info")
    }, info), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(prefixCls, "-pagination-wrapper")
    }, total > 0 ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(pagination_Pagination, assign_default()({}, pagination, {
      key: get_default()(pagination, 'pageSize', 'pagination')
    })) : null)));
  }

}
TablePagination_TablePagination.propTypes = {
  style: prop_types_default.a.object,
  prefixCls: prop_types_default.a.string,
  pagination: prop_types_default.a.object,
  info: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node]),
  renderPagination: prop_types_default.a.func
};
TablePagination_TablePagination.defaultProps = {
  prefixCls: table_constants_cssClasses.PREFIX
};
// CONCATENATED MODULE: ./table/ColumnFilter.tsx









/* eslint-disable no-nested-ternary */

/* eslint-disable eqeqeq */








function renderDropdown() {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let nestedElem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  let level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  const {
    filterMultiple = true,
    filters = [],
    filteredValue = [],
    filterDropdownVisible,
    onSelect = noop_default.a,
    onFilterDropdownVisibleChange = noop_default.a,
    trigger = 'click',
    position = 'bottom',
    renderFilterDropdownItem
  } = props;

  const dropdownProps = assign_default()(assign_default()({}, props), {
    onVisibleChange: visible => onFilterDropdownVisibleChange(visible),
    trigger,
    position,
    render: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dropdown_0.Menu, null, is_array_default()(filters) && map_default()(filters).call(filters, (filter, index) => {
      var _context;

      const changeFn = e => {
        const domEvent = e && e.nativeEvent;

        if (domEvent) {
          // Block this event to prevent the pop-up layer from closing
          domEvent.stopImmediatePropagation(); // Prevent bubbling and default events to prevent label click events from triggering twice

          domEvent.stopPropagation();
          domEvent.preventDefault();
        }

        let values = [...filteredValue];

        const included = includes_default()(values).call(values, filter.value);

        const idx = index_of_default()(values).call(values, filter.value);

        if (idx > -1) {
          splice_default()(values).call(values, idx, 1);
        } else if (filterMultiple) {
          values.push(filter.value);
        } else {
          values = [filter.value];
        }

        return onSelect({
          value: filter.value,
          filteredValue: values,
          included: !included,
          domEvent
        });
      };

      const checked = includes_default()(filteredValue).call(filteredValue, filter.value);

      const {
        text
      } = filter;
      const {
        value
      } = filter;

      const key = concat_default()(_context = "".concat(level, "_")).call(_context, index);

      const dropdownItem = typeof renderFilterDropdownItem === 'function' ? renderFilterDropdownItem({
        onChange: changeFn,
        filterMultiple,
        value,
        text,
        checked,
        filteredValue,
        level
      }) : null;
      let item = dropdownItem && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(dropdownItem) ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(dropdownItem, {
        key
      }) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dropdown_0.Item, {
        key: key,
        onClick: changeFn
      }, filterMultiple ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(checkbox_checkbox_0, {
        checked: checked
      }, text) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(radio_radio_0, {
        checked: checked
      }, text));

      if (is_array_default()(filter.children) && filter.children.length) {
        const childrenDropdownProps = assign_default()(assign_default()({}, props), {
          filters: filter.children,
          trigger: 'hover',
          position: 'right'
        });

        delete childrenDropdownProps.filterDropdownVisible;
        item = renderDropdown(childrenDropdownProps, item, level + 1);
      }

      return item;
    }))
  });

  if (filterDropdownVisible != null) {
    dropdownProps.visible = filterDropdownVisible;
  }

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dropdown_0, assign_default()({}, dropdownProps, {
    key: "Dropdown_level_".concat(level)
  }), nestedElem);
}

function ColumnFilter() {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const {
    prefixCls = table_constants_cssClasses.PREFIX,
    filteredValue,
    filterIcon = 'filter',
    renderFilterDropdown,
    filterDropdownProps
  } = props;
  let {
    filterDropdown = null
  } = props;
  const finalCls = classnames_default()("".concat(prefixCls, "-column-filter"), {
    on: is_array_default()(filteredValue) && filteredValue.length
  });
  let iconElem;

  if (typeof filterIcon === 'function') {
    iconElem = filterIcon(is_array_default()(filteredValue) && filteredValue.length > 0);
  } else if ( /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(filterIcon)) {
    iconElem = filterIcon;
  } else {
    iconElem = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: finalCls
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconFilter, {
      role: "button",
      "aria-label": "Filter data with this column",
      "aria-haspopup": "listbox",
      tabIndex: -1,
      size: "small"
    }));
  }

  const renderProps = assign_default()(assign_default()({}, props), filterDropdownProps);

  filterDropdown = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(filterDropdown) ? filterDropdown : typeof renderFilterDropdown === 'function' ? renderFilterDropdown(renderProps, {
    iconElem
  }) : renderDropdown(renderProps, iconElem);
  return filterDropdown;
}
// CONCATENATED MODULE: ./table/ColumnSorter.tsx








class ColumnSorter_ColumnSorter extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    const {
      prefixCls,
      onClick,
      sortOrder,
      style
    } = this.props;
    const iconBtnSize = 'small';
    const upCls = classnames_default()("".concat(prefixCls, "-column-sorter-up"), {
      on: sortOrder === table_constants_strings.SORT_DIRECTIONS[0]
    });
    const downCls = classnames_default()("".concat(prefixCls, "-column-sorter-down"), {
      on: sortOrder === table_constants_strings.SORT_DIRECTIONS[1]
    });
    const ariaProps = {
      /**
       * Set 'aria-sort' to aria-columnheader is difficult, so set 'aria-label' about sort info to sorter
       * reference: https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaSort
       */
      'aria-label': "Current sort order is ".concat(sortOrder ? "".concat(sortOrder, "ing") : 'none'),
      'aria-roledescription': 'Sort data with this column'
    };
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
      role: 'button'
    }, ariaProps, {
      tabIndex: -1,
      style: style,
      className: "".concat(prefixCls, "-column-sorter"),
      onClick: onClick,
      onKeyPress: e => utils_isEnterPress(e) && onClick(e)
    }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(upCls)
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconCaretup, {
      size: iconBtnSize
    })), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(downCls)
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconCaretdown, {
      size: iconBtnSize
    })));
  }

}
ColumnSorter_ColumnSorter.propTypes = {
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  onClick: prop_types_default.a.func,
  prefixCls: prop_types_default.a.string,
  sortOrder: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.bool])
};
ColumnSorter_ColumnSorter.defaultProps = {
  prefixCls: table_constants_cssClasses.PREFIX,
  onClick: noop_default.a,
  sortOrder: false
};
// CONCATENATED MODULE: ./motions/Rotate.tsx






const Rotate_formatStyle = function formatStyle(_ref) {
  let {
    rotate = 0
  } = _ref;
  return {
    transform: "rotate(".concat(rotate, "deg)")
  };
};

function Rotate_OpenIconTransition() {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const {
    children,
    isOpen,
    enterDeg = 180,
    fromDeg = 0,
    duration = 150
  } = props;
  const [immediate, setImmediate] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(true);
  Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useEffect"])(() => {
    // eslint-disable-next-line @typescript-eslint/no-implied-eval
    setImmediate(false);
  }, [isOpen]);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Transition_Transition, {
    immediate: immediate,
    state: isOpen ? 'enter' : 'leave',
    from: {
      rotate: fromDeg
    },
    enter: {
      rotate: {
        val: enterDeg,
        duration,
        easing: 'cubic-bezier(.62, .05, .36, .95)'
      }
    },
    leave: {
      rotate: {
        val: fromDeg,
        duration,
        easing: 'cubic-bezier(.62, .05, .36, .95)'
      }
    }
  }, transitionStyle => map_default()(external_root_React_commonjs2_react_commonjs_react_amd_react_["Children"]).call(external_root_React_commonjs2_react_commonjs_react_amd_react_["Children"], children, child => /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(child) ? /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["cloneElement"])(child, assign_default()(assign_default()({}, child.props), {
    style: assign_default()(assign_default()({}, child.props.style), Rotate_formatStyle(transitionStyle))
  })) : child));
}

Rotate_OpenIconTransition.propTypes = {
  isOpen: prop_types_default.a.bool.isRequired,
  children: prop_types_default.a.any.isRequired,
  enterDeg: prop_types_default.a.number,
  fromDeg: prop_types_default.a.number,
  duration: prop_types_default.a.number
};
/* harmony default export */ var Rotate = (Rotate_OpenIconTransition);
// CONCATENATED MODULE: ./table/CustomExpandIcon.tsx


/* eslint-disable react-hooks/exhaustive-deps */






/**
 * render expand icon
 */

function CustomExpandIcon(props) {
  const {
    expanded,
    componentType,
    onClick = noop_default.a,
    onMouseEnter = noop_default.a,
    onMouseLeave = noop_default.a,
    expandIcon,
    prefixCls = table_constants_cssClasses.PREFIX,
    motion = true
  } = props;
  let icon;

  if ( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(expandIcon)) {
    icon = expandIcon;
  } else if (typeof expandIcon === 'function') {
    icon = expandIcon(expanded);
  } else if (componentType === 'tree') {
    icon = expanded && !motion ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconTreeTriangleDown, {
      size: "small"
    }) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconTreeTriangleRight, {
      size: "small"
    });
  } else {
    icon = expanded && !motion ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronDown, null) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronRight, null);
  }

  const handleClick = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useCallback"])(e => {
    if (typeof onClick === 'function') {
      onClick(!expanded, e);
    }
  }, [expanded]);

  if (motion) {
    icon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Rotate, {
      isOpen: expanded,
      enterDeg: 90
    }, icon);
  }

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
    role: "button",
    "aria-label": "Expand this row",
    tabIndex: -1,
    onClick: handleClick,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    className: "".concat(prefixCls, "-expand-icon"),
    onKeyPress: e => utils_isEnterPress(e) && handleClick(e)
  }, icon);
}
CustomExpandIcon.propTypes = {
  expanded: prop_types_default.a.bool,
  componentType: prop_types_default.a.oneOf(['tree', 'expand']),
  onClick: prop_types_default.a.func,
  onMouseEnter: prop_types_default.a.func,
  onMouseLeave: prop_types_default.a.func,
  expandIcon: prop_types_default.a.oneOfType([prop_types_default.a.node, prop_types_default.a.func]),
  prefixCls: prop_types_default.a.string,
  motion: prop_types_default.a.bool
};
CustomExpandIcon.defaultProps = {
  componentType: 'expand',
  onClick: noop_default.a,
  onMouseEnter: noop_default.a,
  onMouseLeave: noop_default.a,
  prefixCls: table_constants_cssClasses.PREFIX
};
// CONCATENATED MODULE: ./table/ColGroup.tsx







class ColGroup_ColGroup extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
  render() {
    var _context;

    const {
      columns,
      className,
      style,
      prefixCls,
      components
    } = this.props; // eslint-disable-next-line @typescript-eslint/no-shadow

    const ColGroup = get_default()(components, 'colgroup.wrapper', 'colgroup');

    const Col = get_default()(components, 'colgroup.col', 'col');

    const cols = map_default()(_context = flattenColumns(columns)).call(_context, (column, idx) => {
      const colStyle = {};
      /**
       * table width
       */

      if (column.width) {
        colStyle.width = column.width;
        colStyle.minWidth = colStyle.width;
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Col, {
        className: classnames_default()("".concat(prefixCls, "-col"), column.className),
        key: column.key || column.dataIndex || idx,
        style: colStyle
      });
    });

    const groupCls = classnames_default()("".concat(prefixCls, "-colgroup"), className);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(ColGroup, {
      className: groupCls,
      style: style
    }, cols);
  }

}
ColGroup_ColGroup.propTypes = {
  columns: prop_types_default.a.array,
  prefixCls: prop_types_default.a.string,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  components: prop_types_default.a.object
};
ColGroup_ColGroup.defaultProps = {
  columns: [],
  prefixCls: table_constants_cssClasses.PREFIX
};
// CONCATENATED MODULE: ./table/TableHeaderRow.tsx












var TableHeaderRow_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable eqeqeq */









class TableHeaderRow_TableHeaderRow extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.cacheRef = node => {
      this.headerNode = node;

      if (node && this.context.setHeadWidths) {
        const {
          prefixCls,
          row,
          index
        } = this.props;
        const cellSelector = ".".concat(prefixCls, "-row-head");
        const heads = node && node.querySelectorAll && node.querySelectorAll(cellSelector);
        this.context.setHeadWidths(lodash_map_default()(heads, (head, headIndex) => {
          let configWidth = get_default()(row, [headIndex, 'column', 'width']);

          const key = get_default()(row, [headIndex, 'column', 'key']);

          if (typeof configWidth !== 'number') {
            configWidth = head && head.getBoundingClientRect().width || 0;
          }

          return {
            width: configWidth,
            key
          };
        }), index);
      }
    };

    this.headerNode = null;
  }

  get adapter() {
    return assign_default()({}, super.adapter);
  }

  componentDidUpdate(prevProps) {
    if (prevProps.columns !== this.props.columns && this.headerNode) {
      this.cacheRef(this.headerNode);
    }
  }

  render() {
    const {
      components,
      row,
      prefixCls,
      onHeaderRow,
      index,
      style,
      columns
    } = this.props;
    const {
      getCellWidths
    } = this.context;
    const slicedColumns = sliceColumnsByLevel(columns, index);
    const headWidths = getCellWidths(slicedColumns);

    const HeaderRow = get_default()(components, 'header.row', 'tr');

    const HeaderCell = get_default()(components, 'header.cell', 'th');

    const rowProps = onHeaderRow(columns, index) || {};

    lodash_set_default()(rowProps, 'className', classnames_default()(get_default()(rowProps, 'className'), "".concat(prefixCls, "-row")));

    const cells = lodash_map_default()(row, (cell, cellIndex) => {
      const {
        column
      } = cell,
            cellProps = TableHeaderRow_rest(cell, ["column"]);

      const customProps = typeof column.onHeaderCell === 'function' ? column.onHeaderCell(column, cellIndex, index) : {};

      let cellStyle = assign_default()({}, customProps.style);

      if (column.align) {
        var _context;

        cellStyle = assign_default()(assign_default()({}, cellStyle), {
          textAlign: column.align
        });
        customProps.className = classnames_default()(customProps.className, column.className, {
          [concat_default()(_context = "".concat(prefixCls, "-align-")).call(_context, column.align)]: Boolean(column.align)
        });
      }

      customProps.className = classnames_default()("".concat(prefixCls, "-row-head"), column.className, customProps.className, // `${prefixCls}-fixed-columns`,
      {
        ["".concat(prefixCls, "-cell-fixed-left")]: isFixedLeft(column),
        ["".concat(prefixCls, "-cell-fixed-left-last")]: isLastLeftFixed(slicedColumns, column),
        ["".concat(prefixCls, "-cell-fixed-right")]: isFixedRight(column),
        ["".concat(prefixCls, "-cell-fixed-right-first")]: isFirstFixedRight(slicedColumns, column)
      });

      if (headWidths.length && slicedColumns.length) {
        const indexOfSlicedColumns = findIndex_default()(slicedColumns, item => item && item.key != null && item.key === column.key);

        if (indexOfSlicedColumns > -1) {
          if (isFixedLeft(column)) {
            cellStyle = assign_default()(assign_default()({}, cellStyle), {
              position: 'sticky',
              left: arrayAdd(headWidths, 0, indexOfSlicedColumns)
            });
          } else if (isFixedRight(column)) {
            cellStyle = assign_default()(assign_default()({}, cellStyle), {
              position: 'sticky',
              right: arrayAdd(headWidths, indexOfSlicedColumns + 1)
            });
          }
        }
      }

      const props = omit_default()(assign_default()(assign_default()({}, cellProps), customProps), ['colStart', 'colEnd', 'hasSubColumns', 'parents', 'level']);

      const {
        rowSpan,
        colSpan
      } = props;

      if (rowSpan === 0 || colSpan === 0) {
        return null;
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(HeaderCell, assign_default()({
        role: "columnheader",
        "aria-colindex": cellIndex + 1
      }, props, {
        style: cellStyle,
        key: column.key || column.dataIndex || cellIndex
      }));
    });

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(HeaderRow, assign_default()({
      role: "row",
      "aria-rowindex": index + 1
    }, rowProps, {
      style: style,
      ref: this.cacheRef
    }), cells);
  }

}
TableHeaderRow_TableHeaderRow.contextType = table_context;
TableHeaderRow_TableHeaderRow.propTypes = {
  components: prop_types_default.a.object,
  row: prop_types_default.a.array,
  prefixCls: prop_types_default.a.string,
  onHeaderRow: prop_types_default.a.func,
  index: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  style: prop_types_default.a.object,
  columns: prop_types_default.a.array,
  fixed: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.string]),
  selectedRowKeysSet: prop_types_default.a.instanceOf(set_default.a).isRequired
};
TableHeaderRow_TableHeaderRow.defaultProps = {
  onHeaderRow: noop_default.a,
  prefixCls: table_constants_cssClasses.PREFIX,
  columns: [],
  components: {
    header: {
      wrapper: 'thead',
      row: 'tr',
      cell: 'th'
    }
  }
};
// CONCATENATED MODULE: ./table/TableHeader.tsx








/* eslint-disable max-len */






function parseHeaderRows(columns) {
  const rows = []; // eslint-disable-next-line @typescript-eslint/no-shadow

  function fillRowCells(columns, colIndex) {
    let parents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    let rowIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    let level = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    // Init rows
    rows[rowIndex] = rows[rowIndex] || [];
    let currentColIndex = colIndex;

    const colSpans = map_default()(columns).call(columns, column => {
      const cell = {
        key: column.key,
        className: column.className || '',
        children: isFunction_default()(column.title) ? column.title() : column.title,
        column,
        colStart: currentColIndex,
        level,
        parents
      };
      let colSpan = 1;
      /**
        * Calculate header column merge colSpan
        *  - If the current cell has children, colSpan = the sum of children rowSpan
        *  - If the current cell has no children, colSpan = 1
        */

      const subColumns = column.children;

      if (subColumns && subColumns.length > 0) {
        var _context;

        colSpan = reduce_default()(_context = fillRowCells(subColumns, currentColIndex, [...parents, cell], rowIndex + 1, level + 1)).call(_context, (total, count) => total + count, 0);
        cell.hasSubColumns = true;
      }

      if ('colSpan' in column) {
        ({
          colSpan
        } = column);
      }

      if ('rowSpan' in column) {
        cell.rowSpan = column.rowSpan;
      }

      if (column.key === table_constants_strings.DEFAULT_KEY_COLUMN_SCROLLBAR) {
        cell['x-type'] = table_constants_strings.DEFAULT_KEY_COLUMN_SCROLLBAR;
      }

      cell.colSpan = colSpan;
      cell.colEnd = cell.colStart + colSpan - 1;
      rows[rowIndex].push(cell);
      currentColIndex += colSpan;
      return colSpan;
    });

    return colSpans;
  } // Generate `rows` cell data


  fillRowCells(columns, 0);
  /**
   * Calculate header row merge rowSpan
   *  - If the current cell has no children, you need to calculate rowSpan, rowSpan = the total number of rows in the header-which row currently belongs to
   *  - If the current cell has children, there is no need to calculate rowSpan
   *
   * 计算表头行合并 rowSpan
   *  - 如果当前cell没有children，则需要计算rowSpan，rowSpan = 表头总行数 - 当前属于第几行
   *  - 如果当前cell有children，则无需计算rowSpan
   */

  const rowCount = rows.length;

  for (let rowIndex = 0; rowIndex < rowCount; rowIndex += 1) {
    var _context2;

    for_each_default()(_context2 = rows[rowIndex]).call(_context2, cell => {
      if (!('rowSpan' in cell) && !cell.hasSubColumns) {
        // eslint-disable-next-line no-param-reassign
        cell.rowSpan = rowCount - rowIndex;
      }
    });
  }

  return rows;
}
/**
 * Render the header of the table header, and control the merging of the columns of the header
 */


class TableHeader_TableHeader extends baseComponent_BaseComponent {
  get adapter() {
    return assign_default()({}, super.adapter);
  }

  render() {
    const {
      components,
      columns,
      prefixCls,
      fixed,
      onHeaderRow,
      forwardedRef,
      selectedRowKeysSet
    } = this.props;
    const rows = parseHeaderRows(columns);
    const HeaderWrapper = components.header.wrapper;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(HeaderWrapper, {
      className: "".concat(prefixCls, "-thead"),
      ref: forwardedRef
    }, map_default()(rows).call(rows, (row, idx) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(TableHeaderRow_TableHeaderRow, {
      prefixCls: prefixCls,
      key: idx,
      index: idx,
      fixed: fixed,
      columns: columns,
      row: row,
      components: components,
      onHeaderRow: onHeaderRow,
      selectedRowKeysSet: selectedRowKeysSet
    })));
  }

}

TableHeader_TableHeader.propTypes = {
  components: prop_types_default.a.any,
  columns: prop_types_default.a.array,
  columnManager: prop_types_default.a.object,
  prefixCls: prop_types_default.a.string,
  onHeaderRow: prop_types_default.a.func,
  onDidUpdate: prop_types_default.a.func,
  fixed: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.string]),
  selectedRowKeysSet: prop_types_default.a.instanceOf(set_default.a).isRequired
};
TableHeader_TableHeader.defaultProps = {
  columns: [],
  prefixCls: table_constants_cssClasses.PREFIX,
  onHeaderRow: noop_default.a,
  onDidUpdate: noop_default.a,
  components: {
    header: {
      wrapper: 'thead',
      row: 'tr',
      cell: 'th'
    }
  }
};
/* harmony default export */ var table_TableHeader = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.forwardRef((props, ref) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(TableHeader_TableHeader, assign_default()({}, props, {
  forwardedRef: ref
}))));
// CONCATENATED MODULE: ./table/HeadTable.tsx





/* eslint-disable max-len */





/**
 * When there are fixed columns, the header is rendered as a separate Table
 */

class HeadTable_HeadTable extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
  constructor() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      selectedRowKeysSet: new set_default.a()
    };
    super(props);
  }

  render() {
    const {
      scroll,
      prefixCls,
      fixed,
      forwardedRef,
      handleBodyScroll,
      columns,
      components,
      onDidUpdate,
      showHeader,
      anyColumnFixed,
      bodyHasScrollBar
    } = this.props;

    if (!showHeader) {
      return null;
    }

    const Table = get_default()(components, 'header.outer', 'table');

    const x = get_default()(scroll, 'x');

    const headStyle = {};
    const tableStyle = {};

    if (x && !fixed) {
      tableStyle.width = x;
    }

    if (bodyHasScrollBar) {
      headStyle.overflowY = 'scroll';
    }

    const colgroup = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(ColGroup_ColGroup, {
      columns: columns,
      prefixCls: prefixCls
    });
    const tableHeader = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(table_TableHeader, assign_default()({}, this.props, {
      columns: columns,
      components: components,
      onDidUpdate: onDidUpdate
    }));
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      key: "headTable",
      style: headStyle,
      className: "".concat(prefixCls, "-header"),
      ref: forwardedRef,
      onScroll: handleBodyScroll
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Table, {
      style: tableStyle,
      className: classnames_default()(prefixCls, {
        ["".concat(prefixCls, "-fixed")]: anyColumnFixed
      })
    }, colgroup, tableHeader));
  }

}

HeadTable_HeadTable.propTypes = {
  anyColumnFixed: prop_types_default.a.bool,
  bodyHasScrollBar: prop_types_default.a.bool,
  columns: prop_types_default.a.array,
  components: prop_types_default.a.object,
  dataSource: prop_types_default.a.array,
  fixed: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.string]),
  handleBodyScroll: prop_types_default.a.func,
  prefixCls: prop_types_default.a.string,
  forwardedRef: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.func]),
  scroll: prop_types_default.a.shape({
    x: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string, prop_types_default.a.bool]),
    y: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string])
  }),
  selectedRowKeysSet: prop_types_default.a.instanceOf(set_default.a).isRequired,
  showHeader: prop_types_default.a.bool,
  onDidUpdate: prop_types_default.a.func,
  onHeaderRow: prop_types_default.a.func
};
HeadTable_HeadTable.defaultProps = {
  handleBodyScroll: noop_default.a
};
/* harmony default export */ var table_HeadTable = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.forwardRef((props, ref) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(HeadTable_HeadTable, assign_default()({}, props, {
  forwardedRef: ref
}))));
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/size.js
var lodash_size = __webpack_require__("7seP");
var size_default = /*#__PURE__*/__webpack_require__.n(lodash_size);

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/findLastIndex.js
var findLastIndex = __webpack_require__("ehGJ");
var findLastIndex_default = /*#__PURE__*/__webpack_require__.n(findLastIndex);

// CONCATENATED MODULE: ../semi-foundation/table/bodyFoundation.ts













class bodyFoundation_TableBodyFoundation extends foundation {
  init() {
    this.initVirtualizedData();
    this.initExpandBtnShouldInRow();
  }

  destroy() {
    this.unobserveBodyResize();
  }

  initVirtualizedData(cb) {
    this._adapter.setVirtualizedData(this.flattenData(this.getProp('dataSource')), cb);
  }

  initExpandBtnShouldInRow(newExpandRelatedProps) {
    const props = this.getProps(); // TODO check: this._adapter.getProps -> this.getProps

    const cachedExpandBtnShouldInRow = utils_expandBtnShouldInRow(props);

    this._adapter.setCachedExpandBtnShouldInRow(cachedExpandBtnShouldInRow);

    if (!isObject_default()(newExpandRelatedProps) && !newExpandRelatedProps) {
      const expandRelatedProps = table_constants_strings.EXPAND_RELATED_PROPS; // eslint-disable-next-line no-param-reassign

      newExpandRelatedProps = map_default()(expandRelatedProps).call(expandRelatedProps, key => get_default()(props, key, undefined));
    }

    this._adapter.setCachedExpandRelatedProps(newExpandRelatedProps);
  }

  flattenData() {
    let dataSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let parentKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    let childrenKeys = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
    const flattenData = [];
    const {
      rowKey,
      childrenRecordName,
      expandedRowRender,
      expandedRowKeys,
      groups
    } = this.getProps();

    if (level === 0 && isMap_default()(groups)) {
      for_each_default()(groups).call(groups, (set, key) => {
        const firstIndex = find_index_default()(dataSource).call(dataSource, record => set.has(getRecordKey(record, rowKey)));

        if (firstIndex > -1) {
          const lastIndex = findLastIndex_default()(dataSource, record => set.has(getRecordKey(record, rowKey)));

          const expanded = lodash_includes_default()(expandedRowKeys, key);

          flattenData.push({
            key,
            level,
            sectionRow: true,
            group: set,
            groupKey: key,
            expanded
          });

          if (expanded) {
            flattenData.push(...this.flattenData(slice_default()(dataSource).call(dataSource, firstIndex, lastIndex + 1), level + 1, [...parentKeys], [...childrenKeys]));
          }
        }
      });
    } else {
      for_each_default()(dataSource).call(dataSource, (record, index) => {
        const recordKey = getRecordKey(record, rowKey);
        const children = getRecordChildren(record, childrenRecordName);

        if (level) {
          childrenKeys.push(recordKey);
        }

        const item = {
          key: recordKey,
          record,
          level,
          parentKeys: [...parentKeys],
          childrenKeys: [...childrenKeys]
        };
        flattenData.push(item);
        const extras = [];

        if (lodash_includes_default()(expandedRowKeys, recordKey)) {
          if (is_array_default()(children) && children.length) {
            extras.push(...this.flattenData(children, level + 1, [...item.parentKeys], [...item.childrenKeys]));
          } else if (expandedRowRender) {
            extras.push({
              key: genExpandedRowKey(recordKey),
              level,
              expandedRow: true,
              record
            });
          }

          flattenData.push(...extras);
        }
      });
    }

    return flattenData;
  }
  /**
   * Use ResizeObserver to monitor changes in the size of the body content area, and notify Table to recalculate if it changes. columns #1219
   * (Only monitor the scroll.y scene, other scenes are not monitored, because the header of the scroll.y scene is a separate table, and a scrollbar column will be inserted)
   */


  observeBodyResize(bodyDOM) {
    const {
      scroll
    } = this.getProps(); // TODO check: this._adapter.getProps -> this.getProps

    if (get_default()(scroll, 'y')) {
      return this._adapter.observeBodyResize(bodyDOM);
    }
  }

  unobserveBodyResize() {
    return this._adapter.unobserveBodyResize();
  }

}
// CONCATENATED MODULE: ./table/utils.ts






let scrollbarVerticalSize, scrollbarHorizontalSize; // Measure scrollbar width for padding body during modal show/hide

const scrollbarMeasure = {
  position: 'absolute',
  top: '-9999px',
  width: '50px',
  height: '50px'
};
/**
 * @param {'vertical'|'horizontal'} [direction]
 * @returns {number}
 */

function measureScrollbar() {
  var _context;

  let direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'vertical';

  if (typeof document === 'undefined' || typeof window === 'undefined') {
    return 0;
  }

  const isVertical = direction === 'vertical';

  if (isVertical && scrollbarVerticalSize) {
    return scrollbarVerticalSize;
  } else if (!isVertical && scrollbarHorizontalSize) {
    return scrollbarHorizontalSize;
  }

  const scrollDiv = document.createElement('div');

  for_each_default()(_context = keys_default()(scrollbarMeasure)).call(_context, scrollProp => {
    scrollDiv.style[scrollProp] = scrollbarMeasure[scrollProp];
  }); // Append related overflow style


  if (isVertical) {
    scrollDiv.style.overflowY = 'scroll';
  } else {
    scrollDiv.style.overflowX = 'scroll';
  }

  document.body.appendChild(scrollDiv);
  let size = 0;

  if (isVertical) {
    // clientWidth is the inner width (excluding borders and scrollbars)
    // offsetWidth is the outer width (including padding and borders)
    size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    scrollbarVerticalSize = size;
  } else {
    size = scrollDiv.offsetHeight - scrollDiv.clientHeight;
    scrollbarHorizontalSize = size;
  }

  document.body.removeChild(scrollDiv); // console.log(size);

  return size;
}
function amendTableWidth(tableWidth) {
  return typeof tableWidth === 'number' ? tableWidth - table_constants_numbers.DEFAULT_CELL_PADDING_LEFT - table_constants_numbers.DEFAULT_CELL_PADDING_RIGHT - table_constants_numbers.DEFAULT_CELL_BORDER_WIDTH_LEFT - table_constants_numbers.DEFAULT_CELL_BORDER_WIDTH_RIGHT - measureScrollbar('vertical') : undefined;
}
/**
 * The user can pass a component to define the rendering method of each level of the table
 * This function merges the components passed in by the user with the default components
 * @param {Object} components
 * @param {Boolean|Object} virtualized
 * @returns
 */

function mergeComponents(components, virtualized) {
  return merge_default()({}, {
    table: 'table',
    header: {
      outer: 'table',
      wrapper: 'thead',
      row: 'tr',
      cell: 'th'
    },
    body: virtualized ? {
      outer: 'div',
      wrapper: 'div',
      row: 'div',
      cell: 'div',
      colgroup: {
        wrapper: 'div',
        col: 'div'
      }
    } : {
      outer: 'table',
      wrapper: 'tbody',
      row: 'tr',
      cell: 'td',
      colgroup: {
        wrapper: 'colgroup',
        col: 'col'
      }
    },
    footer: {
      wrapper: 'tfoot',
      row: 'tr',
      cell: 'td'
    }
  }, components);
}
const utils_logger = new utils_Logger('[@douyinfe/semi-ui Table]');

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/stubTrue.js
var stubTrue = __webpack_require__("LF7v");
var stubTrue_default = /*#__PURE__*/__webpack_require__.n(stubTrue);

// CONCATENATED MODULE: ../semi-foundation/utils/shallowEqualObjects.ts

function shallowEqualObjects(objA, objB) {
  if (objA === objB) {
    return true;
  }

  if (!objA || !objB) {
    return false;
  }

  const aKeys = keys_default()(objA);

  const bKeys = keys_default()(objB);

  const len = aKeys.length;

  if (bKeys.length !== len) {
    return false;
  }

  for (let i = 0; i < len; i++) {
    const key = aKeys[i];

    if (objA[key] !== objB[key] || !Object.prototype.hasOwnProperty.call(objB, key)) {
      return false;
    }
  }

  return true;
}
// CONCATENATED MODULE: ../semi-foundation/table/tableRowFoundation.ts
 // eslint-disable-next-line max-len

class tableRowFoundation_TableRowFoundation extends foundation {
  handleClick(e) {
    const {
      expanded,
      rowKey
    } = this.getProps();

    this._adapter.notifyClick(rowKey, e, expanded);
  }

  handleDoubleClick(e) {
    this._adapter.notifyDoubleClick(this.getProp('record'), e);
  }

  handleMouseEnter(e) {
    const record = this.getProp('record');

    this._adapter.notifyMouseEnter(record, e);
  }

  handleMouseLeave(e) {
    const record = this.getProp('record');

    this._adapter.notifyMouseLeave(record, e);
  }

}
// CONCATENATED MODULE: ../semi-foundation/table/cellFoundation.ts

class cellFoundation_TableCellFoundation extends foundation {
  handleClick(e) {
    this._adapter.notifyClick(this.getProp('record'), e);
  }

}
// CONCATENATED MODULE: ./table/TableCell.tsx









/* eslint-disable prefer-destructuring */

/* eslint-disable eqeqeq */










function isInvalidRenderCellText(text) {
  return text && ! /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(text) && Object.prototype.toString.call(text) === '[object Object]';
}

class TableCell_TableCell extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.setRef = ref => this.ref = ref;

    this.handleClick = e => {
      this.foundation.handleClick(e);
      const customCellProps = this.adapter.getCache('customCellProps');

      if (customCellProps && typeof customCellProps.onClick === 'function') {
        customCellProps.onClick(e);
      }
    };

    this.ref = /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createRef"])();
    this.foundation = new cellFoundation_TableCellFoundation(this.adapter);
  }

  get adapter() {
    var _this = this;

    return assign_default()(assign_default()({}, super.adapter), {
      notifyClick: function () {
        const {
          onClick
        } = _this.props;

        if (typeof onClick === 'function') {
          onClick(...arguments);
        }
      }
    });
  }
  /**
   * Control whether to execute the render function of the cell
   * 1. Scenes that return true
   *  - The cell contains the selection state, you need to calculate whether its selection state has changed during selection
   *  - The cell contains the folding state, it needs to be calculated when the folding state has changed
   * 2. Scenarios that return false
   *  - Cells without table operation operation status, only need to judge that their props have changed
   *    At this time, the update of the table cell is controlled by the user. At this time, its update will not affect other cells
   *
   * 控制是否执行cell的render函数
   * 1. 返回true的场景
   *  - cell内包含选择状态，需要在选择时计算它的选择态是否发生变化
   *  - cell内包含折叠状态，需要在折叠时计算它的折叠态是否发生了变化
   * 2. 返回false的场景
   *  - 没有table操作操作状态的cell，只需判断自己的props发生了变化
   *    此时table cell的更新由用户自己控制，此时它的更新不会影响其他cell
   *
   * @param {*} nextProps
   * @returns
   */


  shouldComponentUpdate(nextProps) {
    const props = this.props;
    const {
      column,
      expandIcon
    } = props;
    const cellInSelectionColumn = isSelectionColumn(column); // The expand button may be in a separate column or in the first data column

    const columnHasExpandIcon = isExpandedColumn(column) || expandIcon;

    if ((cellInSelectionColumn || columnHasExpandIcon) && !isEqual_default()(nextProps, this.props)) {
      return true;
    } else {
      const omitProps = ['selected', 'expanded', 'expandIcon', 'disabled'];

      const propsOmitSelected = omit_default()(props, omitProps);

      const nextPropsOmitSelected = omit_default()(nextProps, omitProps);

      if (!isEqual_default()(nextPropsOmitSelected, propsOmitSelected)) {
        return true;
      }
    }

    return false;
  }

  componentDidUpdate() {
    this.props.onDidUpdate(this.ref);
  }

  getTdProps() {
    const {
      record,
      index,
      column = {},
      fixedLeft,
      fixedRight,
      width,
      height
    } = this.props;
    let tdProps = {};
    let customCellProps = {};
    const fixedLeftFlag = fixedLeft || typeof fixedLeft === 'number';
    const fixedRightFlag = fixedRight || typeof fixedRight === 'number';

    if (fixedLeftFlag) {
      lodash_set_default()(tdProps, 'style.left', typeof fixedLeft === 'number' ? fixedLeft : 0);
    } else if (fixedRightFlag) {
      lodash_set_default()(tdProps, 'style.right', typeof fixedRight === 'number' ? fixedRight : 0);
    }

    if (width != null) {
      lodash_set_default()(tdProps, 'style.width', width);
    }

    if (height != null) {
      lodash_set_default()(tdProps, 'style.height', height);
    }

    if (column.onCell) {
      customCellProps = column.onCell(record, index);
      this.adapter.setCache('customCellProps', assign_default()({}, customCellProps));
      tdProps = assign_default()(assign_default()({}, tdProps), omit_default()(customCellProps, ['style', 'className', 'onClick']));
      const customCellStyle = get_default()(customCellProps, 'style') || {};
      tdProps.style = assign_default()(assign_default()({}, tdProps.style), customCellStyle);
    }

    if (column.align) {
      tdProps.style = assign_default()(assign_default()({}, tdProps.style), {
        textAlign: column.align
      });
    }

    return {
      tdProps,
      customCellProps
    };
  }
  /**
   * We should return undefined if no dataIndex is specified, but in order to
   * be compatible with object-path's behavior, we return the record object instead.
   */


  renderText(tdProps) {
    var _context;

    const {
      record,
      indentSize,
      prefixCls,
      indent,
      index,
      expandIcon,
      renderExpandIcon,
      column = {}
    } = this.props;
    const {
      dataIndex,
      render,
      useFullRender
    } = column;
    let text, colSpan, rowSpan;

    if (typeof dataIndex === 'number') {
      text = get_default()(record, dataIndex);
    } else if (!dataIndex || dataIndex.length === 0) {
      text = record;
    } else {
      text = get_default()(record, dataIndex);
    }

    const indentText = indent && indentSize ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      style: {
        paddingLeft: "".concat(indentSize * indent, "px")
      },
      className: concat_default()(_context = "".concat(prefixCls, "-row-indent indent-level-")).call(_context, indent)
    }) : null; // column.render

    const realExpandIcon = typeof renderExpandIcon === 'function' ? renderExpandIcon(record) : expandIcon;

    if (render) {
      const renderOptions = {
        expandIcon: realExpandIcon
      }; // column.useFullRender

      if (useFullRender) {
        const {
          renderSelection
        } = this.context;
        const realSelection = typeof renderSelection === 'function' ? renderSelection(record) : null;

        assign_default()(renderOptions, {
          selection: realSelection,
          indentText
        });
      }

      text = render(text, record, index, renderOptions);

      if (isInvalidRenderCellText(text)) {
        // eslint-disable-next-line no-param-reassign
        tdProps = text.props ? merge_default()(tdProps, text.props) : tdProps;
        colSpan = tdProps.colSpan;
        rowSpan = tdProps.rowSpan;
        text = text.children;
      }
    }

    return {
      text,
      indentText,
      rowSpan,
      colSpan,
      realExpandIcon,
      tdProps
    };
  }

  renderInner(text, indentText, realExpandIcon) {
    const {
      prefixCls,
      isSection,
      expandIcon,
      column = {}
    } = this.props;
    const {
      tableWidth,
      anyColumnFixed
    } = this.context;
    const {
      useFullRender
    } = column;
    let inner = null;

    if (useFullRender) {
      inner = text;
    } else {
      inner = [/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
        key: 'indentText'
      }, indentText), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
        key: 'expandIcon'
      }, expandIcon ? realExpandIcon : null), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
        key: 'text'
      }, text)];
    }

    if (isSection) {
      inner = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: classnames_default()("".concat(prefixCls, "-section-inner")),
        style: {
          width: anyColumnFixed ? amendTableWidth(tableWidth) : undefined
        }
      }, inner);
    }

    return inner;
  }

  render() {
    const {
      prefixCls,
      column = {},
      component: BodyCell,
      fixedLeft,
      fixedRight,
      lastFixedLeft,
      firstFixedRight,
      colIndex
    } = this.props;
    const {
      className
    } = column;
    const fixedLeftFlag = fixedLeft || typeof fixedLeft === 'number';
    const fixedRightFlag = fixedRight || typeof fixedRight === 'number';
    const {
      tdProps,
      customCellProps
    } = this.getTdProps();
    const renderTextResult = this.renderText(tdProps);
    let {
      text
    } = renderTextResult;
    const {
      indentText,
      rowSpan,
      colSpan,
      realExpandIcon,
      tdProps: newTdProps
    } = renderTextResult;

    if (rowSpan === 0 || colSpan === 0) {
      return null;
    }

    if (isInvalidRenderCellText(text)) {
      text = null;
    }

    const inner = this.renderInner(text, indentText, realExpandIcon);
    const columnCls = classnames_default()(className, "".concat(prefixCls, "-row-cell"), get_default()(customCellProps, 'className'), {
      ["".concat(prefixCls, "-cell-fixed-left")]: fixedLeftFlag,
      ["".concat(prefixCls, "-cell-fixed-left-last")]: lastFixedLeft,
      ["".concat(prefixCls, "-cell-fixed-right")]: fixedRightFlag,
      ["".concat(prefixCls, "-cell-fixed-right-first")]: firstFixedRight
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(BodyCell, assign_default()({
      role: "gridcell",
      "aria-colindex": colIndex + 1,
      className: columnCls,
      onClick: this.handleClick
    }, newTdProps, {
      ref: this.setRef
    }), inner);
  }

}
TableCell_TableCell.contextType = table_context;
TableCell_TableCell.defaultProps = {
  indent: 0,
  indentSize: table_constants_numbers.DEFAULT_INDENT_WIDTH,
  onClick: noop_default.a,
  prefixCls: table_constants_cssClasses.PREFIX,
  component: 'td',
  onDidUpdate: noop_default.a,
  column: {}
};
TableCell_TableCell.propTypes = {
  record: prop_types_default.a.object,
  prefixCls: prop_types_default.a.string,
  index: prop_types_default.a.number,
  fixedLeft: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.number]),
  lastFixedLeft: prop_types_default.a.bool,
  fixedRight: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.number]),
  firstFixedRight: prop_types_default.a.bool,
  indent: prop_types_default.a.number,
  indentSize: prop_types_default.a.number,
  column: prop_types_default.a.object,
  expandIcon: prop_types_default.a.any,
  renderExpandIcon: prop_types_default.a.func,
  hideExpandedColumn: prop_types_default.a.bool,
  component: prop_types_default.a.any,
  onClick: prop_types_default.a.func,
  onDidUpdate: prop_types_default.a.func,
  isSection: prop_types_default.a.bool,
  width: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  height: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  selected: prop_types_default.a.bool,
  expanded: prop_types_default.a.bool,
  colIndex: prop_types_default.a.number
};
// CONCATENATED MODULE: ./table/Body/BaseRow.tsx











var BaseRow_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable max-len */

/* eslint-disable eqeqeq */











class BaseRow_TableRow extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this._cacheNode = node => {
      this.ref.current = node;
    }; // Pass true to render the tree-shaped expand button


    this.renderExpandIcon = record => {
      const {
        renderExpandIcon
      } = this.props;
      return renderExpandIcon(record, true);
    };

    this.handleMouseEnter = e => {
      this.foundation.handleMouseEnter(e);
      const customRowProps = this.adapter.getCache('customRowProps');

      if (typeof customRowProps.onMouseEnter === 'function') {
        customRowProps.onMouseEnter(e);
      }
    };

    this.handleMouseLeave = e => {
      this.foundation.handleMouseLeave(e);
      const customRowProps = this.adapter.getCache('customRowProps');

      if (typeof customRowProps.onMouseLeave === 'function') {
        customRowProps.onMouseLeave(e);
      }
    };

    this.handleClick = e => {
      this.foundation.handleClick(e);
      const customRowProps = this.adapter.getCache('customRowProps');

      if (customRowProps && typeof customRowProps.onClick === 'function') {
        customRowProps.onClick(e);
      }
    };

    this.ref = /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createRef"])();
    this.foundation = new tableRowFoundation_TableRowFoundation(this.adapter);
  }

  get adapter() {
    var _this = this;

    return assign_default()(assign_default()({}, super.adapter), {
      notifyClick: function () {
        return _this.props.onRowClick(...arguments);
      },
      notifyDoubleClick: function () {
        return _this.props.onRowDoubleClick(...arguments);
      },
      notifyMouseLeave: function () {
        _this.props.onHover(false, _this.props.rowKey);

        _this.props.onRowMouseEnter(...arguments);
      },
      notifyMouseEnter: function () {
        _this.props.onHover(true, _this.props.rowKey);

        _this.props.onRowMouseEnter(...arguments);
      }
    });
  }

  componentDidMount() {
    // fix #745
    // didmount/willUnmount may be called twice when React.StrictMode is true in React 18, we need to ensure that this.cache.customRowProps is correct
    const {
      onRow,
      index,
      record
    } = this.props;
    const customRowProps = this.adapter.getCache('customRowProps');

    if (typeof customRowProps === 'undefined') {
      const _a = onRow(record, index) || {},
            {
        className: customClassName,
        style: customStyle
      } = _a,
            rowProps = BaseRow_rest(_a, ["className", "style"]);

      this.adapter.setCache('customRowProps', assign_default()({}, rowProps));
    }
  }

  shouldComponentUpdate(nextProps) {
    /**
      * Shallow comparison of incoming props to simulate PureComponent
      * Deep comparison cellWidths
      *
      * 浅层对比传入的 props，模拟 PureComponent
      * 深比较 cellWidths
      */
    const omitProps = ['cellWidths'];
    const isPropsShallowEqual = shallowEqualObjects(omit_default()(nextProps, omitProps), omit_default()(this.props, omitProps));

    if (!isPropsShallowEqual || !isEqual_default()(pick_default()(nextProps, omitProps), pick_default()(this.props, omitProps))) {
      return true;
    }

    return false;
  }

  renderCells() {
    const {
      columns,
      record,
      index,
      prefixCls,
      fixed,
      components,
      expandableRow,
      level,
      expandIcon,
      rowExpandable,
      isSection,
      expandedRow,
      virtualized,
      indentSize,
      hideExpandedColumn,
      cellWidths,
      selected,
      expanded,
      disabled,
      onDidUpdate
    } = this.props;

    const BodyCell = get_default()(components, 'body.cell', table_constants_strings.DEFAULT_COMPONENTS.body.cell);

    const cells = [];
    const displayExpandedColumn = rowExpandable(record);
    let firstIndex = 0; // const dataColumns = getDataColumns(columns);

    each_default()(columns, (column, columnIndex) => {
      const columnKey = get_default()(column, 'key');

      const expandableProps = {};

      if (fixed !== 'right') {
        if (isInnerColumnKey(columnKey)) {
          firstIndex++;
        }

        if (expandableRow && columnIndex === firstIndex) {
          expandableProps.renderExpandIcon = this.renderExpandIcon;

          if (hideExpandedColumn || isSection) {
            expandableProps.expandIcon = expandIcon != null ? expandIcon : true;
          }
        } // Only the first data row will be indented


        if (level != null && columnIndex === firstIndex) {
          expandableProps.indent = level;

          if (!expandableRow) {
            expandableProps.indent = level + 1;
          }
        }
      }

      if (isExpandedColumn(column) && !displayExpandedColumn) {
        cells.push( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(TableCell_TableCell, {
          key: columnIndex,
          colIndex: columnIndex,
          isSection: isSection
        }));
      } else if (!isScrollbarColumn(column)) {
        const diyProps = {};

        if (BodyCell !== table_constants_strings.DEFAULT_COMPONENTS.body.cell && virtualized && !expandedRow) {
          diyProps.width = get_default()(cellWidths, columnIndex);
        }

        cells.push( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(TableCell_TableCell, assign_default()({
          colIndex: columnIndex
        }, expandableProps, diyProps, {
          hideExpandedColumn: hideExpandedColumn,
          indentSize: indentSize,
          isSection: isSection,
          prefixCls: "".concat(prefixCls),
          column: column,
          key: columnIndex,
          index: index,
          record: record,
          component: BodyCell,
          fixedLeft: isFixedLeft(column) && arrayAdd(cellWidths, 0, columnIndex),
          lastFixedLeft: isLastLeftFixed(columns, column),
          fixedRight: isFixedRight(column) && arrayAdd(cellWidths, columnIndex + 1),
          firstFixedRight: isFirstFixedRight(columns, column),
          selected: selected,
          expanded: expanded,
          disabled: disabled,
          onDidUpdate: onDidUpdate
        })));
      }
    });

    return cells;
  }

  render() {
    const {
      style
    } = this.props;
    const {
      components,
      prefixCls,
      selected,
      onRow,
      index,
      className,
      replaceClassName,
      record,
      hovered,
      expanded,
      expandableRow,
      level,
      expandedRow,
      isSection
    } = this.props;
    const BodyRow = components.body.row;

    const _a = onRow(record, index) || {},
          {
      className: customClassName,
      style: customStyle
    } = _a,
          rowProps = BaseRow_rest(_a, ["className", "style"]);

    this.adapter.setCache('customRowProps', assign_default()({}, rowProps));

    const baseRowStyle = assign_default()(assign_default()({}, style), customStyle);

    const rowCls = typeof replaceClassName === 'string' && replaceClassName.length ? replaceClassName : classnames_default()(className, "".concat(prefixCls, "-row"), {
      ["".concat(prefixCls, "-row-selected")]: selected,
      ["".concat(prefixCls, "-row-expanded")]: expanded,
      ["".concat(prefixCls, "-row-hovered")]: hovered
    }, customClassName);
    const ariaProps = {};

    if (typeof index === 'number') {
      ariaProps['aria-rowindex'] = index + 1;
    }

    if (expandableRow) {
      ariaProps['aria-expanded'] = expanded;
    } // if row is expandedRow, set it's level to 2 


    if (expanded || expandedRow) {
      ariaProps['aria-level'] = 2;
    }

    if (typeof level === 'number') {
      ariaProps['aria-level'] = level + 1;
    }

    if (isSection) {
      ariaProps['aria-level'] = 1;
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(BodyRow, assign_default()({
      role: "row"
    }, ariaProps, rowProps, {
      style: baseRowStyle,
      className: rowCls,
      ref: this._cacheNode,
      onMouseEnter: this.handleMouseEnter,
      onMouseLeave: this.handleMouseLeave,
      onClick: this.handleClick
    }), this.renderCells());
  }

}
BaseRow_TableRow.propTypes = {
  anyColumnFixed: prop_types_default.a.bool,
  cellWidths: prop_types_default.a.array.isRequired,
  className: prop_types_default.a.string,
  columns: prop_types_default.a.array.isRequired,
  components: prop_types_default.a.object.isRequired,
  disabled: prop_types_default.a.bool,
  expandIcon: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.func, prop_types_default.a.node]),
  expandableRow: prop_types_default.a.bool,
  expanded: prop_types_default.a.bool,
  expandedRow: prop_types_default.a.bool,
  fixed: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.bool]),
  height: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  hideExpandedColumn: prop_types_default.a.bool,
  hovered: prop_types_default.a.bool.isRequired,
  indent: prop_types_default.a.number,
  indentSize: prop_types_default.a.number,
  index: prop_types_default.a.number,
  isSection: prop_types_default.a.bool,
  level: prop_types_default.a.number,
  onDidUpdate: prop_types_default.a.func,
  onHover: prop_types_default.a.func,
  onRow: prop_types_default.a.func,
  onRowClick: prop_types_default.a.func,
  onRowContextMenu: prop_types_default.a.func,
  onRowDoubleClick: prop_types_default.a.func,
  onRowMouseEnter: prop_types_default.a.func,
  onRowMouseLeave: prop_types_default.a.func,
  prefixCls: prop_types_default.a.string,
  record: prop_types_default.a.object,
  renderExpandIcon: prop_types_default.a.func,
  replaceClassName: prop_types_default.a.string,
  rowExpandable: prop_types_default.a.func,
  rowKey: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]).isRequired,
  selected: prop_types_default.a.bool,
  store: prop_types_default.a.object,
  style: prop_types_default.a.object,
  virtualized: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.bool]),
  visible: prop_types_default.a.bool.isRequired
};
BaseRow_TableRow.defaultProps = {
  columns: [],
  rowExpandable: stubTrue_default.a,
  components: {
    body: {
      row: 'tr',
      cell: 'td'
    }
  },
  prefixCls: table_constants_cssClasses.PREFIX,
  onRow: noop_default.a,
  onRowClick: noop_default.a,
  onRowDoubleClick: noop_default.a,
  onRowMouseEnter: noop_default.a,
  onRowMouseLeave: noop_default.a,
  onHover: noop_default.a,
  onDidUpdate: noop_default.a,
  visible: true,
  hovered: false,
  selected: false,
  disabled: false
};
// CONCATENATED MODULE: ./table/Body/ExpandedRow.tsx







var ExpandedRow_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable max-len */










/**
 * Render expanded row
 */

class ExpandedRow_TableExpandedRow extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    const {
      record,
      columns: propColumns = [],
      prefixCls,
      className,
      expanded,
      expandedRowRender,
      renderExpandIcon,
      index,
      store,
      components,
      style,
      virtualized,
      indentSize,
      cellWidths
    } = this.props;
    const {
      tableWidth,
      anyColumnFixed,
      getCellWidths
    } = this.context;
    const cell = expandedRowRender(record, index, expanded);
    let children = null;
    const props = {};
    let column = {};

    if (isNull_default()(cell)) {
      return null;
    } else if ( /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(cell)) {
      children = cell;
    } else if (cell && Object.prototype.toString.call(cell) === '[object Object]') {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const _a = cell,
            {
        children: cellChildren,
        fixed
      } = _a,
            restProps = ExpandedRow_rest(_a, ["children", "fixed"]);

      children = cellChildren;
      column = assign_default()({}, restProps);
    }

    if (get_default()(components, 'body.cell') !== table_constants_strings.DEFAULT_COMPONENTS.body.cell) {
      if (virtualized) {
        lodash_set_default()(props, 'style.height', '100%');
      }

      lodash_set_default()(props, 'style.display', 'block');

      lodash_set_default()(props, 'style.width', arrayAdd(cellWidths, 0, propColumns.length));
    } else {
      // Remove the row where the scroll bar is located
      props.colSpan = filterColumns(propColumns).length;
    }

    const columns = [assign_default()({
      render: () => ({
        props,
        children: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          className: classnames_default()("".concat(prefixCls, "-expand-inner")),
          style: {
            width: anyColumnFixed ? amendTableWidth(tableWidth) : undefined
          }
        }, children)
      })
    }, column)];
    const rowCls = classnames_default()(className, "".concat(prefixCls, "-row-expand"));
    const baseRowCellWidths = getCellWidths(columns);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(BaseRow_TableRow, {
      style: style,
      components: components,
      className: rowCls,
      expandedRow: true,
      renderExpandIcon: renderExpandIcon,
      rowKey: "".concat(record.key, "-expanded-row"),
      columns: columns,
      store: store,
      virtualized: virtualized,
      indentSize: indentSize,
      cellWidths: baseRowCellWidths
    });
  }

}
ExpandedRow_TableExpandedRow.contextType = table_context;
ExpandedRow_TableExpandedRow.propTypes = {
  cellWidths: prop_types_default.a.array.isRequired,
  className: prop_types_default.a.string,
  columns: prop_types_default.a.array,
  components: prop_types_default.a.object,
  defaultExpandAllRows: prop_types_default.a.bool,
  defaultExpandedRowKeys: prop_types_default.a.array,
  expandIcon: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.node, prop_types_default.a.func]),
  expandRowByClick: prop_types_default.a.bool,
  expanded: prop_types_default.a.bool,
  expandedRowKeys: prop_types_default.a.array,
  expandedRowRender: prop_types_default.a.func,
  indentSize: prop_types_default.a.number,
  index: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  onExpand: prop_types_default.a.func,
  onExpandedRowsChange: prop_types_default.a.func,
  prefixCls: prop_types_default.a.string,
  record: prop_types_default.a.object,
  renderExpandIcon: prop_types_default.a.func,
  store: prop_types_default.a.object,
  style: prop_types_default.a.object,
  virtualized: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.object])
};
ExpandedRow_TableExpandedRow.defaultProps = {
  record: {},
  prefixCls: table_constants_cssClasses.PREFIX
};
// CONCATENATED MODULE: ./table/Body/SectionRow.tsx









var SectionRow_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable max-len */

/* eslint-disable @typescript-eslint/ban-types */

/* eslint-disable eqeqeq */









/**
 * Grouping component title row
 */

class SectionRow_SectionRow extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  constructor() {
    var _this;

    super(...arguments);
    _this = this;

    this.onRow = function () {
      const {
        onGroupedRow,
        clickGroupedRowToExpand,
        onExpand,
        groupKey,
        expanded
      } = _this.props;
      const rowProps = {};

      if (typeof onGroupedRow === 'function') {
        assign_default()(rowProps, onGroupedRow(...arguments));
      }

      return assign_default()(assign_default()({}, rowProps), {
        onClick: e => {
          if (typeof onExpand === 'function' && clickGroupedRowToExpand) {
            onExpand(!expanded, groupKey, e);
          }

          if (typeof rowProps.onClick === 'function') {
            rowProps.onClick(e);
          }
        }
      });
    };

    this.collectGroupedData = () => {
      const {
        data,
        group,
        rowKey
      } = this.props;

      if (is_array_default()(data) && data.length && isSet_default()(group)) {
        return filter_default()(data).call(data, record => {
          const realRowKey = typeof rowKey === 'function' ? rowKey(record) : get_default()(record, rowKey);
          return realRowKey != null && realRowKey !== '' && group.has(realRowKey);
        });
      }

      return [];
    };

    this.renderExpandIcon = record => {
      const {
        renderExpandIcon,
        groupKey
      } = this.props;

      if (typeof renderExpandIcon === 'function') {
        return renderExpandIcon(record, false, groupKey);
      }

      return null;
    };
  }

  isInnerColumnKey(key) {
    if (key != null) {
      var _context;

      return includes_default()(_context = [table_constants_strings.DEFAULT_KEY_COLUMN_EXPAND, table_constants_strings.DEFAULT_KEY_COLUMN_SELECTION]).call(_context, key);
    }

    return false;
  }

  render() {
    const {
      record,
      columns: propColumns = [],
      prefixCls,
      className,
      expanded,
      renderGroupSection,
      components,
      index,
      store,
      group,
      groupKey,
      virtualized,
      style
    } = this.props;
    const props = {};
    let column = {};
    let children = null; // render title

    const cell = typeof renderGroupSection === 'function' ? renderGroupSection(groupKey, [...group]) : null;

    if ( /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(cell)) {
      children = cell;
    } else if (cell && Object.prototype.toString.call(cell) === '[object Object]') {
      const _a = cell,
            {
        children: cellChildren
      } = _a,
            restProps = SectionRow_rest(_a, ["children"]);

      children = cellChildren;
      column = assign_default()({}, restProps);
    } // Filter out scroll-bar column


    props.colSpan = filterColumns(propColumns).length;
    const columns = [assign_default()({
      render: () => ({
        props,
        children
      })
    }, column)];
    const rowCls = classnames_default()(className, "".concat(prefixCls, "-row-section"), {
      on: expanded
    });
    const {
      getCellWidths
    } = this.context;
    const baseRowCellWidths = getCellWidths(columns, null, true);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(BaseRow_TableRow, {
      components: components,
      virtualized: virtualized,
      index: index,
      onRow: this.onRow,
      expanded: expanded,
      expandIcon: true,
      isSection: true,
      record: record,
      replaceClassName: rowCls,
      expandableRow: true,
      renderExpandIcon: this.renderExpandIcon,
      rowKey: groupKey,
      columns: columns,
      store: store,
      style: style,
      cellWidths: baseRowCellWidths
    });
  }

}

SectionRow_SectionRow.contextType = table_context;
SectionRow_SectionRow.propTypes = {
  record: prop_types_default.a.object,
  index: prop_types_default.a.number,
  columns: prop_types_default.a.array,
  group: prop_types_default.a.object.isRequired,
  groupKey: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]).isRequired,
  data: prop_types_default.a.array,
  renderGroupSection: prop_types_default.a.func,
  onGroupedRow: prop_types_default.a.func,
  clickGroupedRowToExpand: prop_types_default.a.bool,
  components: prop_types_default.a.object,
  expanded: prop_types_default.a.bool,
  prefixCls: prop_types_default.a.string,
  onExpand: prop_types_default.a.func,
  virtualized: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.object]),
  style: prop_types_default.a.object,
  renderExpandIcon: prop_types_default.a.func,
  className: prop_types_default.a.string,
  store: prop_types_default.a.object,
  rowKey: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number, prop_types_default.a.func])
};
SectionRow_SectionRow.defaultProps = {
  prefixCls: table_constants_cssClasses.PREFIX,
  components: {
    body: {
      row: 'tr',
      cell: 'td'
    }
  }
};
/* harmony default export */ var Body_SectionRow = (SectionRow_SectionRow);
// CONCATENATED MODULE: ./table/Body/index.tsx



















var Body_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable eqeqeq */

/* eslint-disable @typescript-eslint/member-ordering */

/* eslint-disable max-len */



















class Body_Body extends baseComponent_BaseComponent {
  constructor(props, context) {
    var _this;

    super(props);
    _this = this;

    this.forwardRef = node => {
      const {
        forwardedRef
      } = this.props;
      this.ref.current = node;
      this.foundation.observeBodyResize(node);

      if (typeof forwardedRef === 'function') {
        forwardedRef(node);
      } else if (forwardedRef && typeof forwardedRef === 'object') {
        forwardedRef.current = node;
      }
    };

    this.itemSize = index => {
      const {
        virtualized,
        size: tableSize
      } = this.props;
      const {
        virtualizedData
      } = this.state;

      const virtualizedItem = get_default()(virtualizedData, index);

      const defaultConfig = getDefaultVirtualizedRowConfig(tableSize, virtualizedItem.sectionRow);

      const itemSize = get_default()(virtualized, 'itemSize', defaultConfig.height);

      let realSize = itemSize;

      if (typeof itemSize === 'function') {
        realSize = itemSize(index, {
          expandedRow: get_default()(virtualizedItem, 'expandedRow', false),
          sectionRow: get_default()(virtualizedItem, 'sectionRow', false)
        });
      }

      if (realSize < defaultConfig.minHeight) {
        utils_logger.warn("The computed real `itemSize` cannot be less than ".concat(defaultConfig.minHeight));
      }

      return realSize;
    };

    this.itemKey = (index, data) => get_default()(data, [index, 'key'], index);

    this.handleRowClick = (rowKey, e, expand) => {
      const {
        handleRowExpanded
      } = this.context;
      handleRowExpanded(!expand, rowKey, e);
    };

    this.handleVirtualizedScroll = function () {
      let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      const onScroll = get_default()(_this.props.virtualized, 'onScroll');

      if (typeof onScroll === 'function') {
        onScroll(props);
      }
    };
    /**
     * @param {MouseEvent<HTMLDivElement>} e
     */


    this.handleVirtualizedBodyScroll = e => {
      const {
        handleBodyScroll
      } = this.props;

      const newScrollLeft = get_default()(e, 'nativeEvent.target.scrollLeft');

      const newScrollTop = get_default()(e, 'nativeEvent.target.scrollTop');

      if (newScrollTop === this.state.cache.virtualizedScrollTop) {
        this.handleVirtualizedScroll({
          horizontalScrolling: true
        });
      }

      this.state.cache.virtualizedScrollLeft = newScrollLeft;
      this.state.cache.virtualizedScrollTop = newScrollTop;

      if (typeof handleBodyScroll === 'function') {
        handleBodyScroll(e);
      }
    };

    this.getVirtualizedRowWidth = () => {
      const {
        getCellWidths
      } = this.context;
      const {
        columns
      } = this.props;
      const cellWidths = getCellWidths(columns);
      const rowWidth = arrayAdd(cellWidths, 0, size_default()(columns));
      return rowWidth;
    };

    this.renderVirtualizedRow = options => {
      const {
        index,
        style
      } = options;
      const {
        virtualizedData,
        cachedExpandBtnShouldInRow
      } = this.state;
      const {
        flattenedColumns
      } = this.context;

      const virtualizedItem = get_default()(virtualizedData, [index], {}); // eslint-disable-next-line @typescript-eslint/no-unused-vars


      const {
        key,
        parentKeys,
        expandedRow,
        sectionRow
      } = virtualizedItem,
            rest = Body_rest(virtualizedItem, ["key", "parentKeys", "expandedRow", "sectionRow"]);

      const rowWidth = this.getVirtualizedRowWidth();
      const expandBtnShouldInRow = cachedExpandBtnShouldInRow;

      const props = assign_default()(assign_default()(assign_default()(assign_default()({}, this.props), {
        style: assign_default()(assign_default()({}, style), {
          width: rowWidth
        })
      }), rest), {
        columns: flattenedColumns,
        index,
        expandBtnShouldInRow
      }); // eslint-disable-next-line no-nested-ternary


      return sectionRow ? this.renderSectionRow(props) : expandedRow ? this.renderExpandedRow(props) : this.renderBaseRow(props);
    }; // virtualized List innerElementType


    this.renderTbody = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.forwardRef(function () {
      let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      let ref = arguments.length > 1 ? arguments[1] : undefined;
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({}, props, {
        onScroll: function () {
          if (props.onScroll) {
            props.onScroll(...arguments);
          }
        },
        // eslint-disable-next-line react/no-this-in-sfc,react/destructuring-assignment
        className: classnames_default()(props.className, "".concat(_this.props.prefixCls, "-tbody")),
        style: assign_default()({}, props.style),
        ref: ref
      }));
    }); // virtualized List outerElementType

    this.renderOuter = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.forwardRef((props, ref) => {
      const {
        children
      } = props,
            rest = Body_rest(props, ["children"]); // eslint-disable-next-line react/no-this-in-sfc


      const {
        handleWheel,
        prefixCls,
        emptySlot,
        dataSource
      } = this.props; // eslint-disable-next-line react/no-this-in-sfc

      const tableWidth = this.getVirtualizedRowWidth();
      const tableCls = classnames_default()("".concat(prefixCls), "".concat(prefixCls, "-fixed"));
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({}, rest, {
        ref: ref,
        onWheel: function () {
          if (handleWheel) {
            handleWheel(...arguments);
          }

          if (rest.onWheel) {
            rest.onWheel(...arguments);
          }
        },
        onScroll: function () {
          // eslint-disable-next-line react/no-this-in-sfc
          _this.handleVirtualizedBodyScroll(...arguments);

          if (rest.onScroll) {
            rest.onScroll(...arguments);
          }
        }
      }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        style: {
          width: tableWidth
        },
        className: tableCls
      }, size_default()(dataSource) === 0 ? emptySlot : children));
    });

    this.onItemsRendered = props => {
      if (this.state.cache.virtualizedScrollLeft && this.ref.current) {
        this.ref.current.scrollLeft = this.state.cache.virtualizedScrollLeft;
      }
    };

    this.renderVirtualizedBody = direction => {
      const {
        scroll,
        prefixCls,
        virtualized,
        anyColumnFixed,
        columns
      } = this.props;
      const {
        virtualizedData
      } = this.state;
      const {
        getCellWidths
      } = this.context;
      const cellWidths = getCellWidths(columns);

      if (!size_default()(cellWidths)) {
        return null;
      }

      const rawY = get_default()(scroll, 'y');

      const yIsNumber = typeof rawY === 'number';
      const y = yIsNumber ? rawY : 600;

      if (!yIsNumber) {
        utils_logger.warn('You have to specific "scroll.y" which must be a number for table virtualization!');
      }

      const listStyle = {
        width: '100%',
        height: (virtualizedData === null || virtualizedData === void 0 ? void 0 : virtualizedData.length) ? y : 0,
        overflowX: 'auto',
        overflowY: 'auto'
      };
      const wrapCls = classnames_default()("".concat(prefixCls, "-body"));
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(VariableSizeList, assign_default()({}, virtualized, {
        initialScrollOffset: this.state.cache.virtualizedScrollTop,
        onScroll: this.handleVirtualizedScroll,
        onItemsRendered: this.onItemsRendered,
        ref: this.listRef,
        className: wrapCls,
        outerRef: this.forwardRef,
        height: listStyle.height,
        width: listStyle.width,
        itemData: virtualizedData,
        itemSize: this.itemSize,
        itemCount: virtualizedData.length,
        itemKey: this.itemKey,
        innerElementType: this.renderTbody,
        outerElementType: this.renderOuter,
        style: assign_default()(assign_default()({}, listStyle), {
          direction
        }),
        direction: direction
      }), this.renderVirtualizedRow);
    };
    /**
     * render group title
     * @param {*} props
     */


    this.renderSectionRow = function () {
      var _context;

      let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        groupKey: undefined
      };
      const {
        dataSource,
        rowKey,
        group,
        groupKey,
        index
      } = props;

      const sectionRowPickKeys = keys_default()(Body_SectionRow.propTypes);

      const sectionRowProps = pick_default()(props, sectionRowPickKeys);

      const {
        handleRowExpanded
      } = _this.context;
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Body_SectionRow, assign_default()({}, sectionRowProps, {
        record: {
          groupKey,
          records: map_default()(_context = [...group]).call(_context, recordKey => getRecord(dataSource, recordKey, rowKey))
        },
        index: index,
        onExpand: handleRowExpanded,
        data: dataSource,
        key: groupKey || index
      }));
    };

    this.renderExpandedRow = function () {
      let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        renderExpandIcon: () => null
      };
      const {
        style,
        components,
        renderExpandIcon,
        expandedRowRender,
        record,
        columns,
        expanded,
        index,
        rowKey,
        virtualized
      } = props;
      let key = getRecordKey(record, rowKey);

      if (key == null) {
        key = index;
      }

      const {
        flattenedColumns,
        getCellWidths
      } = _this.context; // we use memoized cellWidths to avoid re-render expanded row (fix #686)

      if (flattenedColumns !== _this.flattenedColumns) {
        _this.flattenedColumns = flattenedColumns;
        _this.cellWidths = getCellWidths(flattenedColumns);
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(ExpandedRow_TableExpandedRow, {
        style: style,
        components: components,
        renderExpandIcon: renderExpandIcon,
        expandedRowRender: expandedRowRender,
        record: record,
        columns: columns,
        expanded: expanded,
        index: index,
        virtualized: virtualized,
        key: genExpandedRowKey(key),
        cellWidths: _this.cellWidths
      });
    };
    /**
     * render grouped rows
     * @returns {ReactNode[]} renderedRows
     */


    this.renderGroupedRows = () => {
      const {
        groups,
        dataSource: data,
        rowKey,
        expandedRowKeys
      } = this.props;
      const {
        flattenedColumns
      } = this.context;
      const groupsInData = new core_js_stable_map_default.a();
      const renderedRows = [];

      if (groups != null && is_array_default()(data) && data.length) {
        for_each_default()(data).call(data, record => {
          const recordKey = getRecordKey(record, rowKey);

          for_each_default()(groups).call(groups, (group, key) => {
            if (group.has(recordKey)) {
              if (!groupsInData.has(key)) {
                groupsInData.set(key, new set_default.a([]));
              }

              groupsInData.get(key).add(recordKey);
              return false;
            }

            return undefined;
          });
        });
      }

      let index = -1;

      for_each_default()(groupsInData).call(groupsInData, (group, groupKey) => {
        // Calculate the expanded state of the group
        const expanded = isExpanded(expandedRowKeys, groupKey); // Render the title of the group

        renderedRows.push(this.renderSectionRow(assign_default()(assign_default()({}, this.props), {
          columns: flattenedColumns,
          index: ++index,
          group,
          groupKey,
          expanded
        }))); // Render the grouped content when the group is expanded

        if (expanded) {
          const dataInGroup = [];

          for_each_default()(group).call(group, recordKey => {
            const record = getRecord(data, recordKey, rowKey);

            if (record != null) {
              dataInGroup.push(record);
            }
          });
          /**
           * Render the contents of the group row
           */


          renderedRows.push(this.renderBodyRows(dataInGroup));
        }
      });

      return renderedRows;
    };

    this.renderBody = direction => {
      const {
        scroll,
        prefixCls,
        columns,
        components,
        fixed,
        handleWheel,
        headerRef,
        handleBodyScroll,
        anyColumnFixed,
        showHeader,
        emptySlot,
        includeHeader,
        dataSource,
        onScroll,
        groups,
        expandedRowRender
      } = this.props;

      const x = get_default()(scroll, 'x');

      const y = get_default()(scroll, 'y');

      const bodyStyle = {};
      const tableStyle = {};

      const Table = get_default()(components, 'body.outer', 'table');

      const BodyWrapper = get_default()(components, 'body.wrapper') || 'tbody';

      if (y) {
        bodyStyle.maxHeight = y;
      }

      if (x) {
        tableStyle.width = x;
      }

      if (anyColumnFixed && size_default()(dataSource)) {
        // Auto is better than scroll. For example, when there is only scrollY, the scroll axis is not displayed horizontally.
        bodyStyle.overflow = 'auto'; // Fix weird webkit render bug

        bodyStyle.WebkitTransform = 'translate3d (0, 0, 0)';
      }

      const colgroup = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(ColGroup_ColGroup, {
        components: get_default()(components, 'body'),
        columns: columns,
        prefixCls: prefixCls
      }); // const tableBody = this.renderBody();

      const wrapCls = "".concat(prefixCls, "-body");
      const baseTable = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        key: "bodyTable",
        className: wrapCls,
        style: bodyStyle,
        ref: this.forwardRef,
        onWheel: handleWheel,
        onScroll: handleBodyScroll
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Table, {
        role: isMap_default()(groups) || isFunction_default()(expandedRowRender) || isTreeTable({
          dataSource
        }) ? 'treegrid' : 'grid',
        "aria-rowcount": dataSource && dataSource.length,
        "aria-colcount": columns && columns.length,
        style: tableStyle,
        className: classnames_default()(prefixCls, {
          ["".concat(prefixCls, "-fixed")]: anyColumnFixed
        })
      }, colgroup, includeHeader && showHeader ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(table_TableHeader, assign_default()({}, this.props, {
        ref: headerRef,
        components: components,
        columns: columns
      })) : null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(BodyWrapper, {
        className: "".concat(prefixCls, "-tbody"),
        onScroll: onScroll
      }, isMap_default()(groups) ? this.renderGroupedRows() : this.renderBodyRows(dataSource))), emptySlot);

      if (fixed && columns.length) {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          key: "bodyTable",
          className: "".concat(prefixCls, "-body-outer")
        }, baseTable);
      }

      return baseTable;
    };

    this.ref = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.state = {
      virtualizedData: [],
      cache: {
        virtualizedScrollTop: null,
        virtualizedScrollLeft: null
      },
      cachedExpandBtnShouldInRow: null,
      cachedExpandRelatedProps: []
    };
    this.listRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    const {
      getVirtualizedListRef,
      flattenedColumns,
      getCellWidths
    } = context;

    if (getVirtualizedListRef) {
      if (props.virtualized) {
        getVirtualizedListRef(this.listRef);
      } else {
        console.warn('getVirtualizedListRef only works with virtualized. ' + 'See https://semi.design/zh-CN/show/table for more information.');
      }
    }

    this.foundation = new bodyFoundation_TableBodyFoundation(this.adapter);
    this.flattenedColumns = flattenedColumns;
    this.cellWidths = getCellWidths(flattenedColumns);
    this.observer = null;
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      setVirtualizedData: (virtualizedData, cb) => this.setState({
        virtualizedData
      }, cb),
      setCachedExpandBtnShouldInRow: cachedExpandBtnShouldInRow => this.setState({
        cachedExpandBtnShouldInRow
      }),
      setCachedExpandRelatedProps: cachedExpandRelatedProps => this.setState({
        cachedExpandRelatedProps
      }),
      observeBodyResize: bodyWrapDOM => {
        const {
          setBodyHasScrollbar
        } = this.context; // Callback when the size of the body dom content changes, notifying Table.jsx whether the bodyHasScrollBar exists

        const resizeCallback = () => {
          const update = () => {
            const {
              offsetWidth,
              clientWidth
            } = bodyWrapDOM;
            const bodyHasScrollBar = clientWidth < offsetWidth;
            setBodyHasScrollbar(bodyHasScrollBar);
          };

          const requestAnimationFrame = window.requestAnimationFrame || set_timeout_default.a;
          requestAnimationFrame(update);
        }; // Monitor body dom resize


        if (bodyWrapDOM) {
          if (get_default()(window, 'ResizeObserver')) {
            if (this.observer) {
              this.observer.unobserve(bodyWrapDOM);
              this.observer = null;
            }

            this.observer = new ResizeObserver(resizeCallback);
            this.observer.observe(bodyWrapDOM);
          } else {
            utils_logger.warn('The current browser does not support ResizeObserver,' + 'and the table may be misaligned after plugging and unplugging the mouse and keyboard.' + 'You can try to refresh it.');
          }
        }
      },
      unobserveBodyResize: () => {
        const bodyWrapDOM = this.ref.current;

        if (this.observer) {
          this.observer.unobserve(bodyWrapDOM);
          this.observer = null;
        }
      }
    });
  }

  componentDidUpdate(prevProps, prevState) {
    const {
      virtualized,
      dataSource,
      expandedRowKeys,
      columns,
      scroll
    } = this.props;

    if (virtualized) {
      if (prevProps.dataSource !== dataSource || prevProps.expandedRowKeys !== expandedRowKeys || prevProps.columns !== columns) {
        this.foundation.initVirtualizedData();
      }
    }

    const expandRelatedProps = table_constants_strings.EXPAND_RELATED_PROPS;

    const newExpandRelatedProps = map_default()(expandRelatedProps).call(expandRelatedProps, key => get_default()(this.props, key, undefined));

    if (!isEqual_default()(newExpandRelatedProps, prevState.cachedExpandRelatedProps)) {
      this.foundation.initExpandBtnShouldInRow(newExpandRelatedProps);
    }

    const scrollY = get_default()(scroll, 'y');

    const bodyWrapDOM = this.ref.current;

    if (scrollY && scrollY !== get_default()(prevProps, 'scroll.y')) {
      this.foundation.observeBodyResize(bodyWrapDOM);
    }
  }
  /**
   * render base row
   * @param {*} props
   * @returns
   */


  renderBaseRow() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const {
      rowKey,
      columns,
      expandedRowKeys,
      rowExpandable,
      record,
      index,
      level,
      expandBtnShouldInRow,
      // effect the display of the indent span
      selectedRowKeysSet,
      disabledRowKeysSet,
      expandRowByClick
    } = props;

    const baseRowPickKeys = keys_default()(BaseRow_TableRow.propTypes);

    const baseRowProps = pick_default()(props, baseRowPickKeys);

    let key = getRecordKey(record, rowKey);

    if (key == null) {
      key = index;
    }

    const expanded = isExpanded(expandedRowKeys, key);
    const expandable = rowExpandable && rowExpandable(record);
    const expandableProps = {
      level: undefined,
      expanded
    };

    if (expandable || expandBtnShouldInRow) {
      expandableProps.level = level;
      expandableProps.expandableRow = expandable;

      if (expandRowByClick) {
        expandableProps.onRowClick = this.handleRowClick;
      }
    }

    const selectionProps = {
      selected: utils_isSelected(selectedRowKeysSet, key),
      disabled: utils_isDisabled(disabledRowKeysSet, key)
    };
    const {
      getCellWidths
    } = this.context;
    const cellWidths = getCellWidths(columns, null, true);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(BaseRow_TableRow, assign_default()({}, baseRowProps, expandableProps, selectionProps, {
      key: key,
      rowKey: key,
      cellWidths: cellWidths
    }));
  }

  renderBodyRows() {
    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let renderedRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    const {
      rowKey,
      expandedRowRender,
      expandedRowKeys,
      childrenRecordName,
      rowExpandable
    } = this.props;
    const hasExpandedRowRender = typeof expandedRowRender === 'function';
    const expandBtnShouldInRow = this.state.cachedExpandBtnShouldInRow;
    const {
      flattenedColumns
    } = this.context;

    each_default()(data, (record, index) => {
      let key = getRecordKey(record, rowKey);

      if (key == null) {
        key = index;
      }

      const recordChildren = get_default()(record, childrenRecordName);

      const recordHasChildren = Boolean(is_array_default()(recordChildren) && recordChildren.length);
      renderedRows.push(this.renderBaseRow(assign_default()(assign_default()({}, this.props), {
        columns: flattenedColumns,
        expandBtnShouldInRow,
        record,
        key,
        level,
        index
      }))); // render expand row

      const expanded = isExpanded(expandedRowKeys, key);

      if (hasExpandedRowRender && rowExpandable && rowExpandable(record) && expanded) {
        const currentExpandRow = this.renderExpandedRow(assign_default()(assign_default()({}, this.props), {
          columns: flattenedColumns,
          level,
          index,
          record,
          expanded
        }));
        /**
          * If expandedRowRender returns falsy, this expanded row will not be rendered
          * Render an empty div before v1.19.7
          */

        if (!isNull_default()(currentExpandRow)) {
          renderedRows.push(currentExpandRow);
        }
      } // render tree data


      if (recordHasChildren && expanded) {
        const nestedRows = this.renderBodyRows(recordChildren, level + 1);
        renderedRows.push(...nestedRows);
      }
    });

    return renderedRows;
  }

  render() {
    const {
      virtualized
    } = this.props;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(configProvider_context.Consumer, null, _ref => {
      let {
        direction
      } = _ref;
      return virtualized ? this.renderVirtualizedBody(direction) : this.renderBody(direction);
    });
  }

}

Body_Body.contextType = table_context;
Body_Body.propTypes = {
  anyColumnFixed: prop_types_default.a.bool,
  childrenRecordName: prop_types_default.a.string,
  columns: prop_types_default.a.array,
  components: prop_types_default.a.object,
  dataSource: prop_types_default.a.array,
  disabledRowKeysSet: prop_types_default.a.instanceOf(set_default.a).isRequired,
  emptySlot: prop_types_default.a.node,
  expandRowByClick: prop_types_default.a.bool,
  expandedRowKeys: prop_types_default.a.array,
  expandedRowRender: prop_types_default.a.func,
  fixed: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.bool]),
  forwardedRef: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.func]),
  groups: prop_types_default.a.instanceOf(core_js_stable_map_default.a),
  handleBodyScroll: prop_types_default.a.func,
  handleWheel: prop_types_default.a.func,
  headerRef: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.func]),
  includeHeader: prop_types_default.a.bool,
  onScroll: prop_types_default.a.func,
  prefixCls: prop_types_default.a.string,
  renderExpandIcon: prop_types_default.a.func,
  rowExpandable: prop_types_default.a.func,
  rowKey: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.bool, prop_types_default.a.func]),
  scroll: prop_types_default.a.object,
  selectedRowKeysSet: prop_types_default.a.instanceOf(set_default.a).isRequired,
  showHeader: prop_types_default.a.bool,
  size: prop_types_default.a.string,
  store: prop_types_default.a.object,
  virtualized: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.object])
};
/* harmony default export */ var table_Body = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.forwardRef(function TableBody(props, ref) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Body_Body, assign_default()({}, props, {
    forwardedRef: ref
  }));
}));
// CONCATENATED MODULE: ./table/Table.tsx

























var Table_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable no-nested-ternary */

/* eslint-disable prefer-const */

/* eslint-disable prefer-destructuring */

/* eslint-disable no-shadow */

/* eslint-disable no-param-reassign */

/* eslint-disable max-len */

/* eslint-disable react/no-did-update-set-state */

/* eslint-disable eqeqeq */

/* eslint-disable max-lines-per-function */


























class Table_Table extends baseComponent_BaseComponent {
  constructor(props, context) {
    var _this;

    super(props);
    _this = this;

    // TODO: notify when data don't have key
    this._warnIfNoKey = () => {
      if ((this.props.rowSelection || this.props.expandedRowRender) && lodash_some_default()(this.props.dataSource, record => this.foundation.getRecordKey(record) == null)) {
        utils_logger.error('You must specify a key for each element in the dataSource or use "rowKey" to specify an attribute name as the primary key!');
      }
    };

    this._invokeRowSelection = function (funcName) {
      const func = get_default()(_this.state, ['rowSelection', funcName]);

      if (typeof func === 'function') {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        func(...args);
      }
    };

    this._invokeColumnFn = function (key, funcName) {
      if (key && funcName) {
        const column = _this.foundation.getQuery(key);

        const func = get_default()(column, funcName, null);

        if (typeof func === 'function') {
          for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          func(...args);
        }
      }
    };

    this._cacheHeaderRef = node => {
      this.headerWrapRef.current = node;
    };

    this.getCurrentPageData = () => {
      var _context;

      const pageData = this.foundation.getCurrentPageData();

      const retObj = reduce_default()(_context = ['dataSource', 'groups']).call(_context, (result, key) => {
        if (pageData[key]) {
          result[key] = pageData[key];
        }

        return result;
      }, {});

      return Object(_utils["a" /* cloneDeep */])(retObj);
    };

    this.getColumns = (columns, children) => !is_array_default()(columns) || !columns || !columns.length ? getColumns(children) : columns; // @ts-ignore


    this.getCellWidths = function () {
      return _this.foundation.getCellWidths(...arguments);
    }; // @ts-ignore


    this.setHeadWidths = function () {
      return _this.foundation.setHeadWidths(...arguments);
    }; // @ts-ignore


    this.getHeadWidths = function () {
      return _this.foundation.getHeadWidths(...arguments);
    }; // @ts-ignore


    this.mergedRowExpandable = function () {
      return _this.foundation.mergedRowExpandable(...arguments);
    }; // @ts-ignore


    this.setBodyHasScrollbar = function () {
      return _this.foundation.setBodyHasScrollbar(...arguments);
    };

    this.handleWheel = event => {
      const {
        scroll = {}
      } = this.props;

      if (window.navigator.userAgent.match(/Trident\/7\./) && scroll.y) {
        event.preventDefault();
        const wd = event.deltaY;
        const {
          target
        } = event; // const { bodyTable, fixedColumnsBodyLeft, fixedColumnsBodyRight } = this;

        const bodyTable = this.bodyWrapRef.current;
        let scrollTop = 0;

        if (this.lastScrollTop) {
          scrollTop = this.lastScrollTop + wd;
        } else {
          scrollTop = wd;
        }

        if (bodyTable && target !== bodyTable) {
          bodyTable.scrollTop = scrollTop;
        }
      }
    };

    this.handleBodyScrollLeft = e => {
      if (e.currentTarget !== e.target) {
        return;
      }

      const {
        target
      } = e; // const { headTable, bodyTable } = this;

      const headTable = this.headerWrapRef.current;
      const bodyTable = this.bodyWrapRef.current;

      if (target.scrollLeft !== this.lastScrollLeft) {
        if (target === bodyTable && headTable) {
          headTable.scrollLeft = target.scrollLeft;
        } else if (target === headTable && bodyTable) {
          bodyTable.scrollLeft = target.scrollLeft;
        }

        this.setScrollPositionClassName();
      } // Remember last scrollLeft for scroll direction detecting.


      this.lastScrollLeft = target.scrollLeft;
    };

    this.handleWindowResize = () => {
      this.syncTableWidth();
      this.setScrollPositionClassName();
    };

    this.handleBodyScrollTop = e => {
      const {
        target
      } = e;

      if (e.currentTarget !== target) {
        return;
      }

      const {
        scroll = {}
      } = this.props; // const { headTable, bodyTable, fixedColumnsBodyLeft, fixedColumnsBodyRight } = this;

      const headTable = this.headerWrapRef.current;
      const bodyTable = this.bodyWrapRef.current;

      if (target.scrollTop !== this.lastScrollTop && scroll.y && target !== headTable) {
        const {
          scrollTop
        } = target;

        if (bodyTable && target !== bodyTable) {
          bodyTable.scrollTop = scrollTop;
        }
      } // Remember last scrollTop for scroll direction detecting.


      this.lastScrollTop = target.scrollTop;
    };

    this.handleBodyScroll = e => {
      this.handleBodyScrollLeft(e);
      this.handleBodyScrollTop(e);
    };

    this.setScrollPosition = position => {
      const {
        prefixCls
      } = this.props;
      const positionAll = ["".concat(prefixCls, "-scroll-position-both"), "".concat(prefixCls, "-scroll-position-middle"), "".concat(prefixCls, "-scroll-position-left"), "".concat(prefixCls, "-scroll-position-right")];
      this.scrollPosition = position;
      const tableNode = this.wrapRef.current;

      if (tableNode && tableNode.nodeType) {
        if (position === 'both') {
          const acceptPosition = ["".concat(prefixCls, "-scroll-position-left"), "".concat(prefixCls, "-scroll-position-right")];
          tableNode.classList.remove(...difference_default()(positionAll, acceptPosition));
          tableNode.classList.add(...acceptPosition);
        } else {
          var _context2;

          const acceptPosition = [concat_default()(_context2 = "".concat(prefixCls, "-scroll-position-")).call(_context2, position)];
          tableNode.classList.remove(...difference_default()(positionAll, acceptPosition));
          tableNode.classList.add(...acceptPosition);
        }
      }
    };

    this.setScrollPositionClassName = () => {
      const node = this.bodyWrapRef.current;

      if (node && node.children && node.children.length) {
        const scrollToLeft = node.scrollLeft === 0;
        const scrollToRight = node.scrollLeft + 1 >= node.children[0].getBoundingClientRect().width - node.getBoundingClientRect().width;

        if (scrollToLeft && scrollToRight) {
          this.setScrollPosition('both');
        } else if (scrollToLeft) {
          this.setScrollPosition('left');
        } else if (scrollToRight) {
          this.setScrollPosition('right');
        } else if (this.scrollPosition !== 'middle') {
          this.setScrollPosition('middle');
        }
      }
    };

    this.syncTableWidth = () => {
      if (this.rootWrapRef && this.rootWrapRef.current) {
        this.setState({
          tableWidth: this.rootWrapRef.current.getBoundingClientRect().width
        });
      }
    };

    this.renderSelection = function () {
      let record = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      let inHeader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      const {
        rowSelection,
        disabledRowKeysSet
      } = _this.state;

      if (rowSelection && typeof rowSelection === 'object') {
        const {
          selectedRowKeys = [],
          selectedRowKeysSet = new set_default.a(),
          getCheckboxProps,
          disabled
        } = rowSelection;

        if (inHeader) {
          const columnKey = get_default()(rowSelection, 'key', table_constants_strings.DEFAULT_KEY_COLUMN_SELECTION);

          const allRowKeys = _this.cachedFilteredSortedRowKeys;
          const allRowKeysSet = _this.cachedFilteredSortedRowKeysSet;

          const allIsSelected = _this.foundation.allIsSelected(selectedRowKeysSet, disabledRowKeysSet, allRowKeys);

          const hasRowSelected = _this.foundation.hasRowSelected(selectedRowKeys, allRowKeysSet);

          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(ColumnSelection_TableSelectionCell, {
            "aria-label": "".concat(allIsSelected ? 'Deselect' : 'Select', " all rows"),
            disabled: disabled,
            key: columnKey,
            selected: allIsSelected,
            indeterminate: hasRowSelected && !allIsSelected,
            onChange: (status, e) => {
              _this.toggleSelectAllRow(status, e);
            }
          });
        } else {
          const key = _this.foundation.getRecordKey(record);

          const selected = selectedRowKeysSet.has(key);

          const checkboxPropsFn = () => typeof getCheckboxProps === 'function' ? getCheckboxProps(record) : {};

          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(ColumnSelection_TableSelectionCell, {
            "aria-label": "".concat(selected ? 'Deselect' : 'Select', " this row"),
            getCheckboxProps: checkboxPropsFn,
            selected: selected,
            onChange: (status, e) => _this.toggleSelectRow(status, key, e)
          });
        }
      }

      return null;
    };

    this.renderRowSelectionCallback = function (text) {
      let record = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return _this.renderSelection(record);
    };

    this.renderTitleSelectionCallback = () => this.renderSelection(null, true);

    this.normalizeSelectionColumn = function () {
      let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      const {
        rowSelection,
        prefixCls
      } = props;
      let column = {};

      if (rowSelection) {
        const needOmitSelectionKey = ['selectedRowKeys', 'selectedRowKeysSet'];
        column = {
          key: table_constants_strings.DEFAULT_KEY_COLUMN_SELECTION
        };

        if (isObject_default()(rowSelection)) {
          column = assign_default()(assign_default()({}, column), omit_default()(rowSelection, needOmitSelectionKey));
        }

        column.className = classnames_default()(column.className, "".concat(prefixCls, "-column-selection"));
        column.title = _this.renderTitleSelectionCallback;
        column.render = _this.renderRowSelectionCallback;
      }

      return column;
    }; // If there is a scroll bar, manually construct a column and insert it into the header


    this.normalizeScrollbarColumn = function () {
      let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      const {
        scrollbarWidth = 0
      } = props;
      return {
        key: table_constants_strings.DEFAULT_KEY_COLUMN_SCROLLBAR,
        width: scrollbarWidth,
        fixed: 'right'
      };
    };
    /**
     * render expand icon
     * @param {Object} record
     * @param {Boolean} isNested
     * @param {String} groupKey
     * @returns {ReactNode}
     */


    this.renderExpandIcon = function () {
      let record = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      let isNested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      let groupKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      const {
        expandedRowKeys
      } = _this.state;
      const {
        expandIcon
      } = _this.props;
      const key = typeof groupKey === 'string' || typeof groupKey === 'number' ? groupKey : _this.foundation.getRecordKey(record);
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(CustomExpandIcon, {
        key: key,
        componentType: isNested ? 'tree' : 'expand',
        expanded: lodash_includes_default()(expandedRowKeys, key),
        expandIcon: expandIcon,
        onClick: (expanded, e) => _this.handleRowExpanded(expanded, key, e)
      });
    }; // @ts-ignore


    this.handleRowExpanded = function () {
      return _this.foundation.handleRowExpanded(...arguments);
    };

    this.normalizeExpandColumn = function () {
      let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      let column = null;
      const {
        prefixCls,
        expandCellFixed,
        expandIcon
      } = props;
      column = {
        fixed: expandCellFixed,
        key: table_constants_strings.DEFAULT_KEY_COLUMN_EXPAND
      };
      column.className = classnames_default()(column.className, "".concat(prefixCls, "-column-expand"));
      column.render = expandIcon !== false ? function () {
        let text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        let record = arguments.length > 1 ? arguments[1] : undefined;
        let index = arguments.length > 2 ? arguments[2] : undefined;
        return _this.adapter.mergedRowExpandable(record) ? _this.renderExpandIcon(record) : null;
      } : () => null;
      return column;
    };
    /**
      * Add sorting, filtering, and rendering functions to columns, and add column event handling
      * Title support function, passing parameters as {filter: node, sorter: node, selection: node}
      * @param {*} column
      */


    this.addFnsInColumn = function () {
      let column = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (column && (column.sorter || column.filters || column.useFullRender)) {
        const {
          dataIndex,
          title: rawTitle,
          useFullRender
        } = column;

        const curQuery = _this.foundation.getQuery(dataIndex);

        const titleMap = {};
        const titleArr = []; // useFullRender adds select buttons to each column

        if (useFullRender) {
          titleMap.selection = _this.renderSelection(null, true);
        }

        const stateSortOrder = get_default()(curQuery, 'sortOrder');

        const defaultSortOrder = get_default()(curQuery, 'defaultSortOrder', false);

        const sortOrder = _this.foundation.isSortOrderValid(stateSortOrder) ? stateSortOrder : defaultSortOrder;

        if (typeof column.sorter === 'function' || column.sorter === true) {
          const sorter = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(ColumnSorter_ColumnSorter, {
            key: table_constants_strings.DEFAULT_KEY_COLUMN_SORTER,
            sortOrder: sortOrder,
            onClick: e => _this.foundation.handleSort(column, e)
          });
          useFullRender && (titleMap.sorter = sorter);
          titleArr.push(sorter);
        }

        const stateFilteredValue = get_default()(curQuery, 'filteredValue');

        const defaultFilteredValue = get_default()(curQuery, 'defaultFilteredValue');

        const filteredValue = stateFilteredValue ? stateFilteredValue : defaultFilteredValue;

        if (is_array_default()(column.filters) && column.filters.length || /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(column.filterDropdown)) {
          const filter = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(ColumnFilter, assign_default()({
            key: table_constants_strings.DEFAULT_KEY_COLUMN_FILTER
          }, curQuery, {
            filteredValue: filteredValue,
            onFilterDropdownVisibleChange: visible => _this.foundation.toggleShowFilter(dataIndex, visible),
            onSelect: data => _this.foundation.handleFilterSelect(dataIndex, data)
          }));
          useFullRender && (titleMap.filter = filter);
          titleArr.push(filter);
        }

        const newTitle = typeof rawTitle === 'function' ? () => rawTitle(titleMap) : titleArr.unshift( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, {
          key: table_constants_strings.DEFAULT_KEY_COLUMN_TITLE
        }, rawTitle)) && titleArr;
        column = assign_default()(assign_default()({}, column), {
          title: newTitle
        });
      }

      return column;
    };

    this.toggleSelectRow = (selected, realKey, e) => {
      this.foundation.handleSelectRow(realKey, selected, e);
    };

    this.toggleSelectAllRow = (status, e) => {
      this.foundation.handleSelectAllRow(status, e);
    };
    /**
     * render pagination
     * @param {object} pagination
     * @param {object} propRenderPagination
     */


    this.renderPagination = (pagination, propRenderPagination) => {
      if (!pagination) {
        return null;
      } // use memoized pagination


      const mergedPagination = this.foundation.memoizedPagination(pagination);
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
        componentName: "Table"
      }, locale => {
        const info = this.foundation.formatPaginationInfo(mergedPagination, locale.pageText);
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(TablePagination_TablePagination, {
          info: info,
          pagination: mergedPagination,
          renderPagination: propRenderPagination
        });
      });
    };

    this.renderTitle = function () {
      let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      let {
        title
      } = props;
      const {
        prefixCls,
        dataSource
      } = props;

      if (typeof title === 'function') {
        title = title(dataSource);
      }

      return /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(title) || typeof title === 'string' ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(prefixCls, "-title"),
        "x-semi-prop": "title"
      }, title) : null;
    };

    this.renderEmpty = function () {
      let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      const {
        prefixCls,
        empty,
        dataSource
      } = props;
      const wrapCls = "".concat(prefixCls, "-placeholder");

      const isEmpty = _this.foundation.isEmpty(dataSource);

      if (!isEmpty) {
        return null;
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
        componentName: "Table",
        key: 'emptyText'
      }, (locale, localeCode) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: wrapCls
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(prefixCls, "-empty"),
        "x-semi-prop": "empty"
      }, empty || locale.emptyText)));
    };

    this.renderFooter = function () {
      let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      let {
        footer
      } = props;
      const {
        prefixCls,
        dataSource
      } = props;

      if (typeof footer === 'function') {
        footer = footer(dataSource);
      }

      return /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(footer) || typeof footer === 'string' ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(prefixCls, "-footer"),
        key: "footer",
        "x-semi-prop": "footer"
      }, footer) : null;
    };

    this.renderMainTable = props => {
      const useFixedHeader = this.adapter.useFixedHeader();
      const emptySlot = this.renderEmpty(props);
      const table = [this.renderTable(assign_default()(assign_default()({}, props), {
        fixed: false,
        useFixedHeader,
        headerRef: this._cacheHeaderRef,
        bodyRef: this.bodyWrapRef,
        includeHeader: !useFixedHeader
      })), emptySlot, this.renderFooter(props)];
      return table;
    };

    this.renderTable = props => {
      const {
        columns,
        filteredColumns,
        fixed,
        useFixedHeader,
        scroll,
        prefixCls,
        anyColumnFixed,
        includeHeader,
        showHeader,
        components,
        headerRef,
        bodyRef,
        onHeaderRow,
        rowSelection,
        dataSource,
        bodyHasScrollBar,
        disabledRowKeysSet
      } = props;

      const selectedRowKeysSet = get_default()(rowSelection, 'selectedRowKeysSet', new set_default.a());

      const headTable = fixed || useFixedHeader ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(table_HeadTable, {
        key: "head",
        anyColumnFixed: anyColumnFixed,
        ref: headerRef,
        columns: filteredColumns,
        prefixCls: prefixCls,
        fixed: fixed,
        handleBodyScroll: this.handleBodyScrollLeft,
        components: components,
        scroll: scroll,
        showHeader: showHeader,
        selectedRowKeysSet: selectedRowKeysSet,
        onHeaderRow: onHeaderRow,
        dataSource: dataSource,
        bodyHasScrollBar: bodyHasScrollBar
      }) : null;
      const bodyTable = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(table_Body, assign_default()({}, omit_default()(props, ['rowSelection', 'headWidths']), {
        key: "body",
        ref: bodyRef,
        columns: filteredColumns,
        fixed: fixed,
        prefixCls: prefixCls,
        handleWheel: this.handleWheel,
        handleBodyScroll: this.handleBodyScroll,
        anyColumnFixed: anyColumnFixed,
        includeHeader: includeHeader,
        showHeader: showHeader,
        scroll: scroll,
        components: components,
        store: this.store,
        selectedRowKeysSet: selectedRowKeysSet,
        disabledRowKeysSet: disabledRowKeysSet
      }));
      return [headTable, bodyTable];
    };
    /**
     * When columns change, call this function to get the latest withFnsColumns
     * In addition to changes in columns, these props changes must be recalculated
     *  - hideExpandedColumn
     *  -rowSelection changes from trusy to falsy or rowSelection.hidden changes
     *  -isAnyFixedRight(columns) || get(scroll,'y') changes
     *
     * columns变化时，调用此函数获取最新的withFnsColumns
     * 除了 columns 变化，这些 props 变化也要重新计算
     *  - hideExpandedColumn
     *  - rowSelection 从 trusy 变为 falsy 或 rowSelection.hidden 发生变化
     *  - isAnyFixedRight(columns) || get(scroll, 'y') 发生变化
     *
     * @param {Array} queries
     * @param {Array} cachedColumns
     * @returns columns after adding extended functions
     */


    this.handleColumns = (queries, cachedColumns) => {
      const {
        hideExpandedColumn,
        scroll,
        prefixCls,
        expandCellFixed,
        expandIcon,
        rowSelection
      } = this.props;
      const childrenColumnName = 'children';
      let columns = Object(_utils["a" /* cloneDeep */])(cachedColumns); // eslint-disable-next-line @typescript-eslint/no-shadow

      const addFns = function () {
        let columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        if (is_array_default()(columns) && columns.length) {
          each_default()(columns, (column, index, originColumns) => {
            const newColumn = _this.addFnsInColumn(column);

            const children = column[childrenColumnName];

            if (is_array_default()(children) && children.length) {
              const newChildren = [...children];
              addFns(newChildren);
              newColumn[childrenColumnName] = newChildren;
            }

            originColumns[index] = newColumn;
          });
        }
      };

      addFns(columns); // hideExpandedColumn=false render expand column separately

      if (!hideExpandedColumn) {
        const column = this.normalizeExpandColumn({
          prefixCls,
          expandCellFixed,
          expandIcon
        });

        const destIndex = findIndex_default()(columns, item => item.key === table_constants_strings.DEFAULT_KEY_COLUMN_EXPAND);

        if (column) {
          if (destIndex > -1) {
            columns[destIndex] = assign_default()(assign_default()({}, column), columns[destIndex]);
          } else if (column.fixed === 'right') {
            columns = [...columns, column];
          } else {
            columns = [column, ...columns];
          }
        }
      } // selection column


      if (rowSelection && !get_default()(rowSelection, 'hidden')) {
        const destIndex = findIndex_default()(columns, item => item.key === table_constants_strings.DEFAULT_KEY_COLUMN_SELECTION);

        const column = this.normalizeSelectionColumn({
          rowSelection,
          prefixCls
        });

        if (destIndex > -1) {
          columns[destIndex] = assign_default()(assign_default()({}, column), columns[destIndex]);
        } else if (column.fixed === 'right') {
          columns = [...columns, column];
        } else {
          columns = [column, ...columns];
        }
      }

      assignColumnKeys(columns);
      return columns;
    };
    /**
     * Convert children to columns object
     * @param {Array} columns
     * @param {ReactNode} children
     * @returns {Array}
     */


    this.normalizeColumns = (columns, children) => {
      const normalColumns = Object(_utils["a" /* cloneDeep */])(this.getColumns(columns, children));
      return normalColumns;
    };
    /**
     * Combine pagination and table paging processing functions
     */


    this.mergePagination = pagination => {
      const newPagination = assign_default()({
        onChange: this.foundation.setPage
      }, pagination);

      return newPagination;
    };

    this.foundation = new table_foundation(this.adapter); // columns cannot be deepClone, otherwise the comparison will be false

    const columns = this.getColumns(props.columns, props.children);
    const cachedflattenColumns = flattenColumns(columns);
    this.state = {
      /**
       * Cached props
       */
      cachedColumns: columns,
      cachedChildren: props.children,
      flattenColumns: cachedflattenColumns,
      components: mergeComponents(props.components, props.virtualized),

      /**
       * State calculated based on prop
       */
      queries: Object(_utils["a" /* cloneDeep */])(cachedflattenColumns),
      dataSource: [],
      flattenData: [],
      expandedRowKeys: [...(props.expandedRowKeys || []), ...(props.defaultExpandedRowKeys || [])],
      rowSelection: props.rowSelection ? isObject_default()(props.rowSelection) ? assign_default()({}, props.rowSelection) : {} : null,
      pagination: props.pagination && typeof props.pagination === 'object' ? assign_default()({}, props.pagination) : props.pagination || false,

      /**
       * Internal state
       */
      groups: null,
      allRowKeys: [],
      disabledRowKeys: [],
      disabledRowKeysSet: new set_default.a(),
      headWidths: [],
      bodyHasScrollBar: false,
      prePropRowSelection: undefined,
      prePagination: undefined
    };
    this.rootWrapRef = /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createRef"])();
    this.wrapRef = /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createRef"])(); // table's outside wrap

    this.bodyWrapRef = /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createRef"])();
    this.headerWrapRef = /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createRef"])();
    this.store = new utils_Store({
      hoveredRowKey: null
    });
    this.setScrollPosition('left');
    this.debouncedWindowResize = debounce_default()(this.handleWindowResize, 150);
    this.cachedFilteredSortedDataSource = [];
    this.cachedFilteredSortedRowKeys = [];
    this.cachedFilteredSortedRowKeysSet = new set_default.a();
  }

  get adapter() {
    var _this2 = this;

    return assign_default()(assign_default()({}, super.adapter), {
      resetScrollY: () => {
        if (this.bodyWrapRef.current) {
          this.bodyWrapRef.current.scrollTop = 0;
        }
      },
      setSelectedRowKeys: selectedRowKeys => {
        this.setState({
          rowSelection: assign_default()(assign_default()({}, this.state.rowSelection), {
            selectedRowKeys: [...selectedRowKeys],
            selectedRowKeysSet: new set_default.a(selectedRowKeys)
          })
        });
      },
      setDisabledRowKeys: disabledRowKeys => {
        this.setState({
          disabledRowKeys,
          disabledRowKeysSet: new set_default.a(disabledRowKeys)
        });
      },
      setCurrentPage: currentPage => {
        const {
          pagination
        } = this.state;

        if (typeof pagination === 'object') {
          this.setState({
            pagination: assign_default()(assign_default()({}, pagination), {
              currentPage
            })
          });
        } else {
          this.setState({
            pagination: {
              currentPage
            }
          });
        }
      },
      setPagination: pagination => this.setState({
        pagination
      }),
      setGroups: groups => this.setState({
        groups
      }),
      setDataSource: dataSource => this.setState({
        dataSource
      }),
      setExpandedRowKeys: expandedRowKeys => this.setState({
        expandedRowKeys: [...expandedRowKeys]
      }),
      setQuery: function () {
        let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        let queries = [..._this2.state.queries];
        queries = mergeQueries(query, queries);

        _this2.setState({
          queries
        });
      },
      // Update queries when filtering or sorting
      setQueries: queries => this.setState({
        queries
      }),
      setFlattenData: flattenData => this.setState({
        flattenData
      }),
      setAllRowKeys: allRowKeys => this.setState({
        allRowKeys
      }),
      setHoveredRowKey: hoveredRowKey => {
        this.store.setState({
          hoveredRowKey
        });
      },
      setCachedFilteredSortedDataSource: filteredSortedDataSource => {
        this.cachedFilteredSortedDataSource = filteredSortedDataSource;
      },
      setCachedFilteredSortedRowKeys: filteredSortedRowKeys => {
        this.cachedFilteredSortedRowKeys = filteredSortedRowKeys;
        this.cachedFilteredSortedRowKeysSet = new set_default.a(filteredSortedRowKeys);
      },
      getCurrentPage: () => get_default()(this.state, 'pagination.currentPage', 1),
      getCurrentPageSize: () => get_default()(this.state, 'pagination.pageSize', table_constants_numbers.DEFAULT_PAGE_SIZE),
      getCachedFilteredSortedDataSource: () => this.cachedFilteredSortedDataSource,
      getCachedFilteredSortedRowKeys: () => this.cachedFilteredSortedRowKeys,
      getCachedFilteredSortedRowKeysSet: () => this.cachedFilteredSortedRowKeysSet,
      notifyFilterDropdownVisibleChange: (visible, dataIndex) => this._invokeColumnFn(dataIndex, 'onFilterDropdownVisibleChange', visible),
      notifyChange: function () {
        return _this2.props.onChange(...arguments);
      },
      notifyExpand: function () {
        return _this2.props.onExpand(...arguments);
      },
      notifyExpandedRowsChange: function () {
        return _this2.props.onExpandedRowsChange(...arguments);
      },
      notifySelect: function () {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        return _this2._invokeRowSelection('onSelect', ...args);
      },
      notifySelectAll: function () {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        return _this2._invokeRowSelection('onSelectAll', ...args);
      },
      notifySelectInvert: function () {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }

        return _this2._invokeRowSelection('onSelectInvert', ...args);
      },
      notifySelectionChange: function () {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }

        return _this2._invokeRowSelection('onChange', ...args);
      },
      isAnyColumnFixed: columns => lodash_some_default()(this.getColumns(columns || this.props.columns, this.props.children), column => Boolean(column.fixed)),
      useFixedHeader: () => {
        const {
          scroll
        } = this.props;

        if (get_default()(scroll, 'y')) {
          return true;
        }

        return false;
      },
      setHeadWidths: function (headWidths) {
        let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        if (!equalWith(_this2.state.headWidths[index], headWidths)) {
          // The map call depends on the last state
          _this2.setState(state => {
            const newHeadWidths = [...state.headWidths];
            newHeadWidths[index] = [...headWidths];
            return {
              headWidths: newHeadWidths
            };
          });
        }
      },
      getHeadWidths: function () {
        let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

        if (_this2.state.headWidths.length && typeof index === 'number') {
          const configs = _this2.state.headWidths[index] || [];
          return map_default()(configs).call(configs, item => item.width);
        }

        return [];
      },
      // This method is called by row rendering function
      getCellWidths: function (flattenedColumns) {
        let flattenedWidths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        let ignoreScrollBarKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        if (is_array_default()(flattenedColumns) && flattenedColumns.length) {
          flattenedWidths = flattenedWidths == null && _this2.state.headWidths.length ? flattenDeep_default()(_this2.state.headWidths) : [];

          if (is_array_default()(flattenedWidths) && flattenedWidths.length) {
            return reduce_default()(flattenedColumns).call(flattenedColumns, (result, column) => {
              const found = column.key === table_constants_strings.DEFAULT_KEY_COLUMN_SCROLLBAR && ignoreScrollBarKey ? null : lodash_find_default()(flattenedWidths, item => item && item.key != null && item.key === column.key);

              if (found) {
                result.push(found.width);
              }

              return result;
            }, []);
          }
        }

        return [];
      },
      mergedRowExpandable: record => {
        const {
          expandedRowRender,
          childrenRecordName,
          rowExpandable
        } = this.props;

        const children = get_default()(record, childrenRecordName);

        const hasExpandedRowRender = typeof expandedRowRender === 'function';
        const hasRowExpandable = typeof rowExpandable === 'function';
        const hasChildren = is_array_default()(children) && children.length;
        const strictExpandableResult = hasRowExpandable && rowExpandable(record);
        const looseExpandableResult = !hasRowExpandable || strictExpandableResult;
        return (hasExpandedRowRender || hasChildren) && looseExpandableResult || !(hasExpandedRowRender || hasChildren) && strictExpandableResult;
      },
      isAnyColumnUseFullRender: columns => lodash_some_default()(columns, column => Boolean(column.useFullRender)),
      getNormalizeColumns: () => this.normalizeColumns,
      getHandleColumns: () => this.handleColumns,
      getMergePagination: () => this.mergePagination,
      setBodyHasScrollbar: bodyHasScrollBar => {
        if (bodyHasScrollBar !== this.state.bodyHasScrollBar) {
          this.setState({
            bodyHasScrollBar
          });
        }
      }
    });
  }

  static getDerivedStateFromProps(props, state) {
    const willUpdateStates = {};
    const {
      rowSelection,
      dataSource,
      childrenRecordName,
      rowKey,
      pagination
    } = props;
    props.columns && props.children && utils_logger.warn('columns should not given by object and children at the same time');

    if (props.columns && props.columns !== state.cachedColumns) {
      const newFlattenColumns = flattenColumns(props.columns);
      willUpdateStates.flattenColumns = newFlattenColumns;
      willUpdateStates.queries = mergeColumns(state.queries, newFlattenColumns, null, false);
      willUpdateStates.cachedColumns = props.columns;
      willUpdateStates.cachedChildren = null;
    } else if (props.children && props.children !== state.cachedChildren) {
      const newNestedColumns = getColumns(props.children);
      const newFlattenColumns = flattenColumns(newNestedColumns);
      const columns = mergeColumns(state.queries, newFlattenColumns, null, false);
      willUpdateStates.flattenColumns = newFlattenColumns;
      willUpdateStates.queries = [...columns];
      willUpdateStates.cachedColumns = [...newNestedColumns];
      willUpdateStates.cachedChildren = props.children;
    } // Update controlled selection column


    if (rowSelection !== state.prePropRowSelection) {
      let newSelectionStates = {};

      if (isObject_default()(state.rowSelection)) {
        newSelectionStates = assign_default()(assign_default()({}, newSelectionStates), state.rowSelection);
      }

      if (isObject_default()(rowSelection)) {
        newSelectionStates = assign_default()(assign_default()({}, newSelectionStates), rowSelection);
      }

      const selectedRowKeys = get_default()(rowSelection, 'selectedRowKeys');

      const getCheckboxProps = get_default()(rowSelection, 'getCheckboxProps');

      if (selectedRowKeys && is_array_default()(selectedRowKeys)) {
        newSelectionStates.selectedRowKeysSet = new set_default.a(selectedRowKeys);
      } // The return value of getCheckboxProps affects the disabled rows


      if (isFunction_default()(getCheckboxProps)) {
        const disabledRowKeys = getAllDisabledRowKeys({
          dataSource,
          getCheckboxProps,
          childrenRecordName,
          rowKey
        });
        willUpdateStates.disabledRowKeys = disabledRowKeys;
        willUpdateStates.disabledRowKeysSet = new set_default.a(disabledRowKeys);
      }

      willUpdateStates.rowSelection = newSelectionStates;
      willUpdateStates.prePropRowSelection = rowSelection;
    }

    if (pagination !== state.prePagination) {
      let newPagination = {};

      if (isObject_default()(state.pagination)) {
        newPagination = assign_default()(assign_default()({}, newPagination), state.pagination);
      }

      if (isObject_default()(pagination)) {
        newPagination = assign_default()(assign_default()({}, newPagination), pagination);
      }

      willUpdateStates.pagination = newPagination;
      willUpdateStates.prePagination = pagination;
    }

    return willUpdateStates;
  }

  componentDidMount() {
    super.componentDidMount();

    if (this.adapter.isAnyColumnFixed() || this.props.showHeader && this.adapter.useFixedHeader()) {
      this.handleWindowResize();
      window.addEventListener('resize', this.debouncedWindowResize);
    }
  } // TODO: Extract the setState operation to the adapter or getDerivedStateFromProps function


  componentDidUpdate(prevProps, prevState) {
    const {
      dataSource,
      expandedRowKeys,
      expandAllRows,
      expandAllGroupRows,
      virtualized,
      components,
      pagination: propsPagination
    } = this.props;
    const {
      pagination: statePagination,
      queries: stateQueries,
      cachedColumns: stateCachedColumns,
      cachedChildren: stateCachedChildren,
      groups: stateGroups
    } = this.state;
    /**
     * State related to paging
     *
     * @param dataSource
     * @param groups
     * @param pagination
     * @param disabledRowKeys
     * @param allRowKeys
     * @param queries
     */

    const states = {};

    this._warnIfNoKey();
    /**
     * The state that needs to be updated after props changes
     */
    // Update controlled expand column


    if (is_array_default()(expandedRowKeys) && expandedRowKeys !== prevProps.expandedRowKeys) {
      this.setState({
        expandedRowKeys
      });
    } // Update components


    if (components !== prevProps.components || virtualized !== prevProps.virtualized) {
      this.setState({
        components: mergeComponents(components, virtualized)
      });
    } // Update the default expanded column


    if (expandAllRows !== prevProps.expandAllRows || expandAllGroupRows !== prevProps.expandAllGroupRows) {
      this.foundation.initExpandedRowKeys({
        groups: stateGroups
      });
    }
    /**
     * After dataSource is updated || (cachedColumns || cachedChildren updated)
     * 1. Cache filtered sorted data and a collection of data rows, stored in this
     * 2. Update pager and group, stored in state
     */


    if (dataSource !== prevProps.dataSource || stateCachedColumns !== prevState.cachedColumns || stateCachedChildren !== prevState.cachedChildren) {
      // TODO: foundation.getFilteredSortedDataSource has side effects and will be modified to the dataSource reference
      // Temporarily use _dataSource=[...dataSource] for processing
      const _dataSource = [...dataSource];
      const filteredSortedDataSource = this.foundation.getFilteredSortedDataSource(_dataSource, stateQueries);
      this.foundation.setCachedFilteredSortedDataSource(filteredSortedDataSource);
      states.dataSource = filteredSortedDataSource;

      if (this.props.groupBy) {
        states.groups = null;
      }
    } // when dataSource has change, should reset currentPage


    if (dataSource !== prevProps.dataSource) {
      states.pagination = isObject_default()(statePagination) ? assign_default()(assign_default()({}, statePagination), {
        currentPage: isObject_default()(propsPagination) && propsPagination.currentPage ? propsPagination.currentPage : 1
      }) : statePagination;
    }

    if (keys_default()(states).length) {
      const {
        // eslint-disable-next-line @typescript-eslint/no-shadow
        pagination: mergedStatePagination = null,
        queries: stateQueries = null,
        dataSource: stateDataSource = null
      } = states;
      const handledProps = this.foundation.getCurrentPageData(stateDataSource, mergedStatePagination, stateQueries); // After the pager is updated, reset allRowKeys of the current page

      this.adapter.setAllRowKeys(handledProps.allRowKeys);
      this.adapter.setDisabledRowKeys(handledProps.disabledRowKeys);

      if ('dataSource' in states) {
        if (this.props.defaultExpandAllRows && handledProps.groups && handledProps.groups.size || this.props.expandAllRows || this.props.expandAllGroupRows) {
          this.foundation.initExpandedRowKeys(handledProps);
        }
      } // Centrally update paging related state


      const statesKeys = keys_default()(states);

      for (const k of statesKeys) {
        this.setState({
          [k]: handledProps[k]
        });
      }
    }

    if (this.adapter.isAnyColumnFixed() || this.props.showHeader && this.adapter.useFixedHeader()) {
      if (!this.debouncedWindowResize) {
        window.addEventListener('resize', this.debouncedWindowResize);
      }
    }
  }

  componentWillUnmount() {
    super.componentWillUnmount();

    if (this.debouncedWindowResize) {
      window.removeEventListener('resize', this.debouncedWindowResize);
      this.debouncedWindowResize.cancel();
      this.debouncedWindowResize = null;
    }
  }

  render() {
    var _context3, _context4, _context5, _context6, _context7, _context8;

    let _a = this.props,
        {
      scroll,
      prefixCls,
      className,
      style: wrapStyle = {},
      bordered,
      id,
      pagination: propPagination,
      virtualized,
      size,
      renderPagination: propRenderPagination,
      getVirtualizedListRef,
      loading,
      hideExpandedColumn,
      rowSelection: propRowSelection
    } = _a,
        rest = Table_rest(_a, ["scroll", "prefixCls", "className", "style", "bordered", "id", "pagination", "virtualized", "size", "renderPagination", "getVirtualizedListRef", "loading", "hideExpandedColumn", "rowSelection"]);

    let {
      rowSelection,
      expandedRowKeys,
      headWidths,
      tableWidth,
      pagination,
      dataSource,
      queries,
      cachedColumns,
      bodyHasScrollBar
    } = this.state;
    wrapStyle = assign_default()({}, wrapStyle);
    let columns;
    /**
      * As state.queries will change, the columns should be refreshed as a whole at this time
      * The scene of changes in queries
      * 1. Filter
      * 2. Pagination
      *
      * useFullRender needs to be passed to the user selection ReactNode, so columns need to be recalculated every time the selectedRowKeys changes
      * TODO: In the future, the selection passed to the user can be changed to the function type, allowing the user to execute the function to obtain the real-time status of the selection title
      *
      * 由于state.queries会发生变化，此时columns应该整体刷新
      * queries变化的场景
      *  1. 筛选
      *  2. 分页
      * useFullRender需要传给用户selection ReactNode，因此需要每次selectedRowKeys变化时重新计算columns
      * TODO: 未来可以将传给用户的selection改为函数类型，让用户执行函数获取selection title的实时状态
      */

    if (!this.adapter.isAnyColumnUseFullRender(queries)) {
      const rowSelectionUpdate = propRowSelection && !get_default()(propRowSelection, 'hidden');
      columns = this.foundation.memoizedWithFnsColumns(queries, cachedColumns, rowSelectionUpdate, hideExpandedColumn, // Update the columns after the body scrollbar changes to ensure that the head and body are aligned
      bodyHasScrollBar);
    } else {
      columns = this.handleColumns(queries, cachedColumns);
    }

    const filteredColumns = this.foundation.memoizedFilterColumns(columns);
    const flattenFnsColumns = this.foundation.memoizedFlattenFnsColumns(columns);
    const anyColumnFixed = this.adapter.isAnyColumnFixed(columns);
    /**
     * - If it is the first page break, you need to calculate the current page
     * - If it is manual paging, call foundation to modify the state
     *
     * TODO: After merging issue 1007, you can place it in the constructor to complete
     * The reason is that #1007 exposes the parameters required by getCurrentPageData in the constructor
     */

    if (isNull_default()(dataSource)) {
      const pageData = this.foundation.getCurrentPageData(this.props.dataSource);
      dataSource = pageData.dataSource;
      pagination = pageData.pagination;
    }

    const props = assign_default()(assign_default()(assign_default()({}, rest), this.state), {
      // props not in rest
      virtualized,
      scroll,
      prefixCls,
      size,
      hideExpandedColumn,
      // renamed state
      columns,
      // calculated value
      anyColumnFixed,
      rowExpandable: this.mergedRowExpandable,
      pagination,
      dataSource,
      rowSelection,
      expandedRowKeys,
      renderExpandIcon: this.renderExpandIcon,
      filteredColumns
    });

    const x = get_default()(scroll, 'x');

    const y = get_default()(scroll, 'y');

    if (virtualized) {
      if (typeof wrapStyle.width !== 'number') {
        wrapStyle.width = x;
      }
    }

    const wrapCls = classnames_default()({
      [concat_default()(_context3 = "".concat(prefixCls, "-")).call(_context3, table_constants_strings.SIZE_SMALL)]: size === table_constants_strings.SIZE_SMALL,
      [concat_default()(_context4 = "".concat(prefixCls, "-")).call(_context4, table_constants_strings.SIZE_MIDDLE)]: size === table_constants_strings.SIZE_MIDDLE,
      ["".concat(prefixCls, "-virtualized")]: Boolean(virtualized),
      ["".concat(prefixCls, "-bordered")]: bordered,
      ["".concat(prefixCls, "-fixed-header")]: Boolean(y),
      ["".concat(prefixCls, "-scroll-position-left")]: includes_default()(_context5 = ['both', 'left']).call(_context5, this.position),
      ["".concat(prefixCls, "-scroll-position-right")]: includes_default()(_context6 = ['both', 'right']).call(_context6, this.position)
    }); // pagination

    const tablePagination = pagination && propPagination ? this.renderPagination(pagination, propRenderPagination) : null;

    const paginationPosition = get_default()(propPagination, 'position', 'bottom');

    const tableContextValue = assign_default()(assign_default()({}, this.context), {
      headWidths,
      tableWidth,
      anyColumnFixed,
      flattenedColumns: flattenFnsColumns,
      renderExpandIcon: this.renderExpandIcon,
      renderSelection: this.renderSelection,
      setHeadWidths: this.setHeadWidths,
      getHeadWidths: this.getHeadWidths,
      getCellWidths: this.getCellWidths,
      handleRowExpanded: this.handleRowExpanded,
      getVirtualizedListRef,
      setBodyHasScrollbar: this.setBodyHasScrollbar
    });

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      ref: this.rootWrapRef,
      className: classnames_default()(className, "".concat(prefixCls, "-wrapper")),
      "data-column-fixed": anyColumnFixed,
      style: wrapStyle,
      id: id
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(table_TableContextProvider, assign_default()({}, tableContextValue), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(spin_0, {
      spinning: loading,
      size: "large"
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      ref: this.wrapRef,
      className: wrapCls
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, {
      key: 'pagination-top'
    }, includes_default()(_context7 = ['top', 'both']).call(_context7, paginationPosition) ? tablePagination : null), this.renderTitle({
      title: props.title,
      dataSource: props.dataSource,
      prefixCls: props.prefixCls
    }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-container")
    }, this.renderMainTable(assign_default()({}, props))), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, {
      key: 'pagination-bottom'
    }, includes_default()(_context8 = ['bottom', 'both']).call(_context8, paginationPosition) ? tablePagination : null)))));
  }

}

Table_Table.contextType = table_context;
Table_Table.propTypes = {
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  prefixCls: prop_types_default.a.string,
  components: prop_types_default.a.any,
  bordered: prop_types_default.a.bool,
  loading: prop_types_default.a.bool,
  size: prop_types_default.a.oneOf(table_constants_strings.SIZES),
  tableLayout: prop_types_default.a.oneOf(table_constants_strings.LAYOUTS),
  columns: prop_types_default.a.arrayOf(prop_types_default.a.shape(ColumnShape)),
  hideExpandedColumn: prop_types_default.a.bool,
  id: prop_types_default.a.string,
  expandIcon: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.func, prop_types_default.a.node]),
  expandCellFixed: prop_types_default.a.oneOf(table_constants_strings.FIXED_SET),
  title: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node, prop_types_default.a.func]),
  onHeaderRow: prop_types_default.a.func,
  showHeader: prop_types_default.a.bool,
  indentSize: prop_types_default.a.number,
  rowKey: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.string, prop_types_default.a.number]),
  onRow: prop_types_default.a.func,
  onExpandedRowsChange: prop_types_default.a.func,
  onExpand: prop_types_default.a.func,
  rowExpandable: prop_types_default.a.func,
  expandedRowRender: prop_types_default.a.func,
  expandedRowKeys: prop_types_default.a.array,
  defaultExpandAllRows: prop_types_default.a.bool,
  expandAllRows: prop_types_default.a.bool,
  defaultExpandAllGroupRows: prop_types_default.a.bool,
  expandAllGroupRows: prop_types_default.a.bool,
  defaultExpandedRowKeys: prop_types_default.a.array,
  pagination: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.bool]),
  renderPagination: prop_types_default.a.func,
  footer: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.string, prop_types_default.a.node]),
  empty: prop_types_default.a.node,
  dataSource: prop_types_default.a.array,
  childrenRecordName: prop_types_default.a.string,
  rowSelection: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.bool]),
  onChange: prop_types_default.a.func,
  scroll: prop_types_default.a.shape({
    x: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string, prop_types_default.a.bool]),
    y: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string])
  }),
  groupBy: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number, prop_types_default.a.func]),
  renderGroupSection: prop_types_default.a.oneOfType([prop_types_default.a.func]),
  onGroupedRow: prop_types_default.a.func,
  clickGroupedRowToExpand: prop_types_default.a.bool,
  virtualized: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.bool]),
  dropdownPrefixCls: prop_types_default.a.string,
  expandRowByClick: prop_types_default.a.bool,
  getVirtualizedListRef: prop_types_default.a.func // TODO: future api

};
Table_Table.defaultProps = {
  // rowExpandable: stubTrue,
  tableLayout: '',
  dataSource: [],
  prefixCls: table_constants_cssClasses.PREFIX,
  rowSelection: null,
  className: '',
  childrenRecordName: 'children',
  size: 'default',
  loading: false,
  bordered: false,
  expandCellFixed: false,
  hideExpandedColumn: true,
  showHeader: true,
  indentSize: table_constants_numbers.DEFAULT_INDENT_WIDTH,
  onChange: noop_default.a,
  pagination: true,
  rowKey: 'key',
  defaultExpandedRowKeys: [],
  defaultExpandAllRows: false,
  defaultExpandAllGroupRows: false,
  expandAllRows: false,
  expandAllGroupRows: false,
  onFilterDropdownVisibleChange: noop_default.a,
  onExpand: noop_default.a,
  onExpandedRowsChange: noop_default.a,
  expandRowByClick: false
};
/* harmony default export */ var table_Table = (Table_Table);
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/split.js
var lodash_split = __webpack_require__("ExWj");
var split_default = /*#__PURE__*/__webpack_require__.n(lodash_split);

// CONCATENATED MODULE: ../semi-foundation/utils/classnames.ts








function addClass(rawCls) {
  const clss = split_default()(rawCls, /\s+/);

  for (var _len = arguments.length, srcClss = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    srcClss[_key - 1] = arguments[_key];
  }

  const validClss = lodash_filter_default()(srcClss, cls => !includes_default()(clss).call(clss, cls));

  return classnames_default()(rawCls, ...validClss);
}

function removeClass(rawCls) {
  const clss = split_default()(rawCls, /\s+/);

  for (var _len2 = arguments.length, srcClss = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    srcClss[_key2 - 1] = arguments[_key2];
  }

  lodash_map_default()(srcClss, cls => {
    const index = index_of_default()(clss).call(clss, cls);

    if (index > -1) {
      splice_default()(clss).call(clss, index, 1);
    }
  });

  return classnames_default()(...clss);
}


// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/react-resizable/index.js
var react_resizable = __webpack_require__("7kvy");

// CONCATENATED MODULE: ./table/ResizableHeaderCell.tsx





var ResizableHeaderCell_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};




class ResizableHeaderCell_ResizableHeaderCell extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
  render() {
    var _context;

    const _a = this.props,
          {
      onResize,
      onResizeStart,
      onResizeStop,
      width
    } = _a,
          restProps = ResizableHeaderCell_rest(_a, ["onResize", "onResizeStart", "onResizeStop", "width"]);

    if (typeof width !== 'number') {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("th", assign_default()({}, restProps));
    }

    let {
      children
    } = restProps; // Fragment must be used here, otherwise there will be an error (seemingly a react-resizable@1.9.0 problem)

    children = map_default()(_context = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children).call(_context, children, (child, index) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, {
      key: index
    }, child));
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(react_resizable["Resizable"], {
      width: width,
      height: 0,
      onResize: onResize,
      onResizeStart: onResizeStart,
      onResizeStop: onResizeStop,
      draggableOpts: {
        enableUserSelectHack: false
      }
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("th", assign_default()({}, restProps), children));
  }

}

/* harmony default export */ var table_ResizableHeaderCell = (ResizableHeaderCell_ResizableHeaderCell);
// CONCATENATED MODULE: ./table/ResizableTable.tsx










var ResizableTable_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable max-len */

/* eslint-disable @typescript-eslint/no-shadow */

/* eslint-disable react-hooks/exhaustive-deps */

/* eslint-disable react/destructuring-assignment */

/* eslint-disable max-lines-per-function */











const ResizableTable = function () {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let ref = arguments.length > 1 ? arguments[1] : undefined;

  const {
    components: propComponents,
    columns: propColumns,
    resizable
  } = props,
        restProps = ResizableTable_rest(props, ["components", "columns", "resizable"]);

  const childrenColumnName = 'children';

  const onResize = get_default()(resizable, 'onResize', noop_default.a);

  const onResizeStart = get_default()(resizable, 'onResizeStart', noop_default.a);

  const onResizeStop = get_default()(resizable, 'onResizeStop', noop_default.a);
  /**
   * 此处关于 columns 有三个存储
   *
   * 1. rawColumns 是根据 props.columns 或者 props.children 解析出来的原始 columns
   * 2. newColumns 是 rawColumns 的深拷贝，同时根据 props.expandedRowRender、props.hideExpandedColumn 和 props.rowSelection
   * 这三个参数加入了【选择列】以及【展开列】
   * 3. columns 是当前组件中存储的 state，一般情况下与 newColumns 相等，但是会保存列当前伸缩的宽度
   */

  /**
    * There are three stores for columns here
    *
    * 1. rawColumns are the original columns parsed according to props.columns or props.children
    * 2. newColumns is a deep copy of rawColumns, based on props.expandedRowRender, props.hideExpandedColumn and props.rowSelection
    * These three parameters have been added [Select Column] and [Expand Column]
    * 3. columns is the state stored in the current component, which is generally equal to newColumns, but it will save the current stretched width of the column
    */


  const parsedColumns = is_array_default()(propColumns) && propColumns.length ? propColumns : getColumns(props.children);
  const rawColumns = assignColumnKeys(Object(_utils["a" /* cloneDeep */])(parsedColumns), childrenColumnName);
  const newColumns = assignColumnKeys(Object(_utils["a" /* cloneDeep */])(parsedColumns), childrenColumnName);

  if (typeof props.expandedRowRender === 'function' && !props.hideExpandedColumn && !lodash_find_default()(rawColumns, item => item.key === table_constants_strings.DEFAULT_KEY_COLUMN_EXPAND)) {
    newColumns.unshift({
      key: table_constants_strings.DEFAULT_KEY_COLUMN_EXPAND,
      width: table_constants_numbers.DEFAULT_WIDTH_COLUMN_EXPAND
    });
  }

  if (props.rowSelection && !lodash_find_default()(rawColumns, item => item.key === table_constants_strings.DEFAULT_KEY_COLUMN_SELECTION)) {
    newColumns.unshift({
      width: get_default()(props, 'rowSelection.width', table_constants_numbers.DEFAULT_WIDTH_COLUMN_SELECTION),
      key: table_constants_strings.DEFAULT_KEY_COLUMN_SELECTION
    });
  }

  const [columns, setColumns] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(newColumns);
  Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useEffect"])(() => {
    // If there is a resize value, the width does not use the default value fix#1072
    const _newColumns = withResizeWidth(columns, newColumns);

    setColumns(mergeColumns(columns, _newColumns));
  }, [propColumns, props.expandedRowRender, props.hideExpandedColumn, props.rowSelection]);
  const components = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useMemo"])(() => merge_default()({
    header: {
      cell: table_ResizableHeaderCell
    }
  }, propComponents), [propComponents]);

  const handlerClassName = get_default()(resizable, 'handlerClassName', 'resizing');

  const handleResize = column => (e, _ref) => {
    let {
      size
    } = _ref;
    const nextColumns = Object(_utils["a" /* cloneDeep */])(columns);
    const curColumn = findColumn(nextColumns, column, childrenColumnName);

    let nextColumn = assign_default()(assign_default()({}, curColumn), {
      width: size.width
    });

    const customProps = onResize(nextColumn) || {};
    nextColumn = assign_default()(assign_default()({}, nextColumn), customProps);

    assign_default()(curColumn, nextColumn);

    setColumns(nextColumns);
  };

  const handleResizeStart = column => e => {
    const nextColumns = Object(_utils["a" /* cloneDeep */])(columns);
    const curColumn = findColumn(nextColumns, column, childrenColumnName);

    let nextColumn = assign_default()(assign_default()({}, curColumn), {
      className: addClass(curColumn.className, handlerClassName)
    });

    const customProps = onResizeStart(nextColumn) || {};
    nextColumn = assign_default()(assign_default()({}, nextColumn), customProps);

    assign_default()(curColumn, nextColumn);

    setColumns(nextColumns);
  };

  const handleResizeStop = column => e => {
    const nextColumns = Object(_utils["a" /* cloneDeep */])(columns);
    const curColumn = findColumn(nextColumns, column, childrenColumnName);

    let nextColumn = assign_default()(assign_default()({}, curColumn), {
      className: removeClass(curColumn.className, handlerClassName)
    });

    const customProps = onResizeStop(nextColumn) || {};
    nextColumn = assign_default()(assign_default()({}, nextColumn), customProps);

    assign_default()(curColumn, nextColumn);

    setColumns(nextColumns);
  };

  const resizableRender = function (col, index) {
    let level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return assign_default()(assign_default()({}, col), {
      onHeaderCell: column => ({
        width: column.width,
        onResize: handleResize(column),
        onResizeStart: handleResizeStart(column),
        onResizeStop: handleResizeStop(column)
      })
    });
  };

  const assignResizableRender = function () {
    let columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return is_array_default()(columns) && columns.length ? map_default()(columns).call(columns, (col, index) => {
      assign_default()(col, resizableRender(col, index, level));

      const children = col[childrenColumnName];

      if (is_array_default()(children) && children.length) {
        col[childrenColumnName] = assignResizableRender(children, level + 1);
      }

      return col;
    }) : [];
  };

  const finalColumns = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useMemo"])(() => assignResizableRender(columns), [columns]);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(table_Table, assign_default()({}, restProps, {
    columns: finalColumns,
    components: components,
    ref: ref
  }));
};

/* harmony default export */ var table_ResizableTable = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.forwardRef(ResizableTable));
// CONCATENATED MODULE: ./table/index.tsx








class table_Table_0 extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
  constructor(props) {
    super(props);

    this.getCurrentPageData = () => this.tableRef.current && this.tableRef.current.getCurrentPageData();

    this.tableRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
  }

  render() {
    // eslint-disable-next-line prefer-destructuring
    const props = this.props;

    if (props.resizable) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(table_ResizableTable, assign_default()({}, props, {
        ref: this.tableRef
      }));
    } else {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(table_Table, assign_default()({}, props, {
        ref: this.tableRef
      }));
    }
  }

}

table_Table_0.Column = Column_Column;
table_Table_0.DEFAULT_KEY_COLUMN_SELECTION = table_constants_strings.DEFAULT_KEY_COLUMN_SELECTION;
table_Table_0.DEFAULT_KEY_COLUMN_EXPAND = table_constants_strings.DEFAULT_KEY_COLUMN_EXPAND;
table_Table_0.propTypes = assign_default()(assign_default()({}, table_Table.propTypes), {
  resizable: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.object])
});
table_Table_0.defaultProps = {
  hideExpandedColumn: true
};

/* harmony default export */ var table_0 = (table_Table_0);
// CONCATENATED MODULE: ../semi-foundation/tabs/constants.ts

const tabs_constants_cssClasses = {
  TABS: "".concat(BASE_CLASS_PREFIX, "-tabs"),
  TABS_BAR: "".concat(BASE_CLASS_PREFIX, "-tabs-bar"),
  TABS_BAR_LINE: "".concat(BASE_CLASS_PREFIX, "-tabs-bar-line"),
  TABS_BAR_CARD: "".concat(BASE_CLASS_PREFIX, "-tabs-bar-card"),
  TABS_BAR_BUTTON: "".concat(BASE_CLASS_PREFIX, "-tabs-bar-button"),
  TABS_BAR_EXTRA: "".concat(BASE_CLASS_PREFIX, "-tabs-bar-extra"),
  TABS_TAB: "".concat(BASE_CLASS_PREFIX, "-tabs-tab"),
  TABS_TAB_ACTIVE: "".concat(BASE_CLASS_PREFIX, "-tabs-tab-active"),
  TABS_TAB_DISABLED: "".concat(BASE_CLASS_PREFIX, "-tabs-tab-disabled"),
  TABS_CONTENT: "".concat(BASE_CLASS_PREFIX, "-tabs-content"),
  TABS_CONTENT_ANIMATED: "".concat(BASE_CLASS_PREFIX, "-tabs-content-animated"),
  TABS_CONTENT_NO_ANIMATED: "".concat(BASE_CLASS_PREFIX, "-tabs-content-no-animated"),
  TABS_PANE: "".concat(BASE_CLASS_PREFIX, "-tabs-pane"),
  TABS_PANE_INACTIVE: "".concat(BASE_CLASS_PREFIX, "-tabs-pane-inactive"),
  TABS_PANE_ACTIVE: "".concat(BASE_CLASS_PREFIX, "-tabs-pane-active"),
  TABS_PANE_MOTION_OVERLAY: "".concat(BASE_CLASS_PREFIX, "-tabs-pane-motion-overlay"),
  TABS_PANE_ANIMATING: "".concat(BASE_CLASS_PREFIX, "-tabs-pane-animating")
};
const tabs_constants_numbers = {
  DEFAULT_ACTIVE_KEY: 1
};
const tabs_constants_strings = {
  TYPE_MAP: ['line', 'card', 'button'],
  SIZE: ['small', 'medium', 'large'],
  POSITION_MAP: ['top', 'left']
};

// CONCATENATED MODULE: ../semi-foundation/tabs/foundation.ts








class foundation_TabsFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
    this.destroy = noop_default.a;

    this.handlePrevent = event => {
      event.stopPropagation();
      event.preventDefault();
    };

    this.handleKeyDown = (event, itemKey, closable) => {
      var _context;

      const {
        preventScroll
      } = this.getProps();

      const tabs = filter_default()(_context = [...event.target.parentNode.childNodes]).call(_context, item => {
        var _context2;

        return includes_default()(_context2 = get_default()(item, 'attributes.data-tabkey.value', '')).call(_context2, 'semiTab') && get_default()(item, 'attributes.aria-disabled.value', '') !== "true";
      });

      switch (event.key) {
        case "ArrowLeft":
        case "ArrowRight":
        case "ArrowUp":
        case "ArrowDown":
          this.determineOrientation(event, tabs);
          break;

        case "Backspace":
        case "Delete":
          this.handleDeleteKeyDown(event, tabs, itemKey, closable);
          break;

        case "Enter":
        case " ":
          this.handleTabClick(itemKey, event);
          this.handlePrevent(event);
          break;

        case "Home":
          tabs[0].focus({
            preventScroll
          }); // focus first tab

          this.handlePrevent(event);
          break;

        case "End":
          tabs[tabs.length - 1].focus({
            preventScroll
          }); // focus last tab

          this.handlePrevent(event);
          break;
      }
    };
  }

  init() {
    this._adapter.collectPane();
  }

  _notifyChange(activeKey) {
    const {
      activeKey: stateActiveKey
    } = this.getStates();

    if (stateActiveKey !== activeKey) {
      this._adapter.notifyChange(activeKey);
    }
  }

  handleTabClick(activeKey, event) {
    const isControlledComponent = this._isInProps('activeKey');

    if (isControlledComponent) {
      this._notifyChange(activeKey);
    } else {
      this._notifyChange(activeKey);

      this.handleNewActiveKey(activeKey);
    }

    this._adapter.notifyTabClick(activeKey, event);
  }

  handleNewActiveKey(activeKey) {
    const {
      activeKey: stateActiveKey
    } = this.getStates();

    if (stateActiveKey !== activeKey) {
      this._adapter.setNewActiveKey(activeKey);
    }
  }

  getDefaultActiveKey() {
    let activeKey;
    const props = this.getProps();

    if ('activeKey' in props) {
      activeKey = props.activeKey;
    } else if ('defaultActiveKey' in props) {
      activeKey = props.defaultActiveKey;
    } else {
      activeKey = this._adapter.getDefaultActiveKeyFromChildren();
    }

    return activeKey;
  }

  handleTabListChange() {
    this._adapter.collectPane();
  }

  handleTabPanesChange() {
    this._adapter.collectPane();

    this._adapter.collectActiveKey();
  }

  handleTabDelete(tabKey) {
    this._adapter.notifyTabDelete(tabKey);
  }

  determineOrientation(event, tabs) {
    const {
      tabPosition
    } = this.getProps();
    const isVertical = tabPosition === 'left';

    if (isVertical) {
      if (event.key === "ArrowUp" || event.key === "ArrowDown") {
        this.switchTabOnArrowPress(event, tabs);
        this.handlePrevent(event);
      }
    } else {
      if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
        this.switchTabOnArrowPress(event, tabs);
        this.handlePrevent(event);
      }
    }
  }

  handleDeleteKeyDown(event, tabs, itemKey, closable) {
    const {
      preventScroll
    } = this.getProps();

    if (closable) {
      this.handleTabDelete(itemKey);

      const index = index_of_default()(tabs).call(tabs, event.target); // Move focus to next element after deletion
      // If the element is the last removable tab, focus to its previous tab


      if (tabs.length !== 1) {
        tabs[index + 1 >= tabs.length ? index - 1 : index + 1].focus({
          preventScroll
        });
      }
    }
  }

  switchTabOnArrowPress(event, tabs) {
    const {
      preventScroll
    } = this.getProps();

    const index = index_of_default()(tabs).call(tabs, event.target);

    const direction = {
      "ArrowLeft": -1,
      "ArrowUp": -1,
      "ArrowRight": 1,
      "ArrowDown": 1
    };

    if (direction[event.key]) {
      if (index !== undefined) {
        if (tabs[index + direction[event.key]]) {
          tabs[index + direction[event.key]].focus({
            preventScroll
          });
        } else if (event.key === "ArrowLeft" || event.key === "ArrowUp") {
          tabs[tabs.length - 1].focus({
            preventScroll
          }); // focus last tab
        } else if (event.key === "ArrowRight" || event.key == "ArrowDown") {
          tabs[0].focus({
            preventScroll
          }); // focus first tab
        }
      }
    }
  }

}

/* harmony default export */ var tabs_foundation = (foundation_TabsFoundation);
// EXTERNAL MODULE: ../semi-foundation/tabs/tabs.scss
var tabs_tabs = __webpack_require__("X9hi");

// CONCATENATED MODULE: ./tabs/TabBar.tsx







var TabBar_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};












class TabBar_TabBar extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Component {
  constructor(props) {
    super(props);

    this.handleItemClick = (itemKey, e) => {
      this.props.onTabClick(itemKey, e);

      if (this.props.collapsible) {
        var _context, _context2;

        const key = this._getItemKey(itemKey); // eslint-disable-next-line max-len


        const tabItem = document.querySelector(concat_default()(_context = concat_default()(_context2 = "[data-uuid=\"".concat(this.uuid, "\"] .")).call(_context2, tabs_constants_cssClasses.TABS_TAB, "[data-scrollkey=\"")).call(_context, key, "\"]"));
        tabItem.scrollIntoView({
          behavior: 'smooth',
          block: 'nearest',
          inline: 'nearest'
        });
      }
    };

    this.handleKeyDown = (event, itemKey, closable) => {
      this.props.handleKeyDown(event, itemKey, closable);
    };

    this.renderTabItem = panel => {
      const {
        size,
        type,
        deleteTabItem
      } = this.props;
      const panelIcon = panel.icon ? this.renderIcon(panel.icon) : null;
      const closableIcon = type === 'card' && panel.closable ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClose, {
        "aria-label": "Close",
        role: "button",
        className: "".concat(tabs_constants_cssClasses.TABS_TAB, "-icon-close"),
        onClick: e => deleteTabItem(panel.itemKey, e)
      }) : null;
      let events = {};
      const key = panel.itemKey;

      if (!panel.disabled) {
        events = {
          onClick: e => this.handleItemClick(key, e)
        };
      }

      const isSelected = this._isActive(key);

      const className = classnames_default()(tabs_constants_cssClasses.TABS_TAB, {
        [tabs_constants_cssClasses.TABS_TAB_ACTIVE]: isSelected,
        [tabs_constants_cssClasses.TABS_TAB_DISABLED]: panel.disabled,
        ["".concat(tabs_constants_cssClasses.TABS_TAB, "-small")]: size === 'small',
        ["".concat(tabs_constants_cssClasses.TABS_TAB, "-medium")]: size === 'medium'
      });
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
        role: "tab",
        id: "semiTab".concat(key),
        "data-tabkey": "semiTab".concat(key),
        "aria-controls": "semiTabPanel".concat(key),
        "aria-disabled": panel.disabled ? 'true' : 'false',
        "aria-selected": isSelected ? 'true' : 'false',
        tabIndex: isSelected ? 0 : -1,
        onKeyDown: e => this.handleKeyDown(e, key, panel.closable)
      }, events, {
        className: className,
        key: this._getItemKey(key)
      }), panelIcon, panel.tab, closableIcon);
    };

    this.renderTabComponents = list => map_default()(list).call(list, panel => this.renderTabItem(panel));

    this.handleArrowClick = (items, pos) => {
      var _context3, _context4;

      const inline = pos === 'start' ? 'end' : 'start';
      const lastItem = pos === 'start' ? items.pop() : items.shift();

      if (!lastItem) {
        return;
      }

      const key = this._getItemKey(lastItem.itemKey); // eslint-disable-next-line max-len


      const tabItem = document.querySelector(concat_default()(_context3 = concat_default()(_context4 = "[data-uuid=\"".concat(this.uuid, "\"] .")).call(_context4, tabs_constants_cssClasses.TABS_TAB, "[data-scrollkey=\"")).call(_context3, key, "\"]"));
      tabItem.scrollIntoView({
        behavior: 'smooth',
        block: 'nearest',
        inline
      });
    };

    this.renderCollapse = (items, icon, pos) => {
      var _context5, _context6;

      if (isEmpty_default()(items)) {
        return null;
      }

      const {
        dropdownClassName,
        dropdownStyle
      } = this.props;
      const {
        rePosKey
      } = this.state;
      const disabled = !items.length;
      const menu = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dropdown_0.Menu, null, map_default()(items).call(items, panel => {
        const {
          icon: i,
          tab,
          itemKey
        } = panel;
        const panelIcon = i ? this.renderIcon(panel.icon) : null;
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dropdown_0.Item, {
          key: itemKey,
          onClick: e => this.handleItemClick(itemKey, e),
          active: this._isActive(itemKey)
        }, panelIcon, tab);
      }));
      const arrowCls = classnames_default()({
        [concat_default()(_context5 = "".concat(tabs_constants_cssClasses.TABS_BAR, "-arrow-")).call(_context5, pos)]: pos,
        ["".concat(tabs_constants_cssClasses.TABS_BAR, "-arrow")]: true
      });
      const dropdownCls = classnames_default()(dropdownClassName, {
        ["".concat(tabs_constants_cssClasses.TABS_BAR, "-dropdown")]: true
      });
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(dropdown_0, {
        className: dropdownCls,
        clickToHide: true,
        clickTriggerToHide: true,
        key: concat_default()(_context6 = "".concat(rePosKey, "-")).call(_context6, pos),
        position: pos === 'start' ? 'bottomLeft' : 'bottomRight',
        render: disabled ? null : menu,
        showTick: true,
        style: dropdownStyle,
        trigger: 'hover'
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "presentation",
        className: arrowCls,
        onClick: e => this.handleArrowClick(items, pos)
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(button_0, {
        disabled: disabled,
        icon: icon,
        // size="small"
        theme: "borderless"
      })));
    };

    this.renderOverflow = items => map_default()(items).call(items, (item, ind) => {
      const icon = ind === 0 ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronLeft, null) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronRight, null);
      const pos = ind === 0 ? 'start' : 'end';
      return this.renderCollapse(item, icon, pos);
    });

    this.renderCollapsedTab = () => {
      const {
        list
      } = this.props;

      const renderedList = map_default()(list).call(list, item => {
        const {
          itemKey
        } = item;
        return assign_default()({
          key: this._getItemKey(itemKey),
          active: this._isActive(itemKey)
        }, item);
      });

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(overflowList_0, {
        items: renderedList,
        overflowRenderer: this.renderOverflow,
        renderMode: "scroll",
        className: "".concat(tabs_constants_cssClasses.TABS_BAR, "-overflow-list"),
        visibleItemRenderer: this.renderTabItem
      });
    };

    this._isActive = key => key === this.props.activeKey;

    this._getItemKey = key => "".concat(key, "-bar");

    this.state = {
      endInd: props.list.length,
      rePosKey: 0,
      startInd: 0
    };
    this.uuid = getUuidv4();
  }

  renderIcon(icon) {
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, icon);
  }

  renderExtra() {
    var _context7, _context8, _context9;

    const {
      tabBarExtraContent,
      type,
      size
    } = this.props;
    const tabBarExtraContentDefaultStyle = {
      float: 'right'
    };
    const tabBarExtraContentStyle = tabBarExtraContent && tabBarExtraContent.props ? tabBarExtraContent.props.style : {};
    const extraCls = classnames_default()(tabs_constants_cssClasses.TABS_BAR_EXTRA, {
      [concat_default()(_context7 = "".concat(tabs_constants_cssClasses.TABS_BAR, "-")).call(_context7, type, "-extra")]: type,
      [concat_default()(_context8 = concat_default()(_context9 = "".concat(tabs_constants_cssClasses.TABS_BAR, "-")).call(_context9, type, "-extra-")).call(_context8, size)]: size
    });

    if (tabBarExtraContent) {
      const tabBarStyle = assign_default()(assign_default()({}, tabBarExtraContentDefaultStyle), tabBarExtraContentStyle);

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: extraCls,
        style: tabBarStyle,
        "x-semi-prop": "tabBarExtraContent"
      }, tabBarExtraContent);
    }

    return null;
  }

  render() {
    var _context10;

    const _a = this.props,
          {
      type,
      style,
      className,
      list,
      tabPosition,
      collapsible
    } = _a,
          restProps = TabBar_rest(_a, ["type", "style", "className", "list", "tabPosition", "collapsible"]);

    const classNames = classnames_default()(className, {
      [tabs_constants_cssClasses.TABS_BAR]: true,
      [tabs_constants_cssClasses.TABS_BAR_LINE]: type === 'line',
      [tabs_constants_cssClasses.TABS_BAR_CARD]: type === 'card',
      [tabs_constants_cssClasses.TABS_BAR_BUTTON]: type === 'button',
      [concat_default()(_context10 = "".concat(tabs_constants_cssClasses.TABS_BAR, "-")).call(_context10, tabPosition)]: tabPosition,
      ["".concat(tabs_constants_cssClasses.TABS_BAR, "-collapse")]: collapsible
    });
    const extra = this.renderExtra();
    const contents = collapsible ? this.renderCollapsedTab() : this.renderTabComponents(list);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
      role: "tablist",
      "aria-orientation": tabPosition === "left" ? "vertical" : "horizontal",
      className: classNames,
      style: style
    }, getDataAttr(restProps), {
      "data-uuid": this.uuid
    }), contents, extra);
  }

}

TabBar_TabBar.propTypes = {
  activeKey: prop_types_default.a.string,
  className: prop_types_default.a.string,
  collapsible: prop_types_default.a.bool,
  list: prop_types_default.a.array,
  onTabClick: prop_types_default.a.func,
  size: prop_types_default.a.oneOf(tabs_constants_strings.SIZE),
  style: prop_types_default.a.object,
  tabBarExtraContent: prop_types_default.a.node,
  tabPosition: prop_types_default.a.oneOf(tabs_constants_strings.POSITION_MAP),
  type: prop_types_default.a.oneOf(tabs_constants_strings.TYPE_MAP),
  closable: prop_types_default.a.bool,
  deleteTabItem: prop_types_default.a.func
};
/* harmony default export */ var tabs_TabBar = (TabBar_TabBar);
// CONCATENATED MODULE: ./tabs/tabs-context.ts

const TabsContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext({});
/* harmony default export */ var tabs_context = (TabsContext);
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/lodash/toInteger.js
var lodash_toInteger = __webpack_require__("m2YG");
var lodash_toInteger_default = /*#__PURE__*/__webpack_require__.n(lodash_toInteger);

// CONCATENATED MODULE: ./tabs/TabPaneTransition.tsx



/* eslint-disable react/destructuring-assignment */



const TabPaneTransition = function () {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const direction = props.direction ? 1 : -1;
  const {
    mode
  } = props;
  let {
    motion
  } = props;
  const ratio = 60;

  if (typeof motion === 'function') {
    motion = motion(props);
  } else if (!motion || typeof motion !== 'object') {
    motion = {};
  }

  if (mode === 'vertical') {
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Transition_Transition, assign_default()({}, props, {
      config: {
        tension: 612,
        friction: 32
      },
      from: {
        translateY: direction * ratio,
        opacity: 0
      },
      enter: {
        translateY: 0,
        opacity: {
          val: 1,
          duration: 200
        }
      },
      leave: {
        translateY: -1 * direction * ratio,
        opacity: {
          val: 0,
          duration: 200
        }
      }
    }, motion), typeof props.children === 'function' ? _ref => {
      let {
        translateY,
        opacity
      } = _ref;
      // delete translateX in 0 in case of zIndex problems.
      const finalState = lodash_toInteger_default()(translateY) === 0 ? {
        opacity
      } : {
        transform: "translateY(".concat(lodash_toInteger_default()(translateY), "px)"),
        opacity
      };
      return props.children(finalState);
    } : props.children);
  }

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Transition_Transition, assign_default()({}, props, {
    config: {
      tension: 612,
      friction: 32
    },
    from: {
      translateX: direction * ratio,
      opacity: 0
    },
    enter: {
      translateX: 0,
      opacity: {
        val: 1,
        duration: 200
      }
    },
    leave: {
      translateX: -1 * direction * ratio,
      opacity: {
        val: 0,
        duration: 200
      }
    }
  }, motion), typeof props.children === 'function' ? _ref2 => {
    let {
      translateX,
      opacity
    } = _ref2;
    // delete translateX in 0 in case of zIndex problems.
    const finalState = lodash_toInteger_default()(translateX) === 0 ? {
      opacity
    } : {
      transform: "translateX(".concat(lodash_toInteger_default()(translateX), "px)"),
      opacity
    };
    return props.children(finalState);
  } : props.children);
};

/* harmony default export */ var tabs_TabPaneTransition = (TabPaneTransition);
// CONCATENATED MODULE: ./tabs/TabPane.tsx






var TabPane_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};









class TabPane_TabPane extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  constructor() {
    super(...arguments);
    this.lastActiveKey = null;
    this.ref = /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createRef"])(); // get direction from current item key to activeKey

    this.getDirection = (activeKey, itemKey, panes) => {
      if (itemKey !== null && activeKey !== null && is_array_default()(panes) && panes.length) {
        const activeIndex = find_index_default()(panes).call(panes, pane => pane.itemKey === activeKey);

        const itemIndex = find_index_default()(panes).call(panes, pane => pane.itemKey === itemKey);

        const lastActiveIndex = find_index_default()(panes).call(panes, pane => pane.itemKey === this.lastActiveKey);

        this.lastActiveKey = activeKey;

        if (activeIndex === itemIndex) {
          return lastActiveIndex > activeIndex;
        } else {
          return itemIndex < activeIndex;
        }
      }

      return false;
    };
    /* istanbul ignore next */


    this.hideScroll = () => {
      if (this.ref && this.ref.current) {
        this.ref.current.style.overflow = 'hidden';
        this.isAnimating = true;
      }
    };
    /* istanbul ignore next */


    this.autoScroll = () => {
      if (this.ref && this.ref.current) {
        this.ref.current.style.overflow = '';
        this.isAnimating = false;
      }
    };

    this.shouldRender = () => {
      const {
        itemKey
      } = this.props;
      const {
        activeKey,
        lazyRender
      } = this.context;
      const active = activeKey === itemKey;
      this._active = this._active || active;
      return lazyRender ? this._active : true;
    };
  }

  componentDidMount() {
    this.lastActiveKey = this.context.activeKey;
  }

  render() {
    const {
      tabPaneMotion: motion,
      tabPosition
    } = this.context;

    const _a = this.props,
          {
      className,
      style,
      children,
      itemKey
    } = _a,
          restProps = TabPane_rest(_a, ["className", "style", "children", "itemKey"]);

    const active = this.context.activeKey === itemKey;
    const classNames = classnames_default()(className, {
      [tabs_constants_cssClasses.TABS_PANE_INACTIVE]: !active,
      [tabs_constants_cssClasses.TABS_PANE_ACTIVE]: active,
      [tabs_constants_cssClasses.TABS_PANE]: true
    });
    const shouldRender = this.shouldRender();
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
      ref: this.ref,
      role: "tabpanel",
      id: "semiTabPanel".concat(itemKey),
      "aria-labelledby": "semiTab".concat(itemKey),
      className: classNames,
      style: style,
      "aria-hidden": active ? 'false' : 'true',
      tabIndex: 0
    }, getDataAttr(restProps), {
      "x-semi-prop": "children"
    }), motion ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tabs_TabPaneTransition, {
      direction: this.getDirection(this.context.activeKey, itemKey, this.context.panes),
      motion: motion,
      mode: tabPosition === 'top' ? 'horizontal' : 'vertical',
      state: active ? 'enter' : 'leave'
    }, transitionStyle => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(tabs_constants_cssClasses.TABS_PANE_MOTION_OVERLAY),
      style: assign_default()({}, transitionStyle),
      "x-semi-prop": "children"
    }, shouldRender ? children : null)) : shouldRender ? children : null);
  }

}

TabPane_TabPane.isTabPane = true;
TabPane_TabPane.contextType = tabs_context;
TabPane_TabPane.propTypes = {
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  children: prop_types_default.a.node,
  disabled: prop_types_default.a.bool,
  itemKey: prop_types_default.a.string,
  tab: prop_types_default.a.node,
  icon: prop_types_default.a.node,
  closable: prop_types_default.a.bool
};
/* harmony default export */ var tabs_TabPane = (TabPane_TabPane);
// CONCATENATED MODULE: ./tabs/index.tsx












var tabs_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};













const panePickKeys = ['className', 'style', 'disabled', 'itemKey', 'tab', 'icon'];


class tabs_Tabs extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.setContentRef = ref => {
      this.contentRef = {
        current: ref
      };
    };

    this.onTabClick = (activeKey, event) => {
      this.foundation.handleTabClick(activeKey, event);
    };
    /* istanbul ignore next */


    this.rePosChildren = (children, activeKey) => {
      const newChildren = [];
      const falttenChildren = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children.toArray(children);

      if (children.length) {
        newChildren.push(...filter_default()(falttenChildren).call(falttenChildren, child => child.props && child.props.itemKey === activeKey));
        newChildren.push(...filter_default()(falttenChildren).call(falttenChildren, child => child.props && child.props.itemKey !== activeKey));
      }

      return newChildren;
    };

    this.getActiveItem = () => {
      var _context;

      const {
        activeKey
      } = this.state;
      const {
        children,
        tabList
      } = this.props;

      if (tabList || !is_array_default()(children)) {
        return children;
      }

      return filter_default()(_context = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children.toArray(children)).call(_context, pane => {
        if ( /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(pane) && pane.type && pane.type.isTabPane) {
          return pane.props.itemKey === activeKey;
        }

        return true;
      });
    };

    this.deleteTabItem = (tabKey, event) => {
      event.stopPropagation();
      this.foundation.handleTabDelete(tabKey);
    };

    this.foundation = new tabs_foundation(this.adapter);
    this.state = {
      activeKey: this.foundation.getDefaultActiveKey(),
      panes: []
    };
    this.contentRef = /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["createRef"])();
    this.contentHeight = 'auto';
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      collectPane: () => {
        var _context2;

        const {
          tabList,
          children
        } = this.props;

        if (is_array_default()(tabList) && tabList.length) {
          this.setState({
            panes: tabList
          });
          return;
        }

        const panes = map_default()(_context2 = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children).call(_context2, children, child => {
          if (child) {
            const {
              tab,
              icon,
              disabled,
              itemKey,
              closable
            } = child.props;
            return {
              tab,
              icon,
              disabled,
              itemKey,
              closable
            };
          }

          return undefined;
        });

        this.setState({
          panes
        });
      },
      collectActiveKey: () => {
        let panes = [];
        const {
          tabList,
          children,
          activeKey: propsActiveKey
        } = this.props;

        if (typeof propsActiveKey !== 'undefined') {
          return;
        }

        const {
          activeKey
        } = this.state;

        if (is_array_default()(tabList) && tabList.length) {
          panes = tabList;
        } else {
          var _context3;

          panes = map_default()(_context3 = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children).call(_context3, children, child => {
            if (child) {
              const {
                tab,
                icon,
                disabled,
                itemKey,
                closable
              } = child.props;
              return {
                tab,
                icon,
                disabled,
                itemKey,
                closable
              };
            }

            return undefined;
          });
        }

        if (find_index_default()(panes).call(panes, p => p.itemKey === activeKey) === -1) {
          if (panes.length > 0) {
            this.setState({
              activeKey: panes[0].itemKey
            });
          } else {
            this.setState({
              activeKey: ''
            });
          }
        }
      },
      notifyTabClick: (activeKey, event) => {
        this.props.onTabClick(activeKey, event);
      },
      notifyChange: activeKey => {
        this.props.onChange(activeKey);
      },
      setNewActiveKey: activeKey => {
        this.setState({
          activeKey
        });
      },
      getDefaultActiveKeyFromChildren: () => {
        var _context4;

        const {
          tabList,
          children
        } = this.props;
        let activeKey = '';
        const list = tabList ? tabList : map_default()(_context4 = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children.toArray(children)).call(_context4, child => /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(child) ? child.props : null);

        for_each_default()(list).call(list, item => {
          if (item && !activeKey && !item.disabled) {
            activeKey = item.itemKey;
          }
        });

        return activeKey;
      },
      notifyTabDelete: tabKey => {
        this.props.onTabClose && this.props.onTabClose(tabKey);
      }
    });
  }

  static getDerivedStateFromProps(props, state) {
    const states = {};

    if (!isNullOrUndefined(props.activeKey) && props.activeKey !== state.activeKey) {
      states.activeKey = props.activeKey;
    }

    return states;
  }

  componentDidUpdate(prevProps) {
    var _context5, _context6;

    // Panes state acts on tab bar, no need to compare TabPane children
    const prevChildrenProps = map_default()(_context5 = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children.toArray(prevProps.children)).call(_context5, child => pick_default()( /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(child) ? child.props : null, panePickKeys));

    const nowChildrenProps = map_default()(_context6 = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children.toArray(this.props.children)).call(_context6, child => pick_default()( /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["isValidElement"])(child) ? child.props : null, panePickKeys));

    const isTabListType = this.props.tabList || prevProps.tabList;

    if (!isEqual_default()(this.props.tabList, prevProps.tabList)) {
      this.foundation.handleTabListChange();
    } // children变化，tabList方式使用时，啥也不用做
    // children变化，非tabList方式使用，需要重新取activeKey。TabPane可能是异步更新的，若不重新取，未设activeKey时，第一个不会自动激活
    // children changed: do nothing in tabList case
    // children changed: recalc activeKey. TabPane could be updated async. If not recalc the first panel will not be activated


    if (!isEqual_default()(prevChildrenProps, nowChildrenProps) && !isTabListType) {
      this.foundation.handleTabPanesChange();
    }
  }

  render() {
    var _context7, _context8;

    const _a = this.props,
          {
      children,
      className,
      collapsible,
      contentStyle,
      keepDOM,
      lazyRender,
      renderTabBar,
      size,
      style,
      tabBarClassName,
      tabBarExtraContent,
      tabBarStyle,
      tabPaneMotion,
      tabPosition,
      type
    } = _a,
          restProps = tabs_rest(_a, ["children", "className", "collapsible", "contentStyle", "keepDOM", "lazyRender", "renderTabBar", "size", "style", "tabBarClassName", "tabBarExtraContent", "tabBarStyle", "tabPaneMotion", "tabPosition", "type"]);

    const {
      panes,
      activeKey
    } = this.state;
    const tabWrapperCls = classnames_default()(className, {
      [tabs_constants_cssClasses.TABS]: true,
      [concat_default()(_context7 = "".concat(tabs_constants_cssClasses.TABS, "-")).call(_context7, tabPosition)]: tabPosition
    });
    const tabContentCls = classnames_default()({
      [tabs_constants_cssClasses.TABS_CONTENT]: true,
      [concat_default()(_context8 = "".concat(tabs_constants_cssClasses.TABS_CONTENT, "-")).call(_context8, tabPosition)]: tabPosition
    });
    const tabBarProps = {
      activeKey,
      className: tabBarClassName,
      collapsible,
      list: panes,
      onTabClick: this.onTabClick,
      size,
      style: tabBarStyle,
      tabBarExtraContent,
      tabPosition,
      type,
      deleteTabItem: this.deleteTabItem,
      handleKeyDown: this.foundation.handleKeyDown
    };
    const tabBar = renderTabBar ? renderTabBar(tabBarProps, tabs_TabBar) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tabs_TabBar, assign_default()({}, tabBarProps));
    const content = keepDOM ? children : this.getActiveItem();
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
      className: tabWrapperCls,
      style: style
    }, getDataAttr(restProps)), tabBar, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tabs_context.Provider, {
      value: {
        activeKey,
        lazyRender,
        panes,
        tabPaneMotion,
        tabPosition
      }
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      ref: this.setContentRef,
      className: tabContentCls,
      style: assign_default()({}, contentStyle)
    }, content)));
  }

}

tabs_Tabs.TabPane = tabs_TabPane;
tabs_Tabs.propTypes = {
  activeKey: prop_types_default.a.string,
  className: prop_types_default.a.string,
  collapsible: prop_types_default.a.bool,
  contentStyle: prop_types_default.a.oneOfType([prop_types_default.a.object]),
  defaultActiveKey: prop_types_default.a.string,
  keepDOM: prop_types_default.a.bool,
  lazyRender: prop_types_default.a.bool,
  onChange: prop_types_default.a.func,
  onTabClick: prop_types_default.a.func,
  renderTabBar: prop_types_default.a.func,
  size: prop_types_default.a.oneOf(tabs_constants_strings.SIZE),
  style: prop_types_default.a.object,
  tabBarClassName: prop_types_default.a.string,
  tabBarExtraContent: prop_types_default.a.node,
  tabBarStyle: prop_types_default.a.object,
  tabList: prop_types_default.a.array,
  tabPaneMotion: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.object, prop_types_default.a.func]),
  tabPosition: prop_types_default.a.oneOf(tabs_constants_strings.POSITION_MAP),
  type: prop_types_default.a.oneOf(tabs_constants_strings.TYPE_MAP),
  onTabClose: prop_types_default.a.func,
  preventScroll: prop_types_default.a.bool
};
tabs_Tabs.defaultProps = {
  children: [],
  collapsible: false,
  keepDOM: true,
  lazyRender: false,
  onChange: () => undefined,
  onTabClick: () => undefined,
  size: 'large',
  tabPaneMotion: true,
  tabPosition: 'top',
  type: 'line',
  onTabClose: () => undefined
};
/* harmony default export */ var tabs_0 = (tabs_Tabs);
// EXTERNAL MODULE: ../semi-foundation/timeline/timeline.scss
var timeline = __webpack_require__("dD6V");

// CONCATENATED MODULE: ../semi-foundation/timeline/constants.ts

const timeline_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-timeline"),
  ITEM: "".concat(BASE_CLASS_PREFIX, "-timeline-item")
};
const timeline_constants_strings = {
  MODE: ['left', 'alternate', 'right', 'center'],
  ITEM_POS: ['left', 'right'],
  ITEM_TYPE: ['ongoing', 'success', 'warning', 'error', 'default']
};

// CONCATENATED MODULE: ./timeline/item.tsx








const timeline_item_prefixCls = timeline_constants_cssClasses.ITEM;
class timeline_item_Item extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    var _context;

    const {
      className,
      color,
      children,
      dot,
      type,
      style,
      time,
      extra,
      onClick
    } = this.props;
    const itemCls = classnames_default()(timeline_item_prefixCls, className);
    const dotCls = classnames_default()({
      ["".concat(timeline_item_prefixCls, "-head")]: true,
      ["".concat(timeline_item_prefixCls, "-head-custom")]: dot,
      [concat_default()(_context = "".concat(timeline_item_prefixCls, "-head-")).call(_context, type)]: type
    });
    const dotStyle = color ? {
      style: {
        backgroundColor: color
      }
    } : null;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
      className: itemCls,
      style: style,
      onClick: onClick
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(timeline_item_prefixCls, "-tail"),
      "aria-hidden": true
    }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
      className: dotCls,
      "aria-hidden": true
    }, dotStyle), dot), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(timeline_item_prefixCls, "-content")
    }, children, extra && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(timeline_item_prefixCls, "-content-extra")
    }, extra), time && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(timeline_item_prefixCls, "-content-time")
    }, time)));
  }

}
timeline_item_Item.propTypes = {
  color: prop_types_default.a.string,
  time: prop_types_default.a.node,
  type: prop_types_default.a.oneOf(timeline_constants_strings.ITEM_TYPE),
  dot: prop_types_default.a.node,
  extra: prop_types_default.a.node,
  position: prop_types_default.a.oneOf(timeline_constants_strings.ITEM_POS),
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  onClick: prop_types_default.a.func
};
timeline_item_Item.defaultProps = {
  type: 'default',
  time: '',
  onClick: noop_default.a
};
// CONCATENATED MODULE: ./timeline/index.tsx











const timeline_prefixCls = timeline_constants_cssClasses.PREFIX;

class timeline_Timeline extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  constructor() {
    super(...arguments);

    this.getPosCls = (ele, idx) => {
      const {
        mode
      } = this.props;

      if (mode === 'alternate') {
        if (ele.props.position) {
          var _context;

          return concat_default()(_context = "".concat(timeline_prefixCls, "-item-")).call(_context, ele.props.position);
        }

        return idx % 2 === 0 ? "".concat(timeline_prefixCls, "-item-left") : "".concat(timeline_prefixCls, "-item-right");
      }

      if (mode === 'center') {
        if (ele.props.position) {
          var _context2;

          return concat_default()(_context2 = "".concat(timeline_prefixCls, "-item-")).call(_context2, ele.props.position);
        }

        return "".concat(timeline_prefixCls, "-item-left");
      }

      if (mode === 'left' || mode === 'right') {
        var _context3;

        return concat_default()(_context3 = "".concat(timeline_prefixCls, "-item-")).call(_context3, mode);
      }

      if (ele.props.position) {
        var _context4;

        return concat_default()(_context4 = "".concat(timeline_prefixCls, "-item-")).call(_context4, ele.props.position);
      }

      return '';
    };

    this.addClassName = items => {
      var _context5;

      return map_default()(_context5 = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children).call(_context5, items, (ele, idx) => {
        if ( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(ele)) {
          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(ele, {
            className: classnames_default()(ele.props.className, this.getPosCls(ele, idx))
          });
        }

        return ele;
      });
    };
  }

  render() {
    var _context6;

    const {
      children,
      className,
      style,
      mode,
      dataSource
    } = this.props;
    const classString = classnames_default()(timeline_prefixCls, className, {
      [concat_default()(_context6 = "".concat(timeline_prefixCls, "-")).call(_context6, mode)]: mode
    });
    let childrenList;

    if (dataSource && dataSource.length) {
      const items = map_default()(dataSource).call(dataSource, (item, index) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(timeline_item_Item, assign_default()({
        key: "timeline-item-".concat(index)
      }, item), item.content));

      childrenList = this.addClassName(items);
    }

    const items = childrenList || this.addClassName(children);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
      "aria-label": this.props['aria-label'],
      style: style,
      className: classString
    }, items);
  }

}

timeline_Timeline.contextType = configProvider_context;
timeline_Timeline.Item = timeline_item_Item;
timeline_Timeline.propTypes = {
  mode: prop_types_default.a.oneOf(timeline_constants_strings.MODE),
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  dataSource: prop_types_default.a.array
};
timeline_Timeline.defaultProps = {
  mode: 'left'
};
/* harmony default export */ var timeline_0 = (timeline_Timeline);
// CONCATENATED MODULE: ../semi-foundation/timePicker/utils/index.ts




/* eslint-disable max-len */




/**
 *
 * @param {string|Date|number} input
 * @param {string} formatToken
 * @param {object} dateFnsLocale
 * @returns {Date}
 */

const parseToDate = function (input) {
  let formatToken = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : timePicker_constants_strings.DEFAULT_FORMAT;
  let dateFnsLocale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : zh_CN;

  if (input instanceof Date) {
    return input;
  } else if (typeof input === 'number' || !isNaN(Number(input))) {
    return new Date(toNumber_default()(input));
  } else if (typeof input === 'string') {
    let curDate = new Date(); // console.log(input, formatToken);

    curDate = parse(input, formatToken, curDate, {
      locale: dateFnsLocale
    }); // console.log(curDate, formatToken);

    return curDate;
  }

  return new Date();
};
/**
 *
 * @param {string|Date|number} input
 * @returns {number}
 */

const parseToTimestamp = function (input) {
  let formatToken = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : timePicker_constants_strings.DEFAULT_FORMAT;
  let dateFnsLocale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : zh_CN;
  return Number(parseToDate(input, formatToken, dateFnsLocale));
};
/**
 *
 * @param {Date|number} dateOrTimestamp
 * @param {string} formatToken
 * @returns {string}
 */

const formatToString = function (dateOrTimestamp) {
  let formatToken = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : timePicker_constants_strings.DEFAULT_FORMAT;
  let dateFnsLocale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : zh_CN;
  return format_format(dateOrTimestamp, formatToken, {
    locale: dateFnsLocale
  });
};
const hourIsDisabled = (disabledHours, hour) => {
  if (typeof disabledHours === 'function') {
    const disabledOptions = disabledHours();

    if (is_array_default()(disabledOptions) && !isNullOrUndefined(hour) && some_default()(disabledOptions).call(disabledOptions, v => toNumber_default()(v) === toNumber_default()(hour))) {
      return true;
    }
  }

  return false;
};
const minuteIsDisabled = (disabledMinutes, hour, minute) => {
  if (typeof disabledMinutes === 'function') {
    const disabledOptions = disabledMinutes(hour);

    if (is_array_default()(disabledOptions) && !isNullOrUndefined(hour) && !isNullOrUndefined(minute) && some_default()(disabledOptions).call(disabledOptions, v => toNumber_default()(v) === toNumber_default()(minute))) {
      return true;
    }
  }

  return false;
};
const secondIsDisabled = (disabledSeconds, hour, minute, second) => {
  if (typeof disabledSeconds === 'function') {
    const disabledOptions = disabledSeconds(hour, minute);

    if (is_array_default()(disabledOptions) && !isNullOrUndefined(hour) && !isNullOrUndefined(minute) && !isNullOrUndefined(second) && some_default()(disabledOptions).call(disabledOptions, v => toNumber_default()(v) === toNumber_default()(second))) {
      return true;
    }
  }

  return false;
};
const transformToArray = value => {
  if (!is_array_default()(value)) {
    return [];
  } else {
    return [...value];
  }
};
/**
 * Determine whether the time length is the same as the format
 * e.g.
 *  format      | time      | return
 *  HH:mm       | 12:00     | true
 *  HH:mm:ss    | 12:00:00  | true
 *  yyyy HH:mm  | 2021 12:00| true
 *  HH          | 1         | false
 *  HH:mm       | 12:0      | false
 *  HH          | 1         | false
 *  HH:mm:ss    | 12:00:0   | false
 * @param {String} time  e.g. 12:0
 * @param {String} formatToken e.g. HH:mm
 * @returns {Boolean}
 */

const isTimeFormatLike = (time, formatToken) => {
  let isLike = true;
  const dateFnsSupportFormatCh = 'BDEGHKLMOPQRSTXYabcehimopqstuwxyz'; // dateFns support format character

  const formatSupportChReg = new RegExp("[".concat(dateFnsSupportFormatCh, "]"), 'g');
  const formatNotSupportChReg = new RegExp("[^".concat(dateFnsSupportFormatCh, "]"), 'g');
  const hmsReg = /[H|m|s]{1,2}/;
  const formatSplitted = formatToken.split(formatNotSupportChReg); // => ['HH', 'mm'];

  const timeSeparator = formatToken.replace(formatSupportChReg, ''); // => :

  const timeReg = new RegExp("[".concat(timeSeparator, "]"), 'g'); // => /[:]/g

  const timeSplitted = time.split(timeReg); // => ['12', '0]

  if (formatSplitted.length !== timeSplitted.length) {
    isLike = false;
  } else {
    for (let i = 0, len = timeSplitted.length; i < len; i++) {
      const formatStr = formatSplitted[i];
      const timeStr = timeSplitted[i]; // Returns false if the current character corresponds to minutes and seconds and the length is less than format
      // when i=1 => '0'.length < 'mm'.length

      if (hmsReg.test(formatStr) && timeStr.length < formatStr.length) {
        isLike = false;
        break;
      }
    }
  }

  return isLike;
};
// CONCATENATED MODULE: ../semi-foundation/timePicker/foundation.ts








/* eslint-disable max-len */





 // TODO: split, timePicker different components cannot share a foundation

class foundation_TimePickerFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  }

  init() {
    this.initDataFromDefaultValue();
    const open = this._isControlledComponent('open') ? this.getProp('open') : this.getProp('defaultOpen');

    if (open && !this._isControlledComponent('open')) {
      this._adapter.registerClickOutSide();
    }
  }

  getPosition() {
    const position = this.getProp('position');
    const type = this.getProp('type') || timePicker_constants_strings.DEFAULT_TYPE; // rtl change default position

    const direction = this.getContext('direction');
    const rtlDirection = direction === 'rtl' ? 'bottomRight' : '';
    return position || rtlDirection || timePicker_constants_strings.DEFAULT_POSITION[type];
  }

  isDisabledHMS(_ref) {
    let {
      hours,
      minutes,
      seconds
    } = _ref;
    const {
      disabledHours,
      disabledMinutes,
      disabledSeconds
    } = this.getProps();
    const hDis = !isNullOrUndefined(hours) && hourIsDisabled(disabledHours, hours);
    const mDis = !isNullOrUndefined(hours) && !isNullOrUndefined(minutes) && minuteIsDisabled(disabledMinutes, hours, minutes);
    const sDis = !isNullOrUndefined(hours) && !isNullOrUndefined(minutes) && !isNullOrUndefined(seconds) && secondIsDisabled(disabledSeconds, hours, minutes, seconds);
    return hDis || mDis || sDis;
  }

  isValidTimeZone(timeZone) {
    var _context;

    const _timeZone = timeZone === undefined ? this.getProp('timeZone') : timeZone;

    return includes_default()(_context = ['string', 'number']).call(_context, typeof _timeZone) && _timeZone !== '';
  }

  getDefaultFormatIfNeed() {
    if (this._isInProps('format')) {
      return this.getProp('format');
    } else if (this.getProp('use12Hours')) {
      return timePicker_constants_strings.DEFAULT_FORMAT_A;
    } else {
      return timePicker_constants_strings.DEFAULT_FORMAT;
    }
  }
  /**
   * User input value => save timestamp
   */


  initDataFromDefaultValue() {
    const defaultValue = this.getProp('defaultValue');
    let value = this.getProp('value');
    const timeZone = this.getProp('timeZone');
    const formatToken = this.getValidFormat();
    const {
      rangeSeparator,
      dateFnsLocale
    } = this.getProps();
    value = value || defaultValue;

    if (!is_array_default()(value)) {
      value = value ? [value] : [];
    }

    const parsedValues = [];
    let invalid = false;

    for_each_default()(value).call(value, v => {
      const pv = parseToDate(v, formatToken, dateFnsLocale);

      if (!isNaN(pv.getTime())) {
        parsedValues.push(this.isValidTimeZone() ? date_fns_extra_utcToZonedTime(pv, timeZone) : pv);
      }
    });

    const isAM = [true, false];

    map_default()(parsedValues).call(parsedValues, (item, idx) => {
      isAM[idx] = getHours(item) < 12;
    });

    if (parsedValues.length === value.length) {
      value = parsedValues;
    } else {
      value = [];

      if (value.length) {
        invalid = true;
      }
    }

    let inputValue = '';

    if (!invalid) {
      inputValue = map_default()(value).call(value, v => formatToString(v, formatToken, dateFnsLocale)).join(rangeSeparator);
    }

    this.setState({
      isAM,
      value,
      inputValue,
      invalid
    });
  }

  getValidFormat(validFormat) {
    let _format = validFormat;

    if (isNullOrUndefined(_format)) {
      _format = this.getDefaultFormatIfNeed();
    }

    if (typeof _format !== 'string') {
      _format = timePicker_constants_strings.DEFAULT_FORMAT;
    }

    return _format;
  }

  handlePanelChange(result) {
    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    // console.log(result, index);
    const formatToken = this.getValidFormat();
    const dateFnsLocale = this.getProp('dateFnsLocale');
    const oldValue = this.getState('value');
    let isAM = this.getState('isAM');
    const value = transformToArray(oldValue);
    isAM = transformToArray(isAM);

    if (result) {
      const panelIsAM = Boolean(result.isAM);
      const date = parseToDate(result.timeStampValue, formatToken, dateFnsLocale);
      value[index] = date;
      isAM[index] = panelIsAM;
      const inputValue = this.formatValue(value);

      if (this.getState('isAM')[index] !== result.isAM) {
        this.setState({
          isAM
        });
      }

      if (!this._isControlledComponent('value')) {
        const invalid = this.validateDates(value);
        this.setState({
          isAM,
          value,
          inputValue,
          invalid
        });
      }

      if (this._hasChanged(value, oldValue)) {
        this._notifyChange(value, inputValue);
      }
    }
  }

  refreshProps() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const {
      value,
      timeZone,
      __prevTimeZone
    } = props;
    let dates = this.parseValue(value);
    const invalid = this.validateDates(dates);

    if (!invalid) {
      if (this.isValidTimeZone(timeZone)) {
        dates = map_default()(dates).call(dates, date => date_fns_extra_utcToZonedTime(this.isValidTimeZone(__prevTimeZone) ? date_fns_extra_zonedTimeToUtc(date, __prevTimeZone) : date, timeZone));
      }

      const inputValue = this.formatValue(dates);
      this.setState({
        value: dates,
        invalid,
        inputValue
      });
    }
  }

  handleFocus(e) {
    if (!this.getState('open')) {
      this.handlePanelOpen();
    }

    this._adapter.notifyFocus(e);
  }

  setPanel(open) {
    this._adapter.togglePanel(open);
  }

  destroy() {
    this._adapter.unregisterClickOutSide();
  }

  handlePanelOpen() {
    if (!this._isControlledComponent('open')) {
      this._adapter.registerClickOutSide();

      this.setPanel(true);
    }

    this._adapter.notifyOpenChange(true);
  }

  handlePanelClose(clickedOutside, e) {
    if (!this._isControlledComponent('open')) {
      this._adapter.unregisterClickOutSide();

      this.setPanel(false);
    }

    this._adapter.notifyOpenChange(false);

    this._adapter.notifyBlur(e);
  }
  /* istanbul ignore next */


  handleVisibleChange(visible) {
    if (!this._isControlledComponent('open')) {
      this._adapter.togglePanel(visible);
    }

    this._adapter.notifyOpenChange(visible);
  }

  handleInputChange(input) {
    this._adapter.setInputValue(input);

    const rangeSeparator = this.getProp('rangeSeparator');

    const inputValues = split_default()(input, rangeSeparator);

    const formatToken = this.getValidFormat();
    /**
     * 如果输入的字符串不是formatLike则不进行下一步操作，以免输入过程被打断
     * 特殊case
     *  - 清空时，input 为 ''，此时需要跳过isTimeFormatLike判断
     *
     * If the input string is not formatLike, do not proceed to the next operation to avoid interruption of the input process
     *  special case
     *  -when emptying, the input is "', at this time you need to skip isTimeFormatLike judgment
     */

    if (input !== '' && some_default()(inputValues).call(inputValues, time => !isTimeFormatLike(time, formatToken))) {
      return;
    }

    const dates = this.parseInput(input);
    const invalid = this.validateDates(dates);
    const states = {
      invalid
    };
    const oldValue = this.getState('value');
    let value = transformToArray(oldValue);

    if (!invalid) {
      states.value = dates;
      value = [...dates];
    }

    if (!this._isControlledComponent('value')) {
      this.setState(states);
    }

    if (this._hasChanged(value, oldValue)) {
      this._notifyChange(value, input);
    }
  }
  /* istanbul ignore next */


  doValidate(args) {
    if (typeof args === 'string') {
      return this.validateStr(args);
    } else if (is_array_default()(args)) {
      return this.validateDates(args);
    }

    return undefined;
  }

  validateStr() {
    let inputValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    const dates = this.parseInput(inputValue);
    return this.validateDates(dates);
  }

  validateDates() {
    let dates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    let invalid = some_default()(dates).call(dates, d => isNaN(Number(d)));

    if (!invalid) {
      invalid = some_default()(dates).call(dates, d => this.isDisabledHMS({
        hours: d.getHours(),
        minutes: d.getMinutes(),
        seconds: d.getSeconds()
      }));
    }

    return invalid;
  }

  handleInputBlur(e) {
    const invalid = this.getState('invalid');
    const inputValue = this.getState('inputValue');
    const value = this.getState('value');

    if (inputValue) {
      if (invalid) {
        this.setState({
          inputValue: this.formatValue(value),
          invalid: false
        });
      } else {
        this.setState({
          inputValue: this.formatValue(value)
        });
      }
    } else {
      this.setState({
        inputValue: '',
        value: [],
        invalid: false
      });
    }
  }

  formatValue(dates) {
    const validFormat = this.getValidFormat();
    const rangeSeparator = this.getProp('rangeSeparator');
    const dateFnsLocale = this.getProp('dateFnsLocale');
    let _dates = dates;

    if (_dates && !is_array_default()(_dates)) {
      _dates = _dates[_dates];
    }

    if (_dates && is_array_default()(_dates)) {
      return map_default()(_dates).call(_dates, date => formatToString(date, validFormat, dateFnsLocale)).join(rangeSeparator);
    }

    return undefined;
  }

  parseInput(str) {
    const validFormat = this.getValidFormat();
    const rangeSeparator = this.getProp('rangeSeparator');
    const dateFnsLocale = this.getProp('dateFnsLocale');

    if (str && typeof str === 'string') {
      var _context2;

      return map_default()(_context2 = split_default()(str, rangeSeparator)).call(_context2, v => parseToDate(v, validFormat, dateFnsLocale));
    }

    return [];
  }

  parseValue() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    const formatToken = this.getValidFormat();
    const dateFnsLocale = this.getProp('dateFnsLocale');
    let _value = value;

    if (!is_array_default()(_value)) {
      _value = _value ? [_value] : [];
    }

    if (is_array_default()(_value)) {
      return map_default()(_value).call(_value, v => parseToDate(v, formatToken, dateFnsLocale));
    }

    return [];
  }

  _notifyChange(value, inputValue) {
    let str = inputValue;
    let _value = value;
    const timeZone = this.getProp('timeZone');

    if (this._adapter.isRangePicker()) {
      const rangeSeparator = this.getProp('rangeSeparator');
      str = split_default()(inputValue, rangeSeparator);
    } else {
      _value = is_array_default()(_value) ? _value[0] : _value;
    }

    if (this.isValidTimeZone() && _value) {
      const formatToken = this.getValidFormat();

      if (is_array_default()(_value)) {
        _value = map_default()(_value).call(_value, v => date_fns_extra_zonedTimeToUtc(v, timeZone));
        str = map_default()(_value).call(_value, v => format_format(v, formatToken));
      } else {
        _value = date_fns_extra_zonedTimeToUtc(_value, timeZone);
        str = format_format(_value, formatToken);
      }
    }

    const onChangeWithDateFirst = this.getProp('onChangeWithDateFirst');

    if (onChangeWithDateFirst) {
      this._adapter.notifyChange(_value, str);
    } else {
      this._adapter.notifyChange(str, _value);
    }
  }

  _hasChanged() {
    let dates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let oldDates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    const formatToken = this.getValidFormat();
    const dateFnsLocale = this.getProp('dateFnsLocale');
    return dates.length !== oldDates.length || some_default()(dates).call(dates, (date, index) => {
      const oldDate = oldDates[index];

      if (isValid(date) && isValid(oldDate) && formatToString(date, formatToken, dateFnsLocale) === formatToString(oldDate, formatToken, dateFnsLocale)) {
        return false;
      }

      return true;
    });
  }

}

/* harmony default export */ var timePicker_foundation = (foundation_TimePickerFoundation);
// CONCATENATED MODULE: ../semi-foundation/timePicker/inputFoundation.ts




class inputFoundation_TimePickerFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  init() {} // eslint-disable-next-line @typescript-eslint/no-empty-function


  destroy() {}

  handleFocus(e) {
    this.storeCursor();

    this._adapter.notifyFocus(e);
  }

  handleChange(v) {
    this.storeCursor();

    this._adapter.notifyChange(v);
  }

  handleBlur(e) {
    this.clearCursor();

    this._adapter.notifyBlur(e);
  }

  storeCursor() {
    const inputNode = this.getCache('inputNode');

    if (inputNode) {
      const {
        selectionStart: start
      } = inputNode; // const beforeStr = typeof value === 'string' ? value.substr(0, start) : null;
      // const afterStr = typeof value === 'string' ? value.substr(start, value.length - start + 1) : null;
      // console.log(start, beforeStr, afterStr);

      this.setCache('cursorIndex', start);
    }
  }

  restoreCursor() {
    const inputNode = this.getCache('inputNode');
    const cursorIndex = this.getCache('cursorIndex');

    if (inputNode && !isNullOrUndefined(cursorIndex)) {
      inputNode.selectionStart = cursorIndex;
      inputNode.selectionEnd = cursorIndex;
    }
  }

  clearCursor() {
    this.setCache('cursorIndex', null);
    this.setCache('beforeStr', null);
    this.setCache('afterStr', null);
  }

}

/* harmony default export */ var inputFoundation = (inputFoundation_TimePickerFoundation);
// CONCATENATED MODULE: ./timePicker/TimeInput.tsx






var TimeInput_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable no-unused-vars */











class TimeInput_TimeInput extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.setRef = node => this.adapter.setCache('inputNode', node);

    this.handleClick = e => this.props.onClick(e);

    this.handleFocus = e => this.foundation.handleFocus(e);

    this.handleBlur = e => this.foundation.handleBlur(e);

    this.handleChange = v => this.foundation.handleChange(v);

    this.foundation = new inputFoundation(this.adapter);
    this.state = {// focusing: props.focusOnOpen,
    };
  }

  componentDidMount() {
    super.componentDidMount();
    const {
      focusOnOpen,
      preventScroll
    } = this.props;

    if (focusOnOpen) {
      const requestAnimationFrame = window.requestAnimationFrame || set_timeout_default.a;
      requestAnimationFrame(() => {
        const inputNode = this.adapter.getCache('inputNode');

        if (inputNode) {
          inputNode.focus({
            preventScroll
          });
          inputNode.select();
        }
      });
    }
  }

  componentDidUpdate(prevProps) {
    const {
      timeStampValue
    } = this.props;

    if (this.isControlled('timeStampValue') && timeStampValue !== this.state.timeStampValue) {
      this.foundation.restoreCursor();
    }

    if (this.props.value !== prevProps.value) {
      this.foundation.restoreCursor();
    }
  }

  get adapter() {
    var _this = this;

    return assign_default()(assign_default()({}, super.adapter), {
      notifyChange: function () {
        return _this.props.onChange(...arguments);
      },
      notifyFocus: function () {
        return _this.props.onFocus(...arguments);
      },
      notifyBlur: function () {
        return _this.props.onBlur(...arguments);
      }
    });
  }

  getInput() {
    const _a = this.props,
          {
      prefixCls,
      placeholder,
      inputReadOnly,
      onFocus,
      disabled,
      type,
      locale,
      localeCode,
      insetLabel,
      validateStatus,
      value,
      onChange,
      invalid,
      format,
      clearText,
      disabledHours,
      disabledMinutes,
      disabledSeconds,
      onEsc,
      defaultOpenValue,
      currentSelectPanel,
      focusOnOpen,
      timeStampValue,
      timeZone,
      defaultOpen,
      dateFnsLocale
    } = _a,
          rest = TimeInput_rest(_a, ["prefixCls", "placeholder", "inputReadOnly", "onFocus", "disabled", "type", "locale", "localeCode", "insetLabel", "validateStatus", "value", "onChange", "invalid", "format", "clearText", "disabledHours", "disabledMinutes", "disabledSeconds", "onEsc", "defaultOpenValue", "currentSelectPanel", "focusOnOpen", "timeStampValue", "timeZone", "defaultOpen", "dateFnsLocale"]); // const { focusing } = this.state;


    const inputCls = classnames_default()("".concat(prefixCls, "-input"), {
      ["".concat(prefixCls, "-input-invalid")]: invalid,
      ["".concat(prefixCls, "-input-readonly")]: inputReadOnly
    });
    const mergeValidateStatus = invalid ? 'error' : validateStatus;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(input_0, assign_default()({}, rest, {
      hideSuffix: true,
      className: inputCls,
      ref: this.setRef,
      value: value,
      placeholder: placeholder || locale.placeholder[type],
      readonly: Boolean(inputReadOnly),
      onChange: this.handleChange,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      suffix: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClock, {
        onClick: this.handleClick
      }),
      validateStatus: mergeValidateStatus,
      disabled: disabled,
      insetLabel: insetLabel
    }));
  }

  render() {
    const {
      prefixCls
    } = this.props;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(prefixCls, "-input-wrap")
    }, this.getInput());
  }

}

TimeInput_TimeInput.propTypes = {
  format: prop_types_default.a.string,
  prefixCls: prop_types_default.a.string,
  placeholder: prop_types_default.a.string,
  clearText: prop_types_default.a.string,
  inputReadOnly: prop_types_default.a.bool,
  hourOptions: prop_types_default.a.array,
  minuteOptions: prop_types_default.a.array,
  secondOptions: prop_types_default.a.array,
  disabledHours: prop_types_default.a.func,
  disabledMinutes: prop_types_default.a.func,
  disabledSeconds: prop_types_default.a.func,
  onChange: prop_types_default.a.func,
  onFocus: prop_types_default.a.func,
  onBlur: prop_types_default.a.func,
  onEsc: prop_types_default.a.func,
  onClick: prop_types_default.a.func,
  defaultOpenValue: prop_types_default.a.object,
  currentSelectPanel: prop_types_default.a.string,
  focusOnOpen: prop_types_default.a.bool,
  timeStampValue: prop_types_default.a.any,
  locale: prop_types_default.a.object,
  localeCode: prop_types_default.a.string,
  insetLabel: prop_types_default.a.node,
  validateStatus: prop_types_default.a.string,
  preventScroll: prop_types_default.a.bool
};
TimeInput_TimeInput.defaultProps = {
  inputReadOnly: false,
  onChange: noop_default.a,
  onBlur: noop_default.a,
  onFocus: noop_default.a,
  onClick: noop_default.a,
  disabledHours: noop_default.a,
  disabledMinutes: noop_default.a,
  disabledSeconds: noop_default.a,
  format: timePicker_constants_strings.DEFAULT_FORMAT
};
/* harmony default export */ var timePicker_TimeInput = (TimeInput_TimeInput);
// CONCATENATED MODULE: ./timePicker/PanelShape.ts

const PanelShape = {
  panelHeader: prop_types_default.a.oneOfType([prop_types_default.a.node, prop_types_default.a.string]),
  panelFooter: prop_types_default.a.oneOfType([prop_types_default.a.node, prop_types_default.a.string])
};
const PanelShapeDefaults = {};
// CONCATENATED MODULE: ./timePicker/TimeShape.ts

const PlainTimeShape = [prop_types_default.a.string, prop_types_default.a.number, prop_types_default.a.instanceOf(Date)];
/**
 * Can be
 * - 12:00:12
 * - \[12:00:12]
 * - \[12:00:12, 12:21:12]
 * - \[[12:00:12, 12:21:12], [12:11:12, 12:32:12]]
 */

const TimeShape = prop_types_default.a.oneOfType([...PlainTimeShape, prop_types_default.a.arrayOf(prop_types_default.a.string), prop_types_default.a.arrayOf(prop_types_default.a.number), prop_types_default.a.arrayOf(prop_types_default.a.instanceOf(Date))]);

// EXTERNAL MODULE: ../semi-foundation/timePicker/timePicker.scss
var timePicker = __webpack_require__("Pu2W");

// CONCATENATED MODULE: ./timePicker/TimePicker.tsx








var TimePicker_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable no-unused-vars */


















class TimePicker_TimePicker extends baseComponent_BaseComponent {
  constructor(props) {
    var _this;

    super(props);
    _this = this;

    this.onCurrentSelectPanelChange = currentSelectPanel => {
      this.setState({
        currentSelectPanel
      });
    };

    this.handlePanelChange = (value, index) => this.foundation.handlePanelChange(value, index);

    this.handleInput = value => this.foundation.handleInputChange(value);

    this.createPanelProps = function () {
      let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      const {
        panels,
        panelFooter,
        panelHeader,
        locale
      } = _this.props;
      const panelProps = {
        panelHeader,
        panelFooter
      };

      if (_this.adapter.isRangePicker()) {
        const defaultHeaderMap = {
          0: locale.begin,
          1: locale.end
        };
        panelProps.panelHeader = get_default()(panels, index, isNullOrUndefined(panelHeader) ? get_default()(defaultHeaderMap, index, null) : panelHeader);
        panelProps.panelFooter = get_default()(panels, index, panelFooter);
      }

      return panelProps;
    };
    /* istanbul ignore next */


    this.handlePanelVisibleChange = visible => this.foundation.handleVisibleChange(visible);

    this.openPanel = () => {
      this.foundation.handlePanelOpen();
    };

    this.handleFocus = e => {
      this.foundation.handleFocus(e);
    };

    this.handleBlur = e => this.foundation.handleInputBlur(e);

    this.setTimePickerRef = node => this.timePickerRef.current = node;

    const {
      format = timePicker_constants_strings.DEFAULT_FORMAT
    } = props;
    this.state = {
      open: props.open || props.defaultOpen || false,
      value: [],
      inputValue: '',
      currentSelectPanel: 0,
      isAM: [true, false],
      showHour: Boolean(format.match(/HH|hh|H|h/g)),
      showMinute: Boolean(format.match(/mm/g)),
      showSecond: Boolean(format.match(/ss/g)),
      invalid: undefined
    };
    this.foundation = new timePicker_foundation(this.adapter);
    this.timePickerRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.savePanelRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
  }

  get adapter() {
    var _this2 = this;

    return assign_default()(assign_default()({}, super.adapter), {
      togglePanel: show => {
        this.setState({
          open: show
        });
      },
      registerClickOutSide: () => {
        if (this.clickOutSideHandler) {
          this.adapter.unregisterClickOutSide();
        }

        this.clickOutSideHandler = e => {
          const panel = this.savePanelRef && this.savePanelRef.current;
          const isInPanel = e.target && panel && panel.contains(e.target);
          const isInTimepicker = this.timePickerRef && this.timePickerRef.current && this.timePickerRef.current.contains(e.target);

          if (!isInTimepicker && !isInPanel) {
            const clickedOutside = true;
            this.foundation.handlePanelClose(clickedOutside, e);
          }
        };

        document.addEventListener('mousedown', this.clickOutSideHandler);
      },
      setInputValue: (inputValue, cb) => this.setState({
        inputValue
      }, cb),
      unregisterClickOutSide: () => {
        if (this.clickOutSideHandler) {
          document.removeEventListener('mousedown', this.clickOutSideHandler);
          this.clickOutSideHandler = null;
        }
      },
      notifyOpenChange: function () {
        return _this2.props.onOpenChange(...arguments);
      },
      notifyChange: (agr1, arg2) => this.props.onChange && this.props.onChange(agr1, arg2),
      notifyFocus: function () {
        return _this2.props.onFocus && _this2.props.onFocus(...arguments);
      },
      notifyBlur: function () {
        return _this2.props.onBlur && _this2.props.onBlur(...arguments);
      },
      isRangePicker: () => this.props.type === timePicker_constants_strings.TYPE_TIME_RANGE_PICKER
    });
  }

  static getDerivedStateFromProps(nextProps, prevState) {
    if ('open' in nextProps && nextProps.open !== prevState.open) {
      return {
        open: nextProps.open
      };
    }

    return null;
  }

  componentDidUpdate(prevProps) {
    // if (this.isControlled('open') && this.props.open != null && this.props.open !== prevProps.open) {
    //     this.foundation.setPanel(this.props.open);
    // }
    if (this.isControlled('value') && this.props.value !== prevProps.value) {
      this.foundation.refreshProps(assign_default()({}, this.props));
    } else if (this.props.timeZone !== prevProps.timeZone) {
      this.foundation.refreshProps({
        timeZone: this.props.timeZone,
        __prevTimeZone: prevProps.timeZone,
        value: this.state.value
      });
    }
  }

  getPanelElement() {
    const {
      prefixCls,
      type
    } = this.props;
    const {
      isAM,
      value
    } = this.state;
    const format = this.foundation.getDefaultFormatIfNeed();
    const timePanels = [/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(timePicker_Combobox, assign_default()({}, this.props, {
      key: 0,
      format: format,
      isAM: isAM[0],
      timeStampValue: value[0],
      prefixCls: "".concat(prefixCls, "-panel"),
      onChange: v => this.handlePanelChange(v, 0),
      onCurrentSelectPanelChange: this.onCurrentSelectPanelChange
    }, this.createPanelProps(0)))];

    if (type === timePicker_constants_strings.TYPE_TIME_RANGE_PICKER) {
      timePanels.push( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(timePicker_Combobox, assign_default()({}, this.props, {
        key: 1,
        format: format,
        isAM: isAM[1],
        timeStampValue: value[1],
        prefixCls: "".concat(prefixCls, "-panel"),
        onChange: v => this.handlePanelChange(v, 1),
        onCurrentSelectPanelChange: this.onCurrentSelectPanelChange
      }, this.createPanelProps(1))));
    }

    const wrapCls = classnames_default()({
      [timePicker_constants_cssClasses.RANGE_PANEL_LISTS]: this.adapter.isRangePicker()
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      ref: this.savePanelRef,
      className: wrapCls
    }, map_default()(timePanels).call(timePanels, panel => panel));
  }

  getPopupClassName() {
    var _context;

    const {
      use12Hours,
      prefixCls,
      popupClassName
    } = this.props;
    const {
      showHour,
      showMinute,
      showSecond
    } = this.state;
    let selectColumnCount = 0;

    if (showHour) {
      selectColumnCount += 1;
    }

    if (showMinute) {
      selectColumnCount += 1;
    }

    if (showSecond) {
      selectColumnCount += 1;
    }

    if (use12Hours) {
      selectColumnCount += 1;
    }

    return classnames_default()("".concat(prefixCls, "-panel"), popupClassName, {
      ["".concat(prefixCls, "-panel-narrow")]: (!showHour || !showMinute || !showSecond) && !use12Hours,
      [timePicker_constants_cssClasses.RANGE_PICKER]: this.adapter.isRangePicker()
    }, concat_default()(_context = "".concat(prefixCls, "-panel-column-")).call(_context, selectColumnCount));
  }

  focus() {// TODO this.picker is undefined, confirm keep this func or not
    // this.picker.focus();
  }

  blur() {// TODO this.picker is undefined, confirm keep this func or not
    // this.picker.blur();
  }

  render() {
    var _context2;

    const _a = this.props,
          {
      prefixCls,
      placeholder,
      disabled,
      defaultValue,
      className,
      popupStyle,
      size,
      style,
      locale,
      localeCode,
      zIndex,
      getPopupContainer,
      insetLabel,
      insetLabelId,
      inputStyle,
      showClear,
      panelHeader,
      panelFooter,
      rangeSeparator,
      onOpenChange,
      onChangeWithDateFirst,
      popupClassName: propPopupClassName,
      hideDisabledOptions,
      use12Hours,
      minuteStep,
      hourStep,
      secondStep,
      scrollItemProps,
      triggerRender,
      motion,
      autoAdjustOverflow
    } = _a,
          rest = TimePicker_rest(_a, ["prefixCls", "placeholder", "disabled", "defaultValue", "className", "popupStyle", "size", "style", "locale", "localeCode", "zIndex", "getPopupContainer", "insetLabel", "insetLabelId", "inputStyle", "showClear", "panelHeader", "panelFooter", "rangeSeparator", "onOpenChange", "onChangeWithDateFirst", "popupClassName", "hideDisabledOptions", "use12Hours", "minuteStep", "hourStep", "secondStep", "scrollItemProps", "triggerRender", "motion", "autoAdjustOverflow"]);

    const format = this.foundation.getDefaultFormatIfNeed();
    const position = this.foundation.getPosition();
    const useCustomTrigger = typeof triggerRender === 'function';
    const {
      open,
      inputValue,
      invalid,
      value
    } = this.state;
    const popupClassName = this.getPopupClassName();
    const headerPrefix = classnames_default()({
      ["".concat(prefixCls, "-header")]: true
    });
    const panelPrefix = classnames_default()({
      ["".concat(prefixCls, "-panel")]: true,
      [concat_default()(_context2 = "".concat(prefixCls, "-panel-")).call(_context2, size)]: size
    });

    const inputProps = assign_default()(assign_default()({}, rest), {
      disabled,
      prefixCls,
      size,
      showClear: disabled ? false : showClear,
      style: inputStyle,
      value: inputValue,
      onFocus: this.handleFocus,
      insetLabel,
      insetLabelId,
      format,
      locale,
      localeCode,
      invalid,
      placeholder,
      onChange: this.handleInput,
      onBlur: this.handleBlur
    });

    const outerProps = {};

    if (useCustomTrigger) {
      outerProps.onClick = this.openPanel;
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
      ref: this.setTimePickerRef,
      className: classnames_default()({
        [prefixCls]: true
      }, className),
      style: style
    }, outerProps), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(popover_0, {
      getPopupContainer: getPopupContainer,
      zIndex: zIndex,
      prefixCls: panelPrefix,
      contentClassName: popupClassName,
      style: popupStyle,
      content: this.getPanelElement(),
      trigger: 'custom',
      position: position,
      visible: disabled ? false : Boolean(open),
      motion: motion,
      autoAdjustOverflow: autoAdjustOverflow
    }, useCustomTrigger ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(trigger_0, {
      triggerRender: triggerRender,
      disabled: disabled,
      value: value,
      inputValue: inputValue,
      onChange: this.handleInput,
      placeholder: placeholder,
      componentName: 'TimePicker',
      componentProps: assign_default()({}, this.props)
    }) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: headerPrefix
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(timePicker_TimeInput, assign_default()({}, inputProps)))));
  }

}
TimePicker_TimePicker.contextType = configProvider_context;
TimePicker_TimePicker.propTypes = assign_default()(assign_default()({
  'aria-labelledby': prop_types_default.a.string,
  'aria-invalid': prop_types_default.a.bool,
  'aria-errormessage': prop_types_default.a.string,
  'aria-describedby': prop_types_default.a.string,
  'aria-required': prop_types_default.a.bool,
  prefixCls: prop_types_default.a.string,
  clearText: prop_types_default.a.string,
  value: TimeShape,
  inputReadOnly: prop_types_default.a.bool,
  disabled: prop_types_default.a.bool,
  showClear: prop_types_default.a.bool,
  defaultValue: TimeShape,
  open: prop_types_default.a.bool,
  defaultOpen: prop_types_default.a.bool,
  onOpenChange: prop_types_default.a.func,
  position: prop_types_default.a.any,
  getPopupContainer: prop_types_default.a.func,
  placeholder: prop_types_default.a.string,
  format: prop_types_default.a.string,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  popupClassName: prop_types_default.a.string,
  popupStyle: prop_types_default.a.object,
  disabledHours: prop_types_default.a.func,
  disabledMinutes: prop_types_default.a.func,
  disabledSeconds: prop_types_default.a.func,
  hideDisabledOptions: prop_types_default.a.bool,
  onChange: prop_types_default.a.func,
  use12Hours: prop_types_default.a.bool,
  hourStep: prop_types_default.a.number,
  minuteStep: prop_types_default.a.number,
  secondStep: prop_types_default.a.number,
  focusOnOpen: prop_types_default.a.bool,
  autoFocus: prop_types_default.a.bool,
  size: prop_types_default.a.oneOf(timePicker_constants_strings.SIZE),
  panels: prop_types_default.a.arrayOf(prop_types_default.a.shape(PanelShape)),
  onFocus: prop_types_default.a.func,
  onBlur: prop_types_default.a.func,
  locale: prop_types_default.a.object,
  localeCode: prop_types_default.a.string,
  dateFnsLocale: prop_types_default.a.object,
  zIndex: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  insetLabel: prop_types_default.a.node,
  insetLabelId: prop_types_default.a.string,
  validateStatus: prop_types_default.a.oneOf(timePicker_constants_strings.STATUS),
  type: prop_types_default.a.oneOf(timePicker_constants_strings.TYPES),
  rangeSeparator: prop_types_default.a.string,
  triggerRender: prop_types_default.a.func,
  timeZone: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  scrollItemProps: prop_types_default.a.object,
  motion: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.func, prop_types_default.a.object]),
  autoAdjustOverflow: prop_types_default.a.bool
}, PanelShape), {
  inputStyle: prop_types_default.a.object,
  preventScroll: prop_types_default.a.bool
});
TimePicker_TimePicker.defaultProps = assign_default()({
  autoAdjustOverflow: true,
  getPopupContainer: () => document.body,
  showClear: true,
  zIndex: constants_numbers.DEFAULT_Z_INDEX,
  rangeSeparator: timePicker_constants_strings.DEFAULT_RANGE_SEPARATOR,
  onOpenChange: noop_default.a,
  clearText: 'clear',
  prefixCls: timePicker_constants_cssClasses.PREFIX,
  inputReadOnly: false,
  style: {},
  className: '',
  popupClassName: '',
  popupStyle: {
    left: '0px',
    top: '0px'
  },
  disabledHours: () => [],
  disabledMinutes: () => [],
  disabledSeconds: () => [],
  hideDisabledOptions: false,
  // position: 'bottomLeft',
  onFocus: noop_default.a,
  onBlur: noop_default.a,
  onChange: noop_default.a,
  onChangeWithDateFirst: true,
  use12Hours: false,
  focusOnOpen: false,
  onKeyDown: noop_default.a,
  size: 'default',
  type: timePicker_constants_strings.DEFAULT_TYPE
}, PanelShapeDefaults);
// CONCATENATED MODULE: ./timePicker/index.tsx











class timePicker_LocaleTimePicker extends external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.PureComponent {
  render() {
    const {
      type
    } = this.props;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(configProvider_context.Consumer, null, _ref => {
      let {
        timeZone
      } = _ref;
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
        componentName: "TimePicker"
      }, (locale, localeCode, dateFnsLocale) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(TimePicker_TimePicker, assign_default()({
        timeZone: timeZone,
        placeholder: get_default()(locale, ['placeholder', type])
      }, this.props, {
        locale: locale,
        localeCode: localeCode,
        dateFnsLocale: dateFnsLocale
      })));
    });
  }

}
timePicker_LocaleTimePicker.propTypes = TimePicker_TimePicker.propTypes;
timePicker_LocaleTimePicker.defaultProps = TimePicker_TimePicker.defaultProps;
// CONCATENATED MODULE: ../semi-foundation/toast/toastListFoundation.ts



class toastListFoundation_ToastListFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()(assign_default()({}, toastListFoundation_ToastListFoundation.defaultAdapter), adapter));
  }

  addToast(toastOpts) {
    const toastList = this._adapter.getState('list'); // const id = getUuid('toast');
    // let toastOpts = { ...opts, id };
    // console.log(toastOpts);


    toastList.push(toastOpts);

    this._adapter.updateToast(toastList, []); // return id;

  }

  removeToast(id) {
    let toastList = this._adapter.getState('list');

    const removedItems = [];
    toastList = filter_default()(toastList).call(toastList, toastOpts => {
      if (toastOpts.id === id) {
        removedItems.push(toastOpts);
        return false;
      }

      return true;
    });

    this._adapter.updateToast(toastList, removedItems);
  }

  destroyAll() {
    const toastList = this._adapter.getState('list');

    if (toastList.length > 0) {
      this._adapter.updateToast([], toastList);
    }
  }

}
// CONCATENATED MODULE: ../semi-foundation/toast/constants.ts

const constants_PREFIX = "".concat(BASE_CLASS_PREFIX, "-toast");
const toast_constants_cssClasses = {
  PREFIX: constants_PREFIX,
  WRAPPER: "".concat(constants_PREFIX, "-wrapper"),
  LIST: "".concat(constants_PREFIX, "-list")
};
const toast_constants_strings = {
  types: ['warning', 'success', 'info', 'error', 'default'],
  themes: ['normal', 'light'],
  directions: ['ltr', 'rtl']
};
const toast_constants_numbers = {
  duration: 3 // default close time, unit: s

};

// CONCATENATED MODULE: ../semi-foundation/toast/toastFoundation.ts




class toastFoundation_ToastFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()(assign_default()({}, toastFoundation_ToastFoundation.defaultAdapter), adapter));
    this._timer = null;
    this._id = null; // cache id
  }

  init() {
    this.startCloseTimer_();
    this._id = this._adapter.getProp('id');
  }

  destroy() {
    this.clearCloseTimer_();
  }

  startCloseTimer_() {
    // unit: s
    const duration = this._adapter.getProp('duration');

    if (duration && isNumber_default()(duration)) {
      this._timer = set_timeout_default()(() => {
        this.close(); // call parent to remove itself
      }, duration * 1000);
    }
  }

  close(e) {
    if (e) {
      e.stopPropagation();
    }

    this._adapter.notifyWrapperToRemove(this._id);

    this._adapter.notifyClose();
  }

  clearCloseTimer_() {
    if (this._timer) {
      clearTimeout(this._timer);
      this._timer = null;
    }
  }

  restartCloseTimer() {
    this.clearCloseTimer_();
    this.startCloseTimer_();
  }

}
// CONCATENATED MODULE: ./toast/toast.tsx




/* eslint-disable max-len */










const toast_prefixCls = toast_constants_cssClasses.PREFIX;

class toast_Toast extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.clearCloseTimer = () => {
      this.foundation.clearCloseTimer_();
    };

    this.startCloseTimer = () => {
      this.foundation.startCloseTimer_();
    };

    this.state = {};
    this.foundation = new toastFoundation_ToastFoundation(this.adapter);
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      notifyWrapperToRemove: id => {
        this.props.close(id);
      },
      notifyClose: () => {
        this.props.onClose();
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  close(e) {
    this.foundation.close(e);
  }

  renderIcon() {
    var _context;

    const {
      type,
      icon
    } = this.props;
    const iconMap = {
      warning: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconAlertTriangle, null),
      success: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconTickCircle, null),
      info: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconInfoCircle, null),
      error: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconAlertCircle, null)
    };
    const iconType = iconMap[type];
    const iconSize = 'large';
    const iconCls = classnames_default()("".concat(toast_prefixCls, "-icon"), concat_default()(_context = "".concat(toast_prefixCls, "-icon-")).call(_context, type));

    if (icon) {
      return Object(_utils["e" /* isSemiIcon */])(icon) ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(icon, {
        size: iconSize,
        className: "".concat(toast_prefixCls, "-icon")
      }) : icon;
    }

    if (type && iconType) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(iconType, {
        size: iconSize,
        className: iconCls
      });
    }

    return null;
  }

  render() {
    var _context2, _context3;

    const {
      content,
      type,
      theme,
      showClose,
      textMaxWidth,
      className,
      style
    } = this.props;
    const direction = this.props.direction || this.context.direction;
    const toastCls = classnames_default()(toast_prefixCls, className, {
      [concat_default()(_context2 = "".concat(toast_prefixCls, "-")).call(_context2, type)]: true,
      [concat_default()(_context3 = "".concat(toast_prefixCls, "-")).call(_context3, theme)]: theme === 'light',
      ["".concat(toast_prefixCls, "-rtl")]: direction === 'rtl'
    });
    const textStyle = {};
    textStyle.maxWidth = textMaxWidth;
    const btnTheme = 'borderless';
    const btnSize = 'small';
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "alert",
      "aria-label": "".concat(type ? type : 'default', " type"),
      className: toastCls,
      style: style,
      onMouseEnter: this.clearCloseTimer,
      onMouseLeave: this.startCloseTimer
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(toast_prefixCls, "-content")
    }, this.renderIcon(), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(toast_prefixCls, "-content-text"),
      style: textStyle,
      "x-semi-prop": "content"
    }, content), showClose && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(toast_prefixCls, "-close-button")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(iconButton_0, {
      onClick: e => this.close(e),
      type: "tertiary",
      icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClose, {
        "x-semi-prop": "icon"
      }),
      theme: btnTheme,
      size: btnSize
    }))));
  }

}

toast_Toast.contextType = configProvider_context;
toast_Toast.propTypes = {
  onClose: prop_types_default.a.func,
  content: prop_types_default.a.node,
  close: prop_types_default.a.func,
  duration: prop_types_default.a.number,
  theme: prop_types_default.a.oneOf(toast_constants_strings.themes),
  type: prop_types_default.a.oneOf(toast_constants_strings.types),
  textMaxWidth: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  showClose: prop_types_default.a.bool,
  icon: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node]),
  direction: prop_types_default.a.oneOf(toast_constants_strings.directions)
};
toast_Toast.defaultProps = {
  onClose: noop_default.a,
  content: '',
  close: noop_default.a,
  duration: toast_constants_numbers.duration,
  textMaxWidth: 450,
  showClose: true,
  theme: 'normal'
};
/* harmony default export */ var toast_toast = (toast_Toast);
// EXTERNAL MODULE: ../semi-foundation/toast/toast.scss
var semi_foundation_toast_toast = __webpack_require__("RPkD");

// CONCATENATED MODULE: ./toast/ToastTransition.tsx

// @ts-ignore  Currently there is no types for semi-animation-react


function ToastTransition() {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let {
    motion = {}
  } = props;

  if (typeof motion === 'function') {
    motion = motion(props);
  } else if (!motion || typeof motion !== 'object') {
    motion = {};
  }

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Transition_Transition // onFrame={style => console.log(style)}
  , assign_default()({
    // onFrame={style => console.log(style)}
    from: {
      translateY: -100,
      opacity: 0
    },
    enter: {
      translateY: {
        val: 0,
        tension: 560,
        friction: 32
      },
      opacity: {
        val: 1,
        duration: 300
      }
    },
    leave: {
      translateY: {
        val: -100,
        easing: 'easeOutCubic',
        duration: 300
      },
      opacity: {
        val: 0,
        duration: 200
      }
    }
  }, motion), typeof props.children === 'function' ? _ref => {
    let {
      translateY,
      opacity
    } = _ref;
    return props.children({
      transform: "translateY(".concat(translateY, "%)"),
      opacity
    });
  } : props.children);
}
// CONCATENATED MODULE: ./toast/useToast/HookToast.tsx




var HookToast_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};




const HookToast = (_a, ref) => {
  var {
    afterClose
  } = _a,
      config = HookToast_rest(_a, ["afterClose"]);

  const [visible, setVisible] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(true);

  const close = () => {
    setVisible(false);
  };

  external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.useImperativeHandle(ref, () => ({
    close: () => {
      setVisible(false);
    }
  }));
  Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useEffect"])(() => {
    if (!visible) {
      afterClose(config.id);
    }
  }, [visible]);
  return visible ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(toast_toast, assign_default()({}, config, {
    close: close
  })) : null;
};

/* harmony default export */ var useToast_HookToast = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.forwardRef(HookToast));
// CONCATENATED MODULE: ./toast/useToast/index.tsx







 // const ref = null;
// TODO: toast larger than N bars, automatic folding, allowing expansion, N configurable

const useToast_defaultOpts = {
  motion: true,
  zIndex: 1010,
  duration: 3
};

function useToast_usePatchElement() {
  const [elements, setElements] = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.useState([]);

  function patchElement(element, config) {
    setElements(originElements => [{
      element,
      config
    }, ...originElements]);
    return id => {
      setElements(originElements => filter_default()(originElements).call(originElements, _ref => {
        let {
          config: configOfCurrentElement
        } = _ref;
        return configOfCurrentElement.id !== id;
      }));
    };
  }

  return [elements, patchElement];
}

function useToast() {
  const [elements, patchElement] = useToast_usePatchElement();
  const toastRef = new core_js_stable_map_default.a();

  const addToast = config => {
    const id = getUuid('semi_toast_');

    const mergeConfig = assign_default()(assign_default()({}, config), {
      id
    }); // eslint-disable-next-line prefer-const


    let closeFunc;

    const ref = ele => {
      toastRef.set(id, ele);
    };

    const toast = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(useToast_HookToast, assign_default()({}, mergeConfig, {
      key: id,
      afterClose: instanceId => closeFunc(instanceId),
      ref: ref
    }));
    closeFunc = patchElement(toast, assign_default()({}, mergeConfig));
    return id;
  };

  const removeElement = id => {
    const ele = toastRef.get(id);
    ele && ele.close();
  };

  return [{
    success: config => addToast(assign_default()(assign_default()(assign_default()({}, useToast_defaultOpts), config), {
      type: 'success'
    })),
    info: config => addToast(assign_default()(assign_default()(assign_default()({}, useToast_defaultOpts), config), {
      type: 'info'
    })),
    error: config => addToast(assign_default()(assign_default()(assign_default()({}, useToast_defaultOpts), config), {
      type: 'error'
    })),
    warning: config => addToast(assign_default()(assign_default()(assign_default()({}, useToast_defaultOpts), config), {
      type: 'warning'
    })),
    open: config => addToast(assign_default()(assign_default()(assign_default()({}, useToast_defaultOpts), config), {
      type: 'default'
    })),
    close: id => removeElement(id)
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, is_array_default()(elements) && elements.length ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, map_default()(elements).call(elements, item => item.element)) : null)];
}
// CONCATENATED MODULE: ./toast/index.tsx








/* eslint-disable no-param-reassign */















const createBaseToast = () => {
  var _a;

  return _a = class ToastList extends baseComponent_BaseComponent {
    constructor(props) {
      super(props);
      this.state = {
        list: [],
        removedItems: []
      };
      this.foundation = new toastListFoundation_ToastListFoundation(this.adapter);
    }

    get adapter() {
      return assign_default()(assign_default()({}, super.adapter), {
        updateToast: (list, removedItems) => {
          this.setState({
            list,
            removedItems
          });
        }
      });
    }

    static create(opts) {
      const id = getUuid('toast'); // this.id = id;

      if (!ToastList.ref) {
        var _context2;

        const div = document.createElement('div');

        if (!this.wrapperId) {
          var _context;

          this.wrapperId = slice_default()(_context = getUuid('toast-wrapper')).call(_context, 0, 26);
        }

        div.className = toast_constants_cssClasses.WRAPPER;
        div.id = this.wrapperId;
        div.style.zIndex = String(typeof opts.zIndex === 'number' ? opts.zIndex : ToastList.defaultOpts.zIndex);

        map_default()(_context2 = ['top', 'left', 'bottom', 'right']).call(_context2, pos => {
          if (pos in ToastList.defaultOpts || pos in opts) {
            const val = opts[pos] ? opts[pos] : ToastList.defaultOpts[pos];
            div.style[pos] = typeof val === 'number' ? "".concat(val, "px") : val;
          }
        }); // document.body.appendChild(div);


        if (ToastList.defaultOpts.getPopupContainer) {
          const container = ToastList.defaultOpts.getPopupContainer();
          container.appendChild(div);
        } else {
          document.body.appendChild(div);
        }

        external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default.a.render( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(ToastList, {
          ref: instance => ToastList.ref = instance
        }), div, () => {
          ToastList.ref.add(assign_default()(assign_default()({}, opts), {
            id
          }));
        });
      } else {
        var _context3;

        const node = document.querySelector("#".concat(this.wrapperId));

        map_default()(_context3 = ['top', 'left', 'bottom', 'right']).call(_context3, pos => {
          if (pos in opts) {
            node.style[pos] = typeof opts[pos] === 'number' ? "".concat(opts[pos], "px") : opts[pos];
          }
        });

        ToastList.ref.add(assign_default()(assign_default()({}, opts), {
          id
        }));
      }

      return id;
    }

    static close(id) {
      if (ToastList.ref) {
        ToastList.ref.remove(id);
      }
    }

    static destroyAll() {
      if (ToastList.ref) {
        ToastList.ref.destroyAll();
        const wrapper = document.querySelector("#".concat(this.wrapperId));
        external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default.a.unmountComponentAtNode(wrapper);
        wrapper && wrapper.parentNode.removeChild(wrapper);
        ToastList.ref = null;
        this.wrapperId = null;
      }
    }

    static getWrapperId() {
      return this.wrapperId;
    }

    static info(opts) {
      if (typeof opts === 'string') {
        opts = {
          content: opts
        };
      }

      return this.create(assign_default()(assign_default()(assign_default()({}, ToastList.defaultOpts), opts), {
        type: 'info'
      }));
    }

    static warning(opts) {
      if (typeof opts === 'string') {
        opts = {
          content: opts
        };
      }

      return this.create(assign_default()(assign_default()(assign_default()({}, ToastList.defaultOpts), opts), {
        type: 'warning'
      }));
    }

    static error(opts) {
      if (typeof opts === 'string') {
        opts = {
          content: opts
        };
      }

      return this.create(assign_default()(assign_default()(assign_default()({}, ToastList.defaultOpts), opts), {
        type: 'error'
      }));
    }

    static success(opts) {
      if (typeof opts === 'string') {
        opts = {
          content: opts
        };
      }

      return this.create(assign_default()(assign_default()(assign_default()({}, ToastList.defaultOpts), opts), {
        type: 'success'
      }));
    }

    static config(opts) {
      var _context4;

      for_each_default()(_context4 = ['top', 'left', 'bottom', 'right']).call(_context4, pos => {
        if (pos in opts) {
          ToastList.defaultOpts[pos] = opts[pos];
        }
      });

      if (typeof opts.zIndex === 'number') {
        ToastList.defaultOpts.zIndex = opts.zIndex;
      }

      if (typeof opts.duration === 'number') {
        ToastList.defaultOpts.duration = opts.duration;
      }

      if (typeof opts.getPopupContainer === 'function') {
        ToastList.defaultOpts.getPopupContainer = opts.getPopupContainer;
      }
    }

    add(opts) {
      return this.foundation.addToast(opts);
    }

    remove(id) {
      return this.foundation.removeToast(id);
    }

    destroyAll() {
      return this.foundation.destroyAll();
    }

    render() {
      let {
        list
      } = this.state;
      const {
        removedItems
      } = this.state;
      list = from_default()(new set_default.a([...list, ...removedItems]));
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, map_default()(list).call(list, (item, index) => item.motion ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(ToastTransition, {
        key: item.id || index,
        motion: item.motion
      }, find_default()(removedItems).call(removedItems, removedItem => removedItem.id === item.id) ? null : transitionStyle => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(toast_toast, assign_default()({}, item, {
        style: assign_default()(assign_default()({}, transitionStyle), item.style),
        close: id => this.remove(id)
      }))) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(toast_toast, assign_default()({}, item, {
        style: assign_default()({}, item.style),
        close: id => this.remove(id)
      }))));
    }

  }, _a.defaultOpts = {
    motion: true,
    zIndex: 1010,
    content: ''
  }, _a.propTypes = {
    content: prop_types_default.a.node,
    duration: prop_types_default.a.number,
    onClose: prop_types_default.a.func,
    icon: prop_types_default.a.node,
    direction: prop_types_default.a.oneOf(toast_constants_strings.directions)
  }, _a.defaultProps = {}, _a;
};

class toast_ToastFactory {
  static create(config) {
    const newToast = createBaseToast();
    newToast.useToast = useToast;
    config && newToast.config(config);
    return newToast;
  }

}
/* harmony default export */ var toast_0 = (toast_ToastFactory.create());
// CONCATENATED MODULE: ../semi-foundation/tree/foundation.ts


















class foundation_TreeFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));

    this.clearDragState = () => {
      this._adapter.updateState({
        dragOverNodeKey: '',
        dragging: false
      });
    };
  }

  _isMultiple() {
    return this.getProp('multiple');
  }

  _isAnimated() {
    return this.getProp('motion');
  }

  _isDisabled() {
    let treeNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return this.getProp('disabled') || treeNode.disabled;
  }

  _isExpandControlled() {
    return !isUndefined_default()(this.getProp('expandedKeys'));
  }

  _isLoadControlled() {
    return !isUndefined_default()(this.getProp('loadedKeys'));
  }

  _isFilterable() {
    // filter can be boolean or function
    return Boolean(this.getProp('filterTreeNode'));
  }

  _showFilteredOnly() {
    const {
      inputValue
    } = this.getStates();
    const {
      showFilteredOnly
    } = this.getProps();
    return Boolean(inputValue) && showFilteredOnly;
  }

  getCopyFromState(items) {
    var _context;

    const res = {};

    for_each_default()(_context = normalizedArr(items)).call(_context, key => {
      res[key] = cloneDeep_default()(this.getState(key));
    });

    return res;
  }

  getTreeNodeProps(key) {
    const {
      expandedKeys = new set_default.a([]),
      selectedKeys = [],
      checkedKeys = new set_default.a([]),
      halfCheckedKeys = new set_default.a([]),
      realCheckedKeys = new set_default.a([]),
      keyEntities = {},
      filteredKeys = new set_default.a([]),
      inputValue = '',
      loadedKeys = new set_default.a([]),
      loadingKeys = new set_default.a([]),
      filteredExpandedKeys = new set_default.a([]),
      disabledKeys = new set_default.a([])
    } = this.getStates();
    const {
      treeNodeFilterProp,
      checkRelation
    } = this.getProps();
    const entity = keyEntities[key];
    const notExist = !entity;

    if (notExist) {
      return null;
    } // if checkRelation is invalid, the checked status of node will be false


    let realChecked = false;
    let realHalfChecked = false;

    if (checkRelation === 'related') {
      realChecked = checkedKeys.has(key);
      realHalfChecked = halfCheckedKeys.has(key);
    } else if (checkRelation === 'unRelated') {
      realChecked = realCheckedKeys.has(key);
      realHalfChecked = false;
    }

    const isSearching = Boolean(inputValue);
    const treeNodeProps = {
      eventKey: key,
      expanded: isSearching ? filteredExpandedKeys.has(key) : expandedKeys.has(key),
      selected: includes_default()(selectedKeys).call(selectedKeys, key),
      checked: realChecked,
      halfChecked: realHalfChecked,
      pos: String(entity ? entity.pos : ''),
      level: entity.level,
      filtered: filteredKeys.has(key),
      loading: loadingKeys.has(key) && !loadedKeys.has(key),
      loaded: loadedKeys.has(key),
      keyword: inputValue,
      treeNodeFilterProp
    };

    if (this.getProp('disableStrictly') && disabledKeys.has(key)) {
      treeNodeProps.disabled = true;
    }

    return treeNodeProps;
  }

  notifyJsonChange(key, e) {
    var _context2;

    const data = this.getProp('treeDataSimpleJson');

    const selectedPath = map_default()(_context2 = normalizedArr(key)).call(_context2, i => i.replace('-', '.'));

    const value = pick_default()(data, selectedPath);

    this._adapter.notifyChange(value);
  }

  notifyMultipleChange(key, e) {
    const {
      keyEntities
    } = this.getStates();
    const {
      leafOnly,
      checkRelation
    } = this.getProps();
    let value;
    let keyList = [];

    if (checkRelation === 'related') {
      keyList = normalizeKeyList(key, keyEntities, leafOnly);
    } else if (checkRelation === 'unRelated') {
      keyList = key;
    }

    if (this.getProp('onChangeWithObject')) {
      value = map_default()(keyList).call(keyList, itemKey => keyEntities[itemKey].data);
    } else {
      value = getValueOrKey(map_default()(keyList).call(keyList, itemKey => keyEntities[itemKey].data));
    }

    this._adapter.notifyChange(value);
  }

  notifyChange(key, e) {
    const isMultiple = this._isMultiple();

    const {
      keyEntities
    } = this.getStates();

    if (this.getProp('treeDataSimpleJson')) {
      this.notifyJsonChange(key, e);
    } else if (isMultiple) {
      this.notifyMultipleChange(key, e);
    } else {
      let value;

      if (this.getProp('onChangeWithObject')) {
        value = get_default()(keyEntities, key).data;
      } else {
        const {
          data
        } = get_default()(keyEntities, key);

        value = getValueOrKey(data);
      }

      this._adapter.notifyChange(value);
    }
  }

  handleInputChange(sugInput) {
    // Input is a controlled component, so the value value needs to be updated
    this._adapter.updateInputValue(sugInput);

    const {
      expandedKeys,
      selectedKeys,
      keyEntities,
      treeData
    } = this.getStates();
    const {
      showFilteredOnly,
      filterTreeNode,
      treeNodeFilterProp
    } = this.getProps();
    let filteredOptsKeys = [];
    let expandedOptsKeys = [];
    let flattenNodes = [];
    let filteredShownKeys = new set_default.a([]);

    if (!sugInput) {
      expandedOptsKeys = findAncestorKeys(selectedKeys, keyEntities);

      for_each_default()(expandedOptsKeys).call(expandedOptsKeys, item => expandedKeys.add(item));

      flattenNodes = flattenTreeData(treeData, expandedKeys);
    } else {
      var _context3, _context4;

      filteredOptsKeys = map_default()(_context3 = filter_default()(_context4 = values_default()(keyEntities)).call(_context4, item => treeUtil_filter(sugInput, item.data, filterTreeNode, treeNodeFilterProp))).call(_context3, item => item.key);
      expandedOptsKeys = findAncestorKeys(filteredOptsKeys, keyEntities, false);
      const shownChildKeys = findDescendantKeys(filteredOptsKeys, keyEntities, true);
      filteredShownKeys = new set_default.a([...shownChildKeys, ...expandedOptsKeys]);
      flattenNodes = flattenTreeData(treeData, new set_default.a(expandedOptsKeys), showFilteredOnly && filteredShownKeys);
    }

    this._adapter.notifySearch(sugInput);

    this._adapter.updateState({
      expandedKeys,
      flattenNodes,
      motionKeys: new set_default.a([]),
      filteredKeys: new set_default.a(filteredOptsKeys),
      filteredExpandedKeys: new set_default.a(expandedOptsKeys),
      filteredShownKeys
    });
  }

  handleNodeSelect(e, treeNode) {
    const isDisabled = this._isDisabled(treeNode);

    if (isDisabled) {
      return;
    }

    if (!this._isMultiple()) {
      this.handleSingleSelect(e, treeNode);
    } else {
      this.handleMultipleSelect(e, treeNode);
    }
  }

  handleNodeRightClick(e, treeNode) {
    this._adapter.notifyRightClick(e, treeNode.data);
  }

  handleNodeDoubleClick(e, treeNode) {
    this._adapter.notifyDoubleClick(e, treeNode.data);
  }

  handleSingleSelect(e, treeNode) {
    let {
      selectedKeys
    } = this.getCopyFromState('selectedKeys');
    const {
      selected,
      eventKey,
      data
    } = treeNode;
    const targetSelected = !selected;

    this._adapter.notifySelect(eventKey, true, data);

    if (!targetSelected) {
      return;
    }

    if (!includes_default()(selectedKeys).call(selectedKeys, eventKey)) {
      selectedKeys = [eventKey];
      this.notifyChange(eventKey, e);

      if (!this._isControlledComponent()) {
        this._adapter.updateState({
          selectedKeys
        });
      }
    }
  }

  calcCheckedKeys(eventKey, targetStatus) {
    const {
      keyEntities
    } = this.getStates();
    const {
      checkedKeys,
      halfCheckedKeys
    } = this.getCopyFromState(['checkedKeys', 'halfCheckedKeys']);
    return targetStatus ? calcCheckedKeysForChecked(eventKey, keyEntities, checkedKeys, halfCheckedKeys) : calcCheckedKeysForUnchecked(eventKey, keyEntities, checkedKeys, halfCheckedKeys);
  }
  /*
  * Compute the checked state of the node
  */


  calcCheckedStatus(targetStatus, eventKey) {
    // From checked to unchecked, you can change it directly
    if (!targetStatus) {
      return targetStatus;
    } // Starting from unchecked, you need to judge according to the descendant nodes


    const {
      checkedKeys,
      keyEntities,
      disabledKeys
    } = this.getStates();
    const descendantKeys = normalizeKeyList(findDescendantKeys([eventKey], keyEntities, false), keyEntities, true);

    const hasDisabled = some_default()(descendantKeys).call(descendantKeys, key => disabledKeys.has(key)); // If the descendant nodes are not disabled, they will be directly changed to checked


    if (!hasDisabled) {
      return targetStatus;
    } // If all descendant nodes that are not disabled are selected, return unchecked, otherwise, return checked


    const nonDisabledKeys = filter_default()(descendantKeys).call(descendantKeys, key => !disabledKeys.has(key));

    const allChecked = every_default()(nonDisabledKeys).call(nonDisabledKeys, key => checkedKeys.has(key));

    return !allChecked;
  }
  /*
  * In strict disable mode, calculate the nodes of checked and halfCheckedKeys and return their corresponding keys
  */


  calcNonDisabledCheckedKeys(eventKey, targetStatus) {
    const {
      keyEntities,
      disabledKeys
    } = this.getStates();
    const {
      checkedKeys
    } = this.getCopyFromState(['checkedKeys']);
    const descendantKeys = normalizeKeyList(findDescendantKeys([eventKey], keyEntities, false), keyEntities, true);

    const hasDisabled = some_default()(descendantKeys).call(descendantKeys, key => disabledKeys.has(key)); // If none of the descendant nodes are disabled, follow the normal logic


    if (!hasDisabled) {
      return this.calcCheckedKeys(eventKey, targetStatus);
    }

    const nonDisabled = filter_default()(descendantKeys).call(descendantKeys, key => !disabledKeys.has(key));

    const newCheckedKeys = targetStatus ? [...nonDisabled, ...checkedKeys] : difference_default()(normalizeKeyList([...checkedKeys], keyEntities, true), nonDisabled);
    return calcCheckedKeys(newCheckedKeys, keyEntities);
  }
  /*
  * Handle the selection event in the case of multiple selection
  */


  handleMultipleSelect(e, treeNode) {
    const {
      disableStrictly,
      checkRelation
    } = this.getProps();
    const {
      realCheckedKeys
    } = this.getStates(); // eventKey: The key value of the currently clicked node

    const {
      checked,
      eventKey,
      data
    } = treeNode;

    if (checkRelation === 'related') {
      // Find the checked state of the current node
      const targetStatus = disableStrictly ? this.calcCheckedStatus(!checked, eventKey) : !checked;
      const {
        checkedKeys,
        halfCheckedKeys
      } = disableStrictly ? this.calcNonDisabledCheckedKeys(eventKey, targetStatus) : this.calcCheckedKeys(eventKey, targetStatus);

      this._adapter.notifySelect(eventKey, targetStatus, data);

      this.notifyChange([...checkedKeys], e);

      if (!this._isControlledComponent()) {
        this._adapter.updateState({
          checkedKeys,
          halfCheckedKeys
        });
      }
    } else if (checkRelation === 'unRelated') {
      const newRealCheckedKeys = new set_default.a(realCheckedKeys);
      let targetStatus;

      if (realCheckedKeys.has(eventKey)) {
        newRealCheckedKeys.delete(eventKey);
        targetStatus = false;
      } else {
        newRealCheckedKeys.add(eventKey);
        targetStatus = true;
      }

      this._adapter.notifySelect(eventKey, targetStatus, data);

      this.notifyChange([...newRealCheckedKeys], e);

      if (!this._isControlledComponent()) {
        this._adapter.updateState({
          realCheckedKeys: newRealCheckedKeys
        });
      }
    }
  }

  setExpandedStatus(treeNode) {
    const {
      inputValue,
      treeData,
      filteredShownKeys,
      keyEntities
    } = this.getStates();
    const isSearching = Boolean(inputValue);

    const showFilteredOnly = this._showFilteredOnly();

    const expandedStateKey = isSearching ? 'filteredExpandedKeys' : 'expandedKeys';
    const expandedKeys = this.getCopyFromState(expandedStateKey)[expandedStateKey];
    let motionType = 'show';
    const {
      eventKey,
      expanded,
      data
    } = treeNode;

    if (!expanded) {
      expandedKeys.add(eventKey);
    } else if (expandedKeys.has(eventKey)) {
      expandedKeys.delete(eventKey);
      motionType = 'hide';
    }

    this._adapter.cacheFlattenNodes(motionType === 'hide' && this._isAnimated());

    if (!this._isExpandControlled()) {
      const flattenNodes = flattenTreeData(treeData, expandedKeys, isSearching && showFilteredOnly && filteredShownKeys);
      const motionKeys = this._isAnimated() ? getMotionKeys(eventKey, expandedKeys, keyEntities) : [];
      const newState = {
        [expandedStateKey]: expandedKeys,
        flattenNodes,
        motionKeys: new set_default.a(motionKeys),
        motionType
      };

      this._adapter.updateState(newState);
    }

    return {
      expandedKeys,
      expanded: !expanded,
      data
    };
  }

  handleNodeExpand(e, treeNode) {
    const {
      loadData
    } = this.getProps();

    if (!loadData && (!treeNode.children || !treeNode.children.length)) {
      return;
    }

    const {
      expandedKeys,
      data,
      expanded
    } = this.setExpandedStatus(treeNode);

    this._adapter.notifyExpand(expandedKeys, {
      expanded,
      node: data
    });
  } // eslint-disable-next-line max-len


  handleNodeLoad(loadedKeys, loadingKeys, data, resolve) {
    const {
      loadData,
      onLoad
    } = this.getProps();
    const {
      key
    } = data;

    if (!loadData || loadedKeys.has(key) || loadingKeys.has(key)) {
      return {};
    } // Process the loaded data


    loadData(data).then(() => {
      const {
        loadedKeys: prevLoadedKeys,
        loadingKeys: prevLoadingKeys
      } = this.getCopyFromState(['loadedKeys', 'loadingKeys']);
      const newLoadedKeys = prevLoadedKeys.add(key);
      const newLoadingKeys = new set_default.a([...prevLoadingKeys]);
      newLoadingKeys.delete(key); // onLoad should be triggered before internal setState to avoid `loadData` being triggered twice

      onLoad && onLoad(newLoadedKeys, data);

      if (!this._isLoadControlled()) {
        this._adapter.updateState({
          loadedKeys: newLoadedKeys
        });
      }

      this._adapter.setState({
        loadingKeys: newLoadingKeys
      });

      resolve();
    });
    return {
      loadingKeys: loadingKeys.add(key)
    };
  } // Drag and drop related processing logic


  getDragEventNodeData(node) {
    return assign_default()(assign_default()({}, node.data), pick_default()(node, ['expanded', 'pos', 'children']));
  }

  triggerDragEvent(name, event, node) {
    let extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    const callEvent = this.getProp(name);
    callEvent && callEvent(assign_default()({
      event,
      node: this.getDragEventNodeData(node)
    }, extra));
  }

  handleNodeDragStart(e, treeNode) {
    const {
      keyEntities
    } = this.getStates();
    const {
      hideDraggingNode,
      renderDraggingNode
    } = this.getProps();
    const {
      eventKey,
      nodeInstance,
      data
    } = treeNode;

    if (hideDraggingNode || renderDraggingNode) {
      let dragImg;

      if (typeof renderDraggingNode === 'function') {
        dragImg = renderDraggingNode(nodeInstance, data);
      } else if (hideDraggingNode) {
        dragImg = nodeInstance.cloneNode(true);
        dragImg.style.opacity = 0;
      }

      document.body.appendChild(dragImg);
      e.dataTransfer.setDragImage(dragImg, 0, 0);
    }

    this._adapter.setDragNode(treeNode);

    this._adapter.updateState({
      dragging: true,
      dragNodesKeys: new set_default.a(getDragNodesKeys(eventKey, keyEntities))
    });

    this.triggerDragEvent('onDragStart', e, treeNode);
  }

  handleNodeDragEnter(e, treeNode, dragNode) {
    const {
      dragging,
      dragNodesKeys
    } = this.getStates();
    const {
      autoExpandWhenDragEnter
    } = this.getProps();
    const {
      pos,
      eventKey,
      expanded
    } = treeNode;

    if (!dragNode || dragNodesKeys.has(eventKey)) {
      return;
    }

    const dropPosition = calcDropRelativePosition(e, treeNode); // If the drag node is itself, skip

    if (dragNode.eventKey === eventKey && dropPosition === 0) {
      this._adapter.updateState({
        dragOverNodeKey: '',
        dropPosition: null
      });

      return;
    } // Trigger dragenter after clearing the prev state in dragleave


    set_timeout_default()(() => {
      var _context5;

      this._adapter.updateState({
        dragOverNodeKey: eventKey,
        dropPosition
      }); // If autoExpand is already expanded or not allowed, trigger the event and return


      if (!autoExpandWhenDragEnter || expanded) {
        this.triggerDragEvent('onDragEnter', e, treeNode);
        return;
      } // Side effects of delayed drag


      if (!this.delayedDragEnterLogic) {
        this.delayedDragEnterLogic = {};
      }

      for_each_default()(_context5 = keys_default()(this.delayedDragEnterLogic)).call(_context5, key => {
        clearTimeout(this.delayedDragEnterLogic[key]);
      });

      this.delayedDragEnterLogic[pos] = set_timeout_default()(() => {
        if (!dragging) {
          return;
        }

        const {
          expandedKeys: newExpandedKeys
        } = this.setExpandedStatus(treeNode);
        this.triggerDragEvent('onDragEnter', e, treeNode, {
          expandedKeys: [...newExpandedKeys]
        });
      }, 400);
    }, 0);
  }

  handleNodeDragOver(e, treeNode, dragNode) {
    const {
      dropPosition,
      dragNodesKeys,
      dragOverNodeKey
    } = this.getStates();
    const {
      eventKey
    } = treeNode;

    if (dragNodesKeys.has(eventKey)) {
      return;
    } // Update the drag position


    if (dragNode && eventKey === dragOverNodeKey) {
      const newPos = calcDropRelativePosition(e, treeNode);

      if (dropPosition === newPos) {
        return;
      }

      this._adapter.updateState({
        dropPosition: newPos
      });
    }

    this.triggerDragEvent('onDragOver', e, treeNode);
  }

  handleNodeDragLeave(e, treeNode) {
    this._adapter.updateState({
      dragOverNodeKey: ''
    });

    this.triggerDragEvent('onDragLeave', e, treeNode);
  }

  handleNodeDragEnd(e, treeNode) {
    this.clearDragState();
    this.triggerDragEvent('onDragEnd', e, treeNode);

    this._adapter.setDragNode(null);
  }

  handleNodeDrop(e, treeNode, dragNode) {
    const {
      dropPosition,
      dragNodesKeys
    } = this.getStates();
    const {
      eventKey,
      pos
    } = treeNode;
    this.clearDragState();

    if (dragNodesKeys.has(eventKey)) {
      return;
    }

    const dropRes = {
      dragNode: dragNode ? this.getDragEventNodeData(dragNode) : null,
      dragNodesKeys: [...dragNodesKeys],
      dropPosition: calcDropActualPosition(pos, dropPosition),
      dropToGap: dropPosition !== 0
    };
    this.triggerDragEvent('onDrop', e, treeNode, dropRes);

    this._adapter.setDragNode(null);
  }

}
// CONCATENATED MODULE: ../semi-foundation/tree/constants.ts

const tree_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-tree"),
  PREFIX_OPTION: "".concat(BASE_CLASS_PREFIX, "-tree-option")
};
const tree_constants_strings = {
  EXPAND_ACTION: [false, 'click', 'doubleClick']
};
const tree_constants_numbers = {};

// CONCATENATED MODULE: ./tree/treeUtil.tsx



function treeUtil_cloneDeep(treeNodeList) {
  return cloneDeepWith_default()(treeNodeList, val => {
    // only clone treeNode inner data and skip user data
    if (isPlainObject_default()(val) && !val._innerDataTag) {
      return val;
    }

    if ( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(val)) {
      return val;
    }
  });
}
// CONCATENATED MODULE: ./tree/autoSizer.tsx






const autoSizer_prefixcls = tree_constants_cssClasses.PREFIX;
class autoSizer_AutoSizer extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  constructor(props) {
    super(props);

    this._onResize = entries => {
      // observe parent node height
      const target = entries && entries[1] && entries[1].target;

      if (target) {
        const height = get_default()(target, 'offsetHeight') || 0;
        const style = window.getComputedStyle(target) || {};
        const paddingTop = parse_int_default()(get_default()(style, 'paddingTop'), 10) || 0;
        const paddingBottom = parse_int_default()(get_default()(style, 'paddingBottom'), 10) || 0;
        const newHeight = height - paddingTop - paddingBottom;

        if (this.state.height !== newHeight) {
          this.setState({
            height: height - paddingTop - paddingBottom
          });
        }
      }
    };

    this.state = {
      height: this.props.defaultHeight || 0
    };
  }

  componentDidMount() {
    const {
      height
    } = this.state; // if height is a number, pass it directly to virtual-list

    if (typeof height === 'number') {
      return;
    }
  }

  render() {
    const {
      children,
      defaultWidth,
      defaultHeight
    } = this.props;
    const {
      height
    } = this.state; // Avoid rendering children before the initial measurements have been collected.
    // At best this would just be wasting cycles. Refer to https://github.com/bvaughn/react-virtualized-auto-sizer/

    let bailoutOnChildren = false;

    if (height === 0 || typeof height !== 'number') {
      bailoutOnChildren = true;
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(resizeObserver_ReactResizeObserver, {
      observeParent: true,
      onResize: this._onResize
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      style: {
        height: defaultHeight,
        overflow: 'visible'
      },
      className: "".concat(autoSizer_prefixcls, "-auto-wrapper")
    }, !bailoutOnChildren && children({
      height,
      width: defaultWidth
    })));
  }

}
autoSizer_AutoSizer.propTypes = {
  defaultHeight: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  defaultWidth: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string])
};
autoSizer_AutoSizer.defaultProps = {
  defaultHeight: '100%',
  defaultWidth: '100%'
};
// CONCATENATED MODULE: ./tree/treeContext.tsx

const TreeContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext(null);
/* harmony default export */ var treeContext = (TreeContext);
// CONCATENATED MODULE: ./tree/treeNode.tsx










var treeNode_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};











const treeNode_prefixcls = tree_constants_cssClasses.PREFIX_OPTION;
class treeNode_TreeNode extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  constructor(props) {
    super(props);

    this.onSelect = e => {
      const {
        onNodeSelect
      } = this.context;
      onNodeSelect(e, this.props);
    };

    this.onExpand = e => {
      const {
        onNodeExpand
      } = this.context;
      e && e.stopPropagation();
      e.nativeEvent.stopImmediatePropagation();
      onNodeExpand(e, this.props);
    };

    this.onCheck = e => {
      if (this.isDisabled()) {
        return;
      }

      const {
        onNodeCheck
      } = this.context;
      e.stopPropagation();
      e.nativeEvent.stopImmediatePropagation();
      onNodeCheck(e, this.props);
    };
    /**
     * A11y: simulate checkbox click
     */


    this.handleCheckEnterPress = e => {
      if (utils_isEnterPress(e)) {
        this.onCheck(e);
      }
    };

    this.onContextMenu = e => {
      const {
        onNodeRightClick
      } = this.context;
      onNodeRightClick(e, this.props);
    };

    this.onClick = e => {
      const {
        expandAction
      } = this.context;

      if (expandAction === 'doubleClick') {
        this.debounceSelect(e);
        return;
      }

      this.onSelect(e);

      if (expandAction === 'click') {
        this.onExpand(e);
      }
    };
    /**
     * A11y: simulate li click
     */


    this.handleliEnterPress = e => {
      if (utils_isEnterPress(e)) {
        this.onClick(e);
      }
    };

    this.onDoubleClick = e => {
      const {
        expandAction,
        onNodeDoubleClick
      } = this.context;
      e.stopPropagation();
      e.nativeEvent.stopImmediatePropagation();

      if (isFunction_default()(onNodeDoubleClick)) {
        onNodeDoubleClick(e, this.props);
      }

      if (expandAction === 'doubleClick') {
        this.onExpand(e);
      }
    };

    this.onDragStart = e => {
      const {
        onNodeDragStart
      } = this.context;
      e.stopPropagation();
      onNodeDragStart(e, assign_default()(assign_default()({}, this.props), {
        nodeInstance: this.refNode
      }));

      try {
        // ie throw error
        // firefox-need-it
        e.dataTransfer.setData('text/plain', '');
      } catch (error) {// empty
      }
    };

    this.onDragEnter = e => {
      const {
        onNodeDragEnter
      } = this.context;
      e.preventDefault();
      e.stopPropagation();
      onNodeDragEnter(e, assign_default()(assign_default()({}, this.props), {
        nodeInstance: this.refNode
      }));
    };

    this.onDragOver = e => {
      const {
        onNodeDragOver
      } = this.context;
      e.preventDefault();
      e.stopPropagation();
      onNodeDragOver(e, assign_default()(assign_default()({}, this.props), {
        nodeInstance: this.refNode
      }));
    };

    this.onDragLeave = e => {
      const {
        onNodeDragLeave
      } = this.context;
      e.stopPropagation();
      onNodeDragLeave(e, assign_default()(assign_default()({}, this.props), {
        nodeInstance: this.refNode
      }));
    };

    this.onDragEnd = e => {
      const {
        onNodeDragEnd
      } = this.context;
      e.stopPropagation();
      onNodeDragEnd(e, assign_default()(assign_default()({}, this.props), {
        nodeInstance: this.refNode
      }));
    };

    this.onDrop = e => {
      const {
        onNodeDrop
      } = this.context;
      e.preventDefault();
      e.stopPropagation();
      onNodeDrop(e, assign_default()(assign_default()({}, this.props), {
        nodeInstance: this.refNode
      }));
    };

    this.getNodeChildren = () => {
      const {
        children
      } = this.props;
      return children || [];
    };

    this.isLeaf = () => {
      const {
        isLeaf,
        loaded
      } = this.props;
      const {
        loadData
      } = this.context;
      const hasChildren = this.getNodeChildren().length !== 0;

      if (isLeaf === false) {
        return false;
      }

      return isLeaf || !loadData && !hasChildren || loadData && loaded && !hasChildren;
    };

    this.isDisabled = () => {
      const {
        disabled
      } = this.props;
      const {
        treeDisabled
      } = this.context;

      if (disabled === false) {
        return false;
      }

      return Boolean(treeDisabled || disabled);
    };

    this.renderRealLabel = () => {
      const {
        renderLabel
      } = this.context;
      const {
        label,
        keyword,
        data,
        filtered,
        treeNodeFilterProp
      } = this.props;

      if (isFunction_default()(renderLabel)) {
        return renderLabel(label, data);
      } else if (isString_default()(label) && filtered && keyword && treeNodeFilterProp === 'label') {
        return Object(_utils["d" /* getHighLightTextHTML */])({
          sourceString: label,
          searchWords: [keyword],
          option: {
            highlightTag: 'span',
            highlightClassName: "".concat(treeNode_prefixcls, "-highlight")
          }
        });
      } else {
        return label;
      }
    };

    this.setRef = node => {
      this.refNode = node;
    };

    this.state = {};
    this.debounceSelect = debounce_default()(this.onSelect, 500, {
      leading: true,
      trailing: false
    });
  }

  renderArrow() {
    const showIcon = !this.isLeaf();
    const {
      loading,
      expanded
    } = this.props;

    if (loading) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(spin_0, {
        wrapperClassName: "".concat(treeNode_prefixcls, "-spin-icon")
      });
    }

    if (showIcon) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconTreeTriangleDown, {
        role: 'button',
        "aria-label": "".concat(expanded ? 'Expand' : 'Collapse', " the tree item"),
        className: "".concat(treeNode_prefixcls, "-expand-icon"),
        size: "small",
        onClick: this.onExpand
      });
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(treeNode_prefixcls, "-empty-icon")
    });
  }

  renderCheckbox() {
    const {
      checked,
      halfChecked,
      eventKey
    } = this.props;
    const disabled = this.isDisabled();
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: 'none',
      onClick: this.onCheck,
      onKeyPress: this.handleCheckEnterPress
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(checkbox_checkbox_0, {
      "aria-label": 'Toggle the checked state of checkbox',
      value: eventKey,
      indeterminate: halfChecked,
      checked: checked,
      disabled: Boolean(disabled)
    }));
  }

  renderIcon() {
    const {
      directory,
      treeIcon
    } = this.context;
    const {
      expanded,
      icon
    } = this.props;
    const hasChild = !this.isLeaf();
    const hasIcon = icon || treeIcon;
    let itemIcon;

    if (hasIcon || directory) {
      if (hasIcon) {
        itemIcon = icon || treeIcon;
      } else {
        if (!hasChild) {
          itemIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconFile, {
            className: "".concat(treeNode_prefixcls, "-item-icon")
          });
        } else {
          // eslint-disable-next-line max-len
          itemIcon = expanded ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconFolderOpen, {
            className: "".concat(treeNode_prefixcls, "-item-icon")
          }) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconFolder, {
            className: "".concat(treeNode_prefixcls, "-item-icon")
          });
        }
      }
    }

    return itemIcon;
  }

  renderEmptyNode() {
    var _context;

    const {
      emptyContent
    } = this.props;
    const wrapperCls = classnames_default()(treeNode_prefixcls, {
      ["".concat(treeNode_prefixcls, "-empty")]: true
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("ul", {
      className: wrapperCls
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", {
      className: concat_default()(_context = "".concat(treeNode_prefixcls, "-label ")).call(_context, treeNode_prefixcls, "-label-empty"),
      "x-semi-prop": "emptyContent"
    }, emptyContent));
  } // eslint-disable-next-line max-lines-per-function


  render() {
    var _context2;

    const _a = this.props,
          {
      eventKey,
      expanded,
      selected,
      checked,
      halfChecked,
      loading,
      active,
      level,
      empty,
      filtered,
      treeNodeFilterProp,
      // eslint-disable-next-line no-unused-vars
      display,
      style
    } = _a,
          rest = treeNode_rest(_a, ["eventKey", "expanded", "selected", "checked", "halfChecked", "loading", "active", "level", "empty", "filtered", "treeNodeFilterProp", "display", "style"]);

    if (empty) {
      return this.renderEmptyNode();
    }

    const {
      multiple,
      draggable,
      renderFullLabel,
      dragOverNodeKey,
      dropPosition,
      labelEllipsis
    } = this.context;
    const disabled = this.isDisabled();
    const dragOver = dragOverNodeKey === eventKey && dropPosition === 0;
    const dragOverGapTop = dragOverNodeKey === eventKey && dropPosition === -1;
    const dragOverGapBottom = dragOverNodeKey === eventKey && dropPosition === 1;
    const nodeCls = classnames_default()(treeNode_prefixcls, {
      [concat_default()(_context2 = "".concat(treeNode_prefixcls, "-level-")).call(_context2, level + 1)]: true,
      ["".concat(treeNode_prefixcls, "-collapsed")]: !expanded,
      ["".concat(treeNode_prefixcls, "-disabled")]: Boolean(disabled),
      ["".concat(treeNode_prefixcls, "-selected")]: selected,
      ["".concat(treeNode_prefixcls, "-active")]: !multiple && active,
      ["".concat(treeNode_prefixcls, "-ellipsis")]: labelEllipsis,
      ["".concat(treeNode_prefixcls, "-filtered")]: filtered && treeNodeFilterProp !== 'label',
      ["".concat(treeNode_prefixcls, "-drag-over")]: !disabled && dragOver,
      ["".concat(treeNode_prefixcls, "-draggable")]: !disabled && draggable && !renderFullLabel,
      // When draggable + renderFullLabel is enabled, the default style
      ["".concat(treeNode_prefixcls, "-fullLabel-draggable")]: !disabled && draggable && renderFullLabel,
      // When draggable + renderFullLabel is turned on, the style of dragover
      ["".concat(treeNode_prefixcls, "-fullLabel-drag-over-gap-top")]: !disabled && dragOverGapTop && renderFullLabel,
      ["".concat(treeNode_prefixcls, "-fullLabel-drag-over-gap-bottom")]: !disabled && dragOverGapBottom && renderFullLabel
    });
    const labelProps = {
      onClick: this.onClick,
      onContextMenu: this.onContextMenu,
      onDoubleClick: this.onDoubleClick,
      className: nodeCls,
      onExpand: this.onExpand,
      data: rest.data,
      level,
      onCheck: this.onCheck,
      style,
      expandIcon: this.renderArrow(),
      checkStatus: {
        checked,
        halfChecked
      },
      expandStatus: {
        expanded,
        loading
      }
    };
    const dragProps = {
      onDoubleClick: this.onDoubleClick,
      onDragStart: draggable ? this.onDragStart : undefined,
      onDragEnter: draggable ? this.onDragEnter : undefined,
      onDragOver: draggable ? this.onDragOver : undefined,
      onDragLeave: draggable ? this.onDragLeave : undefined,
      onDrop: draggable ? this.onDrop : undefined,
      onDragEnd: draggable ? this.onDragEnd : undefined,
      draggable: !disabled && draggable || undefined
    };

    if (renderFullLabel) {
      const customLabel = renderFullLabel(assign_default()({}, labelProps));

      if (draggable) {
        // @ts-ignore skip cloneElement type check
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(customLabel, assign_default()({
          ref: this.setRef
        }, dragProps));
      } else {
        if (isEmpty_default()(style)) {
          return customLabel;
        } else {
          // In virtualization, props.style will contain location information
          // @ts-ignore skip cloneElement type check
          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(customLabel, {
            style: assign_default()(assign_default()({}, get_default()(customLabel, ['props', 'style'])), style)
          });
        }
      }
    }

    const labelCls = classnames_default()("".concat(treeNode_prefixcls, "-label"), {
      ["".concat(treeNode_prefixcls, "-drag-over-gap-top")]: !disabled && dragOverGapTop,
      ["".concat(treeNode_prefixcls, "-drag-over-gap-bottom")]: !disabled && dragOverGapBottom
    });

    const setsize = get_default()(rest, ['data', 'children', 'length']);

    const posinset = isString_default()(rest.pos) ? Number(rest.pos.split('-')[level + 1]) + 1 : 1;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("li", assign_default()({
      className: nodeCls,
      role: "treeitem",
      "aria-disabled": disabled,
      "aria-checked": checked,
      "aria-selected": selected,
      "aria-setsize": setsize,
      "aria-posinset": posinset,
      "aria-expanded": expanded,
      "aria-level": level + 1,
      "data-key": eventKey,
      onClick: this.onClick,
      onKeyPress: this.handleliEnterPress,
      onContextMenu: this.onContextMenu,
      onDoubleClick: this.onDoubleClick,
      ref: this.setRef,
      style: style
    }, dragProps), this.renderArrow(), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: labelCls
    }, multiple ? this.renderCheckbox() : null, this.renderIcon(), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(treeNode_prefixcls, "-label-text")
    }, this.renderRealLabel())));
  }

}
treeNode_TreeNode.contextType = treeContext;
treeNode_TreeNode.propTypes = {
  expanded: prop_types_default.a.bool,
  selected: prop_types_default.a.bool,
  checked: prop_types_default.a.bool,
  halfChecked: prop_types_default.a.bool,
  active: prop_types_default.a.bool,
  disabled: prop_types_default.a.bool,
  loaded: prop_types_default.a.bool,
  loading: prop_types_default.a.bool,
  isLeaf: prop_types_default.a.bool,
  pos: prop_types_default.a.string,
  children: prop_types_default.a.oneOfType([prop_types_default.a.array, prop_types_default.a.object]),
  icon: prop_types_default.a.node,
  directory: prop_types_default.a.bool,
  keyword: prop_types_default.a.string,
  treeNodeFilterProp: prop_types_default.a.string,
  selectedKey: prop_types_default.a.string,
  motionKey: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.arrayOf(prop_types_default.a.string)])
};
treeNode_TreeNode.defaultProps = {
  selectedKey: '',
  motionKey: ''
};
// CONCATENATED MODULE: ./tree/collapse.tsx



/* eslint-disable arrow-body-style */





const collapse_ease = 'cubicBezier(.25,.1,.25,1)';

const tree_collapse_Collapse = props => {
  const {
    motion,
    children,
    duration,
    onMotionEnd,
    motionType
  } = props;
  const ref = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useRef"])(null);
  const [maxHeight, setMaxHeight] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(0); // cache last state

  const [open, setOpen] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(true);
  const [left, setLeft] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(false);
  const [immediateAttr, setImmediateAttr] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(false);
  Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useEffect"])(() => {
    if (motionType === 'enter') {
      !open && setOpen(true);
      left && setLeft(false);
    } else if (motionType === 'leave') {
      !open && setOpen(true);
      !immediateAttr && setImmediateAttr(true);
      left && setLeft(false);
    }
  }, [motionType]);
  const setHeight = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useCallback"])(node => {
    const currHeight = node && node.scrollHeight;

    if (currHeight && maxHeight !== currHeight) {
      setMaxHeight(currHeight);
    }
  }, [left]);

  const resetHeight = () => {
    ref.current.style.maxHeight = 'none';
  };

  const formatStyle = style => {
    // eslint-disable-next-line @typescript-eslint/no-shadow
    const {
      maxHeight
    } = style;
    return {
      maxHeight
    };
  };

  const renderChildren = transitionStyle => {
    const transition = transitionStyle && typeof transitionStyle === 'object' ? formatStyle(transitionStyle) : {};

    const style = assign_default()({
      overflow: 'hidden',
      maxHeight: open ? 'none' : 0
    }, transition);

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      style: style,
      className: "".concat(collapsible_constants_cssClasses.PREFIX, "-wrapper"),
      ref: ref
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      ref: setHeight
    }, children));
  };

  const didLeave = () => {
    setLeft(true);
    setMaxHeight(0);
    motionType === 'leave' && onMotionEnd();
  };

  const onImmediateEnter = () => {
    open && setOpen(false);
    setImmediateAttr(false);
  };

  const didEnter = () => {
    resetHeight();
    immediateAttr && onImmediateEnter();
    motionType === 'enter' && onMotionEnd();
  };

  const renderContent = () => {
    if (left) {
      return null;
    }

    const mergeMotion = getMotionObjFromProps({
      didEnter,
      didLeave,
      motion
    });
    return motion ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Transition_Transition, assign_default()({
      state: open ? 'enter' : 'leave',
      immediate: immediateAttr,
      from: {
        maxHeight: 0
      },
      enter: {
        maxHeight: {
          val: maxHeight,
          easing: collapse_ease,
          duration
        }
      },
      leave: {
        maxHeight: {
          val: 0,
          easing: collapse_ease,
          duration
        }
      }
    }, mergeMotion), transitionStyle => renderChildren(transitionStyle)) : renderChildren(null);
  };

  return renderContent();
};

tree_collapse_Collapse.propType = {
  motion: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.func, prop_types_default.a.object]),
  children: prop_types_default.a.node,
  duration: prop_types_default.a.number,
  onMotionEnd: prop_types_default.a.func
};
tree_collapse_Collapse.defaultProps = {
  duration: 250,
  motion: true,
  onMotionEnd: noop_default.a
};
/* harmony default export */ var tree_collapse = (tree_collapse_Collapse);
// CONCATENATED MODULE: ./tree/nodeList.tsx









const getTreeNodeKey = treeNode => {
  const {
    data
  } = treeNode;
  const {
    key
  } = data;
  return key;
};

class nodeList_NodeList extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  constructor(props) {
    super(props);

    this.onMotionEnd = () => {
      typeof this.props.onMotionEnd === 'function' && this.props.onMotionEnd();
      this.setState({
        transitionNodes: []
      });
    };

    this.state = {
      transitionNodes: []
    };
  }

  static getDerivedStateFromProps(props, prevState) {
    var _context;

    const {
      flattenNodes = [],
      motionKeys,
      motionType,
      flattenList = []
    } = props;
    const hasChanged = !isEqual_default()(prevState.cachedMotionKeys, motionKeys) || !isEqual_default()(map_default()(_context = prevState.cachedData).call(_context, i => i.key), map_default()(flattenNodes).call(flattenNodes, i => i.key));
    const motionArr = [...motionKeys];

    if (!hasChanged || !motionArr.length) {
      return null;
    }

    const transitionNodes = [];
    const transitionRange = [];
    let rangeStart = 0;
    let newState = {};
    const lookUpTarget = motionType === 'hide' && flattenList ? flattenList : flattenNodes;

    for_each_default()(lookUpTarget).call(lookUpTarget, (treeNode, ind) => {
      const nodeKey = getTreeNodeKey(treeNode);

      if (motionKeys.has(nodeKey)) {
        transitionRange.push(treeNode);

        if (nodeKey === motionArr[0]) {
          rangeStart = ind;
        }
      } else {
        transitionNodes.push(treeNode);
      }
    });

    splice_default()(transitionNodes).call(transitionNodes, rangeStart, 0, transitionRange);

    newState = {
      transitionNodes,
      cachedData: flattenNodes,
      cachedMotionKeys: motionKeys,
      cachedMotionType: motionType
    };
    return newState;
  }

  render() {
    const {
      flattenNodes,
      motionType,
      searchTargetIsDeep,
      renderTreeNode
    } = this.props;
    const {
      transitionNodes
    } = this.state;
    const mapData = transitionNodes.length && !searchTargetIsDeep ? transitionNodes : flattenNodes;

    const options = map_default()(mapData).call(mapData, treeNode => {
      const isMotionNode = is_array_default()(treeNode);

      if (isMotionNode && !treeNode.length) {
        return null;
      }

      if (isMotionNode && treeNode.length) {
        const nodeKey = getTreeNodeKey(treeNode[0]);
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tree_collapse, {
          motionType: motionType === 'show' ? 'enter' : 'leave',
          key: "motion-".concat(nodeKey),
          onMotionEnd: this.onMotionEnd,
          motion: Boolean(motionType)
        }, map_default()(treeNode).call(treeNode, node => renderTreeNode(node)));
      }

      return renderTreeNode(treeNode);
    });

    return options;
  }

}
nodeList_NodeList.contextType = treeContext;
// EXTERNAL MODULE: ../semi-foundation/tree/tree.scss
var tree = __webpack_require__("Q8Yr");

// CONCATENATED MODULE: ./tree/index.tsx











/* eslint-disable max-lines-per-function */





















const tree_prefixcls = tree_constants_cssClasses.PREFIX;

class tree_Tree extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);

    this.search = value => {
      this.foundation.handleInputChange(value);
    };

    this.renderEmpty = () => {
      const {
        emptyContent
      } = this.props;

      if (emptyContent) {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(treeNode_TreeNode, {
          empty: true,
          emptyContent: this.props.emptyContent
        });
      } else {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
          componentName: "Tree"
        }, locale => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(treeNode_TreeNode, {
          empty: true,
          emptyContent: get_default()(locale, 'emptyText')
        }));
      }
    };

    this.onNodeSelect = (e, treeNode) => {
      this.foundation.handleNodeSelect(e, treeNode);
    };

    this.onNodeLoad = data => new promise_default.a(resolve => {
      // We need to get the latest state of loading/loaded keys
      this.setState(_ref => {
        let {
          loadedKeys = new set_default.a([]),
          loadingKeys = new set_default.a([])
        } = _ref;
        return this.foundation.handleNodeLoad(loadedKeys, loadingKeys, data, resolve);
      });
    });

    this.onNodeCheck = (e, treeNode) => {
      this.foundation.handleNodeSelect(e, treeNode);
    };

    this.onNodeExpand = (e, treeNode) => {
      this.foundation.handleNodeExpand(e, treeNode);
    };

    this.onNodeRightClick = (e, treeNode) => {
      this.foundation.handleNodeRightClick(e, treeNode);
    };

    this.onNodeDoubleClick = (e, treeNode) => {
      this.foundation.handleNodeDoubleClick(e, treeNode);
    };

    this.onNodeDragStart = (e, treeNode) => {
      this.foundation.handleNodeDragStart(e, treeNode);
    };

    this.onNodeDragEnter = (e, treeNode) => {
      this.foundation.handleNodeDragEnter(e, treeNode, this.dragNode);
    };

    this.onNodeDragOver = (e, treeNode) => {
      this.foundation.handleNodeDragOver(e, treeNode, this.dragNode);
    };

    this.onNodeDragLeave = (e, treeNode) => {
      this.foundation.handleNodeDragLeave(e, treeNode);
    };

    this.onNodeDragEnd = (e, treeNode) => {
      this.foundation.handleNodeDragEnd(e, treeNode);
    };

    this.onNodeDrop = (e, treeNode) => {
      this.foundation.handleNodeDrop(e, treeNode, this.dragNode);
    };

    this.getTreeNodeRequiredProps = () => {
      const {
        expandedKeys,
        selectedKeys,
        checkedKeys,
        halfCheckedKeys,
        keyEntities,
        filteredKeys
      } = this.state;
      return {
        expandedKeys: expandedKeys || new set_default.a(),
        selectedKeys: selectedKeys || [],
        checkedKeys: checkedKeys || new set_default.a(),
        halfCheckedKeys: halfCheckedKeys || new set_default.a(),
        filteredKeys: filteredKeys || new set_default.a(),
        keyEntities
      };
    };

    this.getTreeNodeKey = treeNode => {
      const {
        data
      } = treeNode;
      const {
        key
      } = data;
      return key;
    };

    this.renderTreeNode = (treeNode, ind, style) => {
      const {
        data
      } = treeNode;
      const {
        key
      } = data;
      const treeNodeProps = this.foundation.getTreeNodeProps(key);

      if (!treeNodeProps) {
        return null;
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(treeNode_TreeNode, assign_default()({}, treeNodeProps, data, {
        key: key,
        data: data,
        style: isEmpty_default()(style) ? {} : style
      }));
    };

    this.itemKey = (index, data) => {
      // Find the item at the specified index.
      const item = data[index]; // Return a value that uniquely identifies this item.

      return item.key;
    };

    this.state = {
      inputValue: '',
      keyEntities: {},
      treeData: [],
      flattenNodes: [],
      selectedKeys: [],
      checkedKeys: new set_default.a(),
      halfCheckedKeys: new set_default.a(),
      realCheckedKeys: new set_default.a([]),
      motionKeys: new set_default.a([]),
      motionType: 'hide',
      expandedKeys: new set_default.a(props.expandedKeys),
      filteredKeys: new set_default.a(),
      filteredExpandedKeys: new set_default.a(),
      filteredShownKeys: new set_default.a(),
      prevProps: null,
      loadedKeys: new set_default.a(),
      loadingKeys: new set_default.a(),
      cachedFlattenNodes: undefined,
      cachedKeyValuePairs: {},
      disabledKeys: new set_default.a(),
      dragging: false,
      dragNodesKeys: new set_default.a(),
      dragOverNodeKey: null,
      dropPosition: null
    };
    this.inputRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.optionsRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.foundation = new foundation_TreeFoundation(this.adapter);
    this.dragNode = null;
  }
  /**
   * Process of getDerivedStateFromProps was inspired by rc-tree
   * https://github.com/react-component/tree
   */


  static getDerivedStateFromProps(props, prevState) {
    const {
      prevProps
    } = prevState;
    let treeData;
    let keyEntities = prevState.keyEntities || {};
    let valueEntities = prevState.cachedKeyValuePairs || {};
    const isSeaching = Boolean(props.filterTreeNode && prevState.inputValue && prevState.inputValue.length);
    const newState = {
      prevProps: props
    };
    const isExpandControlled = ('expandedKeys' in props); // Accept a props field as a parameter to determine whether to update the field

    const needUpdate = name => {
      const firstInProps = !prevProps && name in props;
      const nameHasChange = prevProps && !isEqual_default()(prevProps[name], props[name]);
      return firstInProps || nameHasChange;
    }; // Determine whether treeData has changed


    const needUpdateData = () => {
      const firstInProps = !prevProps && 'treeData' in props;
      const treeDataHasChange = prevProps && prevProps.treeData !== props.treeData;
      return firstInProps || treeDataHasChange;
    }; // Update the data of tree in state


    if (needUpdate('treeData') || props.draggable && needUpdateData()) {
      // eslint-disable-next-line prefer-destructuring
      treeData = props.treeData;
      newState.treeData = treeData;
      const entitiesMap = convertDataToEntities(treeData);
      newState.keyEntities = assign_default()({}, entitiesMap.keyEntities);
      keyEntities = newState.keyEntities;
      newState.cachedKeyValuePairs = assign_default()({}, entitiesMap.valueEntities);
      valueEntities = newState.cachedKeyValuePairs;
    } else if (needUpdate('treeDataSimpleJson')) {
      // Convert treeDataSimpleJson to treeData
      treeData = convertJsonToData(props.treeDataSimpleJson);
      newState.treeData = treeData;
      const entitiesMap = convertDataToEntities(treeData);
      newState.keyEntities = assign_default()({}, entitiesMap.keyEntities);
      keyEntities = newState.keyEntities;
      newState.cachedKeyValuePairs = assign_default()({}, entitiesMap.valueEntities);
      valueEntities = newState.cachedKeyValuePairs;
    } // If treeData keys changes, we won't show animation


    if (treeData && props.motion) {
      if (prevProps && props.motion) {
        newState.motionKeys = new set_default.a([]);
        newState.motionType = null;
      }
    }

    const dataUpdated = needUpdate('treeDataSimpleJson') || needUpdate('treeData');
    const expandAllWhenDataChange = dataUpdated && props.expandAll;

    if (!isSeaching) {
      // Update expandedKeys
      if (needUpdate('expandedKeys') || prevProps && needUpdate('autoExpandParent')) {
        newState.expandedKeys = calcExpandedKeys(props.expandedKeys, keyEntities, props.autoExpandParent || !prevProps); // only show animation when treeData does not change

        if (prevProps && props.motion && !treeData) {
          const {
            motionKeys,
            motionType
          } = calcMotionKeys(prevState.expandedKeys, newState.expandedKeys, keyEntities);
          newState.motionKeys = new set_default.a(motionKeys);
          newState.motionType = motionType;

          if (motionType === 'hide') {
            // cache flatten nodes: expandedKeys changed may not be triggered by interaction
            newState.cachedFlattenNodes = treeUtil_cloneDeep(prevState.flattenNodes);
          }
        }
      } else if (!prevProps && (props.defaultExpandAll || props.expandAll) || expandAllWhenDataChange) {
        newState.expandedKeys = new set_default.a(keys_default()(keyEntities));
      } else if (!prevProps && props.defaultExpandedKeys) {
        newState.expandedKeys = calcExpandedKeys(props.defaultExpandedKeys, keyEntities);
      } else if (!prevProps && props.defaultValue) {
        newState.expandedKeys = calcExpandedKeysForValues(props.defaultValue, keyEntities, props.multiple, valueEntities);
      } else if ((!prevProps || !isExpandControlled && dataUpdated) && props.value) {
        newState.expandedKeys = calcExpandedKeysForValues(props.value, keyEntities, props.multiple, valueEntities);
      }

      if (!newState.expandedKeys) {
        delete newState.expandedKeys;
      } // Update flattenNodes


      if (treeData || newState.expandedKeys) {
        const flattenNodes = flattenTreeData(treeData || prevState.treeData, newState.expandedKeys || prevState.expandedKeys);
        newState.flattenNodes = flattenNodes;
      }
    } else {
      let filteredState; // treeData changed while searching

      if (treeData) {
        // Get filter data
        filteredState = filterTreeData({
          treeData,
          inputValue: prevState.inputValue,
          filterTreeNode: props.filterTreeNode,
          filterProps: props.treeNodeFilterProp,
          showFilteredOnly: props.showFilteredOnly,
          keyEntities: newState.keyEntities,
          prevExpandedKeys: [...prevState.filteredExpandedKeys]
        });
        newState.flattenNodes = filteredState.flattenNodes;
        newState.motionKeys = new set_default.a([]);
        newState.filteredKeys = filteredState.filteredKeys;
        newState.filteredShownKeys = filteredState.filteredShownKeys;
        newState.filteredExpandedKeys = filteredState.filteredExpandedKeys;
      } // expandedKeys changed while searching


      if (props.expandedKeys) {
        newState.filteredExpandedKeys = calcExpandedKeys(props.expandedKeys, keyEntities, props.autoExpandParent || !prevProps);

        if (prevProps && props.motion) {
          const prevKeys = prevState ? prevState.filteredExpandedKeys : new set_default.a([]); // only show animation when treeData does not change

          if (!treeData) {
            const motionResult = calcMotionKeys(prevKeys, newState.filteredExpandedKeys, keyEntities);
            let {
              motionKeys
            } = motionResult;
            const {
              motionType
            } = motionResult;

            if (props.showFilteredOnly) {
              motionKeys = filter_default()(motionKeys).call(motionKeys, key => prevState.filteredShownKeys.has(key));
            }

            if (motionType === 'hide') {
              // cache flatten nodes: expandedKeys changed may not be triggered by interaction
              newState.cachedFlattenNodes = treeUtil_cloneDeep(prevState.flattenNodes);
            }

            newState.motionKeys = new set_default.a(motionKeys);
            newState.motionType = motionType;
          }
        }

        newState.flattenNodes = flattenTreeData(treeData || prevState.treeData, newState.filteredExpandedKeys || prevState.filteredExpandedKeys, props.showFilteredOnly && prevState.filteredShownKeys);
      }
    } // Handle single selection and multiple selection in controlled mode


    const withObject = props.onChangeWithObject;
    const isMultiple = props.multiple;

    if (!isMultiple) {
      // When getting single selection, the selected node
      if (needUpdate('value')) {
        newState.selectedKeys = findKeysForValues( // In both cases whether withObject is turned on, the value is standardized to string
        normalizeValue(props.value, withObject), valueEntities, isMultiple);
      } else if (!prevProps && props.defaultValue) {
        newState.selectedKeys = findKeysForValues(normalizeValue(props.defaultValue, withObject), valueEntities, isMultiple);
      } else if (treeData) {
        // If `treeData` changed, we also need check it
        if (props.value) {
          newState.selectedKeys = findKeysForValues(normalizeValue(props.value, withObject) || '', valueEntities, isMultiple);
        }
      }
    } else {
      let checkedKeyValues; // Get the selected node during multiple selection

      if (needUpdate('value')) {
        checkedKeyValues = findKeysForValues(normalizeValue(props.value, withObject), valueEntities, isMultiple);
      } else if (!prevProps && props.defaultValue) {
        checkedKeyValues = findKeysForValues(normalizeValue(props.defaultValue, withObject), valueEntities, isMultiple);
      } else if (treeData) {
        // If `treeData` changed, we also need check it
        if (props.value) {
          checkedKeyValues = findKeysForValues(normalizeValue(props.value, withObject) || [], valueEntities, isMultiple);
        } else {
          checkedKeyValues = updateKeys(prevState.checkedKeys, keyEntities);
        }
      }

      if (checkedKeyValues) {
        if (props.checkRelation === 'unRelated') {
          newState.realCheckedKeys = new set_default.a(checkedKeyValues);
        } else if (props.checkRelation === 'related') {
          const {
            checkedKeys,
            halfCheckedKeys
          } = calcCheckedKeys(checkedKeyValues, keyEntities);
          newState.checkedKeys = checkedKeys;
          newState.halfCheckedKeys = halfCheckedKeys;
        }
      }
    } // update loadedKeys


    if (needUpdate('loadedKeys')) {
      newState.loadedKeys = new set_default.a(props.loadedKeys);
    } // update disableStrictly


    if (treeData && props.disableStrictly && props.checkRelation === 'related') {
      newState.disabledKeys = calcDisabledKeys(keyEntities);
    }

    return newState;
  }

  get adapter() {
    const filterAdapter = {
      updateInputValue: value => {
        this.setState({
          inputValue: value
        });
      },
      focusInput: () => {
        const {
          preventScroll
        } = this.props;

        if (this.inputRef && this.inputRef.current) {
          this.inputRef.current.focus({
            preventScroll
          });
        }
      }
    };
    return assign_default()(assign_default()(assign_default()({}, super.adapter), filterAdapter), {
      updateState: states => {
        this.setState(assign_default()({}, states));
      },
      notifyExpand: (expandedKeys, _ref2) => {
        let {
          expanded: bool,
          node
        } = _ref2;
        this.props.onExpand && this.props.onExpand([...expandedKeys], {
          expanded: bool,
          node
        });

        if (bool && this.props.loadData) {
          this.onNodeLoad(node);
        }
      },
      notifySelect: (selectKey, bool, node) => {
        this.props.onSelect && this.props.onSelect(selectKey, bool, node);
      },
      notifyChange: value => {
        this.props.onChange && this.props.onChange(value);
      },
      notifySearch: input => {
        this.props.onSearch && this.props.onSearch(input);
      },
      notifyRightClick: (e, node) => {
        this.props.onContextMenu && this.props.onContextMenu(e, node);
      },
      notifyDoubleClick: (e, node) => {
        this.props.onDoubleClick && this.props.onDoubleClick(e, node);
      },
      cacheFlattenNodes: bool => {
        this.setState({
          cachedFlattenNodes: bool ? treeUtil_cloneDeep(this.state.flattenNodes) : undefined
        });
      },
      setDragNode: treeNode => {
        this.dragNode = treeNode;
      }
    });
  }

  renderInput() {
    const {
      searchClassName,
      searchStyle,
      searchRender,
      searchPlaceholder,
      showClear
    } = this.props;
    const inputcls = classnames_default()("".concat(tree_prefixcls, "-input"));
    const {
      inputValue
    } = this.state;
    const inputProps = {
      value: inputValue,
      className: inputcls,
      onChange: value => this.search(value),
      prefix: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconSearch, null),
      showClear,
      placeholder: searchPlaceholder
    };
    const wrapperCls = classnames_default()("".concat(tree_prefixcls, "-search-wrapper"), searchClassName);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: wrapperCls,
      style: searchStyle
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
      componentName: "Tree"
    }, locale => {
      inputProps.placeholder = searchPlaceholder || get_default()(locale, 'searchPlaceholder');

      if (isFunction_default()(searchRender)) {
        return searchRender(assign_default()({}, inputProps));
      }

      if (searchRender === false) {
        return null;
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(input_0, assign_default()({
        "aria-label": 'Filter Tree',
        ref: this.inputRef
      }, inputProps));
    }));
  }

  renderNodeList() {
    const {
      flattenNodes,
      cachedFlattenNodes,
      motionKeys,
      motionType
    } = this.state;
    const {
      virtualize,
      motion
    } = this.props;
    const {
      direction
    } = this.context;

    if (isEmpty_default()(flattenNodes)) {
      return undefined;
    }

    if (!virtualize || isEmpty_default()(virtualize)) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(nodeList_NodeList, {
        flattenNodes: flattenNodes,
        flattenList: cachedFlattenNodes,
        motionKeys: motion ? motionKeys : new set_default.a([]),
        motionType: motionType,
        onMotionEnd: this.onMotionEnd,
        renderTreeNode: this.renderTreeNode
      });
    }

    const option = _ref3 => {
      let {
        index,
        style,
        data
      } = _ref3;
      return this.renderTreeNode(data[index], index, style);
    };

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(autoSizer_AutoSizer, {
      defaultHeight: virtualize.height,
      defaultWidth: virtualize.width
    }, _ref4 => {
      let {
        height,
        width
      } = _ref4;
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(FixedSizeList, {
        itemCount: flattenNodes.length,
        itemSize: virtualize.itemSize,
        height: height,
        width: width,
        itemKey: this.itemKey,
        itemData: flattenNodes,
        className: "".concat(tree_prefixcls, "-virtual-list"),
        style: {
          direction
        }
      }, option);
    });
  }

  render() {
    const {
      keyEntities,
      motionKeys,
      motionType,
      inputValue,
      filteredKeys,
      dragOverNodeKey,
      dropPosition,
      checkedKeys,
      realCheckedKeys
    } = this.state;
    const {
      blockNode,
      className,
      style,
      filterTreeNode,
      disabled,
      icon,
      directory,
      multiple,
      showFilteredOnly,
      motion,
      expandAction,
      loadData,
      renderLabel,
      draggable,
      renderFullLabel,
      labelEllipsis,
      virtualize,
      checkRelation
    } = this.props;
    const wrapperCls = classnames_default()("".concat(tree_prefixcls, "-wrapper"), className);
    const listCls = classnames_default()("".concat(tree_prefixcls, "-option-list"), {
      ["".concat(tree_prefixcls, "-option-list-block")]: blockNode
    });
    const searchNoRes = Boolean(inputValue) && !filteredKeys.size;
    const noData = isEmpty_default()(keyEntities) || showFilteredOnly && searchNoRes;
    const ariaAttr = {
      role: noData ? 'none' : 'tree'
    };

    if (ariaAttr.role === 'tree') {
      ariaAttr['aria-multiselectable'] = multiple ? true : false;
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(treeContext.Provider, {
      value: {
        treeDisabled: disabled,
        treeIcon: icon,
        motion,
        motionKeys,
        motionType,
        filterTreeNode,
        keyEntities,
        onNodeClick: this.onNodeClick,
        onNodeExpand: this.onNodeExpand,
        onNodeSelect: this.onNodeSelect,
        onNodeCheck: this.onNodeCheck,
        onNodeRightClick: this.onNodeRightClick,
        onNodeDoubleClick: this.onNodeDoubleClick,
        renderTreeNode: this.renderTreeNode,
        onNodeDragStart: this.onNodeDragStart,
        onNodeDragEnter: this.onNodeDragEnter,
        onNodeDragOver: this.onNodeDragOver,
        onNodeDragLeave: this.onNodeDragLeave,
        onNodeDragEnd: this.onNodeDragEnd,
        onNodeDrop: this.onNodeDrop,
        expandAction,
        directory,
        multiple,
        showFilteredOnly,
        isSearching: Boolean(inputValue),
        loadData,
        onNodeLoad: this.onNodeLoad,
        renderLabel,
        draggable,
        renderFullLabel,
        dragOverNodeKey,
        dropPosition,
        labelEllipsis: typeof labelEllipsis === 'undefined' ? virtualize : labelEllipsis
      }
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      "aria-label": this.props['aria-label'],
      className: wrapperCls,
      style: style
    }, filterTreeNode ? this.renderInput() : null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
      className: listCls
    }, ariaAttr), noData ? this.renderEmpty() : multiple ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(checkboxGroup, {
      value: from_default()(checkRelation === 'related' ? checkedKeys : realCheckedKeys)
    }, this.renderNodeList()) : this.renderNodeList())));
  }

}

tree_Tree.contextType = configProvider_context;
tree_Tree.propTypes = {
  blockNode: prop_types_default.a.bool,
  className: prop_types_default.a.string,
  showClear: prop_types_default.a.bool,
  defaultExpandAll: prop_types_default.a.bool,
  defaultExpandedKeys: prop_types_default.a.array,
  defaultValue: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.array]),
  directory: prop_types_default.a.bool,
  disabled: prop_types_default.a.bool,
  emptyContent: prop_types_default.a.node,
  expandAll: prop_types_default.a.bool,
  expandedKeys: prop_types_default.a.array,
  filterTreeNode: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.bool]),
  icon: prop_types_default.a.node,
  onChangeWithObject: prop_types_default.a.bool,
  motion: prop_types_default.a.bool,
  multiple: prop_types_default.a.bool,
  onChange: prop_types_default.a.func,
  onExpand: prop_types_default.a.func,
  onSearch: prop_types_default.a.func,
  onSelect: prop_types_default.a.func,
  onContextMenu: prop_types_default.a.func,
  onDoubleClick: prop_types_default.a.func,
  searchClassName: prop_types_default.a.string,
  searchPlaceholder: prop_types_default.a.string,
  searchStyle: prop_types_default.a.object,
  selectedKey: prop_types_default.a.string,
  showFilteredOnly: prop_types_default.a.bool,
  style: prop_types_default.a.object,
  treeData: prop_types_default.a.arrayOf(prop_types_default.a.shape({
    key: prop_types_default.a.string.isRequired,
    value: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
    label: prop_types_default.a.any,
    isLeaf: prop_types_default.a.bool
  })),
  treeDataSimpleJson: prop_types_default.a.object,
  treeNodeFilterProp: prop_types_default.a.string,
  value: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number, prop_types_default.a.array, prop_types_default.a.object]),
  virtualize: prop_types_default.a.object,
  autoExpandParent: prop_types_default.a.bool,
  expandAction: prop_types_default.a.oneOf(tree_constants_strings.EXPAND_ACTION),
  searchRender: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.bool]),
  renderLabel: prop_types_default.a.func,
  renderFullLabel: prop_types_default.a.func,
  leafOnly: prop_types_default.a.bool,
  loadedKeys: prop_types_default.a.array,
  loadData: prop_types_default.a.func,
  onLoad: prop_types_default.a.func,
  disableStrictly: prop_types_default.a.bool,
  draggable: prop_types_default.a.bool,
  autoExpandWhenDragEnter: prop_types_default.a.bool,
  hideDraggingNode: prop_types_default.a.bool,
  renderDraggingNode: prop_types_default.a.func,
  onDragEnd: prop_types_default.a.func,
  onDragEnter: prop_types_default.a.func,
  onDragLeave: prop_types_default.a.func,
  onDragOver: prop_types_default.a.func,
  onDragStart: prop_types_default.a.func,
  onDrop: prop_types_default.a.func,
  labelEllipsis: prop_types_default.a.bool,
  checkRelation: prop_types_default.a.string,
  'aria-label': prop_types_default.a.string,
  preventScroll: prop_types_default.a.bool
};
tree_Tree.defaultProps = {
  showClear: true,
  disabled: false,
  blockNode: true,
  multiple: false,
  filterTreeNode: false,
  autoExpandParent: false,
  treeNodeFilterProp: 'label',
  defaultExpandAll: false,
  expandAll: false,
  onChangeWithObject: false,
  motion: true,
  leafOnly: false,
  showFilteredOnly: false,
  expandAction: false,
  disableStrictly: false,
  draggable: false,
  autoExpandWhenDragEnter: true,
  checkRelation: 'related'
};
tree_Tree.TreeNode = treeNode_TreeNode;
/* harmony default export */ var tree_0 = (tree_Tree);
// CONCATENATED MODULE: ../semi-foundation/treeSelect/constants.ts

const treeSelect_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-tree-select"),
  PREFIX_TREE: "".concat(BASE_CLASS_PREFIX, "-tree"),
  PREFIX_OPTION: "".concat(BASE_CLASS_PREFIX, "-tree-select-option")
};
const treeSelect_constants_strings = {
  SIZE_SET: ['small', 'large', 'default'],
  SEARCH_POSITION_DROPDOWN: 'dropdown',
  SEARCH_POSITION_TRIGGER: 'trigger',
  STATUS: VALIDATE_STATUS
};
const treeSelect_constants_numbers = {};

// CONCATENATED MODULE: ../semi-foundation/treeSelect/foundation.ts






















 // eslint-disable-next-line max-len

class foundation_TreeSelectFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  }

  init() {
    const {
      searchAutoFocus,
      searchPosition,
      filterTreeNode
    } = this.getProps();
    const triggerSearch = searchPosition === treeSelect_constants_strings.SEARCH_POSITION_TRIGGER && filterTreeNode;
    const triggerSearchAutoFocus = searchAutoFocus && triggerSearch;

    this._setDropdownWidth();

    const isOpen = (this.getProp('defaultOpen') || triggerSearchAutoFocus) && !this._isDisabled();

    if (isOpen) {
      this.open();
    }
  }

  destroy() {
    // Ensure that event monitoring will be uninstalled, and the user may not trigger closePanel
    this._adapter.unregisterClickOutsideHandler();
  }

  _setDropdownWidth() {
    const {
      style,
      dropdownMatchSelectWidth
    } = this.getProps();
    let width;

    if (dropdownMatchSelectWidth) {
      var _context;

      if (style && isNumber_default()(style.width)) {
        width = style.width;
      } else if (style && isString_default()(style.width) && !includes_default()(_context = style.width).call(_context, '%')) {
        width = style.width;
      } else {
        width = this._adapter.getTriggerWidth();
      }

      this._adapter.setOptionWrapperWidth(width);
    }
  }

  _isMultiple() {
    return this.getProp('multiple');
  }

  _isAnimated() {
    return this.getProp('motionExpand');
  }

  _isDisabled() {
    let treeNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return this.getProp('disabled') || treeNode.disabled;
  }

  _isExpandControlled() {
    return this.getProp('expandedKeys');
  }

  _isSelectToClose() {
    return !this.getProp('expandAction');
  }

  _isLoadControlled() {
    return this.getProp('loadedKeys');
  }

  _showFilteredOnly() {
    const {
      inputValue
    } = this.getStates();
    const {
      showFilteredOnly
    } = this.getProps();
    return Boolean(inputValue) && showFilteredOnly;
  }

  getCopyFromState(items) {
    var _context2;

    const res = {};

    for_each_default()(_context2 = normalizedArr(items)).call(_context2, key => {
      res[key] = cloneDeep_default()(this.getState(key));
    });

    return res;
  }

  getTreeNodeProps(key) {
    const {
      expandedKeys = new set_default.a([]),
      selectedKeys = [],
      checkedKeys = new set_default.a([]),
      halfCheckedKeys = new set_default.a([]),
      realCheckedKeys = new set_default.a([]),
      keyEntities = {},
      filteredKeys = new set_default.a([]),
      inputValue = '',
      loadedKeys,
      loadingKeys,
      filteredExpandedKeys = new set_default.a([]),
      disabledKeys = new set_default.a([])
    } = this.getStates();
    const {
      treeNodeFilterProp,
      checkRelation
    } = this.getProps();
    const entity = keyEntities[key];
    const notExist = !entity;

    if (notExist) {
      return null;
    } // if checkRelation is invalid, the checked status of node will be false


    let realChecked = false;
    let realHalfChecked = false;

    if (checkRelation === 'related') {
      realChecked = checkedKeys.has(key);
      realHalfChecked = halfCheckedKeys.has(key);
    } else if (checkRelation === 'unRelated') {
      realChecked = realCheckedKeys.has(key);
      realHalfChecked = false;
    }

    const isSearching = Boolean(inputValue);
    const treeNodeProps = {
      eventKey: key,
      expanded: isSearching && !this._isExpandControlled() ? filteredExpandedKeys.has(key) : expandedKeys.has(key),
      selected: includes_default()(selectedKeys).call(selectedKeys, key),
      checked: realChecked,
      halfChecked: realHalfChecked,
      pos: String(entity ? entity.pos : ''),
      level: entity.level,
      filtered: filteredKeys.has(key),
      keyword: inputValue,
      treeNodeFilterProp,
      loading: loadingKeys.has(key) && !loadedKeys.has(key),
      loaded: loadedKeys.has(key)
    };

    if (this.getProp('disableStrictly') && disabledKeys.has(key)) {
      treeNodeProps.disabled = true;
    }

    return treeNodeProps;
  }

  handleNodeLoad(loadedKeys, loadingKeys, data, resolve) {
    const {
      loadData
    } = this.getProps();
    const {
      key
    } = data;

    if (!loadData || loadedKeys.has(key) || loadingKeys.has(key)) {
      return {};
    }

    loadData(data).then(() => {
      const {
        loadedKeys: prevLoadedKeys,
        loadingKeys: prevLoadingKeys
      } = this.getCopyFromState(['loadedKeys', 'loadingKeys']);
      const newLoadedKeys = prevLoadedKeys.add(key);
      const newLoadingKeys = new set_default.a([...prevLoadingKeys]);
      newLoadingKeys.delete(key);

      this._adapter.notifyLoad(newLoadedKeys, data);

      if (!this._isLoadControlled()) {
        this._adapter.updateState({
          loadedKeys: newLoadedKeys
        });
      }

      this._adapter.setState({
        loadingKeys: newLoadingKeys
      });

      resolve();
    });
    return {
      loadingKeys: loadingKeys.add(key)
    };
  }
  /* istanbul ignore next */


  focusInput(bool) {
    this._adapter.updateInputFocus(bool);
  }

  _notifyMultipleChange(key, e) {
    const {
      keyEntities
    } = this.getStates();
    const {
      leafOnly,
      checkRelation
    } = this.getProps();
    let keyList = [];

    if (checkRelation === 'related') {
      keyList = normalizeKeyList(key, keyEntities, leafOnly);
    } else if (checkRelation === 'unRelated') {
      keyList = key;
    }

    const nodes = map_default()(keyList).call(keyList, i => keyEntities[i].data);

    if (this.getProp('onChangeWithObject')) {
      this._adapter.notifyChangeWithObject(nodes, e);
    } else {
      const value = getValueOrKey(nodes);

      this._adapter.notifyChange(value, nodes, e);
    }
  }

  _notifyChange(key, e) {
    const {
      keyEntities
    } = this.getStates();

    if (this._isMultiple() && is_array_default()(key)) {
      this._notifyMultipleChange(key, e);
    } else {
      const nodes = isUndefined_default()(key) ? key : keyEntities[key].data;
      const value = isUndefined_default()(key) ? key : getValueOrKey(nodes);

      if (this.getProp('onChangeWithObject')) {
        this._adapter.notifyChangeWithObject(nodes, e);
      } else {
        this._adapter.notifyChange(value, nodes, e);
      }
    }
  } // Scenes that may trigger focus:
  //  1、click selection


  _notifyFocus(e) {
    this._adapter.notifyFocus(e);
  } // Scenes that may trigger blur
  //  1、clickOutSide
  //  2、click option / press enter, and then select complete（when multiple is false
  //  3、press esc when dropdown list open


  _notifyBlur(e) {
    this._adapter.notifyBlur(e);
  }

  toggleHoverState(bool) {
    this._adapter.toggleHovering(bool);
  }

  open() {
    this._adapter.openMenu();

    this._setDropdownWidth();

    this._adapter.registerClickOutsideHandler(e => {
      this.close(e);
    });
  }

  close(e) {
    this._adapter.closeMenu();

    this._adapter.unregisterClickOutsideHandler();

    this._notifyBlur(e);

    if (this.getProp('motionExpand')) {
      this._adapter.updateState({
        motionKeys: new set_default.a([])
      });
    }
  }

  handleClick(e) {
    const isDisabled = this._isDisabled();

    const {
      isOpen,
      inputValue
    } = this.getStates();
    const {
      searchPosition
    } = this.getProps();

    if (isDisabled) {
      return;
    } else if (!isOpen) {
      this.open();

      this._notifyFocus(e);
    } else if (isOpen) {
      if (searchPosition === 'trigger' && inputValue) {
        return;
      }

      this.close(e);
    }
  }
  /**
   * A11y: simulate selection click
   */

  /* istanbul ignore next */


  handleSelectionEnterPress(e) {
    if (utils_isEnterPress(e)) {
      this.handleClick(e);
    }
  }

  handleClear(e) {
    const {
      searchPosition,
      filterTreeNode
    } = this.getProps();
    const {
      inputValue,
      selectedKeys
    } = this.getStates();

    const isMultiple = this._isMultiple();

    const isControlled = this._isControlledComponent();

    const value = isMultiple ? [] : undefined;

    this._notifyChange(value, e);

    if (!isControlled) {
      // reposition dropdown when selected values change
      this._adapter.rePositionDropdown();

      this._adapter.updateState({
        selectedKeys: [],
        checkedKeys: new set_default.a(),
        halfCheckedKeys: new set_default.a(),
        realCheckedKeys: new set_default.a([])
      });
    } // When triggerSearch, clicking the clear button will trigger to clear Input


    if (filterTreeNode && searchPosition === treeSelect_constants_strings.SEARCH_POSITION_TRIGGER) {
      if (inputValue !== '') {
        if (isEmpty_default()(selectedKeys)) {
          this.handleInputChange('');
        } else {
          this.clearInput();
        }
      }
    }
  }
  /**
   * A11y: simulate clear button click
   */

  /* istanbul ignore next */


  handleClearEnterPress(e) {
    if (utils_isEnterPress(e)) {
      this.handleClear(e);
    }
  }

  removeTag(eventKey) {
    const {
      disableStrictly,
      checkRelation
    } = this.getProps();
    const {
      keyEntities,
      disabledKeys,
      realCheckedKeys
    } = this.getStates();
    const item = keyEntities[eventKey].data;

    if (item.disabled || disableStrictly && disabledKeys.has(eventKey)) {
      return;
    }

    if (checkRelation === 'unRelated') {
      const newRealCheckedKeys = new set_default.a(realCheckedKeys);
      newRealCheckedKeys.delete(eventKey);

      this._notifyChange([...newRealCheckedKeys], null);

      if (!this._isControlledComponent()) {
        this._adapter.updateState({
          realCheckedKeys: newRealCheckedKeys
        });

        this._adapter.rePositionDropdown();
      }
    } else if (checkRelation === 'related') {
      const {
        checkedKeys,
        halfCheckedKeys
      } = this.calcCheckedKeys(eventKey, false);

      this._notifyChange([...checkedKeys], null);

      if (!this._isControlledComponent()) {
        this._adapter.updateState({
          checkedKeys,
          halfCheckedKeys
        });

        this._adapter.rePositionDropdown();
      }
    }

    this._adapter.notifySelect(eventKey, false, item); // reposition dropdown when selected values change


    this._adapter.rePositionDropdown();
  }

  clearInput() {
    const {
      flattenNodes,
      expandedKeys,
      selectedKeys,
      keyEntities,
      treeData
    } = this.getStates();
    const newExpandedKeys = new set_default.a(expandedKeys);

    const isExpandControlled = this._isExpandControlled();

    const expandedOptsKeys = findAncestorKeys(selectedKeys, keyEntities);

    for_each_default()(expandedOptsKeys).call(expandedOptsKeys, item => newExpandedKeys.add(item));

    const newFlattenNodes = flattenTreeData(treeData, newExpandedKeys);

    this._adapter.updateState({
      expandedKeys: isExpandControlled ? expandedKeys : newExpandedKeys,
      flattenNodes: isExpandControlled ? flattenNodes : newFlattenNodes,
      inputValue: '',
      motionKeys: new set_default.a([]),
      filteredKeys: new set_default.a([]),
      filteredExpandedKeys: new set_default.a(expandedOptsKeys),
      filteredShownKeys: new set_default.a([])
    });
  }

  handleInputChange(sugInput) {
    // Input is used as controlled component
    this._adapter.updateInputValue(sugInput);

    const {
      flattenNodes,
      expandedKeys,
      selectedKeys,
      keyEntities,
      treeData
    } = this.getStates();
    const {
      showFilteredOnly,
      filterTreeNode,
      treeNodeFilterProp
    } = this.getProps();
    const newExpandedKeys = new set_default.a(expandedKeys);
    let filteredOptsKeys = [];
    let expandedOptsKeys = [];
    let newFlattenNodes = [];
    let filteredShownKeys = new set_default.a([]);

    if (!sugInput) {
      expandedOptsKeys = findAncestorKeys(selectedKeys, keyEntities);

      for_each_default()(expandedOptsKeys).call(expandedOptsKeys, item => newExpandedKeys.add(item));

      newFlattenNodes = flattenTreeData(treeData, newExpandedKeys);
    } else {
      var _context3, _context4;

      filteredOptsKeys = map_default()(_context3 = filter_default()(_context4 = values_default()(keyEntities)).call(_context4, item => {
        const {
          data
        } = item;
        return treeUtil_filter(sugInput, data, filterTreeNode, treeNodeFilterProp);
      })).call(_context3, item => item.key);
      expandedOptsKeys = findAncestorKeys(filteredOptsKeys, keyEntities, false);
      const shownChildKeys = findDescendantKeys(filteredOptsKeys, keyEntities, true);
      filteredShownKeys = new set_default.a([...shownChildKeys, ...expandedOptsKeys]);
      newFlattenNodes = flattenTreeData(treeData, new set_default.a(expandedOptsKeys), showFilteredOnly && filteredShownKeys);
    }

    const newFilteredExpandedKeys = new set_default.a(expandedOptsKeys);

    this._adapter.notifySearch(sugInput, from_default()(newFilteredExpandedKeys));

    this._adapter.updateState({
      expandedKeys: this._isExpandControlled() ? expandedKeys : newExpandedKeys,
      flattenNodes: this._isExpandControlled() ? flattenNodes : newFlattenNodes,
      motionKeys: new set_default.a([]),
      filteredKeys: new set_default.a(filteredOptsKeys),
      filteredExpandedKeys: newFilteredExpandedKeys,
      filteredShownKeys
    });
  }

  handleNodeSelect(e, treeNode) {
    const isDisabled = this._isDisabled(treeNode);

    if (isDisabled) {
      return;
    }

    if (!this._isMultiple()) {
      this.handleSingleSelect(e, treeNode);
    } else {
      this.handleMultipleSelect(e, treeNode);
    }
  }

  handleSingleSelect(e, treeNode) {
    let {
      selectedKeys
    } = this.getCopyFromState('selectedKeys');
    const {
      clickToHide
    } = this.getProps();
    const {
      selected,
      eventKey,
      data
    } = treeNode;

    this._adapter.notifySelect(eventKey, true, data);

    if (!includes_default()(selectedKeys).call(selectedKeys, eventKey) && !selected) {
      selectedKeys = [eventKey];

      this._notifyChange(eventKey, e);

      if (!this._isControlledComponent()) {
        this._adapter.updateState({
          selectedKeys
        });
      }
    }

    if (clickToHide && (this._isSelectToClose() || !data.children)) {
      this.close(e);
    }
  }

  calcCheckedKeys(eventKey, targetStatus) {
    const {
      keyEntities
    } = this.getStates();
    const {
      checkedKeys,
      halfCheckedKeys
    } = this.getCopyFromState(['checkedKeys', 'halfCheckedKeys']);

    if (targetStatus) {
      return calcCheckedKeysForChecked(eventKey, keyEntities, checkedKeys, halfCheckedKeys);
    } else {
      return calcCheckedKeysForUnchecked(eventKey, keyEntities, checkedKeys, halfCheckedKeys);
    }
  }

  handleMultipleSelect(e, treeNode) {
    const {
      searchPosition,
      disableStrictly,
      checkRelation
    } = this.getProps();
    const {
      inputValue,
      realCheckedKeys
    } = this.getStates();
    const {
      checked,
      eventKey,
      data
    } = treeNode;

    if (checkRelation === 'related') {
      const targetStatus = disableStrictly ? this.calcCheckedStatus(!checked, eventKey) : !checked;
      const {
        checkedKeys,
        halfCheckedKeys
      } = disableStrictly ? this.calcNonDisabledCheckedKeys(eventKey, targetStatus) : this.calcCheckedKeys(eventKey, targetStatus);

      this._adapter.notifySelect(eventKey, targetStatus, data);

      this._notifyChange([...checkedKeys], e);

      if (!this._isControlledComponent()) {
        this._adapter.updateState({
          checkedKeys,
          halfCheckedKeys
        });

        this._adapter.rePositionDropdown();
      }
    } else if (checkRelation === 'unRelated') {
      const newRealCheckedKeys = new set_default.a(realCheckedKeys);
      let targetStatus;

      if (realCheckedKeys.has(eventKey)) {
        newRealCheckedKeys.delete(eventKey);
        targetStatus = false;
      } else {
        newRealCheckedKeys.add(eventKey);
        targetStatus = true;
      }

      this._adapter.notifySelect(eventKey, targetStatus, data);

      this._notifyChange([...newRealCheckedKeys], e);

      if (!this._isControlledComponent()) {
        this._adapter.updateState({
          realCheckedKeys: newRealCheckedKeys
        });

        this._adapter.rePositionDropdown();
      }
    }

    if (searchPosition === treeSelect_constants_strings.SEARCH_POSITION_TRIGGER && inputValue !== '') {
      this._adapter.updateState({
        inputValue: ''
      });
    }
  }

  calcNonDisabledCheckedKeys(eventKey, targetStatus) {
    const {
      keyEntities,
      disabledKeys
    } = this.getStates();
    const {
      checkedKeys
    } = this.getCopyFromState(['checkedKeys']);
    const descendantKeys = normalizeKeyList(findDescendantKeys([eventKey], keyEntities, false), keyEntities, true);

    const hasDisabled = some_default()(descendantKeys).call(descendantKeys, key => disabledKeys.has(key));

    if (!hasDisabled) {
      return this.calcCheckedKeys(eventKey, targetStatus);
    }

    const nonDisabled = filter_default()(descendantKeys).call(descendantKeys, key => !disabledKeys.has(key));

    const newCheckedKeys = targetStatus ? [...nonDisabled, ...checkedKeys] : difference_default()(normalizeKeyList([...checkedKeys], keyEntities, true), nonDisabled);
    return calcCheckedKeys(newCheckedKeys, keyEntities);
  }

  calcCheckedStatus(targetStatus, eventKey) {
    if (!targetStatus) {
      return targetStatus;
    }

    const {
      checkedKeys,
      keyEntities,
      disabledKeys
    } = this.getStates();
    const descendantKeys = normalizeKeyList(findDescendantKeys([eventKey], keyEntities, false), keyEntities, true);

    const hasDisabled = some_default()(descendantKeys).call(descendantKeys, key => disabledKeys.has(key));

    if (!hasDisabled) {
      return targetStatus;
    }

    const nonDisabledKeys = filter_default()(descendantKeys).call(descendantKeys, key => !disabledKeys.has(key));

    const allChecked = every_default()(nonDisabledKeys).call(nonDisabledKeys, key => checkedKeys.has(key));

    return !allChecked;
  }

  handleNodeExpandInSearch(e, treeNode) {
    const {
      treeData,
      filteredShownKeys,
      keyEntities
    } = this.getStates();

    const showFilteredOnly = this._showFilteredOnly(); // clone otherwise will be modified unexpectedly


    const {
      filteredExpandedKeys
    } = this.getCopyFromState('filteredExpandedKeys');
    let motionType = 'show';
    const {
      eventKey,
      expanded,
      data
    } = treeNode; // debugger;

    if (!expanded) {
      filteredExpandedKeys.add(eventKey);
    } else if (filteredExpandedKeys.has(eventKey)) {
      filteredExpandedKeys.delete(eventKey);
      motionType = 'hide';
    } // cache prev flattenNodes, otherwise the calculation will remove hidden items


    this._adapter.cacheFlattenNodes(motionType === 'hide' && this._isAnimated());

    if (!this._isExpandControlled()) {
      // debugger;
      const flattenNodes = flattenTreeData(treeData, filteredExpandedKeys, showFilteredOnly && filteredShownKeys);
      const motionKeys = this._isAnimated() ? getMotionKeys(eventKey, filteredExpandedKeys, keyEntities) : [];
      const newState = {
        filteredExpandedKeys,
        flattenNodes,
        motionKeys: new set_default.a(motionKeys),
        motionType
      };

      this._adapter.updateState(newState);
    }

    this._adapter.notifyExpand(filteredExpandedKeys, {
      expanded: !expanded,
      node: data
    });
  }

  handleNodeExpand(e, treeNode) {
    // debugger;
    const {
      loadData
    } = this.getProps();
    const {
      inputValue,
      keyEntities
    } = this.getStates();
    const isSearching = Boolean(inputValue);

    if (!loadData && (!treeNode.children || !treeNode.children.length)) {
      return;
    }

    const isExpandControlled = this._isExpandControlled();

    if (isSearching && !isExpandControlled) {
      this.handleNodeExpandInSearch(e, treeNode);
      return;
    }

    const {
      treeData
    } = this.getStates(); // clone otherwise will be modified unexpectedly

    const {
      expandedKeys
    } = this.getCopyFromState('expandedKeys');
    let motionType = 'show';
    const {
      eventKey,
      expanded,
      data
    } = treeNode;

    if (!expanded) {
      expandedKeys.add(eventKey);
    } else if (expandedKeys.has(eventKey)) {
      expandedKeys.delete(eventKey);
      motionType = 'hide';
    }

    this._adapter.cacheFlattenNodes(motionType === 'hide' && this._isAnimated());

    if (!isExpandControlled) {
      // debugger;
      const flattenNodes = flattenTreeData(treeData, expandedKeys);
      const motionKeys = this._isAnimated() ? getMotionKeys(eventKey, expandedKeys, keyEntities) : [];
      const newState = {
        expandedKeys,
        flattenNodes,
        motionKeys: new set_default.a(motionKeys),
        motionType
      };

      this._adapter.updateState(newState);
    }

    this._adapter.notifyExpand(expandedKeys, {
      expanded: !expanded,
      node: data
    });
  }
  /**
   * The selected items that need to be displayed in the search box when obtaining a single selection
   */


  getRenderTextInSingle() {
    const {
      renderSelectedItem: propRenderSelectedItem,
      treeNodeLabelProp
    } = this.getProps();
    const {
      selectedKeys,
      keyEntities
    } = this.getStates();
    const renderSelectedItem = isFunction_default()(propRenderSelectedItem) ? propRenderSelectedItem : item => get_default()(item, treeNodeLabelProp, null);
    const item = selectedKeys.length && keyEntities[selectedKeys[0]] ? keyEntities[selectedKeys[0]].data : undefined;
    const renderText = item && treeNodeLabelProp in item ? renderSelectedItem(item) : null;
    return renderText;
  }
  /**
   * When the search box is on the trigger, the blur event handling method
   */


  handleInputTriggerBlur() {
    this._adapter.updateState({
      inputTriggerFocus: false
    });
  }
  /**
   * When the search box is on the trigger, the focus event processing method
   */


  handleInputTriggerFocus() {
    this.clearInput();

    this._adapter.updateState({
      inputTriggerFocus: true
    });
  }

  setLoadKeys(data, resolve) {
    this._adapter.updateLoadKeys(data, resolve);
  }

}
// EXTERNAL MODULE: ../semi-foundation/treeSelect/treeSelect.scss
var treeSelect = __webpack_require__("uw59");

// CONCATENATED MODULE: ./treeSelect/index.tsx











































const treeSelect_prefixcls = treeSelect_constants_cssClasses.PREFIX;
const prefixTree = treeSelect_constants_cssClasses.PREFIX_TREE;
const treeSelect_key = 0;

class treeSelect_TreeSelect extends baseComponent_BaseComponent {
  constructor(props) {
    var _context2;

    super(props);

    this.renderSuffix = () => {
      const {
        suffix
      } = this.props;
      const suffixWrapperCls = classnames_default()({
        ["".concat(treeSelect_prefixcls, "-suffix")]: true,
        ["".concat(treeSelect_prefixcls, "-suffix-text")]: suffix && isString_default()(suffix),
        ["".concat(treeSelect_prefixcls, "-suffix-icon")]: Object(_utils["e" /* isSemiIcon */])(suffix)
      });
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: suffixWrapperCls,
        "x-semi-prop": "suffix"
      }, suffix);
    };

    this.renderPrefix = () => {
      const {
        prefix,
        insetLabel,
        insetLabelId
      } = this.props;
      const labelNode = prefix || insetLabel;
      const prefixWrapperCls = classnames_default()({
        ["".concat(treeSelect_prefixcls, "-prefix")]: true,
        // to be doublechecked
        ["".concat(treeSelect_prefixcls, "-inset-label")]: insetLabel,
        ["".concat(treeSelect_prefixcls, "-prefix-text")]: labelNode && isString_default()(labelNode),
        ["".concat(treeSelect_prefixcls, "-prefix-icon")]: Object(_utils["e" /* isSemiIcon */])(labelNode)
      });
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: prefixWrapperCls,
        id: insetLabelId,
        "x-semi-prop": "prefix,insetLabel"
      }, labelNode);
    };

    this.renderContent = () => {
      const {
        dropdownMinWidth
      } = this.state;
      const {
        dropdownStyle,
        dropdownClassName
      } = this.props;

      const style = assign_default()({
        minWidth: dropdownMinWidth
      }, dropdownStyle);

      const popoverCls = classnames_default()(dropdownClassName, "".concat(treeSelect_prefixcls, "-popover"));
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: popoverCls,
        style: style
      }, this.renderTree());
    };

    this.removeTag = removedKey => {
      this.foundation.removeTag(removedKey);
    };

    this.handleClick = e => {
      this.foundation.handleClick(e);
    };
    /* istanbul ignore next */


    this.handleSelectionEnterPress = e => {
      this.foundation.handleSelectionEnterPress(e);
    };

    this.hasValue = () => {
      const {
        multiple,
        checkRelation
      } = this.props;
      const {
        realCheckedKeys,
        checkedKeys,
        selectedKeys
      } = this.state;
      let hasValue = false;

      if (multiple) {
        if (checkRelation === 'related') {
          hasValue = Boolean(checkedKeys.size);
        } else if (checkRelation === 'unRelated') {
          hasValue = Boolean(realCheckedKeys.size);
        }
      } else {
        hasValue = Boolean(selectedKeys.length);
      }

      return hasValue;
    };

    this.showClearBtn = () => {
      const {
        showClear,
        disabled,
        searchPosition
      } = this.props;
      const {
        inputValue,
        isOpen,
        isHovering
      } = this.state;
      const triggerSearchHasInputValue = searchPosition === treeSelect_constants_strings.SEARCH_POSITION_TRIGGER && inputValue;
      return showClear && (this.hasValue() || triggerSearchHasInputValue) && !disabled && (isOpen || isHovering);
    };

    this.renderTagList = () => {
      const {
        checkedKeys,
        keyEntities,
        disabledKeys,
        realCheckedKeys
      } = this.state;
      const {
        treeNodeLabelProp,
        leafOnly,
        disabled,
        disableStrictly,
        size,
        checkRelation,
        renderSelectedItem: propRenderSelectedItem
      } = this.props;
      const renderSelectedItem = isFunction_default()(propRenderSelectedItem) ? propRenderSelectedItem : item => ({
        isRenderInTag: true,
        content: get_default()(item, treeNodeLabelProp, null)
      });
      let renderKeys = [];

      if (checkRelation === 'related') {
        renderKeys = normalizeKeyList([...checkedKeys], keyEntities, leafOnly);
      } else if (checkRelation === 'unRelated' && keys_default()(keyEntities).length > 0) {
        renderKeys = [...realCheckedKeys];
      }

      const tagList = []; // eslint-disable-next-line @typescript-eslint/no-shadow

      for_each_default()(renderKeys).call(renderKeys, key => {
        const item = keyEntities[key].data;

        const onClose = (tagContent, e) => {
          if (e && typeof e.preventDefault === 'function') {
            // make sure that tag will not hidden immediately in controlled mode
            e.preventDefault();
          }

          this.removeTag(key);
        };

        const {
          content,
          isRenderInTag
        } = treeNodeLabelProp in item && item ? renderSelectedItem(item, {
          index: key,
          onClose
        }) : null;

        if (!content) {
          return;
        }

        const isDisabled = disabled || item.disabled || disableStrictly && disabledKeys.has(item.key);
        const tag = {
          closable: !isDisabled,
          color: 'white',
          visible: true,
          onClose,
          key,
          size: size === 'small' ? 'small' : 'large'
        };

        if (isRenderInTag) {
          // pass ReactNode list to tagList when using tagGroup custom mode
          tagList.push( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tag_Tag, assign_default()({}, tag), content));
        } else {
          tagList.push(content);
        }
      });

      return tagList;
    };
    /**
     * When single selection and the search box is on trigger, the items displayed in the rendered search box
     */


    this.renderSingleTriggerSearchItem = () => {
      const {
        placeholder,
        disabled
      } = this.props;
      const {
        inputTriggerFocus
      } = this.state;
      const renderText = this.foundation.getRenderTextInSingle();
      const spanCls = classnames_default()("".concat(treeSelect_prefixcls, "-selection-TriggerSearchItem"), {
        ["".concat(treeSelect_prefixcls, "-selection-TriggerSearchItem-placeholder")]: (inputTriggerFocus || !renderText) && !disabled,
        ["".concat(treeSelect_prefixcls, "-selection-TriggerSearchItem-disabled")]: disabled
      });
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: spanCls
      }, renderText ? renderText : placeholder);
    };
    /**
     * Single selection and the search box content rendered when the search box is on trigger
     */


    this.renderSingleTriggerSearch = () => {
      const {
        inputValue
      } = this.state;
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, !inputValue && this.renderSingleTriggerSearchItem(), this.renderInput());
    };

    this.renderSelectContent = () => {
      const {
        multiple,
        placeholder,
        maxTagCount,
        searchPosition,
        filterTreeNode
      } = this.props;
      const isTriggerPositionSearch = filterTreeNode && searchPosition === treeSelect_constants_strings.SEARCH_POSITION_TRIGGER; // searchPosition = trigger

      if (isTriggerPositionSearch) {
        return multiple ? this.renderTagInput() : this.renderSingleTriggerSearch();
      } // searchPosition = dropdown and single seleciton


      if (!multiple || !this.hasValue()) {
        const renderText = this.foundation.getRenderTextInSingle();
        const spanCls = classnames_default()({
          ["".concat(treeSelect_prefixcls, "-selection-placeholder")]: !renderText
        });
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
          className: spanCls
        }, renderText ? renderText : placeholder);
      } // searchPosition = dropdown and multiple seleciton


      const tagList = this.renderTagList(); // mode=custom to return tagList directly

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(group_TagGroup, {
        maxTagCount: maxTagCount,
        tagList: tagList,
        size: "large",
        mode: "custom"
      });
    };

    this.handleClear = e => {
      e && e.stopPropagation();
      this.foundation.handleClear(e);
    };
    /* istanbul ignore next */


    this.handleClearEnterPress = e => {
      e && e.stopPropagation();
      this.foundation.handleClearEnterPress(e);
    };

    this.handleMouseOver = e => {
      this.foundation.toggleHoverState(true);
    };

    this.handleMouseLeave = e => {
      this.foundation.toggleHoverState(false);
    };

    this.search = value => {
      const {
        isOpen
      } = this.state;

      if (!isOpen) {
        this.foundation.open();
      }

      this.foundation.handleInputChange(value);
    };

    this.close = () => {
      this.foundation.close(null);
    };

    this.renderArrow = () => {
      const showClearBtn = this.showClearBtn();
      const {
        arrowIcon
      } = this.props;

      if (showClearBtn) {
        return null;
      }

      return arrowIcon ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: classnames_default()("".concat(treeSelect_prefixcls, "-arrow")),
        "x-semi-prop": "arrowIcon"
      }, arrowIcon) : null;
    };

    this.renderClearBtn = () => {
      const showClearBtn = this.showClearBtn();
      const clearCls = classnames_default()("".concat(treeSelect_prefixcls, "-clearbtn"));

      if (showClearBtn) {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          role: 'button',
          tabIndex: 0,
          "aria-label": "Clear TreeSelect value",
          className: clearCls,
          onClick: this.handleClear,
          onKeyPress: this.handleClearEnterPress
        }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClear, null));
      }

      return null;
    };

    this.renderSelection = () => {
      const {
        disabled,
        multiple,
        filterTreeNode,
        validateStatus,
        prefix,
        suffix,
        style,
        size,
        insetLabel,
        className,
        placeholder,
        showClear,
        leafOnly,
        searchPosition,
        triggerRender
      } = this.props;
      const {
        isOpen,
        isInput,
        inputValue,
        selectedKeys,
        checkedKeys,
        keyEntities
      } = this.state;
      const filterable = Boolean(filterTreeNode);
      const useCustomTrigger = typeof triggerRender === 'function';
      const mouseEvent = showClear ? {
        onMouseEnter: e => this.handleMouseOver(e),
        onMouseLeave: e => this.handleMouseLeave(e)
      } : {};
      const isTriggerPositionSearch = searchPosition === treeSelect_constants_strings.SEARCH_POSITION_TRIGGER && filterable;

      const isEmptyTriggerSearch = isTriggerPositionSearch && isEmpty_default()(checkedKeys);

      const isValueTriggerSearch = isTriggerPositionSearch && !isEmpty_default()(checkedKeys);
      const classNames = useCustomTrigger ? classnames_default()(className) : classnames_default()(treeSelect_prefixcls, {
        ["".concat(treeSelect_prefixcls, "-focus")]: isOpen && !isInput,
        ["".concat(treeSelect_prefixcls, "-disabled")]: disabled,
        ["".concat(treeSelect_prefixcls, "-single")]: !multiple,
        ["".concat(treeSelect_prefixcls, "-multiple")]: multiple,
        ["".concat(treeSelect_prefixcls, "-multiple-tagInput-empty")]: multiple && isEmptyTriggerSearch,
        ["".concat(treeSelect_prefixcls, "-multiple-tagInput-notEmpty")]: multiple && isValueTriggerSearch,
        ["".concat(treeSelect_prefixcls, "-filterable")]: filterable,
        ["".concat(treeSelect_prefixcls, "-error")]: validateStatus === 'error',
        ["".concat(treeSelect_prefixcls, "-warning")]: validateStatus === 'warning',
        ["".concat(treeSelect_prefixcls, "-small")]: size === 'small',
        ["".concat(treeSelect_prefixcls, "-large")]: size === 'large',
        ["".concat(treeSelect_prefixcls, "-with-prefix")]: prefix || insetLabel,
        ["".concat(treeSelect_prefixcls, "-with-suffix")]: suffix,
        ["".concat(treeSelect_prefixcls, "-with-suffix")]: suffix
      }, className);
      const triggerRenderKeys = multiple ? normalizeKeyList([...checkedKeys], keyEntities, leafOnly) : selectedKeys;
      const inner = useCustomTrigger ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(trigger_0, {
        inputValue: inputValue,
        // eslint-disable-next-line @typescript-eslint/no-shadow
        value: map_default()(triggerRenderKeys).call(triggerRenderKeys, key => get_default()(keyEntities, [key, 'data'])),
        disabled: disabled,
        placeholder: placeholder,
        onClear: this.handleClear,
        componentName: 'TreeSelect',
        triggerRender: triggerRender,
        componentProps: assign_default()({}, this.props)
      }) : [/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
        key: 'prefix'
      }, prefix || insetLabel ? this.renderPrefix() : null), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
        key: 'selection'
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(treeSelect_prefixcls, "-selection")
      }, this.renderSelectContent())), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
        key: 'suffix'
      }, suffix ? this.renderSuffix() : null), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
        key: 'clearBtn'
      }, showClear || isTriggerPositionSearch && inputValue ? this.renderClearBtn() : null), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_["Fragment"], {
        key: 'arrow'
      }, this.renderArrow())];
      const tabIndex = disabled ? null : 0;
      /**
       * Reasons for disabling the a11y eslint rule:
       * The following attributes(aria-controls,aria-expanded) will be automatically added by Tooltip, no need to declare here
       */

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({
        // eslint-disable-next-line jsx-a11y/role-has-required-aria-props
        role: 'combobox',
        "aria-disabled": disabled,
        "aria-haspopup": "tree",
        tabIndex: tabIndex,
        className: classNames,
        style: style,
        ref: this.triggerRef,
        onClick: this.handleClick,
        onKeyPress: this.handleSelectionEnterPress,
        "aria-invalid": this.props['aria-invalid'],
        "aria-errormessage": this.props['aria-errormessage'],
        "aria-label": this.props['aria-label'],
        "aria-labelledby": this.props['aria-labelledby'],
        "aria-describedby": this.props['aria-describedby'],
        "aria-required": this.props['aria-required']
      }, mouseEvent), inner);
    }; // eslint-disable-next-line @typescript-eslint/no-shadow


    this.renderTagItem = (key, idx) => {
      var _context;

      const {
        keyEntities,
        disabledKeys
      } = this.state;
      const {
        size,
        leafOnly,
        disabled,
        disableStrictly,
        renderSelectedItem: propRenderSelectedItem,
        treeNodeLabelProp
      } = this.props;
      const keyList = normalizeKeyList([key], keyEntities, leafOnly);

      const nodes = map_default()(keyList).call(keyList, i => keyEntities[i].data);

      const value = getValueOrKey(nodes);
      const tagCls = classnames_default()("".concat(treeSelect_prefixcls, "-selection-tag"), {
        ["".concat(treeSelect_prefixcls, "-selection-tag-disabled")]: disabled
      });
      const nodeHaveData = !isEmpty_default()(nodes) && !isEmpty_default()(nodes[0]);
      const isDisableStrictlyNode = disableStrictly && nodeHaveData && disabledKeys.has(nodes[0].key);
      const closable = nodeHaveData && !nodes[0].disabled && !disabled && !isDisableStrictlyNode;

      const onClose = (tagChildren, e) => {
        // When value has not changed, prevent clicking tag closeBtn to close tag
        e.preventDefault();
        this.removeTag(key);
      };

      const tagProps = {
        size: size === 'small' ? 'small' : 'large',
        key: concat_default()(_context = "tag-".concat(value, "-")).call(_context, idx),
        color: 'white',
        className: tagCls,
        closable,
        onClose
      };
      const item = nodes[0];
      const renderSelectedItem = isFunction_default()(propRenderSelectedItem) ? propRenderSelectedItem : selectedItem => ({
        isRenderInTag: true,
        content: get_default()(selectedItem, treeNodeLabelProp, null)
      });

      if (isFunction_default()(renderSelectedItem)) {
        const {
          content,
          isRenderInTag
        } = treeNodeLabelProp in item && item ? renderSelectedItem(item, {
          index: idx,
          onClose
        }) : null;

        if (isRenderInTag) {
          return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tag_Tag, assign_default()({}, tagProps), content);
        } else {
          return content;
        }
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tag_Tag, assign_default()({}, tagProps), value);
    };

    this.renderTagInput = () => {
      const {
        leafOnly,
        disabled,
        size,
        searchAutoFocus,
        placeholder,
        maxTagCount,
        checkRelation
      } = this.props;
      const {
        keyEntities,
        checkedKeys,
        inputValue,
        realCheckedKeys
      } = this.state;
      let keyList = [];

      if (checkRelation === 'related') {
        keyList = normalizeKeyList(checkedKeys, keyEntities, leafOnly);
      } else if (checkRelation === 'unRelated') {
        keyList = [...realCheckedKeys];
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tagInput_0, {
        maxTagCount: maxTagCount,
        disabled: disabled,
        onInputChange: v => this.search(v),
        ref: this.tagInputRef,
        placeholder: placeholder,
        value: keyList,
        inputValue: inputValue,
        size: size,
        autoFocus: searchAutoFocus,
        renderTagItem: (itemKey, index) => this.renderTagItem(itemKey, index),
        onRemove: itemKey => this.removeTag(itemKey)
      });
    }; // render Tree


    this.renderInput = () => {
      const {
        searchPlaceholder,
        searchRender,
        showSearchClear,
        searchPosition,
        searchAutoFocus,
        multiple,
        disabled
      } = this.props;
      const isDropdownPositionSearch = searchPosition === treeSelect_constants_strings.SEARCH_POSITION_DROPDOWN;
      const inputcls = classnames_default()({
        ["".concat(prefixTree, "-input")]: isDropdownPositionSearch,
        ["".concat(treeSelect_prefixcls, "-inputTrigger")]: !isDropdownPositionSearch
      });
      const {
        inputValue
      } = this.state;
      const baseInputProps = {
        value: inputValue,
        className: inputcls,
        onChange: value => this.search(value)
      };
      const inputDropdownProps = {
        showClear: showSearchClear,
        prefix: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconSearch, null)
      };
      const inputTriggerProps = {
        onFocus: e => this.foundation.handleInputTriggerFocus(),
        onBlur: e => this.foundation.handleInputTriggerBlur(),
        disabled
      };
      const realInputProps = isDropdownPositionSearch ? inputDropdownProps : inputTriggerProps;
      const wrapperCls = classnames_default()({
        ["".concat(prefixTree, "-search-wrapper")]: isDropdownPositionSearch,
        ["".concat(treeSelect_prefixcls, "-triggerSingleSearch-wrapper")]: !isDropdownPositionSearch && !multiple
      });
      const useCusSearch = typeof searchRender === 'function' || typeof searchRender === 'boolean';

      if (useCusSearch && !searchRender) {
        return null;
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: wrapperCls
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
        componentName: "TreeSelect"
      }, locale => {
        const placeholder = isDropdownPositionSearch ? searchPlaceholder || locale.searchPlaceholder : '';

        if (useCusSearch) {
          return searchRender(assign_default()(assign_default()(assign_default()({}, realInputProps), baseInputProps), {
            placeholder
          }));
        }

        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(input_0, assign_default()({
          "aria-label": 'Filter TreeSelect item',
          ref: this.inputRef,
          autofocus: searchAutoFocus,
          placeholder: placeholder
        }, baseInputProps, realInputProps));
      }));
    };

    this.renderEmpty = () => {
      const {
        emptyContent
      } = this.props;

      if (emptyContent) {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(treeNode_TreeNode, {
          empty: true,
          emptyContent: this.props.emptyContent
        });
      } else {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
          componentName: "Tree"
        }, locale => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(treeNode_TreeNode, {
          empty: true,
          emptyContent: locale.emptyText
        }));
      }
    };

    this.onNodeLoad = data => new promise_default.a(resolve => this.foundation.setLoadKeys(data, resolve));

    this.onNodeSelect = (e, treeNode) => {
      this.foundation.handleNodeSelect(e, treeNode);
    };

    this.onNodeCheck = (e, treeNode) => {
      this.foundation.handleNodeSelect(e, treeNode);
    };

    this.onNodeExpand = (e, treeNode) => {
      this.foundation.handleNodeExpand(e, treeNode);
    };

    this.getTreeNodeRequiredProps = () => {
      const {
        expandedKeys,
        selectedKeys,
        checkedKeys,
        halfCheckedKeys,
        keyEntities,
        filteredKeys
      } = this.state;
      return {
        expandedKeys: expandedKeys || new set_default.a(),
        selectedKeys: selectedKeys || [],
        checkedKeys: checkedKeys || new set_default.a(),
        halfCheckedKeys: halfCheckedKeys || new set_default.a(),
        filteredKeys: filteredKeys || new set_default.a(),
        keyEntities
      };
    };

    this.getTreeNodeKey = treeNode => {
      const {
        data
      } = treeNode; // eslint-disable-next-line @typescript-eslint/no-shadow

      const {
        key
      } = data;
      return key;
    };
    /* Event handler function after popover is closed */


    this.handlePopoverClose = isVisible => {
      const {
        filterTreeNode
      } = this.props;

      if (isVisible === false && Boolean(filterTreeNode)) {
        this.foundation.clearInput();
      }
    };

    this.renderTreeNode = (treeNode, ind, style) => {
      const {
        data
      } = treeNode; // eslint-disable-next-line @typescript-eslint/no-shadow

      const {
        key
      } = data;
      const treeNodeProps = this.foundation.getTreeNodeProps(key);

      if (!treeNodeProps) {
        return null;
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(treeNode_TreeNode, assign_default()({}, treeNodeProps, data, {
        key: key,
        data: data,
        style: style
      }));
    };

    this.itemKey = (index, data) => {
      // Find the item at the specified index.
      const item = data[index]; // Return a value that uniquely identifies this item.

      return item.key;
    };

    this.renderNodeList = () => {
      const {
        flattenNodes,
        motionKeys,
        motionType,
        filteredKeys
      } = this.state;
      const {
        direction
      } = this.context;
      const {
        virtualize,
        motionExpand
      } = this.props;
      const isExpandControlled = ('expandedKeys' in this.props);

      if (!virtualize || isEmpty_default()(virtualize)) {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(nodeList_NodeList, {
          flattenNodes: flattenNodes,
          flattenList: this._flattenNodes,
          motionKeys: motionExpand ? motionKeys : new set_default.a([]),
          motionType: motionType,
          // When motionKeys is empty, but filteredKeys is not empty (that is, the search hits), this situation should be distinguished from ordinary motionKeys
          searchTargetIsDeep: isExpandControlled && motionExpand && isEmpty_default()(motionKeys) && !isEmpty_default()(filteredKeys),
          onMotionEnd: this.onMotionEnd,
          renderTreeNode: this.renderTreeNode
        });
      }

      const option = _ref => {
        let {
          index,
          style,
          data
        } = _ref;
        return this.renderTreeNode(data[index], index, style);
      };

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(autoSizer_AutoSizer, {
        defaultHeight: virtualize.height,
        defaultWidth: virtualize.width
      }, _ref2 => {
        let {
          height,
          width
        } = _ref2;
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(FixedSizeList, {
          itemCount: flattenNodes.length,
          itemSize: virtualize.itemSize,
          height: height,
          width: width,
          // @ts-ignore avoid strict check of itemKey
          itemKey: this.itemKey,
          itemData: flattenNodes,
          className: "".concat(prefixTree, "-virtual-list"),
          style: {
            direction
          }
        }, option);
      });
    };

    this.renderTree = () => {
      const {
        keyEntities,
        motionKeys,
        motionType,
        inputValue,
        filteredKeys,
        flattenNodes,
        checkedKeys,
        realCheckedKeys
      } = this.state;
      const {
        loadData,
        filterTreeNode,
        disabled,
        multiple,
        showFilteredOnly,
        motionExpand,
        outerBottomSlot,
        outerTopSlot,
        expandAction,
        labelEllipsis,
        virtualize,
        optionListStyle,
        searchPosition,
        renderLabel,
        renderFullLabel,
        checkRelation
      } = this.props;
      const wrapperCls = classnames_default()("".concat(prefixTree, "-wrapper"));
      const listCls = classnames_default()("".concat(prefixTree, "-option-list"), {
        ["".concat(prefixTree, "-option-list-block")]: true
      });
      const searchNoRes = Boolean(inputValue) && !filteredKeys.size;
      const noData = isEmpty_default()(flattenNodes) || showFilteredOnly && searchNoRes;
      const isDropdownPositionSearch = searchPosition === treeSelect_constants_strings.SEARCH_POSITION_DROPDOWN;
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(treeContext.Provider, {
        value: {
          loadData,
          treeDisabled: disabled,
          motion: motionExpand,
          motionKeys,
          motionType,
          expandAction,
          filterTreeNode,
          keyEntities,
          onNodeClick: this.onNodeClick,
          onNodeDoubleClick: this.onNodeDoubleClick,
          // tree node will call this function when treeNode is right clicked
          onNodeRightClick: noop_default.a,
          onNodeExpand: this.onNodeExpand,
          onNodeSelect: this.onNodeSelect,
          onNodeCheck: this.onNodeCheck,
          renderTreeNode: this.renderTreeNode,
          multiple,
          showFilteredOnly,
          isSearching: Boolean(inputValue),
          renderLabel,
          renderFullLabel,
          labelEllipsis: typeof labelEllipsis === 'undefined' ? virtualize : labelEllipsis
        }
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: wrapperCls
      }, outerTopSlot, !outerTopSlot && filterTreeNode && isDropdownPositionSearch && this.renderInput(), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: listCls,
        role: "tree",
        "aria-multiselectable": multiple ? true : false,
        style: optionListStyle
      }, noData ? this.renderEmpty() : multiple ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(checkboxGroup, {
        value: from_default()(checkRelation === 'related' ? checkedKeys : realCheckedKeys)
      }, this.renderNodeList()) : this.renderNodeList()), outerBottomSlot));
    };

    this.state = {
      inputTriggerFocus: false,
      isOpen: false,
      isInput: false,
      rePosKey: treeSelect_key,
      dropdownMinWidth: null,
      inputValue: '',
      keyEntities: {},
      treeData: [],
      flattenNodes: [],
      selectedKeys: [],
      checkedKeys: new set_default.a(),
      halfCheckedKeys: new set_default.a(),
      realCheckedKeys: new set_default.a([]),
      disabledKeys: new set_default.a(),
      motionKeys: new set_default.a([]),
      motionType: 'hide',
      expandedKeys: new set_default.a(props.expandedKeys),
      filteredKeys: new set_default.a(),
      filteredExpandedKeys: new set_default.a(),
      filteredShownKeys: new set_default.a(),
      prevProps: null,
      isHovering: false,
      cachedKeyValuePairs: {},
      loadedKeys: new set_default.a(),
      loadingKeys: new set_default.a()
    };
    this.inputRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.tagInputRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.triggerRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.optionsRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.clickOutsideHandler = null;
    this.foundation = new foundation_TreeSelectFoundation(this.adapter);
    this.treeSelectID = slice_default()(_context2 = Math.random().toString(36)).call(_context2, 2);

    this.onMotionEnd = () => {
      this.adapter.rePositionDropdown();
    };
  } // eslint-disable-next-line max-lines-per-function


  static getDerivedStateFromProps(props, prevState) {
    const {
      prevProps,
      rePosKey
    } = prevState;

    const needUpdate = name => !prevProps && name in props || prevProps && !isEqual_default()(prevProps[name], props[name]);

    let treeData;
    const withObject = props.onChangeWithObject;
    let keyEntities = prevState.keyEntities || {};
    let valueEntities = prevState.cachedKeyValuePairs || {};
    const newState = {
      prevProps: props
    }; // TreeNode

    if (needUpdate('treeData')) {
      treeData = props.treeData;
      newState.treeData = treeData;
      const entitiesMap = convertDataToEntities(treeData);
      newState.keyEntities = assign_default()({}, entitiesMap.keyEntities);
      keyEntities = newState.keyEntities;
      newState.cachedKeyValuePairs = assign_default()({}, entitiesMap.valueEntities);
      valueEntities = newState.cachedKeyValuePairs;
    } // if treeData keys changes, we won't show animation


    if (treeData && props.motion && !isEqual_default()(keys_default()(newState.keyEntities), keys_default()(prevState.keyEntities))) {
      if (prevProps && props.motion) {
        newState.motionKeys = new set_default.a([]);
        newState.motionType = null;
      }
    }

    const expandAllWhenDataChange = needUpdate('treeData') && props.expandAll; // expandedKeys

    if (needUpdate('expandedKeys') || prevProps && needUpdate('autoExpandParent')) {
      newState.expandedKeys = calcExpandedKeys(props.expandedKeys, keyEntities, props.autoExpandParent || !prevProps); // only show animation when treeData does not change

      if (prevProps && props.motion && !treeData) {
        const {
          motionKeys,
          motionType
        } = calcMotionKeys(prevState.expandedKeys, newState.expandedKeys, keyEntities);
        newState.motionKeys = new set_default.a(motionKeys);
        newState.motionType = motionType;
      }
    } else if (!prevProps && (props.defaultExpandAll || props.expandAll) || expandAllWhenDataChange) {
      newState.expandedKeys = new set_default.a(keys_default()(keyEntities));
    } else if (!prevProps && props.defaultExpandedKeys) {
      newState.expandedKeys = calcExpandedKeys(props.defaultExpandedKeys, keyEntities);
    } else if (!prevProps && props.defaultValue) {
      newState.expandedKeys = calcExpandedKeysForValues(normalizeValue(props.defaultValue, withObject), keyEntities, props.multiple, valueEntities);
    } else if (!prevProps && props.value) {
      newState.expandedKeys = calcExpandedKeysForValues(normalizeValue(props.value, withObject), keyEntities, props.multiple, valueEntities);
    } // flattenNodes


    if (treeData || needUpdate('expandedKeys')) {
      const flattenNodes = flattenTreeData(treeData || prevState.treeData, newState.expandedKeys || prevState.expandedKeys);
      newState.flattenNodes = flattenNodes;
    } // selectedKeys: single mode controlled


    const isMultiple = props.multiple;

    if (!isMultiple) {
      if (needUpdate('value')) {
        newState.selectedKeys = findKeysForValues(normalizeValue(props.value, withObject), valueEntities, isMultiple);
      } else if (!prevProps && props.defaultValue) {
        newState.selectedKeys = findKeysForValues(normalizeValue(props.defaultValue, withObject), valueEntities, isMultiple);
      } else if (treeData) {
        // If `treeData` changed, we also need check it
        if (props.value) {
          newState.selectedKeys = findKeysForValues(normalizeValue(props.value, withObject) || '', valueEntities, isMultiple);
        } else {
          newState.selectedKeys = updateKeys(prevState.selectedKeys, keyEntities);
        }
      }
    } else {
      // checkedKeys: multiple mode controlled || data changed
      let checkedKeyValues;

      if (needUpdate('value')) {
        checkedKeyValues = findKeysForValues(normalizeValue(props.value, withObject), valueEntities, isMultiple);
      } else if (!prevProps && props.defaultValue) {
        checkedKeyValues = findKeysForValues(normalizeValue(props.defaultValue, withObject), valueEntities, isMultiple);
      } else if (treeData) {
        // If `treeData` changed, we also need check it
        if (props.value) {
          checkedKeyValues = findKeysForValues(normalizeValue(props.value, withObject) || [], valueEntities, isMultiple);
        } else {
          checkedKeyValues = updateKeys(prevState.checkedKeys, keyEntities);
        }
      }

      if (checkedKeyValues) {
        if (props.checkRelation === 'unRelated') {
          newState.realCheckedKeys = new set_default.a(checkedKeyValues);
        } else if (props.checkRelation === 'related') {
          const {
            checkedKeys,
            halfCheckedKeys
          } = calcCheckedKeys(checkedKeyValues, keyEntities);
          newState.checkedKeys = checkedKeys;
          newState.halfCheckedKeys = halfCheckedKeys;
        }
      }
    } // loadedKeys


    if (needUpdate('loadedKeys')) {
      newState.loadedKeys = new set_default.a(props.loadedKeys);
    } // ================== rePosKey ==================


    if (needUpdate('treeData') || needUpdate('value')) {
      newState.rePosKey = rePosKey + 1;
    } // ================ disableStrictly =================


    if (treeData && props.disableStrictly && props.checkRelation === 'related') {
      newState.disabledKeys = calcDisabledKeys(keyEntities);
    }

    return newState;
  }

  get adapter() {
    var _this = this;

    const filterAdapter = {
      updateInputValue: value => {
        this.setState({
          inputValue: value
        });
      }
    };
    const treeSelectAdapter = {
      registerClickOutsideHandler: cb => {
        const clickOutsideHandler = e => {
          const optionInstance = this.optionsRef && this.optionsRef.current;
          const triggerDom = this.triggerRef && this.triggerRef.current; // eslint-disable-next-line

          const optionsDom = external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default.a.findDOMNode(optionInstance);
          const target = e.target;

          if (optionsDom && (!optionsDom.contains(target) || !optionsDom.contains(target.parentNode)) && triggerDom && !triggerDom.contains(target)) {
            cb(e);
          }
        };

        this.clickOutsideHandler = clickOutsideHandler;
        document.addEventListener('mousedown', clickOutsideHandler, false);
      },
      unregisterClickOutsideHandler: () => {
        document.removeEventListener('mousedown', this.clickOutsideHandler, false);
        this.clickOutsideHandler = null;
      },
      rePositionDropdown: () => {
        let {
          rePosKey
        } = this.state;
        rePosKey = rePosKey + 1;
        this.setState({
          rePosKey
        });
      }
    };
    const treeAdapter = {
      updateState: states => {
        this.setState(assign_default()({}, states));
      },
      notifySelect: (selectKey, bool, node) => {
        this.props.onSelect && this.props.onSelect(selectKey, bool, node);
      },
      notifySearch: (input, filteredExpandedKeys) => {
        this.props.onSearch && this.props.onSearch(input, filteredExpandedKeys);
      },
      cacheFlattenNodes: bool => {
        this._flattenNodes = bool ? treeUtil_cloneDeep(this.state.flattenNodes) : null;
      },
      notifyLoad: (newLoadedKeys, data) => {
        const {
          onLoad
        } = this.props;
        isFunction_default()(onLoad) && onLoad(newLoadedKeys, data);
      }
    };
    return assign_default()(assign_default()(assign_default()(assign_default()(assign_default()({}, super.adapter), filterAdapter), treeSelectAdapter), treeAdapter), {
      updateLoadKeys: (data, resolve) => {
        this.setState(_ref3 => {
          let {
            loadedKeys,
            loadingKeys
          } = _ref3;
          return this.foundation.handleNodeLoad(loadedKeys, loadingKeys, data, resolve);
        });
      },
      updateState: states => {
        this.setState(assign_default()({}, states));
      },
      openMenu: () => {
        this.setState({
          isOpen: true
        }, () => {
          this.props.onVisibleChange(true);
        });
      },
      closeMenu: cb => {
        this.setState({
          isOpen: false
        }, () => {
          cb && cb();
          this.props.onVisibleChange(false);
        });
      },
      getTriggerWidth: () => {
        const el = this.triggerRef.current;
        return el && el.getBoundingClientRect().width;
      },
      setOptionWrapperWidth: width => {
        this.setState({
          dropdownMinWidth: width
        });
      },
      notifyChange: (value, node, e) => {
        this.props.onChange && this.props.onChange(value, node, e);
      },
      notifyChangeWithObject: (node, e) => {
        this.props.onChange && this.props.onChange(node, e);
      },
      notifyExpand: (expandedKeys, _ref4) => {
        let {
          expanded: bool,
          node
        } = _ref4;
        this.props.onExpand && this.props.onExpand([...expandedKeys], {
          expanded: bool,
          node
        });

        if (bool && this.props.loadData) {
          this.onNodeLoad(node);
        }
      },
      notifyFocus: function () {
        _this.props.onFocus && _this.props.onFocus(...arguments);
      },
      notifyBlur: function () {
        _this.props.onBlur && _this.props.onBlur(...arguments);
      },
      toggleHovering: bool => {
        this.setState({
          isHovering: bool
        });
      },
      updateInputFocus: bool => {} // eslint-disable-line

    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  render() {
    const content = this.renderContent();
    const {
      motion,
      zIndex,
      mouseLeaveDelay,
      mouseEnterDelay,
      autoAdjustOverflow,
      stopPropagation,
      getPopupContainer
    } = this.props;
    const {
      isOpen,
      rePosKey
    } = this.state;
    const selection = this.renderSelection();
    const pos = 'bottomLeft';
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(popover_0, {
      stopPropagation: stopPropagation,
      getPopupContainer: getPopupContainer,
      zIndex: zIndex,
      motion: motion,
      ref: this.optionsRef,
      content: content,
      visible: isOpen,
      trigger: "custom",
      rePosKey: rePosKey,
      position: pos,
      autoAdjustOverflow: autoAdjustOverflow,
      mouseLeaveDelay: mouseLeaveDelay,
      mouseEnterDelay: mouseEnterDelay,
      onVisibleChange: this.handlePopoverClose
    }, selection);
  }

}

treeSelect_TreeSelect.contextType = configProvider_context;
treeSelect_TreeSelect.propTypes = {
  'aria-describedby': prop_types_default.a.string,
  'aria-errormessage': prop_types_default.a.string,
  'aria-invalid': prop_types_default.a.bool,
  'aria-labelledby': prop_types_default.a.string,
  'aria-required': prop_types_default.a.bool,
  loadedKeys: prop_types_default.a.arrayOf(prop_types_default.a.string),
  loadData: prop_types_default.a.func,
  onLoad: prop_types_default.a.func,
  arrowIcon: prop_types_default.a.node,
  defaultOpen: prop_types_default.a.bool,
  defaultValue: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.array]),
  defaultExpandAll: prop_types_default.a.bool,
  defaultExpandedKeys: prop_types_default.a.array,
  expandAll: prop_types_default.a.bool,
  disabled: prop_types_default.a.bool,
  disableStrictly: prop_types_default.a.bool,
  // Whether to turn on the input box filtering function, when it is a function, it represents a custom filtering function
  filterTreeNode: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.bool]),
  multiple: prop_types_default.a.bool,
  searchPlaceholder: prop_types_default.a.string,
  searchAutoFocus: prop_types_default.a.bool,
  virtualize: prop_types_default.a.object,
  treeNodeFilterProp: prop_types_default.a.string,
  onChange: prop_types_default.a.func,
  onSearch: prop_types_default.a.func,
  onSelect: prop_types_default.a.func,
  onExpand: prop_types_default.a.func,
  onChangeWithObject: prop_types_default.a.bool,
  onBlur: prop_types_default.a.func,
  onFocus: prop_types_default.a.func,
  value: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number, prop_types_default.a.array, prop_types_default.a.object]),
  expandedKeys: prop_types_default.a.array,
  autoExpandParent: prop_types_default.a.bool,
  showClear: prop_types_default.a.bool,
  showSearchClear: prop_types_default.a.bool,
  autoAdjustOverflow: prop_types_default.a.bool,
  showFilteredOnly: prop_types_default.a.bool,
  motionExpand: prop_types_default.a.bool,
  emptyContent: prop_types_default.a.node,
  leafOnly: prop_types_default.a.bool,
  treeData: prop_types_default.a.arrayOf(prop_types_default.a.shape({
    key: prop_types_default.a.string.isRequired,
    value: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.number]),
    label: prop_types_default.a.any
  })),
  dropdownClassName: prop_types_default.a.string,
  dropdownStyle: prop_types_default.a.object,
  motion: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.object, prop_types_default.a.func]),
  placeholder: prop_types_default.a.string,
  maxTagCount: prop_types_default.a.number,
  size: prop_types_default.a.oneOf(treeSelect_constants_strings.SIZE_SET),
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  treeNodeLabelProp: prop_types_default.a.string,
  suffix: prop_types_default.a.node,
  prefix: prop_types_default.a.node,
  insetLabel: prop_types_default.a.node,
  insetLabelId: prop_types_default.a.string,
  zIndex: prop_types_default.a.number,
  getPopupContainer: prop_types_default.a.func,
  dropdownMatchSelectWidth: prop_types_default.a.bool,
  validateStatus: prop_types_default.a.oneOf(treeSelect_constants_strings.STATUS),
  mouseEnterDelay: prop_types_default.a.number,
  mouseLeaveDelay: prop_types_default.a.number,
  triggerRender: prop_types_default.a.func,
  stopPropagation: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.string]),
  outerBottomSlot: prop_types_default.a.node,
  outerTopSlot: prop_types_default.a.node,
  onVisibleChange: prop_types_default.a.func,
  expandAction: prop_types_default.a.oneOf(['click', 'doubleClick', false]),
  searchPosition: prop_types_default.a.oneOf([treeSelect_constants_strings.SEARCH_POSITION_DROPDOWN, treeSelect_constants_strings.SEARCH_POSITION_TRIGGER]),
  clickToHide: prop_types_default.a.bool,
  renderLabel: prop_types_default.a.func,
  renderFullLabel: prop_types_default.a.func,
  labelEllipsis: prop_types_default.a.bool,
  optionListStyle: prop_types_default.a.object,
  searchRender: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.bool]),
  renderSelectedItem: prop_types_default.a.func,
  checkRelation: prop_types_default.a.string,
  'aria-label': prop_types_default.a.string
};
treeSelect_TreeSelect.defaultProps = {
  searchPosition: treeSelect_constants_strings.SEARCH_POSITION_DROPDOWN,
  arrowIcon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconChevronDown, null),
  autoExpandParent: false,
  autoAdjustOverflow: true,
  stopPropagation: true,
  motion: true,
  motionExpand: true,
  expandAll: false,
  zIndex: constants_numbers.DEFAULT_Z_INDEX,
  disableStrictly: false,
  multiple: false,
  filterTreeNode: false,
  size: 'default',
  treeNodeFilterProp: 'label',
  onChangeWithObject: false,
  treeNodeLabelProp: 'label',
  dropdownMatchSelectWidth: true,
  defaultOpen: false,
  showSearchClear: true,
  showClear: false,
  onVisibleChange: noop_default.a,
  expandAction: false,
  clickToHide: true,
  searchAutoFocus: false,
  checkRelation: 'related',
  'aria-label': 'TreeSelect'
};
/* harmony default export */ var treeSelect_0 = (treeSelect_TreeSelect);
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/url.js
var core_js_stable_url = __webpack_require__("QjT4");
var url_default = /*#__PURE__*/__webpack_require__.n(core_js_stable_url);

// CONCATENATED MODULE: ../semi-foundation/utils/isObject.ts
function isObject_isObject(obj) {
  return obj !== null && typeof obj === 'object';
}
// CONCATENATED MODULE: ../semi-foundation/utils/isPromise.ts

function isPromise(value) {
  return isObject_isObject(value) && typeof value.then === 'function';
}
// CONCATENATED MODULE: ../semi-foundation/upload/constants.ts

const upload_constants_PREFIX = "".concat(BASE_CLASS_PREFIX, "-upload");
const FILE_LIST_PIC = 'picture';
const FILE_LIST_DEFAULT = 'list';
const PROGRESS_COEFFICIENT = 0.95;
const upload_constants_cssClasses = {
  PREFIX: upload_constants_PREFIX,
  // WRAPPER: `${PREFIX}-wrapper`,
  LIST: "".concat(upload_constants_PREFIX, "-list")
};
const TRIGGER_AUTO = 'auto';
const TRIGGER_CUSTOM = 'custom';
const upload_constants_strings = {
  FILE_STATUS_UPLOADING: 'uploading',
  FILE_STATUS_SUCCESS: 'success',
  FILE_STATUS_UPLOAD_FAIL: 'uploadFail',
  FILE_STATUS_VALIDATING: 'validating',
  FILE_STATUS_VALID_FAIL: 'validateFail',
  FILE_STATUS_WAIT_UPLOAD: 'wait',
  FILE_LIST_PIC,
  FILE_LIST_DEFAULT,
  LIST_TYPE: [FILE_LIST_PIC, FILE_LIST_DEFAULT],
  imageTypes: ['image', 'webp', 'png', 'svg', 'gif', 'jpg', 'jpeg', 'bmp', 'dpg'],
  DRAG_AREA_DEFAULT: 'default',
  DRAG_AREA_LEGAL: 'legal',
  DRAG_AREA_ILLEGAL: 'illegal',
  TRIGGER_AUTO,
  TRIGGER_CUSTOM,
  UPLOAD_TRIGGER: [TRIGGER_AUTO, TRIGGER_CUSTOM],
  VALIDATE_STATUS: VALIDATE_STATUS,
  PROMPT_POSITION: ['left', 'right', 'bottom']
};
const upload_constants_numbers = {
  PROGRESS_COEFFICIENT
};

// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/@babel/runtime-corejs3/core-js-stable/object/define-properties.js
var define_properties = __webpack_require__("hqFE");
var define_properties_default = /*#__PURE__*/__webpack_require__.n(define_properties);

// CONCATENATED MODULE: ../semi-foundation/upload/utils.ts







var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = promise_default.a))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const byteKB = 1024;
const byteMB = 1048576;
function getFileSize(number) {
  if (number < byteKB) {
    return "".concat((number / byteKB).toFixed(2), "KB");
  } else if (number >= byteKB && number < byteMB) {
    return "".concat((number / byteKB).toFixed(1), "KB");
  } else if (number >= byteMB) {
    return "".concat((number / byteMB).toFixed(1), "MB");
  }

  return undefined;
}
function endsWith(str, suffix) {
  return index_of_default()(str).call(str, suffix, str.length - suffix.length) !== -1;
}
function loopFiles(item) {
  return __awaiter(this, void 0, void 0, function* () {
    return new promise_default.a((res, rej) => {
      const dirReader = item.createReader();
      let fileList = [];

      function sequence() {
        dirReader.readEntries(entries => {
          const entryList = slice_default()(Array.prototype).apply(entries);

          fileList = concat_default()(fileList).call(fileList, entryList); // Check if all the file has been viewed

          const isFinished = !entryList.length;

          if (isFinished) {
            res(fileList);
          } else {
            sequence();
          }
        }, rej);
      }

      sequence();
    });
  });
}
function mapFileTree(items) {
  return __awaiter(this, void 0, void 0, function* () {
    const promises = [];

    const _traverseFileTree = (item, path) => __awaiter(this, void 0, void 0, function* () {
      path = path || ''; //@ts-ignore add path property into item

      item.path = path;

      if (item.isFile) {
        promises.push(new promise_default.a((res, rej) => {
          item.file(file => {
            if (item.fullPath && !file.webkitRelativePath) {
              // This file is provided to the user based on the relative path of the drag and drop folder
              // If you drag the Upload folder, the path of the internal file may be Upload/File/a.png, etc
              define_properties_default()(file, {
                webkitRelativePath: {
                  writable: true
                }
              }); //@ts-ignore add webkitRelativePath property into file


              file.webkitRelativePath = item.fullPath.replace(/^\//, '');

              define_properties_default()(file, {
                webkitRelativePath: {
                  writable: false
                }
              });
            }

            res(file);
          }, rej);
        }));
      } else if (item.isDirectory) {
        const entries = yield loopFiles(item);

        for (let index = 0; index < entries.length; index++) {
          var _context;

          const entry = entries[index];
          yield _traverseFileTree(entry, concat_default()(_context = "".concat(path)).call(_context, item.name, "/"));
        }
      }
    });

    try {
      const batches = map_default()(items).call(items, i => _traverseFileTree(i.webkitGetAsEntry())); // Perform asynchronous operations to add the required promises to the queue


      yield promise_default.a.all(batches); // Execution queue

      const result = yield promise_default.a.all(promises);
      return result;
    } catch (error) {
      console.warn('Captured error while loop directory.');
      console.error(error);
      return [];
    }
  });
}
// CONCATENATED MODULE: ../semi-foundation/upload/foundation.ts















var foundation_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = promise_default.a))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};






const {
  FILE_STATUS_UPLOADING,
  FILE_STATUS_SUCCESS,
  FILE_STATUS_UPLOAD_FAIL,
  FILE_STATUS_VALID_FAIL,
  FILE_STATUS_WAIT_UPLOAD,
  DRAG_AREA_DEFAULT,
  DRAG_AREA_LEGAL,
  TRIGGER_AUTO: foundation_TRIGGER_AUTO
} = upload_constants_strings;

class foundation_UploadFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  }

  destroy() {
    this.releaseMemory();
  }

  getError(_ref) {
    var _context, _context2;

    let {
      action,
      xhr,
      message,
      fileName
    } = _ref;
    const status = xhr ? xhr.status : 0;

    const msg = message || concat_default()(_context = concat_default()(_context2 = "cannot post ".concat(fileName, " to ")).call(_context2, action, ", xhr status: ")).call(_context, status, "'");

    const err = new Error(msg);
    err.status = status;
    err.method = 'post';
    err.url = action;
    return err;
  }

  getBody(xhr) {
    if (!xhr) {
      return;
    }

    const text = xhr.responseText || xhr.response;

    if (!text) {
      return text;
    }

    try {
      return JSON.parse(text);
    } catch (error) {
      return text;
    }
  }

  checkFileSize(file) {
    const {
      size
    } = file;
    const {
      maxSize,
      minSize
    } = this.getProps();
    let isIllegal = false;

    if (size > maxSize * byteKB || size < minSize * byteKB) {
      isIllegal = true;
    }

    return isIllegal;
  }
  /**
   * 1. 选择文件
   * 2. transform转换. 添加uid
   * 3. 检查文件个数是否超出
   *   若超出，不添加到list中，触发onExceed，中止流程
   *   若未超出，执行以下流程
   * 4. 检查文件尺寸，添加尺寸是否合法的标识
   * 5. 检查uploadTrigger是否为'auto'，若是执行步骤6-8
   * 6. 遍历文件列表触发上传
   *    - 对尺寸不合适的不需要触发上传
   * 7. beforeUpload
   *    - 对beforeUpload中设为不合法的不需要触发上传
   * 8. TODO: check
   * 9. afterUpload
   *
   * 1. Select file
   * 2. transform, add uid
   * 3. Check whether the number of files exceeds
   *   If it exceeds, it is not added to the list, trigger onExceed, and abort the process
   *   If it is not exceeded, execute the following process
   * 4. check the file size, add the size is legal logo
   * 5. Check whether the uploadTrigger is'auto ', if so, perform steps 6-8
   * 6. Traversing the file list triggers upload
   *    - No need to trigger uploads for inappropriate sizes
   * 7. beforeUpload
   *    - no need to trigger upload if beforeUpload is not set to be valid
   * 8. TODO: check
   * 9. afterUpload
   */


  handleChange(currentFileList) {
    const invalidFiles = [];
    const {
      limit,
      transformFile,
      accept
    } = this.getProps();
    const {
      fileList
    } = this.getStates();

    let files = from_default()(currentFileList); // When the selected file


    if (typeof accept !== 'undefined') {
      files = filter_default()(files).call(files, item => {
        const isValid = this.checkFileFormat(accept, item);

        if (!isValid) {
          invalidFiles.push(item);
        }

        return isValid;
      });

      if (invalidFiles.length !== 0) {
        this._adapter.notifyAcceptInvalid(invalidFiles);
      }

      if (files.length === 0) {
        return;
      }
    }

    files = map_default()(files).call(files, file => {
      if (transformFile) {
        file = transformFile(file);
      }

      if (!file.uid) {
        file.uid = getUuidv4();
      }

      if (this.checkFileSize(file)) {
        file._sizeInvalid = true;
        file.status = FILE_STATUS_VALID_FAIL;

        this._adapter.notifySizeError(file, fileList);
      }

      return file;
    });
    const total = fileList.length + files.length;

    if (typeof limit !== 'undefined') {
      // Determine whether the limit is exceeded
      if (total > limit) {
        this._adapter.notifyExceed(files);

        if (limit === 1) {
          // Replace the current file with the last file
          files = slice_default()(files).call(files, -1);

          this._adapter.notifyFileSelect(files);

          this._adapter.resetInput();

          this.replaceFileList(files);
          return;
        } // If the limit is exceeded, the calculation can add a few more files and continue uploading the remaining files


        const restNum = limit - fileList.length;
        files = slice_default()(files).call(files, 0, restNum);
      }
    }

    this._adapter.notifyFileSelect(files);

    this._adapter.resetInput();

    this.addFilesToList(files);
  } // Triggered when replacing a single file


  handleReplaceChange(currentFileList) {
    if (currentFileList.length === 0) {
      return;
    }

    const {
      transformFile,
      uploadTrigger,
      accept
    } = this.getProps();
    const {
      replaceIdx,
      fileList
    } = this.getStates();

    let newFile = from_default()(currentFileList).pop();

    if (typeof accept !== 'undefined') {
      if (!this.checkFileFormat(accept, newFile)) {
        this._adapter.notifyAcceptInvalid([newFile]);

        return;
      }
    }

    if (transformFile) {
      newFile = transformFile(newFile);
    }

    if (!newFile.uid) {
      newFile.uid = getUuidv4();
    }

    if (this.checkFileSize(newFile)) {
      newFile._sizeInvalid = true;
      newFile.status = FILE_STATUS_VALID_FAIL;

      this._adapter.notifySizeError(newFile, fileList);
    }

    this._adapter.notifyFileSelect([newFile]);

    const newFileItem = this.buildFileItem(newFile, uploadTrigger);
    const newFileList = [...fileList];

    splice_default()(newFileList).call(newFileList, replaceIdx, 1, newFileItem);

    this._adapter.notifyChange({
      currentFile: newFileItem,
      fileList: newFileList
    });

    this._adapter.updateFileList(newFileList, () => {
      this._adapter.resetReplaceInput();

      this.upload(newFileItem);
    });
  }

  buildFileItem(fileInstance, uploadTrigger) {
    const {
      _sizeInvalid,
      status
    } = fileInstance;

    try {
      // can't use ... to get rest property on File Object
      delete fileInstance._sizeInvalid;
      delete fileInstance.status;
    } catch (error) {}

    const _file = {
      status: status ? status : uploadTrigger === foundation_TRIGGER_AUTO ? FILE_STATUS_UPLOADING : FILE_STATUS_WAIT_UPLOAD,
      name: fileInstance.name,
      size: getFileSize(fileInstance.size),
      uid: fileInstance.uid,
      percent: 0,
      fileInstance,
      url: this._createURL(fileInstance)
    };

    if (_sizeInvalid) {
      _file._sizeInvalid = true;
    } // If it is an image, preview; if it is a pdf, you can jump to


    if (this.isImage(fileInstance)) {
      _file.preview = true;
    }

    return _file;
  }

  replaceFileList(files) {
    const {
      uploadTrigger
    } = this.getProps();

    const currentFiles = map_default()(files).call(files, item => this.buildFileItem(item, uploadTrigger));

    this._adapter.notifyChange({
      fileList: currentFiles,
      currentFile: currentFiles[0]
    });

    this._adapter.updateFileList(currentFiles, () => {
      if (uploadTrigger === foundation_TRIGGER_AUTO) {
        this.startUpload(currentFiles);
      }
    });
  }

  addFilesToList(files) {
    var _context3;

    const fileList = slice_default()(_context3 = this.getState('fileList')).call(_context3);

    const {
      uploadTrigger
    } = this.getProps();

    const currentFiles = map_default()(files).call(files, item => this.buildFileItem(item, uploadTrigger));

    for_each_default()(currentFiles).call(currentFiles, file => {
      const index = find_index_default()(fileList).call(fileList, item => item.uid === file.uid);

      if (index !== -1) {
        fileList[index] = file;
      } else {
        fileList.push(file);

        this._adapter.notifyChange({
          fileList,
          currentFile: file
        });
      }
    });

    this._adapter.updateFileList(fileList, () => {
      if (uploadTrigger === foundation_TRIGGER_AUTO) {
        this.startUpload(currentFiles);
      }
    });
  } // 插入多个文件到指定位置
  // Insert files to the specified location


  insertFileToList(files, index) {
    const {
      limit,
      transformFile,
      accept,
      uploadTrigger
    } = this.getProps();
    const {
      fileList
    } = this.getStates();
    const unAcceptFileList = []; // 当次选中的文件
    // current selected file

    let currentFileList = from_default()(files);

    if (typeof accept !== 'undefined') {
      currentFileList = filter_default()(currentFileList).call(currentFileList, item => {
        const isValid = this.checkFileFormat(accept, item);

        if (!isValid) {
          unAcceptFileList.push(item);
        }

        return isValid;
      });

      if (unAcceptFileList.length !== 0) {
        this._adapter.notifyAcceptInvalid(unAcceptFileList);
      }

      if (currentFileList.length === 0) {
        return;
      }
    }

    currentFileList = map_default()(currentFileList).call(currentFileList, file => {
      if (!file.uid) {
        file.uid = getUuidv4();
      }

      if (this.checkFileSize(file)) {
        file._sizeInvalid = true;
        file.status = FILE_STATUS_VALID_FAIL;

        this._adapter.notifySizeError(file, fileList);
      }

      if (transformFile) {
        file = transformFile(file);
      }

      return file;
    });
    const total = fileList.length + currentFileList.length;

    if (typeof limit !== 'undefined') {
      // 判断是否超出限制
      // Determine whether the limit is exceeded
      if (total > limit) {
        if (limit === 1) {
          // 使用最后面的文件对当前文件进行替换
          // Use the last file to replace the current file
          currentFileList = slice_default()(currentFileList).call(currentFileList, -1);

          this._adapter.notifyFileSelect(currentFileList);

          this._adapter.resetInput();

          this.replaceFileList(currentFileList);
          return;
        } // 如果超出了限制，则计算还能添加几个文件，将剩余的文件继续上传
        // If the limit is exceeded, several files can be added to the calculation, and the remaining files will continue to be uploaded


        const restNum = limit - fileList.length;
        currentFileList = slice_default()(currentFileList).call(currentFileList, 0, restNum);

        this._adapter.notifyExceed(currentFileList);
      }
    }

    const fileItemList = map_default()(currentFileList).call(currentFileList, file => this.buildFileItem(file, uploadTrigger));

    const newFileList = slice_default()(fileList).call(fileList);

    if (typeof index !== 'undefined') {
      splice_default()(newFileList).call(newFileList, index, 0, ...fileItemList);
    } else {
      newFileList.push(...fileItemList);
    }

    this._adapter.notifyFileSelect(currentFileList);

    this._adapter.notifyChange({
      fileList: newFileList,
      currentFile: null
    });

    this._adapter.updateFileList(newFileList, () => {
      if (uploadTrigger === foundation_TRIGGER_AUTO) {
        this.startUpload(fileItemList);
      }
    });
  }
  /* istanbul ignore next */


  manualUpload() {
    var _context4;

    // find the list of files that have not been uploaded
    const waitToUploadFileList = filter_default()(_context4 = this.getState('fileList')).call(_context4, item => item.status === FILE_STATUS_WAIT_UPLOAD);

    this.startUpload(waitToUploadFileList);
  }

  startUpload(fileList) {
    for_each_default()(fileList).call(fileList, file => {
      if (!file._sizeInvalid) {
        this.upload(file);
      }
    });
  }

  upload(file) {
    const {
      beforeUpload
    } = this.getProps();

    if (typeof beforeUpload === 'undefined') {
      this.post(file);
      return;
    }

    if (typeof beforeUpload === 'function') {
      const {
        fileList
      } = this.getStates();

      const buResult = this._adapter.notifyBeforeUpload({
        file,
        fileList
      });

      switch (true) {
        // sync validate - boolean
        case buResult === true:
          {
            this.post(file);
            break;
          }

        case buResult === false:
          {
            const newResult = {
              shouldUpload: false,
              status: upload_constants_strings.FILE_STATUS_VALID_FAIL
            };
            this.handleBeforeUploadResultInObject(newResult, file);
            break;
          }
        // async validate

        case buResult && isPromise(buResult):
          {
            promise_default.a.resolve(buResult).then(resolveData => {
              var _context5;

              let newResult = {
                shouldUpload: true
              };

              const typeOfResolveData = slice_default()(_context5 = Object.prototype.toString.call(resolveData)).call(_context5, 8, -1);

              if (typeOfResolveData === 'Object') {
                newResult = assign_default()(assign_default()({}, newResult), resolveData);
              }

              this.handleBeforeUploadResultInObject(newResult, file);
            }, rejectVal => {
              var _context6;

              let newResult = {
                shouldUpload: false,
                status: upload_constants_strings.FILE_STATUS_VALID_FAIL
              };

              const typeOfRejectData = slice_default()(_context6 = Object.prototype.toString.call(rejectVal)).call(_context6, 8, -1);

              if (typeOfRejectData === 'Object') {
                newResult = assign_default()(assign_default()({}, newResult), rejectVal);
              }

              this.handleBeforeUploadResultInObject(newResult, file);
            });

            break;
          }
        // sync validate - object

        case typeof buResult === 'object':
          // inject to fileList
          this.handleBeforeUploadResultInObject(buResult, file);
          break;

        default:
          break;
      }
    }
  } // handle beforeUpload result when it's an object


  handleBeforeUploadResultInObject(buResult, file) {
    var _context7;

    const {
      shouldUpload,
      status,
      autoRemove,
      validateMessage,
      fileInstance
    } = buResult;

    let newFileList = slice_default()(_context7 = this.getState('fileList')).call(_context7);

    if (autoRemove) {
      newFileList = filter_default()(newFileList).call(newFileList, item => item.uid !== file.uid);
    } else {
      const index = this._getFileIndex(file, newFileList);

      if (index < 0) {
        return;
      }

      status ? newFileList[index].status = status : null;
      validateMessage ? newFileList[index].validateMessage = validateMessage : null;

      if (fileInstance) {
        fileInstance.uid = file.uid; // reuse recent file uid

        newFileList[index].fileInstance = fileInstance;
        newFileList[index].size = getFileSize(fileInstance.size);
        newFileList[index].name = fileInstance.name;
      }

      newFileList[index].shouldUpload = shouldUpload;
    }

    this._adapter.updateFileList(newFileList);

    this._adapter.notifyChange({
      fileList: newFileList,
      currentFile: file
    });

    if (shouldUpload) {
      this.post(file);
    }
  }

  post(file) {
    const {
      fileInstance
    } = file;
    const option = this.getProps();

    if (typeof XMLHttpRequest === 'undefined') {
      return;
    }

    const xhr = new XMLHttpRequest();
    const formData = new FormData();
    const {
      action
    } = option; // add data

    let {
      data
    } = option;

    if (data) {
      var _context8;

      if (typeof data === 'function') {
        data = data(fileInstance);
      }

      for_each_default()(_context8 = keys_default()(data)).call(_context8, key => {
        formData.append(key, data[key]);
      });
    } // add file


    const fileName = option.name || option.fileName || fileInstance.name;

    if (option.customRequest) {
      return option.customRequest({
        fileName,
        data,
        file,
        fileInstance,
        onProgress: e => this.handleProgress({
          e,
          fileInstance
        }),
        onError: (userXhr, e) => this.handleError({
          e,
          xhr: userXhr,
          fileInstance
        }),
        onSuccess: (response, e) => this.handleSuccess({
          response,
          fileInstance,
          e,
          isCustomRequest: true
        }),
        withCredentials: option.withCredentials,
        action: option.action
      });
    }

    formData.append(fileName, fileInstance);
    xhr.open('post', action, true);

    if (option.withCredentials && 'withCredentials' in xhr) {
      xhr.withCredentials = true;
    }

    if (xhr.upload) {
      xhr.upload.onprogress = e => this.handleProgress({
        e,
        fileInstance
      });
    } // Callback function after upload is completed


    xhr.onload = e => this.handleOnLoad({
      e,
      xhr,
      fileInstance
    });

    xhr.onerror = e => this.handleError({
      e,
      xhr,
      fileInstance
    }); // add headers


    let headers = option.headers || {};

    if (typeof headers === 'function') {
      headers = headers(fileInstance);
    }

    for (const item in headers) {
      if (Object.prototype.hasOwnProperty.call(headers, item) && headers[item] !== null) {
        xhr.setRequestHeader(item, headers[item]);
      }
    }

    xhr.send(formData);
  }

  handleProgress(_ref2) {
    let {
      e,
      fileInstance
    } = _ref2;
    const {
      fileList
    } = this.getStates();

    const newFileList = slice_default()(fileList).call(fileList);

    let percent = 0;

    if (e.total > 0) {
      percent = Number((e.loaded / e.total * 100 * upload_constants_numbers.PROGRESS_COEFFICIENT).toFixed(0)) || 0;
    }

    const index = this._getFileIndex(fileInstance, newFileList);

    if (index < 0) {
      return;
    }

    newFileList[index].percent = percent;
    newFileList[index].status = FILE_STATUS_UPLOADING;

    this._adapter.notifyProgress(percent, fileInstance, newFileList);

    this._adapter.updateFileList(newFileList);

    this._adapter.notifyChange({
      fileList: newFileList,
      currentFile: newFileList[index]
    });
  }

  handleOnLoad(_ref3) {
    let {
      e,
      xhr,
      fileInstance
    } = _ref3;
    const {
      fileList
    } = this.getStates();

    const index = this._getFileIndex(fileInstance, fileList);

    if (index < 0) {
      return;
    }

    if (xhr.status < 200 || xhr.status >= 300) {
      this.handleError({
        e,
        xhr,
        fileInstance
      });
    } else {
      this.handleSuccess({
        e,
        xhr,
        fileInstance,
        index
      });
    }
  }

  handleSuccess(_ref4) {
    let {
      e,
      fileInstance,
      isCustomRequest = false,
      xhr,
      response
    } = _ref4;
    const {
      fileList
    } = this.getStates();
    let body = null;

    const index = this._getFileIndex(fileInstance, fileList);

    if (index < 0) {
      return;
    }

    if (isCustomRequest) {
      // use when pass customRequest
      body = response;
    } else {
      body = this.getBody(xhr);
    }

    const newFileList = slice_default()(fileList).call(fileList);

    const {
      afterUpload
    } = this.getProps();
    newFileList[index].status = FILE_STATUS_SUCCESS;
    newFileList[index].percent = 100;

    this._adapter.notifyProgress(100, fileInstance, newFileList);

    newFileList[index].response = body;
    e ? newFileList[index].event = e : null;

    if (afterUpload && typeof afterUpload === 'function') {
      const {
        autoRemove,
        status,
        validateMessage,
        name
      } = this._adapter.notifyAfterUpload({
        response: body,
        file: newFileList[index],
        fileList: newFileList
      }) || {};
      status ? newFileList[index].status = status : null;
      validateMessage ? newFileList[index].validateMessage = validateMessage : null;
      name ? newFileList[index].name = name : null;
      autoRemove ? splice_default()(newFileList).call(newFileList, index, 1) : null;
    }

    this._adapter.notifySuccess(body, fileInstance, newFileList);

    this._adapter.notifyChange({
      fileList: newFileList,
      currentFile: newFileList[index]
    });

    this._adapter.updateFileList(newFileList);
  }

  _getFileIndex(file, fileList) {
    return find_index_default()(fileList).call(fileList, item => item.uid === file.uid);
  }

  handleRemove(file) {
    const {
      disabled
    } = this.getProps();

    if (disabled) {
      return;
    }

    const {
      fileList
    } = this.getStates();

    promise_default.a.resolve(this._adapter.notifyBeforeRemove(file, fileList)).then(res => {
      // prevent remove while user return false
      if (res === false) {
        return;
      }

      const newFileList = slice_default()(fileList).call(fileList);

      const index = this._getFileIndex(file, fileList);

      if (index < 0) {
        return;
      }

      splice_default()(newFileList).call(newFileList, index, 1);

      this._adapter.notifyRemove(file.fileInstance, newFileList, file);

      this._adapter.updateFileList(newFileList);

      this._adapter.notifyChange({
        fileList: newFileList,
        currentFile: file
      });
    });
  }

  handleError(_ref5) {
    let {
      e,
      xhr,
      fileInstance
    } = _ref5;
    const {
      fileList
    } = this.getStates();

    const index = this._getFileIndex(fileInstance, fileList);

    if (index < 0) {
      return;
    }

    const {
      action
    } = this.getProps();

    const newFileList = slice_default()(fileList).call(fileList);

    const error = this.getError({
      action,
      xhr,
      fileName: fileInstance.name
    });
    newFileList[index].status = FILE_STATUS_UPLOAD_FAIL;
    newFileList[index].response = error;
    newFileList[index].event = e;

    this._adapter.notifyError(error, fileInstance, newFileList, xhr);

    this._adapter.updateFileList(newFileList);

    this._adapter.notifyChange({
      currentFile: newFileList[index],
      fileList: newFileList
    });
  }

  handleClear() {
    const {
      disabled
    } = this.getProps();
    const {
      fileList
    } = this.getStates();

    if (disabled) {
      return;
    }

    promise_default.a.resolve(this._adapter.notifyBeforeClear(fileList)).then(res => {
      if (res === false) {
        return;
      }

      this._adapter.updateFileList([]);

      this._adapter.notifyClear();

      this._adapter.notifyChange({
        fileList: []
      });
    });
  }

  _createURL(fileInstance) {
    // https://stackoverflow.com/questions/31742072/filereader-vs-window-url-createobjecturl
    const url = url_default.a.createObjectURL(fileInstance);

    const {
      localUrls
    } = this.getStates();

    const newUrls = slice_default()(localUrls).call(localUrls);

    newUrls.push(url);

    this._adapter.updateLocalUrls(newUrls);

    return url;
  } // 释放预览文件所占用的内存
  // Release memory used by preview files


  releaseMemory() {
    const {
      localUrls
    } = this.getStates();

    for_each_default()(localUrls).call(localUrls, url => {
      this._releaseBlob(url);
    });
  }

  _releaseBlob(url) {
    try {
      url_default.a.revokeObjectURL(url);
    } catch (error) {
      console.log(error);
    }
  }

  isImage(file) {
    return /(webp|svg|png|gif|jpg|jpeg|bmp|dpg)$/i.test(file.type);
  }
  /* istanbul ignore next */


  isMultiple() {
    return Boolean(this.getProp('multiple'));
  }

  handleDragEnter(e) {
    e.preventDefault();
    e.stopPropagation();
    this._dragEnterTarget = e.currentTarget;
    const {
      disabled
    } = this.getProps();

    if (!disabled) {
      this._adapter.updateDragAreaStatus(DRAG_AREA_LEGAL);
    }
  }

  handleDirectoryDrop(e) {
    return foundation_awaiter(this, void 0, void 0, function* () {
      var _context9;

      const fileList = slice_default()(_context9 = this.getState('fileList')).call(_context9);

      const items = slice_default()([]).call(e.dataTransfer.items);

      const files = yield mapFileTree(items);
      this.handleChange(files);

      this._adapter.updateDragAreaStatus(DRAG_AREA_DEFAULT);

      this._adapter.notifyDrop(e, files, fileList);
    });
  }

  handleDrop(e) {
    var _context10;

    // Block file opening in browser
    e.preventDefault();
    e.stopPropagation();
    const {
      disabled,
      directory
    } = this.getProps();

    const fileList = slice_default()(_context10 = this.getState('fileList')).call(_context10);

    if (!disabled) {
      if (directory) {
        this.handleDirectoryDrop(e);
        return;
      }

      const files = from_default()(e.dataTransfer.files);

      this.handleChange(files);

      this._adapter.updateDragAreaStatus(DRAG_AREA_DEFAULT);

      this._adapter.notifyDrop(e, files, fileList);
    }
  }

  handleDragOver(e) {
    e.preventDefault();
    e.stopPropagation();
  }

  handleDragLeave(e) {
    e.preventDefault();
    e.stopPropagation(); // 防止拖拽进入子元素时触发的dragLeave也被处理
    // Prevent dragLeave triggered when dragging into a child element is also handled
    // https://stackoverflow.com/questions/7110353/html5-dragleave-fired-when-hovering-a-child-element

    if (this._dragEnterTarget === e.target) {
      this._adapter.updateDragAreaStatus(DRAG_AREA_DEFAULT);
    }
  } // 拖拽上传时，需要对文件的格式进行校验
  // When dragging and uploading, you need to verify the file format


  checkFileFormat(accept, file) {
    var _context11, _context12;

    const acceptTypes = filter_default()(_context11 = map_default()(_context12 = accept.split(',')).call(_context12, type => trim_default()(type).call(type))).call(_context11, type => type);

    const mimeType = file.type || ''; // Get the large class to which MIMEtype belongs, eg: image/jpeg = > image, application/= > application

    const baseMimeType = mimeType.replace(/\/.*$/, '');
    return some_default()(acceptTypes).call(acceptTypes, type => {
      // When accepted as a suffix filename such as [.jpeg]
      if (type.charAt(0) === '.') {
        const fileName = file.name || '';
        const acceptExtension = type.split('.').pop().toLowerCase();
        return endsWith(fileName.toLowerCase(), acceptExtension);
      } // When accepted as a general class such as [image/*] or [video/*]


      if (/\/\*$/.test(type)) {
        const acceptBaseMimeType = type.replace(/\/.*$/, '');
        return baseMimeType === acceptBaseMimeType;
      } // When accepted as a full MIME types string


      if (/^[^\/]+\/[^\/]+$/.test(type)) {
        return mimeType === type;
      }

      return false;
    });
  }

  retry(fileItem) {
    const {
      onRetry
    } = this.getProps();

    if (onRetry && typeof onRetry === 'function') {
      onRetry(fileItem);
    }

    this.post(fileItem);
  }

  handlePreviewClick(fileItem) {
    this._adapter.notifyPreviewClick(fileItem);
  }

}

/* harmony default export */ var upload_foundation = (foundation_UploadFoundation);
// CONCATENATED MODULE: ./_base/reactUtils.ts
// https://stackoverflow.com/questions/33199959/how-to-detect-a-react-component-vs-a-react-element



function isClassComponent(component) {
  return typeof component === 'function' && Boolean(component.prototype.isReactComponent);
}

function isFunctionalComponent(Component) {
  return typeof Component === 'function' && // can be various things
  !(Component.prototype && Component.prototype.isReactComponent // native arrows don't have prototypes
  );
}

function isReactComponent(component) {
  return isClassComponent(component) || isFunctionalComponent(component);
}

function reactUtils_isElement(element) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(element);
}

function isCompositeTypeElement(element) {
  return reactUtils_isElement(element) && typeof element.type === 'function';
}

function isEmptyChildren(children) {
  return external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children.count(children) === 0;
}


// CONCATENATED MODULE: ./upload/fileCard.tsx













const fileCard_prefixCls = upload_constants_cssClasses.PREFIX;

const ErrorSvg = function () {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("svg", assign_default()({
    focusable: false,
    "aria-hidden": true,
    width: "16",
    height: "16",
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("circle", {
    cx: "7.99992",
    cy: "7.99992",
    r: "6.66667",
    fill: "white"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M15.3332 8.00008C15.3332 12.0502 12.0499 15.3334 7.99984 15.3334C3.94975 15.3334 0.666504 12.0502 0.666504 8.00008C0.666504 3.94999 3.94975 0.666748 7.99984 0.666748C12.0499 0.666748 15.3332 3.94999 15.3332 8.00008ZM8.99984 11.6667C8.99984 11.1145 8.55212 10.6667 7.99984 10.6667C7.44755 10.6667 6.99984 11.1145 6.99984 11.6667C6.99984 12.219 7.44755 12.6667 7.99984 12.6667C8.55212 12.6667 8.99984 12.219 8.99984 11.6667ZM7.99984 3.33341C7.27573 3.33341 6.7003 3.94171 6.74046 4.66469L6.94437 8.33495C6.97549 8.89513 7.4388 9.33341 7.99984 9.33341C8.56087 9.33341 9.02419 8.89513 9.05531 8.33495L9.25921 4.66469C9.29938 3.94171 8.72394 3.33341 7.99984 3.33341Z",
    fill: "#F93920"
  }));
};

const ReplaceSvg = function () {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("svg", assign_default()({
    focusable: false,
    "aria-hidden": true,
    width: "28",
    height: "28",
    viewBox: "0 0 28 28",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("circle", {
    cx: "14",
    cy: "14",
    r: "14",
    fill: "#16161A",
    fillOpacity: "0.6"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("path", {
    d: "M9 10.25V18.25L10.25 13.25H17.875V11.75C17.875 11.4739 17.6511 11.25 17.375 11.25H14L12.75 9.75H9.5C9.22386 9.75 9 9.97386 9 10.25Z",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("path", {
    d: "M18 18.25L19 13.25H10.2031L9 18.25H18Z",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }));
};

const DirectorySvg = function () {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("svg", assign_default()({
    focusable: false,
    "aria-hidden": true,
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("path", {
    d: "M6 17V7.58824C6 7.26336 6.26863 7 6.6 7H10.5L12 8.76471H16.05C16.3814 8.76471 16.65 9.02806 16.65 9.35294V11.1176H7.5L6 17ZM6 17L7.44375 11.1176H18L16.8 17L6 17Z",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }));
};

class fileCard_FileCard extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  transSize(size) {
    if (typeof size === 'number') {
      return getFileSize(size);
    }

    return size;
  }

  renderValidateMessage() {
    const {
      status,
      validateMessage
    } = this.props;
    let content = null;

    switch (true) {
      case typeof validateMessage === 'string' && status === upload_constants_strings.FILE_STATUS_VALIDATING:
        content = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(spin_0, {
          size: "small",
          wrapperClassName: "".concat(fileCard_prefixCls, "-file-card-icon-loading")
        }), validateMessage);
        break;

      case typeof validateMessage === 'string':
        content = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconAlertCircle, {
          className: "".concat(fileCard_prefixCls, "-file-card-icon-error")
        }), validateMessage);
        break;

      case reactUtils_isElement(validateMessage):
        content = validateMessage;
        break;

      default:
        break;
    }

    return content;
  }

  renderPicValidateMsg() {
    const {
      status,
      validateMessage
    } = this.props;
    let icon = null;

    switch (true) {
      case validateMessage && status === upload_constants_strings.FILE_STATUS_VALIDATING:
        icon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(spin_0, {
          size: "small",
          wrapperClassName: "".concat(fileCard_prefixCls, "-picture-file-card-icon-loading")
        });
        break;

      case validateMessage && (status === upload_constants_strings.FILE_STATUS_VALID_FAIL || status === upload_constants_strings.FILE_STATUS_UPLOAD_FAIL):
        icon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          className: "".concat(fileCard_prefixCls, "-picture-file-card-icon-error")
        }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(ErrorSvg, null));
        break;

      default:
        break;
    }

    return icon ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tooltip_Tooltip, {
      content: validateMessage,
      trigger: "hover",
      position: "bottom"
    }, icon) : null;
  }

  renderPic(locale) {
    const {
      url,
      percent,
      status,
      disabled,
      style,
      onPreviewClick,
      showPicInfo,
      renderPicInfo,
      renderPicPreviewIcon,
      renderThumbnail,
      name,
      index
    } = this.props;
    const showProgress = status === upload_constants_strings.FILE_STATUS_UPLOADING && percent !== 100;
    const showRetry = status === upload_constants_strings.FILE_STATUS_UPLOAD_FAIL && this.props.showRetry;
    const showReplace = status === upload_constants_strings.FILE_STATUS_SUCCESS && this.props.showReplace;
    const showPreview = status === upload_constants_strings.FILE_STATUS_SUCCESS && !this.props.showReplace;
    const filePicCardCls = classnames_default()({
      ["".concat(fileCard_prefixCls, "-picture-file-card")]: true,
      ["".concat(fileCard_prefixCls, "-picture-file-card-disabled")]: disabled,
      ["".concat(fileCard_prefixCls, "-picture-file-card-show-pointer")]: typeof onPreviewClick !== 'undefined',
      ["".concat(fileCard_prefixCls, "-picture-file-card-error")]: status === upload_constants_strings.FILE_STATUS_UPLOAD_FAIL,
      ["".concat(fileCard_prefixCls, "-picture-file-card-uploading")]: showProgress
    });
    const retry = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "button",
      tabIndex: 0,
      className: "".concat(fileCard_prefixCls, "-picture-file-card-retry"),
      onClick: e => this.onRetry(e)
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconRefresh, {
      className: "".concat(fileCard_prefixCls, "-picture-file-card-icon-retry")
    }));
    const replace = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tooltip_Tooltip, {
      trigger: "hover",
      position: "top",
      content: locale.replace,
      showArrow: false,
      spacing: 4
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "button",
      tabIndex: 0,
      className: "".concat(fileCard_prefixCls, "-picture-file-card-replace"),
      onClick: e => this.onReplace(e)
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(ReplaceSvg, {
      className: "".concat(fileCard_prefixCls, "-picture-file-card-icon-replace")
    })));
    const preview = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(fileCard_prefixCls, "-picture-file-card-preview")
    }, typeof renderPicPreviewIcon === 'function' ? renderPicPreviewIcon(this.props) : null);
    const close = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "button",
      tabIndex: 0,
      className: "".concat(fileCard_prefixCls, "-picture-file-card-close"),
      onClick: e => this.onRemove(e)
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClear, {
      className: "".concat(fileCard_prefixCls, "-picture-file-card-icon-close")
    }));
    const picInfo = typeof renderPicInfo === 'function' ? renderPicInfo(this.props) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(fileCard_prefixCls, "-picture-file-card-pic-info")
    }, index + 1);
    const thumbnail = typeof renderThumbnail === 'function' ? renderThumbnail(this.props) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("img", {
      src: url,
      alt: name
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "listitem",
      className: filePicCardCls,
      style: style,
      onClick: onPreviewClick
    }, thumbnail, showProgress ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(progress_0, {
      percent: percent,
      type: "circle",
      size: "small",
      orbitStroke: '#FFF',
      "aria-label": "uploading file progress"
    }) : null, showRetry ? retry : null, showReplace && replace, showPreview && preview, showPicInfo && picInfo, !disabled && close, this.renderPicValidateMsg());
  }

  renderFile(locale) {
    const {
      name,
      size,
      percent,
      url,
      showRetry: propsShowRetry,
      showReplace: propsShowReplace,
      preview,
      previewFile,
      status,
      style,
      onPreviewClick,
      renderFileOperation
    } = this.props;
    const fileCardCls = classnames_default()({
      ["".concat(fileCard_prefixCls, "-file-card")]: true,
      ["".concat(fileCard_prefixCls, "-file-card-fail")]: status === upload_constants_strings.FILE_STATUS_VALID_FAIL || status === upload_constants_strings.FILE_STATUS_UPLOAD_FAIL,
      ["".concat(fileCard_prefixCls, "-file-card-show-pointer")]: typeof onPreviewClick !== 'undefined'
    });
    const previewCls = classnames_default()({
      ["".concat(fileCard_prefixCls, "-file-card-preview")]: true,
      ["".concat(fileCard_prefixCls, "-file-card-preview-placeholder")]: !preview || previewFile
    });
    const infoCls = "".concat(fileCard_prefixCls, "-file-card-info");
    const closeCls = "".concat(fileCard_prefixCls, "-file-card-close");
    const replaceCls = "".concat(fileCard_prefixCls, "-file-card-replace");
    const showProgress = !(percent === 100 || typeof percent === 'undefined') && status === upload_constants_strings.FILE_STATUS_UPLOADING; // only show retry when upload fail & showRetry is true, no need to show during validate fail

    const showRetry = status === upload_constants_strings.FILE_STATUS_UPLOAD_FAIL && propsShowRetry;
    const showReplace = status === upload_constants_strings.FILE_STATUS_SUCCESS && propsShowReplace;
    const fileSize = this.transSize(size);
    let previewContent = preview ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("img", {
      src: url,
      alt: name
    }) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconFile, {
      size: "large"
    });

    if (previewFile) {
      previewContent = previewFile(this.props);
    }

    const operation = typeof renderFileOperation === 'function' ? renderFileOperation(this.props) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(button_0, {
      onClick: e => this.onRemove(e),
      type: "tertiary",
      icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClose, null),
      theme: "borderless",
      size: "small",
      className: closeCls
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "listitem",
      className: fileCardCls,
      style: style,
      onClick: onPreviewClick
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: previewCls
    }, previewContent), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(infoCls, "-main")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(infoCls, "-main-text")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(infoCls, "-name")
    }, name), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(infoCls, "-size")
    }, fileSize), showReplace && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tooltip_Tooltip, {
      trigger: "hover",
      position: "top",
      showArrow: false,
      content: locale.replace
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(button_0, {
      onClick: e => this.onReplace(e),
      type: "tertiary",
      theme: "borderless",
      size: "small",
      icon: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(DirectorySvg, null),
      className: replaceCls
    })))), showProgress ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(progress_0, {
      percent: percent,
      style: {
        width: '100%'
      },
      "aria-label": "uploading file progress"
    }) : null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(infoCls, "-main-control")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(infoCls, "-validate-message")
    }, this.renderValidateMessage()), showRetry ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      role: "button",
      tabIndex: 0,
      className: "".concat(infoCls, "-retry"),
      onClick: e => this.onRetry(e)
    }, locale.retry) : null)), operation);
  }

  onRemove(e) {
    e.stopPropagation();
    this.props.onRemove();
  }

  onReplace(e) {
    e.stopPropagation();
    this.props.onReplace();
  }

  onRetry(e) {
    e.stopPropagation();
    this.props.onRetry();
  }

  render() {
    const {
      listType
    } = this.props;

    if (listType === upload_constants_strings.FILE_LIST_PIC) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
        componentName: "Upload"
      }, locale => this.renderPic(locale));
    }

    if (listType === upload_constants_strings.FILE_LIST_DEFAULT) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
        componentName: "Upload"
      }, locale => this.renderFile(locale));
    }

    return null;
  }

}

fileCard_FileCard.propTypes = {
  className: prop_types_default.a.string,
  disabled: prop_types_default.a.bool,
  listType: prop_types_default.a.string,
  name: prop_types_default.a.string,
  onPreviewClick: prop_types_default.a.func,
  onRemove: prop_types_default.a.func,
  onReplace: prop_types_default.a.func,
  onRetry: prop_types_default.a.func,
  percent: prop_types_default.a.number,
  preview: prop_types_default.a.bool,
  previewFile: prop_types_default.a.func,
  showReplace: prop_types_default.a.bool,
  showRetry: prop_types_default.a.bool,
  size: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  status: prop_types_default.a.string,
  style: prop_types_default.a.object,
  url: prop_types_default.a.string,
  validateMessage: prop_types_default.a.node,
  index: prop_types_default.a.number
};
fileCard_FileCard.defaultProps = {
  listType: upload_constants_strings.FILE_LIST_DEFAULT,
  name: '',
  onRemove: () => undefined,
  onRetry: () => undefined,
  preview: false,
  size: ''
};
/* harmony default export */ var fileCard = (fileCard_FileCard);
// EXTERNAL MODULE: ../semi-foundation/upload/upload.scss
var upload = __webpack_require__("/t7F");

// CONCATENATED MODULE: ./upload/index.tsx






/* eslint-disable max-len */











const upload_prefixCls = upload_constants_cssClasses.PREFIX;


class upload_Upload extends baseComponent_BaseComponent {
  constructor(props) {
    super(props);
    this.inputRef = null;
    this.replaceInputRef = null;

    this.onClick = () => {
      const {
        inputRef,
        props
      } = this;
      const {
        onOpenFileDialog
      } = props;
      const isDisabled = Boolean(this.props.disabled);

      if (isDisabled || !inputRef || !inputRef.current) {
        return;
      }

      inputRef.current.click();

      if (onOpenFileDialog && typeof onOpenFileDialog) {
        onOpenFileDialog();
      }
    };

    this.onChange = e => {
      const {
        files
      } = e.target;
      this.foundation.handleChange(files);
    };

    this.replace = index => {
      this.setState({
        replaceIdx: index
      }, () => {
        this.replaceInputRef.current.click();
      });
    };

    this.onReplaceChange = e => {
      const {
        files
      } = e.target;
      this.foundation.handleReplaceChange(files);
    };

    this.clear = () => {
      this.foundation.handleClear();
    };

    this.remove = fileItem => {
      this.foundation.handleRemove(fileItem);
    };
    /**
     * ref method
     * insert files at index
     * @param files Array<CustomFile>
     * @param index number
     * @returns
     */


    this.insert = (files, index) => {
      return this.foundation.insertFileToList(files, index);
    };
    /**
     * ref method
     * manual upload by user
     */


    this.upload = () => {
      const {
        fileList
      } = this.state;
      this.foundation.startUpload(fileList);
    };

    this.renderFile = (file, index, locale) => {
      var _context;

      const {
        name,
        status,
        validateMessage,
        _sizeInvalid,
        uid
      } = file;
      const {
        previewFile,
        listType,
        itemStyle,
        showPicInfo,
        renderPicInfo,
        renderPicPreviewIcon,
        renderFileOperation,
        renderFileItem,
        renderThumbnail,
        disabled,
        onPreviewClick
      } = this.props;

      const onRemove = () => this.remove(file);

      const onRetry = () => {
        this.foundation.retry(file);
      };

      const onReplace = () => {
        this.replace(index);
      };

      const fileCardProps = assign_default()(assign_default()(assign_default()({}, pick_default()(this.props, ['showRetry', 'showReplace', ''])), file), {
        previewFile,
        listType,
        onRemove,
        onRetry,
        index,
        key: uid || concat_default()(_context = "".concat(name)).call(_context, index),
        style: itemStyle,
        disabled,
        showPicInfo,
        renderPicInfo,
        renderPicPreviewIcon,
        renderFileOperation,
        renderThumbnail,
        onReplace,
        onPreviewClick: typeof onPreviewClick !== 'undefined' ? () => this.foundation.handlePreviewClick(file) : undefined
      });

      if (status === upload_constants_strings.FILE_STATUS_UPLOAD_FAIL && !validateMessage) {
        fileCardProps.validateMessage = locale.fail;
      }

      if (_sizeInvalid && !validateMessage) {
        fileCardProps.validateMessage = locale.illegalSize;
      }

      if (typeof renderFileItem === 'undefined') {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(fileCard, assign_default()({}, fileCardProps));
      } else {
        return renderFileItem(fileCardProps);
      }
    };

    this.renderFileList = () => {
      const {
        listType
      } = this.props;

      if (listType === upload_constants_strings.FILE_LIST_PIC) {
        return this.renderFileListPic();
      }

      if (listType === upload_constants_strings.FILE_LIST_DEFAULT) {
        return this.renderFileListDefault();
      }

      return null;
    };

    this.renderFileListPic = () => {
      const {
        showUploadList,
        limit,
        disabled,
        children,
        draggable,
        hotSpotLocation
      } = this.props;
      const {
        fileList: stateFileList,
        dragAreaStatus
      } = this.state;
      const fileList = this.props.fileList || stateFileList;
      const showAddTriggerInList = limit ? limit > fileList.length : true;
      const dragAreaBaseCls = "".concat(upload_prefixCls, "-drag-area");
      const uploadAddCls = classnames_default()("".concat(upload_prefixCls, "-add"), {
        ["".concat(upload_prefixCls, "-picture-add")]: true,
        ["".concat(upload_prefixCls, "-picture-add-disabled")]: disabled
      });
      const fileListCls = classnames_default()("".concat(upload_prefixCls, "-file-list"), {
        ["".concat(upload_prefixCls, "-picture-file-list")]: true
      });
      const dragAreaCls = classnames_default()({
        ["".concat(dragAreaBaseCls, "-legal")]: dragAreaStatus === upload_constants_strings.DRAG_AREA_LEGAL,
        ["".concat(dragAreaBaseCls, "-illegal")]: dragAreaStatus === upload_constants_strings.DRAG_AREA_ILLEGAL
      });
      const mainCls = "".concat(upload_prefixCls, "-file-list-main");
      const addContentProps = {
        role: 'button',
        className: uploadAddCls,
        onClick: this.onClick
      };
      const containerProps = {
        className: fileListCls
      };
      const draggableProps = {
        onDrop: this.onDrop,
        onDragOver: this.onDragOver,
        onDragLeave: this.onDragLeave,
        onDragEnter: this.onDragEnter
      };

      if (draggable) {
        assign_default()(addContentProps, draggableProps, {
          className: classnames_default()(uploadAddCls, dragAreaCls)
        });
      }

      const addContent = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({}, addContentProps, {
        "x-semi-prop": "children"
      }), children);

      if (!showUploadList || !fileList.length) {
        if (showAddTriggerInList) {
          return addContent;
        }

        return null;
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
        componentName: "Upload"
      }, locale => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({}, containerProps), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: mainCls,
        role: "list",
        "aria-label": "picture list"
      }, showAddTriggerInList && hotSpotLocation === 'start' ? addContent : null, map_default()(fileList).call(fileList, (file, index) => this.renderFile(file, index, locale)), showAddTriggerInList && hotSpotLocation === 'end' ? addContent : null)));
    };

    this.renderFileListDefault = () => {
      const {
        showUploadList,
        limit,
        disabled
      } = this.props;
      const {
        fileList: stateFileList
      } = this.state;
      const fileList = this.props.fileList || stateFileList;
      const fileListCls = classnames_default()("".concat(upload_prefixCls, "-file-list"));
      const titleCls = "".concat(upload_prefixCls, "-file-list-title");
      const mainCls = "".concat(upload_prefixCls, "-file-list-main");
      const showTitle = limit !== 1 && fileList.length;
      const showClear = this.props.showClear && !disabled;
      const containerProps = {
        className: fileListCls
      };

      if (!showUploadList || !fileList.length) {
        return null;
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
        componentName: "Upload"
      }, locale => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", assign_default()({}, containerProps), showTitle ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: titleCls
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: "".concat(titleCls, "-choosen")
      }, locale.selectedFiles), showClear ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        role: "button",
        tabIndex: 0,
        onClick: this.clear,
        className: "".concat(titleCls, "-clear")
      }, locale.clear) : null) : null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: mainCls,
        role: "list",
        "aria-label": "file list"
      }, map_default()(fileList).call(fileList, (file, index) => this.renderFile(file, index, locale)))));
    };

    this.onDrop = e => {
      this.foundation.handleDrop(e);
    };

    this.onDragOver = e => {
      // When a drag element moves within the target element
      this.foundation.handleDragOver(e);
    };

    this.onDragLeave = e => {
      this.foundation.handleDragLeave(e);
    };

    this.onDragEnter = e => {
      this.foundation.handleDragEnter(e);
    };

    this.renderAddContent = () => {
      const {
        draggable,
        children,
        listType,
        disabled
      } = this.props;
      const uploadAddCls = classnames_default()("".concat(upload_prefixCls, "-add"));

      if (listType === upload_constants_strings.FILE_LIST_PIC) {
        return null;
      }

      if (draggable) {
        return this.renderDragArea();
      }

      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "button",
        tabIndex: 0,
        "aria-disabled": disabled,
        className: uploadAddCls,
        onClick: this.onClick
      }, children);
    };

    this.renderDragArea = () => {
      const {
        dragAreaStatus
      } = this.state;
      const {
        children,
        dragIcon,
        dragMainText,
        dragSubText,
        disabled
      } = this.props;
      const dragAreaBaseCls = "".concat(upload_prefixCls, "-drag-area");
      const dragAreaCls = classnames_default()(dragAreaBaseCls, {
        ["".concat(dragAreaBaseCls, "-legal")]: dragAreaStatus === upload_constants_strings.DRAG_AREA_LEGAL,
        ["".concat(dragAreaBaseCls, "-illegal")]: dragAreaStatus === upload_constants_strings.DRAG_AREA_ILLEGAL,
        ["".concat(dragAreaBaseCls, "-custom")]: children
      });
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
        componentName: "Upload"
      }, locale => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "button",
        tabIndex: 0,
        "aria-disabled": disabled,
        className: dragAreaCls,
        onDrop: this.onDrop,
        onDragOver: this.onDragOver,
        onDragLeave: this.onDragLeave,
        onDragEnter: this.onDragEnter,
        onClick: this.onClick
      }, children ? children : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(dragAreaBaseCls, "-icon"),
        "x-semi-prop": "dragIcon"
      }, dragIcon || /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconUpload, {
        size: "extra-large"
      })), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(dragAreaBaseCls, "-text")
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(dragAreaBaseCls, "-main-text"),
        "x-semi-prop": "dragMainText"
      }, dragMainText || locale.mainText), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(dragAreaBaseCls, "-sub-text"),
        "x-semi-prop": "dragSubText"
      }, dragSubText), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(dragAreaBaseCls, "-tips")
      }, dragAreaStatus === upload_constants_strings.DRAG_AREA_LEGAL && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: "".concat(dragAreaBaseCls, "-tips-legal")
      }, locale.legalTips), dragAreaStatus === upload_constants_strings.DRAG_AREA_ILLEGAL && /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        className: "".concat(dragAreaBaseCls, "-tips-illegal")
      }, locale.illegalTips))))));
    };

    this.state = {
      fileList: props.defaultFileList || [],
      replaceIdx: -1,
      inputKey: Math.random(),
      replaceInputKey: Math.random(),
      // Status of the drag zone
      dragAreaStatus: 'default',
      localUrls: []
    };
    this.foundation = new upload_foundation(this.adapter);
    this.inputRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
    this.replaceInputRef = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createRef();
  }
  /**
   * Notes:
   *   The input parameter and return value here do not declare the type, otherwise tsc may report an error in form/fields.tsx when wrap after withField
   *   `The types of the parameters "props" and "nextProps" are incompatible.
         The attribute "action" is missing in the type "Readonly<any>", but it is required in the type "UploadProps".`
   *   which seems to be a bug, remove props type declare here
   */


  static getDerivedStateFromProps(props) {
    const {
      fileList
    } = props;

    if ('fileList' in props) {
      return {
        fileList: fileList || []
      };
    }

    return null;
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      notifyFileSelect: files => this.props.onFileChange(files),
      notifyError: (error, fileInstance, fileList, xhr) => this.props.onError(error, fileInstance, fileList, xhr),
      notifySuccess: (responseBody, file, fileList) => this.props.onSuccess(responseBody, file, fileList),
      notifyProgress: (percent, file, fileList) => this.props.onProgress(percent, file, fileList),
      notifyRemove: (file, fileList, fileItem) => this.props.onRemove(file, fileList, fileItem),
      notifySizeError: (file, fileList) => this.props.onSizeError(file, fileList),
      notifyExceed: fileList => this.props.onExceed(fileList),
      updateFileList: (fileList, cb) => {
        if (typeof cb === 'function') {
          this.setState({
            fileList
          }, cb);
        } else {
          this.setState({
            fileList
          });
        }
      },
      notifyBeforeUpload: _ref => {
        let {
          file,
          fileList
        } = _ref;
        return this.props.beforeUpload({
          file,
          fileList
        });
      },
      notifyAfterUpload: _ref2 => {
        let {
          response,
          file,
          fileList
        } = _ref2;
        return this.props.afterUpload({
          response,
          file,
          fileList
        });
      },
      resetInput: () => {
        this.setState(prevState => ({
          inputKey: Math.random()
        }));
      },
      resetReplaceInput: () => {
        this.setState(prevState => ({
          replaceInputKey: Math.random()
        }));
      },
      updateDragAreaStatus: dragAreaStatus => this.setState({
        dragAreaStatus
      }),
      notifyChange: _ref3 => {
        let {
          currentFile,
          fileList
        } = _ref3;
        return this.props.onChange({
          currentFile,
          fileList
        });
      },
      updateLocalUrls: urls => this.setState({
        localUrls: urls
      }),
      notifyClear: () => this.props.onClear(),
      notifyPreviewClick: file => this.props.onPreviewClick(file),
      notifyDrop: (e, files, fileList) => this.props.onDrop(e, files, fileList),
      notifyAcceptInvalid: invalidFiles => this.props.onAcceptInvalid(invalidFiles),
      notifyBeforeRemove: (file, fileList) => this.props.beforeRemove(file, fileList),
      notifyBeforeClear: fileList => this.props.beforeClear(fileList)
    });
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  render() {
    const {
      style,
      className,
      multiple,
      accept,
      disabled,
      children,
      capture,
      listType,
      prompt,
      promptPosition,
      draggable,
      validateMessage,
      validateStatus,
      directory
    } = this.props;
    const uploadCls = classnames_default()(upload_prefixCls, {
      ["".concat(upload_prefixCls, "-picture")]: listType === upload_constants_strings.FILE_LIST_PIC,
      ["".concat(upload_prefixCls, "-disabled")]: disabled,
      ["".concat(upload_prefixCls, "-default")]: validateStatus === 'default',
      ["".concat(upload_prefixCls, "-error")]: validateStatus === 'error',
      ["".concat(upload_prefixCls, "-warning")]: validateStatus === 'warning',
      ["".concat(upload_prefixCls, "-success")]: validateStatus === 'success'
    }, className);
    const inputCls = classnames_default()("".concat(upload_prefixCls, "-hidden-input"));
    const inputReplaceCls = classnames_default()("".concat(upload_prefixCls, "-hidden-input-replace"));
    const promptCls = classnames_default()("".concat(upload_prefixCls, "-prompt"));
    const validateMsgCls = classnames_default()("".concat(upload_prefixCls, "-validate-message"));
    const dirProps = directory ? {
      directory: 'directory',
      webkitdirectory: 'webkitdirectory'
    } : {};
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: uploadCls,
      style: style,
      "x-prompt-pos": promptPosition
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("input", assign_default()({
      key: this.state.inputKey,
      capture: capture,
      multiple: multiple,
      accept: accept,
      onChange: this.onChange,
      type: "file",
      autoComplete: "off",
      tabIndex: -1,
      className: inputCls,
      ref: this.inputRef
    }, dirProps)), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("input", {
      key: this.state.replaceInputKey,
      multiple: false,
      accept: accept,
      onChange: this.onReplaceChange,
      type: "file",
      autoComplete: "off",
      tabIndex: -1,
      className: inputReplaceCls,
      ref: this.replaceInputRef
    }), this.renderAddContent(), prompt ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: promptCls,
      "x-semi-prop": "prompt"
    }, prompt) : null, validateMessage ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: validateMsgCls,
      "x-semi-prop": "validateMessage"
    }, validateMessage) : null, this.renderFileList());
  }

}

upload_Upload.propTypes = {
  accept: prop_types_default.a.string,
  action: prop_types_default.a.string.isRequired,
  afterUpload: prop_types_default.a.func,
  beforeClear: prop_types_default.a.func,
  beforeRemove: prop_types_default.a.func,
  beforeUpload: prop_types_default.a.func,
  children: prop_types_default.a.node,
  className: prop_types_default.a.string,
  customRequest: prop_types_default.a.func,
  data: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.func]),
  defaultFileList: prop_types_default.a.array,
  directory: prop_types_default.a.bool,
  disabled: prop_types_default.a.bool,
  dragIcon: prop_types_default.a.node,
  dragMainText: prop_types_default.a.node,
  dragSubText: prop_types_default.a.node,
  draggable: prop_types_default.a.bool,
  fileList: prop_types_default.a.array,
  fileName: prop_types_default.a.string,
  headers: prop_types_default.a.oneOfType([prop_types_default.a.object, prop_types_default.a.func]),
  hotSpotLocation: prop_types_default.a.oneOf(['start', 'end']),
  itemStyle: prop_types_default.a.object,
  limit: prop_types_default.a.number,
  listType: prop_types_default.a.oneOf(upload_constants_strings.LIST_TYPE),
  maxSize: prop_types_default.a.number,
  minSize: prop_types_default.a.number,
  multiple: prop_types_default.a.bool,
  name: prop_types_default.a.string,
  onAcceptInvalid: prop_types_default.a.func,
  onChange: prop_types_default.a.func,
  onClear: prop_types_default.a.func,
  onDrop: prop_types_default.a.func,
  onError: prop_types_default.a.func,
  onExceed: prop_types_default.a.func,
  onFileChange: prop_types_default.a.func,
  onOpenFileDialog: prop_types_default.a.func,
  onPreviewClick: prop_types_default.a.func,
  onProgress: prop_types_default.a.func,
  onRemove: prop_types_default.a.func,
  onRetry: prop_types_default.a.func,
  onSizeError: prop_types_default.a.func,
  onSuccess: prop_types_default.a.func,
  previewFile: prop_types_default.a.func,
  prompt: prop_types_default.a.node,
  promptPosition: prop_types_default.a.oneOf(upload_constants_strings.PROMPT_POSITION),
  renderFileItem: prop_types_default.a.func,
  renderPicPreviewIcon: prop_types_default.a.func,
  renderFileOperation: prop_types_default.a.func,
  renderPicInfo: prop_types_default.a.func,
  renderThumbnail: prop_types_default.a.func,
  showClear: prop_types_default.a.bool,
  showPicInfo: prop_types_default.a.bool,
  showReplace: prop_types_default.a.bool,
  showRetry: prop_types_default.a.bool,
  showUploadList: prop_types_default.a.bool,
  style: prop_types_default.a.object,
  timeout: prop_types_default.a.number,
  transformFile: prop_types_default.a.func,
  uploadTrigger: prop_types_default.a.oneOf(upload_constants_strings.UPLOAD_TRIGGER),
  validateMessage: prop_types_default.a.node,
  validateStatus: prop_types_default.a.oneOf(upload_constants_strings.VALIDATE_STATUS),
  withCredentials: prop_types_default.a.bool
};
upload_Upload.defaultProps = {
  defaultFileList: [],
  disabled: false,
  listType: 'list',
  hotSpotLocation: 'end',
  multiple: false,
  onAcceptInvalid: noop_default.a,
  onChange: noop_default.a,
  beforeRemove: () => true,
  beforeClear: () => true,
  onClear: noop_default.a,
  onDrop: noop_default.a,
  onError: noop_default.a,
  onExceed: noop_default.a,
  onFileChange: noop_default.a,
  onOpenFileDialog: noop_default.a,
  onProgress: noop_default.a,
  onRemove: noop_default.a,
  onRetry: noop_default.a,
  onSizeError: noop_default.a,
  onSuccess: noop_default.a,
  promptPosition: 'right',
  showClear: true,
  showPicInfo: false,
  showReplace: false,
  showRetry: true,
  showUploadList: true,
  uploadTrigger: 'auto',
  withCredentials: false
};
upload_Upload.FileCard = fileCard;
/* harmony default export */ var upload_0 = (upload_Upload);
// CONCATENATED MODULE: ../semi-foundation/transfer/constants.ts

const transfer_constants_cssClasses = {
  PREFIX: "".concat(BASE_CLASS_PREFIX, "-transfer")
};
const transfer_constants_strings = {
  TYPE_GROUP_LIST: 'groupList',
  TYPE_LIST: 'list',
  TYPE_TREE_TO_LIST: 'treeList'
};
const transfer_constants_numbers = {};

// CONCATENATED MODULE: ../semi-foundation/transfer/transferUtils.ts












var transferUtils_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};


function _generateGroupedData(dataSource) {
  const newData = [];

  for (const group of dataSource) {
    var _context;

    for_each_default()(_context = group.children).call(_context, item => {
      const {
        children
      } = group,
            rest = transferUtils_rest(group, ["children"]);

      newData.push(assign_default()(assign_default()({}, item), {
        _parent: rest
      }));
    });
  }

  return newData;
} // DFS

function _generateTreeData(dataSource) {
  var _context2;

  const newData = [];

  const stack = reverse_default()(_context2 = [...dataSource]).call(_context2);

  while (stack.length) {
    const current = stack.pop();
    current.path = current.path || [omit_default()(current, ['children'])];

    if (current.children && is_array_default()(current.children)) {
      const nodes = current.children;

      for (let i = nodes.length - 1; i >= 0; i--) {
        var _context3, _context4;

        const child = assign_default()({}, nodes[i]);

        child.path = concat_default()(_context3 = concat_default()(_context4 = []).call(_context4, current.path)).call(_context3, omit_default()(child, ['children']));
        stack.push(child);
      }
    } else {
      current.isLeaf = true;
    }

    newData.push(omit_default()(current, ['children']));
  }

  return newData;
}
function _generateDataByType(dataSource, type) {
  const newData = slice_default()(dataSource).call(dataSource) || [];

  if (type === transfer_constants_strings.TYPE_GROUP_LIST) {
    return _generateGroupedData(newData);
  }

  if (type === transfer_constants_strings.TYPE_TREE_TO_LIST) {
    return _generateTreeData(newData);
  }

  return newData;
}
function _generateSelectedItems(value, data) {
  const selectedItems = new core_js_stable_map_default.a();

  for_each_default()(value).call(value, val => {
    const index = find_index_default()(data).call(data, option => option.value === val);

    if (index !== -1) {
      const option = data[index];
      selectedItems.set(option.key, option);
    }
  });

  return selectedItems;
}
// CONCATENATED MODULE: ../semi-foundation/transfer/foundation.ts












 // eslint-disable-next-line max-len

class foundation_TransferFoundation extends foundation {
  constructor(adapter) {
    super(assign_default()({}, adapter));
  }

  _generateGroupedData(dataSource) {
    return _generateGroupedData(dataSource);
  }

  _generateTreeData(dataSource) {
    return _generateTreeData(dataSource);
  }

  _generatePath(item) {
    const {
      path = []
    } = item;
    return map_default()(path).call(path, p => p.label).join(' > ');
  }

  handleInputChange(inputVal) {
    const {
      data
    } = this.getStates();
    const {
      filter,
      type
    } = this.getProps();

    if (type === transfer_constants_strings.TYPE_TREE_TO_LIST) {
      const searchResult = new set_default.a(map_default()(data).call(data, item => item.key));

      this._adapter.searchTree(inputVal);

      this._adapter.notifySearch(inputVal);

      this._adapter.updateInput(inputVal);

      this._adapter.updateSearchResult(searchResult);

      return;
    }

    const filterFunc = typeof filter === 'function' ? item => filter(inputVal, item) : item => {
      var _context;

      return typeof item.label === 'string' && includes_default()(_context = item.label).call(_context, inputVal);
    };

    const searchData = filter_default()(data).call(data, filterFunc);

    const searchResult = new set_default.a(map_default()(searchData).call(searchData, item => item.key));

    this._adapter.notifySearch(inputVal);

    this._adapter.updateInput(inputVal);

    this._adapter.updateSearchResult(searchResult);
  } // Select or cancel all unhidden items


  handleAll(wantAllChecked) {
    const {
      disabled,
      type
    } = this.getProps();
    const {
      selectedItems,
      data,
      searchResult,
      inputValue
    } = this.getStates();

    if (disabled) {
      return;
    }

    const inSearchMode = inputValue !== '';
    let operateData = [];
    operateData = inSearchMode ? filter_default()(data).call(data, item => searchResult.has(item.key)) : data;
    operateData = type === transfer_constants_strings.TYPE_TREE_TO_LIST ? data : operateData;
    let newSelectedItems = new core_js_stable_map_default.a();

    switch (true) {
      case !wantAllChecked:
        newSelectedItems = new core_js_stable_map_default.a(selectedItems);

        for_each_default()(operateData).call(operateData, item => {
          // If the item is disabled, keep it
          if (!item.disabled) {
            newSelectedItems.delete(item.key);
          }
        });

        break;

      case wantAllChecked:
        newSelectedItems = new core_js_stable_map_default.a(selectedItems);

        for_each_default()(operateData).call(operateData, item => {
          if (item.disabled) {
            // The disabled item, judge whether it is selected, if it is selected, still need to add the selection
            if (selectedItems.has(item.key)) {
              newSelectedItems.set(item.key, item);
            }

            return;
          }

          newSelectedItems.set(item.key, item);
        });

        break;

      default:
        break;
    }

    if (!this._isControlledComponent()) {
      this._adapter.updateSelected(newSelectedItems);
    }

    this._notifyChange(newSelectedItems);
  }

  handleClear() {
    const {
      disabled
    } = this.getProps();
    const {
      selectedItems,
      data
    } = this.getStates();

    if (disabled) {
      return;
    }

    const newSelectedItems = new core_js_stable_map_default.a(selectedItems);

    for_each_default()(data).call(data, item => {
      // If the item is disabled, keep it
      if (!item.disabled) {
        newSelectedItems.delete(item.key);
      }
    });

    if (!this._isControlledComponent()) {
      this._adapter.updateSelected(newSelectedItems);
    }

    this._notifyChange(newSelectedItems);
  }

  handleSelectOrRemove(item) {
    const {
      disabled
    } = this.getProps();

    const selectedItems = this._adapter.getSelected();

    if (disabled || item.disabled) {
      return;
    }

    if (selectedItems.has(item.key)) {
      selectedItems.delete(item.key);

      this._adapter.notifyDeselect(item);
    } else {
      selectedItems.set(item.key, item);

      this._adapter.notifySelect(item);
    }

    if (!this._isControlledComponent()) {
      this._adapter.updateSelected(selectedItems);
    }

    this._notifyChange(selectedItems);
  }

  handleSelect(values) {
    const {
      disabled
    } = this.getProps();

    const selectedItems = this._adapter.getSelected();

    const {
      data
    } = this.getStates();

    const dataItems = map_default()(data).call(data, d => [d.value, d]);

    const allItemsMap = new core_js_stable_map_default.a(dataItems);
    const nextSelectedItemsMap = new core_js_stable_map_default.a();

    if (disabled) {
      return;
    }

    for_each_default()(values).call(values, value => {
      const node = allItemsMap.get(value); // The value passed in is an array of the value used, but the internal selectedItems stores a map of keys

      if (selectedItems.has(node.key)) {
        nextSelectedItemsMap.set(node.key, node);
        return;
      }

      if (node.disabled) {
        return;
      }

      nextSelectedItemsMap.set(node.key, node);
      return;
    });

    if (!this._isControlledComponent()) {
      this._adapter.updateSelected(nextSelectedItemsMap);
    }

    this._notifyChange(nextSelectedItemsMap);
  }

  getValuesAndItemsFromMap(selectedItems) {
    const {
      type
    } = this.getProps();
    const items = [];
    const values = [];

    for (const item of selectedItems) {
      const obj = type === transfer_constants_strings.TYPE_GROUP_LIST ? omit_default()(item[1], '_parent') : item[1];
      items.push(obj);
      values.push(obj.value);
    }

    return {
      items,
      values
    };
  }

  _notifyChange(selectedItems) {
    const {
      items,
      values
    } = this.getValuesAndItemsFromMap(selectedItems);

    this._adapter.notifyChange(values, items);
  }

  handleSortEnd(callbackProps) {
    const {
      oldIndex,
      newIndex
    } = callbackProps;

    const selectedItems = this._adapter.getSelected();

    let selectedArr = [...instance_values_default()(selectedItems).call(selectedItems)];
    selectedArr = arrayMove(selectedArr, oldIndex, newIndex);
    let newSelectedItems = new core_js_stable_map_default.a();

    for_each_default()(selectedArr).call(selectedArr, option => {
      newSelectedItems = newSelectedItems.set(option.key, option);
    });

    this._adapter.updateSelected(newSelectedItems);

    this._notifyChange(newSelectedItems);
  }

}
// EXTERNAL MODULE: ../semi-foundation/transfer/transfer.scss
var transfer = __webpack_require__("mo0a");

// CONCATENATED MODULE: ./transfer/index.tsx
































const transfer_prefixcls = transfer_constants_cssClasses.PREFIX;

class transfer_Transfer extends baseComponent_BaseComponent {
  constructor(props) {
    var _context, _context2, _context3;

    super(props);
    this._treeRef = null;
    const {
      defaultValue = [],
      dataSource,
      type
    } = props;
    this.foundation = new foundation_TransferFoundation(this.adapter);
    this.state = {
      data: [],
      selectedItems: new core_js_stable_map_default.a(),
      searchResult: new set_default.a(),
      inputValue: ''
    };

    if (Boolean(dataSource) && isArray_default()(dataSource)) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore Avoid reporting errors this.state.xxx is read-only
      this.state.data = _generateDataByType(dataSource, type);
    }

    if (Boolean(defaultValue) && isArray_default()(defaultValue)) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore Avoid reporting errors this.state.xxx is read-only
      this.state.selectedItems = _generateSelectedItems(defaultValue, this.state.data);
    }

    this.onSelectOrRemove = bind_default()(_context = this.onSelectOrRemove).call(_context, this);
    this.onInputChange = bind_default()(_context2 = this.onInputChange).call(_context2, this);
    this.onSortEnd = bind_default()(_context3 = this.onSortEnd).call(_context3, this);
  }

  static getDerivedStateFromProps(props, state) {
    const {
      value,
      dataSource,
      type,
      filter
    } = props;
    const mergedState = {};
    let newData = state.data;
    let newSelectedItems = state.selectedItems;

    if (Boolean(dataSource) && is_array_default()(dataSource)) {
      newData = _generateDataByType(dataSource, type);
      mergedState.data = newData;
    }

    if (Boolean(value) && is_array_default()(value)) {
      newSelectedItems = _generateSelectedItems(value, newData);
      mergedState.selectedItems = newSelectedItems;
    }

    if (!isEqual_default()(state.data, newData)) {
      if (typeof state.inputValue === 'string' && state.inputValue !== '') {
        const filterFunc = typeof filter === 'function' ? item => filter(state.inputValue, item) : item => {
          var _context4;

          return typeof item.label === 'string' && includes_default()(_context4 = item.label).call(_context4, state.inputValue);
        };

        const searchData = filter_default()(newData).call(newData, filterFunc);

        const searchResult = new set_default.a(map_default()(searchData).call(searchData, item => item.key));
        mergedState.searchResult = searchResult;
      }
    }

    return isEmpty_default()(mergedState) ? null : mergedState;
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      getSelected: () => new core_js_stable_map_default.a(this.state.selectedItems),
      updateSelected: selectedItems => {
        this.setState({
          selectedItems
        });
      },
      notifyChange: (values, items) => {
        this.props.onChange(values, items);
      },
      notifySearch: input => {
        this.props.onSearch(input);
      },
      notifySelect: item => {
        this.props.onSelect(item);
      },
      notifyDeselect: item => {
        this.props.onDeselect(item);
      },
      updateInput: input => {
        this.setState({
          inputValue: input
        });
      },
      updateSearchResult: searchResult => {
        this.setState({
          searchResult
        });
      },
      searchTree: keyword => {
        this._treeRef && this._treeRef.search(keyword); // TODO check this._treeRef.current?
      }
    });
  }

  onInputChange(value) {
    this.foundation.handleInputChange(value);
  }

  onSelectOrRemove(item) {
    this.foundation.handleSelectOrRemove(item);
  }

  onSortEnd(callbackProps) {
    this.foundation.handleSortEnd(callbackProps);
  }

  renderFilter(locale) {
    const {
      inputProps,
      filter,
      disabled
    } = this.props;

    if (typeof filter === 'boolean' && !filter) {
      return null;
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      role: "search",
      "aria-label": "Transfer filter",
      className: "".concat(transfer_prefixcls, "-filter")
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(input_0, assign_default()({
      prefix: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconSearch, null),
      placeholder: locale.placeholder,
      showClear: true,
      value: this.state.inputValue,
      disabled: disabled,
      onChange: this.onInputChange
    }, inputProps)));
  }

  renderHeader(headerConfig) {
    const {
      disabled
    } = this.props;
    const {
      totalContent,
      allContent,
      onAllClick,
      type,
      showButton
    } = headerConfig;
    const headerCls = classnames_default()({
      ["".concat(transfer_prefixcls, "-header")]: true,
      ["".concat(transfer_prefixcls, "-right-header")]: type === 'right',
      ["".concat(transfer_prefixcls, "-left-header")]: type === 'left'
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: headerCls
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
      className: "".concat(transfer_prefixcls, "-header-total")
    }, totalContent), showButton ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(button_0, {
      theme: "borderless",
      disabled: disabled,
      type: "tertiary",
      size: "small",
      className: "".concat(transfer_prefixcls, "-header-all"),
      onClick: onAllClick
    }, allContent) : null);
  }

  renderLeftItem(item, index) {
    const {
      renderSourceItem,
      disabled
    } = this.props;
    const {
      selectedItems
    } = this.state;
    const checked = selectedItems.has(item.key);

    if (renderSourceItem) {
      return renderSourceItem(assign_default()(assign_default()({}, item), {
        checked,
        onChange: () => this.onSelectOrRemove(item)
      }));
    }

    const leftItemCls = classnames_default()({
      ["".concat(transfer_prefixcls, "-item")]: true,
      ["".concat(transfer_prefixcls, "-item-disabled")]: item.disabled
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(checkbox_checkbox_0, {
      key: index,
      disabled: item.disabled || disabled,
      className: leftItemCls,
      checked: checked,
      role: "listitem",
      onChange: () => this.onSelectOrRemove(item),
      "x-semi-children-alias": "dataSource[".concat(index, "].label")
    }, item.label);
  }

  renderLeft(locale) {
    var _context5;

    const {
      data,
      selectedItems,
      inputValue,
      searchResult
    } = this.state;
    const {
      loading,
      type,
      emptyContent,
      renderSourcePanel,
      dataSource
    } = this.props;
    const totalToken = locale.total;
    const inSearchMode = inputValue !== '';
    const showNumber = inSearchMode ? searchResult.size : data.length;
    const filterData = inSearchMode ? filter_default()(data).call(data, item => searchResult.has(item.key)) : data; // Whether to select all should be a judgment, whether the filtered data on the left is a subset of the selected items
    // For example, the filtered data on the left is 1, 3, 4;
    // The selected option is 1,2,3,4, it is true
    // The selected option is 2,3,4, then it is false

    const leftContainesNotInSelected = Boolean(find_default()(filterData).call(filterData, f => !selectedItems.has(f.key)));
    const totalText = totalToken.replace('${total}', "".concat(showNumber));
    const headerConfig = {
      totalContent: totalText,
      allContent: leftContainesNotInSelected ? locale.selectAll : locale.clearSelectAll,
      onAllClick: () => this.foundation.handleAll(leftContainesNotInSelected),
      type: 'left',
      showButton: type !== transfer_constants_strings.TYPE_TREE_TO_LIST
    };
    const inputCom = this.renderFilter(locale);
    const headerCom = this.renderHeader(headerConfig);
    const noMatch = inSearchMode && searchResult.size === 0;
    const emptySearch = emptyContent.search ? emptyContent.search : locale.emptySearch;
    const emptyLeft = emptyContent.left ? emptyContent.left : locale.emptyLeft;
    const emptyCom = this.renderEmpty('left', inputValue ? emptySearch : emptyLeft);
    const loadingCom = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(spin_0, null);
    let content = null;

    switch (true) {
      case loading:
        content = loadingCom;
        break;

      case noMatch:
        content = emptyCom;
        break;

      case type === transfer_constants_strings.TYPE_TREE_TO_LIST:
        content = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, headerCom, this.renderLeftTree());
        break;

      case !noMatch && (type === transfer_constants_strings.TYPE_LIST || type === transfer_constants_strings.TYPE_GROUP_LIST):
        content = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, headerCom, this.renderLeftList(filterData));
        break;

      default:
        content = null;
        break;
    }

    const {
      values
    } = this.foundation.getValuesAndItemsFromMap(selectedItems);
    const renderProps = {
      loading,
      noMatch,
      filterData,
      sourceData: data,
      propsDataSource: dataSource,
      allChecked: !leftContainesNotInSelected,
      showNumber,
      inputValue,
      selectedItems,
      value: values,
      onSelect: bind_default()(_context5 = this.foundation.handleSelect).call(_context5, this.foundation),
      onAllClick: () => this.foundation.handleAll(leftContainesNotInSelected),
      onSearch: this.onInputChange,
      onSelectOrRemove: item => this.onSelectOrRemove(item)
    };

    if (renderSourcePanel) {
      return renderSourcePanel(renderProps);
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("section", {
      className: "".concat(transfer_prefixcls, "-left")
    }, inputCom, content);
  }

  renderGroupTitle(group, index) {
    const groupCls = classnames_default()("".concat(transfer_prefixcls, "-group-title"));
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: groupCls,
      key: "title-".concat(index)
    }, group.title);
  }

  renderLeftTree() {
    const {
      selectedItems
    } = this.state;
    const {
      disabled,
      dataSource,
      treeProps
    } = this.props;
    const {
      values
    } = this.foundation.getValuesAndItemsFromMap(selectedItems);

    const onChange = value => {
      this.foundation.handleSelect(value);
    };

    const restTreeProps = omit_default()(treeProps, ['value', 'ref', 'onChange']);

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(tree_0, assign_default()({
      disabled: disabled,
      treeData: dataSource,
      multiple: true,
      disableStrictly: true,
      value: values,
      defaultExpandAll: true,
      leafOnly: true,
      ref: tree => this._treeRef = tree,
      filterTreeNode: true,
      searchRender: false,
      searchStyle: {
        padding: 0
      },
      style: {
        flex: 1,
        overflow: 'overlay'
      },
      onChange: onChange
    }, restTreeProps));
  }

  renderLeftList(visibileItems) {
    const content = [];
    const groupStatus = new core_js_stable_map_default.a();

    for_each_default()(visibileItems).call(visibileItems, (item, index) => {
      const parentGroup = item._parent;
      const optionContent = this.renderLeftItem(item, index);

      if (parentGroup && groupStatus.has(parentGroup.title)) {
        // group content already insert
        content.push(optionContent);
      } else if (parentGroup) {
        const groupContent = this.renderGroupTitle(parentGroup, index);
        groupStatus.set(parentGroup.title, true);
        content.push(groupContent);
        content.push(optionContent);
      } else {
        content.push(optionContent);
      }
    });

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: "".concat(transfer_prefixcls, "-left-list"),
      role: "list",
      "aria-label": "Option list"
    }, content);
  }

  renderRightItem(item) {
    const {
      renderSelectedItem,
      draggable,
      type,
      showPath
    } = this.props;

    const onRemove = () => this.foundation.handleSelectOrRemove(item);

    const rightItemCls = classnames_default()({
      ["".concat(transfer_prefixcls, "-item")]: true,
      ["".concat(transfer_prefixcls, "-right-item")]: true,
      ["".concat(transfer_prefixcls, "-right-item-draggable")]: draggable
    });
    const shouldShowPath = type === transfer_constants_strings.TYPE_TREE_TO_LIST && showPath === true;
    const label = shouldShowPath ? this.foundation._generatePath(item) : item.label;

    if (renderSelectedItem) {
      return renderSelectedItem(assign_default()(assign_default()({}, item), {
        onRemove,
        sortableHandle: sortableHandle
      }));
    }

    const DragHandle = sortableHandle(() => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconHandle, {
      role: "button",
      "aria-label": "Drag and sort",
      className: "".concat(transfer_prefixcls, "-right-item-drag-handler")
    }));
    return (
      /*#__PURE__*/
      // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        role: "listitem",
        className: rightItemCls,
        key: item.key
      }, draggable ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(DragHandle, null) : null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(transfer_prefixcls, "-right-item-text")
      }, label), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconClose, {
        onClick: onRemove,
        "aria-disabled": item.disabled,
        className: classnames_default()("".concat(transfer_prefixcls, "-item-close-icon"), {
          ["".concat(transfer_prefixcls, "-item-close-icon-disabled")]: item.disabled
        })
      }))
    );
  }

  renderEmpty(type, emptyText) {
    const emptyCls = classnames_default()({
      ["".concat(transfer_prefixcls, "-empty")]: true,
      ["".concat(transfer_prefixcls, "-right-empty")]: type === 'right',
      ["".concat(transfer_prefixcls, "-left-empty")]: type === 'left'
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      "aria-label": "empty",
      className: emptyCls
    }, emptyText);
  }

  renderRightSortableList(selectedData) {
    // when choose some items && draggable is true
    const SortableItem = sortableElement(props => this.renderRightItem(props.item));
    const SortableList = sortableContainer(_ref => {
      let {
        items
      } = _ref;
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: "".concat(transfer_prefixcls, "-right-list"),
        role: "list",
        "aria-label": "Selected list"
      }, map_default()(items).call(items, (item, index) =>
      /*#__PURE__*/
      // @ts-ignore skip SortableItem type check
      external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(SortableItem, {
        key: item.label,
        index: index,
        item: item
      }))) // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore see reasons: https://github.com/clauderic/react-sortable-hoc/issues/206
      ;
    }, {
      distance: 10
    }); // @ts-ignore skip SortableItem type check

    const sortList = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(SortableList, {
      useDragHandle: true,
      onSortEnd: this.onSortEnd,
      items: selectedData
    });
    return sortList;
  }

  renderRight(locale) {
    const {
      selectedItems
    } = this.state;
    const {
      emptyContent,
      renderSelectedPanel,
      draggable
    } = this.props;
    const selectedData = [...instance_values_default()(selectedItems).call(selectedItems)]; // when custom render panel

    const renderProps = {
      length: selectedData.length,
      selectedData,
      onClear: () => this.foundation.handleClear(),
      onRemove: item => this.foundation.handleSelectOrRemove(item),
      onSortEnd: props => this.onSortEnd(props)
    };

    if (renderSelectedPanel) {
      return renderSelectedPanel(renderProps);
    }

    const selectedToken = locale.selected;
    const selectedText = selectedToken.replace('${total}', "".concat(selectedData.length));
    const headerConfig = {
      totalContent: selectedText,
      allContent: locale.clear,
      onAllClick: () => this.foundation.handleClear(),
      type: 'right',
      showButton: Boolean(selectedData.length)
    };
    const headerCom = this.renderHeader(headerConfig);
    const emptyCom = this.renderEmpty('right', emptyContent.right ? emptyContent.right : locale.emptyRight);
    const panelCls = "".concat(transfer_prefixcls, "-right");
    let content = null;

    switch (true) {
      // when empty
      case !selectedData.length:
        content = emptyCom;
        break;

      case selectedData.length && !draggable:
        const list = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
          className: "".concat(transfer_prefixcls, "-right-list"),
          role: "list",
          "aria-label": "Selected list"
        }, map_default()(selectedData).call(selectedData, item => this.renderRightItem(assign_default()({}, item))));
        content = list;
        break;

      case selectedData.length && draggable:
        content = this.renderRightSortableList(selectedData);
        break;

      default:
        break;
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("section", {
      className: panelCls
    }, headerCom, content);
  }

  render() {
    const {
      className,
      style,
      disabled,
      renderSelectedPanel,
      renderSourcePanel
    } = this.props;
    const transferCls = classnames_default()(transfer_prefixcls, className, {
      ["".concat(transfer_prefixcls, "-disabled")]: disabled,
      ["".concat(transfer_prefixcls, "-custom-panel")]: renderSelectedPanel && renderSourcePanel
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(localeConsumer_LocaleConsumer, {
      componentName: "Transfer"
    }, locale => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: transferCls,
      style: style
    }, this.renderLeft(locale), this.renderRight(locale)));
  }

}

transfer_Transfer.propTypes = {
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  disabled: prop_types_default.a.bool,
  dataSource: prop_types_default.a.array,
  filter: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.bool]),
  onSearch: prop_types_default.a.func,
  inputProps: prop_types_default.a.object,
  value: prop_types_default.a.array,
  defaultValue: prop_types_default.a.array,
  onChange: prop_types_default.a.func,
  onSelect: prop_types_default.a.func,
  onDeselect: prop_types_default.a.func,
  renderSourceItem: prop_types_default.a.func,
  renderSelectedItem: prop_types_default.a.func,
  loading: prop_types_default.a.bool,
  type: prop_types_default.a.oneOf(['list', 'groupList', 'treeList']),
  treeProps: prop_types_default.a.object,
  showPath: prop_types_default.a.bool,
  emptyContent: prop_types_default.a.shape({
    search: prop_types_default.a.node,
    left: prop_types_default.a.node,
    right: prop_types_default.a.node
  }),
  renderSourcePanel: prop_types_default.a.func,
  renderSelectedPanel: prop_types_default.a.func,
  draggable: prop_types_default.a.bool
};
transfer_Transfer.defaultProps = {
  type: transfer_constants_strings.TYPE_LIST,
  dataSource: [],
  onSearch: noop_default.a,
  onChange: noop_default.a,
  onSelect: noop_default.a,
  onDeselect: noop_default.a,
  onClear: noop_default.a,
  defaultValue: [],
  emptyContent: {},
  showPath: false
};
/* harmony default export */ var transfer_0 = (transfer_Transfer);
// CONCATENATED MODULE: ./locale/localeProvider.tsx




class localeProvider_LocaleProvider extends external_root_React_commonjs2_react_commonjs_react_amd_react_["Component"] {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const {
      children,
      locale
    } = this.props;
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(locale_context.Provider, {
      value: locale
    }, children);
  }

}
localeProvider_LocaleProvider.propTypes = {
  locale: prop_types_default.a.object,
  children: prop_types_default.a.node
};
localeProvider_LocaleProvider.defaultProps = {
  locale: source_zh_CN
};
// EXTERNAL MODULE: /home/runner/work/semi-design/semi-design/node_modules/async-validator/dist-web/index.js
var dist_web = __webpack_require__("b96R");

// CONCATENATED MODULE: ../semi-foundation/form/utils.ts








var form_utils_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable prefer-destructuring */

/* eslint-disable prefer-const */

/* eslint-disable @typescript-eslint/no-unused-vars */




/**
 *
 * @param WrappedComponent React.ComponentType | any
 */
function getDisplayName(WrappedComponent) {
  const originName = WrappedComponent.displayName || WrappedComponent.name;
  return originName ? "SemiField".concat(originName) : 'SemiField';
}
function generateValidatesFromRules(field) {
  let rules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  const descriptor = {};
  descriptor[field] = rules;
  const validator = new dist_web["a" /* default */](descriptor);
  return validator;
}
function isRequired() {
  let rules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let required = false;

  if (typeof rules === 'object' && 'required' in rules) {
    required = rules.required;
  } else if (is_array_default()(rules) && rules.length) {
    for_each_default()(rules).call(rules, rule => {
      rule.required ? required = true : null;
    });
  }

  return required;
}
function utils_isValid(errors) {
  let valid = true;

  if (typeof errors === 'string' && errors.length) {
    valid = false;
  } else if (is_array_default()(errors) && errors.length) {
    valid = every_default()(errors).call(errors, error => utils_isValid(error));
  } else if (typeof errors === 'boolean') {
    valid = errors;
  } else if (errors && typeof errors.$$typeof === 'symbol' && errors.$$typeof.toString() === 'Symbol(react.element)') {
    // when error message is reactNode
    valid = false;
  }

  return valid;
} // Compatible with String and Array

function transformTrigger(trigger) {
  let result = [];

  if (is_array_default()(trigger)) {
    result = trigger;
  }

  if (typeof trigger === 'string') {
    result[0] = trigger;
  }

  return result;
}

function mergeOptions(opts, props) {
  // Opts: different types of component identification value, value change callback function may be inconsistent, used to adapt 1, input, select 2, radio, checkbox 3, switch
  // valueKey: input, select class component control value props are value, and checkbox, switch is checked
  // eg：checkbox、radio   { valueKey: 'checked', onKeyChangeFnName: 'onChange', valuePath: 'target.value' }
  const defaultOpts = {
    valueKey: 'value',
    onKeyChangeFnName: 'onChange',
    valuePath: '',
    maintainCursor: false,
    shouldInject: true,
    shouldMemo: true
  };

  const options = assign_default()(assign_default()({}, defaultOpts), opts); // If the field attribute is declared, then the injection is carried out (mainly used to deal with the case where Checkbox and Radio are used separately from the Group); other cases are subject to options


  const shouldInject = 'field' in props ? true : options.shouldInject;
  return {
    options,
    shouldInject
  };
}
function mergeProps(props) {
  const defaultProps = {
    trigger: 'change',
    // validateStatus: 'default',
    allowEmptyString: false,
    allowEmpty: false,
    emptyValue: '',
    noLabel: false,
    noErrorMessage: false,
    isInInputGroup: false,
    stopValidateWithError: false
  };

  let _a = assign_default()(assign_default()({}, defaultProps), props),
      {
    field,
    label,
    labelPosition,
    labelWidth,
    labelAlign,
    labelCol,
    wrapperCol,
    initValue,
    validate,

    /**
     * error、warning、default、success
     */
    validateStatus,

    /**
     * change、blur、custom、mount
     */
    trigger,
    allowEmptyString,
    allowEmpty,
    emptyValue,
    rules,
    onChange,
    keepState,
    // Conversion before validation
    transform,
    name,
    fieldClassName,
    fieldStyle,
    noLabel,
    noErrorMessage,
    isInInputGroup,
    stopValidateWithError,
    convert,
    showValidateIcon,
    helpText,
    extraText,
    extraTextPosition,
    pure,
    id
  } = _a,
      rest = form_utils_rest(_a, ["field", "label", "labelPosition", "labelWidth", "labelAlign", "labelCol", "wrapperCol", "initValue", "validate", "validateStatus", "trigger", "allowEmptyString", "allowEmpty", "emptyValue", "rules", "onChange", "keepState", "transform", "name", "fieldClassName", "fieldStyle", "noLabel", "noErrorMessage", "isInInputGroup", "stopValidateWithError", "convert", "showValidateIcon", "helpText", "extraText", "extraTextPosition", "pure", "id"]); // Form中的任何类型组件，初始值都统一通过initValue字段来传入，同时将可能会导致组件行为错误的props抽取出来，防止透传到组件中
  // For any type of field component in Form, the initial value is uniformly passed in through the initValue field.
  // At the same time, the props that may cause component behavior errors are extracted to prevent transparent transmission to the component.


  delete rest.defaultChecked;
  delete rest.defaultValue;
  delete rest.checked;

  if (typeof initValue !== 'undefined') {
    initValue = cloneDeep_default()(initValue);
  }

  const required = isRequired(rules);
  trigger = transformTrigger(trigger);
  emptyValue = typeof emptyValue !== 'undefined' ? emptyValue : '';
  return {
    field,
    label,
    labelPosition,
    labelWidth,
    labelAlign,
    labelCol,
    wrapperCol,
    noLabel,
    noErrorMessage,
    isInInputGroup,
    initValue,
    validate,
    validateStatus,
    trigger,
    allowEmptyString,
    allowEmpty,
    emptyValue,
    rules,
    required,
    keepState,
    transform,
    name,
    fieldClassName,
    fieldStyle,
    convert,
    stopValidateWithError,
    showValidateIcon,
    helpText,
    extraText,
    extraTextPosition,
    pure,
    rest,
    id
  };
}

function bothEmptyArray(val, otherVal) {
  return is_array_default()(val) && is_array_default()(otherVal) && !val.length && !otherVal.length;
}
// CONCATENATED MODULE: ../semi-foundation/form/foundation.ts














/* eslint-disable prefer-const, max-len */







class foundation_FormFoundation extends foundation {
  constructor(adapter) {
    var _context, _context2, _context3, _context4, _context5, _context6, _context7, _context8, _context9, _context10, _context11, _context12, _context13, _context14, _context15, _context16, _context17, _context18, _context19, _context20;

    super(assign_default()({}, adapter));
    /*
        Also need to read initValue here, because the Form level can set the initial value,
        and the Field level can also set the initial value.
        The field set in the Form does not necessarily have a Field entity,
        so you cannot completely rely on the register moment to set the initial value
         这里也需要读一次initValue，因为Form级别可设置初始值，Field级别也可设置初始值.
        Form中设置的字段，不一定会存在Field实体，所以不能完全依赖register时刻来设置初始值
    */

    let {
      initValues
    } = this._adapter.getProps();

    initValues = this._adapter.cloneDeep(initValues);
    this.data = {
      values: initValues ? initValues : {},
      errors: {},
      touched: {} // invalid: false,
      // dirty: false,

    }; // Map store all fields
    // key: fieldName
    // value:  { field, fieldApi, keepState, initValue}

    this.fields = new core_js_stable_map_default.a(); // Record all registered fields

    this.registered = {}; // Record all registered ArrayField

    this.registeredArrayField = new core_js_stable_map_default.a();
    this.register = bind_default()(_context = this.register).call(_context, this);
    this.unRegister = bind_default()(_context2 = this.unRegister).call(_context2, this);
    this.registerArrayField = bind_default()(_context3 = this.registerArrayField).call(_context3, this);
    this.unRegisterArrayField = bind_default()(_context4 = this.unRegisterArrayField).call(_context4, this);
    this.getArrayField = bind_default()(_context5 = this.getArrayField).call(_context5, this);
    this.updateArrayField = bind_default()(_context6 = this.updateArrayField).call(_context6, this);
    this.getField = bind_default()(_context7 = this.getField).call(_context7, this);
    this.setValues = bind_default()(_context8 = this.setValues).call(_context8, this);
    this.updateStateValue = bind_default()(_context9 = this.updateStateValue).call(_context9, this);
    this.updateStateError = bind_default()(_context10 = this.updateStateError).call(_context10, this);
    this.updateStateTouched = bind_default()(_context11 = this.updateStateTouched).call(_context11, this);
    this.getFormState = bind_default()(_context12 = this.getFormState).call(_context12, this);
    this.getValue = bind_default()(_context13 = this.getValue).call(_context13, this);
    this.getError = bind_default()(_context14 = this.getError).call(_context14, this);
    this.getTouched = bind_default()(_context15 = this.getTouched).call(_context15, this);
    this.getInitValues = bind_default()(_context16 = this.getInitValues).call(_context16, this);
    this.getInitValue = bind_default()(_context17 = this.getInitValue).call(_context17, this);
    this.getFormProps = bind_default()(_context18 = this.getFormProps).call(_context18, this);
    this.getFieldExist = bind_default()(_context19 = this.getFieldExist).call(_context19, this);
    this.scrollToField = bind_default()(_context20 = this.scrollToField).call(_context20, this);
  }

  init() {
    this._adapter.initFormId();
  }

  getField(field) {
    const targetField = this.fields.get(field);
    return targetField;
  }

  register(field, fieldState, fieldStuff) {
    // determine if this field has been register before
    const registered = this.registered[field];
    this.registered[field] = true;
    this.fields.set(field, fieldStuff);

    if (fieldStuff.keepState) {// TODO support keepState
    } else {
      const allowEmpty = fieldStuff.allowEmpty || false;
      const opts = {
        notNotify: true,
        notUpdate: false,
        allowEmpty
      };
      let fieldValue = fieldState.value; // When allowEmpty is false, 'is equivalent to undefined, and the key of the field does not need to be reflected on values

      if (!allowEmpty && fieldValue === '') {
        fieldValue = undefined;
      }

      this.updateStateValue(field, fieldValue, opts);

      if (fieldState.error) {
        this.updateStateError(field, fieldState.error, opts);
      }
    } // this.log(this.fields);

  }

  unRegister(field) {
    const targetField = this.fields.get(field); // delete data

    try {
      if (!targetField.keepState) {
        remove(instance_values_default()(this.data), field);
        remove(this.data.errors, field);
        remove(this.data.touched, field);
      }
    } catch (error) {
      console.error("some thing wrong when unregister field:".concat(field));
    } // delete field


    this.fields.delete(field);

    this._adapter.notifyChange(this.data);

    this._adapter.forceUpdate();
  } // in order to slove byted-issue-289


  registerArrayField(arrayFieldPath, val) {
    this.updateArrayField(arrayFieldPath, {
      updateKey: new Date().valueOf(),
      initValue: val
    });
  }

  unRegisterArrayField(arrayField) {
    this.registeredArrayField.delete(arrayField);
  }

  getArrayField(arrayField) {
    return this.registeredArrayField.get(arrayField);
  }

  updateArrayField(arrayField, updateValue) {
    const mergeVal = assign_default()(assign_default()({}, this.registeredArrayField.get(arrayField)), updateValue);

    this.registeredArrayField.set(arrayField, mergeVal);
  }

  validate(fieldPaths) {
    const {
      validateFields
    } = this.getProps();

    if (validateFields && isFunction_default()(validateFields)) {
      return this._formValidate();
    } else {
      return this._fieldsValidate(fieldPaths);
    }
  } // form level validate


  _formValidate() {
    const {
      values
    } = this.data;
    const {
      validateFields
    } = this.getProps();
    return new promise_default.a((resolve, reject) => {
      let maybePromisedErrors;

      try {
        maybePromisedErrors = validateFields(values);
      } catch (errors) {
        // error throw by sync validate directly
        maybePromisedErrors = errors;
      }

      if (!maybePromisedErrors) {
        resolve(values);
        this.injectErrorToField({});
      } else if (isPromise(maybePromisedErrors)) {
        maybePromisedErrors.then(result => {
          // validate success，clear error
          if (!result) {
            resolve(values);
            this.injectErrorToField({});
          } else {
            this.data.errors = result;

            this._adapter.notifyChange(this.data);

            this.injectErrorToField(result);

            this._adapter.forceUpdate();

            this._autoScroll(100);

            reject(result);
          }
        }, errors => {
          // validate failed
          // this._adapter.notifyChange(this.data);
          this._autoScroll(100);

          reject(errors);
        });
      } else {
        // TODO: current design, returning an empty object will be considered a checksum failure and will be rejected. Only returning an empty string will be considered a success, consider resetting it in 1.0?
        this.data.errors = maybePromisedErrors;
        this.injectErrorToField(maybePromisedErrors);

        this._adapter.notifyChange(this.data);

        this._adapter.forceUpdate();

        this._autoScroll(100);

        reject(maybePromisedErrors);
      }
    });
  } // field level validate


  _fieldsValidate(fieldPaths) {
    const {
      values
    } = this.data; // When there is no custom validation function at Form level, perform validation of each Field

    return new promise_default.a((resolve, reject) => {
      let promiseSet = [];

      const targetFields = this._getOperateFieldMap(fieldPaths);

      for_each_default()(targetFields).call(targetFields, (field, fieldPath) => {
        // Call each fieldApi for verification
        const fieldValue = this.getValue(fieldPath); // When centralized verification, no need to trigger forceUpdate and notify

        const opts = {
          notNotify: true,
          notUpdate: true
        };
        const validateResult = field.fieldApi.validate(fieldValue, opts);
        promiseSet.push(validateResult);
        field.fieldApi.setTouched(true, opts);
      });

      promise_default.a.all(promiseSet).then(() => {
        // After the centralized verification is completed, trigger notify and forceUpdate once.
        this._adapter.notifyChange(this.data);

        this._adapter.forceUpdate();

        const errors = this.getError();

        if (this._isValid(targetFields)) {
          resolve(values);
        } else {
          this._autoScroll();

          reject(errors);
        }
      });
    });
  }

  submit() {
    const {
      values
    } = this.data; // validate form

    this.validate().then(resolveValues => {
      // if valid do submit
      const _values = this._adapter.cloneDeep(resolveValues);

      this._adapter.notifySubmit(_values);
    }).catch(errors => {
      const _errors = this._adapter.cloneDeep(errors);

      const _values = this._adapter.cloneDeep(values);

      this._adapter.notifySubmitFail(_errors, _values);
    });
  }
  /**
   * Case A：
   *      All fields: a[0]、a[1]、b.type、b.name[2]、b.name[0]
   *      input => output:
   *           a  => a[0]、a[1]
   *           b  => b.type、b.name[0]、b.name[2]
   *
   * Case B：
   *      All fields: activity.a[0]、activity.a[1]、activity.c、activity.d、other
   *      input => output:
   *           activity.a => activity.a[0]、activity.a[1]
   *
   */


  _getNestedField(path) {
    var _context21;

    const allRegisterField = this.fields;

    const allFieldPath = map_default()(_context21 = [...allRegisterField]).call(_context21, item => item[0]);

    let nestedFieldPath = new core_js_stable_map_default.a();

    for_each_default()(allFieldPath).call(allFieldPath, item => {
      let itemPath = toPath_default()(item);

      let targetPath = toPath_default()(path);

      if (every_default()(targetPath).call(targetPath, (path, i) => targetPath[i] === itemPath[i])) {
        const realField = allRegisterField.get(item);
        nestedFieldPath.set(item, realField);
      }
    });

    return nestedFieldPath;
  } // get all operate fields, called by validate() / reset()


  _getOperateFieldMap(fieldPaths) {
    let targetFields = new core_js_stable_map_default.a();

    if (!isUndefined_default()(fieldPaths)) {
      // reset or validate specific fields
      for_each_default()(fieldPaths).call(fieldPaths, path => {
        const field = this.fields.get(path); // may be undefined, if exists two fields like 'a[0]'、'a[1]', but user directly call reset(['a']) / validate(['a'])

        if (isUndefined_default()(field)) {
          const nestedFields = this._getNestedField(path);

          targetFields = new core_js_stable_map_default.a([...targetFields, ...nestedFields]);
        } else {
          targetFields.set(path, field);
        }
      });
    } else {
      // reset or validate all fields
      targetFields = this.fields;
    }

    return targetFields;
  } // Reset the entire form, reset all fields and remove validation results


  reset(fieldPaths) {
    const targetFields = this._getOperateFieldMap(fieldPaths);

    for_each_default()(targetFields).call(targetFields, field => {
      field.fieldApi.reset();
    });

    if (this.registeredArrayField.size) {
      this._resetArrayField();
    }

    this._adapter.notifyChange(this.data);

    this._adapter.forceUpdate();

    this._adapter.notifyReset();
  }

  _resetArrayField() {
    var _context22;

    /*
        When Reset, arrayField needs to be processed separately. Restore the key/value of arrayField in formState according to the initial value
        Update the key inside the arrayField to make it actively renderer
        Reset时，arrayField需要单独处理, 根据初始值还原 arrayField在formState中的key/value, 更新 arrayField内部的key，使其主动rerender
    */
    const arrayFieldPaths = [...instance_keys_default()(_context22 = this.registeredArrayField).call(_context22)];

    for_each_default()(arrayFieldPaths).call(arrayFieldPaths, path => {
      const arrayFieldState = this.registeredArrayField.get(path);
      const arrayFieldInitValue = arrayFieldState.initValue;
      this.updateStateValue(path, arrayFieldInitValue, {
        notNotify: true,
        notUpdate: true
      });
      this.updateArrayField(path, {
        updateKey: new Date().valueOf()
      });
    });
  } // After calling the form's custom validateFields function, reject the returned error to the corresponding field
  // 调用了Form的自定义validateFields函数后，将返回的错误展示到对应的field中


  injectErrorToField(errors) {
    var _context23;

    for_each_default()(_context23 = this.fields).call(_context23, field => {
      const fieldError = object_get(errors, field.field);
      const opts = {
        notNotify: true,
        notUpdate: true
      };
      field.fieldApi.setError(fieldError, opts);
    });
  }

  getValue(field, opts) {
    const isAllField = typeof field === 'undefined';
    const needClone = opts && opts.needClone;
    let result, fieldValue;

    switch (true) {
      case !isAllField && !needClone:
        result = object_get(instance_values_default()(this.data), field);
        break;

      case !isAllField && needClone:
        fieldValue = object_get(instance_values_default()(this.data), field);
        result = this._adapter.cloneDeep(fieldValue);
        break;

      case isAllField && !needClone:
        result = assign_default()({}, instance_values_default()(this.data));
        break;

      case isAllField && needClone:
        result = this._adapter.cloneDeep(instance_values_default()(this.data));
        break;

      default:
        break;
    }

    return result;
  }

  setValues(values, _ref) {
    var _context24;

    let {
      isOverride = false
    } = _ref;

    const _values = this._adapter.cloneDeep(values);

    for_each_default()(_context24 = this.fields).call(_context24, field => {
      const value = object_get(_values, field.field); // When calling setValues to override the values, only need to trigger onValueChange and onChange once, so setNotNotify of setValue to true
      // 调用setValues进行值的覆盖时，只需要回调一次onValueChange、onChange即可，所以此处将setValue的notNotify置为true

      const opts = {
        notNotify: true,
        notUpdate: true
      };
      field.fieldApi.setValue(value, opts);
    }); // if there exists any arrayField component in this form


    if (this.registeredArrayField.size) {
      var _context25;

      const arrayFieldPaths = [...instance_keys_default()(_context25 = this.registeredArrayField).call(_context25)];

      for_each_default()(arrayFieldPaths).call(arrayFieldPaths, path => {
        this.updateArrayField(path, {
          updateKey: new Date().valueOf()
        });
      });
    } // When isOverride is true, there may be a non-existent field in the values passed in, directly synchronized to formState.values
    // 当isOverride为true，传入的values中可能存在不存在的field时，直接将其同步到formState.values中


    if (isOverride) {
      this.data.values = _values;
    } // After completing the assignment, the unified callback can be done once.
    // 在完成赋值后，统一回调一次即可


    this._adapter.notifyChange(this.data);

    this._adapter.notifyValueChange(instance_values_default()(this.data), assign_default()({}, values));

    this._adapter.forceUpdate();
  } // update formState value


  updateStateValue(field, value, opts, callback) {
    const notNotify = opts && opts.notNotify;
    const notUpdate = opts && opts.notUpdate;
    const fieldAllowEmpty = opts && opts.fieldAllowEmpty;
    /**
     * 当Form.allowEmpty为true时，所有的field，key都会在formState.values中出现，如果值为空那么就是undefined
     * 当Form.allowEmpty为false时，只有有值的field，key才会在formState.values中出现
     * When F orm.allow Empty is true, all fields and keys will appear in the formS tate.values. If the value is empty, it is undefined
     * When F orm.allow Empty is false, only fields with values will key appear in the formS tate.values
     */

    const formAllowEmpty = this.getProp('allowEmpty'); // priority at Field level

    const allowEmpty = fieldAllowEmpty ? fieldAllowEmpty : formAllowEmpty;
    object_set(instance_values_default()(this.data), field, value, allowEmpty);
    /**
     * When registering, setValue called when Field initValue is synchronized to FormState should not trigger notify
     * but need to trigger forceUpdate, otherwise useFormState, useFieldState initial rendering will have problems
     *
     * register时，Field中同步initValue到FormState时调用的setValue不应该触发notify
     * 但需要触发forceUpdate，否则useFormState、useFieldState初始渲染会有问题
     */

    if (!notNotify) {
      this._adapter.notifyChange(this.data);

      this._adapter.notifyValueChange(instance_values_default()(this.data), {
        [field]: value
      });
    }

    if (!notUpdate) {
      this._adapter.forceUpdate(callback);
    }
  } // get touched from formState


  getTouched(field) {
    if (typeof field === 'undefined') {
      return this.data.touched;
    }

    return object_get(this.data.touched, field);
  } // update formState touched


  updateStateTouched(field, isTouched, opts, callback) {
    const notNotify = opts && opts.notNotify;
    const notUpdate = opts && opts.notUpdate;
    object_set(this.data.touched, field, isTouched);

    if (!notNotify) {
      this._adapter.notifyChange(this.data);
    }

    if (!notUpdate) {
      this._adapter.forceUpdate(callback);
    }
  } // get error from formState


  getError(field) {
    if (typeof field === 'undefined') {
      return this.data.errors;
    }

    return object_get(this.data.errors, field);
  } // update formState error


  updateStateError(field, error, opts, callback) {
    const notNotify = opts && opts.notNotify;
    const notUpdate = opts && opts.notUpdate;
    object_set(this.data.errors, field, error); // The setError caused by centralized validation does not need to trigger notify, otherwise it will be called too frequently, as many times as there are fields
    // 集中validate时，引起的setError不需要触发notify，否则会过于频繁调用，有多少个field就调用了多少次

    if (!notNotify) {
      this._adapter.notifyChange(this.data);
    }

    if (!notUpdate) {
      this._adapter.forceUpdate(callback);
    }
  } // For internal use in the FormApi Operating Field


  getFieldSetterApi() {
    const setValue = (field, value, opts) => {
      const fieldApi = this.fields.get(field) ? this.fields.get(field).fieldApi : undefined; // DeepClone the value entered from the outside to avoid unexpected errors caused by not isolating the scope to the greatest extent. This setValue will be called in eg: ArrayField

      const newValue = this._adapter.cloneDeep(value);

      if (fieldApi) {
        // If there is a corresponding Field entity, call FieldApi to update the value
        fieldApi.setValue(newValue, opts);
      } else {
        // If you reset an entire array, such as Array Field, the array as a whole may actually have no Field entities (but each array element corresponds to a Field)
        // At this time, first modify formState directly, then find out the subordinate fields and drive them to update
        // Eg: peoples: [0, 2, 3]. Each value of the peoples array corresponds to an Input Field
        // When the user directly calls formA pi.set Value ('peoples', [2,3])
        this.updateStateValue(field, newValue, opts, () => {
          let nestedFields = this._getNestedField(field);

          if (nestedFields.size) {
            for_each_default()(nestedFields).call(nestedFields, fieldStaff => {
              let fieldPath = fieldStaff.field;
              let newFieldVal = object_get(instance_values_default()(this.data), fieldPath);
              let nestedBatchUpdateOpts = {
                notNotify: true,
                notUpdate: true
              };
              fieldStaff.fieldApi.setValue(newFieldVal, nestedBatchUpdateOpts);
            });
          }
        }); // If the reset happens to be, then update the updateKey corresponding to ArrayField to render it again

        if (this.getArrayField(field)) {
          this.updateArrayField(field, {
            updateKey: new Date().valueOf()
          });
        }
      }
    };

    const setError = (field, error, opts) => {
      const fieldApi = this.fields.get(field) ? this.fields.get(field).fieldApi : undefined;

      const newError = this._adapter.cloneDeep(error);

      if (fieldApi) {
        fieldApi.setError(newError, opts);
      } else {
        this.updateStateError(field, newError, opts, () => {
          let nestedFields = this._getNestedField(field);

          if (nestedFields.size) {
            for_each_default()(nestedFields).call(nestedFields, fieldStaff => {
              let fieldPath = fieldStaff.field;
              let newFieldError = object_get(this.data.errors, fieldPath);
              let nestedBatchUpdateOpts = {
                notNotify: true,
                notUpdate: true
              };
              fieldStaff.fieldApi.setError(newFieldError, nestedBatchUpdateOpts);
            });
          }
        });

        if (this.getArrayField(field)) {
          this.updateArrayField(field, {
            updateKey: new Date().valueOf()
          });
        }
      }
    };

    const setTouched = (field, isTouched, opts) => {
      const fieldApi = this.fields.get(field) ? this.fields.get(field).fieldApi : undefined; // touched is boolean variable, no need to exec deepClone like setValue

      if (fieldApi) {
        fieldApi.setTouched(isTouched, opts);
      } else {
        this.updateStateTouched(field, isTouched, opts, () => {
          let nestedFields = this._getNestedField(field);

          if (nestedFields.size) {
            for_each_default()(nestedFields).call(nestedFields, fieldStaff => {
              let fieldPath = fieldStaff.field;
              let newFieldTouch = object_get(this.data.touched, fieldPath);
              let nestedBatchUpdateOpts = {
                notNotify: true,
                notUpdate: true
              };
              fieldStaff.fieldApi.setTouched(newFieldTouch, nestedBatchUpdateOpts);
            });
          }
        });

        if (this.getArrayField(field)) {
          this.updateArrayField(field, {
            updateKey: new Date().valueOf()
          });
        }
      }
    };

    return {
      setValue,
      setError,
      setTouched
    };
  } // For Field and ArrayField to read and modify FormState


  getModifyFormStateApi() {
    return {
      register: this.register,
      unRegister: this.unRegister,
      updateStateValue: this.updateStateValue,
      updateStateError: this.updateStateError,
      updateStateTouched: this.updateStateTouched,
      getValue: this.getValue,
      getError: this.getError,
      getTouched: this.getTouched,
      getInitValues: this.getInitValues,
      getInitValue: this.getInitValue,
      getFormProps: this.getFormProps,
      getField: this.getField,
      registerArrayField: this.registerArrayField,
      unRegisterArrayField: this.unRegisterArrayField,
      getArrayField: this.getArrayField,
      updateArrayField: this.updateArrayField
    };
  } // Form APIs for external use, exposed to the user


  getFormApi() {
    const fieldSetterApi = this.getFieldSetterApi();
    return assign_default()(assign_default()({}, fieldSetterApi), {
      reset: fields => this.reset(fields),
      validate: fields => this.validate(fields),
      getValue: field => this.getValue(field, {
        needClone: true
      }),
      getValues: () => this.getValue(undefined, {
        needClone: true
      }),
      getFormState: () => this.getFormState(true),
      getInitValue: field => this.getInitValue(field),
      getInitValues: () => this.getInitValues(),
      getTouched: field => this.getTouched(field),
      getError: field => this.getError(field),
      setValues: (values, opts) => this.setValues(values, opts || {
        isOverride: false
      }),
      submitForm: () => this.submit(),
      getFieldExist: field => this.getFieldExist(field),
      scrollToField: (field, scrollOpts) => this.scrollToField(field, scrollOpts)
    });
  }

  getFormState() {
    let needClone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    // NOTES：这里如果直接返回this.data，forceUpdate 触发 Form rerender 时，通过context传下去的formState会被认为是同一个对象【应该是浅对比的原因】
    // 使用了useFormState相关的component都不会触发重新渲染。所以使用...复制一次

    /*
        The reason for distinguishing deepClone: When semi is calling getFormState for internal consumption,
        the value of formState will not be modified, so deep cloning is not necessary, which can reduce performance loss
        But if the users use formApi.getFormState(), the behavior is unpredictable, and invasive modifications may be performed,
        so deep clones are used for isolation.
        对deepClone进行区分的原因：semi调用getFormState内部消费时，不会对formState的值进行修改，所以无需深克隆，节约开销
        但如果是业务方用formApi调用getFormState时，行为无法预料，有可能会进行侵入式修改，所以用深克隆进行隔离
    */
    if (!needClone) {
      return assign_default()({}, this.data);
    } else {
      return this._adapter.cloneDeep(this.data);
    }
  }

  _isValid(targetFields) {
    let valid = true;

    if (!targetFields) {
      valid = Boolean(object_empty(this.data.errors));
    } else {
      // when trigger partial validate
      const targetFieldStr = [...instance_keys_default()(targetFields).call(targetFields)];

      for_each_default()(targetFieldStr).call(targetFieldStr, fieldStr => {
        const fieldError = object_get(this.data.errors, fieldStr);

        if (!utils_isValid(fieldError)) {
          valid = false;
        }
      });
    }

    return valid;
  } // get form.props.initValues


  getInitValues() {
    return this._adapter.getInitValues();
  }

  getInitValue(field) {
    if (typeof field === 'undefined') {
      return this._adapter.getInitValues();
    }

    return object_get(this._adapter.getInitValues(), field);
  }

  getFormProps(keys) {
    return this._adapter.getFormProps(keys);
  }

  getFieldExist(field) {
    return Boolean(this.fields.has(field));
  }

  _autoScroll(timeout) {
    const {
      autoScrollToError
    } = this.getFormProps();

    if (!autoScrollToError) {
      return;
    }

    let scrollOpts = {
      behavior: 'smooth',
      block: 'start'
    };
    typeof autoScrollToError === 'object' ? scrollOpts = autoScrollToError : null;

    if (timeout) {
      set_timeout_default()(() => this._getErrorFieldAndScroll(scrollOpts), 100);
    } else {
      this._getErrorFieldAndScroll(scrollOpts);
    }
  }

  _getErrorFieldAndScroll(scrollOpts) {
    const errorDOM = this._adapter.getAllErrorDOM();

    if (errorDOM && errorDOM.length) {
      try {
        const fieldDom = errorDOM[0].parentNode.parentNode;
        es(fieldDom, scrollOpts);
      } catch (error) {}
    }
  }

  scrollToField(field) {
    let scrollOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      behavior: 'smooth',
      block: 'start'
    };

    if (this.getFieldExist(field)) {
      const fieldDOM = this._adapter.getFieldDOM(field);

      es(fieldDOM, scrollOpts);
    }
  }

}
// CONCATENATED MODULE: ./form/context.tsx
/* eslint-disable @typescript-eslint/no-empty-function */

const FormStateContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext({});
FormStateContext.displayName = 'FormState';
const FormApiContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext({});
FormApiContext.displayName = 'FormApi';
const FormUpdaterContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext({});
FormUpdaterContext.displayName = 'FormUpdater';
const ArrayFieldContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createContext({
  shouldUseInitValue: true
});

// CONCATENATED MODULE: ./form/errorMessage.tsx



/* eslint-disable prefer-template */





const errorMessage_prefix = form_constants_cssClasses.PREFIX;
class errorMessage_ErrorMessage extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  generatorText(error) {
    const {
      helpTextId,
      errorMessageId
    } = this.props;
    const propsError = this.props.error;
    let id = errorMessageId;

    if (!propsError) {
      id = helpTextId;
    }

    if (typeof error === 'string') {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        id: id
      }, error);
    } else if (is_array_default()(error)) {
      const err = filter_default()(error).call(error, e => e);

      return err.length ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("span", {
        id: id
      }, err.join(', ')) : null;
    } else if ( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(error)) {
      return error;
    }

    return null;
  }

  render() {
    const {
      error,
      className,
      style,
      validateStatus,
      helpText,
      showValidateIcon,
      isInInputGroup
    } = this.props;
    const cls = classnames_default()({
      [errorMessage_prefix + '-field-error-message']: Boolean(error),
      [errorMessage_prefix + '-field-help-text']: Boolean(helpText)
    }, className);

    if (!error && !helpText) {
      return null;
    }

    const iconMap = {
      warning: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconAlertTriangle, null),
      error: /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconAlertCircle, null)
    };
    const text = error ? this.generatorText(error) : this.generatorText(helpText);
    const iconCls = "".concat(errorMessage_prefix, "-field-validate-status-icon");
    let icon = null;

    if (isInInputGroup) {
      icon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(IconAlertCircle, {
        className: iconCls
      });
    } else {
      if (iconMap[validateStatus]) {
        icon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(iconMap[validateStatus], {
          className: iconCls
        });
      }
    }

    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      className: cls,
      style: style
    }, showValidateIcon && text ? icon : null, text);
  }

}
errorMessage_ErrorMessage.propTypes = {
  error: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.string, prop_types_default.a.array, prop_types_default.a.node]),
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  validateStatus: prop_types_default.a.string,
  showValidateIcon: prop_types_default.a.bool,
  helpText: prop_types_default.a.node,
  isInInputGroup: prop_types_default.a.bool,
  // internal props
  errorMessageId: prop_types_default.a.string,
  helpTextId: prop_types_default.a.string
};
// CONCATENATED MODULE: ./form/slot.tsx








var slot_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable max-lines-per-function, prefer-destructuring, prefer-const, @typescript-eslint/no-unused-vars */









const slot_prefix = form_constants_cssClasses.PREFIX;

const FormSlot = props => {
  var _context;

  let labelCol, wrapperCol, labelWidth, labelAlign, content;
  let labelPosition = 'top';

  try {
    const updater = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useContext"])(FormUpdaterContext);
    const formProps = updater.getFormProps(['labelPosition', 'labelWidth', 'labelAlign', 'labelCol', 'wrapperCol']);
    labelCol = formProps.labelCol;
    wrapperCol = formProps.wrapperCol;
    labelWidth = formProps.labelWidth;
    labelAlign = formProps.labelAlign;
    labelPosition = formProps.labelPosition ? formProps.labelPosition : labelPosition;
  } catch (error) {} // eslint-disable-next-line react/destructuring-assignment


  props.labelPosition ? labelPosition = props.labelPosition : null;

  let {
    children,
    label,
    className,
    style,
    error,
    noLabel
  } = props,
      rest = slot_rest(props, ["children", "label", "className", "style", "error", "noLabel"]);

  const appendCol = labelCol && wrapperCol;
  const slotCls = classnames_default()({
    ["".concat(slot_prefix, "-field")]: true,
    ["".concat(slot_prefix, "-slot")]: true
  }, className);
  const labelColCls = classnames_default()({
    [concat_default()(_context = "".concat(slot_prefix, "-col-")).call(_context, labelAlign)]: true
  });

  switch (true) {
    case isObject_default()(label) && ! /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(label):
      // do nothing
      break;

    case isString_default()(label) || isNumber_default()(label):
      // @ts-ignore skip type check, the actual type is already determined
      label = {
        text: label
      };
      break;

    case /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(label):
      // @ts-ignore skip type check, the actual type is already determined
      label = {
        text: label
      };
      break;

    default:
      break;
  }

  let slotError = null;

  if (typeof error !== undefined) {
    let emProps = {};

    switch (true) {
      case isObject_default()(error) && ! /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(error):
        // do nothing
        emProps = error;
        break;

      case isString_default()(error) || isNumber_default()(error):
        emProps = {
          error
        };
        break;

      case /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.isValidElement(error):
        emProps = {
          error
        };
        break;

      default:
        break;
    }

    slotError = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(errorMessage_ErrorMessage, assign_default()({}, emProps));
  }

  let mergeLabelProps = assign_default()({
    align: labelAlign,
    width: labelWidth
  }, label);

  let mainCls = classnames_default()({
    ["".concat(slot_prefix, "-field-main")]: true,
    ["".concat(slot_prefix, "-slot-main")]: true
  });

  switch (true) {
    case !appendCol && !noLabel:
      content = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(label_Label, assign_default()({}, mergeLabelProps)), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: mainCls
      }, children, slotError));
      break;

    case !appendCol && noLabel:
      content = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: mainCls
      }, children, slotError));
      break;

    case appendCol && labelPosition === 'top':
      // When labelPosition is top, you need to add an overflow hidden div to the label, otherwise it will be arranged horizontally
      content = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        style: {
          overflow: 'hidden'
        }
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(grid_col, assign_default()({}, labelCol, {
        className: labelColCls
      }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(label_Label, assign_default()({}, mergeLabelProps)))), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(grid_col, null, children, slotError));
      break;

    case appendCol && labelPosition !== 'top':
      content = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(grid_col, assign_default()({}, labelCol, {
        className: labelColCls
      }), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(label_Label, assign_default()({}, mergeLabelProps))), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(grid_col, null, children, slotError));
      break;

    default:
      break;
  }

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
    className: slotCls,
    "x-label-pos": labelPosition,
    style: style
  }, content);
};

/* harmony default export */ var slot = (FormSlot);
// CONCATENATED MODULE: ./form/section.tsx
/* eslint-disable prefer-template */




const section_prefix = form_constants_cssClasses.PREFIX;
class section_Section extends external_root_React_commonjs2_react_commonjs_react_amd_react_["PureComponent"] {
  render() {
    const {
      text,
      className,
      style,
      children
    } = this.props;
    const cls = classnames_default()({
      [section_prefix + '-section']: true
    }, className);
    const textCls = section_prefix + '-section-text';
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("section", {
      className: cls,
      style: style
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("h5", {
      className: textCls
    }, text), children);
  }

}
section_Section.propTypes = {
  text: prop_types_default.a.node,
  className: prop_types_default.a.string,
  style: prop_types_default.a.object,
  children: prop_types_default.a.node
};
// CONCATENATED MODULE: ./form/hooks/useFormState.tsx



function useFormState() {
  const formState = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useContext"])(FormStateContext);
  return formState;
}

/* harmony default export */ var hooks_useFormState = (useFormState);
// CONCATENATED MODULE: ./form/group.tsx






var group_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable react/destructuring-assignment */












const group_prefix = form_constants_cssClasses.PREFIX; // Group component to remove Labels and ErrorMessages from its child fields
// Unified insertion of Labels and ErrorMessages from the group level
// Get Errors of all field in this group

const GroupError = props => {
  const {
    fieldSet
  } = props;
  const formState = hooks_useFormState();

  const error = map_default()(fieldSet).call(fieldSet, field => object_get(formState.errors, field));

  if (utils_isValid(error)) {
    return null;
  }

  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(errorMessage_ErrorMessage, {
    error: error,
    showValidateIcon: props.showValidateIcon,
    isInInputGroup: props.isInInputGroup
  });
};

class group_FormInputGroup extends external_root_React_commonjs2_react_commonjs_react_amd_react_["Component"] {
  renderLabel(label, formProps) {
    if (label) {
      if (isString_default()(label)) {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(label_Label, {
          width: formProps.labelWidth,
          text: label
        });
      } else {
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(label_Label, assign_default()({
          width: formProps.labelWidth
        }, label));
      }
    }

    return null;
  }

  render() {
    var _context;

    const _a = this.props,
          {
      children,
      label
    } = _a,
          rest = group_rest(_a, ["children", "label"]);

    const updater = this.context;
    const formProps = updater.getFormProps(['labelPosition', 'labelWidth', 'labelAlign', 'showValidateIcon']);
    const labelPosition = this.props.labelPosition || formProps.labelPosition;
    const groupFieldSet = [];

    const inner = map_default()(_context = external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Children).call(_context, children, child => {
      if (child && child.props && child.props.field) {
        groupFieldSet.push(child.props.field);
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.cloneElement(child, {
          isInInputGroup: true // noErrorMessage: true,
          // noLabel: true

        });
      }

      return null;
    });

    const groupCls = classnames_default()({
      ["".concat(group_prefix, "-field-group")]: true
    });
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
      "x-label-pos": labelPosition,
      className: groupCls
    }, this.renderLabel(label, formProps), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(inputGroup_inputGroup, assign_default()({}, rest), inner), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(GroupError, {
      fieldSet: groupFieldSet,
      showValidateIcon: formProps.showValidateIcon,
      isInInputGroup: true
    })));
  }

}

group_FormInputGroup.contextType = FormUpdaterContext;
/* harmony default export */ var form_group = (group_FormInputGroup);
// EXTERNAL MODULE: ../semi-foundation/form/form.scss
var form_form = __webpack_require__("oHLe");

// CONCATENATED MODULE: ./form/hooks/useFormUpdater.tsx


function useFormUpdater() {
  return Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useContext"])(FormUpdaterContext);
}
// CONCATENATED MODULE: ./form/hooks/useArrayFieldState.tsx



function useArrayFieldState() {
  const arrayFieldContext = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useContext"])(ArrayFieldContext);
  return arrayFieldContext;
}

/* harmony default export */ var hooks_useArrayFieldState = (useArrayFieldState);
// CONCATENATED MODULE: ./form/hooks/useStateWithGetter.ts
 // https://github.com/facebook/react/issues/14543

function useStateWithGetter(initial) {
  const ref = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useRef"])();
  const [state, setState] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(initial);
  ref.current = state;

  const set = value => {
    ref.current = value;
    setState(value);
  };

  const get = () => ref.current;

  return [state, set, get];
}
// CONCATENATED MODULE: ./form/hoc/withField.tsx







/* eslint-disable max-lines-per-function, react-hooks/rules-of-hooks, prefer-const, max-len */












const withField_prefix = form_constants_cssClasses.PREFIX;
/**
 * withFiled is used to inject components
 * 1. Takes over the value and onChange of the component and synchronizes them to Form Foundation
 * 2. Insert <Label>
 * 3. Insert <ErrorMessage>
 */

function withField(Component, opts) {
  let SemiField = (props, ref) => {
    let {
      // condition,
      field,
      label,
      labelPosition,
      labelWidth,
      labelAlign,
      labelCol,
      wrapperCol,
      noLabel,
      noErrorMessage,
      isInInputGroup,
      initValue,
      validate,
      validateStatus,
      trigger,
      allowEmptyString,
      allowEmpty,
      emptyValue,
      rules,
      required,
      keepState,
      transform,
      name,
      fieldClassName,
      fieldStyle,
      convert,
      stopValidateWithError,
      helpText,
      extraText,
      extraTextPosition,
      pure,
      id,
      rest
    } = mergeProps(props);
    let {
      options,
      shouldInject
    } = mergeOptions(opts, props);
    Object(warning["a" /* default */])(typeof field === 'undefined' && options.shouldInject, "[Semi Form]: 'field' is required, please check your props of Field Component"); // 无需注入的直接返回，eg：Group内的checkbox、radio
    // Return without injection, eg: <Checkbox> / <Radio> inside CheckboxGroup/RadioGroup

    if (!shouldInject) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Component, assign_default()({}, rest, {
        ref: ref
      }));
    } // grab formState from context


    const formState = hooks_useFormState(); // grab formUpdater (the api for field to read/modify FormState) from context

    const updater = useFormUpdater();

    if (!updater.getFormProps) {
      Object(warning["a" /* default */])(true, '[Semi Form]: Field Component must be use inside the Form, please check your dom declaration');
      return null;
    } // To prevent user forgetting to pass the field, use undefined as the key, and updater.getValue will get the wrong value.


    let initValueInFormOpts = typeof field !== 'undefined' ? updater.getValue(field) : undefined; // Get the init value of form from formP rops.init Values Get the initial value set in the initValues of Form

    let initVal = typeof initValue !== 'undefined' ? initValue : initValueInFormOpts; // use arrayFieldState to fix issue 615

    let arrayFieldState;

    try {
      arrayFieldState = hooks_useArrayFieldState();

      if (arrayFieldState) {
        initVal = arrayFieldState.shouldUseInitValue && typeof initValue !== 'undefined' ? initValue : initValueInFormOpts;
      }
    } catch (err) {}

    const [value, setValue, getVal] = useStateWithGetter(typeof initVal !== undefined ? initVal : null);

    const validateOnMount = includes_default()(trigger).call(trigger, 'mount');

    allowEmpty = allowEmpty || updater.getFormProps().allowEmpty; // Error information: Array, String, undefined

    const [error, setError, getError] = useStateWithGetter();
    const [touched, setTouched] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])();
    const [cursor, setCursor, getCursor] = useStateWithGetter(0);
    const [status, setStatus] = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(validateStatus); // use props.validateStatus to init

    const rulesRef = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useRef"])(rules);
    const validateRef = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useRef"])(validate); // notNotify is true means that the onChange of the Form does not need to be triggered
    // notUpdate is true means that this operation does not need to trigger the forceUpdate

    const updateTouched = (isTouched, callOpts) => {
      setTouched(isTouched);
      updater.updateStateTouched(field, isTouched, callOpts);
    };

    const updateError = (errors, callOpts) => {
      if (errors === getError()) {
        // When the inspection result is unchanged, no need to update, saving a forceUpdate overhead
        // When errors is an array, deepEqual is not used, and it is always treated as a need to update
        // 检验结果不变时，无需更新，节省一次forceUpdate开销
        // errors为数组时，不做deepEqual，始终当做需要更新处理
        return;
      }

      setError(errors);
      updater.updateStateError(field, errors, callOpts);

      if (!utils_isValid(errors)) {
        setStatus('error');
      } else {
        setStatus('success');
      }
    };

    const updateValue = (val, callOpts) => {
      setValue(val);

      let newOpts = assign_default()(assign_default()({}, callOpts), {
        allowEmpty
      });

      updater.updateStateValue(field, val, newOpts);
    };

    const reset = () => {
      let callOpts = {
        notNotify: true,
        notUpdate: true
      }; // reset is called by the FormFoundaion uniformly. The field level does not need to trigger notify and update.

      updateValue(initVal !== null ? initVal : undefined, callOpts);
      updateError(undefined, callOpts);
      updateTouched(undefined, callOpts);
      setStatus('default');
    }; // Execute the validation rules specified by rules


    const _validateInternal = (val, callOpts) => {
      let latestRules = rulesRef.current || [];
      const validator = generateValidatesFromRules(field, latestRules);
      const model = {
        [field]: val
      };
      return new promise_default.a((resolve, reject) => {
        validator.validate(model, {
          first: stopValidateWithError
        }, // eslint-disable-next-line @typescript-eslint/no-empty-function
        (errors, fields) => {}).then(res => {
          // validation passed
          setStatus('success');
          updateError(undefined, callOpts);
          resolve({});
        }).catch(err => {
          let {
            errors,
            fields
          } = err;

          if (errors && fields) {
            let messages = map_default()(errors).call(errors, e => e.message);

            if (messages.length === 1) {
              // eslint-disable-next-line prefer-destructuring
              messages = messages[0];
            }

            updateError(messages, callOpts);

            if (!utils_isValid(messages)) {
              setStatus('error');
              resolve(errors);
            }
          } else {
            // Some grammatical errors in rules
            setStatus('error');
            updateError(err.message, callOpts);
            resolve(err.message);
            throw err;
          }
        });
      });
    }; // execute custom validate function


    const _validate = (val, values, callOpts) => new promise_default.a(resolve => {
      let maybePromisedErrors; // let errorThrowSync;

      try {
        maybePromisedErrors = validateRef.current(val, values);
      } catch (err) {
        // error throw by syncValidate
        maybePromisedErrors = err;
      }

      if (maybePromisedErrors === undefined) {
        resolve({});
        updateError(undefined, callOpts);
      } else if (isPromise(maybePromisedErrors)) {
        maybePromisedErrors.then(result => {
          if (utils_isValid(result)) {
            // validate success，no need to do anything with result
            updateError(undefined, callOpts);
            resolve(null);
          } else {
            // validate failed
            updateError(result, callOpts);
            resolve(result);
          }
        });
      } else {
        if (utils_isValid(maybePromisedErrors)) {
          updateError(undefined, callOpts);
          resolve(null);
        } else {
          updateError(maybePromisedErrors, callOpts);
          resolve(maybePromisedErrors);
        }
      }
    });

    const fieldValidate = (val, callOpts) => {
      let finalVal = val;
      let latestRules = rulesRef.current;

      if (transform) {
        finalVal = transform(val);
      }

      if (validateRef.current) {
        return _validate(finalVal, updater.getValue(), callOpts);
      } else if (latestRules) {
        return _validateInternal(finalVal, callOpts);
      }

      return null;
    };
    /**
     * parse / format
     * validate when trigger
     *
     */


    const handleChange = function (newValue, e) {
      let fnKey = options.onKeyChangeFnName;

      if (fnKey in props && typeof props[options.onKeyChangeFnName] === 'function') {
        for (var _len = arguments.length, other = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          other[_key - 2] = arguments[_key];
        }

        props[options.onKeyChangeFnName](newValue, e, ...other);
      } // support various type component


      let val;

      if (!options.valuePath) {
        val = newValue;
      } else {
        val = object_get(newValue, options.valuePath);
      } // User can use convert function to updateValue before Component UI render


      if (typeof convert === 'function') {
        val = convert(val);
      } // TODO: allowEmptyString split into allowEmpty, emptyValue
      // Added abandonment warning
      // if (process.env.NODE_ENV !== 'production') {
      //     warning(allowEmptyString, `'allowEmptyString' will be de deprecated in next version, please replace with 'allowEmpty' & 'emptyValue'
      // `)
      // }
      // set value to undefined if it's an empty string
      // allowEmptyString={true} is equivalent to allowEmpty = {true} emptyValue = "


      if (allowEmptyString || allowEmpty) {
        if (val === '') {// do nothing
        }
      } else {
        if (val === emptyValue) {
          val = undefined;
        }
      } // maintain compoent cursor if needed


      try {
        if (e && e.target && e.target.selectionStart) {
          setCursor(e.target.selectionStart);
        }
      } catch (err) {}

      updateTouched(true, {
        notNotify: true,
        notUpdate: true
      });
      updateValue(val); // only validate when trigger includes change

      if (includes_default()(trigger).call(trigger, 'change')) {
        fieldValidate(val);
      }
    };

    const handleBlur = function () {
      if (props.onBlur) {
        props.onBlur(...arguments);
      }

      if (!touched) {
        updateTouched(true);
      }

      if (includes_default()(trigger).call(trigger, 'blur')) {
        let val = getVal();
        fieldValidate(val);
      }
    };
    /** Field level maintains a separate layer of data, which is convenient for Form to control Field to update the UI */
    // The field level maintains a separate layer of data, which is convenient for the Form to control the Field for UI updates.


    const fieldApi = {
      setValue: updateValue,
      setTouched: updateTouched,
      setError: updateError,
      reset,
      validate: fieldValidate
    };
    const fieldState = {
      value,
      error,
      touched,
      status
    }; // avoid hooks capture value, fixed issue 346

    Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useLayoutEffect"])(() => {
      rulesRef.current = rules;
      validateRef.current = validate;
    }, [rules, validate]); // exec validate once when trigger inlcude 'mount'

    Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useLayoutEffect"])(() => {
      if (validateOnMount) {
        fieldValidate(value);
      } // eslint-disable-next-line react-hooks/exhaustive-deps

    }, []); // register when mounted，unregister when unmounted
    // register again when field change

    Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useLayoutEffect"])(() => {
      // register
      if (typeof field === 'undefined') {
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        return () => {};
      } // log('register: ' + field);
      // field value may change after field component mounted, we use ref value here to get changed value


      const refValue = getVal();
      updater.register(field, {
        value: refValue,
        error,
        touched,
        status
      }, {
        field,
        fieldApi,
        keepState,
        allowEmpty: allowEmpty || allowEmptyString
      }); // return unRegister cb

      return () => {
        updater.unRegister(field); // log('unRegister: ' + field);
      }; // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [field]);
    let formProps = updater.getFormProps(['labelPosition', 'labelWidth', 'labelAlign', 'labelCol', 'wrapperCol', 'disabled', 'showValidateIcon', 'extraTextPosition']);
    let mergeLabelPos = labelPosition || formProps.labelPosition;
    let mergeLabelWidth = labelWidth || formProps.labelWidth;
    let mergeLabelAlign = labelAlign || formProps.labelAlign;
    let mergeLabelCol = labelCol || formProps.labelCol;
    let mergeWrapperCol = wrapperCol || formProps.wrapperCol;
    let mergeExtraPos = extraTextPosition || formProps.extraTextPosition || 'bottom'; // id attribute to improve a11y

    const a11yId = id ? id : field;
    const labelId = "".concat(a11yId, "-label");
    const helpTextId = "".concat(a11yId, "-helpText");
    const extraTextId = "".concat(a11yId, "-extraText");
    const errorMessageId = "".concat(a11yId, "-errormessage");

    let FieldComponent = (() => {
      var _context3, _context5;

      // prefer to use validateStatus which pass by user throught props
      let blockStatus = validateStatus ? validateStatus : status;
      const extraCls = classnames_default()("".concat(withField_prefix, "-field-extra"), {
        ["".concat(withField_prefix, "-field-extra-string")]: typeof extraText === 'string',
        ["".concat(withField_prefix, "-field-extra-middle")]: mergeExtraPos === 'middle',
        ["".concat(withField_prefix, "-field-extra-botttom")]: mergeExtraPos === 'bottom'
      });
      const extraContent = extraText ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: extraCls,
        id: extraTextId,
        "x-semi-prop": "extraText"
      }, extraText) : null;

      let newProps = assign_default()(assign_default()({
        id: a11yId,
        disabled: formProps.disabled
      }, rest), {
        ref,
        onBlur: handleBlur,
        [options.onKeyChangeFnName]: handleChange,
        [options.valueKey]: value,
        validateStatus: blockStatus,
        'aria-required': required,
        'aria-labelledby': labelId
      });

      if (helpText) {
        var _context;

        newProps['aria-describedby'] = extraText ? concat_default()(_context = "".concat(helpTextId, " ")).call(_context, extraTextId) : helpTextId;
      }

      if (extraText) {
        var _context2;

        newProps['aria-describedby'] = helpText ? concat_default()(_context2 = "".concat(helpTextId, " ")).call(_context2, extraTextId) : extraTextId;
      }

      if (status === 'error') {
        newProps['aria-errormessage'] = errorMessageId;
        newProps['aria-invalid'] = true;
      }

      const fieldCls = classnames_default()({
        ["".concat(withField_prefix, "-field")]: true,
        [concat_default()(_context3 = "".concat(withField_prefix, "-field-")).call(_context3, name)]: Boolean(name),
        [fieldClassName]: Boolean(fieldClassName)
      });
      const fieldMaincls = classnames_default()({
        ["".concat(withField_prefix, "-field-main")]: true
      });

      if (mergeLabelPos === 'inset' && !noLabel) {
        newProps.insetLabel = label || field;
        newProps.insetLabelId = labelId;

        if (typeof label === 'object' && !reactUtils_isElement(label)) {
          newProps.insetLabel = label.text;
          newProps.insetLabelId = labelId;
        }
      }

      const com = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Component, assign_default()({}, newProps)); // when use in InputGroup, no need to insert <Label>、<ErrorMessage> inside Field, just add it at Group

      if (isInInputGroup) {
        return com;
      }

      if (pure) {
        var _context4;

        let pureCls = classnames_default()(rest.className, {
          ["".concat(withField_prefix, "-field-pure")]: true,
          [concat_default()(_context4 = "".concat(withField_prefix, "-field-")).call(_context4, name)]: Boolean(name),
          [fieldClassName]: Boolean(fieldClassName)
        });
        newProps.className = pureCls;
        return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Component, assign_default()({}, newProps));
      }

      let withCol = mergeLabelCol && mergeWrapperCol;
      const labelColCls = mergeLabelAlign ? concat_default()(_context5 = "".concat(withField_prefix, "-col-")).call(_context5, mergeLabelAlign) : ''; // get label

      let labelContent = null;

      if (!noLabel && mergeLabelPos !== 'inset') {
        let needSpread = typeof label === 'object' && !reactUtils_isElement(label) ? label : {};
        labelContent = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(label_Label, assign_default()({
          text: label || field,
          id: labelId,
          required: required,
          name: a11yId || name || field,
          width: mergeLabelWidth,
          align: mergeLabelAlign
        }, needSpread));
      }

      const fieldMainContent = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: fieldMaincls
      }, mergeExtraPos === 'middle' ? extraContent : null, com, !noErrorMessage ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(errorMessage_ErrorMessage, {
        error: error,
        validateStatus: blockStatus,
        helpText: helpText,
        helpTextId: helpTextId,
        errorMessageId: errorMessageId,
        showValidateIcon: formProps.showValidateIcon
      }) : null, mergeExtraPos === 'bottom' ? extraContent : null);
      const withColContent = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, mergeLabelPos === 'top' ? /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        style: {
          overflow: 'hidden'
        }
      }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(grid_col, assign_default()({}, mergeLabelCol, {
        className: labelColCls
      }), labelContent)) : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(grid_col, assign_default()({}, mergeLabelCol, {
        className: labelColCls
      }), labelContent), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(grid_col, assign_default()({}, mergeWrapperCol), fieldMainContent));
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("div", {
        className: fieldCls,
        style: fieldStyle,
        "x-label-pos": mergeLabelPos,
        "x-field-id": field,
        "x-extra-pos": mergeExtraPos
      }, withCol ? withColContent : /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.Fragment, null, labelContent, fieldMainContent));
    })(); // !important optimization


    const shouldUpdate = [...values_default()(fieldState), ...values_default()(props), field, mergeLabelPos, mergeLabelAlign, formProps.disabled];

    if (options.shouldMemo) {
      // eslint-disable-next-line react-hooks/exhaustive-deps
      return Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useMemo"])(() => FieldComponent, [...shouldUpdate]);
    } else {
      // Some Custom Component with inner state shouldn't be memo, otherwise the component will not updated when the internal state is updated
      return FieldComponent;
    }
  };

  SemiField = /*#__PURE__*/Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["forwardRef"])(SemiField);
  SemiField.displayName = getDisplayName(Component);
  return SemiField;
} // eslint-disable-next-line


/* harmony default export */ var hoc_withField = (withField);
// CONCATENATED MODULE: ./form/field.tsx
/* eslint-disable max-len */
 // Basic component



















const FormInput = hoc_withField(input_0, {
  maintainCursor: true
});
const FormInputNumber = hoc_withField(inputNumber_0, {
  maintainCursor: true
});
const FormTextArea = hoc_withField(input_textarea_0, {
  maintainCursor: true
});
const FormSelect = hoc_withField(select_0); // Select after withField is a new Component, without the Option attribute, it needs to be manually assigned once

FormSelect.Option = select_0.Option;
FormSelect.OptGroup = select_0.OptGroup;
const FormCheckboxGroup = hoc_withField(checkboxGroup);
const FormCheckbox = hoc_withField(checkbox_checkbox_0, {
  valueKey: 'checked',
  valuePath: 'target.checked',
  shouldInject: false
});
const FormRadioGroup = hoc_withField(radioGroup, {
  valuePath: 'target.value'
});
const FormRadio = hoc_withField(radio_radio_0, {
  valueKey: 'checked',
  valuePath: 'target.checked',
  shouldInject: false
});
const FormDatePicker = hoc_withField(datePicker_0);
const FormSwitch = hoc_withField(switch_0, {
  valueKey: 'checked'
});
const FormSlider = hoc_withField(slider_Slider);
const FormTimePicker = hoc_withField(timePicker_LocaleTimePicker);
const FormTreeSelect = hoc_withField(treeSelect_0);
const FormCascader = hoc_withField(cascader_0);
const FormRating = hoc_withField(rating_Rating);
const FormAutoComplete = hoc_withField(autoComplete_0, {
  valueKey: 'value',
  onKeyChangeFnName: 'onChange'
});
const FormUpload = hoc_withField(upload_0, {
  valueKey: 'fileList',
  valuePath: 'fileList',
  onKeyChangeFnName: 'onChange'
});
const FormTagInput = hoc_withField(tagInput_0);

// CONCATENATED MODULE: ./form/baseForm.tsx









var baseForm_rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && index_of_default()(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof get_own_property_symbols_default.a === "function") for (var i = 0, p = get_own_property_symbols_default()(s); i < p.length; i++) {
    if (index_of_default()(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable prefer-template, max-len, @typescript-eslint/no-unused-vars */





















const baseForm_prefix = form_constants_cssClasses.PREFIX;

class baseForm_Form extends baseComponent_BaseComponent {
  constructor(props) {
    var _context, _context2;

    super(props);
    this.state = {
      formId: ''
    };
    Object(warning["a" /* default */])(Boolean(props.component && props.render), '[Semi Form] You should not use <Form component> and <Form render> in ths same time; <Form render> will be ignored');
    Object(warning["a" /* default */])(props.component && props.children && !isEmptyChildren(props.children), '[Semi Form] You should not use <Form component> and <Form>{children}</Form> in ths same time; <Form>{children}</Form> will be ignored');
    Object(warning["a" /* default */])(props.render && props.children && !isEmptyChildren(props.children), '[Semi Form] You should not use <Form render> and <Form>{children}</Form> in ths same time; <Form>{children}</Form> will be ignored');
    this.submit = bind_default()(_context = this.submit).call(_context, this);
    this.reset = bind_default()(_context2 = this.reset).call(_context2, this);
    this.foundation = new foundation_FormFoundation(this.adapter);
    this.formApi = this.foundation.getFormApi();

    if (this.props.getFormApi) {
      this.props.getFormApi(this.formApi);
    }
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
    this.formApi = null;
  }

  get adapter() {
    return assign_default()(assign_default()({}, super.adapter), {
      cloneDeep: _utils["a" /* cloneDeep */],
      notifySubmit: values => {
        this.props.onSubmit(values);
      },
      notifySubmitFail: (errors, values) => {
        this.props.onSubmitFail(errors, values);
      },
      forceUpdate: callback => {
        this.forceUpdate(callback);
      },
      notifyChange: formState => {
        this.props.onChange(formState);
      },
      notifyValueChange: (values, changedValues) => {
        this.props.onValueChange(values, changedValues);
      },
      notifyReset: () => {
        this.props.onReset();
      },
      initFormId: () => {
        this.setState({
          formId: getUuidv4()
        });
      },
      getInitValues: () => this.props.initValues,
      getFormProps: keys => {
        if (typeof keys === 'undefined') {
          return this.props;
        } else if (typeof keys === 'string') {
          return this.props[keys];
        } else {
          const props = {};

          for_each_default()(keys).call(keys, key => {
            props[key] = this.props[key];
          });

          return props;
        }
      },
      getAllErrorDOM: () => {
        var _context3;

        const {
          formId
        } = this.state;
        return document.querySelectorAll(concat_default()(_context3 = "form[x-form-id=\"".concat(formId, "\"] .")).call(_context3, form_constants_cssClasses.PREFIX, "-field-error-message"));
      },
      getFieldDOM: field => {
        var _context4;

        return document.querySelector(concat_default()(_context4 = ".".concat(form_constants_cssClasses.PREFIX, "-field[x-field-id=\"")).call(_context4, field, "\"]"));
      }
    });
  }

  get content() {
    const {
      children,
      component,
      render
    } = this.props;
    const formState = this.foundation.getFormState();
    const props = {
      formState,
      formApi: this.foundation.getFormApi(),
      values: instance_values_default()(formState)
    };

    if (component) {
      return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(component, props);
    }

    if (render) {
      return render(props);
    }

    if (typeof children === 'function') {
      return children(props);
    }

    return children;
  }

  submit(e) {
    e.preventDefault();
    this.foundation.submit();
  }

  reset(e) {
    e.preventDefault();
    this.foundation.reset();
  }

  render() {
    const needClone = false;
    const formState = this.foundation.getFormState(needClone);
    const updaterApi = this.foundation.getModifyFormStateApi();
    const {
      formId
    } = this.state;

    const _a = this.props,
          {
      children,
      getFormApi,
      onChange,
      onSubmit,
      onSubmitFail,
      onValueChange,
      component,
      render,
      validateFields,
      initValues,
      layout,
      style,
      className,
      labelPosition,
      labelWidth,
      labelAlign,
      labelCol,
      wrapperCol,
      allowEmpty,
      autoScrollToError,
      showValidateIcon,
      extraTextPosition
    } = _a,
          rest = baseForm_rest(_a, ["children", "getFormApi", "onChange", "onSubmit", "onSubmitFail", "onValueChange", "component", "render", "validateFields", "initValues", "layout", "style", "className", "labelPosition", "labelWidth", "labelAlign", "labelCol", "wrapperCol", "allowEmpty", "autoScrollToError", "showValidateIcon", "extraTextPosition"]);

    const formCls = classnames_default()(baseForm_prefix, className, {
      [baseForm_prefix + '-vertical']: layout === 'vertical',
      [baseForm_prefix + '-horizontal']: layout === 'horizontal'
    });
    const showldAppendRow = wrapperCol && labelCol;
    const formContent = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement("form", assign_default()({
      style: style
    }, rest, {
      onReset: this.reset,
      onSubmit: this.submit,
      className: formCls,
      "x-form-id": formId
    }), this.content);
    const withRowForm = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(grid_row, null, formContent);
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(FormUpdaterContext.Provider, {
      value: updaterApi
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(FormApiContext.Provider, {
      value: this.formApi
    }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(FormStateContext.Provider, {
      value: formState
    }, showldAppendRow ? withRowForm : formContent)));
  }

}

baseForm_Form.propTypes = {
  'aria-label': prop_types_default.a.string,
  onSubmit: prop_types_default.a.func,
  onSubmitFail: prop_types_default.a.func,

  /* Triggered from update, including field mount/unmount/value change/blur/verification status change/error prompt change, input parameter is formState, currentField */
  onChange: prop_types_default.a.func,
  onReset: prop_types_default.a.func,
  // Triggered when the value of the form is updated, only when the value of the subfield changes. The entry parameter is formState.values
  onValueChange: prop_types_default.a.func,
  initValues: prop_types_default.a.object,
  getFormApi: prop_types_default.a.func,
  component: prop_types_default.a.oneOfType([prop_types_default.a.node, prop_types_default.a.func]),
  render: prop_types_default.a.func,
  validateFields: prop_types_default.a.func,
  style: prop_types_default.a.object,
  className: prop_types_default.a.string,
  layout: prop_types_default.a.oneOf(form_constants_strings.LAYOUT),
  labelPosition: prop_types_default.a.oneOf(form_constants_strings.LABEL_POS),
  labelWidth: prop_types_default.a.oneOfType([prop_types_default.a.number, prop_types_default.a.string]),
  labelAlign: prop_types_default.a.oneOf(form_constants_strings.LABEL_ALIGN),
  labelCol: prop_types_default.a.object,
  wrapperCol: prop_types_default.a.object,
  allowEmpty: prop_types_default.a.bool,
  autoScrollToError: prop_types_default.a.oneOfType([prop_types_default.a.bool, prop_types_default.a.object]),
  disabled: prop_types_default.a.bool,
  showValidateIcon: prop_types_default.a.bool,
  extraTextPosition: prop_types_default.a.oneOf(form_constants_strings.EXTRA_POS),
  id: prop_types_default.a.string
};
baseForm_Form.defaultProps = {
  onChange: noop_default.a,
  onSubmitFail: noop_default.a,
  onSubmit: noop_default.a,
  onReset: noop_default.a,
  onValueChange: noop_default.a,
  layout: 'vertical',
  labelPosition: 'top',
  allowEmpty: false,
  autoScrollToError: false,
  showValidateIcon: true
};
baseForm_Form.Input = FormInput;
baseForm_Form.TextArea = FormTextArea;
baseForm_Form.InputNumber = FormInputNumber;
baseForm_Form.Select = FormSelect;
baseForm_Form.Checkbox = FormCheckbox;
baseForm_Form.CheckboxGroup = FormCheckboxGroup;
baseForm_Form.Radio = FormRadio;
baseForm_Form.RadioGroup = FormRadioGroup;
baseForm_Form.DatePicker = FormDatePicker;
baseForm_Form.TimePicker = FormTimePicker;
baseForm_Form.Switch = FormSwitch;
baseForm_Form.Slider = FormSlider;
baseForm_Form.TreeSelect = FormTreeSelect;
baseForm_Form.Cascader = FormCascader;
baseForm_Form.Rating = FormRating;
baseForm_Form.AutoComplete = FormAutoComplete;
baseForm_Form.Upload = FormUpload;
baseForm_Form.TagInput = FormTagInput;
baseForm_Form.Slot = slot;
baseForm_Form.ErrorMessage = errorMessage_ErrorMessage;
baseForm_Form.InputGroup = form_group;
baseForm_Form.Label = label_Label;
baseForm_Form.Section = section_Section;
/* harmony default export */ var baseForm = (baseForm_Form);
// CONCATENATED MODULE: ./form/hooks/useFormApi.tsx


function useFormApi() {
  return Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useContext"])(FormApiContext);
}
// CONCATENATED MODULE: ./form/hooks/useFieldApi.tsx


const buildFieldApi = (formApi, field) => ({
  getError: () => formApi.getError(field),
  setError: error => formApi.setError(field, error),
  getTouched: () => formApi.getTouched(field),
  setTouched: isTouched => formApi.setTouched(field, isTouched),
  getValue: () => formApi.getValue(field),
  setValue: value => formApi.setValue(field, value)
});

function useFieldApi(field) {
  const formApi = useFormApi();
  const fieldApi = buildFieldApi(formApi, field);
  return fieldApi;
}

/* harmony default export */ var hooks_useFieldApi = (useFieldApi);
// CONCATENATED MODULE: ./form/hooks/useFieldState.tsx




const buildFieldState = (formState, field) => ({
  value: object_get(instance_values_default()(formState), field),
  error: object_get(formState.errors, field),
  touched: object_get(formState.touched, field)
});

function useFieldState(field) {
  const formState = hooks_useFormState();
  const fieldState = buildFieldState(formState, field);
  return fieldState;
}

/* harmony default export */ var hooks_useFieldState = (useFieldState);
// CONCATENATED MODULE: ./form/hoc/withFormState.tsx




const withFormState = Component => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.forwardRef((props, ref) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(FormStateContext.Consumer, null, formState => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Component, assign_default()({
  formState: formState,
  ref: ref
}, props))));

/* harmony default export */ var hoc_withFormState = (withFormState);
// CONCATENATED MODULE: ./form/hoc/withFormApi.tsx




const withFormApi = Component => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.forwardRef((props, ref) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(FormApiContext.Consumer, null, formApi => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(Component, assign_default()({
  formApi: formApi,
  ref: ref
}, props))));

/* harmony default export */ var hoc_withFormApi = (withFormApi);
// CONCATENATED MODULE: ./form/arrayField.tsx










/* eslint-disable react/destructuring-assignment */





const filterArrayByIndex = (array, index) => filter_default()(array).call(array, (item, i) => i !== index);

const getUuidByArray = array => map_default()(array).call(array, () => getUuidv4());

const getUpdateKey = arrayField => {
  if (!arrayField) {
    return undefined;
  }

  if (arrayField && arrayField.updateKey) {
    return arrayField.updateKey;
  }

  return undefined;
};

const initValueAdapter = initValue => {
  const iv = [];

  if (is_array_default()(initValue)) {
    return initValue;
  } else {
    Object(warning["a" /* default */])(!isUndefined_default()(initValue), '[Semi Form ArrayField] initValue of ArrayField must be an array. Please check the type of your props');
    return iv;
  }
};
/**
 *
 * @param {any[]} value
 * @param {string[]} oldKeys
 * @returns string[]
 */


const generateKeys = (value, oldKeys) => {
  const val = initValueAdapter(value);
  const newKeys = getUuidByArray(val); // return newKeys;

  const keys = map_default()(newKeys).call(newKeys, (key, i) => oldKeys && oldKeys[i] ? oldKeys[i] : key);

  return keys;
};

class arrayField_ArrayFieldComponent extends external_root_React_commonjs2_react_commonjs_react_amd_react_["Component"] {
  constructor(props, context) {
    var _context, _context2, _context3;

    super(props, context);
    const initValueInProps = this.props.initValue;
    const {
      field
    } = this.props;
    const initValueInForm = context.getValue(field);
    const initValue = initValueInProps || initValueInForm;
    this.state = {
      keys: generateKeys(initValue)
    };
    this.add = bind_default()(_context = this.add).call(_context, this);
    this.addWithInitValue = bind_default()(_context2 = this.addWithInitValue).call(_context2, this);
    this.remove = bind_default()(_context3 = this.remove).call(_context3, this);
    this.cacheFieldValues = null;
    this.cacheUpdateKey = null;
    /*
        If updateKey exists, it means that the arrayField (usually a nested ArrayField not at the first level) is only re-mounted due to setValues,
        and the fields it contains do not need to consume initValue
    */
    // whether the fields inside arrayField should use props.initValue in current render process

    this.shouldUseInitValue = !context.getArrayField(field); // Separate the arrays that reset and the usual add and remove modify, otherwise they will affect each other

    const initValueCopyForFormState = cloneDeep_default()(initValue);

    const initValueCopyForReset = cloneDeep_default()(initValue);

    context.registerArrayField(field, initValueCopyForReset); // register ArrayField will update state.updateKey to render, So there is no need to execute forceUpdate here

    context.updateStateValue(field, initValueCopyForFormState, {
      notNotify: true,
      notUpdate: true
    });
  }

  componentWillUnmount() {
    const updater = this.context;
    const {
      field
    } = this.props;
    updater.unRegisterArrayField(field);
  }

  componentDidUpdate() {
    const updater = this.context;
    const {
      field
    } = this.props;
    const {
      keys
    } = this.state;
    const fieldValues = updater.getValue(field);
    const updateKey = getUpdateKey(updater.getArrayField(field)); // when update form outside, like use formApi.setValue('field', [{newItem1, newItem2}]),  formApi.setValues
    // re generate keys to update arrayField;

    if (updateKey !== this.cacheUpdateKey) {
      const newKeys = generateKeys(fieldValues, keys); // eslint-disable-next-line

      this.setState({
        keys: newKeys
      });
      this.cacheUpdateKey = updateKey;

      if (this.cacheUpdateKey !== null) {
        this.shouldUseInitValue = false;
      }
    }
  }

  add() {
    const {
      keys
    } = this.state;
    keys.push(getUuidv4());
    this.shouldUseInitValue = true;
    this.setState({
      keys
    });
  }

  addWithInitValue(lineObject) {
    var _context4;

    const updater = this.context;
    const {
      field
    } = this.props;
    const newArrayFieldVal = updater.getValue(field) ? slice_default()(_context4 = updater.getValue(field)).call(_context4) : [];
    newArrayFieldVal.push(lineObject);
    updater.updateStateValue(field, newArrayFieldVal, {});
    updater.updateArrayField(field, {
      updateKey: new Date().valueOf()
    });
  }

  remove(i) {
    const updater = this.context;
    const {
      keys
    } = this.state;
    const {
      field
    } = this.props;
    const newKeys = filterArrayByIndex(keys, i); // Make sure that all the keys in the line are removed, because some keys are not taken over by the field, only set in the initValue

    let newArrayFieldError = updater.getError(field);
    const opts = {
      notNotify: true,
      notUpdate: true
    };

    if (is_array_default()(newArrayFieldError)) {
      newArrayFieldError = slice_default()(newArrayFieldError).call(newArrayFieldError);

      splice_default()(newArrayFieldError).call(newArrayFieldError, i, 1);

      updater.updateStateError(field, newArrayFieldError, opts);
    } // if (Array.isArray(newArrayFieldTouched)) {
    //     newArrayFieldTouched = newArrayFieldTouched.slice();
    //     newArrayFieldTouched.splice(i, 1);
    //     updater.updateStateTouched(field, newArrayFieldTouched, opts);
    // }


    let newArrayFieldValue = updater.getValue(field);

    if (is_array_default()(newArrayFieldValue)) {
      newArrayFieldValue = slice_default()(newArrayFieldValue).call(newArrayFieldValue);

      splice_default()(newArrayFieldValue).call(newArrayFieldValue, i, 1);

      updater.updateStateValue(field, newArrayFieldValue);
    }

    this.setState({
      keys: newKeys
    });
  }

  render() {
    const {
      children,
      field
    } = this.props;
    const {
      keys
    } = this.state;

    const arrayFields = map_default()(keys).call(keys, (key, i) => {
      var _context5;

      return {
        // key: i,
        key,
        field: concat_default()(_context5 = "".concat(field, "[")).call(_context5, i, "]"),
        remove: () => this.remove(i)
      };
    });

    const {
      add
    } = this;
    const {
      addWithInitValue
    } = this;
    const contextVal = {
      shouldUseInitValue: this.shouldUseInitValue
    };
    return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default.a.createElement(ArrayFieldContext.Provider, {
      value: contextVal
    }, children({
      arrayFields,
      add,
      addWithInitValue
    }));
  }

}

arrayField_ArrayFieldComponent.contextType = FormUpdaterContext;
/* harmony default export */ var form_arrayField = (arrayField_ArrayFieldComponent);
// CONCATENATED MODULE: ./index.ts















































































/** Form */



/***/ }),

/***/ "qYhz":
/***/ (function(module, exports, __webpack_require__) {

var baseIndexOf = __webpack_require__("c7Qd"),
    isArrayLike = __webpack_require__("9y2L"),
    isString = __webpack_require__("nDih"),
    toInteger = __webpack_require__("m2YG"),
    values = __webpack_require__("0iyY");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Checks if `value` is in `collection`. If `collection` is a string, it's
 * checked for a substring of `value`, otherwise
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * is used for equality comparisons. If `fromIndex` is negative, it's used as
 * the offset from the end of `collection`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
 * @returns {boolean} Returns `true` if `value` is found, else `false`.
 * @example
 *
 * _.includes([1, 2, 3], 1);
 * // => true
 *
 * _.includes([1, 2, 3], 1, 2);
 * // => false
 *
 * _.includes({ 'a': 1, 'b': 2 }, 1);
 * // => true
 *
 * _.includes('abcd', 'bc');
 * // => true
 */
function includes(collection, value, fromIndex, guard) {
  collection = isArrayLike(collection) ? collection : values(collection);
  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

  var length = collection.length;
  if (fromIndex < 0) {
    fromIndex = nativeMax(length + fromIndex, 0);
  }
  return isString(collection)
    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
}

module.exports = includes;


/***/ }),

/***/ "qZ90":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("kjVY");

module.exports = parent;


/***/ }),

/***/ "qeCs":
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__("vxC8"),
    root = __webpack_require__("IBsm");

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),

/***/ "qjF7":
/***/ (function(module, exports) {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;


/***/ }),

/***/ "qqzA":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("7rbk");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').filter;


/***/ }),

/***/ "quhl":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var requireObjectCoercible = __webpack_require__("j0cD");

var Object = global.Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ "qxgV":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toDate;

var _index = _interopRequireDefault(__webpack_require__("8EaA"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @param {Date|Number} argument - the value to convert
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */
function toDate(argument) {
  (0, _index.default)(1, arguments);
  var argStr = Object.prototype.toString.call(argument); // Clone the date

  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new Date(argument.getTime());
  } else if (typeof argument === 'number' || argStr === '[object Number]') {
    return new Date(argument);
  } else {
    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
      // eslint-disable-next-line no-console
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console

      console.warn(new Error().stack);
    }

    return new Date(NaN);
  }
}

module.exports = exports.default;

/***/ }),

/***/ "r/P8":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var TO_STRING_TAG_SUPPORT = __webpack_require__("WbkG");
var isCallable = __webpack_require__("btm2");
var classofRaw = __webpack_require__("WTd3");
var wellKnownSymbol = __webpack_require__("HVcX");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var Object = global.Object;

// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};


/***/ }),

/***/ "r3cb":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("ncYK");

/***/ }),

/***/ "r89b":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("GnwC");

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.map;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.map) ? method : own;
};


/***/ }),

/***/ "r9Vz":
/***/ (function(module, exports, __webpack_require__) {

var isPlainObject = __webpack_require__("Kkar");

/**
 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
 * objects.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {string} key The key of the property to inspect.
 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
 */
function customOmitClone(value) {
  return isPlainObject(value) ? undefined : value;
}

module.exports = customOmitClone;


/***/ }),

/***/ "rIXb":
/***/ (function(module, exports) {



/***/ }),

/***/ "rMMG":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var global = __webpack_require__("oNh+");
var isPrototypeOf = __webpack_require__("cZmh");
var getPrototypeOf = __webpack_require__("K1oV");
var setPrototypeOf = __webpack_require__("wXON");
var copyConstructorProperties = __webpack_require__("f6U5");
var create = __webpack_require__("By9b");
var createNonEnumerableProperty = __webpack_require__("jNzf");
var createPropertyDescriptor = __webpack_require__("96pp");
var clearErrorStack = __webpack_require__("Rs/X");
var installErrorCause = __webpack_require__("BMex");
var iterate = __webpack_require__("Zf5/");
var normalizeStringArgument = __webpack_require__("nICx");
var wellKnownSymbol = __webpack_require__("HVcX");
var ERROR_STACK_INSTALLABLE = __webpack_require__("oor1");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var Error = global.Error;
var push = [].push;

var $AggregateError = function AggregateError(errors, message /* , options */) {
  var options = arguments.length > 2 ? arguments[2] : undefined;
  var isInstance = isPrototypeOf(AggregateErrorPrototype, this);
  var that;
  if (setPrototypeOf) {
    that = setPrototypeOf(new Error(), isInstance ? getPrototypeOf(this) : AggregateErrorPrototype);
  } else {
    that = isInstance ? this : create(AggregateErrorPrototype);
    createNonEnumerableProperty(that, TO_STRING_TAG, 'Error');
  }
  if (message !== undefined) createNonEnumerableProperty(that, 'message', normalizeStringArgument(message));
  if (ERROR_STACK_INSTALLABLE) createNonEnumerableProperty(that, 'stack', clearErrorStack(that.stack, 1));
  installErrorCause(that, options);
  var errorsArray = [];
  iterate(errors, push, { that: errorsArray });
  createNonEnumerableProperty(that, 'errors', errorsArray);
  return that;
};

if (setPrototypeOf) setPrototypeOf($AggregateError, Error);
else copyConstructorProperties($AggregateError, Error, { name: true });

var AggregateErrorPrototype = $AggregateError.prototype = create(Error.prototype, {
  constructor: createPropertyDescriptor(1, $AggregateError),
  message: createPropertyDescriptor(1, ''),
  name: createPropertyDescriptor(1, 'AggregateError')
});

// `AggregateError` constructor
// https://tc39.es/ecma262/#sec-aggregate-error-constructor
$({ global: true }, {
  AggregateError: $AggregateError
});


/***/ }),

/***/ "rPqN":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("mxB3");

/***/ }),

/***/ "rU3k":
/***/ (function(module, exports) {



/***/ }),

/***/ "rVmq":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("qZ90");

/***/ }),

/***/ "rXFn":
/***/ (function(module, exports, __webpack_require__) {

var baseSlice = __webpack_require__("0Ocv");

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : baseSlice(array, start, end);
}

module.exports = castSlice;


/***/ }),

/***/ "re6r":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("wuuJ");

/***/ }),

/***/ "rjsz":
/***/ (function(module, exports) {



/***/ }),

/***/ "rmhs":
/***/ (function(module, exports, __webpack_require__) {

var baseTimes = __webpack_require__("2ZvR"),
    isArguments = __webpack_require__("bvyN"),
    isArray = __webpack_require__("wxYD"),
    isBuffer = __webpack_require__("3ajY"),
    isIndex = __webpack_require__("pnw1"),
    isTypedArray = __webpack_require__("Qd2C");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;


/***/ }),

/***/ "s+R0":
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__("JBn+"),
    arrayIncludes = __webpack_require__("OfKG"),
    arrayIncludesWith = __webpack_require__("sCL+"),
    cacheHas = __webpack_require__("S0iI"),
    createSet = __webpack_require__("9TP6"),
    setToArray = __webpack_require__("XlL0");

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  }
  else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : createSet(array);
    if (set) {
      return setToArray(set);
    }
    isCommon = false;
    includes = cacheHas;
    seen = new SetCache;
  }
  else {
    seen = iteratee ? [] : result;
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var seenIndex = seen.length;
      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }
      if (iteratee) {
        seen.push(computed);
      }
      result.push(value);
    }
    else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

module.exports = baseUniq;


/***/ }),

/***/ "s0u6":
/***/ (function(module, exports) {



/***/ }),

/***/ "sBhu":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("HVcX");

var MATCH = wellKnownSymbol('match');

module.exports = function (METHOD_NAME) {
  var regexp = /./;
  try {
    '/./'[METHOD_NAME](regexp);
  } catch (error1) {
    try {
      regexp[MATCH] = false;
      return '/./'[METHOD_NAME](regexp);
    } catch (error2) { /* empty */ }
  } return false;
};


/***/ }),

/***/ "sCL+":
/***/ (function(module, exports) {

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

module.exports = arrayIncludesWith;


/***/ }),

/***/ "sD1O":
/***/ (function(module, exports, __webpack_require__) {

var baseCreate = __webpack_require__("vGGS"),
    getPrototype = __webpack_require__("/wCD"),
    isPrototype = __webpack_require__("CbIe");

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

module.exports = initCloneObject;


/***/ }),

/***/ "sDE4":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("A+N4");

/***/ }),

/***/ "sJY8":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("p7Hb");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').sort;


/***/ }),

/***/ "sJwy":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var isConstructor = __webpack_require__("mqoN");
var tryToString = __webpack_require__("ZSZW");

var TypeError = global.TypeError;

// `Assert: IsConstructor(argument) is true`
module.exports = function (argument) {
  if (isConstructor(argument)) return argument;
  throw TypeError(tryToString(argument) + ' is not a constructor');
};


/***/ }),

/***/ "sPAe":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("FiNQ");

module.exports = parent;


/***/ }),

/***/ "sQf1":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("Nve6");

module.exports = parent;


/***/ }),

/***/ "sSg2":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: '1 hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: '1 day',
    other: '{{count}} days'
  },
  aboutXWeeks: {
    one: 'about 1 week',
    other: 'about {{count}} weeks'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weeks'
  },
  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: '1 month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: '1 year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years'
  }
};

var formatDistance = function (token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];

  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }

  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }

  return result;
};

var _default = formatDistance;
exports.default = _default;
module.exports = exports.default;

/***/ }),

/***/ "sYtR":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
var global = __webpack_require__("oNh+");
var uncurryThis = __webpack_require__("XQ/X");

var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80
var delimiter = '-'; // '\x2D'
var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
var baseMinusTMin = base - tMin;

var RangeError = global.RangeError;
var exec = uncurryThis(regexSeparators.exec);
var floor = Math.floor;
var fromCharCode = String.fromCharCode;
var charCodeAt = uncurryThis(''.charCodeAt);
var join = uncurryThis([].join);
var push = uncurryThis([].push);
var replace = uncurryThis(''.replace);
var split = uncurryThis(''.split);
var toLowerCase = uncurryThis(''.toLowerCase);

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 */
var ucs2decode = function (string) {
  var output = [];
  var counter = 0;
  var length = string.length;
  while (counter < length) {
    var value = charCodeAt(string, counter++);
    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // It's a high surrogate, and there is a next character.
      var extra = charCodeAt(string, counter++);
      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
        push(output, ((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // It's an unmatched surrogate; only append this code unit, in case the
        // next code unit is the high surrogate of a surrogate pair.
        push(output, value);
        counter--;
      }
    } else {
      push(output, value);
    }
  }
  return output;
};

/**
 * Converts a digit/integer into a basic code point.
 */
var digitToBasic = function (digit) {
  //  0..25 map to ASCII a..z or A..Z
  // 26..35 map to ASCII 0..9
  return digit + 22 + 75 * (digit < 26);
};

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 */
var adapt = function (delta, numPoints, firstTime) {
  var k = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);
  while (delta > baseMinusTMin * tMax >> 1) {
    delta = floor(delta / baseMinusTMin);
    k += base;
  }
  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};

/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 */
var encode = function (input) {
  var output = [];

  // Convert the input in UCS-2 to an array of Unicode code points.
  input = ucs2decode(input);

  // Cache the length.
  var inputLength = input.length;

  // Initialize the state.
  var n = initialN;
  var delta = 0;
  var bias = initialBias;
  var i, currentValue;

  // Handle the basic code points.
  for (i = 0; i < input.length; i++) {
    currentValue = input[i];
    if (currentValue < 0x80) {
      push(output, fromCharCode(currentValue));
    }
  }

  var basicLength = output.length; // number of basic code points.
  var handledCPCount = basicLength; // number of code points that have been handled;

  // Finish the basic string with a delimiter unless it's empty.
  if (basicLength) {
    push(output, delimiter);
  }

  // Main encoding loop:
  while (handledCPCount < inputLength) {
    // All non-basic code points < n have been handled already. Find the next larger one:
    var m = maxInt;
    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue >= n && currentValue < m) {
        m = currentValue;
      }
    }

    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
    var handledCPCountPlusOne = handledCPCount + 1;
    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
      throw RangeError(OVERFLOW_ERROR);
    }

    delta += (m - n) * handledCPCountPlusOne;
    n = m;

    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue < n && ++delta > maxInt) {
        throw RangeError(OVERFLOW_ERROR);
      }
      if (currentValue == n) {
        // Represent delta as a generalized variable-length integer.
        var q = delta;
        var k = base;
        while (true) {
          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
          if (q < t) break;
          var qMinusT = q - t;
          var baseMinusT = base - t;
          push(output, fromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
          q = floor(qMinusT / baseMinusT);
          k += base;
        }

        push(output, fromCharCode(digitToBasic(q)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        handledCPCount++;
      }
    }

    delta++;
    n++;
  }
  return join(output, '');
};

module.exports = function (input) {
  var encoded = [];
  var labels = split(replace(toLowerCase(input), regexSeparators, '\u002E'), '.');
  var i, label;
  for (i = 0; i < labels.length; i++) {
    label = labels[i];
    push(encoded, exec(regexNonASCII, label) ? 'xn--' + encode(label) : label);
  }
  return join(encoded, '.');
};


/***/ }),

/***/ "si4l":
/***/ (function(module, exports) {



/***/ }),

/***/ "sjzV":
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__("Q4oW");

/**
 * The base implementation of `_.filter` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function baseFilter(collection, predicate) {
  var result = [];
  baseEach(collection, function(value, index, collection) {
    if (predicate(value, index, collection)) {
      result.push(value);
    }
  });
  return result;
}

module.exports = baseFilter;


/***/ }),

/***/ "swpL":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var bind = __webpack_require__("9X0z");
var getOwnPropertyDescriptor = __webpack_require__("c9aA").f;
var macrotask = __webpack_require__("moKl").set;
var IS_IOS = __webpack_require__("jMEd");
var IS_IOS_PEBBLE = __webpack_require__("GfSK");
var IS_WEBOS_WEBKIT = __webpack_require__("dQAp");
var IS_NODE = __webpack_require__("Cg7V");

var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
var document = global.document;
var process = global.process;
var Promise = global.Promise;
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

var flush, head, last, notify, toggle, node, promise, then;

// modern engines have queueMicrotask method
if (!queueMicrotask) {
  flush = function () {
    var parent, fn;
    if (IS_NODE && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (error) {
        if (head) notify();
        else last = undefined;
        throw error;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
  if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document) {
    toggle = true;
    node = document.createTextNode('');
    new MutationObserver(flush).observe(node, { characterData: true });
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (!IS_IOS_PEBBLE && Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    promise = Promise.resolve(undefined);
    // workaround of WebKit ~ iOS Safari 10.1 bug
    promise.constructor = Promise;
    then = bind(promise.then, promise);
    notify = function () {
      then(flush);
    };
  // Node.js without promises
  } else if (IS_NODE) {
    notify = function () {
      process.nextTick(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessage
  // - onreadystatechange
  // - setTimeout
  } else {
    // strange IE + webpack dev server bug - use .bind(global)
    macrotask = bind(macrotask, global);
    notify = function () {
      macrotask(flush);
    };
  }
}

module.exports = queueMicrotask || function (fn) {
  var task = { fn: fn, next: undefined };
  if (last) last.next = task;
  if (!head) {
    head = task;
    notify();
  } last = task;
};


/***/ }),

/***/ "sybH":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("wA+a");
var path = __webpack_require__("j0PW");

module.exports = path.setInterval;


/***/ }),

/***/ "szjH":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("5IZX");

module.exports = parent;


/***/ }),

/***/ "t+Lu":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = assign;

function assign(target, dirtyObject) {
  if (target == null) {
    throw new TypeError('assign requires that input parameter not be null or undefined');
  }

  dirtyObject = dirtyObject || {};

  for (var property in dirtyObject) {
    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {
      target[property] = dirtyObject[property];
    }
  }

  return target;
}

module.exports = exports.default;

/***/ }),

/***/ "t0L4":
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),

/***/ "t64S":
/***/ (function(module, exports) {



/***/ }),

/***/ "tBOq":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("n9AK");
var NATIVE_SYMBOL = __webpack_require__("5TyG");
var fails = __webpack_require__("XU0c");
var getOwnPropertySymbolsModule = __webpack_require__("iYt3");
var toObject = __webpack_require__("quhl");

// V8 ~ Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FORCED = !NATIVE_SYMBOL || fails(function () { getOwnPropertySymbolsModule.f(1); });

// `Object.getOwnPropertySymbols` method
// https://tc39.es/ecma262/#sec-object.getownpropertysymbols
$({ target: 'Object', stat: true, forced: FORCED }, {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    var $getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
    return $getOwnPropertySymbols ? $getOwnPropertySymbols(toObject(it)) : [];
  }
});


/***/ }),

/***/ "tC4N":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("sJY8");

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.sort;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.sort) ? method : own;
};


/***/ }),

/***/ "tCEB":
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__("j0PW");
var hasOwn = __webpack_require__("PIIU");
var wrappedWellKnownSymbolModule = __webpack_require__("wuos");
var defineProperty = __webpack_require__("JliG").f;

module.exports = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!hasOwn(Symbol, NAME)) defineProperty(Symbol, NAME, {
    value: wrappedWellKnownSymbolModule.f(NAME)
  });
};


/***/ }),

/***/ "tImS":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = buildLocalizeFn;

function buildLocalizeFn(args) {
  return function (dirtyIndex, dirtyOptions) {
    var options = dirtyOptions || {};
    var context = options.context ? String(options.context) : 'standalone';
    var valuesArray;

    if (context === 'formatting' && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;

      var _width = options.width ? String(options.width) : args.defaultWidth;

      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }

    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!

    return valuesArray[index];
  };
}

module.exports = exports.default;

/***/ }),

/***/ "tLQN":
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ "tObo":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = __webpack_require__("yUea");

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),

/***/ "tPQG":
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__("LtXa"),
    keys = __webpack_require__("BlJA");

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;


/***/ }),

/***/ "tQYX":
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ "tlBq":
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__("pIod"),
    getSymbols = __webpack_require__("70Le"),
    keys = __webpack_require__("BlJA");

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;


/***/ }),

/***/ "u12T":
/***/ (function(module, exports) {



/***/ }),

/***/ "uAsO":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("lv3h");
__webpack_require__("X7cO");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').values;


/***/ }),

/***/ "uB1P":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("TApb");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').reverse;


/***/ }),

/***/ "uK0S":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("5Jdw");
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__("pVjA");
var definePropertyModule = __webpack_require__("JliG");
var anObject = __webpack_require__("LTNl");
var toIndexedObject = __webpack_require__("VcbD");
var objectKeys = __webpack_require__("nKVx");

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es-x/no-object-defineproperties -- safe
exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var props = toIndexedObject(Properties);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);
  return O;
};


/***/ }),

/***/ "uOTx":
/***/ (function(module, exports, __webpack_require__) {

// TODO: Remove from `core-js@4`
var $ = __webpack_require__("n9AK");
var global = __webpack_require__("oNh+");
var uncurryThis = __webpack_require__("XQ/X");

var Date = global.Date;
var getTime = uncurryThis(Date.prototype.getTime);

// `Date.now` method
// https://tc39.es/ecma262/#sec-date.now
$({ target: 'Date', stat: true }, {
  now: function now() {
    return getTime(new Date());
  }
});


/***/ }),

/***/ "uUTq":
/***/ (function(module, exports, __webpack_require__) {

var baseDifference = __webpack_require__("X+YX"),
    baseRest = __webpack_require__("R3TX"),
    isArrayLikeObject = __webpack_require__("Ndl3");

/**
 * Creates an array excluding all given values using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * **Note:** Unlike `_.pull`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...*} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.difference, _.xor
 * @example
 *
 * _.without([2, 1, 2, 3], 1, 2);
 * // => [3]
 */
var without = baseRest(function(array, values) {
  return isArrayLikeObject(array)
    ? baseDifference(array, values)
    : [];
});

module.exports = without;


/***/ }),

/***/ "uZih":
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__("H87J"),
    baseClone = __webpack_require__("kn3Q"),
    baseUnset = __webpack_require__("a49g"),
    castPath = __webpack_require__("xoyU"),
    copyObject = __webpack_require__("LtXa"),
    customOmitClone = __webpack_require__("r9Vz"),
    flatRest = __webpack_require__("cH1A"),
    getAllKeysIn = __webpack_require__("zF5n");

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * The opposite of `_.pick`; this method creates an object composed of the
 * own and inherited enumerable property paths of `object` that are not omitted.
 *
 * **Note:** This method is considerably slower than `_.pick`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to omit.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omit(object, ['a', 'c']);
 * // => { 'b': '2' }
 */
var omit = flatRest(function(object, paths) {
  var result = {};
  if (object == null) {
    return result;
  }
  var isDeep = false;
  paths = arrayMap(paths, function(path) {
    path = castPath(path, object);
    isDeep || (isDeep = path.length > 1);
    return path;
  });
  copyObject(object, getAllKeysIn(object), result);
  if (isDeep) {
    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
  }
  var length = paths.length;
  while (length--) {
    baseUnset(result, paths[length]);
  }
  return result;
});

module.exports = omit;


/***/ }),

/***/ "ujsi":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("MpGL");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').includes;


/***/ }),

/***/ "uoFg":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("dLyh");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').slice;


/***/ }),

/***/ "uw59":
/***/ (function(module, exports) {



/***/ }),

/***/ "uwM5":
/***/ (function(module, exports) {



/***/ }),

/***/ "v2Fx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
__webpack_require__("91A9");
var $ = __webpack_require__("n9AK");
var DESCRIPTORS = __webpack_require__("5Jdw");
var USE_NATIVE_URL = __webpack_require__("crqh");
var global = __webpack_require__("oNh+");
var bind = __webpack_require__("9X0z");
var uncurryThis = __webpack_require__("XQ/X");
var defineProperties = __webpack_require__("uK0S").f;
var redefine = __webpack_require__("yX36");
var anInstance = __webpack_require__("QjcZ");
var hasOwn = __webpack_require__("PIIU");
var assign = __webpack_require__("cpF+");
var arrayFrom = __webpack_require__("EykU");
var arraySlice = __webpack_require__("PtsP");
var codeAt = __webpack_require__("LTnH").codeAt;
var toASCII = __webpack_require__("sYtR");
var $toString = __webpack_require__("Xrs4");
var setToStringTag = __webpack_require__("CtlU");
var validateArgumentsLength = __webpack_require__("VYEZ");
var URLSearchParamsModule = __webpack_require__("YsqY");
var InternalStateModule = __webpack_require__("WRdu");

var setInternalState = InternalStateModule.set;
var getInternalURLState = InternalStateModule.getterFor('URL');
var URLSearchParams = URLSearchParamsModule.URLSearchParams;
var getInternalSearchParamsState = URLSearchParamsModule.getState;

var NativeURL = global.URL;
var TypeError = global.TypeError;
var parseInt = global.parseInt;
var floor = Math.floor;
var pow = Math.pow;
var charAt = uncurryThis(''.charAt);
var exec = uncurryThis(/./.exec);
var join = uncurryThis([].join);
var numberToString = uncurryThis(1.0.toString);
var pop = uncurryThis([].pop);
var push = uncurryThis([].push);
var replace = uncurryThis(''.replace);
var shift = uncurryThis([].shift);
var split = uncurryThis(''.split);
var stringSlice = uncurryThis(''.slice);
var toLowerCase = uncurryThis(''.toLowerCase);
var unshift = uncurryThis([].unshift);

var INVALID_AUTHORITY = 'Invalid authority';
var INVALID_SCHEME = 'Invalid scheme';
var INVALID_HOST = 'Invalid host';
var INVALID_PORT = 'Invalid port';

var ALPHA = /[a-z]/i;
// eslint-disable-next-line regexp/no-obscure-range -- safe
var ALPHANUMERIC = /[\d+-.a-z]/i;
var DIGIT = /\d/;
var HEX_START = /^0x/i;
var OCT = /^[0-7]+$/;
var DEC = /^\d+$/;
var HEX = /^[\da-f]+$/i;
/* eslint-disable regexp/no-control-character -- safe */
var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:<>?@[\\\]^|]/;
var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\0\t\n\r #/:<>?@[\\\]^|]/;
var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u0020]+|[\u0000-\u0020]+$/g;
var TAB_AND_NEW_LINE = /[\t\n\r]/g;
/* eslint-enable regexp/no-control-character -- safe */
var EOF;

// https://url.spec.whatwg.org/#ipv4-number-parser
var parseIPv4 = function (input) {
  var parts = split(input, '.');
  var partsLength, numbers, index, part, radix, number, ipv4;
  if (parts.length && parts[parts.length - 1] == '') {
    parts.length--;
  }
  partsLength = parts.length;
  if (partsLength > 4) return input;
  numbers = [];
  for (index = 0; index < partsLength; index++) {
    part = parts[index];
    if (part == '') return input;
    radix = 10;
    if (part.length > 1 && charAt(part, 0) == '0') {
      radix = exec(HEX_START, part) ? 16 : 8;
      part = stringSlice(part, radix == 8 ? 1 : 2);
    }
    if (part === '') {
      number = 0;
    } else {
      if (!exec(radix == 10 ? DEC : radix == 8 ? OCT : HEX, part)) return input;
      number = parseInt(part, radix);
    }
    push(numbers, number);
  }
  for (index = 0; index < partsLength; index++) {
    number = numbers[index];
    if (index == partsLength - 1) {
      if (number >= pow(256, 5 - partsLength)) return null;
    } else if (number > 255) return null;
  }
  ipv4 = pop(numbers);
  for (index = 0; index < numbers.length; index++) {
    ipv4 += numbers[index] * pow(256, 3 - index);
  }
  return ipv4;
};

// https://url.spec.whatwg.org/#concept-ipv6-parser
// eslint-disable-next-line max-statements -- TODO
var parseIPv6 = function (input) {
  var address = [0, 0, 0, 0, 0, 0, 0, 0];
  var pieceIndex = 0;
  var compress = null;
  var pointer = 0;
  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

  var chr = function () {
    return charAt(input, pointer);
  };

  if (chr() == ':') {
    if (charAt(input, 1) != ':') return;
    pointer += 2;
    pieceIndex++;
    compress = pieceIndex;
  }
  while (chr()) {
    if (pieceIndex == 8) return;
    if (chr() == ':') {
      if (compress !== null) return;
      pointer++;
      pieceIndex++;
      compress = pieceIndex;
      continue;
    }
    value = length = 0;
    while (length < 4 && exec(HEX, chr())) {
      value = value * 16 + parseInt(chr(), 16);
      pointer++;
      length++;
    }
    if (chr() == '.') {
      if (length == 0) return;
      pointer -= length;
      if (pieceIndex > 6) return;
      numbersSeen = 0;
      while (chr()) {
        ipv4Piece = null;
        if (numbersSeen > 0) {
          if (chr() == '.' && numbersSeen < 4) pointer++;
          else return;
        }
        if (!exec(DIGIT, chr())) return;
        while (exec(DIGIT, chr())) {
          number = parseInt(chr(), 10);
          if (ipv4Piece === null) ipv4Piece = number;
          else if (ipv4Piece == 0) return;
          else ipv4Piece = ipv4Piece * 10 + number;
          if (ipv4Piece > 255) return;
          pointer++;
        }
        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
        numbersSeen++;
        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
      }
      if (numbersSeen != 4) return;
      break;
    } else if (chr() == ':') {
      pointer++;
      if (!chr()) return;
    } else if (chr()) return;
    address[pieceIndex++] = value;
  }
  if (compress !== null) {
    swaps = pieceIndex - compress;
    pieceIndex = 7;
    while (pieceIndex != 0 && swaps > 0) {
      swap = address[pieceIndex];
      address[pieceIndex--] = address[compress + swaps - 1];
      address[compress + --swaps] = swap;
    }
  } else if (pieceIndex != 8) return;
  return address;
};

var findLongestZeroSequence = function (ipv6) {
  var maxIndex = null;
  var maxLength = 1;
  var currStart = null;
  var currLength = 0;
  var index = 0;
  for (; index < 8; index++) {
    if (ipv6[index] !== 0) {
      if (currLength > maxLength) {
        maxIndex = currStart;
        maxLength = currLength;
      }
      currStart = null;
      currLength = 0;
    } else {
      if (currStart === null) currStart = index;
      ++currLength;
    }
  }
  if (currLength > maxLength) {
    maxIndex = currStart;
    maxLength = currLength;
  }
  return maxIndex;
};

// https://url.spec.whatwg.org/#host-serializing
var serializeHost = function (host) {
  var result, index, compress, ignore0;
  // ipv4
  if (typeof host == 'number') {
    result = [];
    for (index = 0; index < 4; index++) {
      unshift(result, host % 256);
      host = floor(host / 256);
    } return join(result, '.');
  // ipv6
  } else if (typeof host == 'object') {
    result = '';
    compress = findLongestZeroSequence(host);
    for (index = 0; index < 8; index++) {
      if (ignore0 && host[index] === 0) continue;
      if (ignore0) ignore0 = false;
      if (compress === index) {
        result += index ? ':' : '::';
        ignore0 = true;
      } else {
        result += numberToString(host[index], 16);
        if (index < 7) result += ':';
      }
    }
    return '[' + result + ']';
  } return host;
};

var C0ControlPercentEncodeSet = {};
var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
  ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
});
var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
  '#': 1, '?': 1, '{': 1, '}': 1
});
var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
});

var percentEncode = function (chr, set) {
  var code = codeAt(chr, 0);
  return code > 0x20 && code < 0x7F && !hasOwn(set, chr) ? chr : encodeURIComponent(chr);
};

// https://url.spec.whatwg.org/#special-scheme
var specialSchemes = {
  ftp: 21,
  file: null,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443
};

// https://url.spec.whatwg.org/#windows-drive-letter
var isWindowsDriveLetter = function (string, normalized) {
  var second;
  return string.length == 2 && exec(ALPHA, charAt(string, 0))
    && ((second = charAt(string, 1)) == ':' || (!normalized && second == '|'));
};

// https://url.spec.whatwg.org/#start-with-a-windows-drive-letter
var startsWithWindowsDriveLetter = function (string) {
  var third;
  return string.length > 1 && isWindowsDriveLetter(stringSlice(string, 0, 2)) && (
    string.length == 2 ||
    ((third = charAt(string, 2)) === '/' || third === '\\' || third === '?' || third === '#')
  );
};

// https://url.spec.whatwg.org/#single-dot-path-segment
var isSingleDot = function (segment) {
  return segment === '.' || toLowerCase(segment) === '%2e';
};

// https://url.spec.whatwg.org/#double-dot-path-segment
var isDoubleDot = function (segment) {
  segment = toLowerCase(segment);
  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
};

// States:
var SCHEME_START = {};
var SCHEME = {};
var NO_SCHEME = {};
var SPECIAL_RELATIVE_OR_AUTHORITY = {};
var PATH_OR_AUTHORITY = {};
var RELATIVE = {};
var RELATIVE_SLASH = {};
var SPECIAL_AUTHORITY_SLASHES = {};
var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
var AUTHORITY = {};
var HOST = {};
var HOSTNAME = {};
var PORT = {};
var FILE = {};
var FILE_SLASH = {};
var FILE_HOST = {};
var PATH_START = {};
var PATH = {};
var CANNOT_BE_A_BASE_URL_PATH = {};
var QUERY = {};
var FRAGMENT = {};

var URLState = function (url, isBase, base) {
  var urlString = $toString(url);
  var baseState, failure, searchParams;
  if (isBase) {
    failure = this.parse(urlString);
    if (failure) throw TypeError(failure);
    this.searchParams = null;
  } else {
    if (base !== undefined) baseState = new URLState(base, true);
    failure = this.parse(urlString, null, baseState);
    if (failure) throw TypeError(failure);
    searchParams = getInternalSearchParamsState(new URLSearchParams());
    searchParams.bindURL(this);
    this.searchParams = searchParams;
  }
};

URLState.prototype = {
  type: 'URL',
  // https://url.spec.whatwg.org/#url-parsing
  // eslint-disable-next-line max-statements -- TODO
  parse: function (input, stateOverride, base) {
    var url = this;
    var state = stateOverride || SCHEME_START;
    var pointer = 0;
    var buffer = '';
    var seenAt = false;
    var seenBracket = false;
    var seenPasswordToken = false;
    var codePoints, chr, bufferCodePoints, failure;

    input = $toString(input);

    if (!stateOverride) {
      url.scheme = '';
      url.username = '';
      url.password = '';
      url.host = null;
      url.port = null;
      url.path = [];
      url.query = null;
      url.fragment = null;
      url.cannotBeABaseURL = false;
      input = replace(input, LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
    }

    input = replace(input, TAB_AND_NEW_LINE, '');

    codePoints = arrayFrom(input);

    while (pointer <= codePoints.length) {
      chr = codePoints[pointer];
      switch (state) {
        case SCHEME_START:
          if (chr && exec(ALPHA, chr)) {
            buffer += toLowerCase(chr);
            state = SCHEME;
          } else if (!stateOverride) {
            state = NO_SCHEME;
            continue;
          } else return INVALID_SCHEME;
          break;

        case SCHEME:
          if (chr && (exec(ALPHANUMERIC, chr) || chr == '+' || chr == '-' || chr == '.')) {
            buffer += toLowerCase(chr);
          } else if (chr == ':') {
            if (stateOverride && (
              (url.isSpecial() != hasOwn(specialSchemes, buffer)) ||
              (buffer == 'file' && (url.includesCredentials() || url.port !== null)) ||
              (url.scheme == 'file' && !url.host)
            )) return;
            url.scheme = buffer;
            if (stateOverride) {
              if (url.isSpecial() && specialSchemes[url.scheme] == url.port) url.port = null;
              return;
            }
            buffer = '';
            if (url.scheme == 'file') {
              state = FILE;
            } else if (url.isSpecial() && base && base.scheme == url.scheme) {
              state = SPECIAL_RELATIVE_OR_AUTHORITY;
            } else if (url.isSpecial()) {
              state = SPECIAL_AUTHORITY_SLASHES;
            } else if (codePoints[pointer + 1] == '/') {
              state = PATH_OR_AUTHORITY;
              pointer++;
            } else {
              url.cannotBeABaseURL = true;
              push(url.path, '');
              state = CANNOT_BE_A_BASE_URL_PATH;
            }
          } else if (!stateOverride) {
            buffer = '';
            state = NO_SCHEME;
            pointer = 0;
            continue;
          } else return INVALID_SCHEME;
          break;

        case NO_SCHEME:
          if (!base || (base.cannotBeABaseURL && chr != '#')) return INVALID_SCHEME;
          if (base.cannotBeABaseURL && chr == '#') {
            url.scheme = base.scheme;
            url.path = arraySlice(base.path);
            url.query = base.query;
            url.fragment = '';
            url.cannotBeABaseURL = true;
            state = FRAGMENT;
            break;
          }
          state = base.scheme == 'file' ? FILE : RELATIVE;
          continue;

        case SPECIAL_RELATIVE_OR_AUTHORITY:
          if (chr == '/' && codePoints[pointer + 1] == '/') {
            state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
            pointer++;
          } else {
            state = RELATIVE;
            continue;
          } break;

        case PATH_OR_AUTHORITY:
          if (chr == '/') {
            state = AUTHORITY;
            break;
          } else {
            state = PATH;
            continue;
          }

        case RELATIVE:
          url.scheme = base.scheme;
          if (chr == EOF) {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySlice(base.path);
            url.query = base.query;
          } else if (chr == '/' || (chr == '\\' && url.isSpecial())) {
            state = RELATIVE_SLASH;
          } else if (chr == '?') {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySlice(base.path);
            url.query = '';
            state = QUERY;
          } else if (chr == '#') {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySlice(base.path);
            url.query = base.query;
            url.fragment = '';
            state = FRAGMENT;
          } else {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySlice(base.path);
            url.path.length--;
            state = PATH;
            continue;
          } break;

        case RELATIVE_SLASH:
          if (url.isSpecial() && (chr == '/' || chr == '\\')) {
            state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
          } else if (chr == '/') {
            state = AUTHORITY;
          } else {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            state = PATH;
            continue;
          } break;

        case SPECIAL_AUTHORITY_SLASHES:
          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
          if (chr != '/' || charAt(buffer, pointer + 1) != '/') continue;
          pointer++;
          break;

        case SPECIAL_AUTHORITY_IGNORE_SLASHES:
          if (chr != '/' && chr != '\\') {
            state = AUTHORITY;
            continue;
          } break;

        case AUTHORITY:
          if (chr == '@') {
            if (seenAt) buffer = '%40' + buffer;
            seenAt = true;
            bufferCodePoints = arrayFrom(buffer);
            for (var i = 0; i < bufferCodePoints.length; i++) {
              var codePoint = bufferCodePoints[i];
              if (codePoint == ':' && !seenPasswordToken) {
                seenPasswordToken = true;
                continue;
              }
              var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
              if (seenPasswordToken) url.password += encodedCodePoints;
              else url.username += encodedCodePoints;
            }
            buffer = '';
          } else if (
            chr == EOF || chr == '/' || chr == '?' || chr == '#' ||
            (chr == '\\' && url.isSpecial())
          ) {
            if (seenAt && buffer == '') return INVALID_AUTHORITY;
            pointer -= arrayFrom(buffer).length + 1;
            buffer = '';
            state = HOST;
          } else buffer += chr;
          break;

        case HOST:
        case HOSTNAME:
          if (stateOverride && url.scheme == 'file') {
            state = FILE_HOST;
            continue;
          } else if (chr == ':' && !seenBracket) {
            if (buffer == '') return INVALID_HOST;
            failure = url.parseHost(buffer);
            if (failure) return failure;
            buffer = '';
            state = PORT;
            if (stateOverride == HOSTNAME) return;
          } else if (
            chr == EOF || chr == '/' || chr == '?' || chr == '#' ||
            (chr == '\\' && url.isSpecial())
          ) {
            if (url.isSpecial() && buffer == '') return INVALID_HOST;
            if (stateOverride && buffer == '' && (url.includesCredentials() || url.port !== null)) return;
            failure = url.parseHost(buffer);
            if (failure) return failure;
            buffer = '';
            state = PATH_START;
            if (stateOverride) return;
            continue;
          } else {
            if (chr == '[') seenBracket = true;
            else if (chr == ']') seenBracket = false;
            buffer += chr;
          } break;

        case PORT:
          if (exec(DIGIT, chr)) {
            buffer += chr;
          } else if (
            chr == EOF || chr == '/' || chr == '?' || chr == '#' ||
            (chr == '\\' && url.isSpecial()) ||
            stateOverride
          ) {
            if (buffer != '') {
              var port = parseInt(buffer, 10);
              if (port > 0xFFFF) return INVALID_PORT;
              url.port = (url.isSpecial() && port === specialSchemes[url.scheme]) ? null : port;
              buffer = '';
            }
            if (stateOverride) return;
            state = PATH_START;
            continue;
          } else return INVALID_PORT;
          break;

        case FILE:
          url.scheme = 'file';
          if (chr == '/' || chr == '\\') state = FILE_SLASH;
          else if (base && base.scheme == 'file') {
            if (chr == EOF) {
              url.host = base.host;
              url.path = arraySlice(base.path);
              url.query = base.query;
            } else if (chr == '?') {
              url.host = base.host;
              url.path = arraySlice(base.path);
              url.query = '';
              state = QUERY;
            } else if (chr == '#') {
              url.host = base.host;
              url.path = arraySlice(base.path);
              url.query = base.query;
              url.fragment = '';
              state = FRAGMENT;
            } else {
              if (!startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ''))) {
                url.host = base.host;
                url.path = arraySlice(base.path);
                url.shortenPath();
              }
              state = PATH;
              continue;
            }
          } else {
            state = PATH;
            continue;
          } break;

        case FILE_SLASH:
          if (chr == '/' || chr == '\\') {
            state = FILE_HOST;
            break;
          }
          if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ''))) {
            if (isWindowsDriveLetter(base.path[0], true)) push(url.path, base.path[0]);
            else url.host = base.host;
          }
          state = PATH;
          continue;

        case FILE_HOST:
          if (chr == EOF || chr == '/' || chr == '\\' || chr == '?' || chr == '#') {
            if (!stateOverride && isWindowsDriveLetter(buffer)) {
              state = PATH;
            } else if (buffer == '') {
              url.host = '';
              if (stateOverride) return;
              state = PATH_START;
            } else {
              failure = url.parseHost(buffer);
              if (failure) return failure;
              if (url.host == 'localhost') url.host = '';
              if (stateOverride) return;
              buffer = '';
              state = PATH_START;
            } continue;
          } else buffer += chr;
          break;

        case PATH_START:
          if (url.isSpecial()) {
            state = PATH;
            if (chr != '/' && chr != '\\') continue;
          } else if (!stateOverride && chr == '?') {
            url.query = '';
            state = QUERY;
          } else if (!stateOverride && chr == '#') {
            url.fragment = '';
            state = FRAGMENT;
          } else if (chr != EOF) {
            state = PATH;
            if (chr != '/') continue;
          } break;

        case PATH:
          if (
            chr == EOF || chr == '/' ||
            (chr == '\\' && url.isSpecial()) ||
            (!stateOverride && (chr == '?' || chr == '#'))
          ) {
            if (isDoubleDot(buffer)) {
              url.shortenPath();
              if (chr != '/' && !(chr == '\\' && url.isSpecial())) {
                push(url.path, '');
              }
            } else if (isSingleDot(buffer)) {
              if (chr != '/' && !(chr == '\\' && url.isSpecial())) {
                push(url.path, '');
              }
            } else {
              if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
                if (url.host) url.host = '';
                buffer = charAt(buffer, 0) + ':'; // normalize windows drive letter
              }
              push(url.path, buffer);
            }
            buffer = '';
            if (url.scheme == 'file' && (chr == EOF || chr == '?' || chr == '#')) {
              while (url.path.length > 1 && url.path[0] === '') {
                shift(url.path);
              }
            }
            if (chr == '?') {
              url.query = '';
              state = QUERY;
            } else if (chr == '#') {
              url.fragment = '';
              state = FRAGMENT;
            }
          } else {
            buffer += percentEncode(chr, pathPercentEncodeSet);
          } break;

        case CANNOT_BE_A_BASE_URL_PATH:
          if (chr == '?') {
            url.query = '';
            state = QUERY;
          } else if (chr == '#') {
            url.fragment = '';
            state = FRAGMENT;
          } else if (chr != EOF) {
            url.path[0] += percentEncode(chr, C0ControlPercentEncodeSet);
          } break;

        case QUERY:
          if (!stateOverride && chr == '#') {
            url.fragment = '';
            state = FRAGMENT;
          } else if (chr != EOF) {
            if (chr == "'" && url.isSpecial()) url.query += '%27';
            else if (chr == '#') url.query += '%23';
            else url.query += percentEncode(chr, C0ControlPercentEncodeSet);
          } break;

        case FRAGMENT:
          if (chr != EOF) url.fragment += percentEncode(chr, fragmentPercentEncodeSet);
          break;
      }

      pointer++;
    }
  },
  // https://url.spec.whatwg.org/#host-parsing
  parseHost: function (input) {
    var result, codePoints, index;
    if (charAt(input, 0) == '[') {
      if (charAt(input, input.length - 1) != ']') return INVALID_HOST;
      result = parseIPv6(stringSlice(input, 1, -1));
      if (!result) return INVALID_HOST;
      this.host = result;
    // opaque host
    } else if (!this.isSpecial()) {
      if (exec(FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT, input)) return INVALID_HOST;
      result = '';
      codePoints = arrayFrom(input);
      for (index = 0; index < codePoints.length; index++) {
        result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
      }
      this.host = result;
    } else {
      input = toASCII(input);
      if (exec(FORBIDDEN_HOST_CODE_POINT, input)) return INVALID_HOST;
      result = parseIPv4(input);
      if (result === null) return INVALID_HOST;
      this.host = result;
    }
  },
  // https://url.spec.whatwg.org/#cannot-have-a-username-password-port
  cannotHaveUsernamePasswordPort: function () {
    return !this.host || this.cannotBeABaseURL || this.scheme == 'file';
  },
  // https://url.spec.whatwg.org/#include-credentials
  includesCredentials: function () {
    return this.username != '' || this.password != '';
  },
  // https://url.spec.whatwg.org/#is-special
  isSpecial: function () {
    return hasOwn(specialSchemes, this.scheme);
  },
  // https://url.spec.whatwg.org/#shorten-a-urls-path
  shortenPath: function () {
    var path = this.path;
    var pathSize = path.length;
    if (pathSize && (this.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
      path.length--;
    }
  },
  // https://url.spec.whatwg.org/#concept-url-serializer
  serialize: function () {
    var url = this;
    var scheme = url.scheme;
    var username = url.username;
    var password = url.password;
    var host = url.host;
    var port = url.port;
    var path = url.path;
    var query = url.query;
    var fragment = url.fragment;
    var output = scheme + ':';
    if (host !== null) {
      output += '//';
      if (url.includesCredentials()) {
        output += username + (password ? ':' + password : '') + '@';
      }
      output += serializeHost(host);
      if (port !== null) output += ':' + port;
    } else if (scheme == 'file') output += '//';
    output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + join(path, '/') : '';
    if (query !== null) output += '?' + query;
    if (fragment !== null) output += '#' + fragment;
    return output;
  },
  // https://url.spec.whatwg.org/#dom-url-href
  setHref: function (href) {
    var failure = this.parse(href);
    if (failure) throw TypeError(failure);
    this.searchParams.update();
  },
  // https://url.spec.whatwg.org/#dom-url-origin
  getOrigin: function () {
    var scheme = this.scheme;
    var port = this.port;
    if (scheme == 'blob') try {
      return new URLConstructor(scheme.path[0]).origin;
    } catch (error) {
      return 'null';
    }
    if (scheme == 'file' || !this.isSpecial()) return 'null';
    return scheme + '://' + serializeHost(this.host) + (port !== null ? ':' + port : '');
  },
  // https://url.spec.whatwg.org/#dom-url-protocol
  getProtocol: function () {
    return this.scheme + ':';
  },
  setProtocol: function (protocol) {
    this.parse($toString(protocol) + ':', SCHEME_START);
  },
  // https://url.spec.whatwg.org/#dom-url-username
  getUsername: function () {
    return this.username;
  },
  setUsername: function (username) {
    var codePoints = arrayFrom($toString(username));
    if (this.cannotHaveUsernamePasswordPort()) return;
    this.username = '';
    for (var i = 0; i < codePoints.length; i++) {
      this.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
    }
  },
  // https://url.spec.whatwg.org/#dom-url-password
  getPassword: function () {
    return this.password;
  },
  setPassword: function (password) {
    var codePoints = arrayFrom($toString(password));
    if (this.cannotHaveUsernamePasswordPort()) return;
    this.password = '';
    for (var i = 0; i < codePoints.length; i++) {
      this.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
    }
  },
  // https://url.spec.whatwg.org/#dom-url-host
  getHost: function () {
    var host = this.host;
    var port = this.port;
    return host === null ? ''
      : port === null ? serializeHost(host)
      : serializeHost(host) + ':' + port;
  },
  setHost: function (host) {
    if (this.cannotBeABaseURL) return;
    this.parse(host, HOST);
  },
  // https://url.spec.whatwg.org/#dom-url-hostname
  getHostname: function () {
    var host = this.host;
    return host === null ? '' : serializeHost(host);
  },
  setHostname: function (hostname) {
    if (this.cannotBeABaseURL) return;
    this.parse(hostname, HOSTNAME);
  },
  // https://url.spec.whatwg.org/#dom-url-port
  getPort: function () {
    var port = this.port;
    return port === null ? '' : $toString(port);
  },
  setPort: function (port) {
    if (this.cannotHaveUsernamePasswordPort()) return;
    port = $toString(port);
    if (port == '') this.port = null;
    else this.parse(port, PORT);
  },
  // https://url.spec.whatwg.org/#dom-url-pathname
  getPathname: function () {
    var path = this.path;
    return this.cannotBeABaseURL ? path[0] : path.length ? '/' + join(path, '/') : '';
  },
  setPathname: function (pathname) {
    if (this.cannotBeABaseURL) return;
    this.path = [];
    this.parse(pathname, PATH_START);
  },
  // https://url.spec.whatwg.org/#dom-url-search
  getSearch: function () {
    var query = this.query;
    return query ? '?' + query : '';
  },
  setSearch: function (search) {
    search = $toString(search);
    if (search == '') {
      this.query = null;
    } else {
      if ('?' == charAt(search, 0)) search = stringSlice(search, 1);
      this.query = '';
      this.parse(search, QUERY);
    }
    this.searchParams.update();
  },
  // https://url.spec.whatwg.org/#dom-url-searchparams
  getSearchParams: function () {
    return this.searchParams.facade;
  },
  // https://url.spec.whatwg.org/#dom-url-hash
  getHash: function () {
    var fragment = this.fragment;
    return fragment ? '#' + fragment : '';
  },
  setHash: function (hash) {
    hash = $toString(hash);
    if (hash == '') {
      this.fragment = null;
      return;
    }
    if ('#' == charAt(hash, 0)) hash = stringSlice(hash, 1);
    this.fragment = '';
    this.parse(hash, FRAGMENT);
  },
  update: function () {
    this.query = this.searchParams.serialize() || null;
  }
};

// `URL` constructor
// https://url.spec.whatwg.org/#url-class
var URLConstructor = function URL(url /* , base */) {
  var that = anInstance(this, URLPrototype);
  var base = validateArgumentsLength(arguments.length, 1) > 1 ? arguments[1] : undefined;
  var state = setInternalState(that, new URLState(url, false, base));
  if (!DESCRIPTORS) {
    that.href = state.serialize();
    that.origin = state.getOrigin();
    that.protocol = state.getProtocol();
    that.username = state.getUsername();
    that.password = state.getPassword();
    that.host = state.getHost();
    that.hostname = state.getHostname();
    that.port = state.getPort();
    that.pathname = state.getPathname();
    that.search = state.getSearch();
    that.searchParams = state.getSearchParams();
    that.hash = state.getHash();
  }
};

var URLPrototype = URLConstructor.prototype;

var accessorDescriptor = function (getter, setter) {
  return {
    get: function () {
      return getInternalURLState(this)[getter]();
    },
    set: setter && function (value) {
      return getInternalURLState(this)[setter](value);
    },
    configurable: true,
    enumerable: true
  };
};

if (DESCRIPTORS) {
  defineProperties(URLPrototype, {
    // `URL.prototype.href` accessors pair
    // https://url.spec.whatwg.org/#dom-url-href
    href: accessorDescriptor('serialize', 'setHref'),
    // `URL.prototype.origin` getter
    // https://url.spec.whatwg.org/#dom-url-origin
    origin: accessorDescriptor('getOrigin'),
    // `URL.prototype.protocol` accessors pair
    // https://url.spec.whatwg.org/#dom-url-protocol
    protocol: accessorDescriptor('getProtocol', 'setProtocol'),
    // `URL.prototype.username` accessors pair
    // https://url.spec.whatwg.org/#dom-url-username
    username: accessorDescriptor('getUsername', 'setUsername'),
    // `URL.prototype.password` accessors pair
    // https://url.spec.whatwg.org/#dom-url-password
    password: accessorDescriptor('getPassword', 'setPassword'),
    // `URL.prototype.host` accessors pair
    // https://url.spec.whatwg.org/#dom-url-host
    host: accessorDescriptor('getHost', 'setHost'),
    // `URL.prototype.hostname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hostname
    hostname: accessorDescriptor('getHostname', 'setHostname'),
    // `URL.prototype.port` accessors pair
    // https://url.spec.whatwg.org/#dom-url-port
    port: accessorDescriptor('getPort', 'setPort'),
    // `URL.prototype.pathname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-pathname
    pathname: accessorDescriptor('getPathname', 'setPathname'),
    // `URL.prototype.search` accessors pair
    // https://url.spec.whatwg.org/#dom-url-search
    search: accessorDescriptor('getSearch', 'setSearch'),
    // `URL.prototype.searchParams` getter
    // https://url.spec.whatwg.org/#dom-url-searchparams
    searchParams: accessorDescriptor('getSearchParams'),
    // `URL.prototype.hash` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hash
    hash: accessorDescriptor('getHash', 'setHash')
  });
}

// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
redefine(URLPrototype, 'toJSON', function toJSON() {
  return getInternalURLState(this).serialize();
}, { enumerable: true });

// `URL.prototype.toString` method
// https://url.spec.whatwg.org/#URL-stringification-behavior
redefine(URLPrototype, 'toString', function toString() {
  return getInternalURLState(this).serialize();
}, { enumerable: true });

if (NativeURL) {
  var nativeCreateObjectURL = NativeURL.createObjectURL;
  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
  // `URL.createObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', bind(nativeCreateObjectURL, NativeURL));
  // `URL.revokeObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', bind(nativeRevokeObjectURL, NativeURL));
}

setToStringTag(URLConstructor, 'URL');

$({ global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
  URL: URLConstructor
});


/***/ }),

/***/ "v5ZW":
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__("H87J"),
    baseIndexOf = __webpack_require__("c7Qd"),
    baseIndexOfWith = __webpack_require__("A0wc"),
    baseUnary = __webpack_require__("SU8Q"),
    copyArray = __webpack_require__("QT01");

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * The base implementation of `_.pullAllBy` without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to remove.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns `array`.
 */
function basePullAll(array, values, iteratee, comparator) {
  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
      index = -1,
      length = values.length,
      seen = array;

  if (array === values) {
    values = copyArray(values);
  }
  if (iteratee) {
    seen = arrayMap(array, baseUnary(iteratee));
  }
  while (++index < length) {
    var fromIndex = 0,
        value = values[index],
        computed = iteratee ? iteratee(value) : value;

    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
      if (seen !== array) {
        splice.call(seen, fromIndex, 1);
      }
      splice.call(array, fromIndex, 1);
    }
  }
  return array;
}

module.exports = basePullAll;


/***/ }),

/***/ "vFRI":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("Q+0L");

module.exports = parent;


/***/ }),

/***/ "vGGS":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("tQYX");

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;


/***/ }),

/***/ "vSOm":
/***/ (function(module, exports) {



/***/ }),

/***/ "vWPG":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("mVjH");
var path = __webpack_require__("j0PW");

module.exports = path.Number.isSafeInteger;


/***/ }),

/***/ "vcBr":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = subMilliseconds;

var _index = _interopRequireDefault(__webpack_require__("yuhP"));

var _index2 = _interopRequireDefault(__webpack_require__("nY5w"));

var _index3 = _interopRequireDefault(__webpack_require__("8EaA"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @name subMilliseconds
 * @category Millisecond Helpers
 * @summary Subtract the specified number of milliseconds from the given date.
 *
 * @description
 * Subtract the specified number of milliseconds from the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
 * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:29.250
 */
function subMilliseconds(dirtyDate, dirtyAmount) {
  (0, _index3.default)(2, arguments);
  var amount = (0, _index.default)(dirtyAmount);
  return (0, _index2.default)(dirtyDate, -amount);
}

module.exports = exports.default;

/***/ }),

/***/ "vjRO":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var global = __webpack_require__("oNh+");
var InternalMetadataModule = __webpack_require__("N8Lc");
var fails = __webpack_require__("XU0c");
var createNonEnumerableProperty = __webpack_require__("jNzf");
var iterate = __webpack_require__("Zf5/");
var anInstance = __webpack_require__("QjcZ");
var isCallable = __webpack_require__("btm2");
var isObject = __webpack_require__("H3h0");
var setToStringTag = __webpack_require__("CtlU");
var defineProperty = __webpack_require__("JliG").f;
var forEach = __webpack_require__("zDWZ").forEach;
var DESCRIPTORS = __webpack_require__("5Jdw");
var InternalStateModule = __webpack_require__("WRdu");

var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;

module.exports = function (CONSTRUCTOR_NAME, wrapper, common) {
  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
  var ADDER = IS_MAP ? 'set' : 'add';
  var NativeConstructor = global[CONSTRUCTOR_NAME];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  var exported = {};
  var Constructor;

  if (!DESCRIPTORS || !isCallable(NativeConstructor)
    || !(IS_WEAK || NativePrototype.forEach && !fails(function () { new NativeConstructor().entries().next(); }))
  ) {
    // create collection constructor
    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
    InternalMetadataModule.enable();
  } else {
    Constructor = wrapper(function (target, iterable) {
      setInternalState(anInstance(target, Prototype), {
        type: CONSTRUCTOR_NAME,
        collection: new NativeConstructor()
      });
      if (iterable != undefined) iterate(iterable, target[ADDER], { that: target, AS_ENTRIES: IS_MAP });
    });

    var Prototype = Constructor.prototype;

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    forEach(['add', 'clear', 'delete', 'forEach', 'get', 'has', 'set', 'keys', 'values', 'entries'], function (KEY) {
      var IS_ADDER = KEY == 'add' || KEY == 'set';
      if (KEY in NativePrototype && !(IS_WEAK && KEY == 'clear')) {
        createNonEnumerableProperty(Prototype, KEY, function (a, b) {
          var collection = getInternalState(this).collection;
          if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
          var result = collection[KEY](a === 0 ? 0 : a, b);
          return IS_ADDER ? this : result;
        });
      }
    });

    IS_WEAK || defineProperty(Prototype, 'size', {
      configurable: true,
      get: function () {
        return getInternalState(this).collection.size;
      }
    });
  }

  setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);

  exported[CONSTRUCTOR_NAME] = Constructor;
  $({ global: true, forced: true }, exported);

  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

  return Constructor;
};


/***/ }),

/***/ "vnVX":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getUTCISOWeek;

var _index = _interopRequireDefault(__webpack_require__("qxgV"));

var _index2 = _interopRequireDefault(__webpack_require__("SwUm"));

var _index3 = _interopRequireDefault(__webpack_require__("aBaL"));

var _index4 = _interopRequireDefault(__webpack_require__("8EaA"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCISOWeek(dirtyDate) {
  (0, _index4.default)(1, arguments);
  var date = (0, _index.default)(dirtyDate);
  var diff = (0, _index2.default)(date).getTime() - (0, _index3.default)(date).getTime(); // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)

  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

module.exports = exports.default;

/***/ }),

/***/ "vut1":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("NX68");

module.exports = parent;


/***/ }),

/***/ "vxC8":
/***/ (function(module, exports, __webpack_require__) {

var baseIsNative = __webpack_require__("5nKN"),
    getValue = __webpack_require__("4p/L");

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),

/***/ "w0Ba":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("cY0r");

module.exports = parent;


/***/ }),

/***/ "w2Tz":
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__("xoyU"),
    toKey = __webpack_require__("Ypsa");

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;


/***/ }),

/***/ "w4m/":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("C0uO");

/***/ }),

/***/ "wA+a":
/***/ (function(module, exports, __webpack_require__) {

// TODO: Remove this module from `core-js@4` since it's split to modules listed below
__webpack_require__("eVHe");
__webpack_require__("M/Cp");


/***/ }),

/***/ "wC3K":
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__("Pz+s");

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),

/***/ "wF8L":
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__("j0PW");
var global = __webpack_require__("oNh+");
var isCallable = __webpack_require__("btm2");

var aFunction = function (variable) {
  return isCallable(variable) ? variable : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])
    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
};


/***/ }),

/***/ "wXON":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable no-proto -- safe */
var uncurryThis = __webpack_require__("XQ/X");
var anObject = __webpack_require__("LTNl");
var aPossiblePrototype = __webpack_require__("E8k3");

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es-x/no-object-setprototypeof -- safe
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
    setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
    setter(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);


/***/ }),

/***/ "whR3":
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__("c72w"),
    copyObject = __webpack_require__("LtXa"),
    createAssigner = __webpack_require__("wpQC"),
    isArrayLike = __webpack_require__("9y2L"),
    isPrototype = __webpack_require__("CbIe"),
    keys = __webpack_require__("BlJA");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns own enumerable string keyed properties of source objects to the
 * destination object. Source objects are applied from left to right.
 * Subsequent sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object` and is loosely based on
 * [`Object.assign`](https://mdn.io/Object/assign).
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assignIn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assign({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'c': 3 }
 */
var assign = createAssigner(function(object, source) {
  if (isPrototype(source) || isArrayLike(source)) {
    copyObject(source, keys(source), object);
    return;
  }
  for (var key in source) {
    if (hasOwnProperty.call(source, key)) {
      assignValue(object, key, source[key]);
    }
  }
});

module.exports = assign;


/***/ }),

/***/ "wpQC":
/***/ (function(module, exports, __webpack_require__) {

var baseRest = __webpack_require__("R3TX"),
    isIterateeCall = __webpack_require__("R5u7");

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;


/***/ }),

/***/ "wtyc":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var isRegExp = __webpack_require__("N2D4");

var TypeError = global.TypeError;

module.exports = function (it) {
  if (isRegExp(it)) {
    throw TypeError("The method doesn't accept regular expressions");
  } return it;
};


/***/ }),

/***/ "wuos":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("HVcX");

exports.f = wellKnownSymbol;


/***/ }),

/***/ "wuuJ":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("GELN");


/***/ }),

/***/ "ww8C":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getUTCDayOfYear;

var _index = _interopRequireDefault(__webpack_require__("qxgV"));

var _index2 = _interopRequireDefault(__webpack_require__("8EaA"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCDayOfYear(dirtyDate) {
  (0, _index2.default)(1, arguments);
  var date = (0, _index.default)(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

module.exports = exports.default;

/***/ }),

/***/ "wxYD":
/***/ (function(module, exports) {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),

/***/ "x+gH":
/***/ (function(module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__("0fQ6");
var enumBugKeys = __webpack_require__("yk1j");

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es-x/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ "x4oI":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var TO_STRING_TAG_SUPPORT = __webpack_require__("WbkG");
var classof = __webpack_require__("r/P8");

// `Object.prototype.toString` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};


/***/ }),

/***/ "xBbx":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("gKI9");

/***/ }),

/***/ "xGbW":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("7bLG");

module.exports = parent;


/***/ }),

/***/ "xQG8":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("IKC6");

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.reduce;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.reduce) ? method : own;
};


/***/ }),

/***/ "xR7j":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var $reduce = __webpack_require__("B6F7").left;
var arrayMethodIsStrict = __webpack_require__("nSCK");
var CHROME_VERSION = __webpack_require__("Qb90");
var IS_NODE = __webpack_require__("Cg7V");

var STRICT_METHOD = arrayMethodIsStrict('reduce');
// Chrome 80-82 has a critical bug
// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;

// `Array.prototype.reduce` method
// https://tc39.es/ecma262/#sec-array.prototype.reduce
$({ target: 'Array', proto: true, forced: !STRICT_METHOD || CHROME_BUG }, {
  reduce: function reduce(callbackfn /* , initialValue */) {
    var length = arguments.length;
    return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "xV2z":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getUTCWeek;

var _index = _interopRequireDefault(__webpack_require__("qxgV"));

var _index2 = _interopRequireDefault(__webpack_require__("ivxi"));

var _index3 = _interopRequireDefault(__webpack_require__("ZfxR"));

var _index4 = _interopRequireDefault(__webpack_require__("8EaA"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCWeek(dirtyDate, options) {
  (0, _index4.default)(1, arguments);
  var date = (0, _index.default)(dirtyDate);
  var diff = (0, _index2.default)(date, options).getTime() - (0, _index3.default)(date, options).getTime(); // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)

  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

module.exports = exports.default;

/***/ }),

/***/ "xXiX":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("yIrs");

module.exports = parent;


/***/ }),

/***/ "xdyI":
/***/ (function(module, exports) {

module.exports = typeof window == 'object' && typeof Deno != 'object';


/***/ }),

/***/ "xoPw":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("Mkvj");
var entryVirtual = __webpack_require__("Gfq3");

module.exports = entryVirtual('Array').some;


/***/ }),

/***/ "xoyU":
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__("wxYD"),
    isKey = __webpack_require__("i7nn"),
    stringToPath = __webpack_require__("SoOq"),
    toString = __webpack_require__("dw5g");

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;


/***/ }),

/***/ "xzjO":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("LkP1");

/***/ }),

/***/ "y/9h":
/***/ (function(module, exports) {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),

/***/ "y2wv":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("Ni74");
var path = __webpack_require__("j0PW");

var Object = path.Object;

var defineProperties = module.exports = function defineProperties(T, D) {
  return Object.defineProperties(T, D);
};

if (Object.defineProperties.sham) defineProperties.sham = true;


/***/ }),

/***/ "y4BW":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("LTNl");
var aConstructor = __webpack_require__("sJwy");
var wellKnownSymbol = __webpack_require__("HVcX");

var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.es/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aConstructor(S);
};


/***/ }),

/***/ "y4bl":
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__("c72w"),
    castPath = __webpack_require__("xoyU"),
    isIndex = __webpack_require__("pnw1"),
    isObject = __webpack_require__("tQYX"),
    toKey = __webpack_require__("Ypsa");

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

module.exports = baseSet;


/***/ }),

/***/ "yFGb":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var global = __webpack_require__("oNh+");
var toAbsoluteIndex = __webpack_require__("Nj2W");
var toIntegerOrInfinity = __webpack_require__("Kkai");
var lengthOfArrayLike = __webpack_require__("SO8O");
var toObject = __webpack_require__("quhl");
var arraySpeciesCreate = __webpack_require__("0q0E");
var createProperty = __webpack_require__("1FCb");
var arrayMethodHasSpeciesSupport = __webpack_require__("nB+7");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');

var TypeError = global.TypeError;
var max = Math.max;
var min = Math.min;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

// `Array.prototype.splice` method
// https://tc39.es/ecma262/#sec-array.prototype.splice
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  splice: function splice(start, deleteCount /* , ...items */) {
    var O = toObject(this);
    var len = lengthOfArrayLike(O);
    var actualStart = toAbsoluteIndex(start, len);
    var argumentsLength = arguments.length;
    var insertCount, actualDeleteCount, A, k, from, to;
    if (argumentsLength === 0) {
      insertCount = actualDeleteCount = 0;
    } else if (argumentsLength === 1) {
      insertCount = 0;
      actualDeleteCount = len - actualStart;
    } else {
      insertCount = argumentsLength - 2;
      actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
    }
    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
    }
    A = arraySpeciesCreate(O, actualDeleteCount);
    for (k = 0; k < actualDeleteCount; k++) {
      from = actualStart + k;
      if (from in O) createProperty(A, k, O[from]);
    }
    A.length = actualDeleteCount;
    if (insertCount < actualDeleteCount) {
      for (k = actualStart; k < len - actualDeleteCount; k++) {
        from = k + actualDeleteCount;
        to = k + insertCount;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
    } else if (insertCount > actualDeleteCount) {
      for (k = len - actualDeleteCount; k > actualStart; k--) {
        from = k + actualDeleteCount - 1;
        to = k + insertCount - 1;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
    }
    for (k = 0; k < insertCount; k++) {
      O[k + actualStart] = arguments[k + 2];
    }
    O.length = len - actualDeleteCount + insertCount;
    return A;
  }
});


/***/ }),

/***/ "yIrs":
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("1hU5");
var path = __webpack_require__("j0PW");

module.exports = path.Object.freeze;


/***/ }),

/***/ "yULr":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var setGlobal = __webpack_require__("8x0C");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

module.exports = store;


/***/ }),

/***/ "yUea":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),

/***/ "yUwd":
/***/ (function(module, exports) {



/***/ }),

/***/ "yX36":
/***/ (function(module, exports, __webpack_require__) {

var createNonEnumerableProperty = __webpack_require__("jNzf");

module.exports = function (target, key, value, options) {
  if (options && options.enumerable) target[key] = value;
  else createNonEnumerableProperty(target, key, value);
};


/***/ }),

/***/ "yZHP":
/***/ (function(module, exports, __webpack_require__) {

var getAllKeys = __webpack_require__("tlBq");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;


/***/ }),

/***/ "yZNQ":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("n9AK");
var $find = __webpack_require__("zDWZ").find;
var addToUnscopables = __webpack_require__("Uh/D");

var FIND = 'find';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

// `Array.prototype.find` method
// https://tc39.es/ecma262/#sec-array.prototype.find
$({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND);


/***/ }),

/***/ "yclL":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = _interopRequireDefault(__webpack_require__("NgYr"));

var _index2 = _interopRequireDefault(__webpack_require__("Wud5"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: (0, _index2.default)({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function (value) {
      return parseInt(value, 10);
    }
  }),
  era: (0, _index.default)({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0, _index.default)({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function (index) {
      return index + 1;
    }
  }),
  month: (0, _index.default)({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0, _index.default)({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0, _index.default)({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
var _default = match;
exports.default = _default;
module.exports = exports.default;

/***/ }),

/***/ "ygwS":
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__("WTd3");

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es-x/no-array-isarray -- safe
module.exports = Array.isArray || function isArray(argument) {
  return classof(argument) == 'Array';
};


/***/ }),

/***/ "yk1j":
/***/ (function(module, exports) {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ "yoBI":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("GGh4");

module.exports = parent;


/***/ }),

/***/ "yuhP":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toInteger;

function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }

  var number = Number(dirtyNumber);

  if (isNaN(number)) {
    return number;
  }

  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

module.exports = exports.default;

/***/ }),

/***/ "z+TE":
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__("xoyU"),
    isArguments = __webpack_require__("bvyN"),
    isArray = __webpack_require__("wxYD"),
    isIndex = __webpack_require__("pnw1"),
    isLength = __webpack_require__("t0L4"),
    toKey = __webpack_require__("Ypsa");

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;


/***/ }),

/***/ "z/8x":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("cZmh");
var method = __webpack_require__("f6aC");

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.concat;
  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.concat) ? method : own;
};


/***/ }),

/***/ "z2yT":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("oNh+");
var fails = __webpack_require__("XU0c");
var uncurryThis = __webpack_require__("XQ/X");
var toString = __webpack_require__("Xrs4");
var trim = __webpack_require__("2K/m").trim;
var whitespaces = __webpack_require__("3sPw");

var $parseInt = global.parseInt;
var Symbol = global.Symbol;
var ITERATOR = Symbol && Symbol.iterator;
var hex = /^[+-]?0x/i;
var exec = uncurryThis(hex.exec);
var FORCED = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22
  // MS Edge 18- broken with boxed symbols
  || (ITERATOR && !fails(function () { $parseInt(Object(ITERATOR)); }));

// `parseInt` method
// https://tc39.es/ecma262/#sec-parseint-string-radix
module.exports = FORCED ? function parseInt(string, radix) {
  var S = trim(toString(string));
  return $parseInt(S, (radix >>> 0) || (exec(hex, S) ? 16 : 10));
} : $parseInt;


/***/ }),

/***/ "z9Jh":
/***/ (function(module, exports) {

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;


/***/ }),

/***/ "zC4U":
/***/ (function(module, exports, __webpack_require__) {

var parent = __webpack_require__("tC4N");

module.exports = parent;


/***/ }),

/***/ "zDWZ":
/***/ (function(module, exports, __webpack_require__) {

var bind = __webpack_require__("9X0z");
var uncurryThis = __webpack_require__("XQ/X");
var IndexedObject = __webpack_require__("fDXD");
var toObject = __webpack_require__("quhl");
var lengthOfArrayLike = __webpack_require__("SO8O");
var arraySpeciesCreate = __webpack_require__("0q0E");

var push = uncurryThis([].push);

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var IS_FILTER_REJECT = TYPE == 7;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that);
    var length = lengthOfArrayLike(self);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push(target, value);      // filter
        } else switch (TYPE) {
          case 4: return false;             // every
          case 7: push(target, value);      // filterReject
        }
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6),
  // `Array.prototype.filterReject` method
  // https://github.com/tc39/proposal-array-filtering
  filterReject: createMethod(7)
};


/***/ }),

/***/ "zF5n":
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__("pIod"),
    getSymbolsIn = __webpack_require__("Xidw"),
    keysIn = __webpack_require__("zH+d");

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;


/***/ }),

/***/ "zH+d":
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__("rmhs"),
    baseKeysIn = __webpack_require__("p2lg"),
    isArrayLike = __webpack_require__("9y2L");

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;


/***/ }),

/***/ "zKkv":
/***/ (function(module, exports, __webpack_require__) {

var baseFor = __webpack_require__("UdtX"),
    keys = __webpack_require__("BlJA");

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;


/***/ }),

/***/ "zN8s":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.browserPrefixToKey = browserPrefixToKey;
exports.browserPrefixToStyle = browserPrefixToStyle;
exports.default = void 0;
exports.getPrefix = getPrefix;
var prefixes = ['Moz', 'Webkit', 'O', 'ms'];

function getPrefix()
/*: string*/
{
  var _window$document, _window$document$docu;

  var prop
  /*: string*/
  = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';
  // Ensure we're running in an environment where there is actually a global
  // `window` obj
  if (typeof window === 'undefined') return ''; // If we're in a pseudo-browser server-side environment, this access
  // path may not exist, so bail out if it doesn't.

  var style = (_window$document = window.document) === null || _window$document === void 0 ? void 0 : (_window$document$docu = _window$document.documentElement) === null || _window$document$docu === void 0 ? void 0 : _window$document$docu.style;
  if (!style) return '';
  if (prop in style) return '';

  for (var i = 0; i < prefixes.length; i++) {
    if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];
  }

  return '';
}

function browserPrefixToKey(prop
/*: string*/
, prefix
/*: string*/
)
/*: string*/
{
  return prefix ? "".concat(prefix).concat(kebabToTitleCase(prop)) : prop;
}

function browserPrefixToStyle(prop
/*: string*/
, prefix
/*: string*/
)
/*: string*/
{
  return prefix ? "-".concat(prefix.toLowerCase(), "-").concat(prop) : prop;
}

function kebabToTitleCase(str
/*: string*/
)
/*: string*/
{
  var out = '';
  var shouldCapitalize = true;

  for (var i = 0; i < str.length; i++) {
    if (shouldCapitalize) {
      out += str[i].toUpperCase();
      shouldCapitalize = false;
    } else if (str[i] === '-') {
      shouldCapitalize = true;
    } else {
      out += str[i];
    }
  }

  return out;
} // Default export is the prefix itself, like 'Moz', 'Webkit', etc
// Note that you may have to re-test for certain things; for instance, Chrome 50
// can handle unprefixed `transform`, but not unprefixed `user-select`


var _default = (getPrefix()
/*: string*/
);

exports.default = _default;

/***/ }),

/***/ "zWgn":
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),

/***/ "zaNA":
/***/ (function(module, exports) {

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;


/***/ }),

/***/ "zr3P":
/***/ (function(module, exports, __webpack_require__) {

var baseClone = __webpack_require__("kn3Q");

/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return baseClone(value, CLONE_SYMBOLS_FLAG);
}

module.exports = clone;


/***/ })

/******/ });
});
//# sourceMappingURL=semi-ui.js.map