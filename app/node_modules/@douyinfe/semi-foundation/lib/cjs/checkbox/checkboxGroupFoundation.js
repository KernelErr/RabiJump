"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _foundation = _interopRequireDefault(require("../base/foundation"));

var _warning = _interopRequireDefault(require("../utils/warning"));

class CheckboxGroupFoundation extends _foundation.default {
  static get checkboxGroupDefaultAdapter() {
    return {};
  }

  constructor(adapter) {
    super((0, _assign.default)((0, _assign.default)({}, CheckboxGroupFoundation.checkboxGroupDefaultAdapter), adapter));
  }

  init() {
    const {
      defaultValue,
      value
    } = this.getProps();

    if (typeof defaultValue !== 'undefined' && !(0, _isArray.default)(defaultValue)) {
      (0, _warning.default)(true, 'Warning: [Semi CheckboxGroup] defaultValue should be an Array');
    }

    if (typeof value !== 'undefined' && !(0, _isArray.default)(value)) {
      (0, _warning.default)(true, 'Warning: [Semi CheckboxGroup] value should be an Array');
    }
  }

  notifyChange(value) {
    this._adapter.notifyChange(value);
  }

  handleChange(evt) {
    const prevValue = this.getState('value');
    let newValue = [];

    if (!(0, _isArray.default)(prevValue)) {
      newValue = [prevValue];
    }

    if (evt.target.checked) {
      newValue = [...prevValue, evt.target.value];
    } else {
      newValue = (0, _filter.default)(prevValue).call(prevValue, (itm, idx) => itm !== evt.target.value);
    }

    const isControlledMode = ('value' in this.getProps());

    if (isControlledMode) {
      // Controlled mode only needs to notify
      this.notifyChange(newValue);
    } else {
      // In uncontrolled mode, update the value in the state, and then notify
      this._adapter.updateGroupValue(newValue);

      this.notifyChange(newValue);
    }
  }

  getFormatName() {
    const propName = this.getProp('name');
    const defaultName = 'default';
    return propName || defaultName;
  }

  handlePropValueChange(newPropValue) {
    if ((0, _isArray.default)(newPropValue)) {
      this._adapter.updateGroupValue(newPropValue);
    } else {
      // to adjust reset in Form.CheckboxGroup
      if (typeof newPropValue === 'undefined') {
        this._adapter.updateGroupValue([]);
      }

      (0, _warning.default)(true, 'Warning: [Semi CheckboxGroup] value should be an Array');
    }
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  destroy() {}

}

var _default = CheckboxGroupFoundation;
exports.default = _default;