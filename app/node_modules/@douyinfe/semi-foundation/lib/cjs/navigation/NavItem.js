"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = exports.DEFAULT_TOGGLE_ICON = void 0;

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _constants = require("./constants");

const DEFAULT_TOGGLE_ICON = {
  open: 'chevron_up',
  closed: 'chevron_down'
};
exports.DEFAULT_TOGGLE_ICON = DEFAULT_TOGGLE_ICON;

class NavItem {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    // eslint-disable-next-line eqeqeq
    if (options == null || typeof options !== 'object') {
      // eslint-disable-next-line no-param-reassign
      options = {
        text: options,
        itemKey: options,
        maxHeight: _constants.numbers.DEFAULT_SUBNAV_MAX_HEIGHT,
        // selected: false,
        // isOpen: false,
        link: null,
        items: null,
        icon: '',
        indent: false
      };
    }

    for (const key of (0, _keys.default)(options)) {
      this[key] = options[key];
    }

    if (options.items && (0, _isArray.default)(options.items) && options.items.length) {
      var _context;

      this.items = (0, _map.default)(_context = options.items).call(_context, item => new NavItem(item));

      if ('toggleIcon' in options) {
        this.toggleIcon = NavItem.isValidToggleIcon(options.toggleIcon) ? (0, _assign.default)({}, options.toggleIcon) : (0, _assign.default)({}, DEFAULT_TOGGLE_ICON);
      } else {
        this.toggleIcon = (0, _assign.default)({}, DEFAULT_TOGGLE_ICON);
      }
    } else {
      this.items = null;
    }
  }

  static isValidToggleIcon(toggleIcon) {
    return Boolean(toggleIcon && typeof toggleIcon === 'object' && typeof toggleIcon.open === 'string' && toggleIcon.open.length && typeof toggleIcon.closed === 'string' && toggleIcon.closed.length);
  }

}

exports.default = NavItem;