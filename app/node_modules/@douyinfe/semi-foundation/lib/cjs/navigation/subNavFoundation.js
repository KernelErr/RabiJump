"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _set = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _from = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/from"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _foundation = _interopRequireDefault(require("../base/foundation"));

var _isEnterPress = _interopRequireDefault(require("../utils/isEnterPress"));

const addKeys = function addKeys() {
  let originKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  const keySet = new _set.default(originKeys);

  for (var _len = arguments.length, willAddKeys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    willAddKeys[_key - 1] = arguments[_key];
  }

  (0, _forEach.default)(willAddKeys).call(willAddKeys, key => key && keySet.add(key));
  return (0, _from.default)(keySet);
};

const removeKeys = function removeKeys() {
  let originKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  const keySet = new _set.default(originKeys);

  for (var _len2 = arguments.length, willRemoveKeys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    willRemoveKeys[_key2 - 1] = arguments[_key2];
  }

  (0, _forEach.default)(willRemoveKeys).call(willRemoveKeys, key => key && keySet.delete(key));
  return (0, _from.default)(keySet);
};

class SubNavFoundation extends _foundation.default {
  constructor(adapter) {
    super((0, _assign.default)({}, adapter));
  }

  init() {
    // this.log('invoke SubNavFoundation init()');
    this._timer = null;
  }

  destroy() {} // eslint-disable-line


  clearDelayTimer() {
    if (this._timer) {
      clearTimeout(this._timer);
      this._timer = null;
    }
  }

  isValidKey(itemKey) {
    // eslint-disable-next-line eqeqeq
    return itemKey != null && (typeof itemKey === 'number' || typeof itemKey === 'string');
  }

  handleDropdownVisibleChange(visible) {
    const itemKey = this.getProp('itemKey');

    const openKeysIsControlled = this._adapter.getOpenKeysIsControlled();

    const canUpdateOpenKeys = this._adapter.getCanUpdateOpenKeys();

    const rawOpenKeys = this._adapter.getOpenKeys();

    const openKeys = visible ? addKeys(rawOpenKeys, itemKey) : removeKeys(rawOpenKeys, itemKey);
    this.clearDelayTimer();

    if (!openKeysIsControlled) {
      if (canUpdateOpenKeys) {
        this._adapter.updateOpen(visible);
      } // this._adapter.updateIsHovered(visible);

    }

    this._adapter.notifyGlobalOpenChange({
      itemKey,
      openKeys,
      isOpen: visible
    });
  }
  /**
   *
   * @param {Event} e
   * @param {HTMLElement} titleRef
   */


  handleClick(e, titleRef) {
    const {
      itemKey,
      disabled
    } = this.getProps();

    if (disabled) {
      return;
    } // this.log(e, titleRef, titleRef.contains(e.target));


    const clickedDomIsTitle = titleRef && titleRef.contains(e.target);
    let isOpen = Boolean(this._adapter.getIsOpen());

    if (!clickedDomIsTitle) {
      isOpen = false;
    } else {
      isOpen = !isOpen;
    }

    const openKeys = isOpen ? addKeys(this._adapter.getOpenKeys(), itemKey) : removeKeys(this._adapter.getOpenKeys(), itemKey);
    const cbVal = {
      itemKey,
      openKeys,
      isOpen,
      domEvent: e
    };

    const openKeysIsControlled = this._adapter.getOpenKeysIsControlled();

    const canUpdateOpenKeys = this._adapter.getCanUpdateOpenKeys();

    if (!openKeysIsControlled && canUpdateOpenKeys) {
      this._adapter.updateOpen(isOpen);
    }

    this._adapter.notifyGlobalOpenChange(cbVal);

    this._adapter.notifyGlobalOnClick(cbVal);
  }
  /**
   * A11y: simulate sub nav click
   * @param e
   * @param titleRef
   */


  handleKeyPress(e, titleRef) {
    if ((0, _isEnterPress.default)(e)) {
      this.handleClick(e, titleRef);
    }
  }

}

exports.default = SubNavFoundation;