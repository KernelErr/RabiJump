"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.zonedTimeToUtc = exports.utcToZonedTime = exports.toIANA = exports.parse = exports.getCurrentTimeZone = exports.format = exports.IANAOffsetMap = void 0;

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/parse-int"));

var _find = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/find"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _dateFnsTz = require("date-fns-tz");

var _dateFns = require("date-fns");

/* eslint-disable max-len */

/* eslint-disable eqeqeq */

/**
 * Need to be IANA logo without daylight saving time
 */
const IANAOffsetMap = [[-11, ['Pacific/Midway']], [-10, ['Pacific/Honolulu']], [-9.5, ['Pacific/Marquesas']], [-9, ['Pacific/Gambier']], [-8, ['Pacific/Pitcairn']], [-7, ['America/Phoenix']], [-6, ['America/Tegucigalpa']], [-5, ['America/Bogota']], [-4, ['America/Puerto_Rico']], [-3.5, ['America/St_Johns']], [-3, ['America/Montevideo']], [-2, ['Atlantic/South_Georgia']], [-1, ['Atlantic/Cape_Verde']], [0, ['Africa/Accra']], [1, ['Africa/Bangui']], [2, ['Africa/Cairo']], [3, ['Asia/Bahrain', 'Indian/Antananarivo']], [3.5, ['Asia/Tehran']], [4, ['Asia/Dubai', 'Asia/Muscat']], [4.5, ['Asia/Kabul']], [5, ['Asia/Samarkand', 'Asia/Karachi']], [5.5, ['Asia/Kolkata']], [5.75, ['Asia/Kathmandu']], [6, ['Asia/Dhaka']], [6.5, ['Asia/Rangoon', 'Asia/Rangoon']], [7, ['Asia/Jakarta', 'Asia/Phnom_Penh', 'Asia/Bangkok']], [8, ['Asia/Shanghai', 'Asia/Singapore']], [8.75, ['Australia/Eucla']], [9, ['Asia/Tokyo', 'Asia/Seoul', 'Asia/Pyongyang']], [9.5, ['Australia/Darwin']], [10, ['Pacific/Guam']], [10.5, ['Australia/Adelaide']], [11, ['Pacific/Guadalcanal']], [12, ['Pacific/Funafuti']], [13, ['Pacific/Enderbury']], [13.75, ['Pacific/Chatham']], [14, ['Pacific/Kiritimati']]];
exports.IANAOffsetMap = IANAOffsetMap;
const GMTStringReg = /([\-\+]{1})(\d{2})\:(\d{2})/;
/**
 *
 * @param {string|number} tz
 * @returns {number|undefined}
 */

const toIANA = tz => {
  let matches = null;

  if (typeof tz === 'string') {
    matches = tz.match(GMTStringReg);

    if (!matches) {
      return tz;
    }

    const symbol = (0, _parseInt2.default)(matches[1] + 1, 10); // => -1 or 1

    const hourOffset = (0, _parseInt2.default)(matches[2], 10);
    const minuteOffset = (0, _parseInt2.default)(matches[3], 10);
    tz = symbol * (hourOffset + minuteOffset / 60);
  }

  if (typeof tz === 'number') {
    const found = (0, _find.default)(IANAOffsetMap).call(IANAOffsetMap, item => item[0] === tz);
    return found && found[1][0];
  }
};
/**
 *
 * @param {string | number | Date} date
 * @param {string} formatToken
 * @param {object} [options]
 * @param {string} [options.timeZone]
 * @returns {Date}
 */

/* istanbul ignore next */


exports.toIANA = toIANA;

const parse = (date, formatToken, options) => {
  if (typeof date === 'string') {
    date = (0, _dateFns.parse)(date, formatToken, new Date(), options);
  }

  if (options && options.timeZone != null && options.timeZone !== '') {
    const timeZone = toIANA(options.timeZone);
    options = (0, _assign.default)((0, _assign.default)({}, options), {
      timeZone
    });
  }

  return (0, _dateFnsTz.toDate)(date, options);
};
/**
 *
 * @param {string | number | Date} date
 * @param {string} formatToken
 * @param {object} [options]
 * @param {string} [options.timeZone]
 */

/* istanbul ignore next */


exports.parse = parse;

const format = (date, formatToken, options) => {
  if (options && options.timeZone != null && options.timeZone !== '') {
    const timeZone = toIANA(options.timeZone);
    options = (0, _assign.default)((0, _assign.default)({}, options), {
      timeZone
    });
    date = (0, _dateFnsTz.utcToZonedTime)(date, timeZone, options);
  }

  return (0, _dateFnsTz.format)(date, formatToken, options);
};
/**
 *
 * @param {string | number | Date} date
 * @param {string} timeZone
 * @param {object} options
 * @returns {Date}
 */


exports.format = format;

const utcToZonedTime = (date, timeZone, options) => (0, _dateFnsTz.utcToZonedTime)(date, toIANA(timeZone), options);
/**
 *
 * @param {string | number | Date} date
 * @param {string} timeZone
 * @param {object} options
 * @returns {Date}
 */


exports.utcToZonedTime = utcToZonedTime;

const zonedTimeToUtc = (date, timeZone, options) => (0, _dateFnsTz.zonedTimeToUtc)(date, toIANA(timeZone), options);
/**
 * return current system hour offset based on utc:
 *
 * ```
 * 8 => "GMT+08:00"
 * -9.5 => "GMT-09:30"
 * -8 => "GMT-08:00"
 * ```
 */


exports.zonedTimeToUtc = zonedTimeToUtc;

const getCurrentTimeZone = () => new Date().getTimezoneOffset() / 60;

exports.getCurrentTimeZone = getCurrentTimeZone;