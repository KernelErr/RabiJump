"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = getMotionObjFromProps;

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _isObject2 = _interopRequireDefault(require("lodash/isObject"));

var _cloneDeep2 = _interopRequireDefault(require("lodash/cloneDeep"));

var _warning = _interopRequireDefault(require("./warning"));

/**
 * get motion object from props
 *
 * example:
 *
 * ```
 *  props = { didLeave: componentHandler, motion: { didLeave: userHandler } };
 *  return { didLeave: () => { componentHandler(); userHandler(); }};
 * ```
 *
 * @param { props: Object }
 * @returns { motion: Object }
 */
function getMotionObjFromProps(props) {
  if (typeof props !== 'object' || props === null) {
    throw new TypeError("props should be object type, got ".concat(typeof props));
  }

  const MOTION_PROPS = ['willEnter', 'didEnter', 'willLeave', 'didLeave', 'onStart', 'onRest', 'state'];
  const {
    motion: motionProp = {}
  } = props;
  let motion = {};

  if ((0, _isObject2.default)(motionProp)) {
    motion = (0, _cloneDeep2.default)(motionProp);

    for (const key of (0, _keys.default)(motionProp)) {
      const handler = motionProp[key];

      if (typeof handler === 'function') {
        if (key in props) {
          motion[key] = () => {
            props[key](); // call handler function of semi build-in components firstly

            handler(); // call user given handler function
          };
        }
      } else {
        (0, _warning.default)(true, "[Semi] duplicate motion key '".concat(key, "' from motion prop and props"));
      }
    }
  } else if (typeof motionProp === 'function') {
    const motionFnResult = motionProp(props);
    motion = (0, _isObject2.default)(motionFnResult) ? motionFnResult : {};
  }

  if ((0, _isObject2.default)(motion)) {
    for (const key of MOTION_PROPS) {
      if (key in props && !(key in motion)) {
        motion[key] = props[key];
      }
    }
  }

  return motion;
}