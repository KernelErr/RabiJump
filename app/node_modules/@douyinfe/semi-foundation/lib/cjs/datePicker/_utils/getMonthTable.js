"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;
exports.formatFullDate = formatFullDate;

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _dateFns = require("date-fns");

/**
 *
 * @param {string} month
 */
function formatFullDate() {
  var _context, _context2;

  let year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  let month = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  let day = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  let dateStr = '';
  const monthFull = typeof month === 'number' && month < 10 ? "0".concat(month) : month.toString();
  const dayNumberFull = typeof day === 'number' && day < 10 ? "0".concat(day) : day.toString();
  dateStr = (0, _concat.default)(_context = (0, _concat.default)(_context2 = "".concat(String(year), "-")).call(_context2, monthFull, "-")).call(_context, dayNumberFull);
  return dateStr;
}

function getWeeks(date) {
  let weekStartsOn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  const weekDayNotInMonth = {
    dayNumber: '',
    dateNumberFull: '',
    fullDate: ''
  }; // For the first or last week epmtyDays

  const daysInMonth = (0, _dateFns.getDaysInMonth)(date); // Get the total number of days in the month

  const year = (0, _dateFns.format)(date, 'yyyy');
  const month = (0, _dateFns.format)(date, 'MM');
  const lastday = (0, _dateFns.lastDayOfMonth)(date); // Get the last day of the month

  const firstDay = (0, _dateFns.startOfMonth)(date); // Get the first day of the month
  // Const firstDayInWeek = getDay (firstDay);//The first day belongs to the day of the week
  // What is the first day of the month in the first row?

  const firstDayInWeek = Number((0, _dateFns.format)(firstDay, 'e', {
    weekStartsOn
  }));
  const weeks = [];
  let week = []; // add empty days to set first day in correct position

  for (let s = 1; s < firstDayInWeek; s++) {
    week.push(weekDayNotInMonth);
  }

  for (let d = 0; d < daysInMonth; d++) {
    const dayNumber = d + 1;
    const dayNumberFull = dayNumber < 10 ? "0".concat(dayNumber) : dayNumber.toString();
    const fullDate = formatFullDate(year, month, dayNumber);
    week.push({
      dayNumber,
      dayNumberFull,
      fullDate
    });

    if (week.length === 7) {
      weeks.push(week);
      week = [];
    } else if (fullDate === (0, _dateFns.format)(lastday, 'yyyy-MM-dd')) {
      // Last week alone
      weeks.push(week);
      week = [];
    }
  }

  return weeks;
}

const getMonthTable = (month, weekStartsOn) => {
  const weeks = getWeeks(month, weekStartsOn);
  const monthText = (0, _dateFns.format)(month, 'yyyy-MM');
  return {
    monthText,
    weeks,
    month
  };
};

var _default = getMonthTable;
exports.default = _default;