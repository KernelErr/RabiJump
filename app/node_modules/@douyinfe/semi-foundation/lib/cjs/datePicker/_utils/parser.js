"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.compatibleParse = compatibleParse;
exports.isValueParseValid = isValueParseValid;

var _dateFns = require("date-fns");

/**
 * @file
 * Various date-related analysis methods
 */

/**
 * Parsing value to Date object
 */
function compatibleParse(value, formatToken, baseDate, locale) {
  let result = null;

  if (value) {
    if (formatToken) {
      baseDate = baseDate || new Date();
      result = (0, _dateFns.parse)(value, formatToken, baseDate, {
        locale
      });
    }

    if (!(0, _dateFns.isValid)(result)) {
      result = (0, _dateFns.parseISO)(value);
    }

    if (!(0, _dateFns.isValid)(result)) {
      result = new Date(Date.parse(value));
    }

    const yearInvalid = (0, _dateFns.isValid)(result) && String(result.getFullYear()).length > 4;

    if (!(0, _dateFns.isValid)(result) || yearInvalid) {
      result = null;
    }
  }

  return result;
}
/**
 * whether value can be parsed with date-fns `parse`
 *
 * @example
 * isValueParseValid({ value: '2021-01-01', formatToken: 'yyyy-MM-dd' }); // true
 * isValueParseValid({ value: '2021-01-0', formatToken: 'yyyy-MM-dd' }); // false
 * isValueParseValid({ value: '2021-01', formatToken: 'yyyy-MM-dd' }); // false
 */


function isValueParseValid(options) {
  const {
    value,
    locale,
    formatToken
  } = options;
  const baseDate = options.baseDate || new Date();
  const result = (0, _dateFns.parse)(value, formatToken, baseDate, {
    locale
  });
  return (0, _dateFns.isValid)(result);
}