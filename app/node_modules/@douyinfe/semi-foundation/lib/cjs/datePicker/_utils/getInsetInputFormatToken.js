"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = getInsetInputFormatToken;

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _getDefaultFormatToken = require("./getDefaultFormatToken");

/**
 * 获取 insetInput 输入框的 placeholder
 * Get the placeholder of the insetInput input
 *
 * If type is time related, we only recognize the format like `dateFormat timeFormat`
 *  - 'yyyy-MM-dd HH:mm:ss' // ok
 *  - 'yyyy-MM-dd  HH:mm:ss' // bad format
 *
 * @example
 * 'yyyy-MM-dd' => 'yyyy-MM-dd'
 * 'yyyy-MM' => 'yyyy-MM'
 * 'yyyy-MM-dd HH:mm:ss' => 'yyyy-MM-dd HH:mm:ss'
 * 'yyyy-MM-dd HH:mm' => 'yyyy-MM-dd HH:mm'
 * 'Pp' => 'yyyy-MM-dd'
 */
function getInsetInputFormatToken(options) {
  var _context;

  const {
    format,
    type
  } = options;
  const dateReg = /([yMd]{0,4}[^a-z\s]*[yMd]{0,4}[^a-z\s]*[yMd]{0,4})/i;
  const dateTimeReg = /([yMd]{0,4}[^a-z\s]*[yMd]{0,4}[^a-z\s]*[yMd]{0,4}) (H{0,2}[^a-z\s]*m{0,2}[^a-z\s]*s{0,2})/i;
  const defaultToken = (0, _getDefaultFormatToken.getDefaultFormatTokenByType)(type);
  let insetInputFormat;

  switch (type) {
    case 'dateTime':
    case 'dateTimeRange':
      const dateTimeResult = dateTimeReg.exec(format);
      insetInputFormat = dateTimeResult && dateTimeResult[1] && dateTimeResult[2] ? (0, _concat.default)(_context = "".concat(dateTimeResult[1], " ")).call(_context, dateTimeResult[2]) : defaultToken;
      break;

    case 'date':
    case 'month':
    case 'dateRange':
    default:
      const dateResult = dateReg.exec(format);
      insetInputFormat = dateResult && dateResult[1] || defaultToken;
      break;
  }

  return insetInputFormat;
}