"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports._generateDataByType = _generateDataByType;
exports._generateGroupedData = _generateGroupedData;
exports._generateSelectedItems = _generateSelectedItems;
exports._generateTreeData = _generateTreeData;

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _reverse = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reverse"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/map"));

var _findIndex = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/find-index"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _constants = require("./constants");

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && (0, _indexOf.default)(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _getOwnPropertySymbols.default === "function") for (var i = 0, p = (0, _getOwnPropertySymbols.default)(s); i < p.length; i++) {
    if ((0, _indexOf.default)(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

function _generateGroupedData(dataSource) {
  const newData = [];

  for (const group of dataSource) {
    var _context;

    (0, _forEach.default)(_context = group.children).call(_context, item => {
      const {
        children
      } = group,
            rest = __rest(group, ["children"]);

      newData.push((0, _assign.default)((0, _assign.default)({}, item), {
        _parent: rest
      }));
    });
  }

  return newData;
} // DFS


function _generateTreeData(dataSource) {
  var _context2;

  const newData = [];
  const stack = (0, _reverse.default)(_context2 = [...dataSource]).call(_context2);

  while (stack.length) {
    const current = stack.pop();
    current.path = current.path || [(0, _omit2.default)(current, ['children'])];

    if (current.children && (0, _isArray.default)(current.children)) {
      const nodes = current.children;

      for (let i = nodes.length - 1; i >= 0; i--) {
        var _context3, _context4;

        const child = (0, _assign.default)({}, nodes[i]);
        child.path = (0, _concat.default)(_context3 = (0, _concat.default)(_context4 = []).call(_context4, current.path)).call(_context3, (0, _omit2.default)(child, ['children']));
        stack.push(child);
      }
    } else {
      current.isLeaf = true;
    }

    newData.push((0, _omit2.default)(current, ['children']));
  }

  return newData;
}

function _generateDataByType(dataSource, type) {
  const newData = (0, _slice.default)(dataSource).call(dataSource) || [];

  if (type === _constants.strings.TYPE_GROUP_LIST) {
    return _generateGroupedData(newData);
  }

  if (type === _constants.strings.TYPE_TREE_TO_LIST) {
    return _generateTreeData(newData);
  }

  return newData;
}

function _generateSelectedItems(value, data) {
  const selectedItems = new _map.default();
  (0, _forEach.default)(value).call(value, val => {
    const index = (0, _findIndex.default)(data).call(data, option => option.value === val);

    if (index !== -1) {
      const option = data[index];
      selectedItems.set(option.key, option);
    }
  });
  return selectedItems;
}