"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _trim = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/trim"));

var _find = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/find"));

var _foundation = _interopRequireDefault(require("../base/foundation"));

var _a11y = require("../utils/a11y");

class DropdownMenuFoundation extends _foundation.default {
  constructor() {
    super(...arguments);
    this.menuItemNodes = null;
    this.firstChars = [];
  } // if trigger is click, auto focus to the first menu item


  autoFocus(ulElement) {
    const trigger = this._adapter.getContext('trigger');

    if (trigger === 'click') {
      var _context;

      // find all non-disabled li under this menu and set focus to the first menu
      this.menuItemNodes = (0, _filter.default)(_context = [...ulElement.getElementsByTagName('li')]).call(_context, item => item.ariaDisabled !== "true");
      (0, _a11y.setFocusToFirstItem)(this.menuItemNodes);
    }
  }

  handleEscape(menu) {
    const trigger = this._adapter.getContext('trigger');

    if (trigger === 'custom') {
      const menuButton = menu && (0, _a11y.getMenuButton)(document.querySelectorAll("[data-popupid]"), menu.id);
      menuButton.focus();
    }
  }

  setFocusByFirstCharacter(curItem, char) {
    const index = (0, _a11y.findIndexByCharacter)(this.menuItemNodes, curItem, this.firstChars, char);

    if (index >= 0) {
      (0, _a11y.setFocusToItem)(this.menuItemNodes, this.menuItemNodes[index]);
    }
  }

  onMenuKeydown(event) {
    var _context5;

    const menu = (0, _a11y.getAncestorNodeByRole)(event.target, 'tooltip');

    if (!this.menuItemNodes) {
      var _context2;

      this.menuItemNodes = (0, _filter.default)(_context2 = [...event.target.parentNode.getElementsByTagName('li')]).call(_context2, item => item.ariaDisabled !== "true");
    }

    if (this.firstChars.length === 0) {
      var _context3;

      (0, _forEach.default)(_context3 = this.menuItemNodes).call(_context3, item => {
        var _context4;

        var _a; // the menuItemNodes can be an component and not exit textContent


        this.firstChars.push((_a = (0, _trim.default)(_context4 = item.textContent).call(_context4)[0]) === null || _a === void 0 ? void 0 : _a.toLowerCase());
      });
    } // get the currently focused menu item


    const curItem = (0, _find.default)(_context5 = this.menuItemNodes).call(_context5, item => item.tabIndex === 0);

    switch (event.key) {
      case ' ':
      case 'Enter':
        event.target.click();
        (0, _a11y.handlePrevent)(event);
        break;

      case 'Escape':
        this.handleEscape(menu);
        break;

      case 'ArrowUp':
        (0, _a11y.setFocusToPreviousMenuItem)(this.menuItemNodes, curItem);
        (0, _a11y.handlePrevent)(event);
        break;

      case 'ArrowDown':
        (0, _a11y.setFocusToNextMenuitem)(this.menuItemNodes, curItem);
        (0, _a11y.handlePrevent)(event);
        break;

      default:
        if ((0, _a11y.isPrintableCharacter)(event.key)) {
          this.setFocusByFirstCharacter(curItem, event.key); // it can be an input on Dropdown, handlePrevent may affect the input of the component
          // handlePrevent(event); 
        }

        break;
    }
  }

}

exports.default = DropdownMenuFoundation;