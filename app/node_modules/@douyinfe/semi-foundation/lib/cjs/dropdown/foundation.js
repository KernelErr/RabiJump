"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _from = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/from"));

var _foundation = _interopRequireDefault(require("../base/foundation"));

var _a11y = require("../utils/a11y");

class DropdownFoundation extends _foundation.default {
  handleVisibleChange(visible) {
    this._adapter.setPopVisible(visible);

    this._adapter.notifyVisibleChange(visible);
  }

  getMenuItemNodes(target) {
    var _context;

    const id = target.attributes['data-popupid'].value;
    const menuWrapper = document.getElementById(id); // if has dropdown item, the item must wrapped by li

    return menuWrapper ? (0, _filter.default)(_context = (0, _from.default)(menuWrapper.getElementsByTagName('li'))).call(_context, item => item.ariaDisabled === "false") : null;
  }

  setFocusToFirstMenuItem(target) {
    const menuItemNodes = this.getMenuItemNodes(target);
    menuItemNodes && (0, _a11y.setFocusToFirstItem)(menuItemNodes);
  }

  setFocusToLastMenuItem(target) {
    const menuItemNodes = this.getMenuItemNodes(target);
    menuItemNodes && (0, _a11y.setFocusToLastItem)(menuItemNodes);
  }

  handleKeyDown(event) {
    switch (event.key) {
      case ' ':
      case 'Enter':
        event.target.click();
        (0, _a11y.handlePrevent)(event);
        break;

      case 'ArrowDown':
        this.setFocusToFirstMenuItem(event.target);
        (0, _a11y.handlePrevent)(event);
        break;

      case 'ArrowUp':
        this.setFocusToLastMenuItem(event.target);
        (0, _a11y.handlePrevent)(event);
        break;

      default:
        break;
    }
  }

}

exports.default = DropdownFoundation;