import BaseFoundation, { DefaultAdapter } from '../base/foundation';
import { Motion } from '../utils/type';
export interface SideSheetProps {
    afterVisibleChange?: (isVisible: boolean) => void;
    bodyStyle?: Record<string, any>;
    className?: string;
    closable?: boolean;
    closeOnEsc?: boolean;
    disableScroll?: boolean;
    footer?: any;
    getPopupContainer?: () => HTMLElement;
    headerStyle?: Record<string, any>;
    height?: number | string;
    keepDOM?: boolean;
    mask?: boolean;
    maskClosable?: boolean;
    maskStyle?: Record<string, any>;
    motion?: Motion;
    onCancel?: (e: any) => void;
    placement?: 'top' | 'bottom' | 'left' | 'right';
    size?: 'small' | 'medium' | 'large';
    style?: Record<string, any>;
    title?: any;
    visible?: boolean;
    width?: number | string;
    zIndex?: number;
    children?: any;
    'aria-label'?: string;
}
export interface SideSheetState {
    hidden: boolean;
}
export interface SideSheetAdapter extends DefaultAdapter<SideSheetProps, SideSheetState> {
    disabledBodyScroll: () => void;
    enabledBodyScroll: () => void;
    notifyCancel: (e: any) => void;
    notifyVisibleChange: (visible: boolean) => void;
    setOnKeyDownListener: () => void;
    removeKeyDownListener: () => void;
    toggleHidden: (hidden: boolean) => void;
}
export default class SideSheetFoundation extends BaseFoundation<SideSheetAdapter> {
    constructor(adapter: SideSheetAdapter);
    get defaultAdapter(): {
        handleCancel: (...args: any[]) => void;
        beforeShow: (...args: any[]) => void;
        afterHide: (...args: any[]) => void;
    };
    destroy(): void;
    handleCancel(e: any): void;
    beforeShow(): void;
    afterHide(): void;
    handleKeyDown(e: any): void;
    mergeMotionProp: (motion: any, prop: string, cb: () => void) => any;
    getMergedMotion: () => any;
}
