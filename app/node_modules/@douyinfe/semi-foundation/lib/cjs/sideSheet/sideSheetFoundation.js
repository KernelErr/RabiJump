"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _bind = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/bind"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _foundation = _interopRequireDefault(require("../base/foundation"));

var _keyCode = _interopRequireDefault(require("../utils/keyCode"));

class SideSheetFoundation extends _foundation.default {
  constructor(adapter) {
    var _this;

    super((0, _assign.default)((0, _assign.default)({}, SideSheetFoundation.defaultAdapter), adapter));
    _this = this;

    this.mergeMotionProp = (motion, prop, cb) => {
      const mergedMotion = typeof motion === 'undefined' || motion ? (0, _assign.default)((0, _assign.default)({}, motion), {
        [prop]: function () {
          const curr = (0, _get2.default)(motion, prop);

          if (typeof curr === 'function') {
            curr(...arguments);
          }

          cb();
        }
      }) : false;
      return mergedMotion;
    };

    this.getMergedMotion = () => {
      const {
        motion,
        visible,
        keepDOM
      } = this.getProps();
      let mergedMotion = this.mergeMotionProp(motion, 'didEnter', function () {
        const didEnter = (0, _get2.default)(motion, 'didEnter');

        if (typeof didEnter === 'function') {
          didEnter(...arguments);
        }

        _this._adapter.notifyVisibleChange(visible);
      });
      mergedMotion = this.mergeMotionProp(mergedMotion, 'didLeave', function () {
        const didLeave = (0, _get2.default)(motion, 'didLeave');

        if (typeof didLeave === 'function') {
          didLeave(...arguments);
        }

        _this._adapter.notifyVisibleChange(visible);
      });

      if (keepDOM) {
        var _context;

        mergedMotion = this.mergeMotionProp(mergedMotion, 'didLeave', (0, _bind.default)(_context = this._adapter.toggleHidden).call(_context, this, true));
      }

      return mergedMotion;
    };
  }

  get defaultAdapter() {
    return {
      handleCancel: _noop2.default,
      beforeShow: _noop2.default,
      afterHide: _noop2.default
    };
  }

  destroy() {
    this.afterHide();
  }

  handleCancel(e) {
    this._adapter.notifyCancel(e);
  }

  beforeShow() {
    const allowDisable = this.getProp('disableScroll');
    allowDisable && this._adapter.disabledBodyScroll();

    this._adapter.setOnKeyDownListener();
  }

  afterHide() {
    const allowDisable = this.getProp('disableScroll');
    allowDisable && this._adapter.enabledBodyScroll();

    this._adapter.removeKeyDownListener();
  }

  handleKeyDown(e) {
    const {
      closeOnEsc
    } = this.getProps();

    if (closeOnEsc && e.keyCode === _keyCode.default.ESC) {
      e.stopPropagation();
      this.handleCancel(e);
      return;
    }
  }

}

exports.default = SideSheetFoundation;