import _omit from "lodash/omit";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _reverseInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reverse";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _Map from "@babel/runtime-corejs3/core-js-stable/map";
import _findIndexInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/find-index";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import { strings } from './constants';
export function _generateGroupedData(dataSource) {
  const newData = [];

  for (const group of dataSource) {
    var _context;

    _forEachInstanceProperty(_context = group.children).call(_context, item => {
      const {
        children
      } = group,
            rest = __rest(group, ["children"]);

      newData.push(_Object$assign(_Object$assign({}, item), {
        _parent: rest
      }));
    });
  }

  return newData;
} // DFS

export function _generateTreeData(dataSource) {
  var _context2;

  const newData = [];

  const stack = _reverseInstanceProperty(_context2 = [...dataSource]).call(_context2);

  while (stack.length) {
    const current = stack.pop();
    current.path = current.path || [_omit(current, ['children'])];

    if (current.children && _Array$isArray(current.children)) {
      const nodes = current.children;

      for (let i = nodes.length - 1; i >= 0; i--) {
        var _context3, _context4;

        const child = _Object$assign({}, nodes[i]);

        child.path = _concatInstanceProperty(_context3 = _concatInstanceProperty(_context4 = []).call(_context4, current.path)).call(_context3, _omit(child, ['children']));
        stack.push(child);
      }
    } else {
      current.isLeaf = true;
    }

    newData.push(_omit(current, ['children']));
  }

  return newData;
}
export function _generateDataByType(dataSource, type) {
  const newData = _sliceInstanceProperty(dataSource).call(dataSource) || [];

  if (type === strings.TYPE_GROUP_LIST) {
    return _generateGroupedData(newData);
  }

  if (type === strings.TYPE_TREE_TO_LIST) {
    return _generateTreeData(newData);
  }

  return newData;
}
export function _generateSelectedItems(value, data) {
  const selectedItems = new _Map();

  _forEachInstanceProperty(value).call(value, val => {
    const index = _findIndexInstanceProperty(data).call(data, option => option.value === val);

    if (index !== -1) {
      const option = data[index];
      selectedItems.set(option.key, option);
    }
  });

  return selectedItems;
}