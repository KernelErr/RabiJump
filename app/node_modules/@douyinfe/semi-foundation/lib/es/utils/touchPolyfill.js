import _globalThis from "@babel/runtime-corejs3/core-js/global-this";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import warning from './warning';

const touchEventPolyfill = (touch, touchEvent) => {
  /* Touch is the first point of multi-touch. In order to minimize the change of slider code to support touch,
  some methods that will be used on touchEvent are mounted on the multi-touch Touch object.*/
  // polyfill for firefox
  if (!_globalThis.Touch || !(touch instanceof Touch)) {
    return touch;
  }

  const keysNeedPolyfill = ['stopPropagation', 'preventDefault'];

  _forEachInstanceProperty(keysNeedPolyfill).call(keysNeedPolyfill, key => {
    let value = touchEvent[key];

    if (value) {
      if (typeof value === 'function') {
        // bind 'this' for function of touchEvent running in Touch Point Object
        value = function () {
          return touchEvent[key](...arguments);
        };
      }

      if (touch[key]) {
        warning(true, "\"The key ".concat(key, "\" exist in Touch."));
      } else {
        touch[key] = value;
      }
    }
  });

  return touch;
};

export default touchEventPolyfill;