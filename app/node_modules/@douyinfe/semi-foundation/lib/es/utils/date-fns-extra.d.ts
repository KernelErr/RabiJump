import { OptionsWithTZ } from 'date-fns-tz';
/**
 * Need to be IANA logo without daylight saving time
 */
export declare const IANAOffsetMap: (number | string[])[][];
/**
 *
 * @param {string|number} tz
 * @returns {number|undefined}
 */
export declare const toIANA: (tz: string | number) => any;
/**
 *
 * @param {string | number | Date} date
 * @param {string} formatToken
 * @param {object} [options]
 * @param {string} [options.timeZone]
 * @returns {Date}
 */
declare const parse: (date: string | number | Date, formatToken: string, options?: any) => Date;
/**
 *
 * @param {string | number | Date} date
 * @param {string} formatToken
 * @param {object} [options]
 * @param {string} [options.timeZone]
 */
declare const format: (date: string | number | Date, formatToken: string, options?: any) => string;
/**
 *
 * @param {string | number | Date} date
 * @param {string} timeZone
 * @param {object} options
 * @returns {Date}
 */
declare const utcToZonedTime: (date: string | number | Date, timeZone: string, options?: OptionsWithTZ) => Date;
/**
 *
 * @param {string | number | Date} date
 * @param {string} timeZone
 * @param {object} options
 * @returns {Date}
 */
declare const zonedTimeToUtc: (date: string | number | Date, timeZone: string, options?: OptionsWithTZ) => Date;
/**
 * return current system hour offset based on utc:
 *
 * ```
 * 8 => "GMT+08:00"
 * -9.5 => "GMT-09:30"
 * -8 => "GMT-08:00"
 * ```
 */
declare const getCurrentTimeZone: () => number;
export { format, parse, utcToZonedTime, zonedTimeToUtc, getCurrentTimeZone };
