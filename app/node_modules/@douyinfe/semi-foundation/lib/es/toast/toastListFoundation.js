import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import BaseFoundation from '../base/foundation';
export default class ToastListFoundation extends BaseFoundation {
  constructor(adapter) {
    super(_Object$assign(_Object$assign({}, ToastListFoundation.defaultAdapter), adapter));
  }

  addToast(toastOpts) {
    const toastList = this._adapter.getState('list'); // const id = getUuid('toast');
    // let toastOpts = { ...opts, id };
    // console.log(toastOpts);


    toastList.push(toastOpts);

    this._adapter.updateToast(toastList, []); // return id;

  }

  removeToast(id) {
    let toastList = this._adapter.getState('list');

    const removedItems = [];
    toastList = _filterInstanceProperty(toastList).call(toastList, toastOpts => {
      if (toastOpts.id === id) {
        removedItems.push(toastOpts);
        return false;
      }

      return true;
    });

    this._adapter.updateToast(toastList, removedItems);
  }

  destroyAll() {
    const toastList = this._adapter.getState('list');

    if (toastList.length > 0) {
      this._adapter.updateToast([], toastList);
    }
  }

}