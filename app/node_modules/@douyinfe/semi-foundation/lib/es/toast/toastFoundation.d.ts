import BaseFoundation, { DefaultAdapter } from '../base/foundation';
import { Motion } from '../utils/type';
export declare type ToastType = 'success' | 'warning' | 'error' | 'info' | 'default';
export declare type ToastTheme = 'light' | 'normal';
export declare type Directions = 'ltr' | 'rtl';
export interface ConfigProps {
    top?: number | string;
    bottom?: number | string;
    left?: number | string;
    right?: number | string;
    duration?: number;
    zIndex?: number;
    getPopupContainer?: () => HTMLElement | null;
}
export interface ToastProps extends ConfigProps {
    onClose?: () => void;
    content: any;
    type?: ToastType;
    textMaxWidth?: string | number;
    style?: Record<string, any>;
    className?: string;
    showClose?: boolean;
    icon?: any;
    theme?: ToastTheme;
    direction?: Directions;
    close?: (id: string) => void;
}
export interface ToastInstance extends ToastProps {
    id?: string;
    motion?: Motion;
}
export interface ToastState {
}
export interface ToastAdapter extends DefaultAdapter<ToastProps, ToastState> {
    notifyWrapperToRemove: (id: string) => void;
    notifyClose: () => void;
}
export default class ToastFoundation extends BaseFoundation<ToastAdapter> {
    _timer: ReturnType<typeof setTimeout>;
    _id: string | null;
    constructor(adapter: ToastAdapter);
    init(): void;
    destroy(): void;
    startCloseTimer_(): void;
    close(e?: any): void;
    clearCloseTimer_(): void;
    restartCloseTimer(): void;
}
