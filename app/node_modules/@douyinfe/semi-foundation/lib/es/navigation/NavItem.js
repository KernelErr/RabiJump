import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import { numbers } from './constants';
export const DEFAULT_TOGGLE_ICON = {
  open: 'chevron_up',
  closed: 'chevron_down'
};
export default class NavItem {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    // eslint-disable-next-line eqeqeq
    if (options == null || typeof options !== 'object') {
      // eslint-disable-next-line no-param-reassign
      options = {
        text: options,
        itemKey: options,
        maxHeight: numbers.DEFAULT_SUBNAV_MAX_HEIGHT,
        // selected: false,
        // isOpen: false,
        link: null,
        items: null,
        icon: '',
        indent: false
      };
    }

    for (const key of _Object$keys(options)) {
      this[key] = options[key];
    }

    if (options.items && _Array$isArray(options.items) && options.items.length) {
      var _context;

      this.items = _mapInstanceProperty(_context = options.items).call(_context, item => new NavItem(item));

      if ('toggleIcon' in options) {
        this.toggleIcon = NavItem.isValidToggleIcon(options.toggleIcon) ? _Object$assign({}, options.toggleIcon) : _Object$assign({}, DEFAULT_TOGGLE_ICON);
      } else {
        this.toggleIcon = _Object$assign({}, DEFAULT_TOGGLE_ICON);
      }
    } else {
      this.items = null;
    }
  }

  static isValidToggleIcon(toggleIcon) {
    return Boolean(toggleIcon && typeof toggleIcon === 'object' && typeof toggleIcon.open === 'string' && toggleIcon.open.length && typeof toggleIcon.closed === 'string' && toggleIcon.closed.length);
  }

}