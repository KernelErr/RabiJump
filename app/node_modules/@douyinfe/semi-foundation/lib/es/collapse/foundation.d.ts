import BaseFoundation, { DefaultAdapter } from '../base/foundation';
import { Motion } from '../utils/type';
export declare type ArgsType<T> = T extends (...args: infer A) => any ? A : never;
export interface CollapseProps {
    activeKey?: string | string[];
    defaultActiveKey?: string | string[];
    accordion?: boolean;
    onChange?: (activeKey: CollapseProps['activeKey'], e: any) => void;
    expandIcon?: any;
    collapseIcon?: any;
    style?: any;
    className?: string;
    keepDOM?: boolean;
    motion?: Motion;
    expandIconPosition?: 'left' | 'right';
}
export interface CollapseState {
    activeSet: Set<string>;
}
export interface CollapseAdapter extends DefaultAdapter<CollapseProps, CollapseState> {
    handleChange: (activeKey: CollapseProps['activeKey'], e: any) => void;
    addActiveKey: (newSet: CollapseState['activeSet']) => void;
}
export default class CollapseFoundation extends BaseFoundation<CollapseAdapter> {
    constructor(adapter: CollapseAdapter);
    initActiveKey(): any;
    handleChange(newKey: string, e: any): void;
}
